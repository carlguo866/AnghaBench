; ModuleID = '/home/carl/AnghaBench/sqlcipher/tool/extr_mksourceid.c_SHA1Transform.c'
source_filename = "/home/carl/AnghaBench/sqlcipher/tool/extr_mksourceid.c_SHA1Transform.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHA1Transform.one = internal global i32 1, align 4
@a = common dso_local global i64 0, align 8
@b = common dso_local global i64 0, align 8
@c = common dso_local global i64 0, align 8
@d = common dso_local global i64 0, align 8
@e = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*, i8*)* @SHA1Transform to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @SHA1Transform(i32* %0, i8* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [5 x i32], align 16
  %6 = alloca [16 x i32], align 16
  store i32* %0, i32** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  %8 = load i8*, i8** %4, align 8
  %9 = call i32 (i32*, ...) @memcpy(i32* %7, i8* %8, i32 64)
  %10 = getelementptr inbounds [5 x i32], [5 x i32]* %5, i64 0, i64 0
  %11 = load i32*, i32** %3, align 8
  %12 = call i32 (i32*, ...) @memcpy(i32* %10, i32* %11, i64 20)
  %13 = load i8, i8* bitcast (i32* @SHA1Transform.one to i8*), align 4
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 1, %14
  br i1 %15, label %16, label %113

16:                                               ; preds = %2
  %17 = load i64, i64* @a, align 8
  %18 = load i64, i64* @b, align 8
  %19 = load i64, i64* @c, align 8
  %20 = load i64, i64* @d, align 8
  %21 = load i64, i64* @e, align 8
  %22 = call i32 @Rl0(i64 %17, i64 %18, i64 %19, i64 %20, i64 %21, i32 0)
  %23 = load i64, i64* @e, align 8
  %24 = load i64, i64* @a, align 8
  %25 = load i64, i64* @b, align 8
  %26 = load i64, i64* @c, align 8
  %27 = load i64, i64* @d, align 8
  %28 = call i32 @Rl0(i64 %23, i64 %24, i64 %25, i64 %26, i64 %27, i32 1)
  %29 = load i64, i64* @d, align 8
  %30 = load i64, i64* @e, align 8
  %31 = load i64, i64* @a, align 8
  %32 = load i64, i64* @b, align 8
  %33 = load i64, i64* @c, align 8
  %34 = call i32 @Rl0(i64 %29, i64 %30, i64 %31, i64 %32, i64 %33, i32 2)
  %35 = load i64, i64* @c, align 8
  %36 = load i64, i64* @d, align 8
  %37 = load i64, i64* @e, align 8
  %38 = load i64, i64* @a, align 8
  %39 = load i64, i64* @b, align 8
  %40 = call i32 @Rl0(i64 %35, i64 %36, i64 %37, i64 %38, i64 %39, i32 3)
  %41 = load i64, i64* @b, align 8
  %42 = load i64, i64* @c, align 8
  %43 = load i64, i64* @d, align 8
  %44 = load i64, i64* @e, align 8
  %45 = load i64, i64* @a, align 8
  %46 = call i32 @Rl0(i64 %41, i64 %42, i64 %43, i64 %44, i64 %45, i32 4)
  %47 = load i64, i64* @a, align 8
  %48 = load i64, i64* @b, align 8
  %49 = load i64, i64* @c, align 8
  %50 = load i64, i64* @d, align 8
  %51 = load i64, i64* @e, align 8
  %52 = call i32 @Rl0(i64 %47, i64 %48, i64 %49, i64 %50, i64 %51, i32 5)
  %53 = load i64, i64* @e, align 8
  %54 = load i64, i64* @a, align 8
  %55 = load i64, i64* @b, align 8
  %56 = load i64, i64* @c, align 8
  %57 = load i64, i64* @d, align 8
  %58 = call i32 @Rl0(i64 %53, i64 %54, i64 %55, i64 %56, i64 %57, i32 6)
  %59 = load i64, i64* @d, align 8
  %60 = load i64, i64* @e, align 8
  %61 = load i64, i64* @a, align 8
  %62 = load i64, i64* @b, align 8
  %63 = load i64, i64* @c, align 8
  %64 = call i32 @Rl0(i64 %59, i64 %60, i64 %61, i64 %62, i64 %63, i32 7)
  %65 = load i64, i64* @c, align 8
  %66 = load i64, i64* @d, align 8
  %67 = load i64, i64* @e, align 8
  %68 = load i64, i64* @a, align 8
  %69 = load i64, i64* @b, align 8
  %70 = call i32 @Rl0(i64 %65, i64 %66, i64 %67, i64 %68, i64 %69, i32 8)
  %71 = load i64, i64* @b, align 8
  %72 = load i64, i64* @c, align 8
  %73 = load i64, i64* @d, align 8
  %74 = load i64, i64* @e, align 8
  %75 = load i64, i64* @a, align 8
  %76 = call i32 @Rl0(i64 %71, i64 %72, i64 %73, i64 %74, i64 %75, i32 9)
  %77 = load i64, i64* @a, align 8
  %78 = load i64, i64* @b, align 8
  %79 = load i64, i64* @c, align 8
  %80 = load i64, i64* @d, align 8
  %81 = load i64, i64* @e, align 8
  %82 = call i32 @Rl0(i64 %77, i64 %78, i64 %79, i64 %80, i64 %81, i32 10)
  %83 = load i64, i64* @e, align 8
  %84 = load i64, i64* @a, align 8
  %85 = load i64, i64* @b, align 8
  %86 = load i64, i64* @c, align 8
  %87 = load i64, i64* @d, align 8
  %88 = call i32 @Rl0(i64 %83, i64 %84, i64 %85, i64 %86, i64 %87, i32 11)
  %89 = load i64, i64* @d, align 8
  %90 = load i64, i64* @e, align 8
  %91 = load i64, i64* @a, align 8
  %92 = load i64, i64* @b, align 8
  %93 = load i64, i64* @c, align 8
  %94 = call i32 @Rl0(i64 %89, i64 %90, i64 %91, i64 %92, i64 %93, i32 12)
  %95 = load i64, i64* @c, align 8
  %96 = load i64, i64* @d, align 8
  %97 = load i64, i64* @e, align 8
  %98 = load i64, i64* @a, align 8
  %99 = load i64, i64* @b, align 8
  %100 = call i32 @Rl0(i64 %95, i64 %96, i64 %97, i64 %98, i64 %99, i32 13)
  %101 = load i64, i64* @b, align 8
  %102 = load i64, i64* @c, align 8
  %103 = load i64, i64* @d, align 8
  %104 = load i64, i64* @e, align 8
  %105 = load i64, i64* @a, align 8
  %106 = call i32 @Rl0(i64 %101, i64 %102, i64 %103, i64 %104, i64 %105, i32 14)
  %107 = load i64, i64* @a, align 8
  %108 = load i64, i64* @b, align 8
  %109 = load i64, i64* @c, align 8
  %110 = load i64, i64* @d, align 8
  %111 = load i64, i64* @e, align 8
  %112 = call i32 @Rl0(i64 %107, i64 %108, i64 %109, i64 %110, i64 %111, i32 15)
  br label %210

113:                                              ; preds = %2
  %114 = load i64, i64* @a, align 8
  %115 = load i64, i64* @b, align 8
  %116 = load i64, i64* @c, align 8
  %117 = load i64, i64* @d, align 8
  %118 = load i64, i64* @e, align 8
  %119 = call i32 @Rb0(i64 %114, i64 %115, i64 %116, i64 %117, i64 %118, i32 0)
  %120 = load i64, i64* @e, align 8
  %121 = load i64, i64* @a, align 8
  %122 = load i64, i64* @b, align 8
  %123 = load i64, i64* @c, align 8
  %124 = load i64, i64* @d, align 8
  %125 = call i32 @Rb0(i64 %120, i64 %121, i64 %122, i64 %123, i64 %124, i32 1)
  %126 = load i64, i64* @d, align 8
  %127 = load i64, i64* @e, align 8
  %128 = load i64, i64* @a, align 8
  %129 = load i64, i64* @b, align 8
  %130 = load i64, i64* @c, align 8
  %131 = call i32 @Rb0(i64 %126, i64 %127, i64 %128, i64 %129, i64 %130, i32 2)
  %132 = load i64, i64* @c, align 8
  %133 = load i64, i64* @d, align 8
  %134 = load i64, i64* @e, align 8
  %135 = load i64, i64* @a, align 8
  %136 = load i64, i64* @b, align 8
  %137 = call i32 @Rb0(i64 %132, i64 %133, i64 %134, i64 %135, i64 %136, i32 3)
  %138 = load i64, i64* @b, align 8
  %139 = load i64, i64* @c, align 8
  %140 = load i64, i64* @d, align 8
  %141 = load i64, i64* @e, align 8
  %142 = load i64, i64* @a, align 8
  %143 = call i32 @Rb0(i64 %138, i64 %139, i64 %140, i64 %141, i64 %142, i32 4)
  %144 = load i64, i64* @a, align 8
  %145 = load i64, i64* @b, align 8
  %146 = load i64, i64* @c, align 8
  %147 = load i64, i64* @d, align 8
  %148 = load i64, i64* @e, align 8
  %149 = call i32 @Rb0(i64 %144, i64 %145, i64 %146, i64 %147, i64 %148, i32 5)
  %150 = load i64, i64* @e, align 8
  %151 = load i64, i64* @a, align 8
  %152 = load i64, i64* @b, align 8
  %153 = load i64, i64* @c, align 8
  %154 = load i64, i64* @d, align 8
  %155 = call i32 @Rb0(i64 %150, i64 %151, i64 %152, i64 %153, i64 %154, i32 6)
  %156 = load i64, i64* @d, align 8
  %157 = load i64, i64* @e, align 8
  %158 = load i64, i64* @a, align 8
  %159 = load i64, i64* @b, align 8
  %160 = load i64, i64* @c, align 8
  %161 = call i32 @Rb0(i64 %156, i64 %157, i64 %158, i64 %159, i64 %160, i32 7)
  %162 = load i64, i64* @c, align 8
  %163 = load i64, i64* @d, align 8
  %164 = load i64, i64* @e, align 8
  %165 = load i64, i64* @a, align 8
  %166 = load i64, i64* @b, align 8
  %167 = call i32 @Rb0(i64 %162, i64 %163, i64 %164, i64 %165, i64 %166, i32 8)
  %168 = load i64, i64* @b, align 8
  %169 = load i64, i64* @c, align 8
  %170 = load i64, i64* @d, align 8
  %171 = load i64, i64* @e, align 8
  %172 = load i64, i64* @a, align 8
  %173 = call i32 @Rb0(i64 %168, i64 %169, i64 %170, i64 %171, i64 %172, i32 9)
  %174 = load i64, i64* @a, align 8
  %175 = load i64, i64* @b, align 8
  %176 = load i64, i64* @c, align 8
  %177 = load i64, i64* @d, align 8
  %178 = load i64, i64* @e, align 8
  %179 = call i32 @Rb0(i64 %174, i64 %175, i64 %176, i64 %177, i64 %178, i32 10)
  %180 = load i64, i64* @e, align 8
  %181 = load i64, i64* @a, align 8
  %182 = load i64, i64* @b, align 8
  %183 = load i64, i64* @c, align 8
  %184 = load i64, i64* @d, align 8
  %185 = call i32 @Rb0(i64 %180, i64 %181, i64 %182, i64 %183, i64 %184, i32 11)
  %186 = load i64, i64* @d, align 8
  %187 = load i64, i64* @e, align 8
  %188 = load i64, i64* @a, align 8
  %189 = load i64, i64* @b, align 8
  %190 = load i64, i64* @c, align 8
  %191 = call i32 @Rb0(i64 %186, i64 %187, i64 %188, i64 %189, i64 %190, i32 12)
  %192 = load i64, i64* @c, align 8
  %193 = load i64, i64* @d, align 8
  %194 = load i64, i64* @e, align 8
  %195 = load i64, i64* @a, align 8
  %196 = load i64, i64* @b, align 8
  %197 = call i32 @Rb0(i64 %192, i64 %193, i64 %194, i64 %195, i64 %196, i32 13)
  %198 = load i64, i64* @b, align 8
  %199 = load i64, i64* @c, align 8
  %200 = load i64, i64* @d, align 8
  %201 = load i64, i64* @e, align 8
  %202 = load i64, i64* @a, align 8
  %203 = call i32 @Rb0(i64 %198, i64 %199, i64 %200, i64 %201, i64 %202, i32 14)
  %204 = load i64, i64* @a, align 8
  %205 = load i64, i64* @b, align 8
  %206 = load i64, i64* @c, align 8
  %207 = load i64, i64* @d, align 8
  %208 = load i64, i64* @e, align 8
  %209 = call i32 @Rb0(i64 %204, i64 %205, i64 %206, i64 %207, i64 %208, i32 15)
  br label %210

210:                                              ; preds = %113, %16
  %211 = load i64, i64* @e, align 8
  %212 = load i64, i64* @a, align 8
  %213 = load i64, i64* @b, align 8
  %214 = load i64, i64* @c, align 8
  %215 = load i64, i64* @d, align 8
  %216 = call i32 @R1(i64 %211, i64 %212, i64 %213, i64 %214, i64 %215, i32 16)
  %217 = load i64, i64* @d, align 8
  %218 = load i64, i64* @e, align 8
  %219 = load i64, i64* @a, align 8
  %220 = load i64, i64* @b, align 8
  %221 = load i64, i64* @c, align 8
  %222 = call i32 @R1(i64 %217, i64 %218, i64 %219, i64 %220, i64 %221, i32 17)
  %223 = load i64, i64* @c, align 8
  %224 = load i64, i64* @d, align 8
  %225 = load i64, i64* @e, align 8
  %226 = load i64, i64* @a, align 8
  %227 = load i64, i64* @b, align 8
  %228 = call i32 @R1(i64 %223, i64 %224, i64 %225, i64 %226, i64 %227, i32 18)
  %229 = load i64, i64* @b, align 8
  %230 = load i64, i64* @c, align 8
  %231 = load i64, i64* @d, align 8
  %232 = load i64, i64* @e, align 8
  %233 = load i64, i64* @a, align 8
  %234 = call i32 @R1(i64 %229, i64 %230, i64 %231, i64 %232, i64 %233, i32 19)
  %235 = load i64, i64* @a, align 8
  %236 = load i64, i64* @b, align 8
  %237 = load i64, i64* @c, align 8
  %238 = load i64, i64* @d, align 8
  %239 = load i64, i64* @e, align 8
  %240 = call i32 @R2(i64 %235, i64 %236, i64 %237, i64 %238, i64 %239, i32 20)
  %241 = load i64, i64* @e, align 8
  %242 = load i64, i64* @a, align 8
  %243 = load i64, i64* @b, align 8
  %244 = load i64, i64* @c, align 8
  %245 = load i64, i64* @d, align 8
  %246 = call i32 @R2(i64 %241, i64 %242, i64 %243, i64 %244, i64 %245, i32 21)
  %247 = load i64, i64* @d, align 8
  %248 = load i64, i64* @e, align 8
  %249 = load i64, i64* @a, align 8
  %250 = load i64, i64* @b, align 8
  %251 = load i64, i64* @c, align 8
  %252 = call i32 @R2(i64 %247, i64 %248, i64 %249, i64 %250, i64 %251, i32 22)
  %253 = load i64, i64* @c, align 8
  %254 = load i64, i64* @d, align 8
  %255 = load i64, i64* @e, align 8
  %256 = load i64, i64* @a, align 8
  %257 = load i64, i64* @b, align 8
  %258 = call i32 @R2(i64 %253, i64 %254, i64 %255, i64 %256, i64 %257, i32 23)
  %259 = load i64, i64* @b, align 8
  %260 = load i64, i64* @c, align 8
  %261 = load i64, i64* @d, align 8
  %262 = load i64, i64* @e, align 8
  %263 = load i64, i64* @a, align 8
  %264 = call i32 @R2(i64 %259, i64 %260, i64 %261, i64 %262, i64 %263, i32 24)
  %265 = load i64, i64* @a, align 8
  %266 = load i64, i64* @b, align 8
  %267 = load i64, i64* @c, align 8
  %268 = load i64, i64* @d, align 8
  %269 = load i64, i64* @e, align 8
  %270 = call i32 @R2(i64 %265, i64 %266, i64 %267, i64 %268, i64 %269, i32 25)
  %271 = load i64, i64* @e, align 8
  %272 = load i64, i64* @a, align 8
  %273 = load i64, i64* @b, align 8
  %274 = load i64, i64* @c, align 8
  %275 = load i64, i64* @d, align 8
  %276 = call i32 @R2(i64 %271, i64 %272, i64 %273, i64 %274, i64 %275, i32 26)
  %277 = load i64, i64* @d, align 8
  %278 = load i64, i64* @e, align 8
  %279 = load i64, i64* @a, align 8
  %280 = load i64, i64* @b, align 8
  %281 = load i64, i64* @c, align 8
  %282 = call i32 @R2(i64 %277, i64 %278, i64 %279, i64 %280, i64 %281, i32 27)
  %283 = load i64, i64* @c, align 8
  %284 = load i64, i64* @d, align 8
  %285 = load i64, i64* @e, align 8
  %286 = load i64, i64* @a, align 8
  %287 = load i64, i64* @b, align 8
  %288 = call i32 @R2(i64 %283, i64 %284, i64 %285, i64 %286, i64 %287, i32 28)
  %289 = load i64, i64* @b, align 8
  %290 = load i64, i64* @c, align 8
  %291 = load i64, i64* @d, align 8
  %292 = load i64, i64* @e, align 8
  %293 = load i64, i64* @a, align 8
  %294 = call i32 @R2(i64 %289, i64 %290, i64 %291, i64 %292, i64 %293, i32 29)
  %295 = load i64, i64* @a, align 8
  %296 = load i64, i64* @b, align 8
  %297 = load i64, i64* @c, align 8
  %298 = load i64, i64* @d, align 8
  %299 = load i64, i64* @e, align 8
  %300 = call i32 @R2(i64 %295, i64 %296, i64 %297, i64 %298, i64 %299, i32 30)
  %301 = load i64, i64* @e, align 8
  %302 = load i64, i64* @a, align 8
  %303 = load i64, i64* @b, align 8
  %304 = load i64, i64* @c, align 8
  %305 = load i64, i64* @d, align 8
  %306 = call i32 @R2(i64 %301, i64 %302, i64 %303, i64 %304, i64 %305, i32 31)
  %307 = load i64, i64* @d, align 8
  %308 = load i64, i64* @e, align 8
  %309 = load i64, i64* @a, align 8
  %310 = load i64, i64* @b, align 8
  %311 = load i64, i64* @c, align 8
  %312 = call i32 @R2(i64 %307, i64 %308, i64 %309, i64 %310, i64 %311, i32 32)
  %313 = load i64, i64* @c, align 8
  %314 = load i64, i64* @d, align 8
  %315 = load i64, i64* @e, align 8
  %316 = load i64, i64* @a, align 8
  %317 = load i64, i64* @b, align 8
  %318 = call i32 @R2(i64 %313, i64 %314, i64 %315, i64 %316, i64 %317, i32 33)
  %319 = load i64, i64* @b, align 8
  %320 = load i64, i64* @c, align 8
  %321 = load i64, i64* @d, align 8
  %322 = load i64, i64* @e, align 8
  %323 = load i64, i64* @a, align 8
  %324 = call i32 @R2(i64 %319, i64 %320, i64 %321, i64 %322, i64 %323, i32 34)
  %325 = load i64, i64* @a, align 8
  %326 = load i64, i64* @b, align 8
  %327 = load i64, i64* @c, align 8
  %328 = load i64, i64* @d, align 8
  %329 = load i64, i64* @e, align 8
  %330 = call i32 @R2(i64 %325, i64 %326, i64 %327, i64 %328, i64 %329, i32 35)
  %331 = load i64, i64* @e, align 8
  %332 = load i64, i64* @a, align 8
  %333 = load i64, i64* @b, align 8
  %334 = load i64, i64* @c, align 8
  %335 = load i64, i64* @d, align 8
  %336 = call i32 @R2(i64 %331, i64 %332, i64 %333, i64 %334, i64 %335, i32 36)
  %337 = load i64, i64* @d, align 8
  %338 = load i64, i64* @e, align 8
  %339 = load i64, i64* @a, align 8
  %340 = load i64, i64* @b, align 8
  %341 = load i64, i64* @c, align 8
  %342 = call i32 @R2(i64 %337, i64 %338, i64 %339, i64 %340, i64 %341, i32 37)
  %343 = load i64, i64* @c, align 8
  %344 = load i64, i64* @d, align 8
  %345 = load i64, i64* @e, align 8
  %346 = load i64, i64* @a, align 8
  %347 = load i64, i64* @b, align 8
  %348 = call i32 @R2(i64 %343, i64 %344, i64 %345, i64 %346, i64 %347, i32 38)
  %349 = load i64, i64* @b, align 8
  %350 = load i64, i64* @c, align 8
  %351 = load i64, i64* @d, align 8
  %352 = load i64, i64* @e, align 8
  %353 = load i64, i64* @a, align 8
  %354 = call i32 @R2(i64 %349, i64 %350, i64 %351, i64 %352, i64 %353, i32 39)
  %355 = load i64, i64* @a, align 8
  %356 = load i64, i64* @b, align 8
  %357 = load i64, i64* @c, align 8
  %358 = load i64, i64* @d, align 8
  %359 = load i64, i64* @e, align 8
  %360 = call i32 @R3(i64 %355, i64 %356, i64 %357, i64 %358, i64 %359, i32 40)
  %361 = load i64, i64* @e, align 8
  %362 = load i64, i64* @a, align 8
  %363 = load i64, i64* @b, align 8
  %364 = load i64, i64* @c, align 8
  %365 = load i64, i64* @d, align 8
  %366 = call i32 @R3(i64 %361, i64 %362, i64 %363, i64 %364, i64 %365, i32 41)
  %367 = load i64, i64* @d, align 8
  %368 = load i64, i64* @e, align 8
  %369 = load i64, i64* @a, align 8
  %370 = load i64, i64* @b, align 8
  %371 = load i64, i64* @c, align 8
  %372 = call i32 @R3(i64 %367, i64 %368, i64 %369, i64 %370, i64 %371, i32 42)
  %373 = load i64, i64* @c, align 8
  %374 = load i64, i64* @d, align 8
  %375 = load i64, i64* @e, align 8
  %376 = load i64, i64* @a, align 8
  %377 = load i64, i64* @b, align 8
  %378 = call i32 @R3(i64 %373, i64 %374, i64 %375, i64 %376, i64 %377, i32 43)
  %379 = load i64, i64* @b, align 8
  %380 = load i64, i64* @c, align 8
  %381 = load i64, i64* @d, align 8
  %382 = load i64, i64* @e, align 8
  %383 = load i64, i64* @a, align 8
  %384 = call i32 @R3(i64 %379, i64 %380, i64 %381, i64 %382, i64 %383, i32 44)
  %385 = load i64, i64* @a, align 8
  %386 = load i64, i64* @b, align 8
  %387 = load i64, i64* @c, align 8
  %388 = load i64, i64* @d, align 8
  %389 = load i64, i64* @e, align 8
  %390 = call i32 @R3(i64 %385, i64 %386, i64 %387, i64 %388, i64 %389, i32 45)
  %391 = load i64, i64* @e, align 8
  %392 = load i64, i64* @a, align 8
  %393 = load i64, i64* @b, align 8
  %394 = load i64, i64* @c, align 8
  %395 = load i64, i64* @d, align 8
  %396 = call i32 @R3(i64 %391, i64 %392, i64 %393, i64 %394, i64 %395, i32 46)
  %397 = load i64, i64* @d, align 8
  %398 = load i64, i64* @e, align 8
  %399 = load i64, i64* @a, align 8
  %400 = load i64, i64* @b, align 8
  %401 = load i64, i64* @c, align 8
  %402 = call i32 @R3(i64 %397, i64 %398, i64 %399, i64 %400, i64 %401, i32 47)
  %403 = load i64, i64* @c, align 8
  %404 = load i64, i64* @d, align 8
  %405 = load i64, i64* @e, align 8
  %406 = load i64, i64* @a, align 8
  %407 = load i64, i64* @b, align 8
  %408 = call i32 @R3(i64 %403, i64 %404, i64 %405, i64 %406, i64 %407, i32 48)
  %409 = load i64, i64* @b, align 8
  %410 = load i64, i64* @c, align 8
  %411 = load i64, i64* @d, align 8
  %412 = load i64, i64* @e, align 8
  %413 = load i64, i64* @a, align 8
  %414 = call i32 @R3(i64 %409, i64 %410, i64 %411, i64 %412, i64 %413, i32 49)
  %415 = load i64, i64* @a, align 8
  %416 = load i64, i64* @b, align 8
  %417 = load i64, i64* @c, align 8
  %418 = load i64, i64* @d, align 8
  %419 = load i64, i64* @e, align 8
  %420 = call i32 @R3(i64 %415, i64 %416, i64 %417, i64 %418, i64 %419, i32 50)
  %421 = load i64, i64* @e, align 8
  %422 = load i64, i64* @a, align 8
  %423 = load i64, i64* @b, align 8
  %424 = load i64, i64* @c, align 8
  %425 = load i64, i64* @d, align 8
  %426 = call i32 @R3(i64 %421, i64 %422, i64 %423, i64 %424, i64 %425, i32 51)
  %427 = load i64, i64* @d, align 8
  %428 = load i64, i64* @e, align 8
  %429 = load i64, i64* @a, align 8
  %430 = load i64, i64* @b, align 8
  %431 = load i64, i64* @c, align 8
  %432 = call i32 @R3(i64 %427, i64 %428, i64 %429, i64 %430, i64 %431, i32 52)
  %433 = load i64, i64* @c, align 8
  %434 = load i64, i64* @d, align 8
  %435 = load i64, i64* @e, align 8
  %436 = load i64, i64* @a, align 8
  %437 = load i64, i64* @b, align 8
  %438 = call i32 @R3(i64 %433, i64 %434, i64 %435, i64 %436, i64 %437, i32 53)
  %439 = load i64, i64* @b, align 8
  %440 = load i64, i64* @c, align 8
  %441 = load i64, i64* @d, align 8
  %442 = load i64, i64* @e, align 8
  %443 = load i64, i64* @a, align 8
  %444 = call i32 @R3(i64 %439, i64 %440, i64 %441, i64 %442, i64 %443, i32 54)
  %445 = load i64, i64* @a, align 8
  %446 = load i64, i64* @b, align 8
  %447 = load i64, i64* @c, align 8
  %448 = load i64, i64* @d, align 8
  %449 = load i64, i64* @e, align 8
  %450 = call i32 @R3(i64 %445, i64 %446, i64 %447, i64 %448, i64 %449, i32 55)
  %451 = load i64, i64* @e, align 8
  %452 = load i64, i64* @a, align 8
  %453 = load i64, i64* @b, align 8
  %454 = load i64, i64* @c, align 8
  %455 = load i64, i64* @d, align 8
  %456 = call i32 @R3(i64 %451, i64 %452, i64 %453, i64 %454, i64 %455, i32 56)
  %457 = load i64, i64* @d, align 8
  %458 = load i64, i64* @e, align 8
  %459 = load i64, i64* @a, align 8
  %460 = load i64, i64* @b, align 8
  %461 = load i64, i64* @c, align 8
  %462 = call i32 @R3(i64 %457, i64 %458, i64 %459, i64 %460, i64 %461, i32 57)
  %463 = load i64, i64* @c, align 8
  %464 = load i64, i64* @d, align 8
  %465 = load i64, i64* @e, align 8
  %466 = load i64, i64* @a, align 8
  %467 = load i64, i64* @b, align 8
  %468 = call i32 @R3(i64 %463, i64 %464, i64 %465, i64 %466, i64 %467, i32 58)
  %469 = load i64, i64* @b, align 8
  %470 = load i64, i64* @c, align 8
  %471 = load i64, i64* @d, align 8
  %472 = load i64, i64* @e, align 8
  %473 = load i64, i64* @a, align 8
  %474 = call i32 @R3(i64 %469, i64 %470, i64 %471, i64 %472, i64 %473, i32 59)
  %475 = load i64, i64* @a, align 8
  %476 = load i64, i64* @b, align 8
  %477 = load i64, i64* @c, align 8
  %478 = load i64, i64* @d, align 8
  %479 = load i64, i64* @e, align 8
  %480 = call i32 @R4(i64 %475, i64 %476, i64 %477, i64 %478, i64 %479, i32 60)
  %481 = load i64, i64* @e, align 8
  %482 = load i64, i64* @a, align 8
  %483 = load i64, i64* @b, align 8
  %484 = load i64, i64* @c, align 8
  %485 = load i64, i64* @d, align 8
  %486 = call i32 @R4(i64 %481, i64 %482, i64 %483, i64 %484, i64 %485, i32 61)
  %487 = load i64, i64* @d, align 8
  %488 = load i64, i64* @e, align 8
  %489 = load i64, i64* @a, align 8
  %490 = load i64, i64* @b, align 8
  %491 = load i64, i64* @c, align 8
  %492 = call i32 @R4(i64 %487, i64 %488, i64 %489, i64 %490, i64 %491, i32 62)
  %493 = load i64, i64* @c, align 8
  %494 = load i64, i64* @d, align 8
  %495 = load i64, i64* @e, align 8
  %496 = load i64, i64* @a, align 8
  %497 = load i64, i64* @b, align 8
  %498 = call i32 @R4(i64 %493, i64 %494, i64 %495, i64 %496, i64 %497, i32 63)
  %499 = load i64, i64* @b, align 8
  %500 = load i64, i64* @c, align 8
  %501 = load i64, i64* @d, align 8
  %502 = load i64, i64* @e, align 8
  %503 = load i64, i64* @a, align 8
  %504 = call i32 @R4(i64 %499, i64 %500, i64 %501, i64 %502, i64 %503, i32 64)
  %505 = load i64, i64* @a, align 8
  %506 = load i64, i64* @b, align 8
  %507 = load i64, i64* @c, align 8
  %508 = load i64, i64* @d, align 8
  %509 = load i64, i64* @e, align 8
  %510 = call i32 @R4(i64 %505, i64 %506, i64 %507, i64 %508, i64 %509, i32 65)
  %511 = load i64, i64* @e, align 8
  %512 = load i64, i64* @a, align 8
  %513 = load i64, i64* @b, align 8
  %514 = load i64, i64* @c, align 8
  %515 = load i64, i64* @d, align 8
  %516 = call i32 @R4(i64 %511, i64 %512, i64 %513, i64 %514, i64 %515, i32 66)
  %517 = load i64, i64* @d, align 8
  %518 = load i64, i64* @e, align 8
  %519 = load i64, i64* @a, align 8
  %520 = load i64, i64* @b, align 8
  %521 = load i64, i64* @c, align 8
  %522 = call i32 @R4(i64 %517, i64 %518, i64 %519, i64 %520, i64 %521, i32 67)
  %523 = load i64, i64* @c, align 8
  %524 = load i64, i64* @d, align 8
  %525 = load i64, i64* @e, align 8
  %526 = load i64, i64* @a, align 8
  %527 = load i64, i64* @b, align 8
  %528 = call i32 @R4(i64 %523, i64 %524, i64 %525, i64 %526, i64 %527, i32 68)
  %529 = load i64, i64* @b, align 8
  %530 = load i64, i64* @c, align 8
  %531 = load i64, i64* @d, align 8
  %532 = load i64, i64* @e, align 8
  %533 = load i64, i64* @a, align 8
  %534 = call i32 @R4(i64 %529, i64 %530, i64 %531, i64 %532, i64 %533, i32 69)
  %535 = load i64, i64* @a, align 8
  %536 = load i64, i64* @b, align 8
  %537 = load i64, i64* @c, align 8
  %538 = load i64, i64* @d, align 8
  %539 = load i64, i64* @e, align 8
  %540 = call i32 @R4(i64 %535, i64 %536, i64 %537, i64 %538, i64 %539, i32 70)
  %541 = load i64, i64* @e, align 8
  %542 = load i64, i64* @a, align 8
  %543 = load i64, i64* @b, align 8
  %544 = load i64, i64* @c, align 8
  %545 = load i64, i64* @d, align 8
  %546 = call i32 @R4(i64 %541, i64 %542, i64 %543, i64 %544, i64 %545, i32 71)
  %547 = load i64, i64* @d, align 8
  %548 = load i64, i64* @e, align 8
  %549 = load i64, i64* @a, align 8
  %550 = load i64, i64* @b, align 8
  %551 = load i64, i64* @c, align 8
  %552 = call i32 @R4(i64 %547, i64 %548, i64 %549, i64 %550, i64 %551, i32 72)
  %553 = load i64, i64* @c, align 8
  %554 = load i64, i64* @d, align 8
  %555 = load i64, i64* @e, align 8
  %556 = load i64, i64* @a, align 8
  %557 = load i64, i64* @b, align 8
  %558 = call i32 @R4(i64 %553, i64 %554, i64 %555, i64 %556, i64 %557, i32 73)
  %559 = load i64, i64* @b, align 8
  %560 = load i64, i64* @c, align 8
  %561 = load i64, i64* @d, align 8
  %562 = load i64, i64* @e, align 8
  %563 = load i64, i64* @a, align 8
  %564 = call i32 @R4(i64 %559, i64 %560, i64 %561, i64 %562, i64 %563, i32 74)
  %565 = load i64, i64* @a, align 8
  %566 = load i64, i64* @b, align 8
  %567 = load i64, i64* @c, align 8
  %568 = load i64, i64* @d, align 8
  %569 = load i64, i64* @e, align 8
  %570 = call i32 @R4(i64 %565, i64 %566, i64 %567, i64 %568, i64 %569, i32 75)
  %571 = load i64, i64* @e, align 8
  %572 = load i64, i64* @a, align 8
  %573 = load i64, i64* @b, align 8
  %574 = load i64, i64* @c, align 8
  %575 = load i64, i64* @d, align 8
  %576 = call i32 @R4(i64 %571, i64 %572, i64 %573, i64 %574, i64 %575, i32 76)
  %577 = load i64, i64* @d, align 8
  %578 = load i64, i64* @e, align 8
  %579 = load i64, i64* @a, align 8
  %580 = load i64, i64* @b, align 8
  %581 = load i64, i64* @c, align 8
  %582 = call i32 @R4(i64 %577, i64 %578, i64 %579, i64 %580, i64 %581, i32 77)
  %583 = load i64, i64* @c, align 8
  %584 = load i64, i64* @d, align 8
  %585 = load i64, i64* @e, align 8
  %586 = load i64, i64* @a, align 8
  %587 = load i64, i64* @b, align 8
  %588 = call i32 @R4(i64 %583, i64 %584, i64 %585, i64 %586, i64 %587, i32 78)
  %589 = load i64, i64* @b, align 8
  %590 = load i64, i64* @c, align 8
  %591 = load i64, i64* @d, align 8
  %592 = load i64, i64* @e, align 8
  %593 = load i64, i64* @a, align 8
  %594 = call i32 @R4(i64 %589, i64 %590, i64 %591, i64 %592, i64 %593, i32 79)
  %595 = load i64, i64* @a, align 8
  %596 = load i32*, i32** %3, align 8
  %597 = getelementptr inbounds i32, i32* %596, i64 0
  %598 = load i32, i32* %597, align 4
  %599 = zext i32 %598 to i64
  %600 = add nsw i64 %599, %595
  %601 = trunc i64 %600 to i32
  store i32 %601, i32* %597, align 4
  %602 = load i64, i64* @b, align 8
  %603 = load i32*, i32** %3, align 8
  %604 = getelementptr inbounds i32, i32* %603, i64 1
  %605 = load i32, i32* %604, align 4
  %606 = zext i32 %605 to i64
  %607 = add nsw i64 %606, %602
  %608 = trunc i64 %607 to i32
  store i32 %608, i32* %604, align 4
  %609 = load i64, i64* @c, align 8
  %610 = load i32*, i32** %3, align 8
  %611 = getelementptr inbounds i32, i32* %610, i64 2
  %612 = load i32, i32* %611, align 4
  %613 = zext i32 %612 to i64
  %614 = add nsw i64 %613, %609
  %615 = trunc i64 %614 to i32
  store i32 %615, i32* %611, align 4
  %616 = load i64, i64* @d, align 8
  %617 = load i32*, i32** %3, align 8
  %618 = getelementptr inbounds i32, i32* %617, i64 3
  %619 = load i32, i32* %618, align 4
  %620 = zext i32 %619 to i64
  %621 = add nsw i64 %620, %616
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %618, align 4
  %623 = load i64, i64* @e, align 8
  %624 = load i32*, i32** %3, align 8
  %625 = getelementptr inbounds i32, i32* %624, i64 4
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  %628 = add nsw i64 %627, %623
  %629 = trunc i64 %628 to i32
  store i32 %629, i32* %625, align 4
  ret void
}

declare dso_local i32 @memcpy(i32*, ...) #1

declare dso_local i32 @Rl0(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @Rb0(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @R1(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @R2(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @R3(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @R4(i64, i64, i64, i64, i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
