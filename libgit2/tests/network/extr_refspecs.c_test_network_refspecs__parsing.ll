; ModuleID = '/home/carl/AnghaBench/libgit2/tests/network/extr_refspecs.c_test_network_refspecs__parsing.c'
source_filename = "/home/carl/AnghaBench/libgit2/tests/network/extr_refspecs.c_test_network_refspecs__parsing.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GIT_DIRECTION_PUSH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"+:\00", align 1
@GIT_DIRECTION_FETCH = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"refs/heads/*:refs/remotes/frotz/*\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"refs/heads/*:refs/remotes/frotz\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"refs/heads:refs/remotes/frotz/*\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"refs/heads/master:refs/remotes/frotz/xyzzy\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"refs/heads/master::refs/remotes/frotz/xyzzy\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"refs/heads/maste :refs/remotes/frotz/xyzzy\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"master~1:refs/remotes/frotz/backup\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"HEAD~4:refs/remotes/frotz/new\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"refs/heads/ nitfol\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"HEAD:\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"refs/heads/ nitfol:\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c":refs/remotes/frotz/deleteme\00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c":refs/remotes/frotz/HEAD-to-me\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c":refs/remotes/frotz/delete me\00", align 1
@.str.19 = private unnamed_addr constant [31 x i8] c":refs/remotes/frotz/HEAD to me\00", align 1
@.str.20 = private unnamed_addr constant [48 x i8] c"refs/heads/*/for-linus:refs/remotes/mine/*-blah\00", align 1
@.str.21 = private unnamed_addr constant [42 x i8] c"refs/heads*/for-linus:refs/remotes/mine/*\00", align 1
@.str.22 = private unnamed_addr constant [45 x i8] c"refs/heads/*/*/for-linus:refs/remotes/mine/*\00", align 1
@.str.23 = private unnamed_addr constant [45 x i8] c"refs/heads/*g*/for-linus:refs/remotes/mine/*\00", align 1
@.str.24 = private unnamed_addr constant [43 x i8] c"refs/heads/*/for-linus:refs/remotes/mine/*\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"master\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"refs/pull/*/head:refs/remotes/origin/pr/*\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @test_network_refspecs__parsing() #0 {
  %1 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %2 = call i32 @assert_refspec(i32 %1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 0)
  %3 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %4 = call i32 @assert_refspec(i32 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %5 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %6 = call i32 @assert_refspec(i32 %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 0)
  %7 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %8 = call i32 @assert_refspec(i32 %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 1)
  %9 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %10 = call i32 @assert_refspec(i32 %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 1)
  %11 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %12 = call i32 @assert_refspec(i32 %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %13 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %14 = call i32 @assert_refspec(i32 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 0)
  %15 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %16 = call i32 @assert_refspec(i32 %15, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 1)
  %17 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %18 = call i32 @assert_refspec(i32 %17, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 0)
  %19 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %20 = call i32 @assert_refspec(i32 %19, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 0)
  %21 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %22 = call i32 @assert_refspec(i32 %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i32 1)
  %23 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %24 = call i32 @assert_refspec(i32 %23, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 1)
  %25 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %26 = call i32 @assert_refspec(i32 %25, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 0)
  %27 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %28 = call i32 @assert_refspec(i32 %27, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 0)
  %29 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %30 = call i32 @assert_refspec(i32 %29, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i32 1)
  %31 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %32 = call i32 @assert_refspec(i32 %31, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i32 0)
  %33 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %34 = call i32 @assert_refspec(i32 %33, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0), i32 0)
  %35 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %36 = call i32 @assert_refspec(i32 %35, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0), i32 1)
  %37 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %38 = call i32 @assert_refspec(i32 %37, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0), i32 0)
  %39 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %40 = call i32 @assert_refspec(i32 %39, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i32 1)
  %41 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %42 = call i32 @assert_refspec(i32 %41, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i32 0)
  %43 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %44 = call i32 @assert_refspec(i32 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i32 1)
  %45 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %46 = call i32 @assert_refspec(i32 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i32 1)
  %47 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %48 = call i32 @assert_refspec(i32 %47, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i32 0)
  %49 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %50 = call i32 @assert_refspec(i32 %49, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i32 0)
  %51 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %52 = call i32 @assert_refspec(i32 %51, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i32 0)
  %53 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %54 = call i32 @assert_refspec(i32 %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i32 1)
  %55 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %56 = call i32 @assert_refspec(i32 %55, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i32 0)
  %57 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %58 = call i32 @assert_refspec(i32 %57, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i32 0)
  %59 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %60 = call i32 @assert_refspec(i32 %59, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i32 1)
  %61 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %62 = call i32 @assert_refspec(i32 %61, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0), i32 1)
  %63 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %64 = call i32 @assert_refspec(i32 %63, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i32 0)
  %65 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %66 = call i32 @assert_refspec(i32 %65, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.19, i64 0, i64 0), i32 0)
  %67 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %68 = call i32 @assert_refspec(i32 %67, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20, i64 0, i64 0), i32 1)
  %69 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %70 = call i32 @assert_refspec(i32 %69, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20, i64 0, i64 0), i32 1)
  %71 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %72 = call i32 @assert_refspec(i32 %71, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i64 0, i64 0), i32 1)
  %73 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %74 = call i32 @assert_refspec(i32 %73, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i64 0, i64 0), i32 1)
  %75 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %76 = call i32 @assert_refspec(i32 %75, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.22, i64 0, i64 0), i32 0)
  %77 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %78 = call i32 @assert_refspec(i32 %77, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.22, i64 0, i64 0), i32 0)
  %79 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %80 = call i32 @assert_refspec(i32 %79, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.23, i64 0, i64 0), i32 0)
  %81 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %82 = call i32 @assert_refspec(i32 %81, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.23, i64 0, i64 0), i32 0)
  %83 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %84 = call i32 @assert_refspec(i32 %83, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.24, i64 0, i64 0), i32 1)
  %85 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %86 = call i32 @assert_refspec(i32 %85, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.24, i64 0, i64 0), i32 1)
  %87 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %88 = call i32 @assert_refspec(i32 %87, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i32 1)
  %89 = load i32, i32* @GIT_DIRECTION_PUSH, align 4
  %90 = call i32 @assert_refspec(i32 %89, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i32 1)
  %91 = load i32, i32* @GIT_DIRECTION_FETCH, align 4
  %92 = call i32 @assert_refspec(i32 %91, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i64 0, i64 0), i32 1)
  ret void
}

declare dso_local i32 @assert_refspec(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
