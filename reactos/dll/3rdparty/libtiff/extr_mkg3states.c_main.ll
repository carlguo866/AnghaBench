; ModuleID = '/home/carl/AnghaBench/reactos/dll/3rdparty/libtiff/extr_mkg3states.c_main.c'
source_filename = "/home/carl/AnghaBench/reactos/dll/3rdparty/libtiff/extr_mkg3states.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"c:s:bp\00", align 1
@optarg = external dso_local global i8*, align 8
@const_class = common dso_local global i8* null, align 8
@storage_class = common dso_local global i8* null, align 8
@packoutput = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@prebrace = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@postbrace = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [50 x i8] c"usage: %s [-c const] [-s storage] [-p] [-b] file\0A\00", align 1
@optind = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [11 x i8] c"g3states.h\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"%s: %s: Cannot create output file.\0A\00", align 1
@MainTable = common dso_local global i32 0, align 4
@Pass = common dso_local global i32 0, align 4
@S_Pass = common dso_local global i32 0, align 4
@Horiz = common dso_local global i32 0, align 4
@S_Horiz = common dso_local global i32 0, align 4
@V0 = common dso_local global i32 0, align 4
@S_V0 = common dso_local global i32 0, align 4
@VR = common dso_local global i32 0, align 4
@S_VR = common dso_local global i32 0, align 4
@VL = common dso_local global i32 0, align 4
@S_VL = common dso_local global i32 0, align 4
@Ext = common dso_local global i32 0, align 4
@S_Ext = common dso_local global i32 0, align 4
@EOLV = common dso_local global i32 0, align 4
@S_EOL = common dso_local global i32 0, align 4
@WhiteTable = common dso_local global i32 0, align 4
@MakeUpW = common dso_local global i32 0, align 4
@S_MakeUpW = common dso_local global i32 0, align 4
@MakeUp = common dso_local global i32 0, align 4
@S_MakeUp = common dso_local global i32 0, align 4
@TermW = common dso_local global i32 0, align 4
@S_TermW = common dso_local global i32 0, align 4
@EOLH = common dso_local global i32 0, align 4
@BlackTable = common dso_local global i32 0, align 4
@MakeUpB = common dso_local global i32 0, align 4
@S_MakeUpB = common dso_local global i32 0, align 4
@TermB = common dso_local global i32 0, align 4
@S_TermB = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [58 x i8] c"/* WARNING, this file was automatically generated by the\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"    mkg3states program */\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"#include \22tiff.h\22\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"#include \22tif_fax3.h\22\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"TIFFFaxMainTable\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"TIFFFaxWhiteTable\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"TIFFFaxBlackTable\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  br label %9

9:                                                ; preds = %30, %2
  %10 = load i32, i32* %4, align 4
  %11 = load i8**, i8*** %5, align 8
  %12 = call i32 @getopt(i32 %10, i8** %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i32 %12, i32* %8, align 4
  %13 = icmp ne i32 %12, -1
  br i1 %13, label %14, label %31

14:                                               ; preds = %9
  %15 = load i32, i32* %8, align 4
  switch i32 %15, label %30 [
    i32 99, label %16
    i32 115, label %18
    i32 112, label %20
    i32 98, label %21
    i32 63, label %22
  ]

16:                                               ; preds = %14
  %17 = load i8*, i8** @optarg, align 8
  store i8* %17, i8** @const_class, align 8
  br label %30

18:                                               ; preds = %14
  %19 = load i8*, i8** @optarg, align 8
  store i8* %19, i8** @storage_class, align 8
  br label %30

20:                                               ; preds = %14
  store i32 0, i32* @packoutput, align 4
  br label %30

21:                                               ; preds = %14
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8** @prebrace, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8** @postbrace, align 8
  br label %30

22:                                               ; preds = %14
  %23 = load i32, i32* @stderr, align 4
  %24 = sext i32 %23 to i64
  %25 = inttoptr i64 %24 to i32*
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  store i32 -1, i32* %3, align 4
  br label %137

30:                                               ; preds = %14, %21, %20, %18, %16
  br label %9

31:                                               ; preds = %9
  %32 = load i32, i32* @optind, align 4
  %33 = load i32, i32* %4, align 4
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %35, label %41

35:                                               ; preds = %31
  %36 = load i8**, i8*** %5, align 8
  %37 = load i32, i32* @optind, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8*, i8** %36, i64 %38
  %40 = load i8*, i8** %39, align 8
  br label %42

41:                                               ; preds = %31
  br label %42

42:                                               ; preds = %41, %35
  %43 = phi i8* [ %40, %35 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), %41 ]
  store i8* %43, i8** %7, align 8
  %44 = load i8*, i8** %7, align 8
  %45 = call i32* @fopen(i8* %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %45, i32** %6, align 8
  %46 = load i32*, i32** %6, align 8
  %47 = icmp eq i32* %46, null
  br i1 %47, label %48, label %57

48:                                               ; preds = %42
  %49 = load i32, i32* @stderr, align 4
  %50 = sext i32 %49 to i64
  %51 = inttoptr i64 %50 to i32*
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i8*, i8** %7, align 8
  %56 = call i32 (i32*, i8*, ...) @fprintf(i32* %51, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i8* %54, i8* %55)
  store i32 -2, i32* %3, align 4
  br label %137

57:                                               ; preds = %42
  %58 = load i32, i32* @MainTable, align 4
  %59 = load i32, i32* @Pass, align 4
  %60 = load i32, i32* @S_Pass, align 4
  %61 = call i32 @FillTable(i32 %58, i32 7, i32 %59, i32 %60)
  %62 = load i32, i32* @MainTable, align 4
  %63 = load i32, i32* @Horiz, align 4
  %64 = load i32, i32* @S_Horiz, align 4
  %65 = call i32 @FillTable(i32 %62, i32 7, i32 %63, i32 %64)
  %66 = load i32, i32* @MainTable, align 4
  %67 = load i32, i32* @V0, align 4
  %68 = load i32, i32* @S_V0, align 4
  %69 = call i32 @FillTable(i32 %66, i32 7, i32 %67, i32 %68)
  %70 = load i32, i32* @MainTable, align 4
  %71 = load i32, i32* @VR, align 4
  %72 = load i32, i32* @S_VR, align 4
  %73 = call i32 @FillTable(i32 %70, i32 7, i32 %71, i32 %72)
  %74 = load i32, i32* @MainTable, align 4
  %75 = load i32, i32* @VL, align 4
  %76 = load i32, i32* @S_VL, align 4
  %77 = call i32 @FillTable(i32 %74, i32 7, i32 %75, i32 %76)
  %78 = load i32, i32* @MainTable, align 4
  %79 = load i32, i32* @Ext, align 4
  %80 = load i32, i32* @S_Ext, align 4
  %81 = call i32 @FillTable(i32 %78, i32 7, i32 %79, i32 %80)
  %82 = load i32, i32* @MainTable, align 4
  %83 = load i32, i32* @EOLV, align 4
  %84 = load i32, i32* @S_EOL, align 4
  %85 = call i32 @FillTable(i32 %82, i32 7, i32 %83, i32 %84)
  %86 = load i32, i32* @WhiteTable, align 4
  %87 = load i32, i32* @MakeUpW, align 4
  %88 = load i32, i32* @S_MakeUpW, align 4
  %89 = call i32 @FillTable(i32 %86, i32 12, i32 %87, i32 %88)
  %90 = load i32, i32* @WhiteTable, align 4
  %91 = load i32, i32* @MakeUp, align 4
  %92 = load i32, i32* @S_MakeUp, align 4
  %93 = call i32 @FillTable(i32 %90, i32 12, i32 %91, i32 %92)
  %94 = load i32, i32* @WhiteTable, align 4
  %95 = load i32, i32* @TermW, align 4
  %96 = load i32, i32* @S_TermW, align 4
  %97 = call i32 @FillTable(i32 %94, i32 12, i32 %95, i32 %96)
  %98 = load i32, i32* @WhiteTable, align 4
  %99 = load i32, i32* @EOLH, align 4
  %100 = load i32, i32* @S_EOL, align 4
  %101 = call i32 @FillTable(i32 %98, i32 12, i32 %99, i32 %100)
  %102 = load i32, i32* @BlackTable, align 4
  %103 = load i32, i32* @MakeUpB, align 4
  %104 = load i32, i32* @S_MakeUpB, align 4
  %105 = call i32 @FillTable(i32 %102, i32 13, i32 %103, i32 %104)
  %106 = load i32, i32* @BlackTable, align 4
  %107 = load i32, i32* @MakeUp, align 4
  %108 = load i32, i32* @S_MakeUp, align 4
  %109 = call i32 @FillTable(i32 %106, i32 13, i32 %107, i32 %108)
  %110 = load i32, i32* @BlackTable, align 4
  %111 = load i32, i32* @TermB, align 4
  %112 = load i32, i32* @S_TermB, align 4
  %113 = call i32 @FillTable(i32 %110, i32 13, i32 %111, i32 %112)
  %114 = load i32, i32* @BlackTable, align 4
  %115 = load i32, i32* @EOLH, align 4
  %116 = load i32, i32* @S_EOL, align 4
  %117 = call i32 @FillTable(i32 %114, i32 13, i32 %115, i32 %116)
  %118 = load i32*, i32** %6, align 8
  %119 = call i32 (i32*, i8*, ...) @fprintf(i32* %118, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.7, i64 0, i64 0))
  %120 = load i32*, i32** %6, align 8
  %121 = call i32 (i32*, i8*, ...) @fprintf(i32* %120, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %122 = load i32*, i32** %6, align 8
  %123 = call i32 (i32*, i8*, ...) @fprintf(i32* %122, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %124 = load i32*, i32** %6, align 8
  %125 = call i32 (i32*, i8*, ...) @fprintf(i32* %124, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0))
  %126 = load i32*, i32** %6, align 8
  %127 = load i32, i32* @MainTable, align 4
  %128 = call i32 @WriteTable(i32* %126, i32 %127, i32 128, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %129 = load i32*, i32** %6, align 8
  %130 = load i32, i32* @WhiteTable, align 4
  %131 = call i32 @WriteTable(i32* %129, i32 %130, i32 4096, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0))
  %132 = load i32*, i32** %6, align 8
  %133 = load i32, i32* @BlackTable, align 4
  %134 = call i32 @WriteTable(i32* %132, i32 %133, i32 8192, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0))
  %135 = load i32*, i32** %6, align 8
  %136 = call i32 @fclose(i32* %135)
  store i32 0, i32* %3, align 4
  br label %137

137:                                              ; preds = %57, %48, %22
  %138 = load i32, i32* %3, align 4
  ret i32 %138
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @FillTable(i32, i32, i32, i32) #1

declare dso_local i32 @WriteTable(i32*, i32, i32, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
