; ModuleID = '/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_client.c_init_client.c'
source_filename = "/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_client.c_init_client.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@client = common dso_local global i64 0, align 8
@client_name = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Could not open %s for output\0A\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"/*** Autogenerated by WIDL %s from %s - Do not edit ***/\0A\00", align 1
@PACKAGE_VERSION = common dso_local global i32 0, align 4
@input_name = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [21 x i8] c"#include <string.h>\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"#include \22%s\22\0A\00", align 1
@header_name = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [25 x i8] c"#ifndef DECLSPEC_HIDDEN\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"#define DECLSPEC_HIDDEN\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"#endif\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @init_client to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_client() #0 {
  %1 = load i64, i64* @client, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  br label %24

4:                                                ; preds = %0
  %5 = load i32, i32* @client_name, align 4
  %6 = call i64 @fopen(i32 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i64 %6, i64* @client, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = load i32, i32* @client_name, align 4
  %10 = call i32 @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 %9)
  br label %11

11:                                               ; preds = %8, %4
  %12 = load i32, i32* @PACKAGE_VERSION, align 4
  %13 = load i32, i32* @input_name, align 4
  %14 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0), i32 %12, i32 %13)
  %15 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %17 = load i32, i32* @header_name, align 4
  %18 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i32 %17)
  %19 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @print_client(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %24

24:                                               ; preds = %11, %3
  ret void
}

declare dso_local i64 @fopen(i32, i8*) #1

declare dso_local i32 @error(i8*, i32) #1

declare dso_local i32 @print_client(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
