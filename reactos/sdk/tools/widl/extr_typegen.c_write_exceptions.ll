; ModuleID = '/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_typegen.c_write_exceptions.c'
source_filename = "/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_typegen.c_write_exceptions.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [33 x i8] c"#ifndef USE_COMPILER_EXCEPTIONS\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"#include \22wine/exception.h\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"#undef RpcTryExcept\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"#undef RpcExcept\0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"#undef RpcEndExcept\0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"#undef RpcTryFinally\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"#undef RpcFinally\0A\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"#undef RpcEndFinally\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"#undef RpcExceptionCode\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"#undef RpcAbnormalTermination\0A\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"struct __exception_frame;\0A\00", align 1
@.str.12 = private unnamed_addr constant [59 x i8] c"typedef int (*__filter_func)(struct __exception_frame *);\0A\00", align 1
@.str.13 = private unnamed_addr constant [61 x i8] c"typedef void (*__finally_func)(struct __exception_frame *);\0A\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"#define __DECL_EXCEPTION_FRAME \\\0A\00", align 1
@.str.15 = private unnamed_addr constant [44 x i8] c"    EXCEPTION_REGISTRATION_RECORD frame; \\\0A\00", align 1
@.str.16 = private unnamed_addr constant [45 x i8] c"    __filter_func                 filter; \\\0A\00", align 1
@.str.17 = private unnamed_addr constant [46 x i8] c"    __finally_func                finally; \\\0A\00", align 1
@.str.18 = private unnamed_addr constant [42 x i8] c"    sigjmp_buf                    jmp; \\\0A\00", align 1
@.str.19 = private unnamed_addr constant [43 x i8] c"    DWORD                         code; \\\0A\00", align 1
@.str.20 = private unnamed_addr constant [59 x i8] c"    unsigned char                 abnormal_termination; \\\0A\00", align 1
@.str.21 = private unnamed_addr constant [51 x i8] c"    unsigned char                 filter_level; \\\0A\00", align 1
@.str.22 = private unnamed_addr constant [50 x i8] c"    unsigned char                 finally_level;\0A\00", align 1
@.str.23 = private unnamed_addr constant [28 x i8] c"struct __exception_frame\0A{\0A\00", align 1
@.str.24 = private unnamed_addr constant [28 x i8] c"    __DECL_EXCEPTION_FRAME\0A\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"};\0A\00", align 1
@.str.26 = private unnamed_addr constant [47 x i8] c"static inline void __widl_unwind_target(void)\0A\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.28 = private unnamed_addr constant [91 x i8] c"    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();\0A\00", align 1
@.str.29 = private unnamed_addr constant [61 x i8] c"    if (exc_frame->finally_level > exc_frame->filter_level)\0A\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"    {\0A\00", align 1
@.str.31 = private unnamed_addr constant [46 x i8] c"        exc_frame->abnormal_termination = 1;\0A\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"        exc_frame->finally( exc_frame );\0A\00", align 1
@.str.33 = private unnamed_addr constant [48 x i8] c"        __wine_pop_frame( &exc_frame->frame );\0A\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"    }\0A\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"    exc_frame->filter_level = 0;\0A\00", align 1
@.str.36 = private unnamed_addr constant [38 x i8] c"    siglongjmp( exc_frame->jmp, 1 );\0A\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.38 = private unnamed_addr constant [66 x i8] c"static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,\0A\00", align 1
@.str.39 = private unnamed_addr constant [78 x i8] c"                                       EXCEPTION_REGISTRATION_RECORD *frame,\0A\00", align 1
@.str.40 = private unnamed_addr constant [58 x i8] c"                                       CONTEXT *context,\0A\00", align 1
@.str.41 = private unnamed_addr constant [86 x i8] c"                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )\0A\00", align 1
@.str.42 = private unnamed_addr constant [78 x i8] c"    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;\0A\00", align 1
@.str.43 = private unnamed_addr constant [84 x i8] c"    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))\0A\00", align 1
@.str.44 = private unnamed_addr constant [101 x i8] c"        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))\0A\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"        {\0A\00", align 1
@.str.46 = private unnamed_addr constant [50 x i8] c"            exc_frame->abnormal_termination = 1;\0A\00", align 1
@.str.47 = private unnamed_addr constant [46 x i8] c"            exc_frame->finally( exc_frame );\0A\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"        }\0A\00", align 1
@.str.49 = private unnamed_addr constant [41 x i8] c"        return ExceptionContinueSearch;\0A\00", align 1
@.str.50 = private unnamed_addr constant [46 x i8] c"    exc_frame->code = record->ExceptionCode;\0A\00", align 1
@.str.51 = private unnamed_addr constant [97 x i8] c"    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)\0A\00", align 1
@.str.52 = private unnamed_addr constant [67 x i8] c"        __wine_rtl_unwind( frame, record, __widl_unwind_target );\0A\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"    return ExceptionContinueSearch;\0A\00", align 1
@.str.54 = private unnamed_addr constant [24 x i8] c"#define RpcTryExcept \\\0A\00", align 1
@.str.55 = private unnamed_addr constant [42 x i8] c"    if (!sigsetjmp( __frame->jmp, 0 )) \\\0A\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"    { \\\0A\00", align 1
@.str.57 = private unnamed_addr constant [40 x i8] c"        if (!__frame->finally_level) \\\0A\00", align 1
@.str.58 = private unnamed_addr constant [53 x i8] c"            __wine_push_frame( &__frame->frame ); \\\0A\00", align 1
@.str.59 = private unnamed_addr constant [61 x i8] c"        __frame->filter_level = __frame->finally_level + 1;\0A\00", align 1
@.str.60 = private unnamed_addr constant [27 x i8] c"#define RpcExcept(expr) \\\0A\00", align 1
@.str.61 = private unnamed_addr constant [52 x i8] c"            __wine_pop_frame( &__frame->frame ); \\\0A\00", align 1
@.str.62 = private unnamed_addr constant [38 x i8] c"        __frame->filter_level = 0; \\\0A\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"    } \\\0A\00", align 1
@.str.64 = private unnamed_addr constant [12 x i8] c"    else \\\0A\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"#define RpcEndExcept\0A\00", align 1
@.str.66 = private unnamed_addr constant [44 x i8] c"#define RpcExceptionCode() (__frame->code)\0A\00", align 1
@.str.67 = private unnamed_addr constant [25 x i8] c"#define RpcTryFinally \\\0A\00", align 1
@.str.68 = private unnamed_addr constant [35 x i8] c"    if (!__frame->filter_level) \\\0A\00", align 1
@.str.69 = private unnamed_addr constant [49 x i8] c"        __wine_push_frame( &__frame->frame ); \\\0A\00", align 1
@.str.70 = private unnamed_addr constant [57 x i8] c"    __frame->finally_level = __frame->filter_level + 1;\0A\00", align 1
@.str.71 = private unnamed_addr constant [22 x i8] c"#define RpcFinally \\\0A\00", align 1
@.str.72 = private unnamed_addr constant [48 x i8] c"        __wine_pop_frame( &__frame->frame ); \\\0A\00", align 1
@.str.73 = private unnamed_addr constant [33 x i8] c"    __frame->finally_level = 0;\0A\00", align 1
@.str.74 = private unnamed_addr constant [23 x i8] c"#define RpcEndFinally\0A\00", align 1
@.str.75 = private unnamed_addr constant [66 x i8] c"#define RpcAbnormalTermination() (__frame->abnormal_termination)\0A\00", align 1
@.str.76 = private unnamed_addr constant [54 x i8] c"#define RpcExceptionInit(filter_func,finally_func) \\\0A\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"    do { \\\0A\00", align 1
@.str.78 = private unnamed_addr constant [62 x i8] c"        __frame->frame.Handler = __widl_exception_handler; \\\0A\00", align 1
@.str.79 = private unnamed_addr constant [59 x i8] c"        __frame->filter = (__filter_func)(filter_func); \\\0A\00", align 1
@.str.80 = private unnamed_addr constant [62 x i8] c"        __frame->finally = (__finally_func)(finally_func); \\\0A\00", align 1
@.str.81 = private unnamed_addr constant [46 x i8] c"        __frame->abnormal_termination = 0; \\\0A\00", align 1
@.str.82 = private unnamed_addr constant [39 x i8] c"        __frame->finally_level = 0; \\\0A\00", align 1
@.str.83 = private unnamed_addr constant [17 x i8] c"    } while (0)\0A\00", align 1
@.str.84 = private unnamed_addr constant [37 x i8] c"#else /* USE_COMPILER_EXCEPTIONS */\0A\00", align 1
@.str.85 = private unnamed_addr constant [42 x i8] c"    do { (void)(filter_func); } while(0)\0A\00", align 1
@.str.86 = private unnamed_addr constant [17 x i8] c"    DWORD code;\0A\00", align 1
@.str.87 = private unnamed_addr constant [38 x i8] c"#endif /* USE_COMPILER_EXCEPTIONS */\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_exceptions(i32* %0) #0 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  %3 = load i32*, i32** %2, align 8
  %4 = call i32 @fprintf(i32* %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %5 = load i32*, i32** %2, align 8
  %6 = call i32 @fprintf(i32* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %7 = load i32*, i32** %2, align 8
  %8 = call i32 @fprintf(i32* %7, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  %9 = load i32*, i32** %2, align 8
  %10 = call i32 @fprintf(i32* %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %11 = load i32*, i32** %2, align 8
  %12 = call i32 @fprintf(i32* %11, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  %13 = load i32*, i32** %2, align 8
  %14 = call i32 @fprintf(i32* %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0))
  %15 = load i32*, i32** %2, align 8
  %16 = call i32 @fprintf(i32* %15, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0))
  %17 = load i32*, i32** %2, align 8
  %18 = call i32 @fprintf(i32* %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %19 = load i32*, i32** %2, align 8
  %20 = call i32 @fprintf(i32* %19, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %21 = load i32*, i32** %2, align 8
  %22 = call i32 @fprintf(i32* %21, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %23 = load i32*, i32** %2, align 8
  %24 = call i32 @fprintf(i32* %23, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0))
  %25 = load i32*, i32** %2, align 8
  %26 = call i32 @fprintf(i32* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %27 = load i32*, i32** %2, align 8
  %28 = call i32 @fprintf(i32* %27, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0))
  %29 = load i32*, i32** %2, align 8
  %30 = call i32 @fprintf(i32* %29, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0))
  %31 = load i32*, i32** %2, align 8
  %32 = call i32 @fprintf(i32* %31, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0))
  %33 = load i32*, i32** %2, align 8
  %34 = call i32 @fprintf(i32* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %35 = load i32*, i32** %2, align 8
  %36 = call i32 @fprintf(i32* %35, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0))
  %37 = load i32*, i32** %2, align 8
  %38 = call i32 @fprintf(i32* %37, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0))
  %39 = load i32*, i32** %2, align 8
  %40 = call i32 @fprintf(i32* %39, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.16, i64 0, i64 0))
  %41 = load i32*, i32** %2, align 8
  %42 = call i32 @fprintf(i32* %41, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.17, i64 0, i64 0))
  %43 = load i32*, i32** %2, align 8
  %44 = call i32 @fprintf(i32* %43, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.18, i64 0, i64 0))
  %45 = load i32*, i32** %2, align 8
  %46 = call i32 @fprintf(i32* %45, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.19, i64 0, i64 0))
  %47 = load i32*, i32** %2, align 8
  %48 = call i32 @fprintf(i32* %47, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20, i64 0, i64 0))
  %49 = load i32*, i32** %2, align 8
  %50 = call i32 @fprintf(i32* %49, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.21, i64 0, i64 0))
  %51 = load i32*, i32** %2, align 8
  %52 = call i32 @fprintf(i32* %51, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.22, i64 0, i64 0))
  %53 = load i32*, i32** %2, align 8
  %54 = call i32 @fprintf(i32* %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %55 = load i32*, i32** %2, align 8
  %56 = call i32 @fprintf(i32* %55, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i64 0, i64 0))
  %57 = load i32*, i32** %2, align 8
  %58 = call i32 @fprintf(i32* %57, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.24, i64 0, i64 0))
  %59 = load i32*, i32** %2, align 8
  %60 = call i32 @fprintf(i32* %59, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0))
  %61 = load i32*, i32** %2, align 8
  %62 = call i32 @fprintf(i32* %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %63 = load i32*, i32** %2, align 8
  %64 = call i32 @fprintf(i32* %63, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26, i64 0, i64 0))
  %65 = load i32*, i32** %2, align 8
  %66 = call i32 @fprintf(i32* %65, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0))
  %67 = load i32*, i32** %2, align 8
  %68 = call i32 @fprintf(i32* %67, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.28, i64 0, i64 0))
  %69 = load i32*, i32** %2, align 8
  %70 = call i32 @fprintf(i32* %69, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.29, i64 0, i64 0))
  %71 = load i32*, i32** %2, align 8
  %72 = call i32 @fprintf(i32* %71, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0))
  %73 = load i32*, i32** %2, align 8
  %74 = call i32 @fprintf(i32* %73, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.31, i64 0, i64 0))
  %75 = load i32*, i32** %2, align 8
  %76 = call i32 @fprintf(i32* %75, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i64 0, i64 0))
  %77 = load i32*, i32** %2, align 8
  %78 = call i32 @fprintf(i32* %77, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.33, i64 0, i64 0))
  %79 = load i32*, i32** %2, align 8
  %80 = call i32 @fprintf(i32* %79, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0))
  %81 = load i32*, i32** %2, align 8
  %82 = call i32 @fprintf(i32* %81, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i64 0, i64 0))
  %83 = load i32*, i32** %2, align 8
  %84 = call i32 @fprintf(i32* %83, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.36, i64 0, i64 0))
  %85 = load i32*, i32** %2, align 8
  %86 = call i32 @fprintf(i32* %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0))
  %87 = load i32*, i32** %2, align 8
  %88 = call i32 @fprintf(i32* %87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %89 = load i32*, i32** %2, align 8
  %90 = call i32 @fprintf(i32* %89, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.38, i64 0, i64 0))
  %91 = load i32*, i32** %2, align 8
  %92 = call i32 @fprintf(i32* %91, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.39, i64 0, i64 0))
  %93 = load i32*, i32** %2, align 8
  %94 = call i32 @fprintf(i32* %93, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.40, i64 0, i64 0))
  %95 = load i32*, i32** %2, align 8
  %96 = call i32 @fprintf(i32* %95, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.41, i64 0, i64 0))
  %97 = load i32*, i32** %2, align 8
  %98 = call i32 @fprintf(i32* %97, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0))
  %99 = load i32*, i32** %2, align 8
  %100 = call i32 @fprintf(i32* %99, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.42, i64 0, i64 0))
  %101 = load i32*, i32** %2, align 8
  %102 = call i32 @fprintf(i32* %101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %103 = load i32*, i32** %2, align 8
  %104 = call i32 @fprintf(i32* %103, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.43, i64 0, i64 0))
  %105 = load i32*, i32** %2, align 8
  %106 = call i32 @fprintf(i32* %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0))
  %107 = load i32*, i32** %2, align 8
  %108 = call i32 @fprintf(i32* %107, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.44, i64 0, i64 0))
  %109 = load i32*, i32** %2, align 8
  %110 = call i32 @fprintf(i32* %109, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0))
  %111 = load i32*, i32** %2, align 8
  %112 = call i32 @fprintf(i32* %111, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.46, i64 0, i64 0))
  %113 = load i32*, i32** %2, align 8
  %114 = call i32 @fprintf(i32* %113, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.47, i64 0, i64 0))
  %115 = load i32*, i32** %2, align 8
  %116 = call i32 @fprintf(i32* %115, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.48, i64 0, i64 0))
  %117 = load i32*, i32** %2, align 8
  %118 = call i32 @fprintf(i32* %117, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.49, i64 0, i64 0))
  %119 = load i32*, i32** %2, align 8
  %120 = call i32 @fprintf(i32* %119, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0))
  %121 = load i32*, i32** %2, align 8
  %122 = call i32 @fprintf(i32* %121, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.50, i64 0, i64 0))
  %123 = load i32*, i32** %2, align 8
  %124 = call i32 @fprintf(i32* %123, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.51, i64 0, i64 0))
  %125 = load i32*, i32** %2, align 8
  %126 = call i32 @fprintf(i32* %125, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.52, i64 0, i64 0))
  %127 = load i32*, i32** %2, align 8
  %128 = call i32 @fprintf(i32* %127, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.53, i64 0, i64 0))
  %129 = load i32*, i32** %2, align 8
  %130 = call i32 @fprintf(i32* %129, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0))
  %131 = load i32*, i32** %2, align 8
  %132 = call i32 @fprintf(i32* %131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %133 = load i32*, i32** %2, align 8
  %134 = call i32 @fprintf(i32* %133, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.54, i64 0, i64 0))
  %135 = load i32*, i32** %2, align 8
  %136 = call i32 @fprintf(i32* %135, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.55, i64 0, i64 0))
  %137 = load i32*, i32** %2, align 8
  %138 = call i32 @fprintf(i32* %137, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0))
  %139 = load i32*, i32** %2, align 8
  %140 = call i32 @fprintf(i32* %139, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.57, i64 0, i64 0))
  %141 = load i32*, i32** %2, align 8
  %142 = call i32 @fprintf(i32* %141, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.58, i64 0, i64 0))
  %143 = load i32*, i32** %2, align 8
  %144 = call i32 @fprintf(i32* %143, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.59, i64 0, i64 0))
  %145 = load i32*, i32** %2, align 8
  %146 = call i32 @fprintf(i32* %145, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %147 = load i32*, i32** %2, align 8
  %148 = call i32 @fprintf(i32* %147, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.60, i64 0, i64 0))
  %149 = load i32*, i32** %2, align 8
  %150 = call i32 @fprintf(i32* %149, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.57, i64 0, i64 0))
  %151 = load i32*, i32** %2, align 8
  %152 = call i32 @fprintf(i32* %151, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.61, i64 0, i64 0))
  %153 = load i32*, i32** %2, align 8
  %154 = call i32 @fprintf(i32* %153, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0))
  %155 = load i32*, i32** %2, align 8
  %156 = call i32 @fprintf(i32* %155, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i64 0, i64 0))
  %157 = load i32*, i32** %2, align 8
  %158 = call i32 @fprintf(i32* %157, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i64 0, i64 0))
  %159 = load i32*, i32** %2, align 8
  %160 = call i32 @fprintf(i32* %159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %161 = load i32*, i32** %2, align 8
  %162 = call i32 @fprintf(i32* %161, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0))
  %163 = load i32*, i32** %2, align 8
  %164 = call i32 @fprintf(i32* %163, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %165 = load i32*, i32** %2, align 8
  %166 = call i32 @fprintf(i32* %165, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.66, i64 0, i64 0))
  %167 = load i32*, i32** %2, align 8
  %168 = call i32 @fprintf(i32* %167, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %169 = load i32*, i32** %2, align 8
  %170 = call i32 @fprintf(i32* %169, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.67, i64 0, i64 0))
  %171 = load i32*, i32** %2, align 8
  %172 = call i32 @fprintf(i32* %171, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.68, i64 0, i64 0))
  %173 = load i32*, i32** %2, align 8
  %174 = call i32 @fprintf(i32* %173, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.69, i64 0, i64 0))
  %175 = load i32*, i32** %2, align 8
  %176 = call i32 @fprintf(i32* %175, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.70, i64 0, i64 0))
  %177 = load i32*, i32** %2, align 8
  %178 = call i32 @fprintf(i32* %177, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %179 = load i32*, i32** %2, align 8
  %180 = call i32 @fprintf(i32* %179, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.71, i64 0, i64 0))
  %181 = load i32*, i32** %2, align 8
  %182 = call i32 @fprintf(i32* %181, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.68, i64 0, i64 0))
  %183 = load i32*, i32** %2, align 8
  %184 = call i32 @fprintf(i32* %183, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.72, i64 0, i64 0))
  %185 = load i32*, i32** %2, align 8
  %186 = call i32 @fprintf(i32* %185, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.73, i64 0, i64 0))
  %187 = load i32*, i32** %2, align 8
  %188 = call i32 @fprintf(i32* %187, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %189 = load i32*, i32** %2, align 8
  %190 = call i32 @fprintf(i32* %189, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.74, i64 0, i64 0))
  %191 = load i32*, i32** %2, align 8
  %192 = call i32 @fprintf(i32* %191, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %193 = load i32*, i32** %2, align 8
  %194 = call i32 @fprintf(i32* %193, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.75, i64 0, i64 0))
  %195 = load i32*, i32** %2, align 8
  %196 = call i32 @fprintf(i32* %195, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %197 = load i32*, i32** %2, align 8
  %198 = call i32 @fprintf(i32* %197, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.76, i64 0, i64 0))
  %199 = load i32*, i32** %2, align 8
  %200 = call i32 @fprintf(i32* %199, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i64 0, i64 0))
  %201 = load i32*, i32** %2, align 8
  %202 = call i32 @fprintf(i32* %201, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.78, i64 0, i64 0))
  %203 = load i32*, i32** %2, align 8
  %204 = call i32 @fprintf(i32* %203, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.79, i64 0, i64 0))
  %205 = load i32*, i32** %2, align 8
  %206 = call i32 @fprintf(i32* %205, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.80, i64 0, i64 0))
  %207 = load i32*, i32** %2, align 8
  %208 = call i32 @fprintf(i32* %207, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.81, i64 0, i64 0))
  %209 = load i32*, i32** %2, align 8
  %210 = call i32 @fprintf(i32* %209, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.62, i64 0, i64 0))
  %211 = load i32*, i32** %2, align 8
  %212 = call i32 @fprintf(i32* %211, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.82, i64 0, i64 0))
  %213 = load i32*, i32** %2, align 8
  %214 = call i32 @fprintf(i32* %213, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.83, i64 0, i64 0))
  %215 = load i32*, i32** %2, align 8
  %216 = call i32 @fprintf(i32* %215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %217 = load i32*, i32** %2, align 8
  %218 = call i32 @fprintf(i32* %217, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.84, i64 0, i64 0))
  %219 = load i32*, i32** %2, align 8
  %220 = call i32 @fprintf(i32* %219, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %221 = load i32*, i32** %2, align 8
  %222 = call i32 @fprintf(i32* %221, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.76, i64 0, i64 0))
  %223 = load i32*, i32** %2, align 8
  %224 = call i32 @fprintf(i32* %223, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.85, i64 0, i64 0))
  %225 = load i32*, i32** %2, align 8
  %226 = call i32 @fprintf(i32* %225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %227 = load i32*, i32** %2, align 8
  %228 = call i32 @fprintf(i32* %227, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0))
  %229 = load i32*, i32** %2, align 8
  %230 = call i32 @fprintf(i32* %229, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.86, i64 0, i64 0))
  %231 = load i32*, i32** %2, align 8
  %232 = call i32 @fprintf(i32* %231, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %233 = load i32*, i32** %2, align 8
  %234 = call i32 @fprintf(i32* %233, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.87, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
