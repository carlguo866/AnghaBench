; ModuleID = '/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_header.c_write_header.c'
source_filename = "/home/carl/AnghaBench/reactos/sdk/tools/widl/extr_header.c_write_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@do_header = common dso_local global i32 0, align 4
@header_name = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Could not open %s for output\0A\00", align 1
@.str.2 = private unnamed_addr constant [59 x i8] c"/*** Autogenerated by WIDL %s from %s - Do not edit ***/\0A\0A\00", align 1
@PACKAGE_VERSION = common dso_local global i8* null, align 8
@input_name = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [15 x i8] c"#ifdef _WIN32\0A\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"#ifndef __REQUIRED_RPCNDR_H_VERSION__\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"#define __REQUIRED_RPCNDR_H_VERSION__ 475\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"#endif\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"#ifdef __REACTOS__\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"#define WIN32_LEAN_AND_MEAN\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"#include <rpc.h>\0A\00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"#include <rpcndr.h>\0A\00", align 1
@serializable_exists = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [21 x i8] c"#include <midles.h>\0A\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"#ifndef COM_NO_WINDOWS_H\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"#include <windows.h>\0A\00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"#include <ole2.h>\0A\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"#ifndef __%s__\0A\00", align 1
@header_token = common dso_local global i8* null, align 8
@.str.16 = private unnamed_addr constant [17 x i8] c"#define __%s__\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [29 x i8] c"/* Forward declarations */\0A\0A\00", align 1
@.str.18 = private unnamed_addr constant [35 x i8] c"/* Headers for imported files */\0A\0A\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@FALSE = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [54 x i8] c"/* Begin additional prototypes for all interfaces */\0A\00", align 1
@write_serialize_function_decl = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [33 x i8] c"/* End additional prototypes */\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"#endif /* __%s__ */\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_header(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  %4 = load i32, i32* @do_header, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  br label %106

7:                                                ; preds = %1
  %8 = load i32, i32* @header_name, align 4
  %9 = call i32* @fopen(i32 %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %9, i32** %3, align 8
  %10 = icmp ne i32* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = load i32, i32* @header_name, align 4
  %13 = call i32 @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 %12)
  br label %106

14:                                               ; preds = %7
  %15 = load i32*, i32** %3, align 8
  %16 = load i8*, i8** @PACKAGE_VERSION, align 8
  %17 = load i8*, i8** @input_name, align 8
  %18 = call i32 (i32*, i8*, ...) @fprintf(i32* %15, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i8* %16, i8* %17)
  %19 = load i32*, i32** %3, align 8
  %20 = call i32 (i32*, i8*, ...) @fprintf(i32* %19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %21 = load i32*, i32** %3, align 8
  %22 = call i32 (i32*, i8*, ...) @fprintf(i32* %21, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0))
  %23 = load i32*, i32** %3, align 8
  %24 = call i32 (i32*, i8*, ...) @fprintf(i32* %23, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0))
  %25 = load i32*, i32** %3, align 8
  %26 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %27 = load i32*, i32** %3, align 8
  %28 = call i32 (i32*, i8*, ...) @fprintf(i32* %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %29 = load i32*, i32** %3, align 8
  %30 = call i32 (i32*, i8*, ...) @fprintf(i32* %29, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %31 = load i32*, i32** %3, align 8
  %32 = call i32 (i32*, i8*, ...) @fprintf(i32* %31, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %33 = load i32*, i32** %3, align 8
  %34 = call i32 (i32*, i8*, ...) @fprintf(i32* %33, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %35 = load i32*, i32** %3, align 8
  %36 = call i32 (i32*, i8*, ...) @fprintf(i32* %35, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0))
  %37 = load i32*, i32** %2, align 8
  %38 = load i32, i32* @serializable_exists, align 4
  %39 = call i32 @for_each_serializable(i32* %37, i32* null, i32 %38)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %14
  %42 = load i32*, i32** %3, align 8
  %43 = call i32 (i32*, i8*, ...) @fprintf(i32* %42, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0))
  br label %44

44:                                               ; preds = %41, %14
  %45 = load i32*, i32** %3, align 8
  %46 = call i32 (i32*, i8*, ...) @fprintf(i32* %45, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %47 = load i32*, i32** %3, align 8
  %48 = call i32 (i32*, i8*, ...) @fprintf(i32* %47, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0))
  %49 = load i32*, i32** %3, align 8
  %50 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  %51 = load i32*, i32** %3, align 8
  %52 = call i32 (i32*, i8*, ...) @fprintf(i32* %51, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i64 0, i64 0))
  %53 = load i32*, i32** %3, align 8
  %54 = call i32 (i32*, i8*, ...) @fprintf(i32* %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %55 = load i32*, i32** %3, align 8
  %56 = load i8*, i8** @header_token, align 8
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %55, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* %56)
  %58 = load i32*, i32** %3, align 8
  %59 = load i8*, i8** @header_token, align 8
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %58, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i8* %59)
  %61 = load i32*, i32** %3, align 8
  %62 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0))
  %63 = load i32*, i32** %3, align 8
  %64 = load i32*, i32** %2, align 8
  %65 = call i32 @write_forward_decls(i32* %63, i32* %64)
  %66 = load i32*, i32** %3, align 8
  %67 = call i32 (i32*, i8*, ...) @fprintf(i32* %66, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i64 0, i64 0))
  %68 = load i32*, i32** %3, align 8
  %69 = load i32*, i32** %2, align 8
  %70 = call i32 @write_imports(i32* %68, i32* %69)
  %71 = load i32*, i32** %3, align 8
  %72 = call i32 (i32*, i8*, ...) @fprintf(i32* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  %73 = load i32*, i32** %3, align 8
  %74 = call i32 @start_cplusplus_guard(i32* %73)
  %75 = load i32*, i32** %3, align 8
  %76 = load i32*, i32** %2, align 8
  %77 = load i32, i32* @FALSE, align 4
  %78 = call i32 @write_header_stmts(i32* %75, i32* %76, i32* null, i32 %77)
  %79 = load i32*, i32** %3, align 8
  %80 = call i32 (i32*, i8*, ...) @fprintf(i32* %79, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.20, i64 0, i64 0))
  %81 = load i32*, i32** %3, align 8
  %82 = call i32 (i32*, i8*, ...) @fprintf(i32* %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  %83 = load i32*, i32** %2, align 8
  %84 = load i32*, i32** %3, align 8
  %85 = load i32, i32* @write_serialize_function_decl, align 4
  %86 = call i32 @for_each_serializable(i32* %83, i32* %84, i32 %85)
  %87 = load i32*, i32** %3, align 8
  %88 = call i32 @write_user_types(i32* %87)
  %89 = load i32*, i32** %3, align 8
  %90 = call i32 @write_generic_handle_routines(i32* %89)
  %91 = load i32*, i32** %3, align 8
  %92 = call i32 @write_context_handle_rundowns(i32* %91)
  %93 = load i32*, i32** %3, align 8
  %94 = call i32 (i32*, i8*, ...) @fprintf(i32* %93, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  %95 = load i32*, i32** %3, align 8
  %96 = call i32 (i32*, i8*, ...) @fprintf(i32* %95, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.21, i64 0, i64 0))
  %97 = load i32*, i32** %3, align 8
  %98 = call i32 (i32*, i8*, ...) @fprintf(i32* %97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  %99 = load i32*, i32** %3, align 8
  %100 = call i32 @end_cplusplus_guard(i32* %99)
  %101 = load i32*, i32** %3, align 8
  %102 = load i8*, i8** @header_token, align 8
  %103 = call i32 (i32*, i8*, ...) @fprintf(i32* %101, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i8* %102)
  %104 = load i32*, i32** %3, align 8
  %105 = call i32 @fclose(i32* %104)
  br label %106

106:                                              ; preds = %44, %11, %6
  ret void
}

declare dso_local i32* @fopen(i32, i8*) #1

declare dso_local i32 @error(i8*, i32) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @for_each_serializable(i32*, i32*, i32) #1

declare dso_local i32 @write_forward_decls(i32*, i32*) #1

declare dso_local i32 @write_imports(i32*, i32*) #1

declare dso_local i32 @start_cplusplus_guard(i32*) #1

declare dso_local i32 @write_header_stmts(i32*, i32*, i32*, i32) #1

declare dso_local i32 @write_user_types(i32*) #1

declare dso_local i32 @write_generic_handle_routines(i32*) #1

declare dso_local i32 @write_context_handle_rundowns(i32*) #1

declare dso_local i32 @end_cplusplus_guard(i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
