; ModuleID = '/home/carl/AnghaBench/reactos/sdk/tools/extr_bin2c.c_main.c'
source_filename = "/home/carl/AnghaBench/reactos/sdk/tools/extr_bin2c.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"BIN\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"BINSTR\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"STR\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [38 x i8] c"ERROR: Couldn't open data file '%s'.\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"ERROR: Couldn't create output source file '%s'.\0A\00", align 1
@.str.7 = private unnamed_addr constant [49 x i8] c"ERROR: Couldn't create output header file '%s'.\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"/* This file is autogenerated, do not edit. */\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"#include \22%s\22\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"#include \22%s\22\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"unsigned char %s[] =\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c";\0A\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"#define %s_SIZE %lu\0A\00", align 1
@.str.15 = private unnamed_addr constant [31 x i8] c"extern unsigned char %s[%lu];\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 6
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @usage(i8* %15)
  store i32 -1, i32* %3, align 4
  br label %169

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 4
  %20 = load i8*, i8** %19, align 8
  %21 = call i64 @_stricmp(i8* %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %40

23:                                               ; preds = %17
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 4
  %26 = load i8*, i8** %25, align 8
  %27 = call i64 @_stricmp(i8* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %40

29:                                               ; preds = %23
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 4
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @_stricmp(i8* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %29
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @usage(i8* %38)
  store i32 -1, i32* %3, align 4
  br label %169

40:                                               ; preds = %29, %23, %17
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32* @fopen(i8* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  store i32* %44, i32** %6, align 8
  %45 = load i32*, i32** %6, align 8
  %46 = icmp ne i32* %45, null
  br i1 %46, label %55, label %47

47:                                               ; preds = %40
  %48 = load i32, i32* @stderr, align 4
  %49 = sext i32 %48 to i64
  %50 = inttoptr i64 %49 to i32*
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 (i32*, i8*, ...) @fprintf(i32* %50, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i8* %53)
  store i32 -1, i32* %3, align 4
  br label %169

55:                                               ; preds = %40
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 2
  %58 = load i8*, i8** %57, align 8
  %59 = call i32* @fopen(i8* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %59, i32** %7, align 8
  %60 = load i32*, i32** %7, align 8
  %61 = icmp ne i32* %60, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %55
  %63 = load i32*, i32** %6, align 8
  %64 = call i32 @fclose(i32* %63)
  %65 = load i32, i32* @stderr, align 4
  %66 = sext i32 %65 to i64
  %67 = inttoptr i64 %66 to i32*
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 2
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 (i32*, i8*, ...) @fprintf(i32* %67, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0), i8* %70)
  store i32 -1, i32* %3, align 4
  br label %169

72:                                               ; preds = %55
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 3
  %75 = load i8*, i8** %74, align 8
  %76 = call i32* @fopen(i8* %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %76, i32** %8, align 8
  %77 = load i32*, i32** %8, align 8
  %78 = icmp ne i32* %77, null
  br i1 %78, label %91, label %79

79:                                               ; preds = %72
  %80 = load i32*, i32** %7, align 8
  %81 = call i32 @fclose(i32* %80)
  %82 = load i32*, i32** %6, align 8
  %83 = call i32 @fclose(i32* %82)
  %84 = load i32, i32* @stderr, align 4
  %85 = sext i32 %84 to i64
  %86 = inttoptr i64 %85 to i32*
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 3
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 (i32*, i8*, ...) @fprintf(i32* %86, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.7, i64 0, i64 0), i8* %89)
  store i32 -1, i32* %3, align 4
  br label %169

91:                                               ; preds = %72
  %92 = load i32*, i32** %7, align 8
  %93 = call i32 (i32*, i8*, ...) @fprintf(i32* %92, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0))
  %94 = load i32, i32* %4, align 4
  %95 = icmp sge i32 %94, 8
  br i1 %95, label %96, label %102

96:                                               ; preds = %91
  %97 = load i32*, i32** %7, align 8
  %98 = load i8**, i8*** %5, align 8
  %99 = getelementptr inbounds i8*, i8** %98, i64 7
  %100 = load i8*, i8** %99, align 8
  %101 = call i32 (i32*, i8*, ...) @fprintf(i32* %97, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %100)
  br label %102

102:                                              ; preds = %96, %91
  %103 = load i32*, i32** %7, align 8
  %104 = load i8**, i8*** %5, align 8
  %105 = getelementptr inbounds i8*, i8** %104, i64 3
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 (i32*, i8*, ...) @fprintf(i32* %103, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i8* %106)
  %108 = load i32, i32* %4, align 4
  %109 = icmp sge i32 %108, 7
  br i1 %109, label %110, label %116

110:                                              ; preds = %102
  %111 = load i32*, i32** %7, align 8
  %112 = load i8**, i8*** %5, align 8
  %113 = getelementptr inbounds i8*, i8** %112, i64 6
  %114 = load i8*, i8** %113, align 8
  %115 = call i32 (i32*, i8*, ...) @fprintf(i32* %111, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i8* %114)
  br label %116

116:                                              ; preds = %110, %102
  %117 = load i32*, i32** %7, align 8
  %118 = load i8**, i8*** %5, align 8
  %119 = getelementptr inbounds i8*, i8** %118, i64 5
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 (i32*, i8*, ...) @fprintf(i32* %117, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i8* %120)
  %122 = load i8**, i8*** %5, align 8
  %123 = getelementptr inbounds i8*, i8** %122, i64 4
  %124 = load i8*, i8** %123, align 8
  %125 = call i64 @_stricmp(i8* %124, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %116
  %128 = load i32*, i32** %6, align 8
  %129 = load i32*, i32** %7, align 8
  %130 = call i64 @dumpHex(i32* %128, i32* %129, i32 0)
  store i64 %130, i64* %9, align 8
  br label %146

131:                                              ; preds = %116
  %132 = load i8**, i8*** %5, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 4
  %134 = load i8*, i8** %133, align 8
  %135 = call i64 @_stricmp(i8* %134, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %141

137:                                              ; preds = %131
  %138 = load i32*, i32** %6, align 8
  %139 = load i32*, i32** %7, align 8
  %140 = call i64 @dumpHex(i32* %138, i32* %139, i32 1)
  store i64 %140, i64* %9, align 8
  br label %145

141:                                              ; preds = %131
  %142 = load i32*, i32** %6, align 8
  %143 = load i32*, i32** %7, align 8
  %144 = call i64 @dumpStr(i32* %142, i32* %143)
  store i64 %144, i64* %9, align 8
  br label %145

145:                                              ; preds = %141, %137
  br label %146

146:                                              ; preds = %145, %127
  %147 = load i32*, i32** %7, align 8
  %148 = call i32 (i32*, i8*, ...) @fprintf(i32* %147, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0))
  %149 = load i32*, i32** %7, align 8
  %150 = call i32 @fclose(i32* %149)
  %151 = load i32*, i32** %8, align 8
  %152 = call i32 (i32*, i8*, ...) @fprintf(i32* %151, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0))
  %153 = load i32*, i32** %8, align 8
  %154 = load i8**, i8*** %5, align 8
  %155 = getelementptr inbounds i8*, i8** %154, i64 5
  %156 = load i8*, i8** %155, align 8
  %157 = load i64, i64* %9, align 8
  %158 = call i32 (i32*, i8*, ...) @fprintf(i32* %153, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0), i8* %156, i64 %157)
  %159 = load i32*, i32** %8, align 8
  %160 = load i8**, i8*** %5, align 8
  %161 = getelementptr inbounds i8*, i8** %160, i64 5
  %162 = load i8*, i8** %161, align 8
  %163 = load i64, i64* %9, align 8
  %164 = call i32 (i32*, i8*, ...) @fprintf(i32* %159, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i64 0, i64 0), i8* %162, i64 %163)
  %165 = load i32*, i32** %8, align 8
  %166 = call i32 @fclose(i32* %165)
  %167 = load i32*, i32** %6, align 8
  %168 = call i32 @fclose(i32* %167)
  store i32 0, i32* %3, align 4
  br label %169

169:                                              ; preds = %146, %79, %62, %47, %35, %12
  %170 = load i32, i32* %3, align 4
  ret i32 %170
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @_stricmp(i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i64 @dumpHex(i32*, i32*, i32) #1

declare dso_local i64 @dumpStr(i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
