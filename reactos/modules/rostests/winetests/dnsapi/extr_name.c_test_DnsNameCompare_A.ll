; ModuleID = '/home/carl/AnghaBench/reactos/modules/rostests/winetests/dnsapi/extr_name.c_test_DnsNameCompare_A.c'
source_filename = "/home/carl/AnghaBench/reactos/modules/rostests/winetests/dnsapi/extr_name.c_test_DnsNameCompare_A.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@test_DnsNameCompare_A.empty = internal constant [1 x i8] zeroinitializer, align 1
@test_DnsNameCompare_A.dot = internal constant [2 x i8] c".\00", align 1
@test_DnsNameCompare_A.dotdot = internal constant [3 x i8] c"..\00", align 1
@test_DnsNameCompare_A.A = internal constant [2 x i8] c"A\00", align 1
@test_DnsNameCompare_A.a = internal constant [2 x i8] c"a\00", align 1
@test_DnsNameCompare_A.B = internal constant [2 x i8] c"B\00", align 1
@test_DnsNameCompare_A.b = internal constant [2 x i8] c"b\00", align 1
@test_DnsNameCompare_A.A_dot_B = internal constant [4 x i8] c"A.B\00", align 1
@test_DnsNameCompare_A.a_dot_a = internal constant [4 x i8] c"a.a\00", align 1
@test_DnsNameCompare_A.a_dot_b = internal constant [4 x i8] c"a.b\00", align 1
@test_DnsNameCompare_A.a_dot_b_dot = internal constant [5 x i8] c"a.b.\00", align 1
@test_DnsNameCompare_A.a_dot_b_dotdot = internal constant [6 x i8] c"a.b..\00", align 1
@test_DnsNameCompare_A.B_dot_A = internal constant [4 x i8] c"B.A\00", align 1
@test_DnsNameCompare_A.b_dot_a = internal constant [4 x i8] c"b.a\00", align 1
@test_DnsNameCompare_A.b_dot_a_dot = internal constant [5 x i8] c"b.a.\00", align 1
@test_DnsNameCompare_A.b_dot_a_dotdot = internal constant [6 x i8] c"b.a..\00", align 1
@TRUE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [21 x i8] c"failed unexpectedly\0A\00", align 1
@FALSE = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"succeeded unexpectedly\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @test_DnsNameCompare_A to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @test_DnsNameCompare_A() #0 {
  %1 = call i64 @DnsNameCompare_A(i8* null, i8* null)
  %2 = load i64, i64* @TRUE, align 8
  %3 = icmp eq i64 %1, %2
  %4 = zext i1 %3 to i32
  %5 = call i32 @ok(i32 %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %6 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0))
  %7 = load i64, i64* @TRUE, align 8
  %8 = icmp eq i64 %6, %7
  %9 = zext i1 %8 to i32
  %10 = call i32 @ok(i32 %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %11 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.dot, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0))
  %12 = load i64, i64* @TRUE, align 8
  %13 = icmp eq i64 %11, %12
  %14 = zext i1 %13 to i32
  %15 = call i32 @ok(i32 %14, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %16 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.dot, i64 0, i64 0))
  %17 = load i64, i64* @TRUE, align 8
  %18 = icmp eq i64 %16, %17
  %19 = zext i1 %18 to i32
  %20 = call i32 @ok(i32 %19, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %21 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.dot, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @test_DnsNameCompare_A.dotdot, i64 0, i64 0))
  %22 = load i64, i64* @TRUE, align 8
  %23 = icmp eq i64 %21, %22
  %24 = zext i1 %23 to i32
  %25 = call i32 @ok(i32 %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %26 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @test_DnsNameCompare_A.dotdot, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.dot, i64 0, i64 0))
  %27 = load i64, i64* @TRUE, align 8
  %28 = icmp eq i64 %26, %27
  %29 = zext i1 %28 to i32
  %30 = call i32 @ok(i32 %29, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %31 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0))
  %32 = load i64, i64* @TRUE, align 8
  %33 = icmp eq i64 %31, %32
  %34 = zext i1 %33 to i32
  %35 = call i32 @ok(i32 %34, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %36 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.A, i64 0, i64 0))
  %37 = load i64, i64* @TRUE, align 8
  %38 = icmp eq i64 %36, %37
  %39 = zext i1 %38 to i32
  %40 = call i32 @ok(i32 %39, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %41 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.A, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0))
  %42 = load i64, i64* @TRUE, align 8
  %43 = icmp eq i64 %41, %42
  %44 = zext i1 %43 to i32
  %45 = call i32 @ok(i32 %44, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %46 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.A_dot_B, i64 0, i64 0))
  %47 = load i64, i64* @TRUE, align 8
  %48 = icmp eq i64 %46, %47
  %49 = zext i1 %48 to i32
  %50 = call i32 @ok(i32 %49, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %51 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0))
  %52 = load i64, i64* @TRUE, align 8
  %53 = icmp eq i64 %51, %52
  %54 = zext i1 %53 to i32
  %55 = call i32 @ok(i32 %54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %56 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.a_dot_b_dot, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.a_dot_b_dot, i64 0, i64 0))
  %57 = load i64, i64* @TRUE, align 8
  %58 = icmp eq i64 %56, %57
  %59 = zext i1 %58 to i32
  %60 = call i32 @ok(i32 %59, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %61 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.a_dot_b_dotdot, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.a_dot_b_dotdot, i64 0, i64 0))
  %62 = load i64, i64* @TRUE, align 8
  %63 = icmp eq i64 %61, %62
  %64 = zext i1 %63 to i32
  %65 = call i32 @ok(i32 %64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %66 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0), i8* null)
  %67 = load i64, i64* @FALSE, align 8
  %68 = icmp eq i64 %66, %67
  %69 = zext i1 %68 to i32
  %70 = call i32 @ok(i32 %69, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %71 = call i64 @DnsNameCompare_A(i8* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @test_DnsNameCompare_A.empty, i64 0, i64 0))
  %72 = load i64, i64* @FALSE, align 8
  %73 = icmp eq i64 %71, %72
  %74 = zext i1 %73 to i32
  %75 = call i32 @ok(i32 %74, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %76 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.b, i64 0, i64 0))
  %77 = load i64, i64* @FALSE, align 8
  %78 = icmp eq i64 %76, %77
  %79 = zext i1 %78 to i32
  %80 = call i32 @ok(i32 %79, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %81 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.a, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.B, i64 0, i64 0))
  %82 = load i64, i64* @FALSE, align 8
  %83 = icmp eq i64 %81, %82
  %84 = zext i1 %83 to i32
  %85 = call i32 @ok(i32 %84, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %86 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.A, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @test_DnsNameCompare_A.b, i64 0, i64 0))
  %87 = load i64, i64* @FALSE, align 8
  %88 = icmp eq i64 %86, %87
  %89 = zext i1 %88 to i32
  %90 = call i32 @ok(i32 %89, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %91 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.B_dot_A, i64 0, i64 0))
  %92 = load i64, i64* @FALSE, align 8
  %93 = icmp eq i64 %91, %92
  %94 = zext i1 %93 to i32
  %95 = call i32 @ok(i32 %94, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %96 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.a_dot_b_dot, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.b_dot_a_dot, i64 0, i64 0))
  %97 = load i64, i64* @FALSE, align 8
  %98 = icmp eq i64 %96, %97
  %99 = zext i1 %98 to i32
  %100 = call i32 @ok(i32 %99, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %101 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_a, i64 0, i64 0))
  %102 = load i64, i64* @FALSE, align 8
  %103 = icmp eq i64 %101, %102
  %104 = zext i1 %103 to i32
  %105 = call i32 @ok(i32 %104, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %106 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.a_dot_b_dotdot, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.b_dot_a_dotdot, i64 0, i64 0))
  %107 = load i64, i64* @FALSE, align 8
  %108 = icmp eq i64 %106, %107
  %109 = zext i1 %108 to i32
  %110 = call i32 @ok(i32 %109, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %111 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.a_dot_b_dot, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.b_dot_a_dotdot, i64 0, i64 0))
  %112 = load i64, i64* @FALSE, align 8
  %113 = icmp eq i64 %111, %112
  %114 = zext i1 %113 to i32
  %115 = call i32 @ok(i32 %114, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %116 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @test_DnsNameCompare_A.a_dot_b_dotdot, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.b_dot_a_dot, i64 0, i64 0))
  %117 = load i64, i64* @FALSE, align 8
  %118 = icmp eq i64 %116, %117
  %119 = zext i1 %118 to i32
  %120 = call i32 @ok(i32 %119, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %121 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.a_dot_b_dot, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.b_dot_a, i64 0, i64 0))
  %122 = load i64, i64* @FALSE, align 8
  %123 = icmp eq i64 %121, %122
  %124 = zext i1 %123 to i32
  %125 = call i32 @ok(i32 %124, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %126 = call i64 @DnsNameCompare_A(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @test_DnsNameCompare_A.a_dot_b, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @test_DnsNameCompare_A.b_dot_a_dot, i64 0, i64 0))
  %127 = load i64, i64* @FALSE, align 8
  %128 = icmp eq i64 %126, %127
  %129 = zext i1 %128 to i32
  %130 = call i32 @ok(i32 %129, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare dso_local i32 @ok(i32, i8*) #1

declare dso_local i64 @DnsNameCompare_A(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
