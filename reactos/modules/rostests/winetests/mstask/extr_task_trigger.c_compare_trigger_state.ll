; ModuleID = '/home/carl/AnghaBench/reactos/modules/rostests/winetests/mstask/extr_task_trigger.c_compare_trigger_state.c'
source_filename = "/home/carl/AnghaBench/reactos/modules/rostests/winetests/mstask/extr_task_trigger.c_compare_trigger_state.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_8__ = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.TYPE_7__ }
%struct.TYPE_7__ = type { %struct.TYPE_6__ }
%struct.TYPE_6__ = type { i64 }

@.str = private unnamed_addr constant [41 x i8] c"cbTriggerSize: Found %d but expected %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"Reserved1: Found %d but expected %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"wBeginYear: Found %d but expected %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"wBeginMonth: Found %d but expected %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"wBeginDay: Found %d but expected %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"wEndYear: Found %d but expected %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"wEndMonth: Found %d but expected %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"wEndDay: Found %d but expected %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"wStartHour: Found %d but expected %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"wStartMinute: Found %d but expected %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"MinutesDuration: Found %d but expected %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [43 x i8] c"MinutesInterval: Found %d but expected %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"rgFlags: Found %d but expected %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [39 x i8] c"TriggerType: Found %d but expected %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [51 x i8] c"Type.Daily.DaysInterval: Found %d but expected %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"Reserved2: Found %d but expected %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [50 x i8] c"wRandomMinutesInterval: Found %d but expected %d\0A\00", align 1
@TRUE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.TYPE_8__*, %struct.TYPE_8__*)* @compare_trigger_state to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @compare_trigger_state(%struct.TYPE_8__* byval(%struct.TYPE_8__) align 8 %0, %struct.TYPE_8__* byval(%struct.TYPE_8__) align 8 %1) #0 {
  %3 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  %8 = zext i1 %7 to i32
  %9 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = call i32 @ok(i32 %8, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i64 %10, i64 %12)
  %14 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  %19 = zext i1 %18 to i32
  %20 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = call i32 @ok(i32 %19, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i64 %21, i64 %23)
  %25 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %26, %28
  %30 = zext i1 %29 to i32
  %31 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = call i32 @ok(i32 %30, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i64 %32, i64 %34)
  %36 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 3
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %37, %39
  %41 = zext i1 %40 to i32
  %42 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = call i32 @ok(i32 %41, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i64 %43, i64 %45)
  %47 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 4
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 4
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %48, %50
  %52 = zext i1 %51 to i32
  %53 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 4
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = call i32 @ok(i32 %52, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i64 %54, i64 %56)
  %58 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 5
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 5
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %59, %61
  %63 = zext i1 %62 to i32
  %64 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 5
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 5
  %67 = load i64, i64* %66, align 8
  %68 = call i32 @ok(i32 %63, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %65, i64 %67)
  %69 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 6
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %70, %72
  %74 = zext i1 %73 to i32
  %75 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 6
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 6
  %78 = load i64, i64* %77, align 8
  %79 = call i32 @ok(i32 %74, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i64 %76, i64 %78)
  %80 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 7
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 7
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %81, %83
  %85 = zext i1 %84 to i32
  %86 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 7
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 7
  %89 = load i64, i64* %88, align 8
  %90 = call i32 @ok(i32 %85, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0), i64 %87, i64 %89)
  %91 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 8
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 8
  %94 = load i64, i64* %93, align 8
  %95 = icmp eq i64 %92, %94
  %96 = zext i1 %95 to i32
  %97 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 8
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 8
  %100 = load i64, i64* %99, align 8
  %101 = call i32 @ok(i32 %96, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i64 %98, i64 %100)
  %102 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 9
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 9
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %103, %105
  %107 = zext i1 %106 to i32
  %108 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 9
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 9
  %111 = load i64, i64* %110, align 8
  %112 = call i32 @ok(i32 %107, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i64 %109, i64 %111)
  %113 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 10
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 10
  %116 = load i64, i64* %115, align 8
  %117 = icmp eq i64 %114, %116
  %118 = zext i1 %117 to i32
  %119 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 10
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 10
  %122 = load i64, i64* %121, align 8
  %123 = call i32 @ok(i32 %118, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i64 %120, i64 %122)
  %124 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 11
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 11
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i64 %125, %127
  %129 = zext i1 %128 to i32
  %130 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 11
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 11
  %133 = load i64, i64* %132, align 8
  %134 = call i32 @ok(i32 %129, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0), i64 %131, i64 %133)
  %135 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 12
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 12
  %138 = load i64, i64* %137, align 8
  %139 = icmp eq i64 %136, %138
  %140 = zext i1 %139 to i32
  %141 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 12
  %142 = load i64, i64* %141, align 8
  %143 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 12
  %144 = load i64, i64* %143, align 8
  %145 = call i32 @ok(i32 %140, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i64 %142, i64 %144)
  %146 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 13
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 13
  %149 = load i64, i64* %148, align 8
  %150 = icmp eq i64 %147, %149
  %151 = zext i1 %150 to i32
  %152 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 13
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 13
  %155 = load i64, i64* %154, align 8
  %156 = call i32 @ok(i32 %151, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13, i64 0, i64 0), i64 %153, i64 %155)
  %157 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 16
  %158 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %157, i32 0, i32 0
  %159 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %158, i32 0, i32 0
  %160 = load i64, i64* %159, align 8
  %161 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 16
  %162 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %161, i32 0, i32 0
  %163 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %162, i32 0, i32 0
  %164 = load i64, i64* %163, align 8
  %165 = icmp eq i64 %160, %164
  %166 = zext i1 %165 to i32
  %167 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 16
  %168 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %167, i32 0, i32 0
  %169 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 16
  %172 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %171, i32 0, i32 0
  %173 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %172, i32 0, i32 0
  %174 = load i64, i64* %173, align 8
  %175 = call i32 @ok(i32 %166, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.14, i64 0, i64 0), i64 %170, i64 %174)
  %176 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 14
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 14
  %179 = load i64, i64* %178, align 8
  %180 = icmp eq i64 %177, %179
  %181 = zext i1 %180 to i32
  %182 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 14
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 14
  %185 = load i64, i64* %184, align 8
  %186 = call i32 @ok(i32 %181, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0), i64 %183, i64 %185)
  %187 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 15
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 15
  %190 = load i64, i64* %189, align 8
  %191 = icmp eq i64 %188, %190
  %192 = zext i1 %191 to i32
  %193 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %0, i32 0, i32 15
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %1, i32 0, i32 15
  %196 = load i64, i64* %195, align 8
  %197 = call i32 @ok(i32 %192, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0), i64 %194, i64 %196)
  %198 = load i32, i32* @TRUE, align 4
  ret i32 %198
}

declare dso_local i32 @ok(i32, i8*, i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
