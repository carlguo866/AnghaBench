; ModuleID = '/home/carl/AnghaBench/esp-idf/components/esp_eth/src/extr_esp_eth_mac_dm9051.c_dm9051_setup_default.c'
source_filename = "/home/carl/AnghaBench/esp-idf/components/esp_eth/src/extr_esp_eth_mac_dm9051.c_dm9051_setup_default.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ESP_OK = common dso_local global i64 0, align 8
@DM9051_NCR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"write NCR failed\00", align 1
@err = common dso_local global i32 0, align 4
@ESP_FAIL = common dso_local global i32 0, align 4
@DM9051_WCR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"write WCR failed\00", align 1
@DM9051_TCR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"write TCR failed\00", align 1
@DM9051_RCR = common dso_local global i32 0, align 4
@RCR_DIS_LONG = common dso_local global i32 0, align 4
@RCR_DIS_CRC = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"write RCR failed\00", align 1
@DM9051_BPTR = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [18 x i8] c"write BPTR failed\00", align 1
@DM9051_FCTR = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [18 x i8] c"write FCTR failed\00", align 1
@DM9051_FCR = common dso_local global i32 0, align 4
@FCR_FLOW_ENABLE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [17 x i8] c"write FCR failed\00", align 1
@DM9051_TCR2 = common dso_local global i32 0, align 4
@TCR2_RLCP = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [18 x i8] c"write TCR2 failed\00", align 1
@DM9051_ATCR = common dso_local global i32 0, align 4
@ATCR_AUTO_TX = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [18 x i8] c"write ATCR failed\00", align 1
@DM9051_TCSCR = common dso_local global i32 0, align 4
@TCSCR_IPCSE = common dso_local global i32 0, align 4
@TCSCR_TCPCSE = common dso_local global i32 0, align 4
@TCSCR_UDPCSE = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [19 x i8] c"write TCSCR failed\00", align 1
@DM9051_RCSCSR = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [20 x i8] c"write RCSCSR failed\00", align 1
@DM9051_INTCR = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [19 x i8] c"write INTCR failed\00", align 1
@DM9051_INTCKCR = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [21 x i8] c"write INTCKCR failed\00", align 1
@DM9051_RLENCR = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [20 x i8] c"write RLENCR failed\00", align 1
@DM9051_MEMSCR = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [20 x i8] c"write MEMSCR failed\00", align 1
@DM9051_MPTRCR = common dso_local global i32 0, align 4
@MPTRCR_RST_RX = common dso_local global i32 0, align 4
@MPTRCR_RST_TX = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [20 x i8] c"write MPTRCR failed\00", align 1
@DM9051_NSR = common dso_local global i32 0, align 4
@NSR_WAKEST = common dso_local global i32 0, align 4
@NSR_TX2END = common dso_local global i32 0, align 4
@NSR_TX1END = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [17 x i8] c"write NSR failed\00", align 1
@DM9051_ISR = common dso_local global i32 0, align 4
@ISR_CLR_STATUS = common dso_local global i32 0, align 4
@.str.17 = private unnamed_addr constant [17 x i8] c"write ISR failed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i32*)* @dm9051_setup_default to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @dm9051_setup_default(i32* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i64, align 8
  store i32* %0, i32** %3, align 8
  %5 = load i64, i64* @ESP_OK, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i32*, i32** %3, align 8
  %7 = load i32, i32* @DM9051_NCR, align 4
  %8 = call i64 @dm9051_register_write(i32* %6, i32 %7, i32 0)
  %9 = load i64, i64* @ESP_OK, align 8
  %10 = icmp eq i64 %8, %9
  %11 = zext i1 %10 to i32
  %12 = load i32, i32* @err, align 4
  %13 = load i32, i32* @ESP_FAIL, align 4
  %14 = call i32 @MAC_CHECK(i32 %11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %12, i32 %13)
  %15 = load i32*, i32** %3, align 8
  %16 = load i32, i32* @DM9051_WCR, align 4
  %17 = call i64 @dm9051_register_write(i32* %15, i32 %16, i32 0)
  %18 = load i64, i64* @ESP_OK, align 8
  %19 = icmp eq i64 %17, %18
  %20 = zext i1 %19 to i32
  %21 = load i32, i32* @err, align 4
  %22 = load i32, i32* @ESP_FAIL, align 4
  %23 = call i32 @MAC_CHECK(i32 %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %21, i32 %22)
  %24 = load i32*, i32** %3, align 8
  %25 = load i32, i32* @DM9051_TCR, align 4
  %26 = call i64 @dm9051_register_write(i32* %24, i32 %25, i32 0)
  %27 = load i64, i64* @ESP_OK, align 8
  %28 = icmp eq i64 %26, %27
  %29 = zext i1 %28 to i32
  %30 = load i32, i32* @err, align 4
  %31 = load i32, i32* @ESP_FAIL, align 4
  %32 = call i32 @MAC_CHECK(i32 %29, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 %30, i32 %31)
  %33 = load i32*, i32** %3, align 8
  %34 = load i32, i32* @DM9051_RCR, align 4
  %35 = load i32, i32* @RCR_DIS_LONG, align 4
  %36 = load i32, i32* @RCR_DIS_CRC, align 4
  %37 = or i32 %35, %36
  %38 = call i64 @dm9051_register_write(i32* %33, i32 %34, i32 %37)
  %39 = load i64, i64* @ESP_OK, align 8
  %40 = icmp eq i64 %38, %39
  %41 = zext i1 %40 to i32
  %42 = load i32, i32* @err, align 4
  %43 = load i32, i32* @ESP_FAIL, align 4
  %44 = call i32 @MAC_CHECK(i32 %41, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %42, i32 %43)
  %45 = load i32*, i32** %3, align 8
  %46 = load i32, i32* @DM9051_BPTR, align 4
  %47 = call i64 @dm9051_register_write(i32* %45, i32 %46, i32 63)
  %48 = load i64, i64* @ESP_OK, align 8
  %49 = icmp eq i64 %47, %48
  %50 = zext i1 %49 to i32
  %51 = load i32, i32* @err, align 4
  %52 = load i32, i32* @ESP_FAIL, align 4
  %53 = call i32 @MAC_CHECK(i32 %50, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %51, i32 %52)
  %54 = load i32*, i32** %3, align 8
  %55 = load i32, i32* @DM9051_FCTR, align 4
  %56 = call i64 @dm9051_register_write(i32* %54, i32 %55, i32 56)
  %57 = load i64, i64* @ESP_OK, align 8
  %58 = icmp eq i64 %56, %57
  %59 = zext i1 %58 to i32
  %60 = load i32, i32* @err, align 4
  %61 = load i32, i32* @ESP_FAIL, align 4
  %62 = call i32 @MAC_CHECK(i32 %59, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 %60, i32 %61)
  %63 = load i32*, i32** %3, align 8
  %64 = load i32, i32* @DM9051_FCR, align 4
  %65 = load i32, i32* @FCR_FLOW_ENABLE, align 4
  %66 = call i64 @dm9051_register_write(i32* %63, i32 %64, i32 %65)
  %67 = load i64, i64* @ESP_OK, align 8
  %68 = icmp eq i64 %66, %67
  %69 = zext i1 %68 to i32
  %70 = load i32, i32* @err, align 4
  %71 = load i32, i32* @ESP_FAIL, align 4
  %72 = call i32 @MAC_CHECK(i32 %69, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %70, i32 %71)
  %73 = load i32*, i32** %3, align 8
  %74 = load i32, i32* @DM9051_TCR2, align 4
  %75 = load i32, i32* @TCR2_RLCP, align 4
  %76 = call i64 @dm9051_register_write(i32* %73, i32 %74, i32 %75)
  %77 = load i64, i64* @ESP_OK, align 8
  %78 = icmp eq i64 %76, %77
  %79 = zext i1 %78 to i32
  %80 = load i32, i32* @err, align 4
  %81 = load i32, i32* @ESP_FAIL, align 4
  %82 = call i32 @MAC_CHECK(i32 %79, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i32 %80, i32 %81)
  %83 = load i32*, i32** %3, align 8
  %84 = load i32, i32* @DM9051_ATCR, align 4
  %85 = load i32, i32* @ATCR_AUTO_TX, align 4
  %86 = call i64 @dm9051_register_write(i32* %83, i32 %84, i32 %85)
  %87 = load i64, i64* @ESP_OK, align 8
  %88 = icmp eq i64 %86, %87
  %89 = zext i1 %88 to i32
  %90 = load i32, i32* @err, align 4
  %91 = load i32, i32* @ESP_FAIL, align 4
  %92 = call i32 @MAC_CHECK(i32 %89, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i32 %90, i32 %91)
  %93 = load i32*, i32** %3, align 8
  %94 = load i32, i32* @DM9051_TCSCR, align 4
  %95 = load i32, i32* @TCSCR_IPCSE, align 4
  %96 = load i32, i32* @TCSCR_TCPCSE, align 4
  %97 = or i32 %95, %96
  %98 = load i32, i32* @TCSCR_UDPCSE, align 4
  %99 = or i32 %97, %98
  %100 = call i64 @dm9051_register_write(i32* %93, i32 %94, i32 %99)
  %101 = load i64, i64* @ESP_OK, align 8
  %102 = icmp eq i64 %100, %101
  %103 = zext i1 %102 to i32
  %104 = load i32, i32* @err, align 4
  %105 = load i32, i32* @ESP_FAIL, align 4
  %106 = call i32 @MAC_CHECK(i32 %103, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i32 %104, i32 %105)
  %107 = load i32*, i32** %3, align 8
  %108 = load i32, i32* @DM9051_RCSCSR, align 4
  %109 = call i64 @dm9051_register_write(i32* %107, i32 %108, i32 0)
  %110 = load i64, i64* @ESP_OK, align 8
  %111 = icmp eq i64 %109, %110
  %112 = zext i1 %111 to i32
  %113 = load i32, i32* @err, align 4
  %114 = load i32, i32* @ESP_FAIL, align 4
  %115 = call i32 @MAC_CHECK(i32 %112, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), i32 %113, i32 %114)
  %116 = load i32*, i32** %3, align 8
  %117 = load i32, i32* @DM9051_INTCR, align 4
  %118 = call i64 @dm9051_register_write(i32* %116, i32 %117, i32 0)
  %119 = load i64, i64* @ESP_OK, align 8
  %120 = icmp eq i64 %118, %119
  %121 = zext i1 %120 to i32
  %122 = load i32, i32* @err, align 4
  %123 = load i32, i32* @ESP_FAIL, align 4
  %124 = call i32 @MAC_CHECK(i32 %121, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i32 %122, i32 %123)
  %125 = load i32*, i32** %3, align 8
  %126 = load i32, i32* @DM9051_INTCKCR, align 4
  %127 = call i64 @dm9051_register_write(i32* %125, i32 %126, i32 0)
  %128 = load i64, i64* @ESP_OK, align 8
  %129 = icmp eq i64 %127, %128
  %130 = zext i1 %129 to i32
  %131 = load i32, i32* @err, align 4
  %132 = load i32, i32* @ESP_FAIL, align 4
  %133 = call i32 @MAC_CHECK(i32 %130, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 %131, i32 %132)
  %134 = load i32*, i32** %3, align 8
  %135 = load i32, i32* @DM9051_RLENCR, align 4
  %136 = call i64 @dm9051_register_write(i32* %134, i32 %135, i32 0)
  %137 = load i64, i64* @ESP_OK, align 8
  %138 = icmp eq i64 %136, %137
  %139 = zext i1 %138 to i32
  %140 = load i32, i32* @err, align 4
  %141 = load i32, i32* @ESP_FAIL, align 4
  %142 = call i32 @MAC_CHECK(i32 %139, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0), i32 %140, i32 %141)
  %143 = load i32*, i32** %3, align 8
  %144 = load i32, i32* @DM9051_MEMSCR, align 4
  %145 = call i64 @dm9051_register_write(i32* %143, i32 %144, i32 0)
  %146 = load i64, i64* @ESP_OK, align 8
  %147 = icmp eq i64 %145, %146
  %148 = zext i1 %147 to i32
  %149 = load i32, i32* @err, align 4
  %150 = load i32, i32* @ESP_FAIL, align 4
  %151 = call i32 @MAC_CHECK(i32 %148, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 %149, i32 %150)
  %152 = load i32*, i32** %3, align 8
  %153 = load i32, i32* @DM9051_MPTRCR, align 4
  %154 = load i32, i32* @MPTRCR_RST_RX, align 4
  %155 = load i32, i32* @MPTRCR_RST_TX, align 4
  %156 = or i32 %154, %155
  %157 = call i64 @dm9051_register_write(i32* %152, i32 %153, i32 %156)
  %158 = load i64, i64* @ESP_OK, align 8
  %159 = icmp eq i64 %157, %158
  %160 = zext i1 %159 to i32
  %161 = load i32, i32* @err, align 4
  %162 = load i32, i32* @ESP_FAIL, align 4
  %163 = call i32 @MAC_CHECK(i32 %160, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i32 %161, i32 %162)
  %164 = load i32*, i32** %3, align 8
  %165 = load i32, i32* @DM9051_NSR, align 4
  %166 = load i32, i32* @NSR_WAKEST, align 4
  %167 = load i32, i32* @NSR_TX2END, align 4
  %168 = or i32 %166, %167
  %169 = load i32, i32* @NSR_TX1END, align 4
  %170 = or i32 %168, %169
  %171 = call i64 @dm9051_register_write(i32* %164, i32 %165, i32 %170)
  %172 = load i64, i64* @ESP_OK, align 8
  %173 = icmp eq i64 %171, %172
  %174 = zext i1 %173 to i32
  %175 = load i32, i32* @err, align 4
  %176 = load i32, i32* @ESP_FAIL, align 4
  %177 = call i32 @MAC_CHECK(i32 %174, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i32 %175, i32 %176)
  %178 = load i32*, i32** %3, align 8
  %179 = load i32, i32* @DM9051_ISR, align 4
  %180 = load i32, i32* @ISR_CLR_STATUS, align 4
  %181 = call i64 @dm9051_register_write(i32* %178, i32 %179, i32 %180)
  %182 = load i64, i64* @ESP_OK, align 8
  %183 = icmp eq i64 %181, %182
  %184 = zext i1 %183 to i32
  %185 = load i32, i32* @err, align 4
  %186 = load i32, i32* @ESP_FAIL, align 4
  %187 = call i32 @MAC_CHECK(i32 %184, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i64 0, i64 0), i32 %185, i32 %186)
  %188 = load i64, i64* @ESP_OK, align 8
  store i64 %188, i64* %2, align 8
  br label %191

189:                                              ; No predecessors!
  %190 = load i64, i64* %4, align 8
  store i64 %190, i64* %2, align 8
  br label %191

191:                                              ; preds = %189, %1
  %192 = load i64, i64* %2, align 8
  ret i64 %192
}

declare dso_local i32 @MAC_CHECK(i32, i8*, i32, i32) #1

declare dso_local i64 @dm9051_register_write(i32*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
