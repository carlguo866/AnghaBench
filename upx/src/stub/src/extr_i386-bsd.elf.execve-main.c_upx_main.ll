; ModuleID = '/home/carl/AnghaBench/upx/src/stub/src/extr_i386-bsd.elf.execve-main.c_upx_main.c'
source_filename = "/home/carl/AnghaBench/upx/src/stub/src/extr_i386-bsd.elf.execve-main.c_upx_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i64 }
%struct.Extent = type { i8*, i64 }
%struct.p_info = type { i64, i32, i32 }
%struct.timeval = type { i64, i64 }
%struct.b_info = type { i64, i64, i32 }
%struct.timespec = type { i64, i32 }

@UPX3 = common dso_local global i64 0, align 8
@ENOENT = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_EXCL = common dso_local global i32 0, align 4
@OVERHEAD = common dso_local global i32 0, align 4
@PAGE_MASK = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@UPX_MAGIC_LE32 = common dso_local global i64 0, align 8
@malloc_args = common dso_local global %struct.TYPE_4__ zeroinitializer, align 8
@UPX4 = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @upx_main(i8* %0, i64 %1, i32 (i8*, i64, i8*, i64*, i32)** %2, i32 %3, i32* %4, i8** %5, i8** %6, i32 %7) #0 {
  %9 = alloca %struct.Extent, align 8
  %10 = alloca i32 (i8*, i64, i8*, i64*, i32)**, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i8**, align 8
  %14 = alloca i8**, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca %struct.p_info, align 8
  %20 = alloca [20 x i8], align 16
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32, align 4
  %25 = alloca %struct.timeval, align 8
  %26 = alloca i32, align 4
  %27 = alloca %struct.b_info, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i64, align 8
  %31 = alloca i32, align 4
  %32 = alloca %struct.timespec, align 8
  %33 = bitcast %struct.Extent* %9 to { i8*, i64 }*
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 0
  store i8* %0, i8** %34, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 1
  store i64 %1, i64* %35, align 8
  store i32 (i8*, i64, i8*, i64*, i32)** %2, i32 (i8*, i64, i8*, i64*, i32)*** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32* %4, i32** %12, align 8
  store i8** %5, i8*** %13, align 8
  store i8** %6, i8*** %14, align 8
  store i32 %7, i32* %15, align 4
  %36 = load i32, i32* %11, align 4
  %37 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call { i8*, i8* } asm sideeffect "movsl; movsl; movsl", "=&{di},=&{si},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(%struct.p_info* %19, i8* %38) #3, !srcloc !2
  %40 = extractvalue { i8*, i8* } %39, 0
  %41 = extractvalue { i8*, i8* } %39, 1
  store i8* %40, i8** %21, align 8
  store i8* %41, i8** %22, align 8
  %42 = load i8*, i8** %22, align 8
  %43 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  store i8* %42, i8** %43, align 8
  %44 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, 16
  store i64 %46, i64* %44, align 8
  %47 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = load i64, i64* @UPX3, align 8
  %50 = icmp ne i64 %48, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %8
  br label %242

52:                                               ; preds = %8
  %53 = getelementptr inbounds [20 x i8], [20 x i8]* %20, i64 0, i64 0
  store i8* %53, i8** %18, align 8
  %54 = load i8*, i8** %18, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 0
  %56 = call i32 @SET4(i8* %55, i8 signext 47, i8 zeroext 116, i8 signext 109, i8 signext 112)
  %57 = load i8*, i8** %18, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 4
  %59 = call i32 @SET4(i8* %58, i8 signext 47, i8 zeroext 117, i8 signext 112, i8 signext 120)
  %60 = getelementptr inbounds [20 x i8], [20 x i8]* %20, i64 0, i64 0
  %61 = getelementptr inbounds i8, i8* %60, i64 20
  %62 = getelementptr inbounds i8, i8* %61, i64 -1
  store i8* %62, i8** %23, align 8
  %63 = load i8*, i8** %23, align 8
  %64 = call i64 (...) @getpid()
  %65 = trunc i64 %64 to i32
  %66 = call i32 @ascii5(i8* %63, i32 %65, i32 4)
  store i32 %66, i32* %24, align 4
  %67 = load i8*, i8** %23, align 8
  store i8 0, i8* %67, align 1
  %68 = load i8*, i8** %23, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 -4
  store i8* %69, i8** %23, align 8
  %70 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = load i32, i32* %24, align 4
  %73 = sext i32 %72 to i64
  %74 = xor i64 %73, %71
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %24, align 4
  %76 = call i32 @gettimeofday(%struct.timeval* %25, i32 0)
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %25, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = trunc i64 %78 to i32
  %80 = load i32, i32* %24, align 4
  %81 = xor i32 %80, %79
  store i32 %81, i32* %24, align 4
  %82 = getelementptr inbounds %struct.timeval, %struct.timeval* %25, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = trunc i64 %83 to i32
  %85 = shl i32 %84, 12
  %86 = load i32, i32* %24, align 4
  %87 = xor i32 %86, %85
  store i32 %87, i32* %24, align 4
  %88 = load i8*, i8** %23, align 8
  %89 = load i32, i32* %24, align 4
  %90 = call i32 @ascii5(i8* %88, i32 %89, i32 7)
  %91 = load i8*, i8** %18, align 8
  %92 = call i32 @unlink(i8* %91)
  store i32 %92, i32* %26, align 4
  %93 = load i32, i32* %26, align 4
  %94 = load i32, i32* @ENOENT, align 4
  %95 = sub nsw i32 0, %94
  %96 = icmp ne i32 %93, %95
  br i1 %96, label %97, label %101

97:                                               ; preds = %52
  %98 = load i32, i32* %26, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  br label %242

101:                                              ; preds = %97, %52
  %102 = load i8*, i8** %18, align 8
  %103 = load i32, i32* @O_WRONLY, align 4
  %104 = load i32, i32* @O_CREAT, align 4
  %105 = or i32 %103, %104
  %106 = load i32, i32* @O_EXCL, align 4
  %107 = or i32 %105, %106
  %108 = call i32 @open(i8* %102, i32 %107, i32 448)
  store i32 %108, i32* %16, align 4
  %109 = load i32, i32* %16, align 4
  %110 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = call i64 @ftruncate(i32 %109, i32 %111)
  %113 = icmp ne i64 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %101
  br label %239

115:                                              ; preds = %101
  %116 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 2
  %117 = load i32, i32* %116, align 4
  %118 = load i32, i32* @OVERHEAD, align 4
  %119 = add nsw i32 %117, %118
  %120 = load i32, i32* @PAGE_MASK, align 4
  %121 = xor i32 %120, -1
  %122 = add nsw i32 %119, %121
  %123 = load i32, i32* @PAGE_MASK, align 4
  %124 = and i32 %122, %123
  %125 = load i32, i32* @PROT_READ, align 4
  %126 = load i32, i32* @PROT_WRITE, align 4
  %127 = or i32 %125, %126
  %128 = load i32, i32* @MAP_PRIVATE, align 4
  %129 = load i32, i32* @MAP_ANONYMOUS, align 4
  %130 = or i32 %128, %129
  %131 = call i8* @mmap(i8* null, i32 %124, i32 %127, i32 %130, i32 -1, i32 0)
  store i8* %131, i8** %17, align 8
  %132 = load i8*, i8** %17, align 8
  %133 = ptrtoint i8* %132 to i64
  %134 = icmp uge i64 %133, -4095
  br i1 %134, label %135, label %136

135:                                              ; preds = %115
  br label %239

136:                                              ; preds = %115
  br label %137

137:                                              ; preds = %245, %136
  %138 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = call { i8*, i8* } asm sideeffect "movsl; movsl; movsl", "=&{di},=&{si},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(%struct.b_info* %27, i8* %139) #3, !srcloc !3
  %141 = extractvalue { i8*, i8* } %140, 0
  %142 = extractvalue { i8*, i8* } %140, 1
  store i8* %141, i8** %28, align 8
  store i8* %142, i8** %29, align 8
  %143 = load i8*, i8** %29, align 8
  %144 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  store i8* %143, i8** %144, align 8
  %145 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = sub i64 %146, 24
  store i64 %147, i64* %145, align 8
  %148 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %163

151:                                              ; preds = %137
  %152 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* @UPX_MAGIC_LE32, align 8
  %155 = icmp ne i64 %153, %154
  br i1 %155, label %156, label %157

156:                                              ; preds = %151
  br label %239

157:                                              ; preds = %151
  %158 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 1
  %159 = load i32, i32* %158, align 8
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %157
  br label %239

162:                                              ; preds = %157
  br label %246

163:                                              ; preds = %137
  %164 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = icmp sgt i64 %165, %167
  br i1 %168, label %176, label %169

169:                                              ; preds = %163
  %170 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 2
  %173 = load i32, i32* %172, align 4
  %174 = sext i32 %173 to i64
  %175 = icmp sgt i64 %171, %174
  br i1 %175, label %176, label %177

176:                                              ; preds = %169, %163
  br label %239

177:                                              ; preds = %169
  %178 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = icmp slt i64 %179, %181
  br i1 %182, label %183, label %208

183:                                              ; preds = %177
  %184 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %30, align 8
  %186 = load i32 (i8*, i64, i8*, i64*, i32)**, i32 (i8*, i64, i8*, i64*, i32)*** %10, align 8
  %187 = load i32 (i8*, i64, i8*, i64*, i32)*, i32 (i8*, i64, i8*, i64*, i32)** %186, align 8
  %188 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = load i8*, i8** %17, align 8
  %193 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 2
  %194 = bitcast i32* %193 to i8*
  %195 = bitcast i8* %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = call i32 %187(i8* %189, i64 %191, i8* %192, i64* %30, i32 %196)
  store i32 %197, i32* %31, align 4
  %198 = load i32, i32* %31, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %205, label %200

200:                                              ; preds = %183
  %201 = load i64, i64* %30, align 8
  %202 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %203 = load i64, i64* %202, align 8
  %204 = icmp ne i64 %201, %203
  br i1 %204, label %205, label %206

205:                                              ; preds = %200, %183
  br label %239

206:                                              ; preds = %200
  %207 = load i32*, i32** %12, align 8
  br label %209

208:                                              ; preds = %177
  br label %209

209:                                              ; preds = %208, %206
  %210 = load i32, i32* %16, align 4
  %211 = load i8*, i8** %17, align 8
  %212 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %213 = load i64, i64* %212, align 8
  %214 = call i64 @xwrite(i32 %210, i8* %211, i64 %213)
  %215 = icmp ne i64 %214, 0
  br i1 %215, label %216, label %217

216:                                              ; preds = %209
  br label %239

217:                                              ; preds = %209
  %218 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 0
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds %struct.p_info, %struct.p_info* %19, i32 0, i32 1
  %221 = load i32, i32* %220, align 8
  %222 = sext i32 %221 to i64
  %223 = sub nsw i64 %222, %219
  %224 = trunc i64 %223 to i32
  store i32 %224, i32* %220, align 8
  %225 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 0
  %228 = load i8*, i8** %227, align 8
  %229 = getelementptr inbounds i8, i8* %228, i64 %226
  store i8* %229, i8** %227, align 8
  %230 = getelementptr inbounds %struct.b_info, %struct.b_info* %27, i32 0, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 1
  %233 = load i64, i64* %232, align 8
  %234 = sub nsw i64 %233, %231
  store i64 %234, i64* %232, align 8
  %235 = getelementptr inbounds %struct.Extent, %struct.Extent* %9, i32 0, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = icmp slt i64 %236, 0
  br i1 %237, label %238, label %245

238:                                              ; preds = %217
  br label %239

239:                                              ; preds = %276, %260, %253, %238, %216, %205, %176, %161, %156, %135, %114
  %240 = load i8*, i8** %18, align 8
  %241 = call i32 @unlink(i8* %240)
  br label %242

242:                                              ; preds = %239, %100, %51
  br label %243

243:                                              ; preds = %242
  %244 = call i32 @exit(i32 127) #4
  unreachable

245:                                              ; preds = %217
  br label %137

246:                                              ; preds = %162
  %247 = load i8*, i8** %17, align 8
  %248 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @malloc_args, i32 0, i32 0), align 8
  %249 = call i32 @munmap(i8* %247, i64 %248)
  %250 = load i32, i32* %16, align 4
  %251 = call i64 @close(i32 %250)
  %252 = icmp ne i64 %251, 0
  br i1 %252, label %253, label %254

253:                                              ; preds = %246
  br label %239

254:                                              ; preds = %246
  %255 = load i8*, i8** %18, align 8
  %256 = load i8**, i8*** %14, align 8
  %257 = load i8**, i8*** %13, align 8
  %258 = call i64 @go_self(i8* %255, i8** %256, i8** %257)
  %259 = icmp sgt i64 0, %258
  br i1 %259, label %260, label %261

260:                                              ; preds = %254
  br label %239

261:                                              ; preds = %254
  %262 = call i64 (...) @fork()
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %276

264:                                              ; preds = %261
  %265 = call i64 (...) @fork()
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %274

267:                                              ; preds = %264
  %268 = load i32, i32* @UPX4, align 4
  %269 = getelementptr inbounds %struct.timespec, %struct.timespec* %32, i32 0, i32 1
  store i32 %268, i32* %269, align 8
  %270 = getelementptr inbounds %struct.timespec, %struct.timespec* %32, i32 0, i32 0
  store i64 0, i64* %270, align 8
  %271 = call i32 @nanosleep(%struct.timespec* %32, i32 0)
  %272 = load i8*, i8** %18, align 8
  %273 = call i32 @unlink(i8* %272)
  br label %274

274:                                              ; preds = %267, %264
  %275 = call i32 @exit(i32 0) #4
  unreachable

276:                                              ; preds = %261
  %277 = call i32 @waitpid(i32 -1, i32* null, i32 0)
  %278 = load i32, i32* %15, align 4
  %279 = load i8*, i8** %18, align 8
  %280 = load i8**, i8*** %14, align 8
  %281 = load i8**, i8*** %13, align 8
  %282 = call i32 @execve(i8* %279, i8** %280, i8** %281)
  br label %239
}

declare dso_local i32 @SET4(i8*, i8 signext, i8 zeroext, i8 signext, i8 signext) #1

declare dso_local i32 @ascii5(i8*, i32, i32) #1

declare dso_local i64 @getpid(...) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, i32) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i64 @ftruncate(i32, i32) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i64 @xwrite(i32, i8*, i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @munmap(i8*, i64) #1

declare dso_local i64 @close(i32) #1

declare dso_local i64 @go_self(i8*, i8**, i8**) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @nanosleep(%struct.timespec*, i32) #1

declare dso_local i32 @waitpid(i32, i32*, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 2300}
!3 = !{i32 3655}
