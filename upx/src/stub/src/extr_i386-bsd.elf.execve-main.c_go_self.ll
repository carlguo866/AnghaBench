; ModuleID = '/home/carl/AnghaBench/upx/src/stub/src/extr_i386-bsd.elf.execve-main.c_go_self.c'
source_filename = "/home/carl/AnghaBench/upx/src/stub/src/extr_i386-bsd.elf.execve-main.c_go_self.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@O_RDONLY = common dso_local global i32 0, align 4
@UPX2 = common dso_local global i32 0, align 4
@R_OK = common dso_local global i32 0, align 4
@X_OK = common dso_local global i32 0, align 4
@F_SETFD = common dso_local global i32 0, align 4
@FD_CLOEXEC = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i8**, i8**)* @go_self to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @go_self(i8* %0, i8** %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i32, align 4
  %8 = alloca [32 x i8], align 16
  %9 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8** %1, i8*** %5, align 8
  store i8** %2, i8*** %6, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = load i32, i32* @O_RDONLY, align 4
  %12 = call i32 @open(i8* %10, i32 %11, i32 0)
  store i32 %12, i32* %7, align 4
  %13 = load i32, i32* %7, align 4
  %14 = icmp sle i32 0, %13
  br i1 %14, label %15, label %54

15:                                               ; preds = %3
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %17 = getelementptr inbounds i8, i8* %16, i64 0
  %18 = call i32 @SET4(i8* %17, i8 signext 47, float 1.120000e+02, i8 signext 114, i8 signext 111)
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = call i32 @SET4(i8* %20, i8 signext 99, float 4.700000e+01, i8 signext 0, i8 signext 0)
  %22 = call i32 (...) @getpid()
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %24 = getelementptr inbounds i8, i8* %23, i64 6
  %25 = call i8* @upx_itoa(i32 %22, i8* %24)
  store i8* %25, i8** %9, align 8
  %26 = load i8*, i8** %9, align 8
  %27 = call i32 @SET4(i8* %26, i8 signext 47, float 1.020000e+02, i8 signext 100, i8 signext 47)
  %28 = load i32, i32* %7, align 4
  %29 = load i8*, i8** %9, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 4
  %31 = call i8* @upx_itoa(i32 %28, i8* %30)
  %32 = load i32, i32* @UPX2, align 4
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %34 = load i32, i32* @R_OK, align 4
  %35 = load i32, i32* @X_OK, align 4
  %36 = or i32 %34, %35
  %37 = call i64 @access(i8* %33, i32 %36)
  %38 = trunc i64 %37 to i32
  %39 = icmp eq i32 %32, %38
  br i1 %39, label %40, label %51

40:                                               ; preds = %15
  %41 = load i8*, i8** %4, align 8
  %42 = call i32 @unlink(i8* %41)
  %43 = load i32, i32* %7, align 4
  %44 = load i32, i32* @F_SETFD, align 4
  %45 = load i32, i32* @FD_CLOEXEC, align 4
  %46 = call i32 @fcntl(i32 %43, i32 %44, i32 %45)
  %47 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %48 = load i8**, i8*** %5, align 8
  %49 = load i8**, i8*** %6, align 8
  %50 = call i32 @execve(i8* %47, i8** %48, i8** %49)
  br label %51

51:                                               ; preds = %40, %15
  %52 = load i32, i32* %7, align 4
  %53 = call i32 @close(i32 %52)
  br label %54

54:                                               ; preds = %51, %3
  %55 = load i32, i32* %7, align 4
  ret i32 %55
}

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @SET4(i8*, i8 signext, float, i8 signext, i8 signext) #1

declare dso_local i8* @upx_itoa(i32, i8*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i64 @access(i8*, i32) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
