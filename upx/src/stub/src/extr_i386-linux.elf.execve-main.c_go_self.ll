; ModuleID = '/home/carl/AnghaBench/upx/src/stub/src/extr_i386-linux.elf.execve-main.c_go_self.c'
source_filename = "/home/carl/AnghaBench/upx/src/stub/src/extr_i386-linux.elf.execve-main.c_go_self.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@O_RDONLY = common dso_local global i32 0, align 4
@UPX2 = common dso_local global i32 0, align 4
@R_OK = common dso_local global i32 0, align 4
@X_OK = common dso_local global i32 0, align 4
@F_SETFD = common dso_local global i32 0, align 4
@FD_CLOEXEC = common dso_local global i32 0, align 4
@SEEK_END = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_EXCL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i8**, i8**)* @go_self to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @go_self(i8* %0, i8** %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i32, align 4
  %8 = alloca [32 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8** %1, i8*** %5, align 8
  store i8** %2, i8*** %6, align 8
  %13 = load i8*, i8** %4, align 8
  %14 = load i32, i32* @O_RDONLY, align 4
  %15 = call i32 @open(i8* %13, i32 %14, i32 0)
  store i32 %15, i32* %7, align 4
  %16 = load i32, i32* %7, align 4
  %17 = icmp sle i32 0, %16
  br i1 %17, label %18, label %86

18:                                               ; preds = %3
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %20 = getelementptr inbounds i8, i8* %19, i64 0
  %21 = call i32 @SET4(i8* %20, i8 signext 47, float 1.120000e+02, i8 signext 114, i8 signext 111)
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %23 = getelementptr inbounds i8, i8* %22, i64 4
  %24 = call i32 @SET4(i8* %23, i8 signext 99, float 4.700000e+01, i8 signext 0, i8 signext 0)
  %25 = call i32 (...) @getpid()
  %26 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %27 = getelementptr inbounds i8, i8* %26, i64 6
  %28 = call i8* @upx_itoa(i32 %25, i8* %27)
  store i8* %28, i8** %9, align 8
  %29 = load i8*, i8** %9, align 8
  %30 = call i32 @SET4(i8* %29, i8 signext 47, float 1.020000e+02, i8 signext 100, i8 signext 47)
  %31 = load i32, i32* %7, align 4
  %32 = load i8*, i8** %9, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 4
  %34 = call i8* @upx_itoa(i32 %31, i8* %33)
  %35 = load i32, i32* @UPX2, align 4
  %36 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %37 = load i32, i32* @R_OK, align 4
  %38 = load i32, i32* @X_OK, align 4
  %39 = or i32 %37, %38
  %40 = call i64 @access(i8* %36, i32 %39)
  %41 = trunc i64 %40 to i32
  %42 = icmp eq i32 %35, %41
  br i1 %42, label %43, label %83

43:                                               ; preds = %18
  %44 = load i8*, i8** %4, align 8
  %45 = call i32 @unlink(i8* %44)
  %46 = load i32, i32* %7, align 4
  %47 = load i32, i32* @F_SETFD, align 4
  %48 = load i32, i32* @FD_CLOEXEC, align 4
  %49 = call i32 @fcntl(i32 %46, i32 %47, i32 %48)
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %51 = load i8**, i8*** %5, align 8
  %52 = load i8**, i8*** %6, align 8
  %53 = call i32 @execve(i8* %50, i8** %51, i8** %52)
  %54 = load i32, i32* %7, align 4
  %55 = load i32, i32* @SEEK_END, align 4
  %56 = call i32 @lseek(i32 %54, i32 0, i32 %55)
  store i32 %56, i32* %10, align 4
  %57 = load i32, i32* %10, align 4
  %58 = load i32, i32* @PROT_READ, align 4
  %59 = load i32, i32* @PROT_WRITE, align 4
  %60 = or i32 %58, %59
  %61 = load i32, i32* @MAP_PRIVATE, align 4
  %62 = load i32, i32* %7, align 4
  %63 = call i8* @mmap(i8* null, i32 %57, i32 %60, i32 %61, i32 %62, i32 0)
  store i8* %63, i8** %11, align 8
  %64 = load i8*, i8** %4, align 8
  %65 = load i32, i32* @O_WRONLY, align 4
  %66 = load i32, i32* @O_CREAT, align 4
  %67 = or i32 %65, %66
  %68 = load i32, i32* @O_EXCL, align 4
  %69 = or i32 %67, %68
  %70 = call i32 @open(i8* %64, i32 %69, i32 448)
  store i32 %70, i32* %12, align 4
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* %12, align 4
  %73 = load i8*, i8** %11, align 8
  %74 = load i32, i32* %10, align 4
  %75 = call i64 @write(i32 %72, i8* %73, i32 %74)
  %76 = trunc i64 %75 to i32
  %77 = icmp ne i32 %71, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %43
  %79 = call i32 @exit(i32 127) #3
  unreachable

80:                                               ; preds = %43
  %81 = load i32, i32* %12, align 4
  %82 = call i32 @close(i32 %81)
  br label %83

83:                                               ; preds = %80, %18
  %84 = load i32, i32* %7, align 4
  %85 = call i32 @close(i32 %84)
  br label %86

86:                                               ; preds = %83, %3
  %87 = load i32, i32* %7, align 4
  ret i32 %87
}

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @SET4(i8*, i8 signext, float, i8 signext, i8 signext) #1

declare dso_local i8* @upx_itoa(i32, i8*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i64 @access(i8*, i32) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

declare dso_local i32 @lseek(i32, i32, i32) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i64 @write(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
