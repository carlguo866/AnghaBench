; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/arch/mips/kernel/extr_asm-offsets.c_output_signal_defined.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/arch/mips/kernel/extr_asm-offsets.c_output_signal_defined.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"Linux signal numbers.\00", align 1
@_SIGHUP = common dso_local global i32 0, align 4
@SIGHUP = common dso_local global i32 0, align 4
@_SIGINT = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@_SIGQUIT = common dso_local global i32 0, align 4
@SIGQUIT = common dso_local global i32 0, align 4
@_SIGILL = common dso_local global i32 0, align 4
@SIGILL = common dso_local global i32 0, align 4
@_SIGTRAP = common dso_local global i32 0, align 4
@SIGTRAP = common dso_local global i32 0, align 4
@_SIGIOT = common dso_local global i32 0, align 4
@SIGIOT = common dso_local global i32 0, align 4
@_SIGABRT = common dso_local global i32 0, align 4
@SIGABRT = common dso_local global i32 0, align 4
@_SIGEMT = common dso_local global i32 0, align 4
@SIGEMT = common dso_local global i32 0, align 4
@_SIGFPE = common dso_local global i32 0, align 4
@SIGFPE = common dso_local global i32 0, align 4
@_SIGKILL = common dso_local global i32 0, align 4
@SIGKILL = common dso_local global i32 0, align 4
@_SIGBUS = common dso_local global i32 0, align 4
@SIGBUS = common dso_local global i32 0, align 4
@_SIGSEGV = common dso_local global i32 0, align 4
@SIGSEGV = common dso_local global i32 0, align 4
@_SIGSYS = common dso_local global i32 0, align 4
@SIGSYS = common dso_local global i32 0, align 4
@_SIGPIPE = common dso_local global i32 0, align 4
@SIGPIPE = common dso_local global i32 0, align 4
@_SIGALRM = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@_SIGTERM = common dso_local global i32 0, align 4
@SIGTERM = common dso_local global i32 0, align 4
@_SIGUSR1 = common dso_local global i32 0, align 4
@SIGUSR1 = common dso_local global i32 0, align 4
@_SIGUSR2 = common dso_local global i32 0, align 4
@SIGUSR2 = common dso_local global i32 0, align 4
@_SIGCHLD = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@_SIGPWR = common dso_local global i32 0, align 4
@SIGPWR = common dso_local global i32 0, align 4
@_SIGWINCH = common dso_local global i32 0, align 4
@SIGWINCH = common dso_local global i32 0, align 4
@_SIGURG = common dso_local global i32 0, align 4
@SIGURG = common dso_local global i32 0, align 4
@_SIGIO = common dso_local global i32 0, align 4
@SIGIO = common dso_local global i32 0, align 4
@_SIGSTOP = common dso_local global i32 0, align 4
@SIGSTOP = common dso_local global i32 0, align 4
@_SIGTSTP = common dso_local global i32 0, align 4
@SIGTSTP = common dso_local global i32 0, align 4
@_SIGCONT = common dso_local global i32 0, align 4
@SIGCONT = common dso_local global i32 0, align 4
@_SIGTTIN = common dso_local global i32 0, align 4
@SIGTTIN = common dso_local global i32 0, align 4
@_SIGTTOU = common dso_local global i32 0, align 4
@SIGTTOU = common dso_local global i32 0, align 4
@_SIGVTALRM = common dso_local global i32 0, align 4
@SIGVTALRM = common dso_local global i32 0, align 4
@_SIGPROF = common dso_local global i32 0, align 4
@SIGPROF = common dso_local global i32 0, align 4
@_SIGXCPU = common dso_local global i32 0, align 4
@SIGXCPU = common dso_local global i32 0, align 4
@_SIGXFSZ = common dso_local global i32 0, align 4
@SIGXFSZ = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @output_signal_defined() #0 {
  %1 = call i32 @COMMENT(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %2 = load i32, i32* @_SIGHUP, align 4
  %3 = load i32, i32* @SIGHUP, align 4
  %4 = call i32 @DEFINE(i32 %2, i32 %3)
  %5 = load i32, i32* @_SIGINT, align 4
  %6 = load i32, i32* @SIGINT, align 4
  %7 = call i32 @DEFINE(i32 %5, i32 %6)
  %8 = load i32, i32* @_SIGQUIT, align 4
  %9 = load i32, i32* @SIGQUIT, align 4
  %10 = call i32 @DEFINE(i32 %8, i32 %9)
  %11 = load i32, i32* @_SIGILL, align 4
  %12 = load i32, i32* @SIGILL, align 4
  %13 = call i32 @DEFINE(i32 %11, i32 %12)
  %14 = load i32, i32* @_SIGTRAP, align 4
  %15 = load i32, i32* @SIGTRAP, align 4
  %16 = call i32 @DEFINE(i32 %14, i32 %15)
  %17 = load i32, i32* @_SIGIOT, align 4
  %18 = load i32, i32* @SIGIOT, align 4
  %19 = call i32 @DEFINE(i32 %17, i32 %18)
  %20 = load i32, i32* @_SIGABRT, align 4
  %21 = load i32, i32* @SIGABRT, align 4
  %22 = call i32 @DEFINE(i32 %20, i32 %21)
  %23 = load i32, i32* @_SIGEMT, align 4
  %24 = load i32, i32* @SIGEMT, align 4
  %25 = call i32 @DEFINE(i32 %23, i32 %24)
  %26 = load i32, i32* @_SIGFPE, align 4
  %27 = load i32, i32* @SIGFPE, align 4
  %28 = call i32 @DEFINE(i32 %26, i32 %27)
  %29 = load i32, i32* @_SIGKILL, align 4
  %30 = load i32, i32* @SIGKILL, align 4
  %31 = call i32 @DEFINE(i32 %29, i32 %30)
  %32 = load i32, i32* @_SIGBUS, align 4
  %33 = load i32, i32* @SIGBUS, align 4
  %34 = call i32 @DEFINE(i32 %32, i32 %33)
  %35 = load i32, i32* @_SIGSEGV, align 4
  %36 = load i32, i32* @SIGSEGV, align 4
  %37 = call i32 @DEFINE(i32 %35, i32 %36)
  %38 = load i32, i32* @_SIGSYS, align 4
  %39 = load i32, i32* @SIGSYS, align 4
  %40 = call i32 @DEFINE(i32 %38, i32 %39)
  %41 = load i32, i32* @_SIGPIPE, align 4
  %42 = load i32, i32* @SIGPIPE, align 4
  %43 = call i32 @DEFINE(i32 %41, i32 %42)
  %44 = load i32, i32* @_SIGALRM, align 4
  %45 = load i32, i32* @SIGALRM, align 4
  %46 = call i32 @DEFINE(i32 %44, i32 %45)
  %47 = load i32, i32* @_SIGTERM, align 4
  %48 = load i32, i32* @SIGTERM, align 4
  %49 = call i32 @DEFINE(i32 %47, i32 %48)
  %50 = load i32, i32* @_SIGUSR1, align 4
  %51 = load i32, i32* @SIGUSR1, align 4
  %52 = call i32 @DEFINE(i32 %50, i32 %51)
  %53 = load i32, i32* @_SIGUSR2, align 4
  %54 = load i32, i32* @SIGUSR2, align 4
  %55 = call i32 @DEFINE(i32 %53, i32 %54)
  %56 = load i32, i32* @_SIGCHLD, align 4
  %57 = load i32, i32* @SIGCHLD, align 4
  %58 = call i32 @DEFINE(i32 %56, i32 %57)
  %59 = load i32, i32* @_SIGPWR, align 4
  %60 = load i32, i32* @SIGPWR, align 4
  %61 = call i32 @DEFINE(i32 %59, i32 %60)
  %62 = load i32, i32* @_SIGWINCH, align 4
  %63 = load i32, i32* @SIGWINCH, align 4
  %64 = call i32 @DEFINE(i32 %62, i32 %63)
  %65 = load i32, i32* @_SIGURG, align 4
  %66 = load i32, i32* @SIGURG, align 4
  %67 = call i32 @DEFINE(i32 %65, i32 %66)
  %68 = load i32, i32* @_SIGIO, align 4
  %69 = load i32, i32* @SIGIO, align 4
  %70 = call i32 @DEFINE(i32 %68, i32 %69)
  %71 = load i32, i32* @_SIGSTOP, align 4
  %72 = load i32, i32* @SIGSTOP, align 4
  %73 = call i32 @DEFINE(i32 %71, i32 %72)
  %74 = load i32, i32* @_SIGTSTP, align 4
  %75 = load i32, i32* @SIGTSTP, align 4
  %76 = call i32 @DEFINE(i32 %74, i32 %75)
  %77 = load i32, i32* @_SIGCONT, align 4
  %78 = load i32, i32* @SIGCONT, align 4
  %79 = call i32 @DEFINE(i32 %77, i32 %78)
  %80 = load i32, i32* @_SIGTTIN, align 4
  %81 = load i32, i32* @SIGTTIN, align 4
  %82 = call i32 @DEFINE(i32 %80, i32 %81)
  %83 = load i32, i32* @_SIGTTOU, align 4
  %84 = load i32, i32* @SIGTTOU, align 4
  %85 = call i32 @DEFINE(i32 %83, i32 %84)
  %86 = load i32, i32* @_SIGVTALRM, align 4
  %87 = load i32, i32* @SIGVTALRM, align 4
  %88 = call i32 @DEFINE(i32 %86, i32 %87)
  %89 = load i32, i32* @_SIGPROF, align 4
  %90 = load i32, i32* @SIGPROF, align 4
  %91 = call i32 @DEFINE(i32 %89, i32 %90)
  %92 = load i32, i32* @_SIGXCPU, align 4
  %93 = load i32, i32* @SIGXCPU, align 4
  %94 = call i32 @DEFINE(i32 %92, i32 %93)
  %95 = load i32, i32* @_SIGXFSZ, align 4
  %96 = load i32, i32* @SIGXFSZ, align 4
  %97 = call i32 @DEFINE(i32 %95, i32 %96)
  %98 = call i32 (...) @BLANK()
  ret void
}

declare dso_local i32 @COMMENT(i8*) #1

declare dso_local i32 @DEFINE(i32, i32) #1

declare dso_local i32 @BLANK(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
