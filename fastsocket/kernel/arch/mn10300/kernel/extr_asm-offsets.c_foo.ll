; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/arch/mn10300/kernel/extr_asm-offsets.c_foo.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/arch/mn10300/kernel/extr_asm-offsets.c_foo.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { i32 }
%struct.TYPE_6__ = type { i32 }
%struct.TYPE_4__ = type { i32, i32, i32 }

@SIGCONTEXT_d0 = common dso_local global i32 0, align 4
@sigcontext = common dso_local global i32 0, align 4
@d0 = common dso_local global i32 0, align 4
@SIGCONTEXT_d1 = common dso_local global i32 0, align 4
@d1 = common dso_local global i32 0, align 4
@TI_task = common dso_local global i32 0, align 4
@thread_info = common dso_local global i32 0, align 4
@task = common dso_local global i32 0, align 4
@TI_exec_domain = common dso_local global i32 0, align 4
@exec_domain = common dso_local global i32 0, align 4
@TI_flags = common dso_local global i32 0, align 4
@flags = common dso_local global i32 0, align 4
@TI_cpu = common dso_local global i32 0, align 4
@cpu = common dso_local global i32 0, align 4
@TI_preempt_count = common dso_local global i32 0, align 4
@preempt_count = common dso_local global i32 0, align 4
@TI_addr_limit = common dso_local global i32 0, align 4
@addr_limit = common dso_local global i32 0, align 4
@TI_restart_block = common dso_local global i32 0, align 4
@restart_block = common dso_local global i32 0, align 4
@REG_D0 = common dso_local global i32 0, align 4
@pt_regs = common dso_local global i32 0, align 4
@REG_D1 = common dso_local global i32 0, align 4
@REG_D2 = common dso_local global i32 0, align 4
@d2 = common dso_local global i32 0, align 4
@REG_D3 = common dso_local global i32 0, align 4
@d3 = common dso_local global i32 0, align 4
@REG_A0 = common dso_local global i32 0, align 4
@a0 = common dso_local global i32 0, align 4
@REG_A1 = common dso_local global i32 0, align 4
@a1 = common dso_local global i32 0, align 4
@REG_A2 = common dso_local global i32 0, align 4
@a2 = common dso_local global i32 0, align 4
@REG_A3 = common dso_local global i32 0, align 4
@a3 = common dso_local global i32 0, align 4
@REG_E0 = common dso_local global i32 0, align 4
@e0 = common dso_local global i32 0, align 4
@REG_E1 = common dso_local global i32 0, align 4
@e1 = common dso_local global i32 0, align 4
@REG_E2 = common dso_local global i32 0, align 4
@e2 = common dso_local global i32 0, align 4
@REG_E3 = common dso_local global i32 0, align 4
@e3 = common dso_local global i32 0, align 4
@REG_E4 = common dso_local global i32 0, align 4
@e4 = common dso_local global i32 0, align 4
@REG_E5 = common dso_local global i32 0, align 4
@e5 = common dso_local global i32 0, align 4
@REG_E6 = common dso_local global i32 0, align 4
@e6 = common dso_local global i32 0, align 4
@REG_E7 = common dso_local global i32 0, align 4
@e7 = common dso_local global i32 0, align 4
@REG_SP = common dso_local global i32 0, align 4
@sp = common dso_local global i32 0, align 4
@REG_EPSW = common dso_local global i32 0, align 4
@epsw = common dso_local global i32 0, align 4
@REG_PC = common dso_local global i32 0, align 4
@pc = common dso_local global i32 0, align 4
@REG_LAR = common dso_local global i32 0, align 4
@lar = common dso_local global i32 0, align 4
@REG_LIR = common dso_local global i32 0, align 4
@lir = common dso_local global i32 0, align 4
@REG_MDR = common dso_local global i32 0, align 4
@mdr = common dso_local global i32 0, align 4
@REG_MCVF = common dso_local global i32 0, align 4
@mcvf = common dso_local global i32 0, align 4
@REG_MCRL = common dso_local global i32 0, align 4
@mcrl = common dso_local global i32 0, align 4
@REG_MCRH = common dso_local global i32 0, align 4
@mcrh = common dso_local global i32 0, align 4
@REG_MDRQ = common dso_local global i32 0, align 4
@mdrq = common dso_local global i32 0, align 4
@REG_ORIG_D0 = common dso_local global i32 0, align 4
@orig_d0 = common dso_local global i32 0, align 4
@REG_NEXT = common dso_local global i32 0, align 4
@next = common dso_local global i32 0, align 4
@REG__END = common dso_local global i32 0, align 4
@THREAD_UREGS = common dso_local global i32 0, align 4
@thread_struct = common dso_local global i32 0, align 4
@uregs = common dso_local global i32 0, align 4
@THREAD_PC = common dso_local global i32 0, align 4
@THREAD_SP = common dso_local global i32 0, align 4
@THREAD_A3 = common dso_local global i32 0, align 4
@THREAD_USP = common dso_local global i32 0, align 4
@usp = common dso_local global i32 0, align 4
@THREAD_FRAME = common dso_local global i32 0, align 4
@__frame = common dso_local global i32 0, align 4
@CLONE_VM_asm = common dso_local global i32 0, align 4
@CLONE_VM = common dso_local global i32 0, align 4
@CLONE_FS_asm = common dso_local global i32 0, align 4
@CLONE_FS = common dso_local global i32 0, align 4
@CLONE_FILES_asm = common dso_local global i32 0, align 4
@CLONE_FILES = common dso_local global i32 0, align 4
@CLONE_SIGHAND_asm = common dso_local global i32 0, align 4
@CLONE_SIGHAND = common dso_local global i32 0, align 4
@CLONE_UNTRACED_asm = common dso_local global i32 0, align 4
@CLONE_UNTRACED = common dso_local global i32 0, align 4
@SIGCHLD_asm = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@EXEC_DOMAIN_handler = common dso_local global i32 0, align 4
@handler = common dso_local global i32 0, align 4
@RT_SIGFRAME_sigcontext = common dso_local global i32 0, align 4
@rt_sigframe = common dso_local global i32 0, align 4
@uc = common dso_local global %struct.TYPE_5__ zeroinitializer, align 4
@PAGE_SIZE_asm = common dso_local global i32 0, align 4
@PAGE_SIZE = common dso_local global i32 0, align 4
@__rx_buffer = common dso_local global i32 0, align 4
@mn10300_serial_port = common dso_local global i32 0, align 4
@rx_buffer = common dso_local global i32 0, align 4
@__rx_inp = common dso_local global i32 0, align 4
@rx_inp = common dso_local global i32 0, align 4
@__rx_outp = common dso_local global i32 0, align 4
@rx_outp = common dso_local global i32 0, align 4
@__uart_state = common dso_local global i32 0, align 4
@uart = common dso_local global %struct.TYPE_6__ zeroinitializer, align 4
@__tx_xchar = common dso_local global i32 0, align 4
@tx_xchar = common dso_local global i32 0, align 4
@__tx_break = common dso_local global i32 0, align 4
@tx_break = common dso_local global i32 0, align 4
@__intr_flags = common dso_local global i32 0, align 4
@intr_flags = common dso_local global i32 0, align 4
@__rx_icr = common dso_local global i32 0, align 4
@rx_icr = common dso_local global i32 0, align 4
@__tx_icr = common dso_local global i32 0, align 4
@tx_icr = common dso_local global i32 0, align 4
@__tm_icr = common dso_local global i32 0, align 4
@_tmicr = common dso_local global i32 0, align 4
@__iobase = common dso_local global i32 0, align 4
@_iobase = common dso_local global i32 0, align 4
@__UART_XMIT_SIZE = common dso_local global i32 0, align 4
@UART_XMIT_SIZE = common dso_local global i32 0, align 4
@__xmit_buffer = common dso_local global i32 0, align 4
@uart_state = common dso_local global i32 0, align 4
@xmit = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@__xmit_head = common dso_local global i32 0, align 4
@__xmit_tail = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 {
  %1 = load i32, i32* @SIGCONTEXT_d0, align 4
  %2 = load i32, i32* @sigcontext, align 4
  %3 = load i32, i32* @d0, align 4
  %4 = call i32 @OFFSET(i32 %1, i32 %2, i32 %3)
  %5 = load i32, i32* @SIGCONTEXT_d1, align 4
  %6 = load i32, i32* @sigcontext, align 4
  %7 = load i32, i32* @d1, align 4
  %8 = call i32 @OFFSET(i32 %5, i32 %6, i32 %7)
  %9 = call i32 (...) @BLANK()
  %10 = load i32, i32* @TI_task, align 4
  %11 = load i32, i32* @thread_info, align 4
  %12 = load i32, i32* @task, align 4
  %13 = call i32 @OFFSET(i32 %10, i32 %11, i32 %12)
  %14 = load i32, i32* @TI_exec_domain, align 4
  %15 = load i32, i32* @thread_info, align 4
  %16 = load i32, i32* @exec_domain, align 4
  %17 = call i32 @OFFSET(i32 %14, i32 %15, i32 %16)
  %18 = load i32, i32* @TI_flags, align 4
  %19 = load i32, i32* @thread_info, align 4
  %20 = load i32, i32* @flags, align 4
  %21 = call i32 @OFFSET(i32 %18, i32 %19, i32 %20)
  %22 = load i32, i32* @TI_cpu, align 4
  %23 = load i32, i32* @thread_info, align 4
  %24 = load i32, i32* @cpu, align 4
  %25 = call i32 @OFFSET(i32 %22, i32 %23, i32 %24)
  %26 = load i32, i32* @TI_preempt_count, align 4
  %27 = load i32, i32* @thread_info, align 4
  %28 = load i32, i32* @preempt_count, align 4
  %29 = call i32 @OFFSET(i32 %26, i32 %27, i32 %28)
  %30 = load i32, i32* @TI_addr_limit, align 4
  %31 = load i32, i32* @thread_info, align 4
  %32 = load i32, i32* @addr_limit, align 4
  %33 = call i32 @OFFSET(i32 %30, i32 %31, i32 %32)
  %34 = load i32, i32* @TI_restart_block, align 4
  %35 = load i32, i32* @thread_info, align 4
  %36 = load i32, i32* @restart_block, align 4
  %37 = call i32 @OFFSET(i32 %34, i32 %35, i32 %36)
  %38 = call i32 (...) @BLANK()
  %39 = load i32, i32* @REG_D0, align 4
  %40 = load i32, i32* @pt_regs, align 4
  %41 = load i32, i32* @d0, align 4
  %42 = call i32 @OFFSET(i32 %39, i32 %40, i32 %41)
  %43 = load i32, i32* @REG_D1, align 4
  %44 = load i32, i32* @pt_regs, align 4
  %45 = load i32, i32* @d1, align 4
  %46 = call i32 @OFFSET(i32 %43, i32 %44, i32 %45)
  %47 = load i32, i32* @REG_D2, align 4
  %48 = load i32, i32* @pt_regs, align 4
  %49 = load i32, i32* @d2, align 4
  %50 = call i32 @OFFSET(i32 %47, i32 %48, i32 %49)
  %51 = load i32, i32* @REG_D3, align 4
  %52 = load i32, i32* @pt_regs, align 4
  %53 = load i32, i32* @d3, align 4
  %54 = call i32 @OFFSET(i32 %51, i32 %52, i32 %53)
  %55 = load i32, i32* @REG_A0, align 4
  %56 = load i32, i32* @pt_regs, align 4
  %57 = load i32, i32* @a0, align 4
  %58 = call i32 @OFFSET(i32 %55, i32 %56, i32 %57)
  %59 = load i32, i32* @REG_A1, align 4
  %60 = load i32, i32* @pt_regs, align 4
  %61 = load i32, i32* @a1, align 4
  %62 = call i32 @OFFSET(i32 %59, i32 %60, i32 %61)
  %63 = load i32, i32* @REG_A2, align 4
  %64 = load i32, i32* @pt_regs, align 4
  %65 = load i32, i32* @a2, align 4
  %66 = call i32 @OFFSET(i32 %63, i32 %64, i32 %65)
  %67 = load i32, i32* @REG_A3, align 4
  %68 = load i32, i32* @pt_regs, align 4
  %69 = load i32, i32* @a3, align 4
  %70 = call i32 @OFFSET(i32 %67, i32 %68, i32 %69)
  %71 = load i32, i32* @REG_E0, align 4
  %72 = load i32, i32* @pt_regs, align 4
  %73 = load i32, i32* @e0, align 4
  %74 = call i32 @OFFSET(i32 %71, i32 %72, i32 %73)
  %75 = load i32, i32* @REG_E1, align 4
  %76 = load i32, i32* @pt_regs, align 4
  %77 = load i32, i32* @e1, align 4
  %78 = call i32 @OFFSET(i32 %75, i32 %76, i32 %77)
  %79 = load i32, i32* @REG_E2, align 4
  %80 = load i32, i32* @pt_regs, align 4
  %81 = load i32, i32* @e2, align 4
  %82 = call i32 @OFFSET(i32 %79, i32 %80, i32 %81)
  %83 = load i32, i32* @REG_E3, align 4
  %84 = load i32, i32* @pt_regs, align 4
  %85 = load i32, i32* @e3, align 4
  %86 = call i32 @OFFSET(i32 %83, i32 %84, i32 %85)
  %87 = load i32, i32* @REG_E4, align 4
  %88 = load i32, i32* @pt_regs, align 4
  %89 = load i32, i32* @e4, align 4
  %90 = call i32 @OFFSET(i32 %87, i32 %88, i32 %89)
  %91 = load i32, i32* @REG_E5, align 4
  %92 = load i32, i32* @pt_regs, align 4
  %93 = load i32, i32* @e5, align 4
  %94 = call i32 @OFFSET(i32 %91, i32 %92, i32 %93)
  %95 = load i32, i32* @REG_E6, align 4
  %96 = load i32, i32* @pt_regs, align 4
  %97 = load i32, i32* @e6, align 4
  %98 = call i32 @OFFSET(i32 %95, i32 %96, i32 %97)
  %99 = load i32, i32* @REG_E7, align 4
  %100 = load i32, i32* @pt_regs, align 4
  %101 = load i32, i32* @e7, align 4
  %102 = call i32 @OFFSET(i32 %99, i32 %100, i32 %101)
  %103 = load i32, i32* @REG_SP, align 4
  %104 = load i32, i32* @pt_regs, align 4
  %105 = load i32, i32* @sp, align 4
  %106 = call i32 @OFFSET(i32 %103, i32 %104, i32 %105)
  %107 = load i32, i32* @REG_EPSW, align 4
  %108 = load i32, i32* @pt_regs, align 4
  %109 = load i32, i32* @epsw, align 4
  %110 = call i32 @OFFSET(i32 %107, i32 %108, i32 %109)
  %111 = load i32, i32* @REG_PC, align 4
  %112 = load i32, i32* @pt_regs, align 4
  %113 = load i32, i32* @pc, align 4
  %114 = call i32 @OFFSET(i32 %111, i32 %112, i32 %113)
  %115 = load i32, i32* @REG_LAR, align 4
  %116 = load i32, i32* @pt_regs, align 4
  %117 = load i32, i32* @lar, align 4
  %118 = call i32 @OFFSET(i32 %115, i32 %116, i32 %117)
  %119 = load i32, i32* @REG_LIR, align 4
  %120 = load i32, i32* @pt_regs, align 4
  %121 = load i32, i32* @lir, align 4
  %122 = call i32 @OFFSET(i32 %119, i32 %120, i32 %121)
  %123 = load i32, i32* @REG_MDR, align 4
  %124 = load i32, i32* @pt_regs, align 4
  %125 = load i32, i32* @mdr, align 4
  %126 = call i32 @OFFSET(i32 %123, i32 %124, i32 %125)
  %127 = load i32, i32* @REG_MCVF, align 4
  %128 = load i32, i32* @pt_regs, align 4
  %129 = load i32, i32* @mcvf, align 4
  %130 = call i32 @OFFSET(i32 %127, i32 %128, i32 %129)
  %131 = load i32, i32* @REG_MCRL, align 4
  %132 = load i32, i32* @pt_regs, align 4
  %133 = load i32, i32* @mcrl, align 4
  %134 = call i32 @OFFSET(i32 %131, i32 %132, i32 %133)
  %135 = load i32, i32* @REG_MCRH, align 4
  %136 = load i32, i32* @pt_regs, align 4
  %137 = load i32, i32* @mcrh, align 4
  %138 = call i32 @OFFSET(i32 %135, i32 %136, i32 %137)
  %139 = load i32, i32* @REG_MDRQ, align 4
  %140 = load i32, i32* @pt_regs, align 4
  %141 = load i32, i32* @mdrq, align 4
  %142 = call i32 @OFFSET(i32 %139, i32 %140, i32 %141)
  %143 = load i32, i32* @REG_ORIG_D0, align 4
  %144 = load i32, i32* @pt_regs, align 4
  %145 = load i32, i32* @orig_d0, align 4
  %146 = call i32 @OFFSET(i32 %143, i32 %144, i32 %145)
  %147 = load i32, i32* @REG_NEXT, align 4
  %148 = load i32, i32* @pt_regs, align 4
  %149 = load i32, i32* @next, align 4
  %150 = call i32 @OFFSET(i32 %147, i32 %148, i32 %149)
  %151 = load i32, i32* @REG__END, align 4
  %152 = call i32 @DEFINE(i32 %151, i32 4)
  %153 = call i32 (...) @BLANK()
  %154 = load i32, i32* @THREAD_UREGS, align 4
  %155 = load i32, i32* @thread_struct, align 4
  %156 = load i32, i32* @uregs, align 4
  %157 = call i32 @OFFSET(i32 %154, i32 %155, i32 %156)
  %158 = load i32, i32* @THREAD_PC, align 4
  %159 = load i32, i32* @thread_struct, align 4
  %160 = load i32, i32* @pc, align 4
  %161 = call i32 @OFFSET(i32 %158, i32 %159, i32 %160)
  %162 = load i32, i32* @THREAD_SP, align 4
  %163 = load i32, i32* @thread_struct, align 4
  %164 = load i32, i32* @sp, align 4
  %165 = call i32 @OFFSET(i32 %162, i32 %163, i32 %164)
  %166 = load i32, i32* @THREAD_A3, align 4
  %167 = load i32, i32* @thread_struct, align 4
  %168 = load i32, i32* @a3, align 4
  %169 = call i32 @OFFSET(i32 %166, i32 %167, i32 %168)
  %170 = load i32, i32* @THREAD_USP, align 4
  %171 = load i32, i32* @thread_struct, align 4
  %172 = load i32, i32* @usp, align 4
  %173 = call i32 @OFFSET(i32 %170, i32 %171, i32 %172)
  %174 = load i32, i32* @THREAD_FRAME, align 4
  %175 = load i32, i32* @thread_struct, align 4
  %176 = load i32, i32* @__frame, align 4
  %177 = call i32 @OFFSET(i32 %174, i32 %175, i32 %176)
  %178 = call i32 (...) @BLANK()
  %179 = load i32, i32* @CLONE_VM_asm, align 4
  %180 = load i32, i32* @CLONE_VM, align 4
  %181 = call i32 @DEFINE(i32 %179, i32 %180)
  %182 = load i32, i32* @CLONE_FS_asm, align 4
  %183 = load i32, i32* @CLONE_FS, align 4
  %184 = call i32 @DEFINE(i32 %182, i32 %183)
  %185 = load i32, i32* @CLONE_FILES_asm, align 4
  %186 = load i32, i32* @CLONE_FILES, align 4
  %187 = call i32 @DEFINE(i32 %185, i32 %186)
  %188 = load i32, i32* @CLONE_SIGHAND_asm, align 4
  %189 = load i32, i32* @CLONE_SIGHAND, align 4
  %190 = call i32 @DEFINE(i32 %188, i32 %189)
  %191 = load i32, i32* @CLONE_UNTRACED_asm, align 4
  %192 = load i32, i32* @CLONE_UNTRACED, align 4
  %193 = call i32 @DEFINE(i32 %191, i32 %192)
  %194 = load i32, i32* @SIGCHLD_asm, align 4
  %195 = load i32, i32* @SIGCHLD, align 4
  %196 = call i32 @DEFINE(i32 %194, i32 %195)
  %197 = call i32 (...) @BLANK()
  %198 = load i32, i32* @EXEC_DOMAIN_handler, align 4
  %199 = load i32, i32* @exec_domain, align 4
  %200 = load i32, i32* @handler, align 4
  %201 = call i32 @OFFSET(i32 %198, i32 %199, i32 %200)
  %202 = load i32, i32* @RT_SIGFRAME_sigcontext, align 4
  %203 = load i32, i32* @rt_sigframe, align 4
  %204 = load i32, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @uc, i32 0, i32 0), align 4
  %205 = call i32 @OFFSET(i32 %202, i32 %203, i32 %204)
  %206 = load i32, i32* @PAGE_SIZE_asm, align 4
  %207 = load i32, i32* @PAGE_SIZE, align 4
  %208 = call i32 @DEFINE(i32 %206, i32 %207)
  %209 = load i32, i32* @__rx_buffer, align 4
  %210 = load i32, i32* @mn10300_serial_port, align 4
  %211 = load i32, i32* @rx_buffer, align 4
  %212 = call i32 @OFFSET(i32 %209, i32 %210, i32 %211)
  %213 = load i32, i32* @__rx_inp, align 4
  %214 = load i32, i32* @mn10300_serial_port, align 4
  %215 = load i32, i32* @rx_inp, align 4
  %216 = call i32 @OFFSET(i32 %213, i32 %214, i32 %215)
  %217 = load i32, i32* @__rx_outp, align 4
  %218 = load i32, i32* @mn10300_serial_port, align 4
  %219 = load i32, i32* @rx_outp, align 4
  %220 = call i32 @OFFSET(i32 %217, i32 %218, i32 %219)
  %221 = load i32, i32* @__uart_state, align 4
  %222 = load i32, i32* @mn10300_serial_port, align 4
  %223 = load i32, i32* getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @uart, i32 0, i32 0), align 4
  %224 = call i32 @OFFSET(i32 %221, i32 %222, i32 %223)
  %225 = load i32, i32* @__tx_xchar, align 4
  %226 = load i32, i32* @mn10300_serial_port, align 4
  %227 = load i32, i32* @tx_xchar, align 4
  %228 = call i32 @OFFSET(i32 %225, i32 %226, i32 %227)
  %229 = load i32, i32* @__tx_break, align 4
  %230 = load i32, i32* @mn10300_serial_port, align 4
  %231 = load i32, i32* @tx_break, align 4
  %232 = call i32 @OFFSET(i32 %229, i32 %230, i32 %231)
  %233 = load i32, i32* @__intr_flags, align 4
  %234 = load i32, i32* @mn10300_serial_port, align 4
  %235 = load i32, i32* @intr_flags, align 4
  %236 = call i32 @OFFSET(i32 %233, i32 %234, i32 %235)
  %237 = load i32, i32* @__rx_icr, align 4
  %238 = load i32, i32* @mn10300_serial_port, align 4
  %239 = load i32, i32* @rx_icr, align 4
  %240 = call i32 @OFFSET(i32 %237, i32 %238, i32 %239)
  %241 = load i32, i32* @__tx_icr, align 4
  %242 = load i32, i32* @mn10300_serial_port, align 4
  %243 = load i32, i32* @tx_icr, align 4
  %244 = call i32 @OFFSET(i32 %241, i32 %242, i32 %243)
  %245 = load i32, i32* @__tm_icr, align 4
  %246 = load i32, i32* @mn10300_serial_port, align 4
  %247 = load i32, i32* @_tmicr, align 4
  %248 = call i32 @OFFSET(i32 %245, i32 %246, i32 %247)
  %249 = load i32, i32* @__iobase, align 4
  %250 = load i32, i32* @mn10300_serial_port, align 4
  %251 = load i32, i32* @_iobase, align 4
  %252 = call i32 @OFFSET(i32 %249, i32 %250, i32 %251)
  %253 = load i32, i32* @__UART_XMIT_SIZE, align 4
  %254 = load i32, i32* @UART_XMIT_SIZE, align 4
  %255 = call i32 @DEFINE(i32 %253, i32 %254)
  %256 = load i32, i32* @__xmit_buffer, align 4
  %257 = load i32, i32* @uart_state, align 4
  %258 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @xmit, i32 0, i32 2), align 4
  %259 = call i32 @OFFSET(i32 %256, i32 %257, i32 %258)
  %260 = load i32, i32* @__xmit_head, align 4
  %261 = load i32, i32* @uart_state, align 4
  %262 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @xmit, i32 0, i32 1), align 4
  %263 = call i32 @OFFSET(i32 %260, i32 %261, i32 %262)
  %264 = load i32, i32* @__xmit_tail, align 4
  %265 = load i32, i32* @uart_state, align 4
  %266 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @xmit, i32 0, i32 0), align 4
  %267 = call i32 @OFFSET(i32 %264, i32 %265, i32 %266)
  ret void
}

declare dso_local i32 @OFFSET(i32, i32, i32) #1

declare dso_local i32 @BLANK(...) #1

declare dso_local i32 @DEFINE(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
