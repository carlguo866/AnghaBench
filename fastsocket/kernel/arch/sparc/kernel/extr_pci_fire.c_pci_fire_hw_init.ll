; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/arch/sparc/kernel/extr_pci_fire.c_pci_fire_hw_init.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/arch/sparc/kernel/extr_pci_fire.c_pci_fire_hw_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pci_pbm_info = type { i64, i64 }

@FIRE_PARITY_ENAB = common dso_local global i32 0, align 4
@FIRE_PARITY_CONTROL = common dso_local global i64 0, align 8
@FIRE_FATAL_RESET_SPARE = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_MB = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_CPE = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_APE = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_PIO = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_JW = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_JI = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_JR = common dso_local global i32 0, align 4
@FIRE_FATAL_RESET_CTL = common dso_local global i64 0, align 8
@FIRE_CORE_INTR_ENABLE = common dso_local global i64 0, align 8
@FIRE_TLU_CTRL = common dso_local global i64 0, align 8
@FIRE_TLU_CTRL_TIM = common dso_local global i32 0, align 4
@FIRE_TLU_CTRL_QDET = common dso_local global i32 0, align 4
@FIRE_TLU_CTRL_CFG = common dso_local global i32 0, align 4
@FIRE_TLU_DEV_CTRL = common dso_local global i64 0, align 8
@FIRE_TLU_LINK_CTRL_CLK = common dso_local global i32 0, align 4
@FIRE_TLU_LINK_CTRL = common dso_local global i64 0, align 8
@FIRE_LPU_RESET = common dso_local global i64 0, align 8
@FIRE_LPU_LLCFG_VC0 = common dso_local global i32 0, align 4
@FIRE_LPU_LLCFG = common dso_local global i64 0, align 8
@FIRE_LPU_FCTRL_UCTRL_N = common dso_local global i32 0, align 4
@FIRE_LPU_FCTRL_UCTRL_P = common dso_local global i32 0, align 4
@FIRE_LPU_FCTRL_UCTRL = common dso_local global i64 0, align 8
@FIRE_LPU_TXL_FIFOP = common dso_local global i64 0, align 8
@FIRE_LPU_LTSSM_CFG2 = common dso_local global i64 0, align 8
@FIRE_LPU_LTSSM_CFG3 = common dso_local global i64 0, align 8
@FIRE_LPU_LTSSM_CFG4 = common dso_local global i64 0, align 8
@FIRE_LPU_LTSSM_CFG5 = common dso_local global i64 0, align 8
@FIRE_DMC_IENAB = common dso_local global i64 0, align 8
@FIRE_DMC_DBG_SEL_A = common dso_local global i64 0, align 8
@FIRE_DMC_DBG_SEL_B = common dso_local global i64 0, align 8
@FIRE_PEC_IENAB = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.pci_pbm_info*)* @pci_fire_hw_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @pci_fire_hw_init(%struct.pci_pbm_info* %0) #0 {
  %2 = alloca %struct.pci_pbm_info*, align 8
  %3 = alloca i32, align 4
  store %struct.pci_pbm_info* %0, %struct.pci_pbm_info** %2, align 8
  %4 = load i32, i32* @FIRE_PARITY_ENAB, align 4
  %5 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %6 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* @FIRE_PARITY_CONTROL, align 8
  %9 = add nsw i64 %7, %8
  %10 = call i32 @upa_writeq(i32 %4, i64 %9)
  %11 = load i32, i32* @FIRE_FATAL_RESET_SPARE, align 4
  %12 = load i32, i32* @FIRE_FATAL_RESET_MB, align 4
  %13 = or i32 %11, %12
  %14 = load i32, i32* @FIRE_FATAL_RESET_CPE, align 4
  %15 = or i32 %13, %14
  %16 = load i32, i32* @FIRE_FATAL_RESET_APE, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @FIRE_FATAL_RESET_PIO, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @FIRE_FATAL_RESET_JW, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @FIRE_FATAL_RESET_JI, align 4
  %23 = or i32 %21, %22
  %24 = load i32, i32* @FIRE_FATAL_RESET_JR, align 4
  %25 = or i32 %23, %24
  %26 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %27 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = load i64, i64* @FIRE_FATAL_RESET_CTL, align 8
  %30 = add nsw i64 %28, %29
  %31 = call i32 @upa_writeq(i32 %25, i64 %30)
  %32 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %33 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %32, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = load i64, i64* @FIRE_CORE_INTR_ENABLE, align 8
  %36 = add nsw i64 %34, %35
  %37 = call i32 @upa_writeq(i32 -1, i64 %36)
  %38 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %39 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* @FIRE_TLU_CTRL, align 8
  %42 = add nsw i64 %40, %41
  %43 = call i32 @upa_readq(i64 %42)
  store i32 %43, i32* %3, align 4
  %44 = load i32, i32* @FIRE_TLU_CTRL_TIM, align 4
  %45 = load i32, i32* @FIRE_TLU_CTRL_QDET, align 4
  %46 = or i32 %44, %45
  %47 = load i32, i32* @FIRE_TLU_CTRL_CFG, align 4
  %48 = or i32 %46, %47
  %49 = load i32, i32* %3, align 4
  %50 = or i32 %49, %48
  store i32 %50, i32* %3, align 4
  %51 = load i32, i32* %3, align 4
  %52 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %53 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %52, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* @FIRE_TLU_CTRL, align 8
  %56 = add nsw i64 %54, %55
  %57 = call i32 @upa_writeq(i32 %51, i64 %56)
  %58 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %59 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load i64, i64* @FIRE_TLU_DEV_CTRL, align 8
  %62 = add nsw i64 %60, %61
  %63 = call i32 @upa_writeq(i32 0, i64 %62)
  %64 = load i32, i32* @FIRE_TLU_LINK_CTRL_CLK, align 4
  %65 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %66 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = load i64, i64* @FIRE_TLU_LINK_CTRL, align 8
  %69 = add nsw i64 %67, %68
  %70 = call i32 @upa_writeq(i32 %64, i64 %69)
  %71 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %72 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %71, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* @FIRE_LPU_RESET, align 8
  %75 = add nsw i64 %73, %74
  %76 = call i32 @upa_writeq(i32 0, i64 %75)
  %77 = load i32, i32* @FIRE_LPU_LLCFG_VC0, align 4
  %78 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %79 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %78, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = load i64, i64* @FIRE_LPU_LLCFG, align 8
  %82 = add nsw i64 %80, %81
  %83 = call i32 @upa_writeq(i32 %77, i64 %82)
  %84 = load i32, i32* @FIRE_LPU_FCTRL_UCTRL_N, align 4
  %85 = load i32, i32* @FIRE_LPU_FCTRL_UCTRL_P, align 4
  %86 = or i32 %84, %85
  %87 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %88 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %87, i32 0, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = load i64, i64* @FIRE_LPU_FCTRL_UCTRL, align 8
  %91 = add nsw i64 %89, %90
  %92 = call i32 @upa_writeq(i32 %86, i64 %91)
  %93 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %94 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load i64, i64* @FIRE_LPU_TXL_FIFOP, align 8
  %97 = add nsw i64 %95, %96
  %98 = call i32 @upa_writeq(i32 -65536, i64 %97)
  %99 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %100 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %99, i32 0, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* @FIRE_LPU_LTSSM_CFG2, align 8
  %103 = add nsw i64 %101, %102
  %104 = call i32 @upa_writeq(i32 3000000, i64 %103)
  %105 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %106 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %105, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = load i64, i64* @FIRE_LPU_LTSSM_CFG3, align 8
  %109 = add nsw i64 %107, %108
  %110 = call i32 @upa_writeq(i32 500000, i64 %109)
  %111 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %112 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %111, i32 0, i32 0
  %113 = load i64, i64* %112, align 8
  %114 = load i64, i64* @FIRE_LPU_LTSSM_CFG4, align 8
  %115 = add nsw i64 %113, %114
  %116 = call i32 @upa_writeq(i32 166912, i64 %115)
  %117 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %118 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = load i64, i64* @FIRE_LPU_LTSSM_CFG5, align 8
  %121 = add nsw i64 %119, %120
  %122 = call i32 @upa_writeq(i32 0, i64 %121)
  %123 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %124 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %123, i32 0, i32 0
  %125 = load i64, i64* %124, align 8
  %126 = load i64, i64* @FIRE_DMC_IENAB, align 8
  %127 = add nsw i64 %125, %126
  %128 = call i32 @upa_writeq(i32 -1, i64 %127)
  %129 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %130 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = load i64, i64* @FIRE_DMC_DBG_SEL_A, align 8
  %133 = add nsw i64 %131, %132
  %134 = call i32 @upa_writeq(i32 0, i64 %133)
  %135 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %136 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %135, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = load i64, i64* @FIRE_DMC_DBG_SEL_B, align 8
  %139 = add nsw i64 %137, %138
  %140 = call i32 @upa_writeq(i32 0, i64 %139)
  %141 = load %struct.pci_pbm_info*, %struct.pci_pbm_info** %2, align 8
  %142 = getelementptr inbounds %struct.pci_pbm_info, %struct.pci_pbm_info* %141, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = load i64, i64* @FIRE_PEC_IENAB, align 8
  %145 = add nsw i64 %143, %144
  %146 = call i32 @upa_writeq(i32 -1, i64 %145)
  ret void
}

declare dso_local i32 @upa_writeq(i32, i64) #1

declare dso_local i32 @upa_readq(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
