; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/scripts/extr_pnmtologo.c_write_header.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/scripts/extr_pnmtologo.c_write_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@outputname = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@out = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [27 x i8] c"Cannot create file %s: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@stdout = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"/*\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c" *  DO NOT EDIT THIS FILE!\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" *\0A\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c" *  It was automatically generated from %s\0A\00", align 1
@filename = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [19 x i8] c" *  Linux logo %s\0A\00", align 1
@logoname = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [6 x i8] c" */\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"#include <linux/linux_logo.h>\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"static unsigned char %s_data[] __initdata = {\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @write_header to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_header() #0 {
  %1 = load i64, i64* @outputname, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %14

3:                                                ; preds = %0
  %4 = load i64, i64* @outputname, align 8
  %5 = call i64 @fopen(i64 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i64 %5, i64* @out, align 8
  %6 = load i64, i64* @out, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = load i64, i64* @outputname, align 8
  %10 = load i32, i32* @errno, align 4
  %11 = call i32 @strerror(i32 %10)
  %12 = call i32 @die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i64 %9, i32 %11)
  br label %13

13:                                               ; preds = %8, %3
  br label %16

14:                                               ; preds = %0
  %15 = load i64, i64* @stdout, align 8
  store i64 %15, i64* @out, align 8
  br label %16

16:                                               ; preds = %14, %13
  %17 = load i64, i64* @out, align 8
  %18 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 %17)
  %19 = load i64, i64* @out, align 8
  %20 = call i32 @fputs(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i64 %19)
  %21 = load i64, i64* @out, align 8
  %22 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 %21)
  %23 = load i64, i64* @out, align 8
  %24 = load i8*, i8** @filename, align 8
  %25 = call i32 @fprintf(i64 %23, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %24)
  %26 = load i64, i64* @out, align 8
  %27 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 %26)
  %28 = load i64, i64* @out, align 8
  %29 = load i8*, i8** @logoname, align 8
  %30 = call i32 @fprintf(i64 %28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8* %29)
  %31 = load i64, i64* @out, align 8
  %32 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 %31)
  %33 = load i64, i64* @out, align 8
  %34 = call i32 @fputs(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i64 %33)
  %35 = load i64, i64* @out, align 8
  %36 = load i8*, i8** @logoname, align 8
  %37 = call i32 @fprintf(i64 %35, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i64 0, i64 0), i8* %36)
  ret void
}

declare dso_local i64 @fopen(i64, i8*) #1

declare dso_local i32 @die(i8*, i64, i32) #1

declare dso_local i32 @strerror(i32) #1

declare dso_local i32 @fputs(i8*, i64) #1

declare dso_local i32 @fprintf(i64, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
