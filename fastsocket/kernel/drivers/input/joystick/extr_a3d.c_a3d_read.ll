; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/input/joystick/extr_a3d.c_a3d_read.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/input/joystick/extr_a3d.c_a3d_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.a3d = type { i32, i8*, i8, %struct.input_dev* }
%struct.input_dev = type { i32 }

@REL_X = common dso_local global i32 0, align 4
@REL_Y = common dso_local global i32 0, align 4
@BTN_RIGHT = common dso_local global i32 0, align 4
@BTN_LEFT = common dso_local global i32 0, align 4
@BTN_MIDDLE = common dso_local global i32 0, align 4
@BTN_SIDE = common dso_local global i32 0, align 4
@BTN_EXTRA = common dso_local global i32 0, align 4
@ABS_X = common dso_local global i32 0, align 4
@ABS_Y = common dso_local global i32 0, align 4
@ABS_RUDDER = common dso_local global i32 0, align 4
@ABS_THROTTLE = common dso_local global i32 0, align 4
@ABS_HAT0X = common dso_local global i32 0, align 4
@ABS_HAT0Y = common dso_local global i32 0, align 4
@ABS_HAT1X = common dso_local global i32 0, align 4
@ABS_HAT1Y = common dso_local global i32 0, align 4
@BTN_TRIGGER = common dso_local global i32 0, align 4
@BTN_THUMB = common dso_local global i32 0, align 4
@BTN_TOP = common dso_local global i32 0, align 4
@BTN_PINKIE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.a3d*, i8*)* @a3d_read to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @a3d_read(%struct.a3d* %0, i8* %1) #0 {
  %3 = alloca %struct.a3d*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.input_dev*, align 8
  store %struct.a3d* %0, %struct.a3d** %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load %struct.a3d*, %struct.a3d** %3, align 8
  %7 = getelementptr inbounds %struct.a3d, %struct.a3d* %6, i32 0, i32 3
  %8 = load %struct.input_dev*, %struct.input_dev** %7, align 8
  store %struct.input_dev* %8, %struct.input_dev** %5, align 8
  %9 = load %struct.a3d*, %struct.a3d** %3, align 8
  %10 = getelementptr inbounds %struct.a3d, %struct.a3d* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %501 [
    i32 131, label %12
    i32 130, label %12
    i32 129, label %12
    i32 128, label %206
  ]

12:                                               ; preds = %2, %2, %2
  %13 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %14 = load i32, i32* @REL_X, align 4
  %15 = load i8*, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 5
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl i32 %18, 6
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 6
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl i32 %23, 3
  %25 = or i32 %19, %24
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 7
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = or i32 %25, %29
  %31 = load i8*, i8** %4, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 %34, 4
  %36 = shl i32 %35, 7
  %37 = sub nsw i32 %30, %36
  %38 = trunc i32 %37 to i8
  %39 = call i32 @input_report_rel(%struct.input_dev* %13, i32 %14, i8 zeroext %38)
  %40 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %41 = load i32, i32* @REL_Y, align 4
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 8
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 6
  %47 = load i8*, i8** %4, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl i32 %50, 3
  %52 = or i32 %46, %51
  %53 = load i8*, i8** %4, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 10
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %52, %56
  %58 = load i8*, i8** %4, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 8
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %61, 4
  %63 = shl i32 %62, 7
  %64 = sub nsw i32 %57, %63
  %65 = trunc i32 %64 to i8
  %66 = call i32 @input_report_rel(%struct.input_dev* %40, i32 %41, i8 zeroext %65)
  %67 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %68 = load i32, i32* @BTN_RIGHT, align 4
  %69 = load i8*, i8** %4, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = and i32 %72, 1
  %74 = trunc i32 %73 to i8
  %75 = call i32 @input_report_key(%struct.input_dev* %67, i32 %68, i8 zeroext %74)
  %76 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %77 = load i32, i32* @BTN_LEFT, align 4
  %78 = load i8*, i8** %4, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = and i32 %81, 2
  %83 = trunc i32 %82 to i8
  %84 = call i32 @input_report_key(%struct.input_dev* %76, i32 %77, i8 zeroext %83)
  %85 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %86 = load i32, i32* @BTN_MIDDLE, align 4
  %87 = load i8*, i8** %4, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = and i32 %90, 4
  %92 = trunc i32 %91 to i8
  %93 = call i32 @input_report_key(%struct.input_dev* %85, i32 %86, i8 zeroext %92)
  %94 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %95 = call i32 @input_sync(%struct.input_dev* %94)
  %96 = load i8*, i8** %4, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 11
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = shl i32 %99, 6
  %101 = load i8*, i8** %4, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 12
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = shl i32 %104, 3
  %106 = or i32 %100, %105
  %107 = load i8*, i8** %4, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 13
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = or i32 %106, %110
  %112 = trunc i32 %111 to i8
  %113 = sext i8 %112 to i32
  %114 = add nsw i32 %113, 128
  %115 = trunc i32 %114 to i8
  %116 = load %struct.a3d*, %struct.a3d** %3, align 8
  %117 = getelementptr inbounds %struct.a3d, %struct.a3d* %116, i32 0, i32 1
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 0
  store i8 %115, i8* %119, align 1
  %120 = load i8*, i8** %4, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 14
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = shl i32 %123, 6
  %125 = load i8*, i8** %4, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 15
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = shl i32 %128, 3
  %130 = or i32 %124, %129
  %131 = load i8*, i8** %4, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 16
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = or i32 %130, %134
  %136 = trunc i32 %135 to i8
  %137 = sext i8 %136 to i32
  %138 = add nsw i32 %137, 128
  %139 = trunc i32 %138 to i8
  %140 = load %struct.a3d*, %struct.a3d** %3, align 8
  %141 = getelementptr inbounds %struct.a3d, %struct.a3d* %140, i32 0, i32 1
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 1
  store i8 %139, i8* %143, align 1
  %144 = load i8*, i8** %4, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 17
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = shl i32 %147, 6
  %149 = load i8*, i8** %4, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 18
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %152, 3
  %154 = or i32 %148, %153
  %155 = load i8*, i8** %4, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 19
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = or i32 %154, %158
  %160 = trunc i32 %159 to i8
  %161 = sext i8 %160 to i32
  %162 = add nsw i32 %161, 128
  %163 = trunc i32 %162 to i8
  %164 = load %struct.a3d*, %struct.a3d** %3, align 8
  %165 = getelementptr inbounds %struct.a3d, %struct.a3d* %164, i32 0, i32 1
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 2
  store i8 %163, i8* %167, align 1
  %168 = load i8*, i8** %4, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 20
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl i32 %171, 6
  %173 = load i8*, i8** %4, align 8
  %174 = getelementptr inbounds i8, i8* %173, i64 21
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = shl i32 %176, 3
  %178 = or i32 %172, %177
  %179 = load i8*, i8** %4, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 22
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = or i32 %178, %182
  %184 = trunc i32 %183 to i8
  %185 = sext i8 %184 to i32
  %186 = add nsw i32 %185, 128
  %187 = trunc i32 %186 to i8
  %188 = load %struct.a3d*, %struct.a3d** %3, align 8
  %189 = getelementptr inbounds %struct.a3d, %struct.a3d* %188, i32 0, i32 1
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds i8, i8* %190, i64 3
  store i8 %187, i8* %191, align 1
  %192 = load i8*, i8** %4, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 3
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = shl i32 %195, 3
  %197 = load i8*, i8** %4, align 8
  %198 = getelementptr inbounds i8, i8* %197, i64 4
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = or i32 %196, %200
  %202 = and i32 %201, 15
  %203 = trunc i32 %202 to i8
  %204 = load %struct.a3d*, %struct.a3d** %3, align 8
  %205 = getelementptr inbounds %struct.a3d, %struct.a3d* %204, i32 0, i32 2
  store i8 %203, i8* %205, align 8
  br label %501

206:                                              ; preds = %2
  %207 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %208 = load i32, i32* @REL_X, align 4
  %209 = load i8*, i8** %4, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 9
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = shl i32 %212, 6
  %214 = load i8*, i8** %4, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 10
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = shl i32 %217, 3
  %219 = or i32 %213, %218
  %220 = load i8*, i8** %4, align 8
  %221 = getelementptr inbounds i8, i8* %220, i64 11
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = or i32 %219, %223
  %225 = load i8*, i8** %4, align 8
  %226 = getelementptr inbounds i8, i8* %225, i64 9
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = and i32 %228, 4
  %230 = shl i32 %229, 7
  %231 = sub nsw i32 %224, %230
  %232 = trunc i32 %231 to i8
  %233 = call i32 @input_report_rel(%struct.input_dev* %207, i32 %208, i8 zeroext %232)
  %234 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %235 = load i32, i32* @REL_Y, align 4
  %236 = load i8*, i8** %4, align 8
  %237 = getelementptr inbounds i8, i8* %236, i64 12
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = shl i32 %239, 6
  %241 = load i8*, i8** %4, align 8
  %242 = getelementptr inbounds i8, i8* %241, i64 13
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = shl i32 %244, 3
  %246 = or i32 %240, %245
  %247 = load i8*, i8** %4, align 8
  %248 = getelementptr inbounds i8, i8* %247, i64 14
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = or i32 %246, %250
  %252 = load i8*, i8** %4, align 8
  %253 = getelementptr inbounds i8, i8* %252, i64 12
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i32
  %256 = and i32 %255, 4
  %257 = shl i32 %256, 7
  %258 = sub nsw i32 %251, %257
  %259 = trunc i32 %258 to i8
  %260 = call i32 @input_report_rel(%struct.input_dev* %234, i32 %235, i8 zeroext %259)
  %261 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %262 = load i32, i32* @BTN_RIGHT, align 4
  %263 = load i8*, i8** %4, align 8
  %264 = getelementptr inbounds i8, i8* %263, i64 2
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = and i32 %266, 1
  %268 = trunc i32 %267 to i8
  %269 = call i32 @input_report_key(%struct.input_dev* %261, i32 %262, i8 zeroext %268)
  %270 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %271 = load i32, i32* @BTN_LEFT, align 4
  %272 = load i8*, i8** %4, align 8
  %273 = getelementptr inbounds i8, i8* %272, i64 3
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = and i32 %275, 2
  %277 = trunc i32 %276 to i8
  %278 = call i32 @input_report_key(%struct.input_dev* %270, i32 %271, i8 zeroext %277)
  %279 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %280 = load i32, i32* @BTN_MIDDLE, align 4
  %281 = load i8*, i8** %4, align 8
  %282 = getelementptr inbounds i8, i8* %281, i64 3
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = and i32 %284, 4
  %286 = trunc i32 %285 to i8
  %287 = call i32 @input_report_key(%struct.input_dev* %279, i32 %280, i8 zeroext %286)
  %288 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %289 = load i32, i32* @BTN_SIDE, align 4
  %290 = load i8*, i8** %4, align 8
  %291 = getelementptr inbounds i8, i8* %290, i64 7
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = and i32 %293, 2
  %295 = trunc i32 %294 to i8
  %296 = call i32 @input_report_key(%struct.input_dev* %288, i32 %289, i8 zeroext %295)
  %297 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %298 = load i32, i32* @BTN_EXTRA, align 4
  %299 = load i8*, i8** %4, align 8
  %300 = getelementptr inbounds i8, i8* %299, i64 7
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i32
  %303 = and i32 %302, 4
  %304 = trunc i32 %303 to i8
  %305 = call i32 @input_report_key(%struct.input_dev* %297, i32 %298, i8 zeroext %304)
  %306 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %307 = load i32, i32* @ABS_X, align 4
  %308 = load i8*, i8** %4, align 8
  %309 = getelementptr inbounds i8, i8* %308, i64 15
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = shl i32 %311, 6
  %313 = load i8*, i8** %4, align 8
  %314 = getelementptr inbounds i8, i8* %313, i64 16
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = shl i32 %316, 3
  %318 = or i32 %312, %317
  %319 = load i8*, i8** %4, align 8
  %320 = getelementptr inbounds i8, i8* %319, i64 17
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = or i32 %318, %322
  %324 = trunc i32 %323 to i8
  %325 = sext i8 %324 to i32
  %326 = add nsw i32 %325, 128
  %327 = trunc i32 %326 to i8
  %328 = call i32 @input_report_abs(%struct.input_dev* %306, i32 %307, i8 zeroext %327)
  %329 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %330 = load i32, i32* @ABS_Y, align 4
  %331 = load i8*, i8** %4, align 8
  %332 = getelementptr inbounds i8, i8* %331, i64 18
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = shl i32 %334, 6
  %336 = load i8*, i8** %4, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 19
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = shl i32 %339, 3
  %341 = or i32 %335, %340
  %342 = load i8*, i8** %4, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 20
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i32
  %346 = or i32 %341, %345
  %347 = trunc i32 %346 to i8
  %348 = sext i8 %347 to i32
  %349 = add nsw i32 %348, 128
  %350 = trunc i32 %349 to i8
  %351 = call i32 @input_report_abs(%struct.input_dev* %329, i32 %330, i8 zeroext %350)
  %352 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %353 = load i32, i32* @ABS_RUDDER, align 4
  %354 = load i8*, i8** %4, align 8
  %355 = getelementptr inbounds i8, i8* %354, i64 21
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  %358 = shl i32 %357, 6
  %359 = load i8*, i8** %4, align 8
  %360 = getelementptr inbounds i8, i8* %359, i64 22
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i32
  %363 = shl i32 %362, 3
  %364 = or i32 %358, %363
  %365 = load i8*, i8** %4, align 8
  %366 = getelementptr inbounds i8, i8* %365, i64 23
  %367 = load i8, i8* %366, align 1
  %368 = zext i8 %367 to i32
  %369 = or i32 %364, %368
  %370 = trunc i32 %369 to i8
  %371 = sext i8 %370 to i32
  %372 = add nsw i32 %371, 128
  %373 = trunc i32 %372 to i8
  %374 = call i32 @input_report_abs(%struct.input_dev* %352, i32 %353, i8 zeroext %373)
  %375 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %376 = load i32, i32* @ABS_THROTTLE, align 4
  %377 = load i8*, i8** %4, align 8
  %378 = getelementptr inbounds i8, i8* %377, i64 24
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i32
  %381 = shl i32 %380, 6
  %382 = load i8*, i8** %4, align 8
  %383 = getelementptr inbounds i8, i8* %382, i64 25
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = shl i32 %385, 3
  %387 = or i32 %381, %386
  %388 = load i8*, i8** %4, align 8
  %389 = getelementptr inbounds i8, i8* %388, i64 26
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = or i32 %387, %391
  %393 = trunc i32 %392 to i8
  %394 = sext i8 %393 to i32
  %395 = add nsw i32 %394, 128
  %396 = trunc i32 %395 to i8
  %397 = call i32 @input_report_abs(%struct.input_dev* %375, i32 %376, i8 zeroext %396)
  %398 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %399 = load i32, i32* @ABS_HAT0X, align 4
  %400 = load i8*, i8** %4, align 8
  %401 = getelementptr inbounds i8, i8* %400, i64 5
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i32
  %404 = and i32 %403, 1
  %405 = load i8*, i8** %4, align 8
  %406 = getelementptr inbounds i8, i8* %405, i64 5
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = ashr i32 %408, 2
  %410 = and i32 %409, 1
  %411 = sub nsw i32 %404, %410
  %412 = trunc i32 %411 to i8
  %413 = call i32 @input_report_abs(%struct.input_dev* %398, i32 %399, i8 zeroext %412)
  %414 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %415 = load i32, i32* @ABS_HAT0Y, align 4
  %416 = load i8*, i8** %4, align 8
  %417 = getelementptr inbounds i8, i8* %416, i64 5
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = ashr i32 %419, 1
  %421 = and i32 %420, 1
  %422 = load i8*, i8** %4, align 8
  %423 = getelementptr inbounds i8, i8* %422, i64 6
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = ashr i32 %425, 2
  %427 = and i32 %426, 1
  %428 = sub nsw i32 %421, %427
  %429 = trunc i32 %428 to i8
  %430 = call i32 @input_report_abs(%struct.input_dev* %414, i32 %415, i8 zeroext %429)
  %431 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %432 = load i32, i32* @ABS_HAT1X, align 4
  %433 = load i8*, i8** %4, align 8
  %434 = getelementptr inbounds i8, i8* %433, i64 4
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = ashr i32 %436, 1
  %438 = and i32 %437, 1
  %439 = load i8*, i8** %4, align 8
  %440 = getelementptr inbounds i8, i8* %439, i64 3
  %441 = load i8, i8* %440, align 1
  %442 = zext i8 %441 to i32
  %443 = and i32 %442, 1
  %444 = sub nsw i32 %438, %443
  %445 = trunc i32 %444 to i8
  %446 = call i32 @input_report_abs(%struct.input_dev* %431, i32 %432, i8 zeroext %445)
  %447 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %448 = load i32, i32* @ABS_HAT1Y, align 4
  %449 = load i8*, i8** %4, align 8
  %450 = getelementptr inbounds i8, i8* %449, i64 4
  %451 = load i8, i8* %450, align 1
  %452 = zext i8 %451 to i32
  %453 = ashr i32 %452, 2
  %454 = and i32 %453, 1
  %455 = load i8*, i8** %4, align 8
  %456 = getelementptr inbounds i8, i8* %455, i64 4
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i32
  %459 = and i32 %458, 1
  %460 = sub nsw i32 %454, %459
  %461 = trunc i32 %460 to i8
  %462 = call i32 @input_report_abs(%struct.input_dev* %447, i32 %448, i8 zeroext %461)
  %463 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %464 = load i32, i32* @BTN_TRIGGER, align 4
  %465 = load i8*, i8** %4, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 8
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i32
  %469 = and i32 %468, 1
  %470 = trunc i32 %469 to i8
  %471 = call i32 @input_report_key(%struct.input_dev* %463, i32 %464, i8 zeroext %470)
  %472 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %473 = load i32, i32* @BTN_THUMB, align 4
  %474 = load i8*, i8** %4, align 8
  %475 = getelementptr inbounds i8, i8* %474, i64 8
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = and i32 %477, 2
  %479 = trunc i32 %478 to i8
  %480 = call i32 @input_report_key(%struct.input_dev* %472, i32 %473, i8 zeroext %479)
  %481 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %482 = load i32, i32* @BTN_TOP, align 4
  %483 = load i8*, i8** %4, align 8
  %484 = getelementptr inbounds i8, i8* %483, i64 8
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i32
  %487 = and i32 %486, 4
  %488 = trunc i32 %487 to i8
  %489 = call i32 @input_report_key(%struct.input_dev* %481, i32 %482, i8 zeroext %488)
  %490 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %491 = load i32, i32* @BTN_PINKIE, align 4
  %492 = load i8*, i8** %4, align 8
  %493 = getelementptr inbounds i8, i8* %492, i64 7
  %494 = load i8, i8* %493, align 1
  %495 = zext i8 %494 to i32
  %496 = and i32 %495, 1
  %497 = trunc i32 %496 to i8
  %498 = call i32 @input_report_key(%struct.input_dev* %490, i32 %491, i8 zeroext %497)
  %499 = load %struct.input_dev*, %struct.input_dev** %5, align 8
  %500 = call i32 @input_sync(%struct.input_dev* %499)
  br label %501

501:                                              ; preds = %2, %206, %12
  ret void
}

declare dso_local i32 @input_report_rel(%struct.input_dev*, i32, i8 zeroext) #1

declare dso_local i32 @input_report_key(%struct.input_dev*, i32, i8 zeroext) #1

declare dso_local i32 @input_sync(%struct.input_dev*) #1

declare dso_local i32 @input_report_abs(%struct.input_dev*, i32, i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
