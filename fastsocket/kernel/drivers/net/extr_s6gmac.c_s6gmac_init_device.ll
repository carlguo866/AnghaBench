; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_s6gmac.c_s6gmac_init_device.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_s6gmac.c_s6gmac_init_device.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.net_device = type { i32, i32, i32* }
%struct.s6gmac = type { i64, %struct.TYPE_4__, %struct.TYPE_3__* }
%struct.TYPE_4__ = type { i32, i64 }
%struct.TYPE_3__ = type { i32 }

@SUPPORTED_1000baseT_Full = common dso_local global i32 0, align 4
@SUPPORTED_1000baseT_Half = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_SOFTRES = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1 = common dso_local global i64 0, align 8
@S6_GMAC_MACCONF1_TXENA = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RXENA = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_TXSRES = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_RXSRES = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL = common dso_local global i64 0, align 8
@S6_GMAC_HOST_PBLKCTRL_SIZ_128 = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_TXBSIZ = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_RXBSIZ = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_STATENA = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_STATCLEAR = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_RGMII = common dso_local global i32 0, align 4
@IFF_LOOPBACK = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_LOOPBACK = common dso_local global i32 0, align 4
@S6_MAX_FRLEN = common dso_local global i32 0, align 4
@ETH_HLEN = common dso_local global i32 0, align 4
@ETH_FCS_LEN = common dso_local global i32 0, align 4
@S6_GMAC_MACMAXFRAMELEN = common dso_local global i64 0, align 8
@S6_GMAC_MACCONF2_FULL = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_PADCRCENA = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_LENGTHFCHK = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_IFMODE_BYTE = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_IFMODE_NIBBLE = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_IFMODE = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2_PREAMBLELEN = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF2 = common dso_local global i64 0, align 8
@S6_GMAC_MACSTATADDR1 = common dso_local global i64 0, align 8
@S6_GMAC_MACSTATADDR2 = common dso_local global i64 0, align 8
@S6_GMAC_FIFOCONF0_WTMENREQ = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF0_SRFENREQ = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF0_FRFENREQ = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF0_STFENREQ = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF0_FTFENREQ = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF0 = common dso_local global i64 0, align 8
@S6_GMAC_FIFOCONF3_CFGFTTH = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF3_CFGHWMFT = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF3 = common dso_local global i64 0, align 8
@S6_GMAC_FIFOCONF_RSV_MASK = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_RUNT = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_CRCERR = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_OK = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_DRIBBLE = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_CTRLFRAME = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_PAUSECTRL = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_UNOPCODE = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF_RSV_TRUNCATED = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF5_DROPLT64 = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF5_CFGBYTM = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF5_RXDROPSIZE = common dso_local global i32 0, align 4
@S6_GMAC_FIFOCONF5 = common dso_local global i64 0, align 8
@S6_GMAC_FIFOCONF4 = common dso_local global i64 0, align 8
@S6_GMAC_HOST_PBLKCTRL_TXENA = common dso_local global i32 0, align 4
@S6_GMAC_HOST_PBLKCTRL_RXENA = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RESRXFUNC = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RESRXMACCTRL = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RESTXFUNC = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RESTXMACCTRL = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_RXFLOWCTRL = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_SYNCRX = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_SYNCTX = common dso_local global i32 0, align 4
@S6_GMAC_MACCONF1_TXFLOWCTRL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.net_device*)* @s6gmac_init_device to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @s6gmac_init_device(%struct.net_device* %0) #0 {
  %2 = alloca %struct.net_device*, align 8
  %3 = alloca %struct.s6gmac*, align 8
  %4 = alloca i32, align 4
  store %struct.net_device* %0, %struct.net_device** %2, align 8
  %5 = load %struct.net_device*, %struct.net_device** %2, align 8
  %6 = call %struct.s6gmac* @netdev_priv(%struct.net_device* %5)
  store %struct.s6gmac* %6, %struct.s6gmac** %3, align 8
  %7 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %8 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %7, i32 0, i32 2
  %9 = load %struct.TYPE_3__*, %struct.TYPE_3__** %8, align 8
  %10 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* @SUPPORTED_1000baseT_Full, align 4
  %13 = load i32, i32* @SUPPORTED_1000baseT_Half, align 4
  %14 = or i32 %12, %13
  %15 = and i32 %11, %14
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  store i32 %19, i32* %4, align 4
  %20 = load i32, i32* @S6_GMAC_MACCONF1_SOFTRES, align 4
  %21 = shl i32 1, %20
  %22 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %23 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = load i64, i64* @S6_GMAC_MACCONF1, align 8
  %26 = add nsw i64 %24, %25
  %27 = call i32 @writel(i32 %21, i64 %26)
  %28 = call i32 @udelay(i32 1000)
  %29 = load i32, i32* @S6_GMAC_MACCONF1_TXENA, align 4
  %30 = shl i32 1, %29
  %31 = load i32, i32* @S6_GMAC_MACCONF1_RXENA, align 4
  %32 = shl i32 1, %31
  %33 = or i32 %30, %32
  %34 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %35 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = load i64, i64* @S6_GMAC_MACCONF1, align 8
  %38 = add nsw i64 %36, %37
  %39 = call i32 @writel(i32 %33, i64 %38)
  %40 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_TXSRES, align 4
  %41 = shl i32 1, %40
  %42 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RXSRES, align 4
  %43 = shl i32 1, %42
  %44 = or i32 %41, %43
  %45 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %46 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* @S6_GMAC_HOST_PBLKCTRL, align 8
  %49 = add nsw i64 %47, %48
  %50 = call i32 @writel(i32 %44, i64 %49)
  %51 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_SIZ_128, align 4
  %52 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_TXBSIZ, align 4
  %53 = shl i32 %51, %52
  %54 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_SIZ_128, align 4
  %55 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RXBSIZ, align 4
  %56 = shl i32 %54, %55
  %57 = or i32 %53, %56
  %58 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_STATENA, align 4
  %59 = shl i32 1, %58
  %60 = or i32 %57, %59
  %61 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_STATCLEAR, align 4
  %62 = shl i32 1, %61
  %63 = or i32 %60, %62
  %64 = load i32, i32* %4, align 4
  %65 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RGMII, align 4
  %66 = shl i32 %64, %65
  %67 = or i32 %63, %66
  %68 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %69 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = load i64, i64* @S6_GMAC_HOST_PBLKCTRL, align 8
  %72 = add nsw i64 %70, %71
  %73 = call i32 @writel(i32 %67, i64 %72)
  %74 = load i32, i32* @S6_GMAC_MACCONF1_TXENA, align 4
  %75 = shl i32 1, %74
  %76 = load i32, i32* @S6_GMAC_MACCONF1_RXENA, align 4
  %77 = shl i32 1, %76
  %78 = or i32 %75, %77
  %79 = load %struct.net_device*, %struct.net_device** %2, align 8
  %80 = getelementptr inbounds %struct.net_device, %struct.net_device* %79, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = load i32, i32* @IFF_LOOPBACK, align 4
  %83 = and i32 %81, %82
  %84 = icmp ne i32 %83, 0
  %85 = zext i1 %84 to i64
  %86 = select i1 %84, i32 1, i32 0
  %87 = load i32, i32* @S6_GMAC_MACCONF1_LOOPBACK, align 4
  %88 = shl i32 %86, %87
  %89 = or i32 %78, %88
  %90 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %91 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = load i64, i64* @S6_GMAC_MACCONF1, align 8
  %94 = add nsw i64 %92, %93
  %95 = call i32 @writel(i32 %89, i64 %94)
  %96 = load %struct.net_device*, %struct.net_device** %2, align 8
  %97 = getelementptr inbounds %struct.net_device, %struct.net_device* %96, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %118

100:                                              ; preds = %1
  %101 = load %struct.net_device*, %struct.net_device** %2, align 8
  %102 = getelementptr inbounds %struct.net_device, %struct.net_device* %101, i32 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = load i32, i32* @S6_MAX_FRLEN, align 4
  %105 = load i32, i32* @ETH_HLEN, align 4
  %106 = sub nsw i32 %104, %105
  %107 = load i32, i32* @ETH_FCS_LEN, align 4
  %108 = sub nsw i32 %106, %107
  %109 = icmp slt i32 %103, %108
  br i1 %109, label %110, label %118

110:                                              ; preds = %100
  %111 = load %struct.net_device*, %struct.net_device** %2, align 8
  %112 = getelementptr inbounds %struct.net_device, %struct.net_device* %111, i32 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = load i32, i32* @ETH_HLEN, align 4
  %115 = add nsw i32 %113, %114
  %116 = load i32, i32* @ETH_FCS_LEN, align 4
  %117 = add nsw i32 %115, %116
  br label %120

118:                                              ; preds = %100, %1
  %119 = load i32, i32* @S6_MAX_FRLEN, align 4
  br label %120

120:                                              ; preds = %118, %110
  %121 = phi i32 [ %117, %110 ], [ %119, %118 ]
  %122 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %123 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %122, i32 0, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = load i64, i64* @S6_GMAC_MACMAXFRAMELEN, align 8
  %126 = add nsw i64 %124, %125
  %127 = call i32 @writel(i32 %121, i64 %126)
  %128 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %129 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %128, i32 0, i32 1
  %130 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %129, i32 0, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = icmp ne i64 %131, 0
  %133 = zext i1 %132 to i64
  %134 = select i1 %132, i32 1, i32 0
  %135 = load i32, i32* @S6_GMAC_MACCONF2_FULL, align 4
  %136 = shl i32 %134, %135
  %137 = load i32, i32* @S6_GMAC_MACCONF2_PADCRCENA, align 4
  %138 = shl i32 1, %137
  %139 = or i32 %136, %138
  %140 = load i32, i32* @S6_GMAC_MACCONF2_LENGTHFCHK, align 4
  %141 = shl i32 1, %140
  %142 = or i32 %139, %141
  %143 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %144 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %143, i32 0, i32 1
  %145 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %144, i32 0, i32 0
  %146 = load i32, i32* %145, align 8
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %150

148:                                              ; preds = %120
  %149 = load i32, i32* @S6_GMAC_MACCONF2_IFMODE_BYTE, align 4
  br label %152

150:                                              ; preds = %120
  %151 = load i32, i32* @S6_GMAC_MACCONF2_IFMODE_NIBBLE, align 4
  br label %152

152:                                              ; preds = %150, %148
  %153 = phi i32 [ %149, %148 ], [ %151, %150 ]
  %154 = load i32, i32* @S6_GMAC_MACCONF2_IFMODE, align 4
  %155 = shl i32 %153, %154
  %156 = or i32 %142, %155
  %157 = load i32, i32* @S6_GMAC_MACCONF2_PREAMBLELEN, align 4
  %158 = shl i32 7, %157
  %159 = or i32 %156, %158
  %160 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %161 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %160, i32 0, i32 0
  %162 = load i64, i64* %161, align 8
  %163 = load i64, i64* @S6_GMAC_MACCONF2, align 8
  %164 = add nsw i64 %162, %163
  %165 = call i32 @writel(i32 %159, i64 %164)
  %166 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %167 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %166, i32 0, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = load i64, i64* @S6_GMAC_MACSTATADDR1, align 8
  %170 = add nsw i64 %168, %169
  %171 = call i32 @writel(i32 0, i64 %170)
  %172 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %173 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %172, i32 0, i32 0
  %174 = load i64, i64* %173, align 8
  %175 = load i64, i64* @S6_GMAC_MACSTATADDR2, align 8
  %176 = add nsw i64 %174, %175
  %177 = call i32 @writel(i32 0, i64 %176)
  %178 = load i32, i32* @S6_GMAC_FIFOCONF0_WTMENREQ, align 4
  %179 = shl i32 1, %178
  %180 = load i32, i32* @S6_GMAC_FIFOCONF0_SRFENREQ, align 4
  %181 = shl i32 1, %180
  %182 = or i32 %179, %181
  %183 = load i32, i32* @S6_GMAC_FIFOCONF0_FRFENREQ, align 4
  %184 = shl i32 1, %183
  %185 = or i32 %182, %184
  %186 = load i32, i32* @S6_GMAC_FIFOCONF0_STFENREQ, align 4
  %187 = shl i32 1, %186
  %188 = or i32 %185, %187
  %189 = load i32, i32* @S6_GMAC_FIFOCONF0_FTFENREQ, align 4
  %190 = shl i32 1, %189
  %191 = or i32 %188, %190
  %192 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %193 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %192, i32 0, i32 0
  %194 = load i64, i64* %193, align 8
  %195 = load i64, i64* @S6_GMAC_FIFOCONF0, align 8
  %196 = add nsw i64 %194, %195
  %197 = call i32 @writel(i32 %191, i64 %196)
  %198 = load i32, i32* @S6_GMAC_FIFOCONF3_CFGFTTH, align 4
  %199 = shl i32 128, %198
  %200 = load i32, i32* @S6_GMAC_FIFOCONF3_CFGHWMFT, align 4
  %201 = shl i32 128, %200
  %202 = or i32 %199, %201
  %203 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %204 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %203, i32 0, i32 0
  %205 = load i64, i64* %204, align 8
  %206 = load i64, i64* @S6_GMAC_FIFOCONF3, align 8
  %207 = add nsw i64 %205, %206
  %208 = call i32 @writel(i32 %202, i64 %207)
  %209 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_MASK, align 4
  %210 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_RUNT, align 4
  %211 = shl i32 1, %210
  %212 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_CRCERR, align 4
  %213 = shl i32 1, %212
  %214 = or i32 %211, %213
  %215 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_OK, align 4
  %216 = shl i32 1, %215
  %217 = or i32 %214, %216
  %218 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_DRIBBLE, align 4
  %219 = shl i32 1, %218
  %220 = or i32 %217, %219
  %221 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_CTRLFRAME, align 4
  %222 = shl i32 1, %221
  %223 = or i32 %220, %222
  %224 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_PAUSECTRL, align 4
  %225 = shl i32 1, %224
  %226 = or i32 %223, %225
  %227 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_UNOPCODE, align 4
  %228 = shl i32 1, %227
  %229 = or i32 %226, %228
  %230 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_TRUNCATED, align 4
  %231 = shl i32 1, %230
  %232 = or i32 %229, %231
  %233 = xor i32 %232, -1
  %234 = and i32 %209, %233
  %235 = load i32, i32* @S6_GMAC_FIFOCONF5_DROPLT64, align 4
  %236 = shl i32 1, %235
  %237 = or i32 %234, %236
  %238 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %239 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %238, i32 0, i32 1
  %240 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %239, i32 0, i32 0
  %241 = load i32, i32* %240, align 8
  %242 = load i32, i32* @S6_GMAC_FIFOCONF5_CFGBYTM, align 4
  %243 = shl i32 %241, %242
  %244 = or i32 %237, %243
  %245 = load i32, i32* @S6_GMAC_FIFOCONF5_RXDROPSIZE, align 4
  %246 = shl i32 1, %245
  %247 = or i32 %244, %246
  %248 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %249 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %248, i32 0, i32 0
  %250 = load i64, i64* %249, align 8
  %251 = load i64, i64* @S6_GMAC_FIFOCONF5, align 8
  %252 = add nsw i64 %250, %251
  %253 = call i32 @writel(i32 %247, i64 %252)
  %254 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_RUNT, align 4
  %255 = shl i32 1, %254
  %256 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_CRCERR, align 4
  %257 = shl i32 1, %256
  %258 = or i32 %255, %257
  %259 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_DRIBBLE, align 4
  %260 = shl i32 1, %259
  %261 = or i32 %258, %260
  %262 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_CTRLFRAME, align 4
  %263 = shl i32 1, %262
  %264 = or i32 %261, %263
  %265 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_PAUSECTRL, align 4
  %266 = shl i32 1, %265
  %267 = or i32 %264, %266
  %268 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_UNOPCODE, align 4
  %269 = shl i32 1, %268
  %270 = or i32 %267, %269
  %271 = load i32, i32* @S6_GMAC_FIFOCONF_RSV_TRUNCATED, align 4
  %272 = shl i32 1, %271
  %273 = or i32 %270, %272
  %274 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %275 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %274, i32 0, i32 0
  %276 = load i64, i64* %275, align 8
  %277 = load i64, i64* @S6_GMAC_FIFOCONF4, align 8
  %278 = add nsw i64 %276, %277
  %279 = call i32 @writel(i32 %273, i64 %278)
  %280 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %281 = call i32 @s6gmac_set_dstaddr(%struct.s6gmac* %280, i32 0, i32 -1, i32 65535, i32 -1, i32 65535)
  %282 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %283 = load %struct.net_device*, %struct.net_device** %2, align 8
  %284 = getelementptr inbounds %struct.net_device, %struct.net_device* %283, i32 0, i32 2
  %285 = load i32*, i32** %284, align 8
  %286 = getelementptr inbounds i32, i32* %285, i64 5
  %287 = load i32, i32* %286, align 4
  %288 = load %struct.net_device*, %struct.net_device** %2, align 8
  %289 = getelementptr inbounds %struct.net_device, %struct.net_device* %288, i32 0, i32 2
  %290 = load i32*, i32** %289, align 8
  %291 = getelementptr inbounds i32, i32* %290, i64 4
  %292 = load i32, i32* %291, align 4
  %293 = shl i32 %292, 8
  %294 = or i32 %287, %293
  %295 = load %struct.net_device*, %struct.net_device** %2, align 8
  %296 = getelementptr inbounds %struct.net_device, %struct.net_device* %295, i32 0, i32 2
  %297 = load i32*, i32** %296, align 8
  %298 = getelementptr inbounds i32, i32* %297, i64 3
  %299 = load i32, i32* %298, align 4
  %300 = shl i32 %299, 16
  %301 = or i32 %294, %300
  %302 = load %struct.net_device*, %struct.net_device** %2, align 8
  %303 = getelementptr inbounds %struct.net_device, %struct.net_device* %302, i32 0, i32 2
  %304 = load i32*, i32** %303, align 8
  %305 = getelementptr inbounds i32, i32* %304, i64 2
  %306 = load i32, i32* %305, align 4
  %307 = shl i32 %306, 24
  %308 = or i32 %301, %307
  %309 = load %struct.net_device*, %struct.net_device** %2, align 8
  %310 = getelementptr inbounds %struct.net_device, %struct.net_device* %309, i32 0, i32 2
  %311 = load i32*, i32** %310, align 8
  %312 = getelementptr inbounds i32, i32* %311, i64 1
  %313 = load i32, i32* %312, align 4
  %314 = load %struct.net_device*, %struct.net_device** %2, align 8
  %315 = getelementptr inbounds %struct.net_device, %struct.net_device* %314, i32 0, i32 2
  %316 = load i32*, i32** %315, align 8
  %317 = getelementptr inbounds i32, i32* %316, i64 0
  %318 = load i32, i32* %317, align 4
  %319 = shl i32 %318, 8
  %320 = or i32 %313, %319
  %321 = call i32 @s6gmac_set_dstaddr(%struct.s6gmac* %282, i32 1, i32 %308, i32 %320, i32 -1, i32 65535)
  %322 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %323 = call i32 @s6gmac_set_dstaddr(%struct.s6gmac* %322, i32 2, i32 0, i32 256, i32 0, i32 256)
  %324 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %325 = call i32 @s6gmac_set_dstaddr(%struct.s6gmac* %324, i32 3, i32 0, i32 0, i32 0, i32 0)
  %326 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_TXENA, align 4
  %327 = shl i32 1, %326
  %328 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RXENA, align 4
  %329 = shl i32 1, %328
  %330 = or i32 %327, %329
  %331 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_SIZ_128, align 4
  %332 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_TXBSIZ, align 4
  %333 = shl i32 %331, %332
  %334 = or i32 %330, %333
  %335 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_SIZ_128, align 4
  %336 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RXBSIZ, align 4
  %337 = shl i32 %335, %336
  %338 = or i32 %334, %337
  %339 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_STATENA, align 4
  %340 = shl i32 1, %339
  %341 = or i32 %338, %340
  %342 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_STATCLEAR, align 4
  %343 = shl i32 1, %342
  %344 = or i32 %341, %343
  %345 = load i32, i32* %4, align 4
  %346 = load i32, i32* @S6_GMAC_HOST_PBLKCTRL_RGMII, align 4
  %347 = shl i32 %345, %346
  %348 = or i32 %344, %347
  %349 = load %struct.s6gmac*, %struct.s6gmac** %3, align 8
  %350 = getelementptr inbounds %struct.s6gmac, %struct.s6gmac* %349, i32 0, i32 0
  %351 = load i64, i64* %350, align 8
  %352 = load i64, i64* @S6_GMAC_HOST_PBLKCTRL, align 8
  %353 = add nsw i64 %351, %352
  %354 = call i32 @writel(i32 %348, i64 %353)
  ret void
}

declare dso_local %struct.s6gmac* @netdev_priv(%struct.net_device*) #1

declare dso_local i32 @writel(i32, i64) #1

declare dso_local i32 @udelay(i32) #1

declare dso_local i32 @s6gmac_set_dstaddr(%struct.s6gmac*, i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
