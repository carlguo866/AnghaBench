; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/net/wireless/iwlwifi/dvm/extr_lib.c_iwlagn_print_uartmsg.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/net/wireless/iwlwifi/dvm/extr_lib.c_iwlagn_print_uartmsg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iwl_priv = type { i32 }
%struct.iwl_bt_uart_msg = type { i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [52 x i8] c"Message Type = 0x%X, SSN = 0x%X, Update Req = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME1MSGTYPE_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME1MSGTYPE_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME1SSN_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME1SSN_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME1UPDATEREQ_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME1UPDATEREQ_POS = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [79 x i8] c"Open connections = 0x%X, Traffic load = 0x%X, Chl_SeqN = 0x%X, In band = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME2OPENCONNECTIONS_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2OPENCONNECTIONS_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2TRAFFICLOAD_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2TRAFFICLOAD_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2CHLSEQN_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2CHLSEQN_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2INBAND_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME2INBAND_POS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [84 x i8] c"SCO/eSCO = 0x%X, Sniff = 0x%X, A2DP = 0x%X, ACL = 0x%X, Master = 0x%X, OBEX = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME3SCOESCO_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3SCOESCO_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3SNIFF_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3SNIFF_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3A2DP_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3A2DP_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3ACL_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3ACL_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3MASTER_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3MASTER_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3OBEX_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME3OBEX_POS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"Idle duration = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME4IDLEDURATION_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME4IDLEDURATION_POS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [69 x i8] c"Tx Activity = 0x%X, Rx Activity = 0x%X, eSCO Retransmissions = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME5TXACTIVITY_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME5TXACTIVITY_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME5RXACTIVITY_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME5RXACTIVITY_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME5ESCORETRANSMIT_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME5ESCORETRANSMIT_POS = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [44 x i8] c"Sniff Interval = 0x%X, Discoverable = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME6SNIFFINTERVAL_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME6SNIFFINTERVAL_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME6DISCOVERABLE_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME6DISCOVERABLE_POS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [72 x i8] c"Sniff Activity = 0x%X, Page = 0x%X, Inquiry = 0x%X, Connectable = 0x%X\0A\00", align 1
@BT_UART_MSG_FRAME7SNIFFACTIVITY_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7SNIFFACTIVITY_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7PAGE_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7PAGE_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7INQUIRY_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7INQUIRY_POS = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7CONNECTABLE_MSK = common dso_local global i32 0, align 4
@BT_UART_MSG_FRAME7CONNECTABLE_POS = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.iwl_priv*, %struct.iwl_bt_uart_msg*)* @iwlagn_print_uartmsg to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @iwlagn_print_uartmsg(%struct.iwl_priv* %0, %struct.iwl_bt_uart_msg* %1) #0 {
  %3 = alloca %struct.iwl_priv*, align 8
  %4 = alloca %struct.iwl_bt_uart_msg*, align 8
  store %struct.iwl_priv* %0, %struct.iwl_priv** %3, align 8
  store %struct.iwl_bt_uart_msg* %1, %struct.iwl_bt_uart_msg** %4, align 8
  %5 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %6 = load i32, i32* @BT_UART_MSG_FRAME1MSGTYPE_MSK, align 4
  %7 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %8 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %6, %9
  %11 = load i32, i32* @BT_UART_MSG_FRAME1MSGTYPE_POS, align 4
  %12 = ashr i32 %10, %11
  %13 = load i32, i32* @BT_UART_MSG_FRAME1SSN_MSK, align 4
  %14 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %15 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %13, %16
  %18 = load i32, i32* @BT_UART_MSG_FRAME1SSN_POS, align 4
  %19 = ashr i32 %17, %18
  %20 = load i32, i32* @BT_UART_MSG_FRAME1UPDATEREQ_MSK, align 4
  %21 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %22 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %20, %23
  %25 = load i32, i32* @BT_UART_MSG_FRAME1UPDATEREQ_POS, align 4
  %26 = ashr i32 %24, %25
  %27 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 %12, i32 %19, i32 %26)
  %28 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %29 = load i32, i32* @BT_UART_MSG_FRAME2OPENCONNECTIONS_MSK, align 4
  %30 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %31 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %29, %32
  %34 = load i32, i32* @BT_UART_MSG_FRAME2OPENCONNECTIONS_POS, align 4
  %35 = ashr i32 %33, %34
  %36 = load i32, i32* @BT_UART_MSG_FRAME2TRAFFICLOAD_MSK, align 4
  %37 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %38 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %36, %39
  %41 = load i32, i32* @BT_UART_MSG_FRAME2TRAFFICLOAD_POS, align 4
  %42 = ashr i32 %40, %41
  %43 = load i32, i32* @BT_UART_MSG_FRAME2CHLSEQN_MSK, align 4
  %44 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %45 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %43, %46
  %48 = load i32, i32* @BT_UART_MSG_FRAME2CHLSEQN_POS, align 4
  %49 = ashr i32 %47, %48
  %50 = load i32, i32* @BT_UART_MSG_FRAME2INBAND_MSK, align 4
  %51 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %52 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %50, %53
  %55 = load i32, i32* @BT_UART_MSG_FRAME2INBAND_POS, align 4
  %56 = ashr i32 %54, %55
  %57 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %28, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.1, i64 0, i64 0), i32 %35, i32 %42, i32 %49, i32 %56)
  %58 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %59 = load i32, i32* @BT_UART_MSG_FRAME3SCOESCO_MSK, align 4
  %60 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %61 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %60, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %59, %62
  %64 = load i32, i32* @BT_UART_MSG_FRAME3SCOESCO_POS, align 4
  %65 = ashr i32 %63, %64
  %66 = load i32, i32* @BT_UART_MSG_FRAME3SNIFF_MSK, align 4
  %67 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %68 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %67, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %66, %69
  %71 = load i32, i32* @BT_UART_MSG_FRAME3SNIFF_POS, align 4
  %72 = ashr i32 %70, %71
  %73 = load i32, i32* @BT_UART_MSG_FRAME3A2DP_MSK, align 4
  %74 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %75 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %74, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %73, %76
  %78 = load i32, i32* @BT_UART_MSG_FRAME3A2DP_POS, align 4
  %79 = ashr i32 %77, %78
  %80 = load i32, i32* @BT_UART_MSG_FRAME3ACL_MSK, align 4
  %81 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %82 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %81, i32 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %80, %83
  %85 = load i32, i32* @BT_UART_MSG_FRAME3ACL_POS, align 4
  %86 = ashr i32 %84, %85
  %87 = load i32, i32* @BT_UART_MSG_FRAME3MASTER_MSK, align 4
  %88 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %89 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %88, i32 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = and i32 %87, %90
  %92 = load i32, i32* @BT_UART_MSG_FRAME3MASTER_POS, align 4
  %93 = ashr i32 %91, %92
  %94 = load i32, i32* @BT_UART_MSG_FRAME3OBEX_MSK, align 4
  %95 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %96 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %95, i32 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %94, %97
  %99 = load i32, i32* @BT_UART_MSG_FRAME3OBEX_POS, align 4
  %100 = ashr i32 %98, %99
  %101 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %58, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.2, i64 0, i64 0), i32 %65, i32 %72, i32 %79, i32 %86, i32 %93, i32 %100)
  %102 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %103 = load i32, i32* @BT_UART_MSG_FRAME4IDLEDURATION_MSK, align 4
  %104 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %105 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %104, i32 0, i32 3
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %103, %106
  %108 = load i32, i32* @BT_UART_MSG_FRAME4IDLEDURATION_POS, align 4
  %109 = ashr i32 %107, %108
  %110 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %102, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %109)
  %111 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %112 = load i32, i32* @BT_UART_MSG_FRAME5TXACTIVITY_MSK, align 4
  %113 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %114 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %113, i32 0, i32 4
  %115 = load i32, i32* %114, align 4
  %116 = and i32 %112, %115
  %117 = load i32, i32* @BT_UART_MSG_FRAME5TXACTIVITY_POS, align 4
  %118 = ashr i32 %116, %117
  %119 = load i32, i32* @BT_UART_MSG_FRAME5RXACTIVITY_MSK, align 4
  %120 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %121 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %120, i32 0, i32 4
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %119, %122
  %124 = load i32, i32* @BT_UART_MSG_FRAME5RXACTIVITY_POS, align 4
  %125 = ashr i32 %123, %124
  %126 = load i32, i32* @BT_UART_MSG_FRAME5ESCORETRANSMIT_MSK, align 4
  %127 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %128 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %127, i32 0, i32 4
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %126, %129
  %131 = load i32, i32* @BT_UART_MSG_FRAME5ESCORETRANSMIT_POS, align 4
  %132 = ashr i32 %130, %131
  %133 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %111, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.4, i64 0, i64 0), i32 %118, i32 %125, i32 %132)
  %134 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %135 = load i32, i32* @BT_UART_MSG_FRAME6SNIFFINTERVAL_MSK, align 4
  %136 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %137 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %136, i32 0, i32 5
  %138 = load i32, i32* %137, align 4
  %139 = and i32 %135, %138
  %140 = load i32, i32* @BT_UART_MSG_FRAME6SNIFFINTERVAL_POS, align 4
  %141 = ashr i32 %139, %140
  %142 = load i32, i32* @BT_UART_MSG_FRAME6DISCOVERABLE_MSK, align 4
  %143 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %144 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %143, i32 0, i32 5
  %145 = load i32, i32* %144, align 4
  %146 = and i32 %142, %145
  %147 = load i32, i32* @BT_UART_MSG_FRAME6DISCOVERABLE_POS, align 4
  %148 = ashr i32 %146, %147
  %149 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %134, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 %141, i32 %148)
  %150 = load %struct.iwl_priv*, %struct.iwl_priv** %3, align 8
  %151 = load i32, i32* @BT_UART_MSG_FRAME7SNIFFACTIVITY_MSK, align 4
  %152 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %153 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %152, i32 0, i32 6
  %154 = load i32, i32* %153, align 4
  %155 = and i32 %151, %154
  %156 = load i32, i32* @BT_UART_MSG_FRAME7SNIFFACTIVITY_POS, align 4
  %157 = ashr i32 %155, %156
  %158 = load i32, i32* @BT_UART_MSG_FRAME7PAGE_MSK, align 4
  %159 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %160 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %159, i32 0, i32 6
  %161 = load i32, i32* %160, align 4
  %162 = and i32 %158, %161
  %163 = load i32, i32* @BT_UART_MSG_FRAME7PAGE_POS, align 4
  %164 = ashr i32 %162, %163
  %165 = load i32, i32* @BT_UART_MSG_FRAME7INQUIRY_MSK, align 4
  %166 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %167 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %166, i32 0, i32 6
  %168 = load i32, i32* %167, align 4
  %169 = and i32 %165, %168
  %170 = load i32, i32* @BT_UART_MSG_FRAME7INQUIRY_POS, align 4
  %171 = ashr i32 %169, %170
  %172 = load i32, i32* @BT_UART_MSG_FRAME7CONNECTABLE_MSK, align 4
  %173 = load %struct.iwl_bt_uart_msg*, %struct.iwl_bt_uart_msg** %4, align 8
  %174 = getelementptr inbounds %struct.iwl_bt_uart_msg, %struct.iwl_bt_uart_msg* %173, i32 0, i32 6
  %175 = load i32, i32* %174, align 4
  %176 = and i32 %172, %175
  %177 = load i32, i32* @BT_UART_MSG_FRAME7CONNECTABLE_POS, align 4
  %178 = ashr i32 %176, %177
  %179 = call i32 (%struct.iwl_priv*, i8*, i32, ...) @IWL_DEBUG_COEX(%struct.iwl_priv* %150, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.6, i64 0, i64 0), i32 %157, i32 %164, i32 %171, i32 %178)
  ret void
}

declare dso_local i32 @IWL_DEBUG_COEX(%struct.iwl_priv*, i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
