; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/net/wireless/ath/ath9k/extr_ar9003_eeprom.c_ar9003_hw_tx_power_regwrite.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/net/wireless/ath/ath9k/extr_ar9003_eeprom.c_ar9003_hw_tx_power_regwrite.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ath_hw = type { i32 }

@AR_PHY_TX_FORCED_GAIN = common dso_local global i32 0, align 4
@ALL_TARGET_LEGACY_6_24 = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_54 = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_48 = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_36 = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_1L_5L = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_11S = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_11L = common dso_local global i64 0, align 8
@ALL_TARGET_LEGACY_5S = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_5 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_4 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_1_3_9_11_17_19 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_0_8_16 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_13 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_12 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_7 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_6 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_21 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_20 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_15 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_14 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_23 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_22 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_23 = common dso_local global i64 0, align 8
@ALL_TARGET_HT20_22 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_5 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_4 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_1_3_9_11_17_19 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_0_8_16 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_13 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_12 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_7 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_6 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_21 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_20 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_15 = common dso_local global i64 0, align 8
@ALL_TARGET_HT40_14 = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.ath_hw*, i32*)* @ar9003_hw_tx_power_regwrite to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @ar9003_hw_tx_power_regwrite(%struct.ath_hw* %0, i32* %1) #0 {
  %3 = alloca %struct.ath_hw*, align 8
  %4 = alloca i32*, align 8
  store %struct.ath_hw* %0, %struct.ath_hw** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %6 = load i32, i32* @AR_PHY_TX_FORCED_GAIN, align 4
  %7 = call i32 @REG_WRITE(%struct.ath_hw* %5, i32 %6, i32 0)
  %8 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %9 = call i32 @AR_PHY_POWER_TX_RATE(i32 0)
  %10 = load i32*, i32** %4, align 8
  %11 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %12 = getelementptr inbounds i32, i32* %10, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 63
  %15 = shl i32 %14, 24
  %16 = load i32*, i32** %4, align 8
  %17 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %18 = getelementptr inbounds i32, i32* %16, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 63
  %21 = shl i32 %20, 16
  %22 = or i32 %15, %21
  %23 = load i32*, i32** %4, align 8
  %24 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %25 = getelementptr inbounds i32, i32* %23, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 63
  %28 = shl i32 %27, 8
  %29 = or i32 %22, %28
  %30 = load i32*, i32** %4, align 8
  %31 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %32 = getelementptr inbounds i32, i32* %30, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 63
  %35 = shl i32 %34, 0
  %36 = or i32 %29, %35
  %37 = call i32 @REG_WRITE(%struct.ath_hw* %8, i32 %9, i32 %36)
  %38 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %39 = call i32 @AR_PHY_POWER_TX_RATE(i32 1)
  %40 = load i32*, i32** %4, align 8
  %41 = load i64, i64* @ALL_TARGET_LEGACY_54, align 8
  %42 = getelementptr inbounds i32, i32* %40, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 63
  %45 = shl i32 %44, 24
  %46 = load i32*, i32** %4, align 8
  %47 = load i64, i64* @ALL_TARGET_LEGACY_48, align 8
  %48 = getelementptr inbounds i32, i32* %46, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, 63
  %51 = shl i32 %50, 16
  %52 = or i32 %45, %51
  %53 = load i32*, i32** %4, align 8
  %54 = load i64, i64* @ALL_TARGET_LEGACY_36, align 8
  %55 = getelementptr inbounds i32, i32* %53, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 63
  %58 = shl i32 %57, 8
  %59 = or i32 %52, %58
  %60 = load i32*, i32** %4, align 8
  %61 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %62 = getelementptr inbounds i32, i32* %60, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = and i32 %63, 63
  %65 = shl i32 %64, 0
  %66 = or i32 %59, %65
  %67 = call i32 @REG_WRITE(%struct.ath_hw* %38, i32 %39, i32 %66)
  %68 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %69 = call i32 @AR_PHY_POWER_TX_RATE(i32 2)
  %70 = load i32*, i32** %4, align 8
  %71 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %72 = getelementptr inbounds i32, i32* %70, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = and i32 %73, 63
  %75 = shl i32 %74, 24
  %76 = load i32*, i32** %4, align 8
  %77 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %78 = getelementptr inbounds i32, i32* %76, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, 63
  %81 = shl i32 %80, 16
  %82 = or i32 %75, %81
  %83 = load i32*, i32** %4, align 8
  %84 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %85 = getelementptr inbounds i32, i32* %83, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = and i32 %86, 63
  %88 = shl i32 %87, 0
  %89 = or i32 %82, %88
  %90 = call i32 @REG_WRITE(%struct.ath_hw* %68, i32 %69, i32 %89)
  %91 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %92 = call i32 @AR_PHY_POWER_TX_RATE(i32 3)
  %93 = load i32*, i32** %4, align 8
  %94 = load i64, i64* @ALL_TARGET_LEGACY_11S, align 8
  %95 = getelementptr inbounds i32, i32* %93, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 63
  %98 = shl i32 %97, 24
  %99 = load i32*, i32** %4, align 8
  %100 = load i64, i64* @ALL_TARGET_LEGACY_11L, align 8
  %101 = getelementptr inbounds i32, i32* %99, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = and i32 %102, 63
  %104 = shl i32 %103, 16
  %105 = or i32 %98, %104
  %106 = load i32*, i32** %4, align 8
  %107 = load i64, i64* @ALL_TARGET_LEGACY_5S, align 8
  %108 = getelementptr inbounds i32, i32* %106, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 63
  %111 = shl i32 %110, 8
  %112 = or i32 %105, %111
  %113 = load i32*, i32** %4, align 8
  %114 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %115 = getelementptr inbounds i32, i32* %113, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %116, 63
  %118 = shl i32 %117, 0
  %119 = or i32 %112, %118
  %120 = call i32 @REG_WRITE(%struct.ath_hw* %91, i32 %92, i32 %119)
  %121 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %122 = call i32 @AR_PHY_POWER_TX_RATE(i32 8)
  %123 = load i32*, i32** %4, align 8
  %124 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = and i32 %126, 63
  %128 = shl i32 %127, 24
  %129 = load i32*, i32** %4, align 8
  %130 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %131 = getelementptr inbounds i32, i32* %129, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = and i32 %132, 63
  %134 = shl i32 %133, 16
  %135 = or i32 %128, %134
  %136 = load i32*, i32** %4, align 8
  %137 = load i64, i64* @ALL_TARGET_LEGACY_6_24, align 8
  %138 = getelementptr inbounds i32, i32* %136, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = and i32 %139, 63
  %141 = shl i32 %140, 8
  %142 = or i32 %135, %141
  %143 = load i32*, i32** %4, align 8
  %144 = load i64, i64* @ALL_TARGET_LEGACY_1L_5L, align 8
  %145 = getelementptr inbounds i32, i32* %143, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = and i32 %146, 63
  %148 = shl i32 %147, 0
  %149 = or i32 %142, %148
  %150 = call i32 @REG_WRITE(%struct.ath_hw* %121, i32 %122, i32 %149)
  %151 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %152 = call i32 @AR_PHY_POWER_TX_RATE(i32 4)
  %153 = load i32*, i32** %4, align 8
  %154 = load i64, i64* @ALL_TARGET_HT20_5, align 8
  %155 = getelementptr inbounds i32, i32* %153, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = and i32 %156, 63
  %158 = shl i32 %157, 24
  %159 = load i32*, i32** %4, align 8
  %160 = load i64, i64* @ALL_TARGET_HT20_4, align 8
  %161 = getelementptr inbounds i32, i32* %159, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = and i32 %162, 63
  %164 = shl i32 %163, 16
  %165 = or i32 %158, %164
  %166 = load i32*, i32** %4, align 8
  %167 = load i64, i64* @ALL_TARGET_HT20_1_3_9_11_17_19, align 8
  %168 = getelementptr inbounds i32, i32* %166, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = and i32 %169, 63
  %171 = shl i32 %170, 8
  %172 = or i32 %165, %171
  %173 = load i32*, i32** %4, align 8
  %174 = load i64, i64* @ALL_TARGET_HT20_0_8_16, align 8
  %175 = getelementptr inbounds i32, i32* %173, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = and i32 %176, 63
  %178 = shl i32 %177, 0
  %179 = or i32 %172, %178
  %180 = call i32 @REG_WRITE(%struct.ath_hw* %151, i32 %152, i32 %179)
  %181 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %182 = call i32 @AR_PHY_POWER_TX_RATE(i32 5)
  %183 = load i32*, i32** %4, align 8
  %184 = load i64, i64* @ALL_TARGET_HT20_13, align 8
  %185 = getelementptr inbounds i32, i32* %183, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = and i32 %186, 63
  %188 = shl i32 %187, 24
  %189 = load i32*, i32** %4, align 8
  %190 = load i64, i64* @ALL_TARGET_HT20_12, align 8
  %191 = getelementptr inbounds i32, i32* %189, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = and i32 %192, 63
  %194 = shl i32 %193, 16
  %195 = or i32 %188, %194
  %196 = load i32*, i32** %4, align 8
  %197 = load i64, i64* @ALL_TARGET_HT20_7, align 8
  %198 = getelementptr inbounds i32, i32* %196, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = and i32 %199, 63
  %201 = shl i32 %200, 8
  %202 = or i32 %195, %201
  %203 = load i32*, i32** %4, align 8
  %204 = load i64, i64* @ALL_TARGET_HT20_6, align 8
  %205 = getelementptr inbounds i32, i32* %203, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = and i32 %206, 63
  %208 = shl i32 %207, 0
  %209 = or i32 %202, %208
  %210 = call i32 @REG_WRITE(%struct.ath_hw* %181, i32 %182, i32 %209)
  %211 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %212 = call i32 @AR_PHY_POWER_TX_RATE(i32 9)
  %213 = load i32*, i32** %4, align 8
  %214 = load i64, i64* @ALL_TARGET_HT20_21, align 8
  %215 = getelementptr inbounds i32, i32* %213, i64 %214
  %216 = load i32, i32* %215, align 4
  %217 = and i32 %216, 63
  %218 = shl i32 %217, 24
  %219 = load i32*, i32** %4, align 8
  %220 = load i64, i64* @ALL_TARGET_HT20_20, align 8
  %221 = getelementptr inbounds i32, i32* %219, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = and i32 %222, 63
  %224 = shl i32 %223, 16
  %225 = or i32 %218, %224
  %226 = load i32*, i32** %4, align 8
  %227 = load i64, i64* @ALL_TARGET_HT20_15, align 8
  %228 = getelementptr inbounds i32, i32* %226, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = and i32 %229, 63
  %231 = shl i32 %230, 8
  %232 = or i32 %225, %231
  %233 = load i32*, i32** %4, align 8
  %234 = load i64, i64* @ALL_TARGET_HT20_14, align 8
  %235 = getelementptr inbounds i32, i32* %233, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = and i32 %236, 63
  %238 = shl i32 %237, 0
  %239 = or i32 %232, %238
  %240 = call i32 @REG_WRITE(%struct.ath_hw* %211, i32 %212, i32 %239)
  %241 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %242 = call i32 @AR_PHY_POWER_TX_RATE(i32 10)
  %243 = load i32*, i32** %4, align 8
  %244 = load i64, i64* @ALL_TARGET_HT40_23, align 8
  %245 = getelementptr inbounds i32, i32* %243, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = and i32 %246, 63
  %248 = shl i32 %247, 24
  %249 = load i32*, i32** %4, align 8
  %250 = load i64, i64* @ALL_TARGET_HT40_22, align 8
  %251 = getelementptr inbounds i32, i32* %249, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = and i32 %252, 63
  %254 = shl i32 %253, 16
  %255 = or i32 %248, %254
  %256 = load i32*, i32** %4, align 8
  %257 = load i64, i64* @ALL_TARGET_HT20_23, align 8
  %258 = getelementptr inbounds i32, i32* %256, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = and i32 %259, 63
  %261 = shl i32 %260, 8
  %262 = or i32 %255, %261
  %263 = load i32*, i32** %4, align 8
  %264 = load i64, i64* @ALL_TARGET_HT20_22, align 8
  %265 = getelementptr inbounds i32, i32* %263, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = and i32 %266, 63
  %268 = shl i32 %267, 0
  %269 = or i32 %262, %268
  %270 = call i32 @REG_WRITE(%struct.ath_hw* %241, i32 %242, i32 %269)
  %271 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %272 = call i32 @AR_PHY_POWER_TX_RATE(i32 6)
  %273 = load i32*, i32** %4, align 8
  %274 = load i64, i64* @ALL_TARGET_HT40_5, align 8
  %275 = getelementptr inbounds i32, i32* %273, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = and i32 %276, 63
  %278 = shl i32 %277, 24
  %279 = load i32*, i32** %4, align 8
  %280 = load i64, i64* @ALL_TARGET_HT40_4, align 8
  %281 = getelementptr inbounds i32, i32* %279, i64 %280
  %282 = load i32, i32* %281, align 4
  %283 = and i32 %282, 63
  %284 = shl i32 %283, 16
  %285 = or i32 %278, %284
  %286 = load i32*, i32** %4, align 8
  %287 = load i64, i64* @ALL_TARGET_HT40_1_3_9_11_17_19, align 8
  %288 = getelementptr inbounds i32, i32* %286, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = and i32 %289, 63
  %291 = shl i32 %290, 8
  %292 = or i32 %285, %291
  %293 = load i32*, i32** %4, align 8
  %294 = load i64, i64* @ALL_TARGET_HT40_0_8_16, align 8
  %295 = getelementptr inbounds i32, i32* %293, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = and i32 %296, 63
  %298 = shl i32 %297, 0
  %299 = or i32 %292, %298
  %300 = call i32 @REG_WRITE(%struct.ath_hw* %271, i32 %272, i32 %299)
  %301 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %302 = call i32 @AR_PHY_POWER_TX_RATE(i32 7)
  %303 = load i32*, i32** %4, align 8
  %304 = load i64, i64* @ALL_TARGET_HT40_13, align 8
  %305 = getelementptr inbounds i32, i32* %303, i64 %304
  %306 = load i32, i32* %305, align 4
  %307 = and i32 %306, 63
  %308 = shl i32 %307, 24
  %309 = load i32*, i32** %4, align 8
  %310 = load i64, i64* @ALL_TARGET_HT40_12, align 8
  %311 = getelementptr inbounds i32, i32* %309, i64 %310
  %312 = load i32, i32* %311, align 4
  %313 = and i32 %312, 63
  %314 = shl i32 %313, 16
  %315 = or i32 %308, %314
  %316 = load i32*, i32** %4, align 8
  %317 = load i64, i64* @ALL_TARGET_HT40_7, align 8
  %318 = getelementptr inbounds i32, i32* %316, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = and i32 %319, 63
  %321 = shl i32 %320, 8
  %322 = or i32 %315, %321
  %323 = load i32*, i32** %4, align 8
  %324 = load i64, i64* @ALL_TARGET_HT40_6, align 8
  %325 = getelementptr inbounds i32, i32* %323, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = and i32 %326, 63
  %328 = shl i32 %327, 0
  %329 = or i32 %322, %328
  %330 = call i32 @REG_WRITE(%struct.ath_hw* %301, i32 %302, i32 %329)
  %331 = load %struct.ath_hw*, %struct.ath_hw** %3, align 8
  %332 = call i32 @AR_PHY_POWER_TX_RATE(i32 11)
  %333 = load i32*, i32** %4, align 8
  %334 = load i64, i64* @ALL_TARGET_HT40_21, align 8
  %335 = getelementptr inbounds i32, i32* %333, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = and i32 %336, 63
  %338 = shl i32 %337, 24
  %339 = load i32*, i32** %4, align 8
  %340 = load i64, i64* @ALL_TARGET_HT40_20, align 8
  %341 = getelementptr inbounds i32, i32* %339, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = and i32 %342, 63
  %344 = shl i32 %343, 16
  %345 = or i32 %338, %344
  %346 = load i32*, i32** %4, align 8
  %347 = load i64, i64* @ALL_TARGET_HT40_15, align 8
  %348 = getelementptr inbounds i32, i32* %346, i64 %347
  %349 = load i32, i32* %348, align 4
  %350 = and i32 %349, 63
  %351 = shl i32 %350, 8
  %352 = or i32 %345, %351
  %353 = load i32*, i32** %4, align 8
  %354 = load i64, i64* @ALL_TARGET_HT40_14, align 8
  %355 = getelementptr inbounds i32, i32* %353, i64 %354
  %356 = load i32, i32* %355, align 4
  %357 = and i32 %356, 63
  %358 = shl i32 %357, 0
  %359 = or i32 %352, %358
  %360 = call i32 @REG_WRITE(%struct.ath_hw* %331, i32 %332, i32 %359)
  ret i32 0
}

declare dso_local i32 @REG_WRITE(%struct.ath_hw*, i32, i32) #1

declare dso_local i32 @AR_PHY_POWER_TX_RATE(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
