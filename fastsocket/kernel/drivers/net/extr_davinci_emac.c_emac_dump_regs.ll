; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_davinci_emac.c_emac_dump_regs.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_davinci_emac.c_emac_dump_regs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emac_priv = type { %struct.TYPE_2__* }
%struct.TYPE_2__ = type { %struct.device }
%struct.device = type { i32 }

@.str = private unnamed_addr constant [22 x i8] c"EMAC Basic registers\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"EMAC: EWCTL: %08X, EWINTTCNT: %08X\0A\00", align 1
@EMAC_CTRL_EWCTL = common dso_local global i32 0, align 4
@EMAC_CTRL_EWINTTCNT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"EMAC: TXID: %08X %s, RXID: %08X %s\0A\00", align 1
@EMAC_TXIDVER = common dso_local global i32 0, align 4
@EMAC_TXCONTROL = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"enabled\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"disabled\00", align 1
@EMAC_RXIDVER = common dso_local global i32 0, align 4
@EMAC_RXCONTROL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [59 x i8] c"EMAC: TXIntRaw:%08X, TxIntMasked: %08X, TxIntMasSet: %08X\0A\00", align 1
@EMAC_TXINTSTATRAW = common dso_local global i32 0, align 4
@EMAC_TXINTSTATMASKED = common dso_local global i32 0, align 4
@EMAC_TXINTMASKSET = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [59 x i8] c"EMAC: RXIntRaw:%08X, RxIntMasked: %08X, RxIntMasSet: %08X\0A\00", align 1
@EMAC_RXINTSTATRAW = common dso_local global i32 0, align 4
@EMAC_RXINTSTATMASKED = common dso_local global i32 0, align 4
@EMAC_RXINTMASKSET = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [60 x i8] c"EMAC: MacIntRaw:%08X, MacIntMasked: %08X, MacInVector=%08X\0A\00", align 1
@EMAC_MACINTSTATRAW = common dso_local global i32 0, align 4
@EMAC_MACINTSTATMASKED = common dso_local global i32 0, align 4
@EMAC_MACINVECTOR = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [42 x i8] c"EMAC: EmuControl:%08X, FifoControl: %08X\0A\00", align 1
@EMAC_EMCONTROL = common dso_local global i32 0, align 4
@EMAC_FIFOCONTROL = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [57 x i8] c"EMAC: MBPEnable:%08X, RXUnicastSet: %08X, RXMaxLen=%08X\0A\00", align 1
@EMAC_RXMBPENABLE = common dso_local global i32 0, align 4
@EMAC_RXUNICASTSET = common dso_local global i32 0, align 4
@EMAC_RXMAXLEN = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [56 x i8] c"EMAC: MacControl:%08X, MacStatus: %08X, MacConfig=%08X\0A\00", align 1
@EMAC_MACCONTROL = common dso_local global i32 0, align 4
@EMAC_MACSTATUS = common dso_local global i32 0, align 4
@EMAC_MACCONFIG = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [37 x i8] c"EMAC: TXHDP[0]:%08X, RXHDP[0]: %08X\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"EMAC Statistics\0A\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"EMAC: rx_good_frames:%d\0A\00", align 1
@EMAC_RXGOODFRAMES = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [30 x i8] c"EMAC: rx_broadcast_frames:%d\0A\00", align 1
@EMAC_RXBCASTFRAMES = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [30 x i8] c"EMAC: rx_multicast_frames:%d\0A\00", align 1
@EMAC_RXMCASTFRAMES = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [26 x i8] c"EMAC: rx_pause_frames:%d\0A\00", align 1
@EMAC_RXPAUSEFRAMES = common dso_local global i32 0, align 4
@.str.17 = private unnamed_addr constant [23 x i8] c"EMAC: rx_crcerrors:%d\0A\00", align 1
@EMAC_RXCRCERRORS = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [31 x i8] c"EMAC: rx_align_code_errors:%d\0A\00", align 1
@EMAC_RXALIGNCODEERRORS = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [30 x i8] c"EMAC: rx_oversized_frames:%d\0A\00", align 1
@EMAC_RXOVERSIZED = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [27 x i8] c"EMAC: rx_jabber_frames:%d\0A\00", align 1
@EMAC_RXJABBER = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [31 x i8] c"EMAC: rx_undersized_frames:%d\0A\00", align 1
@EMAC_RXUNDERSIZED = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [23 x i8] c"EMAC: rx_fragments:%d\0A\00", align 1
@EMAC_RXFRAGMENTS = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [29 x i8] c"EMAC: rx_filtered_frames:%d\0A\00", align 1
@EMAC_RXFILTERED = common dso_local global i32 0, align 4
@.str.24 = private unnamed_addr constant [33 x i8] c"EMAC: rx_qos_filtered_frames:%d\0A\00", align 1
@EMAC_RXQOSFILTERED = common dso_local global i32 0, align 4
@.str.25 = private unnamed_addr constant [20 x i8] c"EMAC: rx_octets:%d\0A\00", align 1
@EMAC_RXOCTETS = common dso_local global i32 0, align 4
@.str.26 = private unnamed_addr constant [24 x i8] c"EMAC: tx_goodframes:%d\0A\00", align 1
@EMAC_TXGOODFRAMES = common dso_local global i32 0, align 4
@.str.27 = private unnamed_addr constant [25 x i8] c"EMAC: tx_bcastframes:%d\0A\00", align 1
@EMAC_TXBCASTFRAMES = common dso_local global i32 0, align 4
@.str.28 = private unnamed_addr constant [25 x i8] c"EMAC: tx_mcastframes:%d\0A\00", align 1
@EMAC_TXMCASTFRAMES = common dso_local global i32 0, align 4
@.str.29 = private unnamed_addr constant [26 x i8] c"EMAC: tx_pause_frames:%d\0A\00", align 1
@EMAC_TXPAUSEFRAMES = common dso_local global i32 0, align 4
@.str.30 = private unnamed_addr constant [29 x i8] c"EMAC: tx_deferred_frames:%d\0A\00", align 1
@EMAC_TXDEFERRED = common dso_local global i32 0, align 4
@.str.31 = private unnamed_addr constant [30 x i8] c"EMAC: tx_collision_frames:%d\0A\00", align 1
@EMAC_TXCOLLISION = common dso_local global i32 0, align 4
@.str.32 = private unnamed_addr constant [32 x i8] c"EMAC: tx_single_coll_frames:%d\0A\00", align 1
@EMAC_TXSINGLECOLL = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [30 x i8] c"EMAC: tx_mult_coll_frames:%d\0A\00", align 1
@EMAC_TXMULTICOLL = common dso_local global i32 0, align 4
@.str.34 = private unnamed_addr constant [34 x i8] c"EMAC: tx_excessive_collisions:%d\0A\00", align 1
@EMAC_TXEXCESSIVECOLL = common dso_local global i32 0, align 4
@.str.35 = private unnamed_addr constant [29 x i8] c"EMAC: tx_late_collisions:%d\0A\00", align 1
@EMAC_TXLATECOLL = common dso_local global i32 0, align 4
@.str.36 = private unnamed_addr constant [22 x i8] c"EMAC: tx_underrun:%d\0A\00", align 1
@EMAC_TXUNDERRUN = common dso_local global i32 0, align 4
@.str.37 = private unnamed_addr constant [34 x i8] c"EMAC: tx_carrier_sense_errors:%d\0A\00", align 1
@EMAC_TXCARRIERSENSE = common dso_local global i32 0, align 4
@.str.38 = private unnamed_addr constant [20 x i8] c"EMAC: tx_octets:%d\0A\00", align 1
@EMAC_TXOCTETS = common dso_local global i32 0, align 4
@.str.39 = private unnamed_addr constant [21 x i8] c"EMAC: net_octets:%d\0A\00", align 1
@EMAC_NETOCTETS = common dso_local global i32 0, align 4
@.str.40 = private unnamed_addr constant [26 x i8] c"EMAC: rx_sof_overruns:%d\0A\00", align 1
@EMAC_RXSOFOVERRUNS = common dso_local global i32 0, align 4
@.str.41 = private unnamed_addr constant [26 x i8] c"EMAC: rx_mof_overruns:%d\0A\00", align 1
@EMAC_RXMOFOVERRUNS = common dso_local global i32 0, align 4
@.str.42 = private unnamed_addr constant [26 x i8] c"EMAC: rx_dma_overruns:%d\0A\00", align 1
@EMAC_RXDMAOVERRUNS = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.emac_priv*)* @emac_dump_regs to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emac_dump_regs(%struct.emac_priv* %0) #0 {
  %2 = alloca %struct.emac_priv*, align 8
  %3 = alloca %struct.device*, align 8
  store %struct.emac_priv* %0, %struct.emac_priv** %2, align 8
  %4 = load %struct.emac_priv*, %struct.emac_priv** %2, align 8
  %5 = getelementptr inbounds %struct.emac_priv, %struct.emac_priv* %4, i32 0, i32 0
  %6 = load %struct.TYPE_2__*, %struct.TYPE_2__** %5, align 8
  %7 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %6, i32 0, i32 0
  store %struct.device* %7, %struct.device** %3, align 8
  %8 = load %struct.device*, %struct.device** %3, align 8
  %9 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %8, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %10 = load %struct.device*, %struct.device** %3, align 8
  %11 = load i32, i32* @EMAC_CTRL_EWCTL, align 4
  %12 = call i32 @emac_ctrl_read(i32 %11)
  %13 = load i32, i32* @EMAC_CTRL_EWINTTCNT, align 4
  %14 = call i32 @emac_ctrl_read(i32 %13)
  %15 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %10, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 %12, i32 %14)
  %16 = load %struct.device*, %struct.device** %3, align 8
  %17 = load i32, i32* @EMAC_TXIDVER, align 4
  %18 = call i64 @emac_read(i32 %17)
  %19 = load i32, i32* @EMAC_TXCONTROL, align 4
  %20 = call i64 @emac_read(i32 %19)
  %21 = icmp ne i64 %20, 0
  %22 = zext i1 %21 to i64
  %23 = select i1 %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)
  %24 = load i32, i32* @EMAC_RXIDVER, align 4
  %25 = call i64 @emac_read(i32 %24)
  %26 = load i32, i32* @EMAC_RXCONTROL, align 4
  %27 = call i64 @emac_read(i32 %26)
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i64
  %30 = select i1 %28, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)
  %31 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %18, i8* %23, i64 %25, i8* %30)
  %32 = load %struct.device*, %struct.device** %3, align 8
  %33 = load i32, i32* @EMAC_TXINTSTATRAW, align 4
  %34 = call i64 @emac_read(i32 %33)
  %35 = load i32, i32* @EMAC_TXINTSTATMASKED, align 4
  %36 = call i64 @emac_read(i32 %35)
  %37 = load i32, i32* @EMAC_TXINTMASKSET, align 4
  %38 = call i64 @emac_read(i32 %37)
  %39 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %32, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0), i64 %34, i64 %36, i64 %38)
  %40 = load %struct.device*, %struct.device** %3, align 8
  %41 = load i32, i32* @EMAC_RXINTSTATRAW, align 4
  %42 = call i64 @emac_read(i32 %41)
  %43 = load i32, i32* @EMAC_RXINTSTATMASKED, align 4
  %44 = call i64 @emac_read(i32 %43)
  %45 = load i32, i32* @EMAC_RXINTMASKSET, align 4
  %46 = call i64 @emac_read(i32 %45)
  %47 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %40, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i64 %42, i64 %44, i64 %46)
  %48 = load %struct.device*, %struct.device** %3, align 8
  %49 = load i32, i32* @EMAC_MACINTSTATRAW, align 4
  %50 = call i64 @emac_read(i32 %49)
  %51 = load i32, i32* @EMAC_MACINTSTATMASKED, align 4
  %52 = call i64 @emac_read(i32 %51)
  %53 = load i32, i32* @EMAC_MACINVECTOR, align 4
  %54 = call i64 @emac_read(i32 %53)
  %55 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %48, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.7, i64 0, i64 0), i64 %50, i64 %52, i64 %54)
  %56 = load %struct.device*, %struct.device** %3, align 8
  %57 = load i32, i32* @EMAC_EMCONTROL, align 4
  %58 = call i64 @emac_read(i32 %57)
  %59 = load i32, i32* @EMAC_FIFOCONTROL, align 4
  %60 = call i64 @emac_read(i32 %59)
  %61 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0), i64 %58, i64 %60)
  %62 = load %struct.device*, %struct.device** %3, align 8
  %63 = load i32, i32* @EMAC_RXMBPENABLE, align 4
  %64 = call i64 @emac_read(i32 %63)
  %65 = load i32, i32* @EMAC_RXUNICASTSET, align 4
  %66 = call i64 @emac_read(i32 %65)
  %67 = load i32, i32* @EMAC_RXMAXLEN, align 4
  %68 = call i64 @emac_read(i32 %67)
  %69 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %62, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i64 %64, i64 %66, i64 %68)
  %70 = load %struct.device*, %struct.device** %3, align 8
  %71 = load i32, i32* @EMAC_MACCONTROL, align 4
  %72 = call i64 @emac_read(i32 %71)
  %73 = load i32, i32* @EMAC_MACSTATUS, align 4
  %74 = call i64 @emac_read(i32 %73)
  %75 = load i32, i32* @EMAC_MACCONFIG, align 4
  %76 = call i64 @emac_read(i32 %75)
  %77 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %70, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i64 0, i64 0), i64 %72, i64 %74, i64 %76)
  %78 = load %struct.device*, %struct.device** %3, align 8
  %79 = call i32 @EMAC_TXHDP(i32 0)
  %80 = call i64 @emac_read(i32 %79)
  %81 = call i32 @EMAC_RXHDP(i32 0)
  %82 = call i64 @emac_read(i32 %81)
  %83 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %78, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i64 %80, i64 %82)
  %84 = load %struct.device*, %struct.device** %3, align 8
  %85 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %84, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0))
  %86 = load %struct.device*, %struct.device** %3, align 8
  %87 = load i32, i32* @EMAC_RXGOODFRAMES, align 4
  %88 = call i64 @emac_read(i32 %87)
  %89 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %86, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i64 %88)
  %90 = load %struct.device*, %struct.device** %3, align 8
  %91 = load i32, i32* @EMAC_RXBCASTFRAMES, align 4
  %92 = call i64 @emac_read(i32 %91)
  %93 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %90, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14, i64 0, i64 0), i64 %92)
  %94 = load %struct.device*, %struct.device** %3, align 8
  %95 = load i32, i32* @EMAC_RXMCASTFRAMES, align 4
  %96 = call i64 @emac_read(i32 %95)
  %97 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %94, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i64 0, i64 0), i64 %96)
  %98 = load %struct.device*, %struct.device** %3, align 8
  %99 = load i32, i32* @EMAC_RXPAUSEFRAMES, align 4
  %100 = call i64 @emac_read(i32 %99)
  %101 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %98, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0), i64 %100)
  %102 = load %struct.device*, %struct.device** %3, align 8
  %103 = load i32, i32* @EMAC_RXCRCERRORS, align 4
  %104 = call i64 @emac_read(i32 %103)
  %105 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %102, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i64 %104)
  %106 = load %struct.device*, %struct.device** %3, align 8
  %107 = load i32, i32* @EMAC_RXALIGNCODEERRORS, align 4
  %108 = call i64 @emac_read(i32 %107)
  %109 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %106, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0), i64 %108)
  %110 = load %struct.device*, %struct.device** %3, align 8
  %111 = load i32, i32* @EMAC_RXOVERSIZED, align 4
  %112 = call i64 @emac_read(i32 %111)
  %113 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %110, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0), i64 %112)
  %114 = load %struct.device*, %struct.device** %3, align 8
  %115 = load i32, i32* @EMAC_RXJABBER, align 4
  %116 = call i64 @emac_read(i32 %115)
  %117 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %114, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.20, i64 0, i64 0), i64 %116)
  %118 = load %struct.device*, %struct.device** %3, align 8
  %119 = load i32, i32* @EMAC_RXUNDERSIZED, align 4
  %120 = call i64 @emac_read(i32 %119)
  %121 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %118, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.21, i64 0, i64 0), i64 %120)
  %122 = load %struct.device*, %struct.device** %3, align 8
  %123 = load i32, i32* @EMAC_RXFRAGMENTS, align 4
  %124 = call i64 @emac_read(i32 %123)
  %125 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %122, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0), i64 %124)
  %126 = load %struct.device*, %struct.device** %3, align 8
  %127 = load i32, i32* @EMAC_RXFILTERED, align 4
  %128 = call i64 @emac_read(i32 %127)
  %129 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %126, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.23, i64 0, i64 0), i64 %128)
  %130 = load %struct.device*, %struct.device** %3, align 8
  %131 = load i32, i32* @EMAC_RXQOSFILTERED, align 4
  %132 = call i64 @emac_read(i32 %131)
  %133 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %130, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i64 0, i64 0), i64 %132)
  %134 = load %struct.device*, %struct.device** %3, align 8
  %135 = load i32, i32* @EMAC_RXOCTETS, align 4
  %136 = call i64 @emac_read(i32 %135)
  %137 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %134, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25, i64 0, i64 0), i64 %136)
  %138 = load %struct.device*, %struct.device** %3, align 8
  %139 = load i32, i32* @EMAC_TXGOODFRAMES, align 4
  %140 = call i64 @emac_read(i32 %139)
  %141 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %138, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0), i64 %140)
  %142 = load %struct.device*, %struct.device** %3, align 8
  %143 = load i32, i32* @EMAC_TXBCASTFRAMES, align 4
  %144 = call i64 @emac_read(i32 %143)
  %145 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %142, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.27, i64 0, i64 0), i64 %144)
  %146 = load %struct.device*, %struct.device** %3, align 8
  %147 = load i32, i32* @EMAC_TXMCASTFRAMES, align 4
  %148 = call i64 @emac_read(i32 %147)
  %149 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %146, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0), i64 %148)
  %150 = load %struct.device*, %struct.device** %3, align 8
  %151 = load i32, i32* @EMAC_TXPAUSEFRAMES, align 4
  %152 = call i64 @emac_read(i32 %151)
  %153 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %150, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i64 0, i64 0), i64 %152)
  %154 = load %struct.device*, %struct.device** %3, align 8
  %155 = load i32, i32* @EMAC_TXDEFERRED, align 4
  %156 = call i64 @emac_read(i32 %155)
  %157 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %154, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.30, i64 0, i64 0), i64 %156)
  %158 = load %struct.device*, %struct.device** %3, align 8
  %159 = load i32, i32* @EMAC_TXCOLLISION, align 4
  %160 = call i64 @emac_read(i32 %159)
  %161 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %158, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i64 0, i64 0), i64 %160)
  %162 = load %struct.device*, %struct.device** %3, align 8
  %163 = load i32, i32* @EMAC_TXSINGLECOLL, align 4
  %164 = call i64 @emac_read(i32 %163)
  %165 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %162, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.32, i64 0, i64 0), i64 %164)
  %166 = load %struct.device*, %struct.device** %3, align 8
  %167 = load i32, i32* @EMAC_TXMULTICOLL, align 4
  %168 = call i64 @emac_read(i32 %167)
  %169 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %166, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.33, i64 0, i64 0), i64 %168)
  %170 = load %struct.device*, %struct.device** %3, align 8
  %171 = load i32, i32* @EMAC_TXEXCESSIVECOLL, align 4
  %172 = call i64 @emac_read(i32 %171)
  %173 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %170, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i64 0, i64 0), i64 %172)
  %174 = load %struct.device*, %struct.device** %3, align 8
  %175 = load i32, i32* @EMAC_TXLATECOLL, align 4
  %176 = call i64 @emac_read(i32 %175)
  %177 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %174, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0), i64 %176)
  %178 = load %struct.device*, %struct.device** %3, align 8
  %179 = load i32, i32* @EMAC_TXUNDERRUN, align 4
  %180 = call i64 @emac_read(i32 %179)
  %181 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %178, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0), i64 %180)
  %182 = load %struct.device*, %struct.device** %3, align 8
  %183 = load i32, i32* @EMAC_TXCARRIERSENSE, align 4
  %184 = call i64 @emac_read(i32 %183)
  %185 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %182, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i64 0, i64 0), i64 %184)
  %186 = load %struct.device*, %struct.device** %3, align 8
  %187 = load i32, i32* @EMAC_TXOCTETS, align 4
  %188 = call i64 @emac_read(i32 %187)
  %189 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %186, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.38, i64 0, i64 0), i64 %188)
  %190 = load %struct.device*, %struct.device** %3, align 8
  %191 = load i32, i32* @EMAC_NETOCTETS, align 4
  %192 = call i64 @emac_read(i32 %191)
  %193 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %190, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i64 0, i64 0), i64 %192)
  %194 = load %struct.device*, %struct.device** %3, align 8
  %195 = load i32, i32* @EMAC_RXSOFOVERRUNS, align 4
  %196 = call i64 @emac_read(i32 %195)
  %197 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %194, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i64 %196)
  %198 = load %struct.device*, %struct.device** %3, align 8
  %199 = load i32, i32* @EMAC_RXMOFOVERRUNS, align 4
  %200 = call i64 @emac_read(i32 %199)
  %201 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %198, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0), i64 %200)
  %202 = load %struct.device*, %struct.device** %3, align 8
  %203 = load i32, i32* @EMAC_RXDMAOVERRUNS, align 4
  %204 = call i64 @emac_read(i32 %203)
  %205 = call i32 (%struct.device*, i8*, ...) @dev_info(%struct.device* %202, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0), i64 %204)
  ret void
}

declare dso_local i32 @dev_info(%struct.device*, i8*, ...) #1

declare dso_local i32 @emac_ctrl_read(i32) #1

declare dso_local i64 @emac_read(i32) #1

declare dso_local i32 @EMAC_TXHDP(i32) #1

declare dso_local i32 @EMAC_RXHDP(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
