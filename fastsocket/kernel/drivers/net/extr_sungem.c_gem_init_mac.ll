; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_sungem.c_gem_init_mac.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/net/extr_sungem.c_gem_init_mac.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gem = type { i32, i32, i64, i64, %struct.TYPE_2__* }
%struct.TYPE_2__ = type { i8* }

@MAC_SNDPAUSE = common dso_local global i64 0, align 8
@MAC_IPG0 = common dso_local global i64 0, align 8
@MAC_IPG1 = common dso_local global i64 0, align 8
@MAC_IPG2 = common dso_local global i64 0, align 8
@MAC_STIME = common dso_local global i64 0, align 8
@MAC_MINFSZ = common dso_local global i64 0, align 8
@MAC_MAXFSZ = common dso_local global i64 0, align 8
@MAC_PASIZE = common dso_local global i64 0, align 8
@MAC_JAMSIZE = common dso_local global i64 0, align 8
@MAC_ATTLIM = common dso_local global i64 0, align 8
@MAC_MCTYPE = common dso_local global i64 0, align 8
@MAC_RANDSEED = common dso_local global i64 0, align 8
@MAC_ADDR0 = common dso_local global i64 0, align 8
@MAC_ADDR1 = common dso_local global i64 0, align 8
@MAC_ADDR2 = common dso_local global i64 0, align 8
@MAC_ADDR3 = common dso_local global i64 0, align 8
@MAC_ADDR4 = common dso_local global i64 0, align 8
@MAC_ADDR5 = common dso_local global i64 0, align 8
@MAC_ADDR6 = common dso_local global i64 0, align 8
@MAC_ADDR7 = common dso_local global i64 0, align 8
@MAC_ADDR8 = common dso_local global i64 0, align 8
@MAC_AFILT0 = common dso_local global i64 0, align 8
@MAC_AFILT1 = common dso_local global i64 0, align 8
@MAC_AFILT2 = common dso_local global i64 0, align 8
@MAC_AF21MSK = common dso_local global i64 0, align 8
@MAC_AF0MSK = common dso_local global i64 0, align 8
@MAC_NCOLL = common dso_local global i64 0, align 8
@MAC_FASUCC = common dso_local global i64 0, align 8
@MAC_ECOLL = common dso_local global i64 0, align 8
@MAC_LCOLL = common dso_local global i64 0, align 8
@MAC_DTIMER = common dso_local global i64 0, align 8
@MAC_PATMPS = common dso_local global i64 0, align 8
@MAC_RFCTR = common dso_local global i64 0, align 8
@MAC_LERR = common dso_local global i64 0, align 8
@MAC_AERR = common dso_local global i64 0, align 8
@MAC_FCSERR = common dso_local global i64 0, align 8
@MAC_RXCVERR = common dso_local global i64 0, align 8
@MAC_TXCFG = common dso_local global i64 0, align 8
@MAC_RXCFG = common dso_local global i64 0, align 8
@MAC_MCCFG = common dso_local global i64 0, align 8
@MAC_XIFCFG = common dso_local global i64 0, align 8
@MAC_TXSTAT_XMIT = common dso_local global i32 0, align 4
@MAC_TXMASK = common dso_local global i64 0, align 8
@MAC_RXSTAT_RCV = common dso_local global i32 0, align 4
@MAC_RXMASK = common dso_local global i64 0, align 8
@MAC_MCMASK = common dso_local global i64 0, align 8
@WOL_WAKECSR = common dso_local global i64 0, align 8
@MAC_RXCFG_SFCS = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.gem*)* @gem_init_mac to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @gem_init_mac(%struct.gem* %0) #0 {
  %2 = alloca %struct.gem*, align 8
  %3 = alloca i8*, align 8
  store %struct.gem* %0, %struct.gem** %2, align 8
  %4 = load %struct.gem*, %struct.gem** %2, align 8
  %5 = getelementptr inbounds %struct.gem, %struct.gem* %4, i32 0, i32 4
  %6 = load %struct.TYPE_2__*, %struct.TYPE_2__** %5, align 8
  %7 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 0
  store i8* %9, i8** %3, align 8
  %10 = load %struct.gem*, %struct.gem** %2, align 8
  %11 = getelementptr inbounds %struct.gem, %struct.gem* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* @MAC_SNDPAUSE, align 8
  %14 = add nsw i64 %12, %13
  %15 = call i32 @writel(i32 7152, i64 %14)
  %16 = load %struct.gem*, %struct.gem** %2, align 8
  %17 = getelementptr inbounds %struct.gem, %struct.gem* %16, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* @MAC_IPG0, align 8
  %20 = add nsw i64 %18, %19
  %21 = call i32 @writel(i32 0, i64 %20)
  %22 = load %struct.gem*, %struct.gem** %2, align 8
  %23 = getelementptr inbounds %struct.gem, %struct.gem* %22, i32 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = load i64, i64* @MAC_IPG1, align 8
  %26 = add nsw i64 %24, %25
  %27 = call i32 @writel(i32 8, i64 %26)
  %28 = load %struct.gem*, %struct.gem** %2, align 8
  %29 = getelementptr inbounds %struct.gem, %struct.gem* %28, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* @MAC_IPG2, align 8
  %32 = add nsw i64 %30, %31
  %33 = call i32 @writel(i32 4, i64 %32)
  %34 = load %struct.gem*, %struct.gem** %2, align 8
  %35 = getelementptr inbounds %struct.gem, %struct.gem* %34, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = load i64, i64* @MAC_STIME, align 8
  %38 = add nsw i64 %36, %37
  %39 = call i32 @writel(i32 64, i64 %38)
  %40 = load %struct.gem*, %struct.gem** %2, align 8
  %41 = getelementptr inbounds %struct.gem, %struct.gem* %40, i32 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = load i64, i64* @MAC_MINFSZ, align 8
  %44 = add nsw i64 %42, %43
  %45 = call i32 @writel(i32 64, i64 %44)
  %46 = load %struct.gem*, %struct.gem** %2, align 8
  %47 = getelementptr inbounds %struct.gem, %struct.gem* %46, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = add nsw i32 %48, 4
  %50 = or i32 536870912, %49
  %51 = load %struct.gem*, %struct.gem** %2, align 8
  %52 = getelementptr inbounds %struct.gem, %struct.gem* %51, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = load i64, i64* @MAC_MAXFSZ, align 8
  %55 = add nsw i64 %53, %54
  %56 = call i32 @writel(i32 %50, i64 %55)
  %57 = load %struct.gem*, %struct.gem** %2, align 8
  %58 = getelementptr inbounds %struct.gem, %struct.gem* %57, i32 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = load i64, i64* @MAC_PASIZE, align 8
  %61 = add nsw i64 %59, %60
  %62 = call i32 @writel(i32 7, i64 %61)
  %63 = load %struct.gem*, %struct.gem** %2, align 8
  %64 = getelementptr inbounds %struct.gem, %struct.gem* %63, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = load i64, i64* @MAC_JAMSIZE, align 8
  %67 = add nsw i64 %65, %66
  %68 = call i32 @writel(i32 4, i64 %67)
  %69 = load %struct.gem*, %struct.gem** %2, align 8
  %70 = getelementptr inbounds %struct.gem, %struct.gem* %69, i32 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = load i64, i64* @MAC_ATTLIM, align 8
  %73 = add nsw i64 %71, %72
  %74 = call i32 @writel(i32 16, i64 %73)
  %75 = load %struct.gem*, %struct.gem** %2, align 8
  %76 = getelementptr inbounds %struct.gem, %struct.gem* %75, i32 0, i32 2
  %77 = load i64, i64* %76, align 8
  %78 = load i64, i64* @MAC_MCTYPE, align 8
  %79 = add nsw i64 %77, %78
  %80 = call i32 @writel(i32 34824, i64 %79)
  %81 = load i8*, i8** %3, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 5
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = load i8*, i8** %3, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 4
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = shl i32 %88, 8
  %90 = or i32 %84, %89
  %91 = and i32 %90, 1023
  %92 = load %struct.gem*, %struct.gem** %2, align 8
  %93 = getelementptr inbounds %struct.gem, %struct.gem* %92, i32 0, i32 2
  %94 = load i64, i64* %93, align 8
  %95 = load i64, i64* @MAC_RANDSEED, align 8
  %96 = add nsw i64 %94, %95
  %97 = call i32 @writel(i32 %91, i64 %96)
  %98 = load i8*, i8** %3, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 4
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl i32 %101, 8
  %103 = load i8*, i8** %3, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 5
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = or i32 %102, %106
  %108 = load %struct.gem*, %struct.gem** %2, align 8
  %109 = getelementptr inbounds %struct.gem, %struct.gem* %108, i32 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = load i64, i64* @MAC_ADDR0, align 8
  %112 = add nsw i64 %110, %111
  %113 = call i32 @writel(i32 %107, i64 %112)
  %114 = load i8*, i8** %3, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 2
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = shl i32 %117, 8
  %119 = load i8*, i8** %3, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 3
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = or i32 %118, %122
  %124 = load %struct.gem*, %struct.gem** %2, align 8
  %125 = getelementptr inbounds %struct.gem, %struct.gem* %124, i32 0, i32 2
  %126 = load i64, i64* %125, align 8
  %127 = load i64, i64* @MAC_ADDR1, align 8
  %128 = add nsw i64 %126, %127
  %129 = call i32 @writel(i32 %123, i64 %128)
  %130 = load i8*, i8** %3, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 0
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = shl i32 %133, 8
  %135 = load i8*, i8** %3, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = or i32 %134, %138
  %140 = load %struct.gem*, %struct.gem** %2, align 8
  %141 = getelementptr inbounds %struct.gem, %struct.gem* %140, i32 0, i32 2
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* @MAC_ADDR2, align 8
  %144 = add nsw i64 %142, %143
  %145 = call i32 @writel(i32 %139, i64 %144)
  %146 = load %struct.gem*, %struct.gem** %2, align 8
  %147 = getelementptr inbounds %struct.gem, %struct.gem* %146, i32 0, i32 2
  %148 = load i64, i64* %147, align 8
  %149 = load i64, i64* @MAC_ADDR3, align 8
  %150 = add nsw i64 %148, %149
  %151 = call i32 @writel(i32 0, i64 %150)
  %152 = load %struct.gem*, %struct.gem** %2, align 8
  %153 = getelementptr inbounds %struct.gem, %struct.gem* %152, i32 0, i32 2
  %154 = load i64, i64* %153, align 8
  %155 = load i64, i64* @MAC_ADDR4, align 8
  %156 = add nsw i64 %154, %155
  %157 = call i32 @writel(i32 0, i64 %156)
  %158 = load %struct.gem*, %struct.gem** %2, align 8
  %159 = getelementptr inbounds %struct.gem, %struct.gem* %158, i32 0, i32 2
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* @MAC_ADDR5, align 8
  %162 = add nsw i64 %160, %161
  %163 = call i32 @writel(i32 0, i64 %162)
  %164 = load %struct.gem*, %struct.gem** %2, align 8
  %165 = getelementptr inbounds %struct.gem, %struct.gem* %164, i32 0, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = load i64, i64* @MAC_ADDR6, align 8
  %168 = add nsw i64 %166, %167
  %169 = call i32 @writel(i32 1, i64 %168)
  %170 = load %struct.gem*, %struct.gem** %2, align 8
  %171 = getelementptr inbounds %struct.gem, %struct.gem* %170, i32 0, i32 2
  %172 = load i64, i64* %171, align 8
  %173 = load i64, i64* @MAC_ADDR7, align 8
  %174 = add nsw i64 %172, %173
  %175 = call i32 @writel(i32 49664, i64 %174)
  %176 = load %struct.gem*, %struct.gem** %2, align 8
  %177 = getelementptr inbounds %struct.gem, %struct.gem* %176, i32 0, i32 2
  %178 = load i64, i64* %177, align 8
  %179 = load i64, i64* @MAC_ADDR8, align 8
  %180 = add nsw i64 %178, %179
  %181 = call i32 @writel(i32 384, i64 %180)
  %182 = load %struct.gem*, %struct.gem** %2, align 8
  %183 = getelementptr inbounds %struct.gem, %struct.gem* %182, i32 0, i32 2
  %184 = load i64, i64* %183, align 8
  %185 = load i64, i64* @MAC_AFILT0, align 8
  %186 = add nsw i64 %184, %185
  %187 = call i32 @writel(i32 0, i64 %186)
  %188 = load %struct.gem*, %struct.gem** %2, align 8
  %189 = getelementptr inbounds %struct.gem, %struct.gem* %188, i32 0, i32 2
  %190 = load i64, i64* %189, align 8
  %191 = load i64, i64* @MAC_AFILT1, align 8
  %192 = add nsw i64 %190, %191
  %193 = call i32 @writel(i32 0, i64 %192)
  %194 = load %struct.gem*, %struct.gem** %2, align 8
  %195 = getelementptr inbounds %struct.gem, %struct.gem* %194, i32 0, i32 2
  %196 = load i64, i64* %195, align 8
  %197 = load i64, i64* @MAC_AFILT2, align 8
  %198 = add nsw i64 %196, %197
  %199 = call i32 @writel(i32 0, i64 %198)
  %200 = load %struct.gem*, %struct.gem** %2, align 8
  %201 = getelementptr inbounds %struct.gem, %struct.gem* %200, i32 0, i32 2
  %202 = load i64, i64* %201, align 8
  %203 = load i64, i64* @MAC_AF21MSK, align 8
  %204 = add nsw i64 %202, %203
  %205 = call i32 @writel(i32 0, i64 %204)
  %206 = load %struct.gem*, %struct.gem** %2, align 8
  %207 = getelementptr inbounds %struct.gem, %struct.gem* %206, i32 0, i32 2
  %208 = load i64, i64* %207, align 8
  %209 = load i64, i64* @MAC_AF0MSK, align 8
  %210 = add nsw i64 %208, %209
  %211 = call i32 @writel(i32 0, i64 %210)
  %212 = load %struct.gem*, %struct.gem** %2, align 8
  %213 = call i32 @gem_setup_multicast(%struct.gem* %212)
  %214 = load %struct.gem*, %struct.gem** %2, align 8
  %215 = getelementptr inbounds %struct.gem, %struct.gem* %214, i32 0, i32 1
  store i32 %213, i32* %215, align 4
  %216 = load %struct.gem*, %struct.gem** %2, align 8
  %217 = getelementptr inbounds %struct.gem, %struct.gem* %216, i32 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = load i64, i64* @MAC_NCOLL, align 8
  %220 = add nsw i64 %218, %219
  %221 = call i32 @writel(i32 0, i64 %220)
  %222 = load %struct.gem*, %struct.gem** %2, align 8
  %223 = getelementptr inbounds %struct.gem, %struct.gem* %222, i32 0, i32 2
  %224 = load i64, i64* %223, align 8
  %225 = load i64, i64* @MAC_FASUCC, align 8
  %226 = add nsw i64 %224, %225
  %227 = call i32 @writel(i32 0, i64 %226)
  %228 = load %struct.gem*, %struct.gem** %2, align 8
  %229 = getelementptr inbounds %struct.gem, %struct.gem* %228, i32 0, i32 2
  %230 = load i64, i64* %229, align 8
  %231 = load i64, i64* @MAC_ECOLL, align 8
  %232 = add nsw i64 %230, %231
  %233 = call i32 @writel(i32 0, i64 %232)
  %234 = load %struct.gem*, %struct.gem** %2, align 8
  %235 = getelementptr inbounds %struct.gem, %struct.gem* %234, i32 0, i32 2
  %236 = load i64, i64* %235, align 8
  %237 = load i64, i64* @MAC_LCOLL, align 8
  %238 = add nsw i64 %236, %237
  %239 = call i32 @writel(i32 0, i64 %238)
  %240 = load %struct.gem*, %struct.gem** %2, align 8
  %241 = getelementptr inbounds %struct.gem, %struct.gem* %240, i32 0, i32 2
  %242 = load i64, i64* %241, align 8
  %243 = load i64, i64* @MAC_DTIMER, align 8
  %244 = add nsw i64 %242, %243
  %245 = call i32 @writel(i32 0, i64 %244)
  %246 = load %struct.gem*, %struct.gem** %2, align 8
  %247 = getelementptr inbounds %struct.gem, %struct.gem* %246, i32 0, i32 2
  %248 = load i64, i64* %247, align 8
  %249 = load i64, i64* @MAC_PATMPS, align 8
  %250 = add nsw i64 %248, %249
  %251 = call i32 @writel(i32 0, i64 %250)
  %252 = load %struct.gem*, %struct.gem** %2, align 8
  %253 = getelementptr inbounds %struct.gem, %struct.gem* %252, i32 0, i32 2
  %254 = load i64, i64* %253, align 8
  %255 = load i64, i64* @MAC_RFCTR, align 8
  %256 = add nsw i64 %254, %255
  %257 = call i32 @writel(i32 0, i64 %256)
  %258 = load %struct.gem*, %struct.gem** %2, align 8
  %259 = getelementptr inbounds %struct.gem, %struct.gem* %258, i32 0, i32 2
  %260 = load i64, i64* %259, align 8
  %261 = load i64, i64* @MAC_LERR, align 8
  %262 = add nsw i64 %260, %261
  %263 = call i32 @writel(i32 0, i64 %262)
  %264 = load %struct.gem*, %struct.gem** %2, align 8
  %265 = getelementptr inbounds %struct.gem, %struct.gem* %264, i32 0, i32 2
  %266 = load i64, i64* %265, align 8
  %267 = load i64, i64* @MAC_AERR, align 8
  %268 = add nsw i64 %266, %267
  %269 = call i32 @writel(i32 0, i64 %268)
  %270 = load %struct.gem*, %struct.gem** %2, align 8
  %271 = getelementptr inbounds %struct.gem, %struct.gem* %270, i32 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = load i64, i64* @MAC_FCSERR, align 8
  %274 = add nsw i64 %272, %273
  %275 = call i32 @writel(i32 0, i64 %274)
  %276 = load %struct.gem*, %struct.gem** %2, align 8
  %277 = getelementptr inbounds %struct.gem, %struct.gem* %276, i32 0, i32 2
  %278 = load i64, i64* %277, align 8
  %279 = load i64, i64* @MAC_RXCVERR, align 8
  %280 = add nsw i64 %278, %279
  %281 = call i32 @writel(i32 0, i64 %280)
  %282 = load %struct.gem*, %struct.gem** %2, align 8
  %283 = getelementptr inbounds %struct.gem, %struct.gem* %282, i32 0, i32 2
  %284 = load i64, i64* %283, align 8
  %285 = load i64, i64* @MAC_TXCFG, align 8
  %286 = add nsw i64 %284, %285
  %287 = call i32 @writel(i32 0, i64 %286)
  %288 = load %struct.gem*, %struct.gem** %2, align 8
  %289 = getelementptr inbounds %struct.gem, %struct.gem* %288, i32 0, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = load %struct.gem*, %struct.gem** %2, align 8
  %292 = getelementptr inbounds %struct.gem, %struct.gem* %291, i32 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = load i64, i64* @MAC_RXCFG, align 8
  %295 = add nsw i64 %293, %294
  %296 = call i32 @writel(i32 %290, i64 %295)
  %297 = load %struct.gem*, %struct.gem** %2, align 8
  %298 = getelementptr inbounds %struct.gem, %struct.gem* %297, i32 0, i32 2
  %299 = load i64, i64* %298, align 8
  %300 = load i64, i64* @MAC_MCCFG, align 8
  %301 = add nsw i64 %299, %300
  %302 = call i32 @writel(i32 0, i64 %301)
  %303 = load %struct.gem*, %struct.gem** %2, align 8
  %304 = getelementptr inbounds %struct.gem, %struct.gem* %303, i32 0, i32 2
  %305 = load i64, i64* %304, align 8
  %306 = load i64, i64* @MAC_XIFCFG, align 8
  %307 = add nsw i64 %305, %306
  %308 = call i32 @writel(i32 0, i64 %307)
  %309 = load i32, i32* @MAC_TXSTAT_XMIT, align 4
  %310 = load %struct.gem*, %struct.gem** %2, align 8
  %311 = getelementptr inbounds %struct.gem, %struct.gem* %310, i32 0, i32 2
  %312 = load i64, i64* %311, align 8
  %313 = load i64, i64* @MAC_TXMASK, align 8
  %314 = add nsw i64 %312, %313
  %315 = call i32 @writel(i32 %309, i64 %314)
  %316 = load i32, i32* @MAC_RXSTAT_RCV, align 4
  %317 = load %struct.gem*, %struct.gem** %2, align 8
  %318 = getelementptr inbounds %struct.gem, %struct.gem* %317, i32 0, i32 2
  %319 = load i64, i64* %318, align 8
  %320 = load i64, i64* @MAC_RXMASK, align 8
  %321 = add nsw i64 %319, %320
  %322 = call i32 @writel(i32 %316, i64 %321)
  %323 = load %struct.gem*, %struct.gem** %2, align 8
  %324 = getelementptr inbounds %struct.gem, %struct.gem* %323, i32 0, i32 2
  %325 = load i64, i64* %324, align 8
  %326 = load i64, i64* @MAC_MCMASK, align 8
  %327 = add nsw i64 %325, %326
  %328 = call i32 @writel(i32 -1, i64 %327)
  %329 = load %struct.gem*, %struct.gem** %2, align 8
  %330 = getelementptr inbounds %struct.gem, %struct.gem* %329, i32 0, i32 3
  %331 = load i64, i64* %330, align 8
  %332 = icmp ne i64 %331, 0
  br i1 %332, label %333, label %340

333:                                              ; preds = %1
  %334 = load %struct.gem*, %struct.gem** %2, align 8
  %335 = getelementptr inbounds %struct.gem, %struct.gem* %334, i32 0, i32 2
  %336 = load i64, i64* %335, align 8
  %337 = load i64, i64* @WOL_WAKECSR, align 8
  %338 = add nsw i64 %336, %337
  %339 = call i32 @writel(i32 0, i64 %338)
  br label %340

340:                                              ; preds = %333, %1
  ret void
}

declare dso_local i32 @writel(i32, i64) #1

declare dso_local i32 @gem_setup_multicast(%struct.gem*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
