; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/ssb/extr_pci.c_sprom_extract_r458.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/ssb/extr_pci.c_sprom_extract_r458.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssb_sprom = type { i32 }

@txpid2g = common dso_local global i32* null, align 8
@SSB_SPROM4_TXPID2G01 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G0 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G0_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G1 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G1_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G23 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G2 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G2_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G3 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID2G3_SHIFT = common dso_local global i32 0, align 4
@txpid5gl = common dso_local global i32* null, align 8
@SSB_SPROM4_TXPID5GL01 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL0 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL0_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL1 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL1_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL23 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL2 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL2_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL3 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GL3_SHIFT = common dso_local global i32 0, align 4
@txpid5g = common dso_local global i32* null, align 8
@SSB_SPROM4_TXPID5G01 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G0 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G0_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G1 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G1_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G23 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G2 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G2_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G3 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5G3_SHIFT = common dso_local global i32 0, align 4
@txpid5gh = common dso_local global i32* null, align 8
@SSB_SPROM4_TXPID5GH01 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH0 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH0_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH1 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH1_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH23 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH2 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH2_SHIFT = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH3 = common dso_local global i32 0, align 4
@SSB_SPROM4_TXPID5GH3_SHIFT = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.ssb_sprom*, i32*)* @sprom_extract_r458 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sprom_extract_r458(%struct.ssb_sprom* %0, i32* %1) #0 {
  %3 = alloca %struct.ssb_sprom*, align 8
  %4 = alloca i32*, align 8
  store %struct.ssb_sprom* %0, %struct.ssb_sprom** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load i32*, i32** @txpid2g, align 8
  %6 = getelementptr inbounds i32, i32* %5, i64 0
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* @SSB_SPROM4_TXPID2G01, align 4
  %9 = load i32, i32* @SSB_SPROM4_TXPID2G0, align 4
  %10 = load i32, i32* @SSB_SPROM4_TXPID2G0_SHIFT, align 4
  %11 = call i32 @SPEX(i32 %7, i32 %8, i32 %9, i32 %10)
  %12 = load i32*, i32** @txpid2g, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* @SSB_SPROM4_TXPID2G01, align 4
  %16 = load i32, i32* @SSB_SPROM4_TXPID2G1, align 4
  %17 = load i32, i32* @SSB_SPROM4_TXPID2G1_SHIFT, align 4
  %18 = call i32 @SPEX(i32 %14, i32 %15, i32 %16, i32 %17)
  %19 = load i32*, i32** @txpid2g, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 2
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* @SSB_SPROM4_TXPID2G23, align 4
  %23 = load i32, i32* @SSB_SPROM4_TXPID2G2, align 4
  %24 = load i32, i32* @SSB_SPROM4_TXPID2G2_SHIFT, align 4
  %25 = call i32 @SPEX(i32 %21, i32 %22, i32 %23, i32 %24)
  %26 = load i32*, i32** @txpid2g, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = load i32, i32* @SSB_SPROM4_TXPID2G23, align 4
  %30 = load i32, i32* @SSB_SPROM4_TXPID2G3, align 4
  %31 = load i32, i32* @SSB_SPROM4_TXPID2G3_SHIFT, align 4
  %32 = call i32 @SPEX(i32 %28, i32 %29, i32 %30, i32 %31)
  %33 = load i32*, i32** @txpid5gl, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = load i32, i32* @SSB_SPROM4_TXPID5GL01, align 4
  %37 = load i32, i32* @SSB_SPROM4_TXPID5GL0, align 4
  %38 = load i32, i32* @SSB_SPROM4_TXPID5GL0_SHIFT, align 4
  %39 = call i32 @SPEX(i32 %35, i32 %36, i32 %37, i32 %38)
  %40 = load i32*, i32** @txpid5gl, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* @SSB_SPROM4_TXPID5GL01, align 4
  %44 = load i32, i32* @SSB_SPROM4_TXPID5GL1, align 4
  %45 = load i32, i32* @SSB_SPROM4_TXPID5GL1_SHIFT, align 4
  %46 = call i32 @SPEX(i32 %42, i32 %43, i32 %44, i32 %45)
  %47 = load i32*, i32** @txpid5gl, align 8
  %48 = getelementptr inbounds i32, i32* %47, i64 2
  %49 = load i32, i32* %48, align 4
  %50 = load i32, i32* @SSB_SPROM4_TXPID5GL23, align 4
  %51 = load i32, i32* @SSB_SPROM4_TXPID5GL2, align 4
  %52 = load i32, i32* @SSB_SPROM4_TXPID5GL2_SHIFT, align 4
  %53 = call i32 @SPEX(i32 %49, i32 %50, i32 %51, i32 %52)
  %54 = load i32*, i32** @txpid5gl, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 3
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* @SSB_SPROM4_TXPID5GL23, align 4
  %58 = load i32, i32* @SSB_SPROM4_TXPID5GL3, align 4
  %59 = load i32, i32* @SSB_SPROM4_TXPID5GL3_SHIFT, align 4
  %60 = call i32 @SPEX(i32 %56, i32 %57, i32 %58, i32 %59)
  %61 = load i32*, i32** @txpid5g, align 8
  %62 = getelementptr inbounds i32, i32* %61, i64 0
  %63 = load i32, i32* %62, align 4
  %64 = load i32, i32* @SSB_SPROM4_TXPID5G01, align 4
  %65 = load i32, i32* @SSB_SPROM4_TXPID5G0, align 4
  %66 = load i32, i32* @SSB_SPROM4_TXPID5G0_SHIFT, align 4
  %67 = call i32 @SPEX(i32 %63, i32 %64, i32 %65, i32 %66)
  %68 = load i32*, i32** @txpid5g, align 8
  %69 = getelementptr inbounds i32, i32* %68, i64 1
  %70 = load i32, i32* %69, align 4
  %71 = load i32, i32* @SSB_SPROM4_TXPID5G01, align 4
  %72 = load i32, i32* @SSB_SPROM4_TXPID5G1, align 4
  %73 = load i32, i32* @SSB_SPROM4_TXPID5G1_SHIFT, align 4
  %74 = call i32 @SPEX(i32 %70, i32 %71, i32 %72, i32 %73)
  %75 = load i32*, i32** @txpid5g, align 8
  %76 = getelementptr inbounds i32, i32* %75, i64 2
  %77 = load i32, i32* %76, align 4
  %78 = load i32, i32* @SSB_SPROM4_TXPID5G23, align 4
  %79 = load i32, i32* @SSB_SPROM4_TXPID5G2, align 4
  %80 = load i32, i32* @SSB_SPROM4_TXPID5G2_SHIFT, align 4
  %81 = call i32 @SPEX(i32 %77, i32 %78, i32 %79, i32 %80)
  %82 = load i32*, i32** @txpid5g, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 3
  %84 = load i32, i32* %83, align 4
  %85 = load i32, i32* @SSB_SPROM4_TXPID5G23, align 4
  %86 = load i32, i32* @SSB_SPROM4_TXPID5G3, align 4
  %87 = load i32, i32* @SSB_SPROM4_TXPID5G3_SHIFT, align 4
  %88 = call i32 @SPEX(i32 %84, i32 %85, i32 %86, i32 %87)
  %89 = load i32*, i32** @txpid5gh, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 0
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* @SSB_SPROM4_TXPID5GH01, align 4
  %93 = load i32, i32* @SSB_SPROM4_TXPID5GH0, align 4
  %94 = load i32, i32* @SSB_SPROM4_TXPID5GH0_SHIFT, align 4
  %95 = call i32 @SPEX(i32 %91, i32 %92, i32 %93, i32 %94)
  %96 = load i32*, i32** @txpid5gh, align 8
  %97 = getelementptr inbounds i32, i32* %96, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = load i32, i32* @SSB_SPROM4_TXPID5GH01, align 4
  %100 = load i32, i32* @SSB_SPROM4_TXPID5GH1, align 4
  %101 = load i32, i32* @SSB_SPROM4_TXPID5GH1_SHIFT, align 4
  %102 = call i32 @SPEX(i32 %98, i32 %99, i32 %100, i32 %101)
  %103 = load i32*, i32** @txpid5gh, align 8
  %104 = getelementptr inbounds i32, i32* %103, i64 2
  %105 = load i32, i32* %104, align 4
  %106 = load i32, i32* @SSB_SPROM4_TXPID5GH23, align 4
  %107 = load i32, i32* @SSB_SPROM4_TXPID5GH2, align 4
  %108 = load i32, i32* @SSB_SPROM4_TXPID5GH2_SHIFT, align 4
  %109 = call i32 @SPEX(i32 %105, i32 %106, i32 %107, i32 %108)
  %110 = load i32*, i32** @txpid5gh, align 8
  %111 = getelementptr inbounds i32, i32* %110, i64 3
  %112 = load i32, i32* %111, align 4
  %113 = load i32, i32* @SSB_SPROM4_TXPID5GH23, align 4
  %114 = load i32, i32* @SSB_SPROM4_TXPID5GH3, align 4
  %115 = load i32, i32* @SSB_SPROM4_TXPID5GH3_SHIFT, align 4
  %116 = call i32 @SPEX(i32 %112, i32 %113, i32 %114, i32 %115)
  ret void
}

declare dso_local i32 @SPEX(i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
