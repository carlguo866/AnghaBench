; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/drivers/scsi/aic7xxx/extr_aic7xxx_pci.c_ahc_pci_intr.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/drivers/scsi/aic7xxx/extr_aic7xxx_pci.c_ahc_pci_intr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ahc_softc = type { i64, i32, i32 }

@ERROR = common dso_local global i32 0, align 4
@PCIERRSTAT = common dso_local global i32 0, align 4
@PCIR_STATUS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [43 x i8] c"%s: PCI error Interrupt at seqaddr = 0x%x\0A\00", align 1
@SEQADDR0 = common dso_local global i32 0, align 4
@SEQADDR1 = common dso_local global i32 0, align 4
@DPE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"%s: Data Parity Error Detected during address or write data phase\0A\00", align 1
@SSE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"%s: Signal System Error Detected\0A\00", align 1
@RMA = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"%s: Received a Master Abort\0A\00", align 1
@RTA = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"%s: Received a Target Abort\0A\00", align 1
@STA = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [29 x i8] c"%s: Signaled a Target Abort\0A\00", align 1
@DPR = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [51 x i8] c"%s: Data Parity Error has been reported via PERR#\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"%s: Latched PCIERR interrupt with no status bits set\0A\00", align 1
@CLRINT = common dso_local global i32 0, align 4
@CLRPARERR = common dso_local global i32 0, align 4
@AHC_PCI_TARGET_PERR_THRESH = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [302 x i8] c"%s: WARNING WARNING WARNING WARNING\0A%s: Too many PCI parity errors observed as a target.\0A%s: Some device on this bus is generating bad parity.\0A%s: This is an error *observed by*, not *generated by*, this controller.\0A%s: PCI parity error checking has been disabled.\0A%s: WARNING WARNING WARNING WARNING\0A\00", align 1
@FAILDIS = common dso_local global i32 0, align 4
@SEQCTL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.ahc_softc*)* @ahc_pci_intr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ahc_pci_intr(%struct.ahc_softc* %0) #0 {
  %2 = alloca %struct.ahc_softc*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.ahc_softc* %0, %struct.ahc_softc** %2, align 8
  %5 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %6 = load i32, i32* @ERROR, align 4
  %7 = call i32 @ahc_inb(%struct.ahc_softc* %5, i32 %6)
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  %9 = load i32, i32* @PCIERRSTAT, align 4
  %10 = and i32 %8, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  br label %153

13:                                               ; preds = %1
  %14 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %15 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %14, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = load i64, i64* @PCIR_STATUS, align 8
  %18 = add nsw i64 %17, 1
  %19 = call i32 @ahc_pci_read_config(i32 %16, i64 %18, i32 1)
  store i32 %19, i32* %4, align 4
  %20 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %21 = call i8* @ahc_name(%struct.ahc_softc* %20)
  %22 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %23 = load i32, i32* @SEQADDR0, align 4
  %24 = call i32 @ahc_inb(%struct.ahc_softc* %22, i32 %23)
  %25 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %26 = load i32, i32* @SEQADDR1, align 4
  %27 = call i32 @ahc_inb(%struct.ahc_softc* %25, i32 %26)
  %28 = shl i32 %27, 8
  %29 = or i32 %24, %28
  %30 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* %21, i32 %29)
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* @DPE, align 4
  %33 = and i32 %31, %32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %43

35:                                               ; preds = %13
  %36 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %37 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = add nsw i64 %38, 1
  store i64 %39, i64* %37, align 8
  %40 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %41 = call i8* @ahc_name(%struct.ahc_softc* %40)
  %42 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i8* %41)
  br label %43

43:                                               ; preds = %35, %13
  %44 = load i32, i32* %4, align 4
  %45 = load i32, i32* @SSE, align 4
  %46 = and i32 %44, %45
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %50 = call i8* @ahc_name(%struct.ahc_softc* %49)
  %51 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* %50)
  br label %52

52:                                               ; preds = %48, %43
  %53 = load i32, i32* %4, align 4
  %54 = load i32, i32* @RMA, align 4
  %55 = and i32 %53, %54
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %61

57:                                               ; preds = %52
  %58 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %59 = call i8* @ahc_name(%struct.ahc_softc* %58)
  %60 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %59)
  br label %61

61:                                               ; preds = %57, %52
  %62 = load i32, i32* %4, align 4
  %63 = load i32, i32* @RTA, align 4
  %64 = and i32 %62, %63
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %61
  %67 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %68 = call i8* @ahc_name(%struct.ahc_softc* %67)
  %69 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %68)
  br label %70

70:                                               ; preds = %66, %61
  %71 = load i32, i32* %4, align 4
  %72 = load i32, i32* @STA, align 4
  %73 = and i32 %71, %72
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %70
  %76 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %77 = call i8* @ahc_name(%struct.ahc_softc* %76)
  %78 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8* %77)
  br label %79

79:                                               ; preds = %75, %70
  %80 = load i32, i32* %4, align 4
  %81 = load i32, i32* @DPR, align 4
  %82 = and i32 %80, %81
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %79
  %85 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %86 = call i8* @ahc_name(%struct.ahc_softc* %85)
  %87 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0), i8* %86)
  br label %88

88:                                               ; preds = %84, %79
  %89 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %90 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %89, i32 0, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = load i64, i64* @PCIR_STATUS, align 8
  %93 = add nsw i64 %92, 1
  %94 = load i32, i32* %4, align 4
  %95 = call i32 @ahc_pci_write_config(i32 %91, i64 %93, i32 %94, i32 1)
  %96 = load i32, i32* %4, align 4
  %97 = load i32, i32* @DPE, align 4
  %98 = load i32, i32* @SSE, align 4
  %99 = or i32 %97, %98
  %100 = load i32, i32* @RMA, align 4
  %101 = or i32 %99, %100
  %102 = load i32, i32* @RTA, align 4
  %103 = or i32 %101, %102
  %104 = load i32, i32* @STA, align 4
  %105 = or i32 %103, %104
  %106 = load i32, i32* @DPR, align 4
  %107 = or i32 %105, %106
  %108 = and i32 %96, %107
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %114

110:                                              ; preds = %88
  %111 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %112 = call i8* @ahc_name(%struct.ahc_softc* %111)
  %113 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0), i8* %112)
  br label %119

114:                                              ; preds = %88
  %115 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %116 = load i32, i32* @CLRINT, align 4
  %117 = load i32, i32* @CLRPARERR, align 4
  %118 = call i32 @ahc_outb(%struct.ahc_softc* %115, i32 %116, i32 %117)
  br label %119

119:                                              ; preds = %114, %110
  %120 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %121 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %120, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = load i64, i64* @AHC_PCI_TARGET_PERR_THRESH, align 8
  %124 = icmp sgt i64 %122, %123
  br i1 %124, label %125, label %150

125:                                              ; preds = %119
  %126 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %127 = call i8* @ahc_name(%struct.ahc_softc* %126)
  %128 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %129 = call i8* @ahc_name(%struct.ahc_softc* %128)
  %130 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %131 = call i8* @ahc_name(%struct.ahc_softc* %130)
  %132 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %133 = call i8* @ahc_name(%struct.ahc_softc* %132)
  %134 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %135 = call i8* @ahc_name(%struct.ahc_softc* %134)
  %136 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %137 = call i8* @ahc_name(%struct.ahc_softc* %136)
  %138 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([302 x i8], [302 x i8]* @.str.8, i64 0, i64 0), i8* %127, i8* %129, i8* %131, i8* %133, i8* %135, i8* %137)
  %139 = load i32, i32* @FAILDIS, align 4
  %140 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %141 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %140, i32 0, i32 1
  %142 = load i32, i32* %141, align 8
  %143 = or i32 %142, %139
  store i32 %143, i32* %141, align 8
  %144 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %145 = load i32, i32* @SEQCTL, align 4
  %146 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %147 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %146, i32 0, i32 1
  %148 = load i32, i32* %147, align 8
  %149 = call i32 @ahc_outb(%struct.ahc_softc* %144, i32 %145, i32 %148)
  br label %150

150:                                              ; preds = %125, %119
  %151 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %152 = call i32 @ahc_unpause(%struct.ahc_softc* %151)
  br label %153

153:                                              ; preds = %150, %12
  ret void
}

declare dso_local i32 @ahc_inb(%struct.ahc_softc*, i32) #1

declare dso_local i32 @ahc_pci_read_config(i32, i64, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

declare dso_local i8* @ahc_name(%struct.ahc_softc*) #1

declare dso_local i32 @ahc_pci_write_config(i32, i64, i32, i32) #1

declare dso_local i32 @ahc_outb(%struct.ahc_softc*, i32, i32) #1

declare dso_local i32 @ahc_unpause(%struct.ahc_softc*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
