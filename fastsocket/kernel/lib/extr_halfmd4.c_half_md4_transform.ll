; ModuleID = '/home/carl/AnghaBench/fastsocket/kernel/lib/extr_halfmd4.c_half_md4_transform.c'
source_filename = "/home/carl/AnghaBench/fastsocket/kernel/lib/extr_halfmd4.c_half_md4_transform.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@F = common dso_local global i32 0, align 4
@K1 = common dso_local global i64 0, align 8
@G = common dso_local global i32 0, align 4
@K2 = common dso_local global i64 0, align 8
@H = common dso_local global i32 0, align 4
@K3 = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @half_md4_transform(i64* %0, i64* %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  %9 = load i64*, i64** %3, align 8
  %10 = getelementptr inbounds i64, i64* %9, i64 0
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %5, align 8
  %12 = load i64*, i64** %3, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %6, align 8
  %15 = load i64*, i64** %3, align 8
  %16 = getelementptr inbounds i64, i64* %15, i64 2
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %7, align 8
  %18 = load i64*, i64** %3, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 3
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %8, align 8
  %21 = load i32, i32* @F, align 4
  %22 = load i64, i64* %5, align 8
  %23 = load i64, i64* %6, align 8
  %24 = load i64, i64* %7, align 8
  %25 = load i64, i64* %8, align 8
  %26 = load i64*, i64** %4, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = load i64, i64* @K1, align 8
  %30 = add nsw i64 %28, %29
  %31 = call i32 @ROUND(i32 %21, i64 %22, i64 %23, i64 %24, i64 %25, i64 %30, i32 3)
  %32 = load i32, i32* @F, align 4
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %5, align 8
  %35 = load i64, i64* %6, align 8
  %36 = load i64, i64* %7, align 8
  %37 = load i64*, i64** %4, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 1
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* @K1, align 8
  %41 = add nsw i64 %39, %40
  %42 = call i32 @ROUND(i32 %32, i64 %33, i64 %34, i64 %35, i64 %36, i64 %41, i32 7)
  %43 = load i32, i32* @F, align 4
  %44 = load i64, i64* %7, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %5, align 8
  %47 = load i64, i64* %6, align 8
  %48 = load i64*, i64** %4, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 2
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* @K1, align 8
  %52 = add nsw i64 %50, %51
  %53 = call i32 @ROUND(i32 %43, i64 %44, i64 %45, i64 %46, i64 %47, i64 %52, i32 11)
  %54 = load i32, i32* @F, align 4
  %55 = load i64, i64* %6, align 8
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* %8, align 8
  %58 = load i64, i64* %5, align 8
  %59 = load i64*, i64** %4, align 8
  %60 = getelementptr inbounds i64, i64* %59, i64 3
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* @K1, align 8
  %63 = add nsw i64 %61, %62
  %64 = call i32 @ROUND(i32 %54, i64 %55, i64 %56, i64 %57, i64 %58, i64 %63, i32 19)
  %65 = load i32, i32* @F, align 4
  %66 = load i64, i64* %5, align 8
  %67 = load i64, i64* %6, align 8
  %68 = load i64, i64* %7, align 8
  %69 = load i64, i64* %8, align 8
  %70 = load i64*, i64** %4, align 8
  %71 = getelementptr inbounds i64, i64* %70, i64 4
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* @K1, align 8
  %74 = add nsw i64 %72, %73
  %75 = call i32 @ROUND(i32 %65, i64 %66, i64 %67, i64 %68, i64 %69, i64 %74, i32 3)
  %76 = load i32, i32* @F, align 4
  %77 = load i64, i64* %8, align 8
  %78 = load i64, i64* %5, align 8
  %79 = load i64, i64* %6, align 8
  %80 = load i64, i64* %7, align 8
  %81 = load i64*, i64** %4, align 8
  %82 = getelementptr inbounds i64, i64* %81, i64 5
  %83 = load i64, i64* %82, align 8
  %84 = load i64, i64* @K1, align 8
  %85 = add nsw i64 %83, %84
  %86 = call i32 @ROUND(i32 %76, i64 %77, i64 %78, i64 %79, i64 %80, i64 %85, i32 7)
  %87 = load i32, i32* @F, align 4
  %88 = load i64, i64* %7, align 8
  %89 = load i64, i64* %8, align 8
  %90 = load i64, i64* %5, align 8
  %91 = load i64, i64* %6, align 8
  %92 = load i64*, i64** %4, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 6
  %94 = load i64, i64* %93, align 8
  %95 = load i64, i64* @K1, align 8
  %96 = add nsw i64 %94, %95
  %97 = call i32 @ROUND(i32 %87, i64 %88, i64 %89, i64 %90, i64 %91, i64 %96, i32 11)
  %98 = load i32, i32* @F, align 4
  %99 = load i64, i64* %6, align 8
  %100 = load i64, i64* %7, align 8
  %101 = load i64, i64* %8, align 8
  %102 = load i64, i64* %5, align 8
  %103 = load i64*, i64** %4, align 8
  %104 = getelementptr inbounds i64, i64* %103, i64 7
  %105 = load i64, i64* %104, align 8
  %106 = load i64, i64* @K1, align 8
  %107 = add nsw i64 %105, %106
  %108 = call i32 @ROUND(i32 %98, i64 %99, i64 %100, i64 %101, i64 %102, i64 %107, i32 19)
  %109 = load i32, i32* @G, align 4
  %110 = load i64, i64* %5, align 8
  %111 = load i64, i64* %6, align 8
  %112 = load i64, i64* %7, align 8
  %113 = load i64, i64* %8, align 8
  %114 = load i64*, i64** %4, align 8
  %115 = getelementptr inbounds i64, i64* %114, i64 1
  %116 = load i64, i64* %115, align 8
  %117 = load i64, i64* @K2, align 8
  %118 = add nsw i64 %116, %117
  %119 = call i32 @ROUND(i32 %109, i64 %110, i64 %111, i64 %112, i64 %113, i64 %118, i32 3)
  %120 = load i32, i32* @G, align 4
  %121 = load i64, i64* %8, align 8
  %122 = load i64, i64* %5, align 8
  %123 = load i64, i64* %6, align 8
  %124 = load i64, i64* %7, align 8
  %125 = load i64*, i64** %4, align 8
  %126 = getelementptr inbounds i64, i64* %125, i64 3
  %127 = load i64, i64* %126, align 8
  %128 = load i64, i64* @K2, align 8
  %129 = add nsw i64 %127, %128
  %130 = call i32 @ROUND(i32 %120, i64 %121, i64 %122, i64 %123, i64 %124, i64 %129, i32 5)
  %131 = load i32, i32* @G, align 4
  %132 = load i64, i64* %7, align 8
  %133 = load i64, i64* %8, align 8
  %134 = load i64, i64* %5, align 8
  %135 = load i64, i64* %6, align 8
  %136 = load i64*, i64** %4, align 8
  %137 = getelementptr inbounds i64, i64* %136, i64 5
  %138 = load i64, i64* %137, align 8
  %139 = load i64, i64* @K2, align 8
  %140 = add nsw i64 %138, %139
  %141 = call i32 @ROUND(i32 %131, i64 %132, i64 %133, i64 %134, i64 %135, i64 %140, i32 9)
  %142 = load i32, i32* @G, align 4
  %143 = load i64, i64* %6, align 8
  %144 = load i64, i64* %7, align 8
  %145 = load i64, i64* %8, align 8
  %146 = load i64, i64* %5, align 8
  %147 = load i64*, i64** %4, align 8
  %148 = getelementptr inbounds i64, i64* %147, i64 7
  %149 = load i64, i64* %148, align 8
  %150 = load i64, i64* @K2, align 8
  %151 = add nsw i64 %149, %150
  %152 = call i32 @ROUND(i32 %142, i64 %143, i64 %144, i64 %145, i64 %146, i64 %151, i32 13)
  %153 = load i32, i32* @G, align 4
  %154 = load i64, i64* %5, align 8
  %155 = load i64, i64* %6, align 8
  %156 = load i64, i64* %7, align 8
  %157 = load i64, i64* %8, align 8
  %158 = load i64*, i64** %4, align 8
  %159 = getelementptr inbounds i64, i64* %158, i64 0
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* @K2, align 8
  %162 = add nsw i64 %160, %161
  %163 = call i32 @ROUND(i32 %153, i64 %154, i64 %155, i64 %156, i64 %157, i64 %162, i32 3)
  %164 = load i32, i32* @G, align 4
  %165 = load i64, i64* %8, align 8
  %166 = load i64, i64* %5, align 8
  %167 = load i64, i64* %6, align 8
  %168 = load i64, i64* %7, align 8
  %169 = load i64*, i64** %4, align 8
  %170 = getelementptr inbounds i64, i64* %169, i64 2
  %171 = load i64, i64* %170, align 8
  %172 = load i64, i64* @K2, align 8
  %173 = add nsw i64 %171, %172
  %174 = call i32 @ROUND(i32 %164, i64 %165, i64 %166, i64 %167, i64 %168, i64 %173, i32 5)
  %175 = load i32, i32* @G, align 4
  %176 = load i64, i64* %7, align 8
  %177 = load i64, i64* %8, align 8
  %178 = load i64, i64* %5, align 8
  %179 = load i64, i64* %6, align 8
  %180 = load i64*, i64** %4, align 8
  %181 = getelementptr inbounds i64, i64* %180, i64 4
  %182 = load i64, i64* %181, align 8
  %183 = load i64, i64* @K2, align 8
  %184 = add nsw i64 %182, %183
  %185 = call i32 @ROUND(i32 %175, i64 %176, i64 %177, i64 %178, i64 %179, i64 %184, i32 9)
  %186 = load i32, i32* @G, align 4
  %187 = load i64, i64* %6, align 8
  %188 = load i64, i64* %7, align 8
  %189 = load i64, i64* %8, align 8
  %190 = load i64, i64* %5, align 8
  %191 = load i64*, i64** %4, align 8
  %192 = getelementptr inbounds i64, i64* %191, i64 6
  %193 = load i64, i64* %192, align 8
  %194 = load i64, i64* @K2, align 8
  %195 = add nsw i64 %193, %194
  %196 = call i32 @ROUND(i32 %186, i64 %187, i64 %188, i64 %189, i64 %190, i64 %195, i32 13)
  %197 = load i32, i32* @H, align 4
  %198 = load i64, i64* %5, align 8
  %199 = load i64, i64* %6, align 8
  %200 = load i64, i64* %7, align 8
  %201 = load i64, i64* %8, align 8
  %202 = load i64*, i64** %4, align 8
  %203 = getelementptr inbounds i64, i64* %202, i64 3
  %204 = load i64, i64* %203, align 8
  %205 = load i64, i64* @K3, align 8
  %206 = add nsw i64 %204, %205
  %207 = call i32 @ROUND(i32 %197, i64 %198, i64 %199, i64 %200, i64 %201, i64 %206, i32 3)
  %208 = load i32, i32* @H, align 4
  %209 = load i64, i64* %8, align 8
  %210 = load i64, i64* %5, align 8
  %211 = load i64, i64* %6, align 8
  %212 = load i64, i64* %7, align 8
  %213 = load i64*, i64** %4, align 8
  %214 = getelementptr inbounds i64, i64* %213, i64 7
  %215 = load i64, i64* %214, align 8
  %216 = load i64, i64* @K3, align 8
  %217 = add nsw i64 %215, %216
  %218 = call i32 @ROUND(i32 %208, i64 %209, i64 %210, i64 %211, i64 %212, i64 %217, i32 9)
  %219 = load i32, i32* @H, align 4
  %220 = load i64, i64* %7, align 8
  %221 = load i64, i64* %8, align 8
  %222 = load i64, i64* %5, align 8
  %223 = load i64, i64* %6, align 8
  %224 = load i64*, i64** %4, align 8
  %225 = getelementptr inbounds i64, i64* %224, i64 2
  %226 = load i64, i64* %225, align 8
  %227 = load i64, i64* @K3, align 8
  %228 = add nsw i64 %226, %227
  %229 = call i32 @ROUND(i32 %219, i64 %220, i64 %221, i64 %222, i64 %223, i64 %228, i32 11)
  %230 = load i32, i32* @H, align 4
  %231 = load i64, i64* %6, align 8
  %232 = load i64, i64* %7, align 8
  %233 = load i64, i64* %8, align 8
  %234 = load i64, i64* %5, align 8
  %235 = load i64*, i64** %4, align 8
  %236 = getelementptr inbounds i64, i64* %235, i64 6
  %237 = load i64, i64* %236, align 8
  %238 = load i64, i64* @K3, align 8
  %239 = add nsw i64 %237, %238
  %240 = call i32 @ROUND(i32 %230, i64 %231, i64 %232, i64 %233, i64 %234, i64 %239, i32 15)
  %241 = load i32, i32* @H, align 4
  %242 = load i64, i64* %5, align 8
  %243 = load i64, i64* %6, align 8
  %244 = load i64, i64* %7, align 8
  %245 = load i64, i64* %8, align 8
  %246 = load i64*, i64** %4, align 8
  %247 = getelementptr inbounds i64, i64* %246, i64 1
  %248 = load i64, i64* %247, align 8
  %249 = load i64, i64* @K3, align 8
  %250 = add nsw i64 %248, %249
  %251 = call i32 @ROUND(i32 %241, i64 %242, i64 %243, i64 %244, i64 %245, i64 %250, i32 3)
  %252 = load i32, i32* @H, align 4
  %253 = load i64, i64* %8, align 8
  %254 = load i64, i64* %5, align 8
  %255 = load i64, i64* %6, align 8
  %256 = load i64, i64* %7, align 8
  %257 = load i64*, i64** %4, align 8
  %258 = getelementptr inbounds i64, i64* %257, i64 5
  %259 = load i64, i64* %258, align 8
  %260 = load i64, i64* @K3, align 8
  %261 = add nsw i64 %259, %260
  %262 = call i32 @ROUND(i32 %252, i64 %253, i64 %254, i64 %255, i64 %256, i64 %261, i32 9)
  %263 = load i32, i32* @H, align 4
  %264 = load i64, i64* %7, align 8
  %265 = load i64, i64* %8, align 8
  %266 = load i64, i64* %5, align 8
  %267 = load i64, i64* %6, align 8
  %268 = load i64*, i64** %4, align 8
  %269 = getelementptr inbounds i64, i64* %268, i64 0
  %270 = load i64, i64* %269, align 8
  %271 = load i64, i64* @K3, align 8
  %272 = add nsw i64 %270, %271
  %273 = call i32 @ROUND(i32 %263, i64 %264, i64 %265, i64 %266, i64 %267, i64 %272, i32 11)
  %274 = load i32, i32* @H, align 4
  %275 = load i64, i64* %6, align 8
  %276 = load i64, i64* %7, align 8
  %277 = load i64, i64* %8, align 8
  %278 = load i64, i64* %5, align 8
  %279 = load i64*, i64** %4, align 8
  %280 = getelementptr inbounds i64, i64* %279, i64 4
  %281 = load i64, i64* %280, align 8
  %282 = load i64, i64* @K3, align 8
  %283 = add nsw i64 %281, %282
  %284 = call i32 @ROUND(i32 %274, i64 %275, i64 %276, i64 %277, i64 %278, i64 %283, i32 15)
  %285 = load i64, i64* %5, align 8
  %286 = load i64*, i64** %3, align 8
  %287 = getelementptr inbounds i64, i64* %286, i64 0
  %288 = load i64, i64* %287, align 8
  %289 = add nsw i64 %288, %285
  store i64 %289, i64* %287, align 8
  %290 = load i64, i64* %6, align 8
  %291 = load i64*, i64** %3, align 8
  %292 = getelementptr inbounds i64, i64* %291, i64 1
  %293 = load i64, i64* %292, align 8
  %294 = add nsw i64 %293, %290
  store i64 %294, i64* %292, align 8
  %295 = load i64, i64* %7, align 8
  %296 = load i64*, i64** %3, align 8
  %297 = getelementptr inbounds i64, i64* %296, i64 2
  %298 = load i64, i64* %297, align 8
  %299 = add nsw i64 %298, %295
  store i64 %299, i64* %297, align 8
  %300 = load i64, i64* %8, align 8
  %301 = load i64*, i64** %3, align 8
  %302 = getelementptr inbounds i64, i64* %301, i64 3
  %303 = load i64, i64* %302, align 8
  %304 = add nsw i64 %303, %300
  store i64 %304, i64* %302, align 8
  %305 = load i64*, i64** %3, align 8
  %306 = getelementptr inbounds i64, i64* %305, i64 1
  %307 = load i64, i64* %306, align 8
  ret i64 %307
}

declare dso_local i32 @ROUND(i32, i64, i64, i64, i64, i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
