; ModuleID = '/home/carl/AnghaBench/systemd/src/test/extr_test-parse-util.c_test_parse_size.c'
source_filename = "/home/carl/AnghaBench/systemd/src/test/extr_test-parse-util.c_test_parse_size.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@EINVAL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"111\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"111.4\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c" 112 B\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" 112.6 B\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"3.5 K\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"3. K\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"3.0 K\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"3. 0 K\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c" 4 M 11.5K\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"3B3.5G\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"3.5G3B\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"3.5G 4B\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"3B3G4T\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"4T3G3B\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c" 4 T 3 G 3 B\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"12P\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"12P12P\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"3E 2P\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"12X\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"12.5X\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"12.5e3\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"1024E\00", align 1
@ERANGE = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"-1024E\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"-1024P\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c"-10B 20K\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @test_parse_size to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @test_parse_size() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 @parse_size(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 1024, i32* %1)
  %3 = load i32, i32* @EINVAL, align 4
  %4 = sub nsw i32 0, %3
  %5 = icmp eq i32 %2, %4
  %6 = zext i1 %5 to i32
  %7 = call i32 @assert_se(i32 %6)
  %8 = call i32 @parse_size(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 1024, i32* %1)
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i32
  %11 = call i32 @assert_se(i32 %10)
  %12 = load i32, i32* %1, align 4
  %13 = icmp eq i32 %12, 111
  %14 = zext i1 %13 to i32
  %15 = call i32 @assert_se(i32 %14)
  %16 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 1024, i32* %1)
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  %19 = call i32 @assert_se(i32 %18)
  %20 = load i32, i32* %1, align 4
  %21 = icmp eq i32 %20, 111
  %22 = zext i1 %21 to i32
  %23 = call i32 @assert_se(i32 %22)
  %24 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 1024, i32* %1)
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = call i32 @assert_se(i32 %26)
  %28 = load i32, i32* %1, align 4
  %29 = icmp eq i32 %28, 112
  %30 = zext i1 %29 to i32
  %31 = call i32 @assert_se(i32 %30)
  %32 = call i32 @parse_size(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1024, i32* %1)
  %33 = icmp eq i32 %32, 0
  %34 = zext i1 %33 to i32
  %35 = call i32 @assert_se(i32 %34)
  %36 = load i32, i32* %1, align 4
  %37 = icmp eq i32 %36, 112
  %38 = zext i1 %37 to i32
  %39 = call i32 @assert_se(i32 %38)
  %40 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 1024, i32* %1)
  %41 = icmp eq i32 %40, 0
  %42 = zext i1 %41 to i32
  %43 = call i32 @assert_se(i32 %42)
  %44 = load i32, i32* %1, align 4
  %45 = icmp eq i32 %44, 3584
  %46 = zext i1 %45 to i32
  %47 = call i32 @assert_se(i32 %46)
  %48 = call i32 @parse_size(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 1024, i32* %1)
  %49 = icmp eq i32 %48, 0
  %50 = zext i1 %49 to i32
  %51 = call i32 @assert_se(i32 %50)
  %52 = load i32, i32* %1, align 4
  %53 = icmp eq i32 %52, 3072
  %54 = zext i1 %53 to i32
  %55 = call i32 @assert_se(i32 %54)
  %56 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 1024, i32* %1)
  %57 = icmp eq i32 %56, 0
  %58 = zext i1 %57 to i32
  %59 = call i32 @assert_se(i32 %58)
  %60 = load i32, i32* %1, align 4
  %61 = icmp eq i32 %60, 3072
  %62 = zext i1 %61 to i32
  %63 = call i32 @assert_se(i32 %62)
  %64 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i32 1024, i32* %1)
  %65 = load i32, i32* @EINVAL, align 4
  %66 = sub nsw i32 0, %65
  %67 = icmp eq i32 %64, %66
  %68 = zext i1 %67 to i32
  %69 = call i32 @assert_se(i32 %68)
  %70 = call i32 @parse_size(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 1024, i32* %1)
  %71 = icmp eq i32 %70, 0
  %72 = zext i1 %71 to i32
  %73 = call i32 @assert_se(i32 %72)
  %74 = load i32, i32* %1, align 4
  %75 = icmp eq i32 %74, 4206080
  %76 = zext i1 %75 to i32
  %77 = call i32 @assert_se(i32 %76)
  %78 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i32 1024, i32* %1)
  %79 = load i32, i32* @EINVAL, align 4
  %80 = sub nsw i32 0, %79
  %81 = icmp eq i32 %78, %80
  %82 = zext i1 %81 to i32
  %83 = call i32 @assert_se(i32 %82)
  %84 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i32 1024, i32* %1)
  %85 = icmp eq i32 %84, 0
  %86 = zext i1 %85 to i32
  %87 = call i32 @assert_se(i32 %86)
  %88 = load i32, i32* %1, align 4
  %89 = sext i32 %88 to i64
  %90 = icmp eq i64 %89, 3758096387
  %91 = zext i1 %90 to i32
  %92 = call i32 @assert_se(i32 %91)
  %93 = call i32 @parse_size(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i32 1024, i32* %1)
  %94 = icmp eq i32 %93, 0
  %95 = zext i1 %94 to i32
  %96 = call i32 @assert_se(i32 %95)
  %97 = load i32, i32* %1, align 4
  %98 = sext i32 %97 to i64
  %99 = icmp eq i64 %98, 3758096388
  %100 = zext i1 %99 to i32
  %101 = call i32 @assert_se(i32 %100)
  %102 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0), i32 1024, i32* %1)
  %103 = load i32, i32* @EINVAL, align 4
  %104 = sub nsw i32 0, %103
  %105 = icmp eq i32 %102, %104
  %106 = zext i1 %105 to i32
  %107 = call i32 @assert_se(i32 %106)
  %108 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i32 1024, i32* %1)
  %109 = icmp eq i32 %108, 0
  %110 = zext i1 %109 to i32
  %111 = call i32 @assert_se(i32 %110)
  %112 = load i32, i32* %1, align 4
  %113 = sext i32 %112 to i64
  %114 = icmp eq i64 %113, 4401267736579
  %115 = zext i1 %114 to i32
  %116 = call i32 @assert_se(i32 %115)
  %117 = call i32 @parse_size(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i32 1024, i32* %1)
  %118 = icmp eq i32 %117, 0
  %119 = zext i1 %118 to i32
  %120 = call i32 @assert_se(i32 %119)
  %121 = load i32, i32* %1, align 4
  %122 = sext i32 %121 to i64
  %123 = icmp eq i64 %122, 4401267736579
  %124 = zext i1 %123 to i32
  %125 = call i32 @assert_se(i32 %124)
  %126 = call i32 @parse_size(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i32 1024, i32* %1)
  %127 = icmp eq i32 %126, 0
  %128 = zext i1 %127 to i32
  %129 = call i32 @assert_se(i32 %128)
  %130 = load i32, i32* %1, align 4
  %131 = sext i32 %130 to i64
  %132 = icmp eq i64 %131, 13510798882111488
  %133 = zext i1 %132 to i32
  %134 = call i32 @assert_se(i32 %133)
  %135 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0), i32 1024, i32* %1)
  %136 = load i32, i32* @EINVAL, align 4
  %137 = sub nsw i32 0, %136
  %138 = icmp eq i32 %135, %137
  %139 = zext i1 %138 to i32
  %140 = call i32 @assert_se(i32 %139)
  %141 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0), i32 1024, i32* %1)
  %142 = icmp eq i32 %141, 0
  %143 = zext i1 %142 to i32
  %144 = call i32 @assert_se(i32 %143)
  %145 = load i32, i32* %1, align 4
  %146 = sext i32 %145 to i64
  %147 = icmp eq i64 %146, 3461016313634226176
  %148 = zext i1 %147 to i32
  %149 = call i32 @assert_se(i32 %148)
  %150 = call i32 @parse_size(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i32 1024, i32* %1)
  %151 = load i32, i32* @EINVAL, align 4
  %152 = sub nsw i32 0, %151
  %153 = icmp eq i32 %150, %152
  %154 = zext i1 %153 to i32
  %155 = call i32 @assert_se(i32 %154)
  %156 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i32 1024, i32* %1)
  %157 = load i32, i32* @EINVAL, align 4
  %158 = sub nsw i32 0, %157
  %159 = icmp eq i32 %156, %158
  %160 = zext i1 %159 to i32
  %161 = call i32 @assert_se(i32 %160)
  %162 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0), i32 1024, i32* %1)
  %163 = load i32, i32* @EINVAL, align 4
  %164 = sub nsw i32 0, %163
  %165 = icmp eq i32 %162, %164
  %166 = zext i1 %165 to i32
  %167 = call i32 @assert_se(i32 %166)
  %168 = call i32 @parse_size(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0), i32 1024, i32* %1)
  %169 = load i32, i32* @ERANGE, align 4
  %170 = sub nsw i32 0, %169
  %171 = icmp eq i32 %168, %170
  %172 = zext i1 %171 to i32
  %173 = call i32 @assert_se(i32 %172)
  %174 = call i32 @parse_size(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i32 1024, i32* %1)
  %175 = load i32, i32* @ERANGE, align 4
  %176 = sub nsw i32 0, %175
  %177 = icmp eq i32 %174, %176
  %178 = zext i1 %177 to i32
  %179 = call i32 @assert_se(i32 %178)
  %180 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), i32 1024, i32* %1)
  %181 = load i32, i32* @ERANGE, align 4
  %182 = sub nsw i32 0, %181
  %183 = icmp eq i32 %180, %182
  %184 = zext i1 %183 to i32
  %185 = call i32 @assert_se(i32 %184)
  %186 = call i32 @parse_size(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i32 1024, i32* %1)
  %187 = load i32, i32* @ERANGE, align 4
  %188 = sub nsw i32 0, %187
  %189 = icmp eq i32 %186, %188
  %190 = zext i1 %189 to i32
  %191 = call i32 @assert_se(i32 %190)
  %192 = call i32 @parse_size(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0), i32 1024, i32* %1)
  %193 = load i32, i32* @ERANGE, align 4
  %194 = sub nsw i32 0, %193
  %195 = icmp eq i32 %192, %194
  %196 = zext i1 %195 to i32
  %197 = call i32 @assert_se(i32 %196)
  ret void
}

declare dso_local i32 @assert_se(i32) #1

declare dso_local i32 @parse_size(i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
