; ModuleID = '/home/carl/AnghaBench/systemd/src/test/extr_test-string-util.c_test_cellescape.c'
source_filename = "/home/carl/AnghaBench/systemd/src/test/extr_test-string-util.c_test_cellescape.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"12\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"123\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"1234\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"\E2\80\A6\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"12345\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"1\E2\80\A6\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"1...\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"123456\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"\10\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"\\020\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"1234\10\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"12\E2\80\A6\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"123\E2\80\A6\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"1234\E2\80\A6\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"1234\\020\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"\09\0A\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"\\t\\n\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"1234\09\0A\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"1234\\t\\n\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"x\09\10\0A\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"x\E2\80\A6\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"x\\t\E2\80\A6\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"x\\t\\020\\n\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"1\09\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"1\\t\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"1\10\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"1\\020\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"1\10x\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"1\\020x\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"\07\08\0C\0A\0D\09\0B\\\22'\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"\\a\\b\\f\\n\\r\\t\\v\\\\\\\22\\'\00", align 1
@.str.36 = private unnamed_addr constant [6 x i8] c"\\a\E2\80\A6\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"\\a...\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"\\a\\b\E2\80\A6\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c"\\a\\b...\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @test_cellescape to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @test_cellescape() #0 {
  %1 = alloca [40 x i8], align 16
  %2 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %3 = call i32 @cellescape(i8* %2, i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 @streq(i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %5 = call i32 @assert_se(i32 %4)
  %6 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %7 = call i32 @cellescape(i8* %6, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 @streq(i32 %7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %9 = call i32 @assert_se(i32 %8)
  %10 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %11 = call i32 @cellescape(i8* %10, i32 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 @streq(i32 %11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 @assert_se(i32 %12)
  %14 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %15 = call i32 @cellescape(i8* %14, i32 2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @streq(i32 %15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %17 = call i32 @assert_se(i32 %16)
  %18 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %19 = call i32 @cellescape(i8* %18, i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @streq(i32 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %21 = call i32 @assert_se(i32 %20)
  %22 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %23 = call i32 @cellescape(i8* %22, i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %24 = call i32 @streq(i32 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %25 = call i32 @assert_se(i32 %24)
  %26 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %27 = call i32 @cellescape(i8* %26, i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %28 = call i32 @streq(i32 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %29 = call i32 @assert_se(i32 %28)
  %30 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %31 = call i32 @cellescape(i8* %30, i32 3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %32 = call i32 @streq(i32 %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %33 = call i32 @assert_se(i32 %32)
  %34 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %35 = call i32 @cellescape(i8* %34, i32 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @streq(i32 %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %37 = call i32 @assert_se(i32 %36)
  %38 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %39 = call i32 @cellescape(i8* %38, i32 3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %40 = call i32 @streq(i32 %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @assert_se(i32 %40)
  %42 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %43 = call i32 @cellescape(i8* %42, i32 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %44 = call i32 @streq(i32 %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %45 = call i32 @assert_se(i32 %44)
  %46 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %47 = call i32 @cellescape(i8* %46, i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %48 = call i32 @streq(i32 %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %49 = call i32 @assert_se(i32 %48)
  %50 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %51 = call i32 @cellescape(i8* %50, i32 4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %52 = call i32 @streq(i32 %51, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %53 = call i32 @assert_se(i32 %52)
  %54 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %55 = call i32 @cellescape(i8* %54, i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %56 = call i32 @streq(i32 %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %57 = call i32 @assert_se(i32 %56)
  %58 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %59 = call i32 @cellescape(i8* %58, i32 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %60 = call i32 @streq(i32 %59, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %61 = call i32 @assert_se(i32 %60)
  %62 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %63 = call i32 @cellescape(i8* %62, i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %64 = call i32 @streq(i32 %63, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %65 = call i32 @assert_se(i32 %64)
  %66 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %67 = call i32 @cellescape(i8* %66, i32 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %68 = call i64 (...) @is_locale_utf8()
  %69 = icmp ne i64 %68, 0
  %70 = zext i1 %69 to i64
  %71 = select i1 %69, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)
  %72 = call i32 @streq(i32 %67, i8* %71)
  %73 = call i32 @assert_se(i32 %72)
  %74 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %75 = call i32 @cellescape(i8* %74, i32 4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %76 = call i64 (...) @is_locale_utf8()
  %77 = icmp ne i64 %76, 0
  %78 = zext i1 %77 to i64
  %79 = select i1 %77, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)
  %80 = call i32 @streq(i32 %75, i8* %79)
  %81 = call i32 @assert_se(i32 %80)
  %82 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %83 = call i32 @cellescape(i8* %82, i32 5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %84 = call i32 @streq(i32 %83, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %85 = call i32 @assert_se(i32 %84)
  %86 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %87 = call i32 @cellescape(i8* %86, i32 5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %88 = call i32 @streq(i32 %87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %89 = call i32 @assert_se(i32 %88)
  %90 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %91 = call i32 @cellescape(i8* %90, i32 5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %92 = call i32 @streq(i32 %91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %93 = call i32 @assert_se(i32 %92)
  %94 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %95 = call i32 @cellescape(i8* %94, i32 5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %96 = call i32 @streq(i32 %95, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %97 = call i32 @assert_se(i32 %96)
  %98 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %99 = call i32 @cellescape(i8* %98, i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %100 = call i32 @streq(i32 %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %101 = call i32 @assert_se(i32 %100)
  %102 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %103 = call i32 @cellescape(i8* %102, i32 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %104 = call i64 (...) @is_locale_utf8()
  %105 = icmp ne i64 %104, 0
  %106 = zext i1 %105 to i64
  %107 = select i1 %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)
  %108 = call i32 @streq(i32 %103, i8* %107)
  %109 = call i32 @assert_se(i32 %108)
  %110 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %111 = call i32 @cellescape(i8* %110, i32 5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0))
  %112 = call i64 (...) @is_locale_utf8()
  %113 = icmp ne i64 %112, 0
  %114 = zext i1 %113 to i64
  %115 = select i1 %113, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)
  %116 = call i32 @streq(i32 %111, i8* %115)
  %117 = call i32 @assert_se(i32 %116)
  %118 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %119 = call i32 @cellescape(i8* %118, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %120 = call i32 @streq(i32 %119, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %121 = call i32 @assert_se(i32 %120)
  %122 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %123 = call i32 @cellescape(i8* %122, i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %124 = call i32 @streq(i32 %123, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %125 = call i32 @assert_se(i32 %124)
  %126 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %127 = call i32 @cellescape(i8* %126, i32 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %128 = call i32 @streq(i32 %127, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %129 = call i32 @assert_se(i32 %128)
  %130 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %131 = call i32 @cellescape(i8* %130, i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %132 = call i32 @streq(i32 %131, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %133 = call i32 @assert_se(i32 %132)
  %134 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %135 = call i32 @cellescape(i8* %134, i32 5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %136 = call i32 @streq(i32 %135, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0))
  %137 = call i32 @assert_se(i32 %136)
  %138 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %139 = call i32 @cellescape(i8* %138, i32 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  %140 = call i32 @streq(i32 %139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %141 = call i32 @assert_se(i32 %140)
  %142 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %143 = call i32 @cellescape(i8* %142, i32 6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  %144 = call i32 @streq(i32 %143, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  %145 = call i32 @assert_se(i32 %144)
  %146 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %147 = call i32 @cellescape(i8* %146, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  %148 = call i32 @streq(i32 %147, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0))
  %149 = call i32 @assert_se(i32 %148)
  %150 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %151 = call i32 @cellescape(i8* %150, i32 8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  %152 = call i32 @streq(i32 %151, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i64 0, i64 0))
  %153 = call i32 @assert_se(i32 %152)
  %154 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %155 = call i32 @cellescape(i8* %154, i32 9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  %156 = call i32 @streq(i32 %155, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i64 0, i64 0))
  %157 = call i32 @assert_se(i32 %156)
  %158 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %159 = call i32 @cellescape(i8* %158, i32 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0))
  %160 = call i32 @streq(i32 %159, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  %161 = call i32 @assert_se(i32 %160)
  %162 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %163 = call i32 @cellescape(i8* %162, i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0))
  %164 = call i32 @streq(i32 %163, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %165 = call i32 @assert_se(i32 %164)
  %166 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %167 = call i32 @cellescape(i8* %166, i32 3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0))
  %168 = call i32 @streq(i32 %167, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %169 = call i32 @assert_se(i32 %168)
  %170 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %171 = call i32 @cellescape(i8* %170, i32 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0))
  %172 = call i32 @streq(i32 %171, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %173 = call i32 @assert_se(i32 %172)
  %174 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %175 = call i32 @cellescape(i8* %174, i32 5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0))
  %176 = call i32 @streq(i32 %175, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0))
  %177 = call i32 @assert_se(i32 %176)
  %178 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %179 = call i32 @cellescape(i8* %178, i32 5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %180 = call i32 @streq(i32 %179, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %181 = call i32 @assert_se(i32 %180)
  %182 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %183 = call i32 @cellescape(i8* %182, i32 6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %184 = call i32 @streq(i32 %183, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  %185 = call i32 @assert_se(i32 %184)
  %186 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %187 = call i32 @cellescape(i8* %186, i32 7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %188 = call i32 @streq(i32 %187, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0))
  %189 = call i32 @assert_se(i32 %188)
  %190 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %191 = call i32 @cellescape(i8* %190, i32 8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %192 = call i32 @streq(i32 %191, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18, i64 0, i64 0))
  %193 = call i32 @assert_se(i32 %192)
  %194 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %195 = call i32 @cellescape(i8* %194, i32 9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %196 = call i32 @streq(i32 %195, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i64 0, i64 0))
  %197 = call i32 @assert_se(i32 %196)
  %198 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %199 = call i32 @cellescape(i8* %198, i32 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %200 = call i32 @streq(i32 %199, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %201 = call i32 @assert_se(i32 %200)
  %202 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %203 = call i32 @cellescape(i8* %202, i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %204 = call i32 @streq(i32 %203, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0))
  %205 = call i32 @assert_se(i32 %204)
  %206 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %207 = call i32 @cellescape(i8* %206, i32 6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %208 = call i32 @streq(i32 %207, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0))
  %209 = call i32 @assert_se(i32 %208)
  %210 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %211 = call i32 @cellescape(i8* %210, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %212 = call i32 @streq(i32 %211, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0))
  %213 = call i32 @assert_se(i32 %212)
  %214 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %215 = call i32 @cellescape(i8* %214, i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %216 = call i32 @streq(i32 %215, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0))
  %217 = call i32 @assert_se(i32 %216)
  %218 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %219 = call i32 @cellescape(i8* %218, i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %220 = call i32 @streq(i32 %219, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0))
  %221 = call i32 @assert_se(i32 %220)
  %222 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %223 = call i32 @cellescape(i8* %222, i32 10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %224 = call i32 @streq(i32 %223, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i64 0, i64 0))
  %225 = call i32 @assert_se(i32 %224)
  %226 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %227 = call i32 @cellescape(i8* %226, i32 6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i64 0, i64 0))
  %228 = call i32 @streq(i32 %227, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0))
  %229 = call i32 @assert_se(i32 %228)
  %230 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %231 = call i32 @cellescape(i8* %230, i32 6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0))
  %232 = call i32 @streq(i32 %231, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0))
  %233 = call i32 @assert_se(i32 %232)
  %234 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %235 = call i32 @cellescape(i8* %234, i32 6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0))
  %236 = call i64 (...) @is_locale_utf8()
  %237 = icmp ne i64 %236, 0
  %238 = zext i1 %237 to i64
  %239 = select i1 %237, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)
  %240 = call i32 @streq(i32 %235, i8* %239)
  %241 = call i32 @assert_se(i32 %240)
  %242 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %243 = call i32 @cellescape(i8* %242, i32 40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0))
  %244 = call i32 @streq(i32 %243, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0))
  %245 = call i32 @assert_se(i32 %244)
  %246 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %247 = call i32 @cellescape(i8* %246, i32 40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0))
  %248 = call i32 @streq(i32 %247, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0))
  %249 = call i32 @assert_se(i32 %248)
  %250 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %251 = call i32 @cellescape(i8* %250, i32 40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0))
  %252 = call i32 @streq(i32 %251, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0))
  %253 = call i32 @assert_se(i32 %252)
  %254 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %255 = call i32 @cellescape(i8* %254, i32 6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0))
  %256 = call i64 (...) @is_locale_utf8()
  %257 = icmp ne i64 %256, 0
  %258 = zext i1 %257 to i64
  %259 = select i1 %257, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)
  %260 = call i32 @streq(i32 %255, i8* %259)
  %261 = call i32 @assert_se(i32 %260)
  %262 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %263 = call i32 @cellescape(i8* %262, i32 7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0))
  %264 = call i64 (...) @is_locale_utf8()
  %265 = icmp ne i64 %264, 0
  %266 = zext i1 %265 to i64
  %267 = select i1 %265, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)
  %268 = call i32 @streq(i32 %263, i8* %267)
  %269 = call i32 @assert_se(i32 %268)
  %270 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %271 = call i32 @cellescape(i8* %270, i32 8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0))
  %272 = call i64 (...) @is_locale_utf8()
  %273 = icmp ne i64 %272, 0
  %274 = zext i1 %273 to i64
  %275 = select i1 %273, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i64 0, i64 0)
  %276 = call i32 @streq(i32 %271, i8* %275)
  %277 = call i32 @assert_se(i32 %276)
  %278 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %279 = call i32 @cellescape(i8* %278, i32 40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0))
  %280 = call i32 @streq(i32 %279, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0))
  %281 = call i32 @assert_se(i32 %280)
  %282 = getelementptr inbounds [40 x i8], [40 x i8]* %1, i64 0, i64 0
  %283 = call i32 @cellescape(i8* %282, i32 40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0))
  %284 = call i32 @streq(i32 %283, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0))
  %285 = call i32 @assert_se(i32 %284)
  ret void
}

declare dso_local i32 @assert_se(i32) #1

declare dso_local i32 @streq(i32, i8*) #1

declare dso_local i32 @cellescape(i8*, i32, i8*) #1

declare dso_local i64 @is_locale_utf8(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
