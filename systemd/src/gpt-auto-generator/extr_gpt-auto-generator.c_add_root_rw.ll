; ModuleID = '/home/carl/AnghaBench/systemd/src/gpt-auto-generator/extr_gpt-auto-generator.c_add_root_rw.c'
source_filename = "/home/carl/AnghaBench/systemd/src/gpt-auto-generator/extr_gpt-auto-generator.c_add_root_rw.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32 }

@.str = private unnamed_addr constant [66 x i8] c"In initrd, not generating drop-in for systemd-remount-fs.service.\00", align 1
@arg_root_rw = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [105 x i8] c"Parameter ro/rw specified on kernel command line, not generating drop-in for systemd-remount-fs.service.\00", align 1
@.str.2 = private unnamed_addr constant [111 x i8] c"Root partition marked read-only in GPT partition table, not generating drop-in for systemd-remount-fs.service.\00", align 1
@arg_dest = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [49 x i8] c"/systemd-remount-fs.service.d/50-remount-rw.conf\00", align 1
@.str.4 = private unnamed_addr constant [101 x i8] c"# Automatically generated by systemd-gpt-generator\0A\0A[Service]\0AEnvironment=SYSTEMD_REMOUNT_ROOT_RW=1\0A\00", align 1
@WRITE_STRING_FILE_CREATE = common dso_local global i32 0, align 4
@WRITE_STRING_FILE_NOFOLLOW = common dso_local global i32 0, align 4
@WRITE_STRING_FILE_MKDIR_0755 = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [36 x i8] c"Failed to write drop-in file %s: %m\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.TYPE_4__*)* @add_root_rw to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @add_root_rw(%struct.TYPE_4__* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.TYPE_4__*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store %struct.TYPE_4__* %0, %struct.TYPE_4__** %3, align 8
  %6 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %7 = call i32 @assert(%struct.TYPE_4__* %6)
  %8 = call i64 (...) @in_initrd()
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = call i32 @log_debug(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %43

12:                                               ; preds = %1
  %13 = load i64, i64* @arg_root_rw, align 8
  %14 = icmp sge i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = call i32 @log_debug(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %43

17:                                               ; preds = %12
  %18 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %19 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = call i32 @log_debug(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %43

24:                                               ; preds = %17
  %25 = load i32, i32* @arg_dest, align 4
  %26 = call i32 @generator_enable_remount_fs_service(i32 %25)
  %27 = load i32, i32* @arg_dest, align 4
  %28 = call i8* @strjoina(i32 %27, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0))
  store i8* %28, i8** %4, align 8
  %29 = load i8*, i8** %4, align 8
  %30 = load i32, i32* @WRITE_STRING_FILE_CREATE, align 4
  %31 = load i32, i32* @WRITE_STRING_FILE_NOFOLLOW, align 4
  %32 = or i32 %30, %31
  %33 = load i32, i32* @WRITE_STRING_FILE_MKDIR_0755, align 4
  %34 = or i32 %32, %33
  %35 = call i32 @write_string_file(i8* %29, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.4, i64 0, i64 0), i32 %34)
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %5, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %24
  %39 = load i32, i32* %5, align 4
  %40 = load i8*, i8** %4, align 8
  %41 = call i32 @log_error_errno(i32 %39, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i8* %40)
  store i32 %41, i32* %2, align 4
  br label %43

42:                                               ; preds = %24
  store i32 0, i32* %2, align 4
  br label %43

43:                                               ; preds = %42, %38, %22, %15, %10
  %44 = load i32, i32* %2, align 4
  ret i32 %44
}

declare dso_local i32 @assert(%struct.TYPE_4__*) #1

declare dso_local i64 @in_initrd(...) #1

declare dso_local i32 @log_debug(i8*) #1

declare dso_local i32 @generator_enable_remount_fs_service(i32) #1

declare dso_local i8* @strjoina(i32, i8*) #1

declare dso_local i32 @write_string_file(i8*, i8*, i32) #1

declare dso_local i32 @log_error_errno(i32, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
