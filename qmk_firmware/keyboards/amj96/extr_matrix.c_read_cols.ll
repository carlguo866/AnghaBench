; ModuleID = '/home/carl/AnghaBench/qmk_firmware/keyboards/amj96/extr_matrix.c_read_cols.c'
source_filename = "/home/carl/AnghaBench/qmk_firmware/keyboards/amj96/extr_matrix.c_read_cols.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PINF = common dso_local global i32 0, align 4
@PF7 = common dso_local global i32 0, align 4
@PF6 = common dso_local global i32 0, align 4
@PF5 = common dso_local global i32 0, align 4
@PF4 = common dso_local global i32 0, align 4
@PF1 = common dso_local global i32 0, align 4
@PF0 = common dso_local global i32 0, align 4
@PINE = common dso_local global i32 0, align 4
@PE6 = common dso_local global i32 0, align 4
@PIND = common dso_local global i32 0, align 4
@PD7 = common dso_local global i32 0, align 4
@PD6 = common dso_local global i32 0, align 4
@PD5 = common dso_local global i32 0, align 4
@PD1 = common dso_local global i32 0, align 4
@PD0 = common dso_local global i32 0, align 4
@PINB = common dso_local global i32 0, align 4
@PB7 = common dso_local global i32 0, align 4
@PB6 = common dso_local global i32 0, align 4
@PB0 = common dso_local global i32 0, align 4
@PINC = common dso_local global i32 0, align 4
@PC7 = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @read_cols to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_cols() #0 {
  %1 = load i32, i32* @PINF, align 4
  %2 = load i32, i32* @PF7, align 4
  %3 = call i32 @_BV(i32 %2)
  %4 = and i32 %1, %3
  %5 = icmp ne i32 %4, 0
  %6 = zext i1 %5 to i64
  %7 = select i1 %5, i32 0, i32 1
  %8 = load i32, i32* @PINF, align 4
  %9 = load i32, i32* @PF6, align 4
  %10 = call i32 @_BV(i32 %9)
  %11 = and i32 %8, %10
  %12 = icmp ne i32 %11, 0
  %13 = zext i1 %12 to i64
  %14 = select i1 %12, i32 0, i32 2
  %15 = or i32 %7, %14
  %16 = load i32, i32* @PINF, align 4
  %17 = load i32, i32* @PF5, align 4
  %18 = call i32 @_BV(i32 %17)
  %19 = and i32 %16, %18
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 0, i32 4
  %23 = or i32 %15, %22
  %24 = load i32, i32* @PINF, align 4
  %25 = load i32, i32* @PF4, align 4
  %26 = call i32 @_BV(i32 %25)
  %27 = and i32 %24, %26
  %28 = icmp ne i32 %27, 0
  %29 = zext i1 %28 to i64
  %30 = select i1 %28, i32 0, i32 8
  %31 = or i32 %23, %30
  %32 = load i32, i32* @PINF, align 4
  %33 = load i32, i32* @PF1, align 4
  %34 = call i32 @_BV(i32 %33)
  %35 = and i32 %32, %34
  %36 = icmp ne i32 %35, 0
  %37 = zext i1 %36 to i64
  %38 = select i1 %36, i32 0, i32 16
  %39 = or i32 %31, %38
  %40 = load i32, i32* @PINF, align 4
  %41 = load i32, i32* @PF0, align 4
  %42 = call i32 @_BV(i32 %41)
  %43 = and i32 %40, %42
  %44 = icmp ne i32 %43, 0
  %45 = zext i1 %44 to i64
  %46 = select i1 %44, i32 0, i32 32
  %47 = or i32 %39, %46
  %48 = load i32, i32* @PINE, align 4
  %49 = load i32, i32* @PE6, align 4
  %50 = call i32 @_BV(i32 %49)
  %51 = and i32 %48, %50
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i64
  %54 = select i1 %52, i32 0, i32 64
  %55 = or i32 %47, %54
  %56 = load i32, i32* @PIND, align 4
  %57 = load i32, i32* @PD7, align 4
  %58 = call i32 @_BV(i32 %57)
  %59 = and i32 %56, %58
  %60 = icmp ne i32 %59, 0
  %61 = zext i1 %60 to i64
  %62 = select i1 %60, i32 0, i32 128
  %63 = or i32 %55, %62
  %64 = load i32, i32* @PIND, align 4
  %65 = load i32, i32* @PD6, align 4
  %66 = call i32 @_BV(i32 %65)
  %67 = and i32 %64, %66
  %68 = icmp ne i32 %67, 0
  %69 = zext i1 %68 to i64
  %70 = select i1 %68, i32 0, i32 256
  %71 = or i32 %63, %70
  %72 = load i32, i32* @PIND, align 4
  %73 = load i32, i32* @PD5, align 4
  %74 = call i32 @_BV(i32 %73)
  %75 = and i32 %72, %74
  %76 = icmp ne i32 %75, 0
  %77 = zext i1 %76 to i64
  %78 = select i1 %76, i32 0, i32 512
  %79 = or i32 %71, %78
  %80 = load i32, i32* @PIND, align 4
  %81 = load i32, i32* @PD1, align 4
  %82 = call i32 @_BV(i32 %81)
  %83 = and i32 %80, %82
  %84 = icmp ne i32 %83, 0
  %85 = zext i1 %84 to i64
  %86 = select i1 %84, i32 0, i32 1024
  %87 = or i32 %79, %86
  %88 = load i32, i32* @PIND, align 4
  %89 = load i32, i32* @PD0, align 4
  %90 = call i32 @_BV(i32 %89)
  %91 = and i32 %88, %90
  %92 = icmp ne i32 %91, 0
  %93 = zext i1 %92 to i64
  %94 = select i1 %92, i32 0, i32 2048
  %95 = or i32 %87, %94
  %96 = load i32, i32* @PINB, align 4
  %97 = load i32, i32* @PB7, align 4
  %98 = call i32 @_BV(i32 %97)
  %99 = and i32 %96, %98
  %100 = icmp ne i32 %99, 0
  %101 = zext i1 %100 to i64
  %102 = select i1 %100, i32 0, i32 4096
  %103 = or i32 %95, %102
  %104 = load i32, i32* @PINB, align 4
  %105 = load i32, i32* @PB6, align 4
  %106 = call i32 @_BV(i32 %105)
  %107 = and i32 %104, %106
  %108 = icmp ne i32 %107, 0
  %109 = zext i1 %108 to i64
  %110 = select i1 %108, i32 0, i32 8192
  %111 = or i32 %103, %110
  %112 = load i32, i32* @PINB, align 4
  %113 = load i32, i32* @PB0, align 4
  %114 = call i32 @_BV(i32 %113)
  %115 = and i32 %112, %114
  %116 = icmp ne i32 %115, 0
  %117 = zext i1 %116 to i64
  %118 = select i1 %116, i32 0, i32 16384
  %119 = or i32 %111, %118
  %120 = load i32, i32* @PINC, align 4
  %121 = load i32, i32* @PC7, align 4
  %122 = call i32 @_BV(i32 %121)
  %123 = and i32 %120, %122
  %124 = icmp ne i32 %123, 0
  %125 = zext i1 %124 to i64
  %126 = select i1 %124, i32 0, i32 32768
  %127 = or i32 %119, %126
  ret i32 %127
}

declare dso_local i32 @_BV(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
