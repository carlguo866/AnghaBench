; ModuleID = '/home/carl/AnghaBench/sumatrapdf/ext/openjpeg/src/lib/openjp2/extr_t1_generate_luts.c_main.c'
source_filename = "/home/carl/AnghaBench/sumatrapdf/ext/openjpeg/src/lib/openjp2/extr_t1_generate_luts.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@T1_NMSEDEC_BITS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [68 x i8] c"/* This file was automatically generated by t1_generate_luts.c */\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"static const OPJ_BYTE lut_ctxno_zc[2048] = {\0A    \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%i,\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0A    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"%i\0A};\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"static const OPJ_BYTE lut_ctxno_sc[256] = {\0A    \00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"0x%x,\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"0x%x\0A};\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"static const OPJ_BYTE lut_spb[256] = {\0A    \00", align 1
@T1_NMSEDEC_FRACBITS = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [71 x i8] c"static const OPJ_INT16 lut_nmsedec_sig[1U << T1_NMSEDEC_BITS] = {\0A    \00", align 1
@.str.11 = private unnamed_addr constant [72 x i8] c"static const OPJ_INT16 lut_nmsedec_sig0[1U << T1_NMSEDEC_BITS] = {\0A    \00", align 1
@.str.12 = private unnamed_addr constant [71 x i8] c"static const OPJ_INT16 lut_nmsedec_ref[1U << T1_NMSEDEC_BITS] = {\0A    \00", align 1
@.str.13 = private unnamed_addr constant [72 x i8] c"static const OPJ_INT16 lut_nmsedec_ref0[1U << T1_NMSEDEC_BITS] = {\0A    \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca [2048 x i32], align 16
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %19 = shl i32 1, %18
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %12, align 8
  %22 = alloca i32, i64 %20, align 16
  store i64 %20, i64* %13, align 8
  %23 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %24 = shl i32 1, %23
  %25 = zext i32 %24 to i64
  %26 = alloca i32, i64 %25, align 16
  store i64 %25, i64* %14, align 8
  %27 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %28 = shl i32 1, %27
  %29 = zext i32 %28 to i64
  %30 = alloca i32, i64 %29, align 16
  store i64 %29, i64* %15, align 8
  %31 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %32 = shl i32 1, %31
  %33 = zext i32 %32 to i64
  %34 = alloca i32, i64 %33, align 16
  store i64 %33, i64* %16, align 8
  %35 = load i32, i32* %4, align 4
  %36 = load i8**, i8*** %5, align 8
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %38

38:                                               ; preds = %69, %2
  %39 = load i32, i32* %7, align 4
  %40 = icmp ult i32 %39, 4
  br i1 %40, label %41, label %72

41:                                               ; preds = %38
  store i32 0, i32* %6, align 4
  br label %42

42:                                               ; preds = %65, %41
  %43 = load i32, i32* %6, align 4
  %44 = icmp ult i32 %43, 512
  br i1 %44, label %45, label %68

45:                                               ; preds = %42
  %46 = load i32, i32* %7, align 4
  store i32 %46, i32* %17, align 4
  %47 = load i32, i32* %17, align 4
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  store i32 1, i32* %17, align 4
  br label %55

50:                                               ; preds = %45
  %51 = load i32, i32* %17, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  store i32 2, i32* %17, align 4
  br label %54

54:                                               ; preds = %53, %50
  br label %55

55:                                               ; preds = %54, %49
  %56 = load i32, i32* %6, align 4
  %57 = load i32, i32* %7, align 4
  %58 = call i32 @t1_init_ctxno_zc(i32 %56, i32 %57)
  %59 = load i32, i32* %17, align 4
  %60 = shl i32 %59, 9
  %61 = load i32, i32* %6, align 4
  %62 = or i32 %60, %61
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [2048 x i32], [2048 x i32]* %11, i64 0, i64 %63
  store i32 %58, i32* %64, align 4
  br label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %6, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %6, align 4
  br label %42

68:                                               ; preds = %42
  br label %69

69:                                               ; preds = %68
  %70 = load i32, i32* %7, align 4
  %71 = add i32 %70, 1
  store i32 %71, i32* %7, align 4
  br label %38

72:                                               ; preds = %38
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %74

74:                                               ; preds = %92, %72
  %75 = load i32, i32* %6, align 4
  %76 = icmp ult i32 %75, 2047
  br i1 %76, label %77, label %95

77:                                               ; preds = %74
  %78 = load i32, i32* %6, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [2048 x i32], [2048 x i32]* %11, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %81)
  %83 = load i32, i32* %6, align 4
  %84 = add i32 %83, 1
  %85 = and i32 %84, 31
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %77
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %91

89:                                               ; preds = %77
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %91

91:                                               ; preds = %89, %87
  br label %92

92:                                               ; preds = %91
  %93 = load i32, i32* %6, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %6, align 4
  br label %74

95:                                               ; preds = %74
  %96 = getelementptr inbounds [2048 x i32], [2048 x i32]* %11, i64 0, i64 2047
  %97 = load i32, i32* %96, align 4
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i32 %97)
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %100

100:                                              ; preds = %116, %95
  %101 = load i32, i32* %6, align 4
  %102 = icmp ult i32 %101, 255
  br i1 %102, label %103, label %119

103:                                              ; preds = %100
  %104 = load i32, i32* %6, align 4
  %105 = call i32 @t1_init_ctxno_sc(i32 %104)
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 %105)
  %107 = load i32, i32* %6, align 4
  %108 = add i32 %107, 1
  %109 = and i32 %108, 15
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %103
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %115

113:                                              ; preds = %103
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %115

115:                                              ; preds = %113, %111
  br label %116

116:                                              ; preds = %115
  %117 = load i32, i32* %6, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %6, align 4
  br label %100

119:                                              ; preds = %100
  %120 = call i32 @t1_init_ctxno_sc(i32 255)
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i32 %120)
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %123

123:                                              ; preds = %139, %119
  %124 = load i32, i32* %6, align 4
  %125 = icmp ult i32 %124, 255
  br i1 %125, label %126, label %142

126:                                              ; preds = %123
  %127 = load i32, i32* %6, align 4
  %128 = call i32 @t1_init_spb(i32 %127)
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %128)
  %130 = load i32, i32* %6, align 4
  %131 = add i32 %130, 1
  %132 = and i32 %131, 31
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %126
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %138

136:                                              ; preds = %126
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %138

138:                                              ; preds = %136, %134
  br label %139

139:                                              ; preds = %138
  %140 = load i32, i32* %6, align 4
  %141 = add i32 %140, 1
  store i32 %141, i32* %6, align 4
  br label %123

142:                                              ; preds = %123
  %143 = call i32 @t1_init_spb(i32 255)
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i32 %143)
  store i32 0, i32* %6, align 4
  br label %145

145:                                              ; preds = %250, %142
  %146 = load i32, i32* %6, align 4
  %147 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %148 = shl i32 1, %147
  %149 = icmp ult i32 %146, %148
  br i1 %149, label %150, label %253

150:                                              ; preds = %145
  %151 = load i32, i32* %6, align 4
  %152 = uitofp i32 %151 to double
  %153 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %154 = call double @pow(i32 2, i32 %153)
  %155 = fdiv double %152, %154
  store double %155, double* %10, align 8
  %156 = load double, double* %10, align 8
  store double %156, double* %8, align 8
  %157 = load double, double* %10, align 8
  %158 = fsub double %157, 1.500000e+00
  store double %158, double* %9, align 8
  %159 = load double, double* %8, align 8
  %160 = load double, double* %8, align 8
  %161 = fmul double %159, %160
  %162 = load double, double* %9, align 8
  %163 = load double, double* %9, align 8
  %164 = fmul double %162, %163
  %165 = fsub double %161, %164
  %166 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %167 = call double @pow(i32 2, i32 %166)
  %168 = fmul double %165, %167
  %169 = fadd double %168, 5.000000e-01
  %170 = call double @llvm.floor.f64(double %169)
  %171 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %172 = call double @pow(i32 2, i32 %171)
  %173 = fdiv double %170, %172
  %174 = fmul double %173, 8.192000e+03
  %175 = fptosi double %174 to i32
  %176 = call i32 @opj_int_max(i32 0, i32 %175)
  %177 = load i32, i32* %6, align 4
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %22, i64 %178
  store i32 %176, i32* %179, align 4
  %180 = load double, double* %8, align 8
  %181 = load double, double* %8, align 8
  %182 = fmul double %180, %181
  %183 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %184 = call double @pow(i32 2, i32 %183)
  %185 = fmul double %182, %184
  %186 = fadd double %185, 5.000000e-01
  %187 = call double @llvm.floor.f64(double %186)
  %188 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %189 = call double @pow(i32 2, i32 %188)
  %190 = fdiv double %187, %189
  %191 = fmul double %190, 8.192000e+03
  %192 = fptosi double %191 to i32
  %193 = call i32 @opj_int_max(i32 0, i32 %192)
  %194 = load i32, i32* %6, align 4
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds i32, i32* %26, i64 %195
  store i32 %193, i32* %196, align 4
  %197 = load double, double* %10, align 8
  %198 = fsub double %197, 1.000000e+00
  store double %198, double* %8, align 8
  %199 = load i32, i32* %6, align 4
  %200 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %201 = sub nsw i32 %200, 1
  %202 = shl i32 1, %201
  %203 = and i32 %199, %202
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %150
  %206 = load double, double* %10, align 8
  %207 = fsub double %206, 1.500000e+00
  store double %207, double* %9, align 8
  br label %211

208:                                              ; preds = %150
  %209 = load double, double* %10, align 8
  %210 = fsub double %209, 5.000000e-01
  store double %210, double* %9, align 8
  br label %211

211:                                              ; preds = %208, %205
  %212 = load double, double* %8, align 8
  %213 = load double, double* %8, align 8
  %214 = fmul double %212, %213
  %215 = load double, double* %9, align 8
  %216 = load double, double* %9, align 8
  %217 = fmul double %215, %216
  %218 = fsub double %214, %217
  %219 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %220 = call double @pow(i32 2, i32 %219)
  %221 = fmul double %218, %220
  %222 = fadd double %221, 5.000000e-01
  %223 = call double @llvm.floor.f64(double %222)
  %224 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %225 = call double @pow(i32 2, i32 %224)
  %226 = fdiv double %223, %225
  %227 = fmul double %226, 8.192000e+03
  %228 = fptosi double %227 to i32
  %229 = call i32 @opj_int_max(i32 0, i32 %228)
  %230 = load i32, i32* %6, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i32, i32* %30, i64 %231
  store i32 %229, i32* %232, align 4
  %233 = load double, double* %8, align 8
  %234 = load double, double* %8, align 8
  %235 = fmul double %233, %234
  %236 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %237 = call double @pow(i32 2, i32 %236)
  %238 = fmul double %235, %237
  %239 = fadd double %238, 5.000000e-01
  %240 = call double @llvm.floor.f64(double %239)
  %241 = load i32, i32* @T1_NMSEDEC_FRACBITS, align 4
  %242 = call double @pow(i32 2, i32 %241)
  %243 = fdiv double %240, %242
  %244 = fmul double %243, 8.192000e+03
  %245 = fptosi double %244 to i32
  %246 = call i32 @opj_int_max(i32 0, i32 %245)
  %247 = load i32, i32* %6, align 4
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i32, i32* %34, i64 %248
  store i32 %246, i32* %249, align 4
  br label %250

250:                                              ; preds = %211
  %251 = load i32, i32* %6, align 4
  %252 = add i32 %251, 1
  store i32 %252, i32* %6, align 4
  br label %145

253:                                              ; preds = %145
  %254 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.10, i64 0, i64 0))
  %255 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %256 = shl i32 1, %255
  %257 = call i32 @dump_array16(i32* %22, i32 %256)
  %258 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0))
  %259 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %260 = shl i32 1, %259
  %261 = call i32 @dump_array16(i32* %26, i32 %260)
  %262 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.12, i64 0, i64 0))
  %263 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %264 = shl i32 1, %263
  %265 = call i32 @dump_array16(i32* %30, i32 %264)
  %266 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.13, i64 0, i64 0))
  %267 = load i32, i32* @T1_NMSEDEC_BITS, align 4
  %268 = shl i32 1, %267
  %269 = call i32 @dump_array16(i32* %34, i32 %268)
  store i32 0, i32* %3, align 4
  %270 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %270)
  %271 = load i32, i32* %3, align 4
  ret i32 %271
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @t1_init_ctxno_zc(i32, i32) #2

declare dso_local i32 @t1_init_ctxno_sc(i32) #2

declare dso_local i32 @t1_init_spb(i32) #2

declare dso_local double @pow(i32, i32) #2

declare dso_local i32 @opj_int_max(i32, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #3

declare dso_local i32 @dump_array16(i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
