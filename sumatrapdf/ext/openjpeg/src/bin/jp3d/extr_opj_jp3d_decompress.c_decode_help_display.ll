; ModuleID = '/home/carl/AnghaBench/sumatrapdf/ext/openjpeg/src/bin/jp3d/extr_opj_jp3d_decompress.c_decode_help_display.c'
source_filename = "/home/carl/AnghaBench/sumatrapdf/ext/openjpeg/src/bin/jp3d/extr_opj_jp3d_decompress.c_decode_help_display.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"HELP\0A----\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"- the -h option displays this help information on screen\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"List of parameters for the JPEG 2000 encoder:\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c" Required arguments \0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c" ---------------------------- \0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"  -i <compressed file> ( *.jp3d, *.j3d )\0A\00", align 1
@.str.7 = private unnamed_addr constant [83 x i8] c"    Currently accepts J3D-files. The file type is identified based on its suffix.\0A\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"  -o <decompressed file> ( *.pgx, *.bin )\0A\00", align 1
@.str.9 = private unnamed_addr constant [97 x i8] c"    Currently accepts PGX-files and BIN-files. Binary data is written to the file (not ascii). \0A\00", align 1
@.str.10 = private unnamed_addr constant [80 x i8] c"    If a PGX filename is given, there will be as many output files as slices; \0A\00", align 1
@.str.11 = private unnamed_addr constant [77 x i8] c"    an indice starting from 0 will then be appended to the output filename,\0A\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"    just before the \22pgx\22 extension.\0A\00", align 1
@.str.13 = private unnamed_addr constant [40 x i8] c"  -m <characteristics file> ( *.img ) \0A\00", align 1
@.str.14 = private unnamed_addr constant [84 x i8] c"    Required only for BIN-files. Ascii data of volume characteristics is written. \0A\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c" Optional  \0A\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"  -h \0A \00", align 1
@.str.17 = private unnamed_addr constant [34 x i8] c"    Display the help information\0A\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"  -r <RFx,RFy,RFz>\0A\00", align 1
@.str.19 = private unnamed_addr constant [85 x i8] c"    Set the number of highest resolution levels to be discarded on each dimension. \0A\00", align 1
@.str.20 = private unnamed_addr constant [75 x i8] c"    The volume resolution is effectively divided by 2 to the power of the\0A\00", align 1
@.str.21 = private unnamed_addr constant [69 x i8] c"    number of discarded levels. The reduce factor is limited by the\0A\00", align 1
@.str.22 = private unnamed_addr constant [64 x i8] c"    smallest total number of decomposition levels among tiles.\0A\00", align 1
@.str.23 = private unnamed_addr constant [43 x i8] c"  -l <number of quality layers to decode>\0A\00", align 1
@.str.24 = private unnamed_addr constant [70 x i8] c"    Set the maximum number of quality layers to decode. If there are\0A\00", align 1
@.str.25 = private unnamed_addr constant [75 x i8] c"    less quality layers than the specified number, all the quality layers\0A\00", align 1
@.str.26 = private unnamed_addr constant [19 x i8] c"    are decoded. \0A\00", align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"  -O original-file \0A\00", align 1
@.str.28 = private unnamed_addr constant [74 x i8] c"    This option offers the possibility to compute some quality results  \0A\00", align 1
@.str.29 = private unnamed_addr constant [91 x i8] c"    for the decompressed volume, like the PSNR value achieved or the global SSIM value.  \0A\00", align 1
@.str.30 = private unnamed_addr constant [67 x i8] c"    Needs the original file in order to compare with the new one.\0A\00", align 1
@.str.31 = private unnamed_addr constant [110 x i8] c"    NOTE: Only valid when -r option is 0,0,0 (both original and decompressed volumes have same resolutions) \0A\00", align 1
@.str.32 = private unnamed_addr constant [112 x i8] c"    NOTE: If original file is .BIN file, the volume characteristics file shall be defined with the -m option. \0A\00", align 1
@.str.33 = private unnamed_addr constant [55 x i8] c"    (i.e. -O original-BIN-file -m original-IMG-file) \0A\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"  -BE \0A\00", align 1
@.str.35 = private unnamed_addr constant [85 x i8] c"    Define that the recovered volume data will be saved with big endian byte order.\0A\00", align 1
@.str.36 = private unnamed_addr constant [51 x i8] c"    By default, little endian byte order is used.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decode_help_display() #0 {
  %1 = load i32, i32* @stdout, align 4
  %2 = call i32 @fprintf(i32 %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  %3 = load i32, i32* @stdout, align 4
  %4 = call i32 @fprintf(i32 %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %5 = load i32, i32* @stdout, align 4
  %6 = call i32 @fprintf(i32 %5, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 @fprintf(i32 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 @fprintf(i32 %9, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 @fprintf(i32 %13, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0))
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 @fprintf(i32 %15, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.7, i64 0, i64 0))
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0))
  %19 = load i32, i32* @stdout, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.9, i64 0, i64 0))
  %21 = load i32, i32* @stdout, align 4
  %22 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.10, i64 0, i64 0))
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.11, i64 0, i64 0))
  %25 = load i32, i32* @stdout, align 4
  %26 = call i32 @fprintf(i32 %25, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0))
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 @fprintf(i32 %27, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.13, i64 0, i64 0))
  %29 = load i32, i32* @stdout, align 4
  %30 = call i32 @fprintf(i32 %29, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.14, i64 0, i64 0))
  %31 = load i32, i32* @stdout, align 4
  %32 = call i32 @fprintf(i32 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %33 = load i32, i32* @stdout, align 4
  %34 = call i32 @fprintf(i32 %33, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0))
  %35 = load i32, i32* @stdout, align 4
  %36 = call i32 @fprintf(i32 %35, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %37 = load i32, i32* @stdout, align 4
  %38 = call i32 @fprintf(i32 %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0))
  %39 = load i32, i32* @stdout, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17, i64 0, i64 0))
  %41 = load i32, i32* @stdout, align 4
  %42 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0))
  %43 = load i32, i32* @stdout, align 4
  %44 = call i32 @fprintf(i32 %43, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.19, i64 0, i64 0))
  %45 = load i32, i32* @stdout, align 4
  %46 = call i32 @fprintf(i32 %45, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.20, i64 0, i64 0))
  %47 = load i32, i32* @stdout, align 4
  %48 = call i32 @fprintf(i32 %47, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.21, i64 0, i64 0))
  %49 = load i32, i32* @stdout, align 4
  %50 = call i32 @fprintf(i32 %49, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.22, i64 0, i64 0))
  %51 = load i32, i32* @stdout, align 4
  %52 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.23, i64 0, i64 0))
  %53 = load i32, i32* @stdout, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0))
  %55 = load i32, i32* @stdout, align 4
  %56 = call i32 @fprintf(i32 %55, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.25, i64 0, i64 0))
  %57 = load i32, i32* @stdout, align 4
  %58 = call i32 @fprintf(i32 %57, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.26, i64 0, i64 0))
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 @fprintf(i32 %59, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0))
  %61 = load i32, i32* @stdout, align 4
  %62 = call i32 @fprintf(i32 %61, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.28, i64 0, i64 0))
  %63 = load i32, i32* @stdout, align 4
  %64 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.29, i64 0, i64 0))
  %65 = load i32, i32* @stdout, align 4
  %66 = call i32 @fprintf(i32 %65, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.30, i64 0, i64 0))
  %67 = load i32, i32* @stdout, align 4
  %68 = call i32 @fprintf(i32 %67, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.31, i64 0, i64 0))
  %69 = load i32, i32* @stdout, align 4
  %70 = call i32 @fprintf(i32 %69, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.32, i64 0, i64 0))
  %71 = load i32, i32* @stdout, align 4
  %72 = call i32 @fprintf(i32 %71, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.33, i64 0, i64 0))
  %73 = load i32, i32* @stdout, align 4
  %74 = call i32 @fprintf(i32 %73, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i64 0, i64 0))
  %75 = load i32, i32* @stdout, align 4
  %76 = call i32 @fprintf(i32 %75, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.35, i64 0, i64 0))
  %77 = load i32, i32* @stdout, align 4
  %78 = call i32 @fprintf(i32 %77, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.36, i64 0, i64 0))
  %79 = load i32, i32* @stdout, align 4
  %80 = call i32 @fprintf(i32 %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
