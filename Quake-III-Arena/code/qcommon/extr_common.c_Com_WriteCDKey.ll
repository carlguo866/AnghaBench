; ModuleID = '/home/carl/AnghaBench/Quake-III-Arena/code/qcommon/extr_common.c_Com_WriteCDKey.c'
source_filename = "/home/carl/AnghaBench/Quake-III-Arena/code/qcommon/extr_common.c_Com_WriteCDKey.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_OSPATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"%s/q3key\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Couldn't write %s.\0A\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"\0A// generated by quake, do not modify\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"// Do not give this file to ANYONE.\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [76 x i8] c"// id Software and Activision will NOT ask you to send this file to them.\0D\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*)* @Com_WriteCDKey to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @Com_WriteCDKey(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [17 x i8], align 16
  %9 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i32, i32* @MAX_OSPATH, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 @sprintf(i8* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* %14)
  %16 = getelementptr inbounds [17 x i8], [17 x i8]* %8, i64 0, i64 0
  %17 = load i8*, i8** %4, align 8
  %18 = call i32 @Q_strncpyz(i8* %16, i8* %17, i32 17)
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* %8, i64 0, i64 0
  %20 = call i32 @CL_CDKeyValidate(i8* %19, i32* null)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %2
  store i32 1, i32* %9, align 4
  br label %42

23:                                               ; preds = %2
  %24 = call i32 @FS_SV_FOpenFileWrite(i8* %13)
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* %5, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = load i8*, i8** %3, align 8
  %29 = call i32 @Com_Printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  store i32 1, i32* %9, align 4
  br label %42

30:                                               ; preds = %23
  %31 = getelementptr inbounds [17 x i8], [17 x i8]* %8, i64 0, i64 0
  %32 = load i32, i32* %5, align 4
  %33 = call i32 @FS_Write(i8* %31, i32 16, i32 %32)
  %34 = load i32, i32* %5, align 4
  %35 = call i32 @FS_Printf(i32 %34, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0))
  %36 = load i32, i32* %5, align 4
  %37 = call i32 @FS_Printf(i32 %36, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %38 = load i32, i32* %5, align 4
  %39 = call i32 @FS_Printf(i32 %38, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.4, i64 0, i64 0))
  %40 = load i32, i32* %5, align 4
  %41 = call i32 @FS_FCloseFile(i32 %40)
  store i32 0, i32* %9, align 4
  br label %42

42:                                               ; preds = %30, %27, %22
  %43 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %43)
  %44 = load i32, i32* %9, align 4
  switch i32 %44, label %46 [
    i32 0, label %45
    i32 1, label %45
  ]

45:                                               ; preds = %42, %42
  ret void

46:                                               ; preds = %42
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @Q_strncpyz(i8*, i8*, i32) #2

declare dso_local i32 @CL_CDKeyValidate(i8*, i32*) #2

declare dso_local i32 @FS_SV_FOpenFileWrite(i8*) #2

declare dso_local i32 @Com_Printf(i8*, i8*) #2

declare dso_local i32 @FS_Write(i8*, i32, i32) #2

declare dso_local i32 @FS_Printf(i32, i8*) #2

declare dso_local i32 @FS_FCloseFile(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
