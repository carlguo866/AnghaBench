; ModuleID = '/home/carl/AnghaBench/tengine/modules/ngx_http_lua_module/src/extr_ngx_http_lua_consts.c_ngx_http_lua_inject_http_consts.c'
source_filename = "/home/carl/AnghaBench/tengine/modules/ngx_http_lua_module/src/extr_ngx_http_lua_consts.c_ngx_http_lua_inject_http_consts.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NGX_HTTP_GET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"HTTP_GET\00", align 1
@NGX_HTTP_POST = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"HTTP_POST\00", align 1
@NGX_HTTP_PUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"HTTP_PUT\00", align 1
@NGX_HTTP_HEAD = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"HTTP_HEAD\00", align 1
@NGX_HTTP_DELETE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [12 x i8] c"HTTP_DELETE\00", align 1
@NGX_HTTP_OPTIONS = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"HTTP_OPTIONS\00", align 1
@NGX_HTTP_MKCOL = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [11 x i8] c"HTTP_MKCOL\00", align 1
@NGX_HTTP_COPY = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [10 x i8] c"HTTP_COPY\00", align 1
@NGX_HTTP_MOVE = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [10 x i8] c"HTTP_MOVE\00", align 1
@NGX_HTTP_PROPFIND = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [14 x i8] c"HTTP_PROPFIND\00", align 1
@NGX_HTTP_PROPPATCH = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [15 x i8] c"HTTP_PROPPATCH\00", align 1
@NGX_HTTP_LOCK = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [10 x i8] c"HTTP_LOCK\00", align 1
@NGX_HTTP_UNLOCK = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [12 x i8] c"HTTP_UNLOCK\00", align 1
@NGX_HTTP_PATCH = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [11 x i8] c"HTTP_PATCH\00", align 1
@NGX_HTTP_TRACE = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [11 x i8] c"HTTP_TRACE\00", align 1
@NGX_HTTP_CONTINUE = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [14 x i8] c"HTTP_CONTINUE\00", align 1
@NGX_HTTP_SWITCHING_PROTOCOLS = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [25 x i8] c"HTTP_SWITCHING_PROTOCOLS\00", align 1
@NGX_HTTP_OK = common dso_local global i32 0, align 4
@.str.17 = private unnamed_addr constant [8 x i8] c"HTTP_OK\00", align 1
@NGX_HTTP_CREATED = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [13 x i8] c"HTTP_CREATED\00", align 1
@NGX_HTTP_ACCEPTED = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [14 x i8] c"HTTP_ACCEPTED\00", align 1
@NGX_HTTP_NO_CONTENT = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [16 x i8] c"HTTP_NO_CONTENT\00", align 1
@NGX_HTTP_PARTIAL_CONTENT = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [21 x i8] c"HTTP_PARTIAL_CONTENT\00", align 1
@NGX_HTTP_SPECIAL_RESPONSE = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [22 x i8] c"HTTP_SPECIAL_RESPONSE\00", align 1
@NGX_HTTP_MOVED_PERMANENTLY = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [23 x i8] c"HTTP_MOVED_PERMANENTLY\00", align 1
@NGX_HTTP_MOVED_TEMPORARILY = common dso_local global i32 0, align 4
@.str.24 = private unnamed_addr constant [23 x i8] c"HTTP_MOVED_TEMPORARILY\00", align 1
@NGX_HTTP_PERMANENT_REDIRECT = common dso_local global i32 0, align 4
@.str.25 = private unnamed_addr constant [24 x i8] c"HTTP_PERMANENT_REDIRECT\00", align 1
@NGX_HTTP_NOT_MODIFIED = common dso_local global i32 0, align 4
@.str.26 = private unnamed_addr constant [18 x i8] c"HTTP_NOT_MODIFIED\00", align 1
@NGX_HTTP_TEMPORARY_REDIRECT = common dso_local global i32 0, align 4
@.str.27 = private unnamed_addr constant [24 x i8] c"HTTP_TEMPORARY_REDIRECT\00", align 1
@NGX_HTTP_BAD_REQUEST = common dso_local global i32 0, align 4
@.str.28 = private unnamed_addr constant [17 x i8] c"HTTP_BAD_REQUEST\00", align 1
@NGX_HTTP_UNAUTHORIZED = common dso_local global i32 0, align 4
@.str.29 = private unnamed_addr constant [18 x i8] c"HTTP_UNAUTHORIZED\00", align 1
@.str.30 = private unnamed_addr constant [22 x i8] c"HTTP_PAYMENT_REQUIRED\00", align 1
@NGX_HTTP_FORBIDDEN = common dso_local global i32 0, align 4
@.str.31 = private unnamed_addr constant [15 x i8] c"HTTP_FORBIDDEN\00", align 1
@NGX_HTTP_NOT_FOUND = common dso_local global i32 0, align 4
@.str.32 = private unnamed_addr constant [15 x i8] c"HTTP_NOT_FOUND\00", align 1
@NGX_HTTP_NOT_ALLOWED = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [17 x i8] c"HTTP_NOT_ALLOWED\00", align 1
@.str.34 = private unnamed_addr constant [20 x i8] c"HTTP_NOT_ACCEPTABLE\00", align 1
@NGX_HTTP_REQUEST_TIME_OUT = common dso_local global i32 0, align 4
@.str.35 = private unnamed_addr constant [21 x i8] c"HTTP_REQUEST_TIMEOUT\00", align 1
@NGX_HTTP_CONFLICT = common dso_local global i32 0, align 4
@.str.36 = private unnamed_addr constant [14 x i8] c"HTTP_CONFLICT\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"HTTP_GONE\00", align 1
@.str.38 = private unnamed_addr constant [22 x i8] c"HTTP_UPGRADE_REQUIRED\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"HTTP_TOO_MANY_REQUESTS\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"HTTP_ILLEGAL\00", align 1
@NGX_HTTP_CLOSE = common dso_local global i32 0, align 4
@.str.41 = private unnamed_addr constant [11 x i8] c"HTTP_CLOSE\00", align 1
@NGX_HTTP_INTERNAL_SERVER_ERROR = common dso_local global i32 0, align 4
@.str.42 = private unnamed_addr constant [27 x i8] c"HTTP_INTERNAL_SERVER_ERROR\00", align 1
@NGX_HTTP_NOT_IMPLEMENTED = common dso_local global i32 0, align 4
@.str.43 = private unnamed_addr constant [28 x i8] c"HTTP_METHOD_NOT_IMPLEMENTED\00", align 1
@NGX_HTTP_BAD_GATEWAY = common dso_local global i32 0, align 4
@.str.44 = private unnamed_addr constant [17 x i8] c"HTTP_BAD_GATEWAY\00", align 1
@NGX_HTTP_SERVICE_UNAVAILABLE = common dso_local global i32 0, align 4
@.str.45 = private unnamed_addr constant [25 x i8] c"HTTP_SERVICE_UNAVAILABLE\00", align 1
@NGX_HTTP_GATEWAY_TIME_OUT = common dso_local global i32 0, align 4
@.str.46 = private unnamed_addr constant [21 x i8] c"HTTP_GATEWAY_TIMEOUT\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"HTTP_VERSION_NOT_SUPPORTED\00", align 1
@NGX_HTTP_INSUFFICIENT_STORAGE = common dso_local global i32 0, align 4
@.str.48 = private unnamed_addr constant [26 x i8] c"HTTP_INSUFFICIENT_STORAGE\00", align 1
@NGX_HTTP_SEE_OTHER = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ngx_http_lua_inject_http_consts(i32* %0) #0 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  %3 = load i32*, i32** %2, align 8
  %4 = load i32, i32* @NGX_HTTP_GET, align 4
  %5 = call i32 @lua_pushinteger(i32* %3, i32 %4)
  %6 = load i32*, i32** %2, align 8
  %7 = call i32 @lua_setfield(i32* %6, i32 -2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %8 = load i32*, i32** %2, align 8
  %9 = load i32, i32* @NGX_HTTP_POST, align 4
  %10 = call i32 @lua_pushinteger(i32* %8, i32 %9)
  %11 = load i32*, i32** %2, align 8
  %12 = call i32 @lua_setfield(i32* %11, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32*, i32** %2, align 8
  %14 = load i32, i32* @NGX_HTTP_PUT, align 4
  %15 = call i32 @lua_pushinteger(i32* %13, i32 %14)
  %16 = load i32*, i32** %2, align 8
  %17 = call i32 @lua_setfield(i32* %16, i32 -2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %18 = load i32*, i32** %2, align 8
  %19 = load i32, i32* @NGX_HTTP_HEAD, align 4
  %20 = call i32 @lua_pushinteger(i32* %18, i32 %19)
  %21 = load i32*, i32** %2, align 8
  %22 = call i32 @lua_setfield(i32* %21, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %23 = load i32*, i32** %2, align 8
  %24 = load i32, i32* @NGX_HTTP_DELETE, align 4
  %25 = call i32 @lua_pushinteger(i32* %23, i32 %24)
  %26 = load i32*, i32** %2, align 8
  %27 = call i32 @lua_setfield(i32* %26, i32 -2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %28 = load i32*, i32** %2, align 8
  %29 = load i32, i32* @NGX_HTTP_OPTIONS, align 4
  %30 = call i32 @lua_pushinteger(i32* %28, i32 %29)
  %31 = load i32*, i32** %2, align 8
  %32 = call i32 @lua_setfield(i32* %31, i32 -2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %33 = load i32*, i32** %2, align 8
  %34 = load i32, i32* @NGX_HTTP_MKCOL, align 4
  %35 = call i32 @lua_pushinteger(i32* %33, i32 %34)
  %36 = load i32*, i32** %2, align 8
  %37 = call i32 @lua_setfield(i32* %36, i32 -2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0))
  %38 = load i32*, i32** %2, align 8
  %39 = load i32, i32* @NGX_HTTP_COPY, align 4
  %40 = call i32 @lua_pushinteger(i32* %38, i32 %39)
  %41 = load i32*, i32** %2, align 8
  %42 = call i32 @lua_setfield(i32* %41, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %43 = load i32*, i32** %2, align 8
  %44 = load i32, i32* @NGX_HTTP_MOVE, align 4
  %45 = call i32 @lua_pushinteger(i32* %43, i32 %44)
  %46 = load i32*, i32** %2, align 8
  %47 = call i32 @lua_setfield(i32* %46, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0))
  %48 = load i32*, i32** %2, align 8
  %49 = load i32, i32* @NGX_HTTP_PROPFIND, align 4
  %50 = call i32 @lua_pushinteger(i32* %48, i32 %49)
  %51 = load i32*, i32** %2, align 8
  %52 = call i32 @lua_setfield(i32* %51, i32 -2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0))
  %53 = load i32*, i32** %2, align 8
  %54 = load i32, i32* @NGX_HTTP_PROPPATCH, align 4
  %55 = call i32 @lua_pushinteger(i32* %53, i32 %54)
  %56 = load i32*, i32** %2, align 8
  %57 = call i32 @lua_setfield(i32* %56, i32 -2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0))
  %58 = load i32*, i32** %2, align 8
  %59 = load i32, i32* @NGX_HTTP_LOCK, align 4
  %60 = call i32 @lua_pushinteger(i32* %58, i32 %59)
  %61 = load i32*, i32** %2, align 8
  %62 = call i32 @lua_setfield(i32* %61, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0))
  %63 = load i32*, i32** %2, align 8
  %64 = load i32, i32* @NGX_HTTP_UNLOCK, align 4
  %65 = call i32 @lua_pushinteger(i32* %63, i32 %64)
  %66 = load i32*, i32** %2, align 8
  %67 = call i32 @lua_setfield(i32* %66, i32 -2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0))
  %68 = load i32*, i32** %2, align 8
  %69 = load i32, i32* @NGX_HTTP_PATCH, align 4
  %70 = call i32 @lua_pushinteger(i32* %68, i32 %69)
  %71 = load i32*, i32** %2, align 8
  %72 = call i32 @lua_setfield(i32* %71, i32 -2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i64 0, i64 0))
  %73 = load i32*, i32** %2, align 8
  %74 = load i32, i32* @NGX_HTTP_TRACE, align 4
  %75 = call i32 @lua_pushinteger(i32* %73, i32 %74)
  %76 = load i32*, i32** %2, align 8
  %77 = call i32 @lua_setfield(i32* %76, i32 -2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0))
  %78 = load i32*, i32** %2, align 8
  %79 = load i32, i32* @NGX_HTTP_CONTINUE, align 4
  %80 = call i32 @lua_pushinteger(i32* %78, i32 %79)
  %81 = load i32*, i32** %2, align 8
  %82 = call i32 @lua_setfield(i32* %81, i32 -2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0))
  %83 = load i32*, i32** %2, align 8
  %84 = load i32, i32* @NGX_HTTP_SWITCHING_PROTOCOLS, align 4
  %85 = call i32 @lua_pushinteger(i32* %83, i32 %84)
  %86 = load i32*, i32** %2, align 8
  %87 = call i32 @lua_setfield(i32* %86, i32 -2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0))
  %88 = load i32*, i32** %2, align 8
  %89 = load i32, i32* @NGX_HTTP_OK, align 4
  %90 = call i32 @lua_pushinteger(i32* %88, i32 %89)
  %91 = load i32*, i32** %2, align 8
  %92 = call i32 @lua_setfield(i32* %91, i32 -2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  %93 = load i32*, i32** %2, align 8
  %94 = load i32, i32* @NGX_HTTP_CREATED, align 4
  %95 = call i32 @lua_pushinteger(i32* %93, i32 %94)
  %96 = load i32*, i32** %2, align 8
  %97 = call i32 @lua_setfield(i32* %96, i32 -2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0))
  %98 = load i32*, i32** %2, align 8
  %99 = load i32, i32* @NGX_HTTP_ACCEPTED, align 4
  %100 = call i32 @lua_pushinteger(i32* %98, i32 %99)
  %101 = load i32*, i32** %2, align 8
  %102 = call i32 @lua_setfield(i32* %101, i32 -2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0))
  %103 = load i32*, i32** %2, align 8
  %104 = load i32, i32* @NGX_HTTP_NO_CONTENT, align 4
  %105 = call i32 @lua_pushinteger(i32* %103, i32 %104)
  %106 = load i32*, i32** %2, align 8
  %107 = call i32 @lua_setfield(i32* %106, i32 -2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0))
  %108 = load i32*, i32** %2, align 8
  %109 = load i32, i32* @NGX_HTTP_PARTIAL_CONTENT, align 4
  %110 = call i32 @lua_pushinteger(i32* %108, i32 %109)
  %111 = load i32*, i32** %2, align 8
  %112 = call i32 @lua_setfield(i32* %111, i32 -2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0))
  %113 = load i32*, i32** %2, align 8
  %114 = load i32, i32* @NGX_HTTP_SPECIAL_RESPONSE, align 4
  %115 = call i32 @lua_pushinteger(i32* %113, i32 %114)
  %116 = load i32*, i32** %2, align 8
  %117 = call i32 @lua_setfield(i32* %116, i32 -2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0))
  %118 = load i32*, i32** %2, align 8
  %119 = load i32, i32* @NGX_HTTP_MOVED_PERMANENTLY, align 4
  %120 = call i32 @lua_pushinteger(i32* %118, i32 %119)
  %121 = load i32*, i32** %2, align 8
  %122 = call i32 @lua_setfield(i32* %121, i32 -2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0))
  %123 = load i32*, i32** %2, align 8
  %124 = load i32, i32* @NGX_HTTP_MOVED_TEMPORARILY, align 4
  %125 = call i32 @lua_pushinteger(i32* %123, i32 %124)
  %126 = load i32*, i32** %2, align 8
  %127 = call i32 @lua_setfield(i32* %126, i32 -2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.24, i64 0, i64 0))
  %128 = load i32*, i32** %2, align 8
  %129 = load i32, i32* @NGX_HTTP_PERMANENT_REDIRECT, align 4
  %130 = call i32 @lua_pushinteger(i32* %128, i32 %129)
  %131 = load i32*, i32** %2, align 8
  %132 = call i32 @lua_setfield(i32* %131, i32 -2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0))
  %133 = load i32*, i32** %2, align 8
  %134 = load i32, i32* @NGX_HTTP_NOT_MODIFIED, align 4
  %135 = call i32 @lua_pushinteger(i32* %133, i32 %134)
  %136 = load i32*, i32** %2, align 8
  %137 = call i32 @lua_setfield(i32* %136, i32 -2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i64 0, i64 0))
  %138 = load i32*, i32** %2, align 8
  %139 = load i32, i32* @NGX_HTTP_TEMPORARY_REDIRECT, align 4
  %140 = call i32 @lua_pushinteger(i32* %138, i32 %139)
  %141 = load i32*, i32** %2, align 8
  %142 = call i32 @lua_setfield(i32* %141, i32 -2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0))
  %143 = load i32*, i32** %2, align 8
  %144 = load i32, i32* @NGX_HTTP_BAD_REQUEST, align 4
  %145 = call i32 @lua_pushinteger(i32* %143, i32 %144)
  %146 = load i32*, i32** %2, align 8
  %147 = call i32 @lua_setfield(i32* %146, i32 -2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.28, i64 0, i64 0))
  %148 = load i32*, i32** %2, align 8
  %149 = load i32, i32* @NGX_HTTP_UNAUTHORIZED, align 4
  %150 = call i32 @lua_pushinteger(i32* %148, i32 %149)
  %151 = load i32*, i32** %2, align 8
  %152 = call i32 @lua_setfield(i32* %151, i32 -2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i64 0, i64 0))
  %153 = load i32*, i32** %2, align 8
  %154 = call i32 @lua_pushinteger(i32* %153, i32 402)
  %155 = load i32*, i32** %2, align 8
  %156 = call i32 @lua_setfield(i32* %155, i32 -2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0))
  %157 = load i32*, i32** %2, align 8
  %158 = load i32, i32* @NGX_HTTP_FORBIDDEN, align 4
  %159 = call i32 @lua_pushinteger(i32* %157, i32 %158)
  %160 = load i32*, i32** %2, align 8
  %161 = call i32 @lua_setfield(i32* %160, i32 -2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i64 0, i64 0))
  %162 = load i32*, i32** %2, align 8
  %163 = load i32, i32* @NGX_HTTP_NOT_FOUND, align 4
  %164 = call i32 @lua_pushinteger(i32* %162, i32 %163)
  %165 = load i32*, i32** %2, align 8
  %166 = call i32 @lua_setfield(i32* %165, i32 -2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0))
  %167 = load i32*, i32** %2, align 8
  %168 = load i32, i32* @NGX_HTTP_NOT_ALLOWED, align 4
  %169 = call i32 @lua_pushinteger(i32* %167, i32 %168)
  %170 = load i32*, i32** %2, align 8
  %171 = call i32 @lua_setfield(i32* %170, i32 -2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0))
  %172 = load i32*, i32** %2, align 8
  %173 = call i32 @lua_pushinteger(i32* %172, i32 406)
  %174 = load i32*, i32** %2, align 8
  %175 = call i32 @lua_setfield(i32* %174, i32 -2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i64 0, i64 0))
  %176 = load i32*, i32** %2, align 8
  %177 = load i32, i32* @NGX_HTTP_REQUEST_TIME_OUT, align 4
  %178 = call i32 @lua_pushinteger(i32* %176, i32 %177)
  %179 = load i32*, i32** %2, align 8
  %180 = call i32 @lua_setfield(i32* %179, i32 -2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0))
  %181 = load i32*, i32** %2, align 8
  %182 = load i32, i32* @NGX_HTTP_CONFLICT, align 4
  %183 = call i32 @lua_pushinteger(i32* %181, i32 %182)
  %184 = load i32*, i32** %2, align 8
  %185 = call i32 @lua_setfield(i32* %184, i32 -2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i64 0, i64 0))
  %186 = load i32*, i32** %2, align 8
  %187 = call i32 @lua_pushinteger(i32* %186, i32 410)
  %188 = load i32*, i32** %2, align 8
  %189 = call i32 @lua_setfield(i32* %188, i32 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0))
  %190 = load i32*, i32** %2, align 8
  %191 = call i32 @lua_pushinteger(i32* %190, i32 426)
  %192 = load i32*, i32** %2, align 8
  %193 = call i32 @lua_setfield(i32* %192, i32 -2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38, i64 0, i64 0))
  %194 = load i32*, i32** %2, align 8
  %195 = call i32 @lua_pushinteger(i32* %194, i32 429)
  %196 = load i32*, i32** %2, align 8
  %197 = call i32 @lua_setfield(i32* %196, i32 -2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.39, i64 0, i64 0))
  %198 = load i32*, i32** %2, align 8
  %199 = call i32 @lua_pushinteger(i32* %198, i32 451)
  %200 = load i32*, i32** %2, align 8
  %201 = call i32 @lua_setfield(i32* %200, i32 -2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0))
  %202 = load i32*, i32** %2, align 8
  %203 = load i32, i32* @NGX_HTTP_CLOSE, align 4
  %204 = call i32 @lua_pushinteger(i32* %202, i32 %203)
  %205 = load i32*, i32** %2, align 8
  %206 = call i32 @lua_setfield(i32* %205, i32 -2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0))
  %207 = load i32*, i32** %2, align 8
  %208 = load i32, i32* @NGX_HTTP_INTERNAL_SERVER_ERROR, align 4
  %209 = call i32 @lua_pushinteger(i32* %207, i32 %208)
  %210 = load i32*, i32** %2, align 8
  %211 = call i32 @lua_setfield(i32* %210, i32 -2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42, i64 0, i64 0))
  %212 = load i32*, i32** %2, align 8
  %213 = load i32, i32* @NGX_HTTP_NOT_IMPLEMENTED, align 4
  %214 = call i32 @lua_pushinteger(i32* %212, i32 %213)
  %215 = load i32*, i32** %2, align 8
  %216 = call i32 @lua_setfield(i32* %215, i32 -2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.43, i64 0, i64 0))
  %217 = load i32*, i32** %2, align 8
  %218 = load i32, i32* @NGX_HTTP_BAD_GATEWAY, align 4
  %219 = call i32 @lua_pushinteger(i32* %217, i32 %218)
  %220 = load i32*, i32** %2, align 8
  %221 = call i32 @lua_setfield(i32* %220, i32 -2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.44, i64 0, i64 0))
  %222 = load i32*, i32** %2, align 8
  %223 = load i32, i32* @NGX_HTTP_SERVICE_UNAVAILABLE, align 4
  %224 = call i32 @lua_pushinteger(i32* %222, i32 %223)
  %225 = load i32*, i32** %2, align 8
  %226 = call i32 @lua_setfield(i32* %225, i32 -2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0))
  %227 = load i32*, i32** %2, align 8
  %228 = load i32, i32* @NGX_HTTP_GATEWAY_TIME_OUT, align 4
  %229 = call i32 @lua_pushinteger(i32* %227, i32 %228)
  %230 = load i32*, i32** %2, align 8
  %231 = call i32 @lua_setfield(i32* %230, i32 -2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i64 0, i64 0))
  %232 = load i32*, i32** %2, align 8
  %233 = call i32 @lua_pushinteger(i32* %232, i32 505)
  %234 = load i32*, i32** %2, align 8
  %235 = call i32 @lua_setfield(i32* %234, i32 -2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i64 0, i64 0))
  %236 = load i32*, i32** %2, align 8
  %237 = load i32, i32* @NGX_HTTP_INSUFFICIENT_STORAGE, align 4
  %238 = call i32 @lua_pushinteger(i32* %236, i32 %237)
  %239 = load i32*, i32** %2, align 8
  %240 = call i32 @lua_setfield(i32* %239, i32 -2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.48, i64 0, i64 0))
  ret void
}

declare dso_local i32 @lua_pushinteger(i32*, i32) #1

declare dso_local i32 @lua_setfield(i32*, i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
