; ModuleID = '/home/carl/AnghaBench/the_silver_searcher/src/extr_options.c_usage.c'
source_filename = "/home/carl/AnghaBench/the_silver_searcher/src/extr_options.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"Usage: ag [FILE-TYPE] [OPTIONS] PATTERN [PATH]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"  Recursively search for PATTERN in PATH.\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"  Like grep or ack, but faster.\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Example:\0A  ag -i foo /bar/\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [785 x i8] c"Output Options:\0A     --ackmate            Print results in AckMate-parseable format\0A  -A --after [LINES]      Print lines after match (Default: 2)\0A  -B --before [LINES]     Print lines before match (Default: 2)\0A     --[no]break          Print newlines between matches in different files\0A                          (Enabled by default)\0A  -c --count              Only print the number of matches in each file.\0A                          (This often differs from the number of matching lines)\0A     --[no]color          Print color codes in results (Enabled by default)\0A     --color-line-number  Color codes for line numbers (Default: 1;33)\0A     --color-match        Color codes for result match numbers (Default: 30;43)\0A     --color-path         Color codes for path names (Default: 1;32)\0A\00", align 1
@.str.6 = private unnamed_addr constant [3651 x i8] c"     --column             Print column numbers in results\0A     --[no]filename       Print file names (Enabled unless searching a single file)\0A  -H --[no]heading        Print file names before each file's matches\0A                          (Enabled by default)\0A  -C --context [LINES]    Print lines before and after matches (Default: 2)\0A     --[no]group          Same as --[no]break --[no]heading\0A  -g --filename-pattern PATTERN\0A                          Print filenames matching PATTERN\0A  -l --files-with-matches Only print filenames that contain matches\0A                          (don't print the matching lines)\0A  -L --files-without-matches\0A                          Only print filenames that don't contain matches\0A     --print-all-files    Print headings for all files searched, even those that\0A                          don't contain matches\0A     --[no]numbers        Print line numbers. Default is to omit line numbers\0A                          when searching streams\0A  -o --only-matching      Prints only the matching part of the lines\0A     --print-long-lines   Print matches on very long lines (Default: >2k characters)\0A     --passthrough        When searching a stream, print all lines even if they\0A                          don't match\0A     --silent             Suppress all log messages, including errors\0A     --stats              Print stats (files scanned, time taken, etc.)\0A     --stats-only         Print stats and nothing else.\0A                          (Same as --count when searching a single file)\0A     --vimgrep            Print results like vim's :vimgrep /pattern/g would\0A                          (it reports every match on the line)\0A  -0 --null --print0      Separate filenames with null (for 'xargs -0')\0A\0ASearch Options:\0A  -a --all-types          Search all files (doesn't include hidden files\0A                          or patterns from ignore files)\0A  -D --debug              Ridiculous debugging (probably not useful)\0A     --depth NUM          Search up to NUM directories deep (Default: 25)\0A  -f --follow             Follow symlinks\0A  -F --fixed-strings      Alias for --literal for compatibility with grep\0A  -G --file-search-regex  PATTERN Limit search to filenames matching PATTERN\0A     --hidden             Search hidden files (obeys .*ignore files)\0A  -i --ignore-case        Match case insensitively\0A     --ignore PATTERN     Ignore files/directories matching PATTERN\0A                          (literal file/directory names also allowed)\0A     --ignore-dir NAME    Alias for --ignore for compatibility with ack.\0A  -m --max-count NUM      Skip the rest of a file after NUM matches (Default: 10,000)\0A     --one-device         Don't follow links to other devices.\0A  -p --path-to-ignore STRING\0A                          Use .ignore file at STRING\0A  -Q --literal            Don't parse PATTERN as a regular expression\0A  -s --case-sensitive     Match case sensitively\0A  -S --smart-case         Match case insensitively unless PATTERN contains\0A                          uppercase characters (Enabled by default)\0A     --search-binary      Search binary files for matches\0A  -t --all-text           Search all text files (doesn't include hidden files)\0A  -u --unrestricted       Search all files (ignore .ignore, .gitignore, etc.;\0A                          searches binary and hidden files as well)\0A  -U --skip-vcs-ignores   Ignore VCS ignore files\0A                          (.gitignore, .hgignore; still obey .ignore)\0A  -v --invert-match\0A  -w --word-regexp        Only match whole words\0A  -W --width NUM          Truncate match lines after NUM characters\0A  -z --search-zip         Search contents of compressed (e.g., gzip) files\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [365 x i8] c"File Types:\0AThe search can be restricted to certain types of files. Example:\0A  ag --html needle\0A  - Searches for 'needle' in files with suffix .htm, .html, .shtml or .xhtml.\0A\0AFor a list of supported file types run:\0A  ag --list-file-types\0A\0Aag was originally created by Geoff Greer. More information (and the latest release)\0Acan be found at http://geoff.greer.fm/ag\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @usage() #0 {
  %1 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0))
  %3 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %4 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %5 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %6 = call i32 @printf(i8* getelementptr inbounds ([785 x i8], [785 x i8]* @.str.5, i64 0, i64 0))
  %7 = call i32 @printf(i8* getelementptr inbounds ([3651 x i8], [3651 x i8]* @.str.6, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([365 x i8], [365 x i8]* @.str.7, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
