; ModuleID = '/home/carl/AnghaBench/postgres/src/bin/psql/extr_help.c_helpVariables.c'
source_filename = "/home/carl/AnghaBench/postgres/src/bin/psql/extr_help.c_helpVariables.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32 }

@pset = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@.str = private unnamed_addr constant [38 x i8] c"List of specially treated variables\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"psql variables:\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"Usage:\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"  psql --set=NAME=VALUE\0A  or \\set NAME VALUE inside psql\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"  AUTOCOMMIT\0A    if set, successful SQL commands are automatically committed\0A\00", align 1
@.str.5 = private unnamed_addr constant [127 x i8] c"  COMP_KEYWORD_CASE\0A    determines the case used to complete SQL key words\0A    [lower, upper, preserve-lower, preserve-upper]\0A\00", align 1
@.str.6 = private unnamed_addr constant [52 x i8] c"  DBNAME\0A    the currently connected database name\0A\00", align 1
@.str.7 = private unnamed_addr constant [95 x i8] c"  ECHO\0A    controls what input is written to standard output\0A    [all, errors, none, queries]\0A\00", align 1
@.str.8 = private unnamed_addr constant [141 x i8] c"  ECHO_HIDDEN\0A    if set, display internal queries executed by backslash commands;\0A    if set to \22noexec\22, just show them without execution\0A\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"  ENCODING\0A    current client character set encoding\0A\00", align 1
@.str.10 = private unnamed_addr constant [51 x i8] c"  ERROR\0A    true if last query failed, else false\0A\00", align 1
@.str.11 = private unnamed_addr constant [92 x i8] c"  FETCH_COUNT\0A    the number of result rows to fetch and display at a time (0 = unlimited)\0A\00", align 1
@.str.12 = private unnamed_addr constant [67 x i8] c"  HIDE_TABLEAM\0A    if set, table access methods are not displayed\0A\00", align 1
@.str.13 = private unnamed_addr constant [82 x i8] c"  HISTCONTROL\0A    controls command history [ignorespace, ignoredups, ignoreboth]\0A\00", align 1
@.str.14 = private unnamed_addr constant [60 x i8] c"  HISTFILE\0A    file name used to store the command history\0A\00", align 1
@.str.15 = private unnamed_addr constant [75 x i8] c"  HISTSIZE\0A    maximum number of commands to store in the command history\0A\00", align 1
@.str.16 = private unnamed_addr constant [57 x i8] c"  HOST\0A    the currently connected database server host\0A\00", align 1
@.str.17 = private unnamed_addr constant [75 x i8] c"  IGNOREEOF\0A    number of EOFs needed to terminate an interactive session\0A\00", align 1
@.str.18 = private unnamed_addr constant [46 x i8] c"  LASTOID\0A    value of the last affected OID\0A\00", align 1
@.str.19 = private unnamed_addr constant [120 x i8] c"  LAST_ERROR_MESSAGE\0A  LAST_ERROR_SQLSTATE\0A    message and SQLSTATE of last error, or empty string and \2200000\22 if none\0A\00", align 1
@.str.20 = private unnamed_addr constant [96 x i8] c"  ON_ERROR_ROLLBACK\0A    if set, an error doesn't stop a transaction (uses implicit savepoints)\0A\00", align 1
@.str.21 = private unnamed_addr constant [54 x i8] c"  ON_ERROR_STOP\0A    stop batch execution after error\0A\00", align 1
@.str.22 = private unnamed_addr constant [50 x i8] c"  PORT\0A    server port of the current connection\0A\00", align 1
@.str.23 = private unnamed_addr constant [50 x i8] c"  PROMPT1\0A    specifies the standard psql prompt\0A\00", align 1
@.str.24 = private unnamed_addr constant [89 x i8] c"  PROMPT2\0A    specifies the prompt used when a statement continues from a previous line\0A\00", align 1
@.str.25 = private unnamed_addr constant [68 x i8] c"  PROMPT3\0A    specifies the prompt used during COPY ... FROM STDIN\0A\00", align 1
@.str.26 = private unnamed_addr constant [45 x i8] c"  QUIET\0A    run quietly (same as -q option)\0A\00", align 1
@.str.27 = private unnamed_addr constant [73 x i8] c"  ROW_COUNT\0A    number of rows returned or affected by last query, or 0\0A\00", align 1
@.str.28 = private unnamed_addr constant [101 x i8] c"  SERVER_VERSION_NAME\0A  SERVER_VERSION_NUM\0A    server's version (in short string or numeric format)\0A\00", align 1
@.str.29 = private unnamed_addr constant [87 x i8] c"  SHOW_CONTEXT\0A    controls display of message context fields [never, errors, always]\0A\00", align 1
@.str.30 = private unnamed_addr constant [82 x i8] c"  SINGLELINE\0A    if set, end of line terminates SQL commands (same as -S option)\0A\00", align 1
@.str.31 = private unnamed_addr constant [55 x i8] c"  SINGLESTEP\0A    single-step mode (same as -s option)\0A\00", align 1
@.str.32 = private unnamed_addr constant [63 x i8] c"  SQLSTATE\0A    SQLSTATE of last query, or \2200000\22 if no error\0A\00", align 1
@.str.33 = private unnamed_addr constant [50 x i8] c"  USER\0A    the currently connected database user\0A\00", align 1
@.str.34 = private unnamed_addr constant [89 x i8] c"  VERBOSITY\0A    controls verbosity of error reports [default, verbose, terse, sqlstate]\0A\00", align 1
@.str.35 = private unnamed_addr constant [112 x i8] c"  VERSION\0A  VERSION_NAME\0A  VERSION_NUM\0A    psql's version (in verbose string, short string, or numeric format)\0A\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c"\0ADisplay settings:\0A\00", align 1
@.str.37 = private unnamed_addr constant [65 x i8] c"  psql --pset=NAME[=VALUE]\0A  or \\pset NAME [VALUE] inside psql\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [36 x i8] c"  border\0A    border style (number)\0A\00", align 1
@.str.39 = private unnamed_addr constant [51 x i8] c"  columns\0A    target width for the wrapped format\0A\00", align 1
@.str.40 = private unnamed_addr constant [55 x i8] c"  expanded (or x)\0A    expanded output [on, off, auto]\0A\00", align 1
@.str.41 = private unnamed_addr constant [68 x i8] c"  fieldsep\0A    field separator for unaligned output (default \22%s\22)\0A\00", align 1
@DEFAULT_FIELD_SEP = common dso_local global i8* null, align 8
@.str.42 = private unnamed_addr constant [77 x i8] c"  fieldsep_zero\0A    set field separator for unaligned output to a zero byte\0A\00", align 1
@.str.43 = private unnamed_addr constant [70 x i8] c"  footer\0A    enable or disable display of the table footer [on, off]\0A\00", align 1
@.str.44 = private unnamed_addr constant [83 x i8] c"  format\0A    set output format [unaligned, aligned, wrapped, html, asciidoc, ...]\0A\00", align 1
@.str.45 = private unnamed_addr constant [79 x i8] c"  linestyle\0A    set the border line drawing style [ascii, old-ascii, unicode]\0A\00", align 1
@.str.46 = private unnamed_addr constant [66 x i8] c"  null\0A    set the string to be printed in place of a null value\0A\00", align 1
@.str.47 = private unnamed_addr constant [96 x i8] c"  numericlocale\0A    enable display of a locale-specific character to separate groups of digits\0A\00", align 1
@.str.48 = private unnamed_addr constant [70 x i8] c"  pager\0A    control when an external pager is used [yes, no, always]\0A\00", align 1
@.str.49 = private unnamed_addr constant [62 x i8] c"  recordsep\0A    record (line) separator for unaligned output\0A\00", align 1
@.str.50 = private unnamed_addr constant [79 x i8] c"  recordsep_zero\0A    set record separator for unaligned output to a zero byte\0A\00", align 1
@.str.51 = private unnamed_addr constant [161 x i8] c"  tableattr (or T)\0A    specify attributes for table tag in html format, or proportional\0A    column widths for left-aligned data types in latex-longtable format\0A\00", align 1
@.str.52 = private unnamed_addr constant [65 x i8] c"  title\0A    set the table title for subsequently printed tables\0A\00", align 1
@.str.53 = private unnamed_addr constant [59 x i8] c"  tuples_only\0A    if set, only actual table data is shown\0A\00", align 1
@.str.54 = private unnamed_addr constant [141 x i8] c"  unicode_border_linestyle\0A  unicode_column_linestyle\0A  unicode_header_linestyle\0A    set the style of Unicode line drawing [single, double]\0A\00", align 1
@.str.55 = private unnamed_addr constant [25 x i8] c"\0AEnvironment variables:\0A\00", align 1
@.str.56 = private unnamed_addr constant [75 x i8] c"  NAME=VALUE [NAME=VALUE] psql ...\0A  or \\setenv NAME [VALUE] inside psql\0A\0A\00", align 1
@.str.57 = private unnamed_addr constant [52 x i8] c"  COLUMNS\0A    number of columns for wrapped format\0A\00", align 1
@.str.58 = private unnamed_addr constant [67 x i8] c"  PGAPPNAME\0A    same as the application_name connection parameter\0A\00", align 1
@.str.59 = private unnamed_addr constant [58 x i8] c"  PGDATABASE\0A    same as the dbname connection parameter\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"  PGHOST\0A    same as the host connection parameter\0A\00", align 1
@.str.61 = private unnamed_addr constant [56 x i8] c"  PGPASSWORD\0A    connection password (not recommended)\0A\00", align 1
@.str.62 = private unnamed_addr constant [37 x i8] c"  PGPASSFILE\0A    password file name\0A\00", align 1
@.str.63 = private unnamed_addr constant [52 x i8] c"  PGPORT\0A    same as the port connection parameter\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"  PGUSER\0A    same as the user connection parameter\0A\00", align 1
@.str.65 = private unnamed_addr constant [80 x i8] c"  PSQL_EDITOR, EDITOR, VISUAL\0A    editor used by the \\e, \\ef, and \\ev commands\0A\00", align 1
@.str.66 = private unnamed_addr constant [88 x i8] c"  PSQL_EDITOR_LINENUMBER_ARG\0A    how to specify a line number when invoking the editor\0A\00", align 1
@.str.67 = private unnamed_addr constant [70 x i8] c"  PSQL_HISTORY\0A    alternative location for the command history file\0A\00", align 1
@.str.68 = private unnamed_addr constant [56 x i8] c"  PSQL_PAGER, PAGER\0A    name of external pager program\0A\00", align 1
@.str.69 = private unnamed_addr constant [63 x i8] c"  PSQLRC\0A    alternative location for the user's .psqlrc file\0A\00", align 1
@.str.70 = private unnamed_addr constant [42 x i8] c"  SHELL\0A    shell used by the \\! command\0A\00", align 1
@.str.71 = private unnamed_addr constant [44 x i8] c"  TMPDIR\0A    directory for temporary files\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @helpVariables(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca i32*, align 8
  store i16 %0, i16* %2, align 2
  %4 = load i16, i16* %2, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp ne i32 %5, 0
  %7 = zext i1 %6 to i64
  %8 = select i1 %6, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @pset, i32 0, i32 0, i32 0), i32* null
  %9 = call i32* @PageOutput(i32 158, i32* %8)
  store i32* %9, i32** %3, align 8
  %10 = load i32*, i32** %3, align 8
  %11 = call i8* @_(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 (i32*, i8*, ...) @fprintf(i32* %10, i8* %11)
  %13 = load i32*, i32** %3, align 8
  %14 = call i8* @_(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 (i32*, i8*, ...) @fprintf(i32* %13, i8* %14)
  %16 = load i32*, i32** %3, align 8
  %17 = call i8* @_(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 (i32*, i8*, ...) @fprintf(i32* %16, i8* %17)
  %19 = load i32*, i32** %3, align 8
  %20 = call i8* @_(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %21 = call i32 (i32*, i8*, ...) @fprintf(i32* %19, i8* %20)
  %22 = load i32*, i32** %3, align 8
  %23 = call i8* @_(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0))
  %24 = call i32 (i32*, i8*, ...) @fprintf(i32* %22, i8* %23)
  %25 = load i32*, i32** %3, align 8
  %26 = call i8* @_(i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.5, i64 0, i64 0))
  %27 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* %26)
  %28 = load i32*, i32** %3, align 8
  %29 = call i8* @_(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.6, i64 0, i64 0))
  %30 = call i32 (i32*, i8*, ...) @fprintf(i32* %28, i8* %29)
  %31 = load i32*, i32** %3, align 8
  %32 = call i8* @_(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  %33 = call i32 (i32*, i8*, ...) @fprintf(i32* %31, i8* %32)
  %34 = load i32*, i32** %3, align 8
  %35 = call i8* @_(i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.8, i64 0, i64 0))
  %36 = call i32 (i32*, i8*, ...) @fprintf(i32* %34, i8* %35)
  %37 = load i32*, i32** %3, align 8
  %38 = call i8* @_(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0))
  %39 = call i32 (i32*, i8*, ...) @fprintf(i32* %37, i8* %38)
  %40 = load i32*, i32** %3, align 8
  %41 = call i8* @_(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.10, i64 0, i64 0))
  %42 = call i32 (i32*, i8*, ...) @fprintf(i32* %40, i8* %41)
  %43 = load i32*, i32** %3, align 8
  %44 = call i8* @_(i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.11, i64 0, i64 0))
  %45 = call i32 (i32*, i8*, ...) @fprintf(i32* %43, i8* %44)
  %46 = load i32*, i32** %3, align 8
  %47 = call i8* @_(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.12, i64 0, i64 0))
  %48 = call i32 (i32*, i8*, ...) @fprintf(i32* %46, i8* %47)
  %49 = load i32*, i32** %3, align 8
  %50 = call i8* @_(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.13, i64 0, i64 0))
  %51 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* %50)
  %52 = load i32*, i32** %3, align 8
  %53 = call i8* @_(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.14, i64 0, i64 0))
  %54 = call i32 (i32*, i8*, ...) @fprintf(i32* %52, i8* %53)
  %55 = load i32*, i32** %3, align 8
  %56 = call i8* @_(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.15, i64 0, i64 0))
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %55, i8* %56)
  %58 = load i32*, i32** %3, align 8
  %59 = call i8* @_(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.16, i64 0, i64 0))
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %58, i8* %59)
  %61 = load i32*, i32** %3, align 8
  %62 = call i8* @_(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.17, i64 0, i64 0))
  %63 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* %62)
  %64 = load i32*, i32** %3, align 8
  %65 = call i8* @_(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.18, i64 0, i64 0))
  %66 = call i32 (i32*, i8*, ...) @fprintf(i32* %64, i8* %65)
  %67 = load i32*, i32** %3, align 8
  %68 = call i8* @_(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.19, i64 0, i64 0))
  %69 = call i32 (i32*, i8*, ...) @fprintf(i32* %67, i8* %68)
  %70 = load i32*, i32** %3, align 8
  %71 = call i8* @_(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.20, i64 0, i64 0))
  %72 = call i32 (i32*, i8*, ...) @fprintf(i32* %70, i8* %71)
  %73 = load i32*, i32** %3, align 8
  %74 = call i8* @_(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.21, i64 0, i64 0))
  %75 = call i32 (i32*, i8*, ...) @fprintf(i32* %73, i8* %74)
  %76 = load i32*, i32** %3, align 8
  %77 = call i8* @_(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.22, i64 0, i64 0))
  %78 = call i32 (i32*, i8*, ...) @fprintf(i32* %76, i8* %77)
  %79 = load i32*, i32** %3, align 8
  %80 = call i8* @_(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.23, i64 0, i64 0))
  %81 = call i32 (i32*, i8*, ...) @fprintf(i32* %79, i8* %80)
  %82 = load i32*, i32** %3, align 8
  %83 = call i8* @_(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.24, i64 0, i64 0))
  %84 = call i32 (i32*, i8*, ...) @fprintf(i32* %82, i8* %83)
  %85 = load i32*, i32** %3, align 8
  %86 = call i8* @_(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25, i64 0, i64 0))
  %87 = call i32 (i32*, i8*, ...) @fprintf(i32* %85, i8* %86)
  %88 = load i32*, i32** %3, align 8
  %89 = call i8* @_(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.26, i64 0, i64 0))
  %90 = call i32 (i32*, i8*, ...) @fprintf(i32* %88, i8* %89)
  %91 = load i32*, i32** %3, align 8
  %92 = call i8* @_(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.27, i64 0, i64 0))
  %93 = call i32 (i32*, i8*, ...) @fprintf(i32* %91, i8* %92)
  %94 = load i32*, i32** %3, align 8
  %95 = call i8* @_(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.28, i64 0, i64 0))
  %96 = call i32 (i32*, i8*, ...) @fprintf(i32* %94, i8* %95)
  %97 = load i32*, i32** %3, align 8
  %98 = call i8* @_(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.29, i64 0, i64 0))
  %99 = call i32 (i32*, i8*, ...) @fprintf(i32* %97, i8* %98)
  %100 = load i32*, i32** %3, align 8
  %101 = call i8* @_(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.30, i64 0, i64 0))
  %102 = call i32 (i32*, i8*, ...) @fprintf(i32* %100, i8* %101)
  %103 = load i32*, i32** %3, align 8
  %104 = call i8* @_(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.31, i64 0, i64 0))
  %105 = call i32 (i32*, i8*, ...) @fprintf(i32* %103, i8* %104)
  %106 = load i32*, i32** %3, align 8
  %107 = call i8* @_(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.32, i64 0, i64 0))
  %108 = call i32 (i32*, i8*, ...) @fprintf(i32* %106, i8* %107)
  %109 = load i32*, i32** %3, align 8
  %110 = call i8* @_(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.33, i64 0, i64 0))
  %111 = call i32 (i32*, i8*, ...) @fprintf(i32* %109, i8* %110)
  %112 = load i32*, i32** %3, align 8
  %113 = call i8* @_(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.34, i64 0, i64 0))
  %114 = call i32 (i32*, i8*, ...) @fprintf(i32* %112, i8* %113)
  %115 = load i32*, i32** %3, align 8
  %116 = call i8* @_(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.35, i64 0, i64 0))
  %117 = call i32 (i32*, i8*, ...) @fprintf(i32* %115, i8* %116)
  %118 = load i32*, i32** %3, align 8
  %119 = call i8* @_(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0))
  %120 = call i32 (i32*, i8*, ...) @fprintf(i32* %118, i8* %119)
  %121 = load i32*, i32** %3, align 8
  %122 = call i8* @_(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %123 = call i32 (i32*, i8*, ...) @fprintf(i32* %121, i8* %122)
  %124 = load i32*, i32** %3, align 8
  %125 = call i8* @_(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.37, i64 0, i64 0))
  %126 = call i32 (i32*, i8*, ...) @fprintf(i32* %124, i8* %125)
  %127 = load i32*, i32** %3, align 8
  %128 = call i8* @_(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.38, i64 0, i64 0))
  %129 = call i32 (i32*, i8*, ...) @fprintf(i32* %127, i8* %128)
  %130 = load i32*, i32** %3, align 8
  %131 = call i8* @_(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.39, i64 0, i64 0))
  %132 = call i32 (i32*, i8*, ...) @fprintf(i32* %130, i8* %131)
  %133 = load i32*, i32** %3, align 8
  %134 = call i8* @_(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.40, i64 0, i64 0))
  %135 = call i32 (i32*, i8*, ...) @fprintf(i32* %133, i8* %134)
  %136 = load i32*, i32** %3, align 8
  %137 = call i8* @_(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.41, i64 0, i64 0))
  %138 = load i8*, i8** @DEFAULT_FIELD_SEP, align 8
  %139 = call i32 (i32*, i8*, ...) @fprintf(i32* %136, i8* %137, i8* %138)
  %140 = load i32*, i32** %3, align 8
  %141 = call i8* @_(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.42, i64 0, i64 0))
  %142 = call i32 (i32*, i8*, ...) @fprintf(i32* %140, i8* %141)
  %143 = load i32*, i32** %3, align 8
  %144 = call i8* @_(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.43, i64 0, i64 0))
  %145 = call i32 (i32*, i8*, ...) @fprintf(i32* %143, i8* %144)
  %146 = load i32*, i32** %3, align 8
  %147 = call i8* @_(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.44, i64 0, i64 0))
  %148 = call i32 (i32*, i8*, ...) @fprintf(i32* %146, i8* %147)
  %149 = load i32*, i32** %3, align 8
  %150 = call i8* @_(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.45, i64 0, i64 0))
  %151 = call i32 (i32*, i8*, ...) @fprintf(i32* %149, i8* %150)
  %152 = load i32*, i32** %3, align 8
  %153 = call i8* @_(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.46, i64 0, i64 0))
  %154 = call i32 (i32*, i8*, ...) @fprintf(i32* %152, i8* %153)
  %155 = load i32*, i32** %3, align 8
  %156 = call i8* @_(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.47, i64 0, i64 0))
  %157 = call i32 (i32*, i8*, ...) @fprintf(i32* %155, i8* %156)
  %158 = load i32*, i32** %3, align 8
  %159 = call i8* @_(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.48, i64 0, i64 0))
  %160 = call i32 (i32*, i8*, ...) @fprintf(i32* %158, i8* %159)
  %161 = load i32*, i32** %3, align 8
  %162 = call i8* @_(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.49, i64 0, i64 0))
  %163 = call i32 (i32*, i8*, ...) @fprintf(i32* %161, i8* %162)
  %164 = load i32*, i32** %3, align 8
  %165 = call i8* @_(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.50, i64 0, i64 0))
  %166 = call i32 (i32*, i8*, ...) @fprintf(i32* %164, i8* %165)
  %167 = load i32*, i32** %3, align 8
  %168 = call i8* @_(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.51, i64 0, i64 0))
  %169 = call i32 (i32*, i8*, ...) @fprintf(i32* %167, i8* %168)
  %170 = load i32*, i32** %3, align 8
  %171 = call i8* @_(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.52, i64 0, i64 0))
  %172 = call i32 (i32*, i8*, ...) @fprintf(i32* %170, i8* %171)
  %173 = load i32*, i32** %3, align 8
  %174 = call i8* @_(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.53, i64 0, i64 0))
  %175 = call i32 (i32*, i8*, ...) @fprintf(i32* %173, i8* %174)
  %176 = load i32*, i32** %3, align 8
  %177 = call i8* @_(i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.54, i64 0, i64 0))
  %178 = call i32 (i32*, i8*, ...) @fprintf(i32* %176, i8* %177)
  %179 = load i32*, i32** %3, align 8
  %180 = call i8* @_(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.55, i64 0, i64 0))
  %181 = call i32 (i32*, i8*, ...) @fprintf(i32* %179, i8* %180)
  %182 = load i32*, i32** %3, align 8
  %183 = call i8* @_(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %184 = call i32 (i32*, i8*, ...) @fprintf(i32* %182, i8* %183)
  %185 = load i32*, i32** %3, align 8
  %186 = call i8* @_(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.56, i64 0, i64 0))
  %187 = call i32 (i32*, i8*, ...) @fprintf(i32* %185, i8* %186)
  %188 = load i32*, i32** %3, align 8
  %189 = call i8* @_(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.57, i64 0, i64 0))
  %190 = call i32 (i32*, i8*, ...) @fprintf(i32* %188, i8* %189)
  %191 = load i32*, i32** %3, align 8
  %192 = call i8* @_(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.58, i64 0, i64 0))
  %193 = call i32 (i32*, i8*, ...) @fprintf(i32* %191, i8* %192)
  %194 = load i32*, i32** %3, align 8
  %195 = call i8* @_(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.59, i64 0, i64 0))
  %196 = call i32 (i32*, i8*, ...) @fprintf(i32* %194, i8* %195)
  %197 = load i32*, i32** %3, align 8
  %198 = call i8* @_(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0))
  %199 = call i32 (i32*, i8*, ...) @fprintf(i32* %197, i8* %198)
  %200 = load i32*, i32** %3, align 8
  %201 = call i8* @_(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.61, i64 0, i64 0))
  %202 = call i32 (i32*, i8*, ...) @fprintf(i32* %200, i8* %201)
  %203 = load i32*, i32** %3, align 8
  %204 = call i8* @_(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.62, i64 0, i64 0))
  %205 = call i32 (i32*, i8*, ...) @fprintf(i32* %203, i8* %204)
  %206 = load i32*, i32** %3, align 8
  %207 = call i8* @_(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.63, i64 0, i64 0))
  %208 = call i32 (i32*, i8*, ...) @fprintf(i32* %206, i8* %207)
  %209 = load i32*, i32** %3, align 8
  %210 = call i8* @_(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0))
  %211 = call i32 (i32*, i8*, ...) @fprintf(i32* %209, i8* %210)
  %212 = load i32*, i32** %3, align 8
  %213 = call i8* @_(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.65, i64 0, i64 0))
  %214 = call i32 (i32*, i8*, ...) @fprintf(i32* %212, i8* %213)
  %215 = load i32*, i32** %3, align 8
  %216 = call i8* @_(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.66, i64 0, i64 0))
  %217 = call i32 (i32*, i8*, ...) @fprintf(i32* %215, i8* %216)
  %218 = load i32*, i32** %3, align 8
  %219 = call i8* @_(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.67, i64 0, i64 0))
  %220 = call i32 (i32*, i8*, ...) @fprintf(i32* %218, i8* %219)
  %221 = load i32*, i32** %3, align 8
  %222 = call i8* @_(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.68, i64 0, i64 0))
  %223 = call i32 (i32*, i8*, ...) @fprintf(i32* %221, i8* %222)
  %224 = load i32*, i32** %3, align 8
  %225 = call i8* @_(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.69, i64 0, i64 0))
  %226 = call i32 (i32*, i8*, ...) @fprintf(i32* %224, i8* %225)
  %227 = load i32*, i32** %3, align 8
  %228 = call i8* @_(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.70, i64 0, i64 0))
  %229 = call i32 (i32*, i8*, ...) @fprintf(i32* %227, i8* %228)
  %230 = load i32*, i32** %3, align 8
  %231 = call i8* @_(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.71, i64 0, i64 0))
  %232 = call i32 (i32*, i8*, ...) @fprintf(i32* %230, i8* %231)
  %233 = load i32*, i32** %3, align 8
  %234 = call i32 @ClosePager(i32* %233)
  ret void
}

declare dso_local i32* @PageOutput(i32, i32*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i8* @_(i8*) #1

declare dso_local i32 @ClosePager(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
