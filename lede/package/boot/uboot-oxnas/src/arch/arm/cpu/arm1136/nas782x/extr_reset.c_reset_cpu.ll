; ModuleID = '/home/carl/AnghaBench/lede/package/boot/uboot-oxnas/src/arch/arm/cpu/arm1136/nas782x/extr_reset.c_reset_cpu.c'
source_filename = "/home/carl/AnghaBench/lede/package/boot/uboot-oxnas/src/arch/arm/cpu/arm1136/nas782x/extr_reset.c_reset_cpu.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SYS_CTRL_RST_COPRO = common dso_local global i32 0, align 4
@SYS_CTRL_RST_USBHS = common dso_local global i32 0, align 4
@SYS_CTRL_RST_USBHSPHYA = common dso_local global i32 0, align 4
@SYS_CTRL_RST_MACA = common dso_local global i32 0, align 4
@SYS_CTRL_RST_PCIEA = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SGDMA = common dso_local global i32 0, align 4
@SYS_CTRL_RST_CIPHER = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SATA = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SATA_LINK = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SATA_PHY = common dso_local global i32 0, align 4
@SYS_CTRL_RST_PCIEPHY = common dso_local global i32 0, align 4
@SYS_CTRL_RST_STATIC = common dso_local global i32 0, align 4
@SYS_CTRL_RST_UART1 = common dso_local global i32 0, align 4
@SYS_CTRL_RST_UART2 = common dso_local global i32 0, align 4
@SYS_CTRL_RST_MISC = common dso_local global i32 0, align 4
@SYS_CTRL_RST_I2S = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SD = common dso_local global i32 0, align 4
@SYS_CTRL_RST_MACB = common dso_local global i32 0, align 4
@SYS_CTRL_RST_PCIEB = common dso_local global i32 0, align 4
@SYS_CTRL_RST_VIDEO = common dso_local global i32 0, align 4
@SYS_CTRL_RST_USBHSPHYB = common dso_local global i32 0, align 4
@SYS_CTRL_RST_USBDEV = common dso_local global i32 0, align 4
@SYS_CTRL_RST_SET_CTRL = common dso_local global i64 0, align 8
@SYS_CTRL_RST_GPIO = common dso_local global i32 0, align 4
@SYS_CTRL_RST_CLR_CTRL = common dso_local global i64 0, align 8
@SYS_CTRL_CLK_COPRO = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_DMA = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_CIPHER = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_SD = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_SATA = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_I2S = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_USBHS = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_MAC = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_PCIEA = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_STATIC = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_MACB = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_PCIEB = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_REF600 = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_USBDEV = common dso_local global i32 0, align 4
@SYS_CTRL_CLK_CLR_CTRL = common dso_local global i64 0, align 8
@SYS_CONTROL_BASE = common dso_local global i64 0, align 8
@PINMUX_SECONDARY_SEL = common dso_local global i64 0, align 8
@PINMUX_TERTIARY_SEL = common dso_local global i64 0, align 8
@PINMUX_QUATERNARY_SEL = common dso_local global i64 0, align 8
@PINMUX_DEBUG_SEL = common dso_local global i64 0, align 8
@PINMUX_ALTERNATIVE_SEL = common dso_local global i64 0, align 8
@PINMUX_PULLUP_SEL = common dso_local global i64 0, align 8
@SEC_CONTROL_BASE = common dso_local global i64 0, align 8
@SYS_CTRL_RST_SCU = common dso_local global i32 0, align 4
@SYS_CTRL_RST_ARM0 = common dso_local global i32 0, align 4
@SYS_CTRL_RST_ARM1 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @reset_cpu(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @SYS_CTRL_RST_COPRO, align 4
  %5 = call i32 @BIT(i32 %4)
  %6 = load i32, i32* @SYS_CTRL_RST_USBHS, align 4
  %7 = call i32 @BIT(i32 %6)
  %8 = or i32 %5, %7
  %9 = load i32, i32* @SYS_CTRL_RST_USBHSPHYA, align 4
  %10 = call i32 @BIT(i32 %9)
  %11 = or i32 %8, %10
  %12 = load i32, i32* @SYS_CTRL_RST_MACA, align 4
  %13 = call i32 @BIT(i32 %12)
  %14 = or i32 %11, %13
  %15 = load i32, i32* @SYS_CTRL_RST_PCIEA, align 4
  %16 = call i32 @BIT(i32 %15)
  %17 = or i32 %14, %16
  %18 = load i32, i32* @SYS_CTRL_RST_SGDMA, align 4
  %19 = call i32 @BIT(i32 %18)
  %20 = or i32 %17, %19
  %21 = load i32, i32* @SYS_CTRL_RST_CIPHER, align 4
  %22 = call i32 @BIT(i32 %21)
  %23 = or i32 %20, %22
  %24 = load i32, i32* @SYS_CTRL_RST_SATA, align 4
  %25 = call i32 @BIT(i32 %24)
  %26 = or i32 %23, %25
  %27 = load i32, i32* @SYS_CTRL_RST_SATA_LINK, align 4
  %28 = call i32 @BIT(i32 %27)
  %29 = or i32 %26, %28
  %30 = load i32, i32* @SYS_CTRL_RST_SATA_PHY, align 4
  %31 = call i32 @BIT(i32 %30)
  %32 = or i32 %29, %31
  %33 = load i32, i32* @SYS_CTRL_RST_PCIEPHY, align 4
  %34 = call i32 @BIT(i32 %33)
  %35 = or i32 %32, %34
  %36 = load i32, i32* @SYS_CTRL_RST_STATIC, align 4
  %37 = call i32 @BIT(i32 %36)
  %38 = or i32 %35, %37
  %39 = load i32, i32* @SYS_CTRL_RST_UART1, align 4
  %40 = call i32 @BIT(i32 %39)
  %41 = or i32 %38, %40
  %42 = load i32, i32* @SYS_CTRL_RST_UART2, align 4
  %43 = call i32 @BIT(i32 %42)
  %44 = or i32 %41, %43
  %45 = load i32, i32* @SYS_CTRL_RST_MISC, align 4
  %46 = call i32 @BIT(i32 %45)
  %47 = or i32 %44, %46
  %48 = load i32, i32* @SYS_CTRL_RST_I2S, align 4
  %49 = call i32 @BIT(i32 %48)
  %50 = or i32 %47, %49
  %51 = load i32, i32* @SYS_CTRL_RST_SD, align 4
  %52 = call i32 @BIT(i32 %51)
  %53 = or i32 %50, %52
  %54 = load i32, i32* @SYS_CTRL_RST_MACB, align 4
  %55 = call i32 @BIT(i32 %54)
  %56 = or i32 %53, %55
  %57 = load i32, i32* @SYS_CTRL_RST_PCIEB, align 4
  %58 = call i32 @BIT(i32 %57)
  %59 = or i32 %56, %58
  %60 = load i32, i32* @SYS_CTRL_RST_VIDEO, align 4
  %61 = call i32 @BIT(i32 %60)
  %62 = or i32 %59, %61
  %63 = load i32, i32* @SYS_CTRL_RST_USBHSPHYB, align 4
  %64 = call i32 @BIT(i32 %63)
  %65 = or i32 %62, %64
  %66 = load i32, i32* @SYS_CTRL_RST_USBDEV, align 4
  %67 = call i32 @BIT(i32 %66)
  %68 = or i32 %65, %67
  store i32 %68, i32* %3, align 4
  %69 = load i32, i32* %3, align 4
  %70 = load i64, i64* @SYS_CTRL_RST_SET_CTRL, align 8
  %71 = call i32 @writel(i32 %69, i64 %70)
  %72 = load i32, i32* @SYS_CTRL_RST_GPIO, align 4
  %73 = call i32 @BIT(i32 %72)
  %74 = load i64, i64* @SYS_CTRL_RST_CLR_CTRL, align 8
  %75 = call i32 @writel(i32 %73, i64 %74)
  %76 = load i32, i32* @SYS_CTRL_CLK_COPRO, align 4
  %77 = call i32 @BIT(i32 %76)
  %78 = load i32, i32* @SYS_CTRL_CLK_DMA, align 4
  %79 = call i32 @BIT(i32 %78)
  %80 = or i32 %77, %79
  %81 = load i32, i32* @SYS_CTRL_CLK_CIPHER, align 4
  %82 = call i32 @BIT(i32 %81)
  %83 = or i32 %80, %82
  %84 = load i32, i32* @SYS_CTRL_CLK_SD, align 4
  %85 = call i32 @BIT(i32 %84)
  %86 = or i32 %83, %85
  %87 = load i32, i32* @SYS_CTRL_CLK_SATA, align 4
  %88 = call i32 @BIT(i32 %87)
  %89 = or i32 %86, %88
  %90 = load i32, i32* @SYS_CTRL_CLK_I2S, align 4
  %91 = call i32 @BIT(i32 %90)
  %92 = or i32 %89, %91
  %93 = load i32, i32* @SYS_CTRL_CLK_USBHS, align 4
  %94 = call i32 @BIT(i32 %93)
  %95 = or i32 %92, %94
  %96 = load i32, i32* @SYS_CTRL_CLK_MAC, align 4
  %97 = call i32 @BIT(i32 %96)
  %98 = or i32 %95, %97
  %99 = load i32, i32* @SYS_CTRL_CLK_PCIEA, align 4
  %100 = call i32 @BIT(i32 %99)
  %101 = or i32 %98, %100
  %102 = load i32, i32* @SYS_CTRL_CLK_STATIC, align 4
  %103 = call i32 @BIT(i32 %102)
  %104 = or i32 %101, %103
  %105 = load i32, i32* @SYS_CTRL_CLK_MACB, align 4
  %106 = call i32 @BIT(i32 %105)
  %107 = or i32 %104, %106
  %108 = load i32, i32* @SYS_CTRL_CLK_PCIEB, align 4
  %109 = call i32 @BIT(i32 %108)
  %110 = or i32 %107, %109
  %111 = load i32, i32* @SYS_CTRL_CLK_REF600, align 4
  %112 = call i32 @BIT(i32 %111)
  %113 = or i32 %110, %112
  %114 = load i32, i32* @SYS_CTRL_CLK_USBDEV, align 4
  %115 = call i32 @BIT(i32 %114)
  %116 = or i32 %113, %115
  store i32 %116, i32* %3, align 4
  %117 = load i32, i32* %3, align 4
  %118 = load i64, i64* @SYS_CTRL_CLK_CLR_CTRL, align 8
  %119 = call i32 @writel(i32 %117, i64 %118)
  %120 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %121 = load i64, i64* @PINMUX_SECONDARY_SEL, align 8
  %122 = add nsw i64 %120, %121
  %123 = call i32 @writel(i32 0, i64 %122)
  %124 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %125 = load i64, i64* @PINMUX_TERTIARY_SEL, align 8
  %126 = add nsw i64 %124, %125
  %127 = call i32 @writel(i32 0, i64 %126)
  %128 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %129 = load i64, i64* @PINMUX_QUATERNARY_SEL, align 8
  %130 = add nsw i64 %128, %129
  %131 = call i32 @writel(i32 0, i64 %130)
  %132 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %133 = load i64, i64* @PINMUX_DEBUG_SEL, align 8
  %134 = add nsw i64 %132, %133
  %135 = call i32 @writel(i32 0, i64 %134)
  %136 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %137 = load i64, i64* @PINMUX_ALTERNATIVE_SEL, align 8
  %138 = add nsw i64 %136, %137
  %139 = call i32 @writel(i32 0, i64 %138)
  %140 = load i64, i64* @SYS_CONTROL_BASE, align 8
  %141 = load i64, i64* @PINMUX_PULLUP_SEL, align 8
  %142 = add nsw i64 %140, %141
  %143 = call i32 @writel(i32 0, i64 %142)
  %144 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %145 = load i64, i64* @PINMUX_SECONDARY_SEL, align 8
  %146 = add nsw i64 %144, %145
  %147 = call i32 @writel(i32 0, i64 %146)
  %148 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %149 = load i64, i64* @PINMUX_TERTIARY_SEL, align 8
  %150 = add nsw i64 %148, %149
  %151 = call i32 @writel(i32 0, i64 %150)
  %152 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %153 = load i64, i64* @PINMUX_QUATERNARY_SEL, align 8
  %154 = add nsw i64 %152, %153
  %155 = call i32 @writel(i32 0, i64 %154)
  %156 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %157 = load i64, i64* @PINMUX_DEBUG_SEL, align 8
  %158 = add nsw i64 %156, %157
  %159 = call i32 @writel(i32 0, i64 %158)
  %160 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %161 = load i64, i64* @PINMUX_ALTERNATIVE_SEL, align 8
  %162 = add nsw i64 %160, %161
  %163 = call i32 @writel(i32 0, i64 %162)
  %164 = load i64, i64* @SEC_CONTROL_BASE, align 8
  %165 = load i64, i64* @PINMUX_PULLUP_SEL, align 8
  %166 = add nsw i64 %164, %165
  %167 = call i32 @writel(i32 0, i64 %166)
  %168 = load i32, i32* @SYS_CTRL_RST_SCU, align 4
  %169 = call i32 @BIT(i32 %168)
  %170 = load i32, i32* @SYS_CTRL_RST_ARM0, align 4
  %171 = call i32 @BIT(i32 %170)
  %172 = or i32 %169, %171
  %173 = load i32, i32* @SYS_CTRL_RST_ARM1, align 4
  %174 = call i32 @BIT(i32 %173)
  %175 = or i32 %172, %174
  store i32 %175, i32* %3, align 4
  %176 = load i32, i32* %3, align 4
  %177 = load i64, i64* @SYS_CTRL_RST_SET_CTRL, align 8
  %178 = call i32 @writel(i32 %176, i64 %177)
  ret void
}

declare dso_local i32 @BIT(i32) #1

declare dso_local i32 @writel(i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
