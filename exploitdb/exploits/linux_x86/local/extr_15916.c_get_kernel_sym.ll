; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86/local/extr_15916.c_get_kernel_sym.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86/local/extr_15916.c_get_kernel_sym.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i32 }

@.str = private unnamed_addr constant [15 x i8] c"/proc/kallsyms\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"/proc/ksyms\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"%p %c %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%p %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"_O/\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"_S.\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"smp\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [24 x i8] c" [+] Resolved %s to %p\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_sym(i8* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca [512 x i8], align 16
  %8 = alloca %struct.utsname, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %13 = call i32* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %13, i32** %4, align 8
  %14 = load i32*, i32** %4, align 8
  %15 = icmp eq i32* %14, null
  br i1 %15, label %16, label %22

16:                                               ; preds = %1
  %17 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %17, i32** %4, align 8
  %18 = load i32*, i32** %4, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  store i64 0, i64* %2, align 8
  br label %110

21:                                               ; preds = %16
  store i32 1, i32* %11, align 4
  br label %22

22:                                               ; preds = %21, %1
  br label %23

23:                                               ; preds = %106, %88, %50, %22
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* @EOF, align 4
  %26 = icmp ne i32 %24, %25
  br i1 %26, label %27, label %107

27:                                               ; preds = %23
  %28 = load i32, i32* %11, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = load i32*, i32** %4, align 8
  %32 = bitcast i64* %5 to i8**
  %33 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %34 = call i32 (i32*, i8*, ...) @fscanf(i32* %31, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8** %32, i8* %6, i8* %33)
  store i32 %34, i32* %9, align 4
  br label %85

35:                                               ; preds = %27
  %36 = load i32*, i32** %4, align 8
  %37 = bitcast i64* %5 to i8**
  %38 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %39 = call i32 (i32*, i8*, ...) @fscanf(i32* %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8** %37, i8* %38)
  store i32 %39, i32* %9, align 4
  %40 = load i32, i32* %9, align 4
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %42, label %84

42:                                               ; preds = %35
  %43 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %44 = call i64 @strstr(i8* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %48 = call i64 @strstr(i8* %47, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46, %42
  br label %23

51:                                               ; preds = %46
  %52 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %53 = call i8* @strrchr(i8* %52, i8 signext 95)
  store i8* %53, i8** %12, align 8
  %54 = load i8*, i8** %12, align 8
  %55 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %56 = getelementptr inbounds i8, i8* %55, i64 5
  %57 = icmp ugt i8* %54, %56
  br i1 %57, label %58, label %83

58:                                               ; preds = %51
  %59 = load i8*, i8** %12, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 -3
  %61 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %83, label %63

63:                                               ; preds = %58
  %64 = load i8*, i8** %12, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 -4
  store i8* %65, i8** %12, align 8
  br label %66

66:                                               ; preds = %78, %63
  %67 = load i8*, i8** %12, align 8
  %68 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %69 = icmp ugt i8* %67, %68
  br i1 %69, label %70, label %76

70:                                               ; preds = %66
  %71 = load i8*, i8** %12, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 -1
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 95
  br label %76

76:                                               ; preds = %70, %66
  %77 = phi i1 [ false, %66 ], [ %75, %70 ]
  br i1 %77, label %78, label %81

78:                                               ; preds = %76
  %79 = load i8*, i8** %12, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 -1
  store i8* %80, i8** %12, align 8
  br label %66

81:                                               ; preds = %76
  %82 = load i8*, i8** %12, align 8
  store i8 0, i8* %82, align 1
  br label %83

83:                                               ; preds = %81, %58, %51
  br label %84

84:                                               ; preds = %83, %35
  br label %85

85:                                               ; preds = %84, %30
  %86 = load i32, i32* %9, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %85
  %89 = load i32*, i32** %4, align 8
  %90 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %91 = call i32 (i32*, i8*, ...) @fscanf(i32* %89, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %90)
  br label %23

92:                                               ; preds = %85
  %93 = load i8*, i8** %3, align 8
  %94 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %95 = call i32 @strcmp(i8* %93, i8* %94)
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %92
  %98 = load i32, i32* @stdout, align 4
  %99 = load i8*, i8** %3, align 8
  %100 = load i64, i64* %5, align 8
  %101 = inttoptr i64 %100 to i8*
  %102 = call i32 @fprintf(i32 %98, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i8* %99, i8* %101)
  %103 = load i32*, i32** %4, align 8
  %104 = call i32 @fclose(i32* %103)
  %105 = load i64, i64* %5, align 8
  store i64 %105, i64* %2, align 8
  br label %110

106:                                              ; preds = %92
  br label %23

107:                                              ; preds = %23
  %108 = load i32*, i32** %4, align 8
  %109 = call i32 @fclose(i32* %108)
  store i64 0, i64* %2, align 8
  br label %110

110:                                              ; preds = %107, %97, %20
  %111 = load i64, i64* %2, align 8
  ret i64 %111
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, ...) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i8* @strrchr(i8*, i8 signext) #1

declare dso_local i32 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
