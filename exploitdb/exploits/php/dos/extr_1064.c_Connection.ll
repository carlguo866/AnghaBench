; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/dos/extr_1064.c_Connection.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/dos/extr_1064.c_Connection.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i32, i32* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [25 x i8] c"[-] Invalid Port Number\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"socket() \00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"gethostbyname() \00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"gethostbyaddr() \00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"connect() \00", align 1
@SOCKET_ERROR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Connection(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.in_addr*, align 8
  %8 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp sle i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 4
  %13 = icmp sgt i32 %12, 65535
  br i1 %13, label %14, label %19

14:                                               ; preds = %11, %2
  %15 = call i32 @puts(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* @stdout, align 4
  %17 = call i32 @fflush(i32 %16)
  %18 = call i32 @exit(i32 -1) #3
  unreachable

19:                                               ; preds = %11
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_STREAM, align 4
  %22 = load i32, i32* @IPPROTO_TCP, align 4
  %23 = call i32 @socket(i32 %20, i32 %21, i32 %22)
  store i32 %23, i32* %5, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %30

25:                                               ; preds = %19
  %26 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 @fflush(i32 %27)
  %29 = call i32 @exit(i32 -1) #3
  unreachable

30:                                               ; preds = %19
  %31 = load i8*, i8** %3, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 0
  %33 = load i8, i8* %32, align 1
  %34 = call i64 @isalpha(i8 signext %33)
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %46

36:                                               ; preds = %30
  %37 = load i8*, i8** %3, align 8
  %38 = call %struct.hostent* @gethostbyname(i8* %37)
  store %struct.hostent* %38, %struct.hostent** %8, align 8
  %39 = icmp eq %struct.hostent* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %42 = load i32, i32* @stdout, align 4
  %43 = call i32 @fflush(i32 %42)
  %44 = call i32 @exit(i32 -1) #3
  unreachable

45:                                               ; preds = %36
  br label %63

46:                                               ; preds = %30
  %47 = call i64 @malloc(i32 4)
  %48 = inttoptr i64 %47 to %struct.in_addr*
  store %struct.in_addr* %48, %struct.in_addr** %7, align 8
  %49 = load i8*, i8** %3, align 8
  %50 = call i32 @inet_addr(i8* %49)
  %51 = load %struct.in_addr*, %struct.in_addr** %7, align 8
  %52 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %51, i32 0, i32 0
  store i32 %50, i32* %52, align 4
  %53 = bitcast %struct.in_addr** %7 to i8*
  %54 = load i32, i32* @AF_INET, align 4
  %55 = call %struct.hostent* @gethostbyaddr(i8* %53, i32 8, i32 %54)
  store %struct.hostent* %55, %struct.hostent** %8, align 8
  %56 = icmp ne %struct.hostent* %55, null
  br i1 %56, label %57, label %62

57:                                               ; preds = %46
  %58 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 @fflush(i32 %59)
  %61 = call i32 @exit(i32 -1) #3
  unreachable

62:                                               ; preds = %46
  br label %63

63:                                               ; preds = %62, %45
  %64 = call i32 @memset(%struct.sockaddr_in* %6, i32 0, i32 12)
  %65 = load i32, i32* @AF_INET, align 4
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %65, i32* %66, align 4
  %67 = load i32, i32* %4, align 4
  %68 = call i32 @htons(i32 %67)
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  %72 = load %struct.hostent*, %struct.hostent** %8, align 8
  %73 = getelementptr inbounds %struct.hostent, %struct.hostent* %72, i32 0, i32 1
  %74 = load i32*, i32** %73, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 0
  %76 = load i32, i32* %75, align 4
  %77 = load %struct.hostent*, %struct.hostent** %8, align 8
  %78 = getelementptr inbounds %struct.hostent, %struct.hostent* %77, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = call i32 @memcpy(i32* %71, i32 %76, i32 %79)
  %81 = load i32, i32* %5, align 4
  %82 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %83 = call i64 @connect(i32 %81, %struct.sockaddr* %82, i32 12)
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %63
  %86 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %87 = call i32 @exit(i32 -1) #3
  unreachable

88:                                               ; preds = %63
  %89 = load i32, i32* %5, align 4
  ret i32 %89
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @fflush(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @isalpha(i8 signext) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyaddr(i8*, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
