; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_22521.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_22521.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@argv0 = common dso_local global i8* null, align 8
@path = common dso_local global i8* null, align 8
@user = common dso_local global i8* null, align 8
@target_port = common dso_local global i32 0, align 4
@beginchar = common dso_local global i32 0, align 4
@endchar = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"b:e:hp:u:\00", align 1
@optarg = common dso_local global i8* null, align 8
@optind = common dso_local global i64 0, align 8
@target_host = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"you must specify a path\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"you must specify an user\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i8**, i8*** %5, align 8
  %8 = getelementptr inbounds i8*, i8** %7, i64 0
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** @argv0, align 8
  store i8* null, i8** @path, align 8
  store i8* null, i8** @user, align 8
  store i32 80, i32* @target_port, align 4
  store i32 1, i32* @beginchar, align 4
  store i32 32, i32* @endchar, align 4
  br label %10

10:                                               ; preds = %32, %2
  %11 = load i32, i32* %4, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = call i32 @getopt(i32 %11, i8** %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32 %13, i32* %6, align 4
  %14 = icmp ne i32 %13, -1
  br i1 %14, label %15, label %33

15:                                               ; preds = %10
  %16 = load i32, i32* %6, align 4
  switch i32 %16, label %30 [
    i32 98, label %17
    i32 101, label %21
    i32 112, label %25
    i32 117, label %27
    i32 104, label %29
    i32 63, label %29
  ]

17:                                               ; preds = %15
  %18 = load i8*, i8** @optarg, align 8
  %19 = call i8* @atoi(i8* %18)
  %20 = ptrtoint i8* %19 to i32
  store i32 %20, i32* @beginchar, align 4
  br label %32

21:                                               ; preds = %15
  %22 = load i8*, i8** @optarg, align 8
  %23 = call i8* @atoi(i8* %22)
  %24 = ptrtoint i8* %23 to i32
  store i32 %24, i32* @endchar, align 4
  br label %32

25:                                               ; preds = %15
  %26 = load i8*, i8** @optarg, align 8
  store i8* %26, i8** @path, align 8
  br label %32

27:                                               ; preds = %15
  %28 = load i8*, i8** @optarg, align 8
  store i8* %28, i8** @user, align 8
  br label %32

29:                                               ; preds = %15, %15
  br label %30

30:                                               ; preds = %15, %29
  %31 = call i32 (...) @usage()
  br label %32

32:                                               ; preds = %30, %27, %25, %21, %17
  br label %10

33:                                               ; preds = %10
  %34 = load i64, i64* @optind, align 8
  %35 = load i32, i32* %4, align 4
  %36 = sext i32 %35 to i64
  %37 = sub nsw i64 %36, %34
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %4, align 4
  %39 = load i64, i64* @optind, align 8
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 %39
  store i8** %41, i8*** %5, align 8
  %42 = load i32, i32* %4, align 4
  %43 = icmp sgt i32 %42, 1
  br i1 %43, label %44, label %50

44:                                               ; preds = %33
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i8* @atoi(i8* %47)
  %49 = ptrtoint i8* %48 to i32
  store i32 %49, i32* @target_port, align 4
  br label %50

50:                                               ; preds = %44, %33
  %51 = load i32, i32* %4, align 4
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %50
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  store i8* %56, i8** @target_host, align 8
  br label %59

57:                                               ; preds = %50
  %58 = call i32 (...) @usage()
  br label %59

59:                                               ; preds = %57, %53
  %60 = load i8*, i8** @path, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %59
  %63 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %64 = call i32 @exit(i32 1) #3
  unreachable

65:                                               ; preds = %59
  %66 = load i8*, i8** @user, align 8
  %67 = icmp ne i8* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  %69 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %70 = call i32 @exit(i32 1) #3
  unreachable

71:                                               ; preds = %65
  %72 = call i32 (...) @do_it()
  ret i32 0
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @usage(...) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @do_it(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
