; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_2473.c_Exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_2473.c_Exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i32, i32, %struct.TYPE_5__ }
%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"readfile\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"\0A [+] Exploit Result:\0A\0A%s\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"sqlinject\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"\0A[-] some error. change MODE param\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Exploit(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [10024 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.TYPE_6__, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %19 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %20 = call i32 @memset(i8* %19, i32 0, i32 10024)
  %21 = load i32, i32* @AF_INET, align 4
  %22 = load i32, i32* @SOCK_STREAM, align 4
  %23 = call i32 @socket(i32 %21, i32 %22, i32 0)
  store i32 %23, i32* %10, align 4
  %24 = load i8*, i8** %7, align 8
  %25 = call i32 @resolve(i8* %24)
  %26 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %11, i32 0, i32 2
  %27 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %27, i32 0, i32 0
  store i32 %25, i32* %28, align 4
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %11, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = call i32 @htons(i32 80)
  %32 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %11, i32 0, i32 0
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* %10, align 4
  %34 = bitcast %struct.TYPE_6__* %11 to %struct.sockaddr*
  %35 = call i64 @connect(i32 %33, %struct.sockaddr* %34, i32 12)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %138

38:                                               ; preds = %3
  %39 = load i32, i32* %10, align 4
  %40 = load i8*, i8** %5, align 8
  %41 = load i8*, i8** %5, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @send(i32 %39, i8* %40, i32 %42, i32 0)
  br label %44

44:                                               ; preds = %101, %38
  %45 = load i32, i32* %10, align 4
  %46 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %47 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %48 = call i32 @strlen(i8* %47)
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %46, i64 %49
  %51 = call i32 @recv(i32 %45, i8* %50, i32 1, i32 0)
  store i32 %51, i32* %12, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %102

53:                                               ; preds = %44
  store i32 0, i32* %14, align 4
  br label %54

54:                                               ; preds = %98, %53
  %55 = load i32, i32* %14, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %101

61:                                               ; preds = %54
  %62 = load i32, i32* %14, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp eq i32 %66, 13
  br i1 %67, label %68, label %97

68:                                               ; preds = %61
  %69 = load i32, i32* %14, align 4
  %70 = add nsw i32 %69, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 10
  br i1 %75, label %76, label %97

76:                                               ; preds = %68
  %77 = load i32, i32* %14, align 4
  %78 = add nsw i32 %77, 2
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = icmp eq i32 %82, 13
  br i1 %83, label %84, label %97

84:                                               ; preds = %76
  %85 = load i32, i32* %14, align 4
  %86 = add nsw i32 %85, 3
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp eq i32 %90, 10
  br i1 %91, label %92, label %97

92:                                               ; preds = %84
  %93 = load i32, i32* %14, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %94
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  store i8* %96, i8** %9, align 8
  br label %101

97:                                               ; preds = %84, %76, %68, %61
  br label %98

98:                                               ; preds = %97
  %99 = load i32, i32* %14, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %14, align 4
  br label %54

101:                                              ; preds = %92, %54
  br label %44

102:                                              ; preds = %44
  %103 = load i8*, i8** %6, align 8
  %104 = call i64 @strcmp(i8* %103, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %109

106:                                              ; preds = %102
  %107 = load i8*, i8** %9, align 8
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %107)
  store i32 0, i32* %4, align 4
  br label %138

109:                                              ; preds = %102
  %110 = load i8*, i8** %6, align 8
  %111 = call i64 @strcmp(i8* %110, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %135

113:                                              ; preds = %109
  store i8* null, i8** %15, align 8
  store i8* null, i8** %16, align 8
  store i8* null, i8** %17, align 8
  %114 = load i8*, i8** %9, align 8
  %115 = call i8* @strtok(i8* %114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i8* %115, i8** %15, align 8
  %116 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i8* %116, i8** %15, align 8
  %117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %117, i8** %15, align 8
  %118 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %118, i8** %15, align 8
  store i32 0, i32* %18, align 4
  br label %119

119:                                              ; preds = %131, %113
  %120 = load i32, i32* %18, align 4
  %121 = icmp slt i32 %120, 2
  br i1 %121, label %122, label %134

122:                                              ; preds = %119
  %123 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %123, i8** %15, align 8
  %124 = load i32, i32* %18, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %130

126:                                              ; preds = %122
  %127 = load i8*, i8** %15, align 8
  store i8* %127, i8** %16, align 8
  %128 = load i8*, i8** %16, align 8
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %128)
  br label %130

130:                                              ; preds = %126, %122
  br label %131

131:                                              ; preds = %130
  %132 = load i32, i32* %18, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %18, align 4
  br label %119

134:                                              ; preds = %119
  br label %137

135:                                              ; preds = %109
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %138

137:                                              ; preds = %134
  store i32 0, i32* %4, align 4
  br label %138

138:                                              ; preds = %137, %135, %106, %37
  %139 = load i32, i32* %4, align 4
  ret i32 %139
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @strtok(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
