; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_24289.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_24289.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64* }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"s:p:P:c:?\00", align 1
@optarg = common dso_local global i8* null, align 8
@BANNER = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"\0A{-} Cannot create socket!\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"\0AConnection failed!\0A\00", align 1
@PHP_FILE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [73 x i8] c"\0A{+} Sending request and returning server answer, please wait a while..\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @usage(i8* %22)
  br label %24

24:                                               ; preds = %19, %2
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %27, label %113

27:                                               ; preds = %24
  br label %28

28:                                               ; preds = %50, %27
  %29 = load i32, i32* %4, align 4
  %30 = load i8**, i8*** %5, align 8
  %31 = call i32 @getopt(i32 %29, i8** %30, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32 %31, i32* %6, align 4
  %32 = icmp ne i32 %31, -1
  br i1 %32, label %33, label %51

33:                                               ; preds = %28
  %34 = load i32, i32* %6, align 4
  switch i32 %34, label %45 [
    i32 115, label %35
    i32 99, label %37
    i32 112, label %39
    i32 80, label %42
    i32 104, label %44
    i32 63, label %44
  ]

35:                                               ; preds = %33
  %36 = load i8*, i8** @optarg, align 8
  store i8* %36, i8** %11, align 8
  br label %50

37:                                               ; preds = %33
  %38 = load i8*, i8** @optarg, align 8
  store i8* %38, i8** %12, align 8
  br label %50

39:                                               ; preds = %33
  %40 = load i8*, i8** @optarg, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %8, align 4
  br label %50

42:                                               ; preds = %33
  %43 = load i8*, i8** @optarg, align 8
  store i8* %43, i8** %15, align 8
  br label %50

44:                                               ; preds = %33, %33
  br label %45

45:                                               ; preds = %33, %44
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @usage(i8* %48)
  br label %50

50:                                               ; preds = %45, %42, %39, %37, %35
  br label %28

51:                                               ; preds = %28
  %52 = call i32 @memset(%struct.sockaddr_in* %10, i32 0, i32 12)
  %53 = load i8*, i8** %11, align 8
  %54 = call %struct.hostent* @gethostbyname(i8* %53)
  store %struct.hostent* %54, %struct.hostent** %9, align 8
  %55 = load %struct.hostent*, %struct.hostent** %9, align 8
  %56 = getelementptr inbounds %struct.hostent, %struct.hostent* %55, i32 0, i32 0
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds i64, i64* %57, i64 0
  %59 = load i64, i64* %58, align 8
  %60 = inttoptr i64 %59 to %struct.in_addr*
  %61 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = call i8* @inet_ntoa(i32 %62)
  store i8* %63, i8** %16, align 8
  %64 = load i32, i32* @BANNER, align 4
  %65 = call i32 @puts(i32 %64)
  %66 = load i32, i32* %8, align 4
  %67 = call i32 @htons(i32 %66)
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %67, i32* %68, align 4
  %69 = load i32, i32* @AF_INET, align 4
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %69, i32* %70, align 4
  %71 = load i8*, i8** %16, align 8
  %72 = call i32 @inet_addr(i8* %71)
  %73 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %74 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %73, i32 0, i32 0
  store i32 %72, i32* %74, align 4
  %75 = load i32, i32* @PF_INET, align 4
  %76 = load i32, i32* @SOCK_STREAM, align 4
  %77 = load i32, i32* @IPPROTO_TCP, align 4
  %78 = call i32 @socket(i32 %75, i32 %76, i32 %77)
  store i32 %78, i32* %7, align 4
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %51
  %81 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  br label %82

82:                                               ; preds = %80, %51
  %83 = load i32, i32* %7, align 4
  %84 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %85 = call i64 @connect(i32 %83, %struct.sockaddr* %84, i32 16)
  %86 = icmp slt i64 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %82
  %88 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %89 = call i32 @exit(i32 -1) #3
  unreachable

90:                                               ; preds = %82
  %91 = load i8*, i8** %15, align 8
  %92 = load i32, i32* @PHP_FILE, align 4
  %93 = load i8*, i8** %12, align 8
  %94 = load i8*, i8** %11, align 8
  %95 = call i8* @header(i8* %91, i32 %92, i8* %93, i8* %94)
  store i8* %95, i8** %14, align 8
  %96 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0))
  %97 = call i32 @sleep(i32 2)
  %98 = load i32, i32* %7, align 4
  %99 = load i8*, i8** %14, align 8
  %100 = load i8*, i8** %14, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = call i32 @send(i32 %98, i8* %99, i32 %101, i32 0)
  br label %103

103:                                              ; preds = %107, %90
  %104 = load i32, i32* %7, align 4
  %105 = call i64 @read(i32 %104, i8** %13, i32 1)
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = load i8*, i8** %13, align 8
  %109 = call i32 @putchar(i8* %108)
  br label %103

110:                                              ; preds = %103
  %111 = load i32, i32* %7, align 4
  %112 = call i32 @close(i32 %111)
  store i32 0, i32* %3, align 4
  br label %113

113:                                              ; preds = %110, %24
  %114 = load i32, i32* %3, align 4
  ret i32 %114
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @puts(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @header(i8*, i32, i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @read(i32, i8**, i32) #1

declare dso_local i32 @putchar(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
