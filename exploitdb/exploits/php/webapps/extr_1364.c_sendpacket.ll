; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_1364.c_sendpacket.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_1364.c_sendpacket.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"failed to create socket\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"unknown server: %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@HTTP_PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"can't connect to server\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sendpacket(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca [8192 x i8], align 16
  %12 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %13 = load i32, i32* @PF_INET, align 4
  %14 = load i32, i32* @SOCK_STREAM, align 4
  %15 = call i32 @socket(i32 %13, i32 %14, i32 0)
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* %10, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %3
  %19 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %3
  %22 = call i32 @memset(%struct.sockaddr_in* %7, i32 0, i32 12)
  %23 = load i8*, i8** %6, align 8
  %24 = call %struct.hostent* @gethostbyname(i8* %23)
  store %struct.hostent* %24, %struct.hostent** %8, align 8
  %25 = load %struct.hostent*, %struct.hostent** %8, align 8
  %26 = icmp eq %struct.hostent* null, %25
  br i1 %26, label %27, label %32

27:                                               ; preds = %21
  %28 = load i32, i32* @stderr, align 4
  %29 = load i8*, i8** %6, align 8
  %30 = call i32 @fprintf(i32 %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  %31 = call i32 @exit(i32 1) #3
  unreachable

32:                                               ; preds = %21
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %34 = bitcast i32* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %8, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.hostent*, %struct.hostent** %8, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @memcpy(i8* %34, i32 %37, i32 %40)
  %42 = load i32, i32* @AF_INET, align 4
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %42, i32* %43, align 4
  %44 = load i32, i32* @HTTP_PORT, align 4
  %45 = call i32 @htons(i32 %44)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* %10, align 4
  %48 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %49 = call i64 @connect(i32 %47, %struct.sockaddr* %48, i32 12)
  %50 = icmp slt i64 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %32
  %52 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %53 = call i32 @exit(i32 1) #3
  unreachable

54:                                               ; preds = %32
  %55 = load i32, i32* %10, align 4
  %56 = load i8*, i8** %4, align 8
  %57 = load i8*, i8** %4, align 8
  %58 = call i32 @strlen(i8* %57)
  %59 = call i32 @send(i32 %55, i8* %56, i32 %58, i32 0)
  %60 = load i32, i32* %5, align 4
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %74

62:                                               ; preds = %54
  br label %63

63:                                               ; preds = %70, %62
  %64 = load i32, i32* %10, align 4
  %65 = load i8*, i8** %4, align 8
  %66 = call i32 @recv(i32 %64, i8* %65, i32 8, i32 0)
  store i32 %66, i32* %12, align 4
  %67 = load i8*, i8** %4, align 8
  %68 = load i32, i32* %12, align 4
  %69 = call i32 @write(i32 1, i8* %67, i32 %68)
  br label %70

70:                                               ; preds = %63
  %71 = load i32, i32* %12, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %63, label %73

73:                                               ; preds = %70
  br label %74

74:                                               ; preds = %73, %54
  %75 = load i32, i32* %10, align 4
  %76 = call i32 @close(i32 %75)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
