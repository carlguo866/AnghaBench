; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_22521.c_get_err_page_size.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_22521.c_get_err_page_size.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.2 = private unnamed_addr constant [152 x i8] c"GET %s/%s?action=reg&regsubmit=1&username=%s HTTP/1.1\0D\0AHost: %s\0D\0AContent-type: application/x-www-form-urlencoded\0D\0AUser-Agent: %s\0D\0AConnection: close\0D\0A\0D\0A\00", align 1
@path = common dso_local global i8* null, align 8
@SCRIPT = common dso_local global i8* null, align 8
@user = common dso_local global i8* null, align 8
@target_host = common dso_local global i8* null, align 8
@USERAGENT = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"cant get error page\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_err_page_size(i32 %0) #0 {
  %2 = alloca %struct.sockaddr_in, align 4
  %3 = alloca [20000 x i8], align 16
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  store i32 %0, i32* %7, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = call i32 @socket(i32 %8, i32 %9, i32 0)
  store i32 %10, i32* %5, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @exit(i32 1) #3
  unreachable

15:                                               ; preds = %1
  %16 = load i32, i32* %5, align 4
  %17 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %18 = call i64 @connect(i32 %16, %struct.sockaddr* %17, i32 4)
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %15
  %21 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #3
  unreachable

23:                                               ; preds = %15
  %24 = getelementptr inbounds [20000 x i8], [20000 x i8]* %3, i64 0, i64 0
  %25 = load i8*, i8** @path, align 8
  %26 = load i8*, i8** @SCRIPT, align 8
  %27 = load i8*, i8** @user, align 8
  %28 = load i8*, i8** @target_host, align 8
  %29 = load i8*, i8** @USERAGENT, align 8
  %30 = call i32 @sprintf(i8* %24, i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.2, i64 0, i64 0), i8* %25, i8* %26, i8* %27, i8* %28, i8* %29)
  %31 = load i32, i32* %5, align 4
  %32 = getelementptr inbounds [20000 x i8], [20000 x i8]* %3, i64 0, i64 0
  %33 = getelementptr inbounds [20000 x i8], [20000 x i8]* %3, i64 0, i64 0
  %34 = call i32 @strlen(i8* %33)
  %35 = call i32 @safe_send(i32 %31, i8* %32, i32 %34, i32 0)
  %36 = load i32, i32* %5, align 4
  %37 = getelementptr inbounds [20000 x i8], [20000 x i8]* %3, i64 0, i64 0
  %38 = call i32 @safe_recv(i32 %36, i8* %37, i32 20000, i32 0)
  %39 = getelementptr inbounds [20000 x i8], [20000 x i8]* %3, i64 0, i64 0
  %40 = call i8* @strstr(i8* %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  store i8* %40, i8** %4, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %23
  %43 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %23
  %46 = load i8*, i8** %4, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 %47, 4
  store i32 %48, i32* %6, align 4
  %49 = load i32, i32* %5, align 4
  %50 = call i32 @close(i32 %49)
  %51 = load i32, i32* %6, align 4
  ret i32 %51
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*, i8*, i8*) #1

declare dso_local i32 @safe_send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @safe_recv(i32, i8*, i32, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
