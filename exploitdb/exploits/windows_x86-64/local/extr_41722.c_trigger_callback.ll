; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86-64/local/extr_41722.c_trigger_callback.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86-64/local/extr_41722.c_trigger_callback.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [25 x i8] c"[+] Creating dummy file\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"echo test > test.txt\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"[+] Calling MoveFileEx()\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"test.txt\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"test2.txt\00", align 1
@MOVEFILE_REPLACE_EXISTING = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [42 x i8] c"[!] Error while calling MoveFileEx(): %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @trigger_callback() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 @system(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %6 = load i32, i32* @MOVEFILE_REPLACE_EXISTING, align 4
  %7 = call i64 @MoveFileEx(i32 ptrtoint ([9 x i8]* @.str.3 to i32), i32 ptrtoint ([10 x i8]* @.str.4 to i32), i32 %6)
  store i64 %7, i64* %2, align 8
  %8 = load i64, i64* %2, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %0
  %11 = call i32 (...) @GetLastError()
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 %11)
  store i32 1, i32* %1, align 4
  br label %14

13:                                               ; preds = %0
  store i32 0, i32* %1, align 4
  br label %14

14:                                               ; preds = %13, %10
  %15 = load i32, i32* %1, align 4
  ret i32 %15
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i64 @MoveFileEx(i32, i32, i32) #1

declare dso_local i32 @GetLastError(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
