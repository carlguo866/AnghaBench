; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_proxyloop.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_proxyloop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"Entering proxyloop..\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"cd /; uname -a; pwd; id;\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @proxyloop(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %8 = call i32 @sleep(i32 1)
  %9 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %11 = call i32 @strcpy(i8* %10, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %12 = load i32, i32* %2, align 4
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %15 = call i32 @strlen(i8* %14)
  %16 = call i32 @write(i32 %12, i8* %13, i32 %15)
  br label %17

17:                                               ; preds = %66, %1
  %18 = load i32, i32* @stdin, align 4
  %19 = call i32 @fileno(i32 %18)
  %20 = call i32 @FD_SET(i32 %19, i32* %5)
  %21 = load i32, i32* %2, align 4
  %22 = call i32 @FD_SET(i32 %21, i32* %5)
  %23 = load i32, i32* @stdin, align 4
  %24 = call i32 @fileno(i32 %23)
  %25 = load i32, i32* %2, align 4
  %26 = call i32 @max(i32 %24, i32 %25)
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %6, align 4
  %28 = load i32, i32* %6, align 4
  %29 = call i32 @select(i32 %28, i32* %5, i32* null, i32* null, i32* null)
  %30 = load i32, i32* @stdin, align 4
  %31 = call i32 @fileno(i32 %30)
  %32 = call i64 @FD_ISSET(i32 %31, i32* %5)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %45

34:                                               ; preds = %17
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %36 = call i32 @bzero(i8* %35, i32 1024)
  %37 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %38 = load i32, i32* @stdin, align 4
  %39 = call i32 @fgets(i8* %37, i32 1022, i32 %38)
  %40 = load i32, i32* %2, align 4
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %42 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %43 = call i32 @strlen(i8* %42)
  %44 = call i32 @write(i32 %40, i8* %41, i32 %43)
  br label %45

45:                                               ; preds = %34, %17
  %46 = load i32, i32* %2, align 4
  %47 = call i64 @FD_ISSET(i32 %46, i32* %5)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %66

49:                                               ; preds = %45
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %51 = call i32 @bzero(i8* %50, i32 1024)
  %52 = load i32, i32* %2, align 4
  %53 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %54 = call i32 @read(i32 %52, i8* %53, i32 1024)
  store i32 %54, i32* %7, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %49
  %57 = call i32 @exit(i32 0) #3
  unreachable

58:                                               ; preds = %49
  %59 = load i32, i32* %7, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  ret i32 -3

62:                                               ; preds = %58
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %64 = load i32, i32* @stdout, align 4
  %65 = call i32 @fputs(i8* %63, i32 %64)
  br label %66

66:                                               ; preds = %62, %45
  br label %17
}

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @max(i32, i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fputs(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
