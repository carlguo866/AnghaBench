; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_findfblock.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_findfblock.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @findfblock(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %10, align 4
  br label %12

12:                                               ; preds = %79, %4
  %13 = load i32, i32* %5, align 4
  %14 = call i32 @findblock(i32 %13, i32 4, i32 0)
  store i32 %14, i32* %9, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %83

16:                                               ; preds = %12
  %17 = load i32, i32* %9, align 4
  %18 = call i32 @IDX2PTR(i32 %17)
  store i32 %18, i32* %5, align 4
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %7, align 4
  %21 = sub nsw i32 %19, %20
  %22 = call i64 @validaddr(i32 %21)
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %77

24:                                               ; preds = %16
  %25 = load i32, i32* %5, align 4
  %26 = load i32, i32* %7, align 4
  %27 = sub nsw i32 %25, %26
  %28 = load i32, i32* %8, align 4
  %29 = sub nsw i32 %27, %28
  %30 = call i64 @validaddr(i32 %29)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %77

32:                                               ; preds = %24
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = sub nsw i32 %33, %34
  %36 = call i64 @freeblock(i32 %35, i32 4)
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %77

38:                                               ; preds = %32
  %39 = load i32, i32* %9, align 4
  %40 = load i32, i32* %7, align 4
  %41 = sub nsw i32 %39, %40
  %42 = load i32, i32* %8, align 4
  %43 = sub nsw i32 %41, %42
  %44 = call i64 @freeblock(i32 %43, i32 4)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %77

46:                                               ; preds = %38
  %47 = load i32, i32* %9, align 4
  %48 = load i32, i32* %7, align 4
  %49 = sub nsw i32 %47, %48
  %50 = load i32, i32* %8, align 4
  %51 = sub nsw i32 %49, %50
  %52 = load i32, i32* %6, align 4
  %53 = add nsw i32 %51, %52
  %54 = call i64 @freeblock(i32 %53, i32 4)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %77

56:                                               ; preds = %46
  %57 = load i32, i32* %9, align 4
  %58 = call i32 @ALLOCBLOCK(i32 %57, i32 4)
  %59 = load i32, i32* %9, align 4
  %60 = load i32, i32* %8, align 4
  %61 = sub nsw i32 %59, %60
  %62 = call i32 @ALLOCBLOCK(i32 %61, i32 4)
  %63 = load i32, i32* %9, align 4
  %64 = load i32, i32* %7, align 4
  %65 = sub nsw i32 %63, %64
  %66 = load i32, i32* %8, align 4
  %67 = sub nsw i32 %65, %66
  %68 = call i32 @ALLOCBLOCK(i32 %67, i32 4)
  %69 = load i32, i32* %9, align 4
  %70 = load i32, i32* %7, align 4
  %71 = sub nsw i32 %69, %70
  %72 = load i32, i32* %8, align 4
  %73 = sub nsw i32 %71, %72
  %74 = load i32, i32* %6, align 4
  %75 = add nsw i32 %73, %74
  %76 = call i32 @ALLOCBLOCK(i32 %75, i32 4)
  br label %83

77:                                               ; preds = %46, %38, %32, %24, %16
  %78 = load i32, i32* %10, align 4
  store i32 %78, i32* %5, align 4
  br label %79

79:                                               ; preds = %77
  %80 = load i32, i32* %5, align 4
  %81 = sub nsw i32 %80, 4
  store i32 %81, i32* %5, align 4
  %82 = load i32, i32* %5, align 4
  store i32 %82, i32* %10, align 4
  br label %12

83:                                               ; preds = %56, %12
  %84 = load i32, i32* %9, align 4
  ret i32 %84
}

declare dso_local i32 @findblock(i32, i32, i32) #1

declare dso_local i32 @IDX2PTR(i32) #1

declare dso_local i64 @validaddr(i32) #1

declare dso_local i64 @freeblock(i32, i32) #1

declare dso_local i32 @ALLOCBLOCK(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
