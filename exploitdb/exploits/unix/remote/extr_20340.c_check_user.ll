; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20340.c_check_user.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20340.c_check_user.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SWAT_PORT = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"cannot create socket\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"cannot connect\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s:%s\00", align 1
@.str.3 = private unnamed_addr constant [79 x i8] c"GET / HTTP/1.0\0AConnection: Keep-Alive\0AUser-Agent: %s\0AAuthorization: Basic %s\0A\0A\00", align 1
@USER_AGENT = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"send: \00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"recv: \00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"HTTP/1.0 401 Authorization Required\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"HTTP/1.0 401 Bad Authorization\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"HTTP/1.0 200 OK\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"Unknown result: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_user(i8* %0, i8* %1, %struct.hostent* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca [8192 x i8], align 16
  %9 = alloca [1024 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store %struct.hostent* %2, %struct.hostent** %7, align 8
  %12 = bitcast [8192 x i8]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 8192, i1 false)
  %13 = bitcast [1024 x i8]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %13, i8 0, i64 1024, i1 false)
  %14 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %15 = call i32 @memset(i8* %14, i32 0, i32 8192)
  %16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %17 = call i32 @memset(i8* %16, i32 0, i32 1024)
  %18 = load i32, i32* @PF_INET, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* @SWAT_PORT, align 4
  %21 = call i32 @htons(i32 %20)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %24 = bitcast i32* %23 to i8*
  %25 = load %struct.hostent*, %struct.hostent** %7, align 8
  %26 = getelementptr inbounds %struct.hostent, %struct.hostent* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = inttoptr i64 %27 to i8*
  %29 = call i32 @memcpy(i8* %24, i8* %28, i32 4)
  %30 = load i32, i32* @PF_INET, align 4
  %31 = load i32, i32* @SOCK_STREAM, align 4
  %32 = load i32, i32* @IPPROTO_TCP, align 4
  %33 = call i32 @socket(i32 %30, i32 %31, i32 %32)
  store i32 %33, i32* %10, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %39

35:                                               ; preds = %3
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 @fprintf(i32 %36, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 @exit(i32 -1) #4
  unreachable

39:                                               ; preds = %3
  %40 = load i32, i32* %10, align 4
  %41 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %42 = call i32 @connect(i32 %40, %struct.sockaddr* %41, i32 12)
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %48

44:                                               ; preds = %39
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 @fprintf(i32 %45, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %47 = call i32 @exit(i32 -1) #4
  unreachable

48:                                               ; preds = %39
  %49 = load i8*, i8** %5, align 8
  %50 = call i32 @chop(i8* %49)
  %51 = load i8*, i8** %6, align 8
  %52 = call i32 @chop(i8* %51)
  %53 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %54 = load i8*, i8** %5, align 8
  %55 = load i8*, i8** %6, align 8
  %56 = call i32 @sprintf(i8* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %54, i8* %55)
  %57 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %58 = load i8*, i8** @USER_AGENT, align 8
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %60 = call i8* @base64_encode(i8* %59)
  %61 = call i32 @sprintf(i8* %57, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.3, i64 0, i64 0), i8* %58, i8* %60)
  %62 = load i32, i32* %10, align 4
  %63 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %64 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @send(i32 %62, i8* %63, i32 %65, i32 0)
  %67 = icmp slt i32 %66, 1
  br i1 %67, label %68, label %71

68:                                               ; preds = %48
  %69 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %70 = call i32 @exit(i32 1) #4
  unreachable

71:                                               ; preds = %48
  %72 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %73 = call i32 @memset(i8* %72, i32 0, i32 8192)
  %74 = load i32, i32* %10, align 4
  %75 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %76 = call i32 @recv(i32 %74, i8* %75, i32 8192, i32 0)
  %77 = icmp slt i32 %76, 1
  br i1 %77, label %78, label %81

78:                                               ; preds = %71
  %79 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %80 = call i32 @exit(i32 1) #4
  unreachable

81:                                               ; preds = %71
  %82 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 8192
  store i8 0, i8* %82, align 16
  %83 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %84 = call i32* @strstr(i8* %83, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0))
  %85 = icmp ne i32* %84, null
  br i1 %85, label %86, label %89

86:                                               ; preds = %81
  %87 = load i32, i32* %10, align 4
  %88 = call i32 @close(i32 %87)
  store i32 1, i32* %4, align 4
  br label %107

89:                                               ; preds = %81
  %90 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %91 = call i32* @strstr(i8* %90, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %92 = icmp ne i32* %91, null
  br i1 %92, label %93, label %96

93:                                               ; preds = %89
  %94 = load i32, i32* %10, align 4
  %95 = call i32 @close(i32 %94)
  store i32 0, i32* %4, align 4
  br label %107

96:                                               ; preds = %89
  %97 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %98 = call i32* @strstr(i8* %97, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %99 = icmp ne i32* %98, null
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = load i32, i32* %10, align 4
  %102 = call i32 @close(i32 %101)
  store i32 2, i32* %4, align 4
  br label %107

103:                                              ; preds = %96
  %104 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %105 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), i8* %104)
  %106 = call i32 @exit(i32 1) #4
  unreachable

107:                                              ; preds = %100, %93, %86
  %108 = load i32, i32* %4, align 4
  ret i32 %108
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @chop(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #2

declare dso_local i8* @base64_encode(i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32* @strstr(i8*, i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @printf(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
