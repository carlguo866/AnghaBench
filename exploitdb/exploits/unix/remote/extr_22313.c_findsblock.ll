; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_findsblock.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_findsblock.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@gfirst = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @findsblock(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = load i64, i64* @gfirst, align 8
  %7 = icmp ne i64 %6, 0
  %8 = zext i1 %7 to i64
  %9 = select i1 %7, i32 44, i32 4
  store i32 %9, i32* %5, align 4
  %10 = load i32, i32* %2, align 4
  store i32 %10, i32* %3, align 4
  br label %11

11:                                               ; preds = %77, %1
  %12 = load i32, i32* %2, align 4
  %13 = load i32, i32* %5, align 4
  %14 = call i32 @findblock(i32 %12, i32 %13, i32 1)
  store i32 %14, i32* %4, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %81

16:                                               ; preds = %11
  %17 = load i32, i32* %4, align 4
  %18 = call i32 @IDX2PTR(i32 %17)
  store i32 %18, i32* %2, align 4
  %19 = load i64, i64* @gfirst, align 8
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = load i32, i32* %2, align 4
  %23 = call i64 @validaddr(i32 %22)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load i32, i32* %4, align 4
  %27 = load i32, i32* %5, align 4
  %28 = call i32 @ALLOCBLOCK(i32 %26, i32 %27)
  br label %81

29:                                               ; preds = %21
  %30 = load i32, i32* %3, align 4
  store i32 %30, i32* %2, align 4
  br label %31

31:                                               ; preds = %29
  br label %77

32:                                               ; preds = %16
  %33 = load i32, i32* %2, align 4
  %34 = sub nsw i32 %33, 24
  %35 = call i64 @validaddr(i32 %34)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %74

37:                                               ; preds = %32
  %38 = load i32, i32* %4, align 4
  %39 = sub nsw i32 %38, 24
  %40 = call i64 @freeblock(i32 %39, i32 4)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %74

42:                                               ; preds = %37
  %43 = load i32, i32* %4, align 4
  %44 = add nsw i32 %43, 12
  %45 = call i64 @freeblock(i32 %44, i32 4)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %74

47:                                               ; preds = %42
  %48 = load i32, i32* %4, align 4
  %49 = add nsw i32 %48, 16
  %50 = call i64 @freeblock(i32 %49, i32 4)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %74

52:                                               ; preds = %47
  %53 = load i32, i32* %4, align 4
  %54 = sub nsw i32 %53, 14
  %55 = call i64 @freeblock(i32 %54, i32 4)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %74

57:                                               ; preds = %52
  %58 = load i32, i32* %4, align 4
  %59 = sub nsw i32 %58, 24
  %60 = call i32 @ALLOCBLOCK(i32 %59, i32 4)
  %61 = load i32, i32* %4, align 4
  %62 = sub nsw i32 %61, 14
  %63 = call i32 @ALLOCBLOCK(i32 %62, i32 2)
  %64 = load i32, i32* %4, align 4
  %65 = call i32 @ALLOCBLOCK(i32 %64, i32 4)
  %66 = load i32, i32* %4, align 4
  %67 = add nsw i32 %66, 12
  %68 = call i32 @ALLOCBLOCK(i32 %67, i32 4)
  %69 = load i32, i32* %4, align 4
  %70 = add nsw i32 %69, 16
  %71 = call i32 @ALLOCBLOCK(i32 %70, i32 4)
  %72 = load i32, i32* %4, align 4
  %73 = sub nsw i32 %72, 24
  store i32 %73, i32* %4, align 4
  br label %81

74:                                               ; preds = %52, %47, %42, %37, %32
  %75 = load i32, i32* %3, align 4
  store i32 %75, i32* %2, align 4
  br label %76

76:                                               ; preds = %74
  br label %77

77:                                               ; preds = %76, %31
  %78 = load i32, i32* %2, align 4
  %79 = add nsw i32 %78, 4
  store i32 %79, i32* %2, align 4
  %80 = load i32, i32* %2, align 4
  store i32 %80, i32* %3, align 4
  br label %11

81:                                               ; preds = %57, %25, %11
  store i64 0, i64* @gfirst, align 8
  %82 = load i32, i32* %4, align 4
  ret i32 %82
}

declare dso_local i32 @findblock(i32, i32, i32) #1

declare dso_local i32 @IDX2PTR(i32) #1

declare dso_local i64 @validaddr(i32) #1

declare dso_local i32 @ALLOCBLOCK(i32, i32) #1

declare dso_local i64 @freeblock(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
