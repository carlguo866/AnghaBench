; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22356.c_construct_smb_base_header.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22356.c_construct_smb_base_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.smb_base_header = type { i32*, i32, i32, i32, i32, i8*, i8*, i32* }

@.str = private unnamed_addr constant [5 x i8] c"\FFSMB\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @construct_smb_base_header(i8* %0, i8* %1, i8* %2, i8 signext %3, i8 signext %4, i8 signext %5, i8 signext %6, i8 signext %7) #0 {
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca %struct.smb_base_header*, align 8
  store i8* %0, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  store i8* %2, i8** %11, align 8
  store i8 %3, i8* %12, align 1
  store i8 %4, i8* %13, align 1
  store i8 %5, i8* %14, align 1
  store i8 %6, i8* %15, align 1
  store i8 %7, i8* %16, align 1
  %18 = load i8*, i8** %9, align 8
  %19 = bitcast i8* %18 to %struct.smb_base_header*
  store %struct.smb_base_header* %19, %struct.smb_base_header** %17, align 8
  %20 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %21 = call i32 @memset(%struct.smb_base_header* %20, i8 signext 0, i32 48)
  %22 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %23 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %22, i32 0, i32 7
  %24 = load i32*, i32** %23, align 8
  %25 = call i32 @memcpy(i32* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %26 = load i8*, i8** %10, align 8
  %27 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %28 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %27, i32 0, i32 6
  store i8* %26, i8** %28, align 8
  %29 = load i8*, i8** %11, align 8
  %30 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %31 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %30, i32 0, i32 5
  store i8* %29, i8** %31, align 8
  %32 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %33 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %32, i32 0, i32 4
  %34 = call i32 @memcpy(i32* %33, i8* %12, i32 1)
  %35 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %36 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %35, i32 0, i32 3
  %37 = call i32 @memcpy(i32* %36, i8* %13, i32 1)
  %38 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %39 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %38, i32 0, i32 2
  %40 = call i32 @memcpy(i32* %39, i8* %14, i32 1)
  %41 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %42 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %41, i32 0, i32 1
  %43 = call i32 @memcpy(i32* %42, i8* %15, i32 1)
  %44 = load %struct.smb_base_header*, %struct.smb_base_header** %17, align 8
  %45 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %44, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = call i32 @memcpy(i32* %46, i8* %16, i32 1)
  ret void
}

declare dso_local i32 @memset(%struct.smb_base_header*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
