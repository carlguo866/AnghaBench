; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20163.c_term.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20163.c_term.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @term(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1032 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  br label %8

8:                                                ; preds = %2, %61
  %9 = call i32 @FD_ZERO(i32* %6)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %6)
  %12 = load i32, i32* %4, align 4
  %13 = call i32 @FD_SET(i32 %12, i32* %6)
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp sgt i32 %14, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %8
  %18 = load i32, i32* %3, align 4
  br label %21

19:                                               ; preds = %8
  %20 = load i32, i32* %4, align 4
  br label %21

21:                                               ; preds = %19, %17
  %22 = phi i32 [ %18, %17 ], [ %20, %19 ]
  %23 = add nsw i32 %22, 1
  %24 = call i32 @select(i32 %23, i32* %6, i32* null, i32* null, i32* null)
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  ret void

27:                                               ; preds = %21
  %28 = load i32, i32* %4, align 4
  %29 = call i64 @FD_ISSET(i32 %28, i32* %6)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %27
  %32 = load i32, i32* %4, align 4
  %33 = getelementptr inbounds [1032 x i8], [1032 x i8]* %5, i64 0, i64 0
  %34 = call i32 @read(i32 %32, i8* %33, i32 1032)
  store i32 %34, i32* %7, align 4
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = call i32 @exit(i32 0) #3
  unreachable

38:                                               ; preds = %31
  %39 = load i32, i32* %3, align 4
  %40 = getelementptr inbounds [1032 x i8], [1032 x i8]* %5, i64 0, i64 0
  %41 = load i32, i32* %7, align 4
  %42 = call i32 @write(i32 %39, i8* %40, i32 %41)
  br label %43

43:                                               ; preds = %38
  br label %44

44:                                               ; preds = %43, %27
  %45 = load i32, i32* %3, align 4
  %46 = call i64 @FD_ISSET(i32 %45, i32* %6)
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %61

48:                                               ; preds = %44
  %49 = load i32, i32* %3, align 4
  %50 = getelementptr inbounds [1032 x i8], [1032 x i8]* %5, i64 0, i64 0
  %51 = call i32 @read(i32 %49, i8* %50, i32 1032)
  store i32 %51, i32* %7, align 4
  %52 = icmp slt i32 %51, 1
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = call i32 @exit(i32 0) #3
  unreachable

55:                                               ; preds = %48
  %56 = load i32, i32* %4, align 4
  %57 = getelementptr inbounds [1032 x i8], [1032 x i8]* %5, i64 0, i64 0
  %58 = load i32, i32* %7, align 4
  %59 = call i32 @write(i32 %56, i8* %57, i32 %58)
  br label %60

60:                                               ; preds = %55
  br label %61

61:                                               ; preds = %60, %44
  br label %8
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
