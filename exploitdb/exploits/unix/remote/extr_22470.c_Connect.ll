; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_Connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_Connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@EINPROGRESS = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4
@ETIMEDOUT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Connect(i32 %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.timeval, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.sockaddr_in, align 4
  store i32 %0, i32* %6, align 4
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %18 = call i32 @bzero(%struct.sockaddr_in* %17, i32 12)
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* @AF_INET, align 4
  %22 = load i8*, i8** %7, align 8
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  %24 = call i32 @inet_pton(i32 %21, i8* %22, i32* %23)
  %25 = load i32, i32* %8, align 4
  %26 = call i32 @htons(i32 %25)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* %6, align 4
  %29 = load i32, i32* @F_GETFL, align 4
  %30 = call i64 @fcntl(i32 %28, i32 %29, i32 0)
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %10, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %4
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @close(i32 %34)
  store i32 -1, i32* %5, align 4
  br label %151

36:                                               ; preds = %4
  %37 = load i32, i32* %6, align 4
  %38 = load i32, i32* @F_SETFL, align 4
  %39 = load i32, i32* %10, align 4
  %40 = load i32, i32* @O_NONBLOCK, align 4
  %41 = or i32 %39, %40
  %42 = call i64 @fcntl(i32 %37, i32 %38, i32 %41)
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = load i32, i32* %6, align 4
  %46 = call i32 @close(i32 %45)
  store i32 -1, i32* %5, align 4
  br label %151

47:                                               ; preds = %36
  %48 = load i32, i32* %9, align 4
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  store i32 %48, i32* %49, align 8
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  store i64 0, i64* %50, align 8
  %51 = call i32 @FD_ZERO(i32* %12)
  %52 = call i32 @FD_ZERO(i32* %13)
  %53 = load i32, i32* %6, align 4
  %54 = call i32 @FD_SET(i32 %53, i32* %12)
  %55 = load i32, i32* %6, align 4
  %56 = call i32 @FD_SET(i32 %55, i32* %13)
  %57 = load i32, i32* %6, align 4
  %58 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %59 = call i64 @connect(i32 %57, %struct.sockaddr* %58, i32 12)
  %60 = icmp slt i64 %59, 0
  br i1 %60, label %61, label %69

61:                                               ; preds = %47
  %62 = load i32, i32* @errno, align 4
  %63 = load i32, i32* @EINPROGRESS, align 4
  %64 = icmp ne i32 %62, %63
  br i1 %64, label %65, label %68

65:                                               ; preds = %61
  %66 = load i32, i32* %6, align 4
  %67 = call i32 @close(i32 %66)
  store i32 -1, i32* %5, align 4
  br label %151

68:                                               ; preds = %61
  br label %79

69:                                               ; preds = %47
  %70 = load i32, i32* %6, align 4
  %71 = load i32, i32* @F_SETFL, align 4
  %72 = load i32, i32* %10, align 4
  %73 = call i64 @fcntl(i32 %70, i32 %71, i32 %72)
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %69
  %76 = load i32, i32* %6, align 4
  %77 = call i32 @close(i32 %76)
  store i32 -1, i32* %5, align 4
  br label %151

78:                                               ; preds = %69
  store i32 1, i32* %5, align 4
  br label %151

79:                                               ; preds = %68
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %80, 1
  %82 = call i32 @select(i32 %81, i32* %12, i32* %13, i32* null, %struct.timeval* %14)
  store i32 %82, i32* %11, align 4
  %83 = load i32, i32* %11, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %79
  %86 = load i32, i32* %6, align 4
  %87 = call i32 @close(i32 %86)
  store i32 -1, i32* %5, align 4
  br label %151

88:                                               ; preds = %79
  %89 = load i32, i32* %11, align 4
  %90 = icmp eq i32 %89, -1
  br i1 %90, label %91, label %94

91:                                               ; preds = %88
  %92 = load i32, i32* %6, align 4
  %93 = call i32 @close(i32 %92)
  store i32 -1, i32* %5, align 4
  br label %151

94:                                               ; preds = %88
  %95 = load i32, i32* %6, align 4
  %96 = call i64 @FD_ISSET(i32 %95, i32* %12)
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i32, i32* %6, align 4
  %100 = call i64 @FD_ISSET(i32 %99, i32* %13)
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %138

102:                                              ; preds = %98, %94
  %103 = load i32, i32* %6, align 4
  %104 = call i64 @FD_ISSET(i32 %103, i32* %12)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %137

106:                                              ; preds = %102
  %107 = load i32, i32* %6, align 4
  %108 = call i64 @FD_ISSET(i32 %107, i32* %13)
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %137

110:                                              ; preds = %106
  store i32 4, i32* %15, align 4
  %111 = load i32, i32* %6, align 4
  %112 = load i32, i32* @SOL_SOCKET, align 4
  %113 = load i32, i32* @SO_ERROR, align 4
  %114 = call i64 @getsockopt(i32 %111, i32 %112, i32 %113, i32* %16, i32* %15)
  %115 = icmp slt i64 %114, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %110
  %117 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %117, i32* @errno, align 4
  %118 = load i32, i32* %6, align 4
  %119 = call i32 @close(i32 %118)
  store i32 -1, i32* %5, align 4
  br label %151

120:                                              ; preds = %110
  %121 = load i32, i32* %16, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %133

123:                                              ; preds = %120
  %124 = load i32, i32* %6, align 4
  %125 = load i32, i32* @F_SETFL, align 4
  %126 = load i32, i32* %10, align 4
  %127 = call i64 @fcntl(i32 %124, i32 %125, i32 %126)
  %128 = icmp slt i64 %127, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %123
  %130 = load i32, i32* %6, align 4
  %131 = call i32 @close(i32 %130)
  store i32 -1, i32* %5, align 4
  br label %151

132:                                              ; preds = %123
  store i32 1, i32* %5, align 4
  br label %151

133:                                              ; preds = %120
  %134 = load i32, i32* %16, align 4
  store i32 %134, i32* @errno, align 4
  %135 = load i32, i32* %6, align 4
  %136 = call i32 @close(i32 %135)
  store i32 -1, i32* %5, align 4
  br label %151

137:                                              ; preds = %106, %102
  br label %141

138:                                              ; preds = %98
  %139 = load i32, i32* %6, align 4
  %140 = call i32 @close(i32 %139)
  store i32 1, i32* %5, align 4
  br label %151

141:                                              ; preds = %137
  %142 = load i32, i32* %6, align 4
  %143 = load i32, i32* @F_SETFL, align 4
  %144 = load i32, i32* %10, align 4
  %145 = call i64 @fcntl(i32 %142, i32 %143, i32 %144)
  %146 = icmp slt i64 %145, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %141
  %148 = load i32, i32* %6, align 4
  %149 = call i32 @close(i32 %148)
  store i32 -1, i32* %5, align 4
  br label %151

150:                                              ; preds = %141
  store i32 1, i32* %5, align 4
  br label %151

151:                                              ; preds = %150, %147, %138, %133, %132, %129, %116, %91, %85, %78, %75, %65, %44, %33
  %152 = load i32, i32* %5, align 4
  ret i32 %152
}

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @inet_pton(i32, i8*, i32*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @fcntl(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i64 @getsockopt(i32, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
