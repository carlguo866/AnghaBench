; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_764.c_get_server_finished.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_764.c_get_server_finished.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"Server error: %s\0A\00", align 1
@SSL2_MT_SERVER_FINISHED = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"get server finished: Expected SSL2 MT SERVER FINISHED, got %x\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"This server is not vulnerable to this attack.\0A\00", align 1
@cipher = common dso_local global i32 0, align 4
@ciphers = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [30 x i8] c"cipher: 0x%x   ciphers: 0x%x\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_server_finished(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32* %0, i32** %2, align 8
  %7 = load i32, i32* @BUFSIZE, align 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %3, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %4, align 8
  %11 = load i32*, i32** %2, align 8
  %12 = trunc i64 %8 to i32
  %13 = call i32 @read_ssl_packet(i32* %11, i8* %10, i32 %12)
  store i32 %13, i32* %5, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %1
  %16 = getelementptr inbounds i8, i8* %10, i64 1
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = call i32 @ntohs(i32 %18)
  %20 = call i8* @ssl_error(i32 %19)
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 1) #4
  unreachable

23:                                               ; preds = %1
  %24 = getelementptr inbounds i8, i8* %10, i64 0
  %25 = load i8, i8* %24, align 16
  %26 = zext i8 %25 to i32
  %27 = load i8, i8* @SSL2_MT_SERVER_FINISHED, align 1
  %28 = zext i8 %27 to i32
  %29 = icmp ne i32 %26, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %23
  %31 = getelementptr inbounds i8, i8* %10, i64 0
  %32 = load i8, i8* %31, align 16
  %33 = zext i8 %32 to i32
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 %33)
  %35 = call i32 @exit(i32 1) #4
  unreachable

36:                                               ; preds = %23
  %37 = load i32, i32* %5, align 4
  %38 = icmp sle i32 %37, 112
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @exit(i32 1) #4
  unreachable

42:                                               ; preds = %36
  %43 = getelementptr inbounds i8, i8* %10, i64 101
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  store i32 %45, i32* @cipher, align 4
  %46 = getelementptr inbounds i8, i8* %10, i64 109
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 1
  store i32 %48, i32* @ciphers, align 4
  %49 = load i32, i32* @cipher, align 4
  %50 = load i32, i32* @ciphers, align 4
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %49, i32 %50)
  %52 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %52)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @read_ssl_packet(i32*, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i8* @ssl_error(i32) #2

declare dso_local i32 @ntohs(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
