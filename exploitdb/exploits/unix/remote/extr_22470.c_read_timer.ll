; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_read_timer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22470.c_read_timer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @read_timer(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.timeval, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* @F_GETFL, align 4
  %12 = call i64 @fcntl(i32 %10, i32 %11, i32 0)
  %13 = trunc i64 %12 to i32
  store i32 %13, i32* %6, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = load i32, i32* %4, align 4
  %17 = call i32 @close(i32 %16)
  store i32 -1, i32* %3, align 4
  br label %67

18:                                               ; preds = %2
  %19 = load i32, i32* %4, align 4
  %20 = load i32, i32* @F_SETFL, align 4
  %21 = load i32, i32* %6, align 4
  %22 = load i32, i32* @O_NONBLOCK, align 4
  %23 = or i32 %21, %22
  %24 = call i64 @fcntl(i32 %19, i32 %20, i32 %23)
  %25 = icmp slt i64 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %18
  %27 = load i32, i32* %4, align 4
  %28 = call i32 @close(i32 %27)
  store i32 -1, i32* %3, align 4
  br label %67

29:                                               ; preds = %18
  %30 = load i32, i32* %5, align 4
  %31 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  store i64 0, i64* %32, align 8
  %33 = call i32 @FD_ZERO(i32* %8)
  %34 = load i32, i32* %4, align 4
  %35 = call i32 @FD_SET(i32 %34, i32* %8)
  %36 = load i32, i32* %4, align 4
  %37 = add nsw i32 %36, 1
  %38 = call i32 @select(i32 %37, i32* %8, i32* null, i32* null, %struct.timeval* %9)
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %7, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %29
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @close(i32 %42)
  store i32 -1, i32* %3, align 4
  br label %67

44:                                               ; preds = %29
  %45 = load i32, i32* %7, align 4
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = load i32, i32* %4, align 4
  %49 = call i32 @close(i32 %48)
  store i32 -1, i32* %3, align 4
  br label %67

50:                                               ; preds = %44
  %51 = load i32, i32* %4, align 4
  %52 = call i64 @FD_ISSET(i32 %51, i32* %8)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %64

54:                                               ; preds = %50
  %55 = load i32, i32* %4, align 4
  %56 = load i32, i32* @F_SETFL, align 4
  %57 = load i32, i32* %6, align 4
  %58 = call i64 @fcntl(i32 %55, i32 %56, i32 %57)
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  %61 = load i32, i32* %4, align 4
  %62 = call i32 @close(i32 %61)
  store i32 -1, i32* %3, align 4
  br label %67

63:                                               ; preds = %54
  store i32 1, i32* %3, align 4
  br label %67

64:                                               ; preds = %50
  %65 = load i32, i32* %4, align 4
  %66 = call i32 @close(i32 %65)
  store i32 1, i32* %3, align 4
  br label %67

67:                                               ; preds = %64, %63, %60, %47, %41, %26, %15
  %68 = load i32, i32* %3, align 4
  ret i32 %68
}

declare dso_local i64 @fcntl(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
