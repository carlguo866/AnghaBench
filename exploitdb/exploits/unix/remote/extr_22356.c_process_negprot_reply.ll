; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22356.c_process_negprot_reply.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22356.c_process_negprot_reply.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.nbt_session_header = type { i32 }
%struct.smb_base_header = type { i64, i32 }
%struct.negprot_reply_header = type { i32, i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"read() failed, reason: '%s' (code %i)\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@sessionid = common dso_local global i64 0, align 8
@SMB_NEGPROT = common dso_local global i64 0, align 8
@pid = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"protocol negotiation failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"protocol negotiation complete\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_negprot_reply(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.nbt_session_header*, align 8
  %4 = alloca %struct.smb_base_header*, align 8
  %5 = alloca %struct.negprot_reply_header*, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %10 = bitcast i8* %9 to %struct.nbt_session_header*
  store %struct.nbt_session_header* %10, %struct.nbt_session_header** %3, align 8
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %12 = getelementptr inbounds i8, i8* %11, i64 4
  %13 = bitcast i8* %12 to %struct.smb_base_header*
  store %struct.smb_base_header* %13, %struct.smb_base_header** %4, align 8
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %15 = getelementptr inbounds i8, i8* %14, i64 20
  %16 = bitcast i8* %15 to %struct.negprot_reply_header*
  store %struct.negprot_reply_header* %16, %struct.negprot_reply_header** %5, align 8
  %17 = load i32, i32* %2, align 4
  %18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %19 = call i32 @read(i32 %17, i8* %18, i32 1024)
  store i32 %19, i32* %7, align 4
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %21, label %32

21:                                               ; preds = %1
  %22 = load i32, i32* %2, align 4
  %23 = call i32 @close(i32 %22)
  %24 = load i32, i32* @stderr, align 4
  %25 = load i32, i32* @errno, align 4
  %26 = call i8* @strerror(i32 %25)
  %27 = load i32, i32* @errno, align 4
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %26, i32 %27)
  %29 = load i32, i32* @errno, align 4
  %30 = sub nsw i32 0, %29
  %31 = call i32 @exit(i32 %30) #3
  unreachable

32:                                               ; preds = %1
  %33 = load %struct.smb_base_header*, %struct.smb_base_header** %4, align 8
  %34 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %33, i32 0, i32 1
  %35 = call i32 @memcpy(i64* %8, i32* %34, i32 8)
  %36 = load %struct.negprot_reply_header*, %struct.negprot_reply_header** %5, align 8
  %37 = getelementptr inbounds %struct.negprot_reply_header, %struct.negprot_reply_header* %36, i32 0, i32 1
  %38 = call i32 @memcpy(i64* @sessionid, i32* %37, i32 4)
  %39 = load %struct.smb_base_header*, %struct.smb_base_header** %4, align 8
  %40 = getelementptr inbounds %struct.smb_base_header, %struct.smb_base_header* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* @SMB_NEGPROT, align 8
  %43 = icmp ne i64 %41, %42
  br i1 %43, label %53, label %44

44:                                               ; preds = %32
  %45 = load %struct.negprot_reply_header*, %struct.negprot_reply_header** %5, align 8
  %46 = getelementptr inbounds %struct.negprot_reply_header, %struct.negprot_reply_header* %45, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp ne i32 %47, 17
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = load i64, i64* %8, align 8
  %51 = load i64, i64* @pid, align 8
  %52 = icmp ne i64 %50, %51
  br i1 %52, label %53, label %59

53:                                               ; preds = %49, %44, %32
  %54 = load i32, i32* %2, align 4
  %55 = call i32 @close(i32 %54)
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %58 = call i32 @exit(i32 -1) #3
  unreachable

59:                                               ; preds = %49
  %60 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  ret void
}

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i64*, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
