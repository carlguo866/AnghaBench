; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_connect_to_host.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_connect_to_host.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.timeval = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"[-] Socket\00", align 1
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINPROGRESS = common dso_local global i64 0, align 8
@TIMEOUT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"[-] Select\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"[-] Timeout\0A\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [15 x i8] c"[-] Getsockopt\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"[*] SO_ERROR != 0\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connect_to_host(i64 %0, i16 zeroext %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.timeval, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i16 %1, i16* %5, align 2
  %16 = call i32 @memset(%struct.sockaddr_in* %9, i32 0, i32 16)
  %17 = load i16, i16* %5, align 2
  %18 = call i32 @htons(i16 zeroext %17)
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %20, i32* %21, align 8
  %22 = load i64, i64* %4, align 8
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %23, i32 0, i32 0
  store i64 %22, i64* %24, align 8
  %25 = load i32, i32* @AF_INET, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = call i32 @socket(i32 %25, i32 %26, i32 0)
  store i32 %27, i32* %8, align 4
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %29, label %31

29:                                               ; preds = %2
  %30 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

31:                                               ; preds = %2
  %32 = load i32, i32* %8, align 4
  %33 = load i32, i32* @F_GETFL, align 4
  %34 = call i32 @fcntl(i32 %32, i32 %33, i32 0)
  store i32 %34, i32* %7, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %39

36:                                               ; preds = %31
  %37 = load i32, i32* %8, align 4
  %38 = call i32 @close(i32 %37)
  store i32 -1, i32* %3, align 4
  br label %121

39:                                               ; preds = %31
  %40 = load i32, i32* %8, align 4
  %41 = load i32, i32* @F_SETFL, align 4
  %42 = load i32, i32* %7, align 4
  %43 = load i32, i32* @O_NONBLOCK, align 4
  %44 = or i32 %42, %43
  %45 = call i32 @fcntl(i32 %40, i32 %41, i32 %44)
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %47, label %50

47:                                               ; preds = %39
  %48 = load i32, i32* %8, align 4
  %49 = call i32 @close(i32 %48)
  store i32 -1, i32* %3, align 4
  br label %121

50:                                               ; preds = %39
  %51 = load i32, i32* %8, align 4
  %52 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %53 = call i32 @connect(i32 %51, %struct.sockaddr* %52, i32 16)
  store i32 %53, i32* %6, align 4
  %54 = load i32, i32* %6, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %112

56:                                               ; preds = %50
  %57 = load i64, i64* @errno, align 8
  %58 = load i64, i64* @EINPROGRESS, align 8
  %59 = icmp ne i64 %57, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %56
  %61 = load i32, i32* %8, align 4
  %62 = call i32 @close(i32 %61)
  store i32 -1, i32* %3, align 4
  br label %121

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  %65 = load i32, i32* @TIMEOUT, align 4
  store i32 %65, i32* %64, align 4
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i32 0, i32* %66, align 4
  %67 = call i32 @FD_ZERO(i32* %12)
  %68 = call i32 @FD_ZERO(i32* %13)
  %69 = load i32, i32* %8, align 4
  %70 = call i32 @FD_SET(i32 %69, i32* %12)
  %71 = load i32, i32* %8, align 4
  %72 = call i32 @FD_SET(i32 %71, i32* %13)
  %73 = load i32, i32* %8, align 4
  %74 = add nsw i32 %73, 1
  %75 = call i32 @select(i32 %74, i32* %12, i32* %13, i32* null, %struct.timeval* %11)
  store i32 %75, i32* %10, align 4
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %77, label %79

77:                                               ; preds = %63
  %78 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

79:                                               ; preds = %63
  %80 = load i32, i32* %10, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %79
  %83 = load i32, i32* %8, align 4
  %84 = call i32 @close(i32 %83)
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 @fprintf(i32 %85, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

87:                                               ; preds = %79
  %88 = load i32, i32* %8, align 4
  %89 = call i64 @FD_ISSET(i32 %88, i32* %12)
  %90 = icmp ne i64 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %87
  %92 = load i32, i32* %8, align 4
  %93 = call i64 @FD_ISSET(i32 %92, i32* %13)
  %94 = icmp ne i64 %93, 0
  br i1 %94, label %95, label %109

95:                                               ; preds = %91, %87
  store i32 0, i32* %14, align 4
  store i32 4, i32* %15, align 4
  %96 = load i32, i32* %8, align 4
  %97 = load i32, i32* @SOL_SOCKET, align 4
  %98 = load i32, i32* @SO_ERROR, align 4
  %99 = call i32 @getsockopt(i32 %96, i32 %97, i32 %98, i32* %14, i32* %15)
  %100 = icmp eq i32 %99, -1
  br i1 %100, label %101, label %103

101:                                              ; preds = %95
  %102 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

103:                                              ; preds = %95
  %104 = load i32, i32* %14, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %103
  %107 = call i32 @debug(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

108:                                              ; preds = %103
  br label %110

109:                                              ; preds = %91
  store i32 -1, i32* %3, align 4
  br label %121

110:                                              ; preds = %108
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111, %50
  %113 = load i32, i32* %8, align 4
  %114 = load i32, i32* @F_SETFL, align 4
  %115 = load i32, i32* %7, align 4
  %116 = call i32 @fcntl(i32 %113, i32 %114, i32 %115)
  %117 = icmp eq i32 %116, -1
  br i1 %117, label %118, label %119

118:                                              ; preds = %112
  store i32 -1, i32* %3, align 4
  br label %121

119:                                              ; preds = %112
  %120 = load i32, i32* %8, align 4
  store i32 %120, i32* %3, align 4
  br label %121

121:                                              ; preds = %119, %118, %109, %106, %101, %82, %77, %60, %47, %36, %29
  %122 = load i32, i32* %3, align 4
  ret i32 %122
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @getsockopt(i32, i32, i32, i32*, i32*) #1

declare dso_local i32 @debug(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
