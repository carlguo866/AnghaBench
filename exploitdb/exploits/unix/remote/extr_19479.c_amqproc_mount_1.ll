; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_19479.c_amqproc_mount_1.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_19479.c_amqproc_mount_1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32 }

@amqproc_mount_1.res = internal global i32 0, align 4
@__const.amqproc_mount_1.TIMEOUT = private unnamed_addr constant %struct.timeval { i32 10, i32 0 }, align 4
@AMQPROC_MOUNT = common dso_local global i32 0, align 4
@xdr_amq_string = common dso_local global i64 0, align 8
@xdr_int = common dso_local global i64 0, align 8
@RPC_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [19 x i8] c"voce e' um hax0r!\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"don't forget to restart amd: /etc/rc.d/init.d/amd start\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"clnt_call\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"exploit failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @amqproc_mount_1(i32 %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca %struct.timeval, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  %7 = bitcast %struct.timeval* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 bitcast (%struct.timeval* @__const.amqproc_mount_1.TIMEOUT to i8*), i64 8, i1 false)
  %8 = call i32 @memset(i8* bitcast (i32* @amqproc_mount_1.res to i8*), i32 0, i32 4)
  %9 = load i32*, i32** %5, align 8
  %10 = load i32, i32* @AMQPROC_MOUNT, align 4
  %11 = load i64, i64* @xdr_amq_string, align 8
  %12 = trunc i64 %11 to i32
  %13 = load i32, i32* %4, align 4
  %14 = load i64, i64* @xdr_int, align 8
  %15 = trunc i64 %14 to i32
  %16 = bitcast %struct.timeval* %6 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = call i64 @clnt_call(i32* %9, i32 %10, i32 %12, i32 %13, i32 %15, i32 ptrtoint (i32* @amqproc_mount_1.res to i32), i64 %17)
  %19 = load i64, i64* @RPC_SUCCESS, align 8
  %20 = icmp ne i64 %18, %19
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %23 = call i32 @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %24 = load i32*, i32** %5, align 8
  %25 = call i32 @clnt_perror(i32* %24, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  store i32* null, i32** %3, align 8
  br label %28

26:                                               ; preds = %2
  %27 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0))
  store i32* @amqproc_mount_1.res, i32** %3, align 8
  br label %28

28:                                               ; preds = %26, %21
  %29 = load i32*, i32** %3, align 8
  ret i32* %29
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i64 @clnt_call(i32*, i32, i32, i32, i32, i32, i64) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @clnt_perror(i32*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
