; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_764.c_get_server_verify.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_764.c_get_server_verify.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32 }

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"Server error: %s\0A\00", align 1
@CHALLENGE_LENGTH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [42 x i8] c"get server verify: Malformed packet size\0A\00", align 1
@SSL2_MT_SERVER_VERIFY = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [59 x i8] c"get server verify: Expected SSL2 MT SERVER VERIFY, got %x\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"get server verify: Challenge strings don't match\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_server_verify(%struct.TYPE_4__* %0) #0 {
  %2 = alloca %struct.TYPE_4__*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %struct.TYPE_4__* %0, %struct.TYPE_4__** %2, align 8
  %6 = load i32, i32* @BUFSIZE, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %3, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %4, align 8
  %10 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %11 = trunc i64 %7 to i32
  %12 = call i32 @read_ssl_packet(%struct.TYPE_4__* %10, i8* %9, i32 %11)
  store i32 %12, i32* %5, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds i8, i8* %9, i64 1
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = call i32 @ntohs(i32 %17)
  %19 = call i8* @ssl_error(i32 %18)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 1) #4
  unreachable

22:                                               ; preds = %1
  %23 = load i32, i32* %5, align 4
  %24 = load i32, i32* @CHALLENGE_LENGTH, align 4
  %25 = add nsw i32 1, %24
  %26 = icmp ne i32 %23, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %29 = call i32 @exit(i32 1) #4
  unreachable

30:                                               ; preds = %22
  %31 = getelementptr inbounds i8, i8* %9, i64 0
  %32 = load i8, i8* %31, align 16
  %33 = zext i8 %32 to i32
  %34 = load i8, i8* @SSL2_MT_SERVER_VERIFY, align 1
  %35 = zext i8 %34 to i32
  %36 = icmp ne i32 %33, %35
  br i1 %36, label %37, label %43

37:                                               ; preds = %30
  %38 = getelementptr inbounds i8, i8* %9, i64 0
  %39 = load i8, i8* %38, align 16
  %40 = zext i8 %39 to i32
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 %40)
  %42 = call i32 @exit(i32 1) #4
  unreachable

43:                                               ; preds = %30
  %44 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds i8, i8* %9, i64 1
  %48 = load i32, i32* @CHALLENGE_LENGTH, align 4
  %49 = call i64 @memcmp(i32 %46, i8* %47, i32 %48)
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0))
  %53 = call i32 @exit(i32 1) #4
  unreachable

54:                                               ; preds = %43
  %55 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %55)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @read_ssl_packet(%struct.TYPE_4__*, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i8* @ssl_error(i32) #2

declare dso_local i32 @ntohs(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @memcmp(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
