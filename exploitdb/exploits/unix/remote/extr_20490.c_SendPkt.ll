; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20490.c_SendPkt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20490.c_SendPkt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@PACKETSZ = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"error building answer packet\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"sending answer packet\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @SendPkt(i32 %0, i8* %1, i8* %2, i8* %3, i32 %4, %struct.sockaddr_in* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store i8* %1, i8** %10, align 8
  store i8* %2, i8** %11, align 8
  store i8* %3, i8** %12, align 8
  store i32 %4, i32* %13, align 4
  store %struct.sockaddr_in* %5, %struct.sockaddr_in** %14, align 8
  store i32 %6, i32* %15, align 4
  %21 = load i32, i32* @PACKETSZ, align 4
  %22 = zext i32 %21 to i64
  %23 = call i8* @llvm.stacksave()
  store i8* %23, i8** %16, align 8
  %24 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %17, align 8
  %25 = load i8*, i8** %10, align 8
  %26 = load i32, i32* @PACKETSZ, align 4
  %27 = load i8*, i8** %11, align 8
  %28 = load i8*, i8** %12, align 8
  %29 = load i32, i32* %13, align 4
  %30 = call i32 @MakeDNSPkt(i8* %25, i8* %24, i32 %26, i8* %27, i8* %28, i32 %29)
  store i32 %30, i32* %18, align 4
  %31 = load i32, i32* %18, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %7
  %34 = load i32, i32* @stderr, align 4
  %35 = call i32 @fprintf(i32 %34, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %8, align 4
  store i32 1, i32* %20, align 4
  br label %49

36:                                               ; preds = %7
  %37 = load i32, i32* %9, align 4
  %38 = load i32, i32* %18, align 4
  %39 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %40 = bitcast %struct.sockaddr_in* %39 to %struct.sockaddr*
  %41 = load i32, i32* %15, align 4
  %42 = call i32 @sendto(i32 %37, i8* %24, i32 %38, i32 0, %struct.sockaddr* %40, i32 %41)
  store i32 %42, i32* %19, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  %46 = load i32, i32* %19, align 4
  store i32 %46, i32* %8, align 4
  store i32 1, i32* %20, align 4
  br label %49

47:                                               ; preds = %36
  %48 = load i32, i32* %19, align 4
  store i32 %48, i32* %8, align 4
  store i32 1, i32* %20, align 4
  br label %49

49:                                               ; preds = %47, %44, %33
  %50 = load i8*, i8** %16, align 8
  call void @llvm.stackrestore(i8* %50)
  %51 = load i32, i32* %8, align 4
  ret i32 %51
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @MakeDNSPkt(i8*, i8*, i32, i8*, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
