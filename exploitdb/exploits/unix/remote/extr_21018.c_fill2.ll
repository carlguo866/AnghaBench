; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21018.c_fill2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21018.c_fill2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@dalen = common dso_local global i32 0, align 4
@big = common dso_local global i64 0, align 8
@small = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fill2(i32 %0, i8 signext %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8 %1, i8* %6, align 1
  store i32 %2, i32* %7, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* @dalen, align 4
  %14 = sdiv i32 %12, %13
  %15 = sub nsw i32 %14, 10
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* @dalen, align 4
  %18 = srem i32 %16, %17
  %19 = sdiv i32 %18, 3
  %20 = mul nsw i32 %19, 3
  store i32 %20, i32* %10, align 4
  %21 = load i32, i32* %5, align 4
  %22 = load i32, i32* %9, align 4
  %23 = load i32, i32* @dalen, align 4
  %24 = mul nsw i32 %22, %23
  %25 = load i32, i32* %10, align 4
  %26 = mul nsw i32 %25, 3
  %27 = add nsw i32 %24, %26
  %28 = sub nsw i32 %21, %27
  store i32 %28, i32* %11, align 4
  %29 = load i32, i32* %11, align 4
  %30 = call i32 @solve(i32 %29)
  %31 = load i64, i64* @big, align 8
  %32 = load i32, i32* %9, align 4
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, %31
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %9, align 4
  %36 = load i64, i64* @small, align 8
  %37 = load i32, i32* %10, align 4
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %38, %36
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %10, align 4
  store i32 0, i32* %8, align 4
  br label %41

41:                                               ; preds = %47, %3
  %42 = load i32, i32* %8, align 4
  %43 = load i32, i32* %9, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %50

45:                                               ; preds = %41
  %46 = call i32 (...) @do_ayt()
  br label %47

47:                                               ; preds = %45
  %48 = load i32, i32* %8, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %8, align 4
  br label %41

50:                                               ; preds = %41
  store i32 0, i32* %8, align 4
  br label %51

51:                                               ; preds = %58, %50
  %52 = load i32, i32* %8, align 4
  %53 = load i32, i32* %10, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = load i8, i8* %6, align 1
  %57 = call i32 @will(i8 signext %56)
  br label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %8, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %8, align 4
  br label %51

61:                                               ; preds = %51
  %62 = load i32, i32* %7, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = call i32 (...) @push_clean()
  br label %66

66:                                               ; preds = %64, %61
  %67 = load i32, i32* %4, align 4
  ret i32 %67
}

declare dso_local i32 @solve(i32) #1

declare dso_local i32 @do_ayt(...) #1

declare dso_local i32 @will(i8 signext) #1

declare dso_local i32 @push_clean(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
