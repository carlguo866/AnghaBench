; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_bscann.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22975.c_bscann.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A [+] Checking, banner ...\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"wu-2.6.0\00", align 1
@.str.2 = private unnamed_addr constant [66 x i8] c" [*] [wu-ftpd-2.6.0]: This is version that exploit is possible.\0A\0A\00", align 1
@SCS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"wu-2.6.1\00", align 1
@.str.4 = private unnamed_addr constant [66 x i8] c" [*] [wu-ftpd-2.6.1]: This is version that exploit is possible.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"wu-2.6.2\00", align 1
@.str.6 = private unnamed_addr constant [66 x i8] c" [*] [wu-ftpd-2.6.2]: This is version that exploit is possible.\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [45 x i8] c" [x] This version does not support exploit.\0A\00", align 1
@FAD = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bscann(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  %4 = load i32, i32* @stdout, align 4
  %5 = call i32 @fprintf(i32 %4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %6 = load i8*, i8** %3, align 8
  %7 = call i64 @strstr(i8* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %1
  %10 = load i32, i32* @stdout, align 4
  %11 = call i32 @fprintf(i32 %10, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i64 0, i64 0))
  %12 = load i32, i32* @SCS, align 4
  store i32 %12, i32* %2, align 4
  br label %33

13:                                               ; preds = %1
  %14 = load i8*, i8** %3, align 8
  %15 = call i64 @strstr(i8* %14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %13
  %18 = load i32, i32* @stdout, align 4
  %19 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.4, i64 0, i64 0))
  %20 = load i32, i32* @SCS, align 4
  store i32 %20, i32* %2, align 4
  br label %33

21:                                               ; preds = %13
  %22 = load i8*, i8** %3, align 8
  %23 = call i64 @strstr(i8* %22, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load i32, i32* @stdout, align 4
  %27 = call i32 @fprintf(i32 %26, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.6, i64 0, i64 0))
  %28 = load i32, i32* @SCS, align 4
  store i32 %28, i32* %2, align 4
  br label %33

29:                                               ; preds = %21
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 @fprintf(i32 %30, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0))
  %32 = load i32, i32* @FAD, align 4
  store i32 %32, i32* %2, align 4
  br label %33

33:                                               ; preds = %29, %25, %17, %9
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
