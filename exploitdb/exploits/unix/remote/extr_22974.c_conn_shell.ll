; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22974.c_conn_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_22974.c_conn_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NRL = common dso_local global i32 0, align 4
@DEF_COMM = common dso_local global i8* null, align 8
@GET_R = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c" [*] Send, command packet !\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@SCS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @conn_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %9 = load i32, i32* @NRL, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i8*, i8** @DEF_COMM, align 8
  store i8* %10, i8** %5, align 8
  %11 = load i32, i32* @GET_R, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  %15 = load i32, i32* @NRL, align 4
  %16 = trunc i64 %12 to i32
  %17 = call i32 @memset(i8* %14, i32 %15, i32 %16)
  %18 = load i32, i32* @stdout, align 4
  %19 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* %2, align 4
  %21 = load i8*, i8** %5, align 8
  %22 = load i8*, i8** %5, align 8
  %23 = call i32 @strlen(i8* %22)
  %24 = load i32, i32* @NRL, align 4
  %25 = call i32 @send(i32 %20, i8* %21, i32 %23, i32 %24)
  br label %26

26:                                               ; preds = %91, %1
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 @fflush(i32 %27)
  %29 = call i32 @FD_ZERO(i32* %8)
  %30 = load i32, i32* %2, align 4
  %31 = call i32 @FD_SET(i32 %30, i32* %8)
  %32 = load i32, i32* @STDIN_FILENO, align 4
  %33 = call i32 @FD_SET(i32 %32, i32* %8)
  %34 = load i32, i32* %2, align 4
  %35 = add nsw i32 %34, 1
  %36 = call i32 @select(i32 %35, i32* %8, i32* null, i32* null, i32* null)
  %37 = load i32, i32* %2, align 4
  %38 = call i64 @FD_ISSET(i32 %37, i32* %8)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %64

40:                                               ; preds = %26
  %41 = load i32, i32* %2, align 4
  %42 = sub i64 %12, 1
  %43 = trunc i64 %42 to i32
  %44 = call i32 @read(i32 %41, i8* %14, i32 %43)
  store i32 %44, i32* %3, align 4
  %45 = load i32, i32* %3, align 4
  %46 = load i32, i32* @NRL, align 4
  %47 = icmp sle i32 %45, %46
  br i1 %47, label %48, label %56

48:                                               ; preds = %40
  %49 = load i32, i32* %4, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %52)
  ret void

53:                                               ; preds = %48
  %54 = load i32, i32* @NRL, align 4
  %55 = call i32 @exit(i32 %54) #4
  unreachable

56:                                               ; preds = %40
  %57 = load i32, i32* @NRL, align 4
  %58 = trunc i32 %57 to i8
  %59 = load i32, i32* %3, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %14, i64 %60
  store i8 %58, i8* %61, align 1
  %62 = load i32, i32* @stdout, align 4
  %63 = call i32 (i32, i8*, ...) @fprintf(i32 %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %14)
  br label %64

64:                                               ; preds = %56, %26
  %65 = load i32, i32* @STDIN_FILENO, align 4
  %66 = call i64 @FD_ISSET(i32 %65, i32* %8)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %91

68:                                               ; preds = %64
  %69 = load i32, i32* @STDIN_FILENO, align 4
  %70 = sub i64 %12, 1
  %71 = trunc i64 %70 to i32
  %72 = call i32 @read(i32 %69, i8* %14, i32 %71)
  store i32 %72, i32* %3, align 4
  %73 = load i32, i32* %3, align 4
  %74 = load i32, i32* @NRL, align 4
  %75 = icmp sgt i32 %73, %74
  br i1 %75, label %76, label %90

76:                                               ; preds = %68
  %77 = load i32, i32* @NRL, align 4
  %78 = trunc i32 %77 to i8
  %79 = load i32, i32* %3, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %14, i64 %80
  store i8 %78, i8* %81, align 1
  %82 = call i64 @strstr(i8* %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %76
  %85 = load i32, i32* @SCS, align 4
  store i32 %85, i32* %4, align 4
  br label %86

86:                                               ; preds = %84, %76
  %87 = load i32, i32* %2, align 4
  %88 = load i32, i32* %3, align 4
  %89 = call i32 @write(i32 %87, i8* %14, i32 %88)
  br label %90

90:                                               ; preds = %86, %68
  br label %91

91:                                               ; preds = %90, %64
  br label %26
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @strstr(i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
