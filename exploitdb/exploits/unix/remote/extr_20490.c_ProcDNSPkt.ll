; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20490.c_ProcDNSPkt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_20490.c_ProcDNSPkt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32, i32, i64 }

@ProcDNSPkt.qname = internal global i8* null, align 8
@HFIXEDSZ = common dso_local global i64 0, align 8
@QFIXEDSZ = common dso_local global i64 0, align 8
@MAXDNAME = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"no memory for qname\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @ProcDNSPkt(i8* %0, i64 %1, i32* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.TYPE_2__*, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32* %2, i32** %7, align 8
  %11 = load i8*, i8** %5, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %3
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* @HFIXEDSZ, align 8
  %16 = load i64, i64* @QFIXEDSZ, align 8
  %17 = add nsw i64 %15, %16
  %18 = icmp slt i64 %14, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %13, %3
  store i8* null, i8** %4, align 8
  br label %91

20:                                               ; preds = %13
  %21 = load i8*, i8** %5, align 8
  %22 = bitcast i8* %21 to %struct.TYPE_2__*
  store %struct.TYPE_2__* %22, %struct.TYPE_2__** %9, align 8
  %23 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %23, i32 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  store i8* null, i8** %4, align 8
  br label %91

28:                                               ; preds = %20
  %29 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = call i32 @ntohs(i32 %31)
  %33 = icmp ne i32 %32, 1
  br i1 %33, label %52, label %34

34:                                               ; preds = %28
  %35 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = call i32 @ntohs(i32 %37)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %34
  %41 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @ntohs(i32 %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %40
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = call i32 @ntohs(i32 %49)
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %46, %40, %34, %28
  store i8* null, i8** %4, align 8
  br label %91

53:                                               ; preds = %46
  %54 = load i8*, i8** @ProcDNSPkt.qname, align 8
  %55 = icmp ne i8* %54, null
  br i1 %55, label %64, label %56

56:                                               ; preds = %53
  %57 = load i32, i32* @MAXDNAME, align 4
  %58 = call i8* @malloc(i32 %57)
  store i8* %58, i8** @ProcDNSPkt.qname, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %63

60:                                               ; preds = %56
  %61 = load i32, i32* @stderr, align 4
  %62 = call i32 @fprintf(i32 %61, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  store i8* null, i8** %4, align 8
  br label %91

63:                                               ; preds = %56
  br label %64

64:                                               ; preds = %63, %53
  %65 = load i8*, i8** %5, align 8
  %66 = load i64, i64* @HFIXEDSZ, align 8
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  %68 = load i8*, i8** @ProcDNSPkt.qname, align 8
  %69 = load i32, i32* @MAXDNAME, align 4
  %70 = call i32 @ExpandDName(i8* %67, i8* %68, i32 %69)
  store i32 %70, i32* %10, align 4
  %71 = load i32, i32* %10, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %64
  store i8* null, i8** %4, align 8
  br label %91

74:                                               ; preds = %64
  %75 = load i8*, i8** %5, align 8
  %76 = load i64, i64* @HFIXEDSZ, align 8
  %77 = getelementptr inbounds i8, i8* %75, i64 %76
  %78 = load i8*, i8** %5, align 8
  %79 = load i64, i64* @HFIXEDSZ, align 8
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = call i32 @strlen(i8* %80)
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %77, i64 %82
  %84 = getelementptr inbounds i8, i8* %83, i64 1
  store i8* %84, i8** %8, align 8
  %85 = load i32, i32* %10, align 4
  %86 = load i8*, i8** %8, align 8
  %87 = call i32 @GETSHORT(i32 %85, i8* %86)
  %88 = load i32, i32* %10, align 4
  %89 = load i32*, i32** %7, align 8
  store i32 %88, i32* %89, align 4
  %90 = load i8*, i8** @ProcDNSPkt.qname, align 8
  store i8* %90, i8** %4, align 8
  br label %91

91:                                               ; preds = %74, %73, %60, %52, %27, %19
  %92 = load i8*, i8** %4, align 8
  ret i8* %92
}

declare dso_local i32 @ntohs(i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @ExpandDName(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @GETSHORT(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
