; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20154.c_mkfmt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20154.c_mkfmt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@errno = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"failed to malloc\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"\01\01\01\01\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%.8x\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"%%.%dx%%hn%%.%dx%%hn\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mkfmt(i32 %0, i32 %1, i64 %2, i64 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca [2 x i64], align 16
  %11 = alloca [2 x i32], align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %16 = call i64 @malloc(i32 200)
  %17 = inttoptr i64 %16 to i8*
  store i8* %17, i8** %9, align 8
  %18 = load i8*, i8** %9, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %4
  %21 = load i32, i32* @errno, align 4
  %22 = call i32 @error(i32 1, i32 %21, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %23

23:                                               ; preds = %20, %4
  %24 = load i64, i64* %8, align 8
  %25 = and i64 %24, 65535
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %13, align 4
  %27 = load i64, i64* %8, align 8
  %28 = and i64 %27, 4294901760
  %29 = lshr i64 %28, 16
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %12, align 4
  %31 = load i32, i32* %13, align 4
  %32 = load i32, i32* %12, align 4
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %34, label %49

34:                                               ; preds = %23
  %35 = load i32, i32* %12, align 4
  %36 = load i32, i32* %13, align 4
  %37 = xor i32 %36, %35
  store i32 %37, i32* %13, align 4
  %38 = load i32, i32* %13, align 4
  %39 = load i32, i32* %12, align 4
  %40 = xor i32 %39, %38
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = load i32, i32* %13, align 4
  %43 = xor i32 %42, %41
  store i32 %43, i32* %13, align 4
  %44 = load i64, i64* %7, align 8
  %45 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 0
  store i64 %44, i64* %45, align 16
  %46 = load i64, i64* %7, align 8
  %47 = add i64 %46, 2
  %48 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 1
  store i64 %47, i64* %48, align 8
  br label %55

49:                                               ; preds = %23
  %50 = load i64, i64* %7, align 8
  %51 = add i64 %50, 2
  %52 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 0
  store i64 %51, i64* %52, align 16
  %53 = load i64, i64* %7, align 8
  %54 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 1
  store i64 %53, i64* %54, align 8
  br label %55

55:                                               ; preds = %49, %34
  %56 = load i8*, i8** %9, align 8
  store i8* %56, i8** %14, align 8
  %57 = load i8*, i8** %14, align 8
  %58 = load i32, i32* %5, align 4
  %59 = call i32 @memset(i8* %57, i32 3, i32 %58)
  %60 = load i32, i32* %5, align 4
  %61 = load i8*, i8** %14, align 8
  %62 = sext i32 %60 to i64
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  store i8* %63, i8** %14, align 8
  %64 = load i8*, i8** %14, align 8
  %65 = call i32 @memcpy(i8* %64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %66 = load i8*, i8** %14, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 4
  store i8* %67, i8** %14, align 8
  %68 = load i8*, i8** %14, align 8
  %69 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 0
  %70 = bitcast i64* %69 to i8*
  %71 = call i32 @memcpy(i8* %68, i8* %70, i32 4)
  %72 = load i8*, i8** %14, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 4
  store i8* %73, i8** %14, align 8
  %74 = load i8*, i8** %14, align 8
  %75 = call i32 @memcpy(i8* %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %76 = load i8*, i8** %14, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 4
  store i8* %77, i8** %14, align 8
  %78 = load i8*, i8** %14, align 8
  %79 = getelementptr inbounds [2 x i64], [2 x i64]* %10, i64 0, i64 1
  %80 = bitcast i64* %79 to i8*
  %81 = call i32 @memcpy(i8* %78, i8* %80, i32 4)
  %82 = load i8*, i8** %14, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  store i8* %83, i8** %14, align 8
  store i32 0, i32* %15, align 4
  br label %84

84:                                               ; preds = %93, %55
  %85 = load i32, i32* %15, align 4
  %86 = load i32, i32* %6, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %96

88:                                               ; preds = %84
  %89 = load i8*, i8** %14, align 8
  %90 = call i32 @memcpy(i8* %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %91 = load i8*, i8** %14, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  store i8* %92, i8** %14, align 8
  br label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %15, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %15, align 4
  br label %84

96:                                               ; preds = %84
  %97 = load i32, i32* %12, align 4
  %98 = load i32, i32* %6, align 4
  %99 = mul nsw i32 8, %98
  %100 = add nsw i32 %99, 16
  %101 = load i32, i32* %5, align 4
  %102 = add nsw i32 %100, %101
  %103 = add nsw i32 %102, 30
  %104 = sub i32 %97, %103
  %105 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 0
  store i32 %104, i32* %105, align 4
  %106 = load i32, i32* %13, align 4
  %107 = load i32, i32* %12, align 4
  %108 = sub i32 %106, %107
  %109 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %108, i32* %109, align 4
  %110 = load i8*, i8** %14, align 8
  %111 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 0
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %114 = load i32, i32* %113, align 4
  %115 = call i32 @sprintf(i8* %110, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i32 %112, i32 %114)
  %116 = load i8*, i8** %9, align 8
  ret i8* %116
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @error(i32, i32, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
