; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_39445.c_MD5auth_setkey.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_39445.c_MD5auth_setkey.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.savekey = type { i64, i32, i32, %struct.savekey*, %struct.TYPE_2__, i64, i64 }
%struct.TYPE_2__ = type { i64 }

@key_hash = common dso_local global %struct.savekey** null, align 8
@cache_keyid = common dso_local global i64 0, align 8
@cache_flags = common dso_local global i64 0, align 8
@authnumfreekeys = common dso_local global i64 0, align 8
@authfreekeys = common dso_local global %struct.savekey* null, align 8
@authnumkeys = common dso_local global i32 0, align 4
@debug = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MD5auth_setkey(i64 %0, i32 %1, i32* %2, i32 %3) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.savekey*, align 8
  store i64 %0, i64* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  store i32 %3, i32* %8, align 4
  %10 = load %struct.savekey**, %struct.savekey*** @key_hash, align 8
  %11 = load i64, i64* %5, align 8
  %12 = call i64 @KEYHASH(i64 %11)
  %13 = getelementptr inbounds %struct.savekey*, %struct.savekey** %10, i64 %12
  %14 = load %struct.savekey*, %struct.savekey** %13, align 8
  store %struct.savekey* %14, %struct.savekey** %9, align 8
  br label %15

15:                                               ; preds = %47, %4
  %16 = load %struct.savekey*, %struct.savekey** %9, align 8
  %17 = icmp ne %struct.savekey* %16, null
  br i1 %17, label %18, label %51

18:                                               ; preds = %15
  %19 = load i64, i64* %5, align 8
  %20 = load %struct.savekey*, %struct.savekey** %9, align 8
  %21 = getelementptr inbounds %struct.savekey, %struct.savekey* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %19, %22
  br i1 %23, label %24, label %47

24:                                               ; preds = %18
  %25 = load i32, i32* %6, align 4
  %26 = load %struct.savekey*, %struct.savekey** %9, align 8
  %27 = getelementptr inbounds %struct.savekey, %struct.savekey* %26, i32 0, i32 1
  store i32 %25, i32* %27, align 8
  %28 = load i32, i32* %8, align 4
  %29 = call i8* @min(i32 %28, i32 8)
  %30 = ptrtoint i8* %29 to i32
  %31 = load %struct.savekey*, %struct.savekey** %9, align 8
  %32 = getelementptr inbounds %struct.savekey, %struct.savekey* %31, i32 0, i32 2
  store i32 %30, i32* %32, align 4
  %33 = load %struct.savekey*, %struct.savekey** %9, align 8
  %34 = getelementptr inbounds %struct.savekey, %struct.savekey* %33, i32 0, i32 4
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = load i32*, i32** %7, align 8
  %38 = load %struct.savekey*, %struct.savekey** %9, align 8
  %39 = getelementptr inbounds %struct.savekey, %struct.savekey* %38, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @memcpy(i64 %36, i32* %37, i32 %40)
  %42 = load i64, i64* @cache_keyid, align 8
  %43 = load i64, i64* %5, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %24
  store i64 0, i64* @cache_flags, align 8
  store i64 0, i64* @cache_keyid, align 8
  br label %46

46:                                               ; preds = %45, %24
  br label %103

47:                                               ; preds = %18
  %48 = load %struct.savekey*, %struct.savekey** %9, align 8
  %49 = getelementptr inbounds %struct.savekey, %struct.savekey* %48, i32 0, i32 3
  %50 = load %struct.savekey*, %struct.savekey** %49, align 8
  store %struct.savekey* %50, %struct.savekey** %9, align 8
  br label %15

51:                                               ; preds = %15
  %52 = load i64, i64* @authnumfreekeys, align 8
  %53 = icmp eq i64 0, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %51
  %55 = call i32 (...) @auth_moremem()
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  br label %103

58:                                               ; preds = %54, %51
  %59 = load %struct.savekey*, %struct.savekey** @authfreekeys, align 8
  store %struct.savekey* %59, %struct.savekey** %9, align 8
  %60 = load %struct.savekey*, %struct.savekey** %9, align 8
  %61 = getelementptr inbounds %struct.savekey, %struct.savekey* %60, i32 0, i32 3
  %62 = load %struct.savekey*, %struct.savekey** %61, align 8
  store %struct.savekey* %62, %struct.savekey** @authfreekeys, align 8
  %63 = load i64, i64* @authnumfreekeys, align 8
  %64 = add nsw i64 %63, -1
  store i64 %64, i64* @authnumfreekeys, align 8
  %65 = load i64, i64* %5, align 8
  %66 = load %struct.savekey*, %struct.savekey** %9, align 8
  %67 = getelementptr inbounds %struct.savekey, %struct.savekey* %66, i32 0, i32 0
  store i64 %65, i64* %67, align 8
  %68 = load i32, i32* %6, align 4
  %69 = load %struct.savekey*, %struct.savekey** %9, align 8
  %70 = getelementptr inbounds %struct.savekey, %struct.savekey* %69, i32 0, i32 1
  store i32 %68, i32* %70, align 8
  %71 = load %struct.savekey*, %struct.savekey** %9, align 8
  %72 = getelementptr inbounds %struct.savekey, %struct.savekey* %71, i32 0, i32 6
  store i64 0, i64* %72, align 8
  %73 = load %struct.savekey*, %struct.savekey** %9, align 8
  %74 = getelementptr inbounds %struct.savekey, %struct.savekey* %73, i32 0, i32 5
  store i64 0, i64* %74, align 8
  %75 = load i32, i32* %8, align 4
  %76 = call i8* @min(i32 %75, i32 8)
  %77 = ptrtoint i8* %76 to i32
  %78 = load %struct.savekey*, %struct.savekey** %9, align 8
  %79 = getelementptr inbounds %struct.savekey, %struct.savekey* %78, i32 0, i32 2
  store i32 %77, i32* %79, align 4
  %80 = load %struct.savekey*, %struct.savekey** %9, align 8
  %81 = getelementptr inbounds %struct.savekey, %struct.savekey* %80, i32 0, i32 4
  %82 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %81, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = load i32*, i32** %7, align 8
  %85 = load %struct.savekey*, %struct.savekey** %9, align 8
  %86 = getelementptr inbounds %struct.savekey, %struct.savekey* %85, i32 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = call i32 @memcpy(i64 %83, i32* %84, i32 %87)
  %89 = load %struct.savekey**, %struct.savekey*** @key_hash, align 8
  %90 = load i64, i64* %5, align 8
  %91 = call i64 @KEYHASH(i64 %90)
  %92 = getelementptr inbounds %struct.savekey*, %struct.savekey** %89, i64 %91
  %93 = load %struct.savekey*, %struct.savekey** %92, align 8
  %94 = load %struct.savekey*, %struct.savekey** %9, align 8
  %95 = getelementptr inbounds %struct.savekey, %struct.savekey* %94, i32 0, i32 3
  store %struct.savekey* %93, %struct.savekey** %95, align 8
  %96 = load %struct.savekey*, %struct.savekey** %9, align 8
  %97 = load %struct.savekey**, %struct.savekey*** @key_hash, align 8
  %98 = load i64, i64* %5, align 8
  %99 = call i64 @KEYHASH(i64 %98)
  %100 = getelementptr inbounds %struct.savekey*, %struct.savekey** %97, i64 %99
  store %struct.savekey* %96, %struct.savekey** %100, align 8
  %101 = load i32, i32* @authnumkeys, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* @authnumkeys, align 4
  br label %103

103:                                              ; preds = %58, %57, %46
  ret void
}

declare dso_local i64 @KEYHASH(i64) #1

declare dso_local i8* @min(i32, i32) #1

declare dso_local i32 @memcpy(i64, i32*, i32) #1

declare dso_local i32 @auth_moremem(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
