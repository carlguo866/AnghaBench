; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_39445.c_MD5authencrypt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_39445.c_MD5authencrypt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@EVP_MAX_MD_SIZE = common dso_local global i32 0, align 4
@cache_keylen = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @MD5authencrypt(i32 %0, i32* %1, i32* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32 %3, i32* %8, align 4
  %13 = load i32, i32* @EVP_MAX_MD_SIZE, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %9, align 8
  %16 = alloca i32, i64 %14, align 16
  store i64 %14, i64* %10, align 8
  %17 = call i32 (...) @INIT_SSL()
  %18 = load i32, i32* %5, align 4
  %19 = call i32 @EVP_get_digestbynid(i32 %18)
  %20 = call i32 @EVP_DigestInit(i32* %12, i32 %19)
  %21 = load i32*, i32** %6, align 8
  %22 = load i64, i64* @cache_keylen, align 8
  %23 = trunc i64 %22 to i32
  %24 = call i32 @EVP_DigestUpdate(i32* %12, i32* %21, i32 %23)
  %25 = load i32*, i32** %7, align 8
  %26 = load i32, i32* %8, align 4
  %27 = call i32 @EVP_DigestUpdate(i32* %12, i32* %25, i32 %26)
  %28 = call i32 @EVP_DigestFinal(i32* %12, i32* %16, i32* %11)
  %29 = load i32*, i32** %7, align 8
  %30 = load i32, i32* %8, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %29, i64 %31
  %33 = getelementptr inbounds i32, i32* %32, i64 4
  %34 = load i32, i32* %11, align 4
  %35 = call i32 @memmove(i32* %33, i32* %16, i32 %34)
  %36 = load i32, i32* %11, align 4
  %37 = add nsw i32 %36, 4
  %38 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %38)
  ret i32 %37
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @INIT_SSL(...) #2

declare dso_local i32 @EVP_DigestInit(i32*, i32) #2

declare dso_local i32 @EVP_get_digestbynid(i32) #2

declare dso_local i32 @EVP_DigestUpdate(i32*, i32*, i32) #2

declare dso_local i32 @EVP_DigestFinal(i32*, i32*, i32*) #2

declare dso_local i32 @memmove(i32*, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
