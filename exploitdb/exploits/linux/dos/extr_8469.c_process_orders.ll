; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_process_orders.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_process_orders.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_10__ = type { i32 }
%struct.TYPE_9__ = type { i64 }

@order_state = common dso_local global %struct.TYPE_10__ zeroinitializer, align 4
@RDP_ORDER_STANDARD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"order parsing failed\0A\00", align 1
@RDP_ORDER_SECONDARY = common dso_local global i32 0, align 4
@RDP_ORDER_CHANGE = common dso_local global i32 0, align 4
@RDP_ORDER_DELTA = common dso_local global i32 0, align 4
@next_packet = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [20 x i8] c"%d bytes remaining\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process_orders(%struct.TYPE_9__* %0) #0 {
  %2 = alloca %struct.TYPE_9__*, align 8
  %3 = alloca %struct.TYPE_10__*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.TYPE_9__* %0, %struct.TYPE_9__** %2, align 8
  store %struct.TYPE_10__* @order_state, %struct.TYPE_10__** %3, align 8
  store i32 0, i32* %8, align 4
  %10 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %11 = call i32 @in_uint8s(%struct.TYPE_9__* %10, i32 2)
  %12 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %13 = load i32, i32* %5, align 4
  %14 = call i32 @in_uint16_le(%struct.TYPE_9__* %12, i32 %13)
  %15 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %16 = call i32 @in_uint8s(%struct.TYPE_9__* %15, i32 2)
  br label %17

17:                                               ; preds = %61, %1
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %5, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %64

21:                                               ; preds = %17
  %22 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %23 = load i32, i32* %6, align 4
  %24 = call i32 @in_uint8(%struct.TYPE_9__* %22, i32 %23)
  %25 = load i32, i32* %6, align 4
  %26 = load i32, i32* @RDP_ORDER_STANDARD, align 4
  %27 = and i32 %25, %26
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %21
  %30 = call i32 (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %64

31:                                               ; preds = %21
  %32 = load i32, i32* %6, align 4
  %33 = load i32, i32* @RDP_ORDER_SECONDARY, align 4
  %34 = and i32 %32, %33
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %31
  %37 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %38 = call i32 @process_secondary_order(%struct.TYPE_9__* %37)
  br label %61

39:                                               ; preds = %31
  %40 = load i32, i32* %6, align 4
  %41 = load i32, i32* @RDP_ORDER_CHANGE, align 4
  %42 = and i32 %40, %41
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %39
  %45 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %46 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %47 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %46, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = call i32 @in_uint8(%struct.TYPE_9__* %45, i32 %48)
  br label %50

50:                                               ; preds = %44, %39
  %51 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %52 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  switch i32 %53, label %56 [
    i32 128, label %54
    i32 129, label %54
    i32 130, label %55
    i32 131, label %55
    i32 132, label %55
  ]

54:                                               ; preds = %50, %50
  store i32 3, i32* %7, align 4
  br label %57

55:                                               ; preds = %50, %50, %50
  store i32 2, i32* %7, align 4
  br label %57

56:                                               ; preds = %50
  store i32 1, i32* %7, align 4
  br label %57

57:                                               ; preds = %56, %55, %54
  %58 = load i32, i32* %6, align 4
  %59 = load i32, i32* @RDP_ORDER_DELTA, align 4
  %60 = and i32 %58, %59
  store i32 %60, i32* %9, align 4
  br label %61

61:                                               ; preds = %57, %36
  %62 = load i32, i32* %8, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %8, align 4
  br label %17

64:                                               ; preds = %29, %17
  %65 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %66 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = load i64, i64* @next_packet, align 8
  %69 = icmp ne i64 %67, %68
  br i1 %69, label %70, label %78

70:                                               ; preds = %64
  %71 = load i64, i64* @next_packet, align 8
  %72 = load %struct.TYPE_9__*, %struct.TYPE_9__** %2, align 8
  %73 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = sub nsw i64 %71, %74
  %76 = trunc i64 %75 to i32
  %77 = call i32 (i8*, ...) @error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 %76)
  br label %78

78:                                               ; preds = %70, %64
  ret void
}

declare dso_local i32 @in_uint8s(%struct.TYPE_9__*, i32) #1

declare dso_local i32 @in_uint16_le(%struct.TYPE_9__*, i32) #1

declare dso_local i32 @in_uint8(%struct.TYPE_9__*, i32) #1

declare dso_local i32 @error(i8*, ...) #1

declare dso_local i32 @process_secondary_order(%struct.TYPE_9__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
