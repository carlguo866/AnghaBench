; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_mcs_recv_connect_response.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_mcs_recv_connect_response.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_10__ = type { i32, i32, i64, i32 }

@False = common dso_local global i32 0, align 4
@MCS_CONNECT_RESPONSE = common dso_local global i32 0, align 4
@BER_TAG_RESULT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"MCS connect: %d\0A\00", align 1
@BER_TAG_INTEGER = common dso_local global i32 0, align 4
@BER_TAG_OCTET_STRING = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"MCS data length %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.TYPE_10__*)* @mcs_recv_connect_response to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @mcs_recv_connect_response(%struct.TYPE_10__* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.TYPE_10__*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.TYPE_10__*, align 8
  store %struct.TYPE_10__* %0, %struct.TYPE_10__** %3, align 8
  %7 = call %struct.TYPE_10__* (...) @iso_recv()
  store %struct.TYPE_10__* %7, %struct.TYPE_10__** %6, align 8
  %8 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %9 = icmp eq %struct.TYPE_10__* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* @False, align 4
  store i32 %11, i32* %2, align 4
  br label %74

12:                                               ; preds = %1
  %13 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %14 = load i32, i32* @MCS_CONNECT_RESPONSE, align 4
  %15 = call i32 @ber_parse_header(%struct.TYPE_10__* %13, i32 %14, i32* %5)
  %16 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %17 = load i32, i32* @BER_TAG_RESULT, align 4
  %18 = call i32 @ber_parse_header(%struct.TYPE_10__* %16, i32 %17, i32* %5)
  %19 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %20 = load i64, i64* %4, align 8
  %21 = call i32 @in_uint8(%struct.TYPE_10__* %19, i64 %20)
  %22 = load i64, i64* %4, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %12
  %25 = load i64, i64* %4, align 8
  %26 = trunc i64 %25 to i32
  %27 = call i32 @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %26)
  %28 = load i32, i32* @False, align 4
  store i32 %28, i32* %2, align 4
  br label %74

29:                                               ; preds = %12
  %30 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %31 = load i32, i32* @BER_TAG_INTEGER, align 4
  %32 = call i32 @ber_parse_header(%struct.TYPE_10__* %30, i32 %31, i32* %5)
  %33 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %34 = load i32, i32* %5, align 4
  %35 = call i32 @in_uint8s(%struct.TYPE_10__* %33, i32 %34)
  %36 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %37 = call i32 @mcs_parse_domain_params(%struct.TYPE_10__* %36)
  %38 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %39 = load i32, i32* @BER_TAG_OCTET_STRING, align 4
  %40 = call i32 @ber_parse_header(%struct.TYPE_10__* %38, i32 %39, i32* %5)
  %41 = load i32, i32* %5, align 4
  %42 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %43 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp sgt i32 %41, %44
  br i1 %45, label %46, label %52

46:                                               ; preds = %29
  %47 = load i32, i32* %5, align 4
  %48 = call i32 @error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 %47)
  %49 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %50 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %49, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  store i32 %51, i32* %5, align 4
  br label %52

52:                                               ; preds = %46, %29
  %53 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %54 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %55 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %54, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %5, align 4
  %58 = call i32 @in_uint8a(%struct.TYPE_10__* %53, i32 %56, i32 %57)
  %59 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %60 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %59, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %63 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %62, i32 0, i32 3
  store i32 %61, i32* %63, align 8
  %64 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %65 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %64, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = load i32, i32* %5, align 4
  %68 = add nsw i32 %66, %67
  %69 = sext i32 %68 to i64
  %70 = load %struct.TYPE_10__*, %struct.TYPE_10__** %3, align 8
  %71 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %70, i32 0, i32 2
  store i64 %69, i64* %71, align 8
  %72 = load %struct.TYPE_10__*, %struct.TYPE_10__** %6, align 8
  %73 = call i32 @s_check_end(%struct.TYPE_10__* %72)
  store i32 %73, i32* %2, align 4
  br label %74

74:                                               ; preds = %52, %24, %10
  %75 = load i32, i32* %2, align 4
  ret i32 %75
}

declare dso_local %struct.TYPE_10__* @iso_recv(...) #1

declare dso_local i32 @ber_parse_header(%struct.TYPE_10__*, i32, i32*) #1

declare dso_local i32 @in_uint8(%struct.TYPE_10__*, i64) #1

declare dso_local i32 @error(i8*, i32) #1

declare dso_local i32 @in_uint8s(%struct.TYPE_10__*, i32) #1

declare dso_local i32 @mcs_parse_domain_params(%struct.TYPE_10__*) #1

declare dso_local i32 @in_uint8a(%struct.TYPE_10__*, i32, i32) #1

declare dso_local i32 @s_check_end(%struct.TYPE_10__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
