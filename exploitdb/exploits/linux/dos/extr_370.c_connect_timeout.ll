; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_370.c_connect_timeout.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_370.c_connect_timeout.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr = type { i32 }
%struct.timeval = type { i32 }
%struct.sockaddr_in = type { i32 }

@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@F_GETFL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connect_timeout(i32 %0, %struct.sockaddr* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.timeval, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store %struct.sockaddr* %1, %struct.sockaddr** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* @F_SETFL, align 4
  %19 = load i32, i32* @O_NONBLOCK, align 4
  %20 = call i32 @fcntl(i32 %17, i32 %18, i32 %19)
  %21 = load i32, i32* %6, align 4
  %22 = load %struct.sockaddr*, %struct.sockaddr** %7, align 8
  %23 = load i32, i32* %8, align 4
  %24 = call i32 @connect(i32 %21, %struct.sockaddr* %22, i32 %23)
  store i32 %24, i32* %10, align 4
  %25 = load i32, i32* %10, align 4
  %26 = icmp sge i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %4
  %28 = load i32, i32* %10, align 4
  store i32 %28, i32* %5, align 4
  br label %70

29:                                               ; preds = %4
  %30 = call i32 @FD_ZERO(i32* %15)
  %31 = call i32 @FD_ZERO(i32* %16)
  %32 = load i32, i32* %6, align 4
  %33 = call i32 @FD_SET(i32 %32, i32* %15)
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @FD_SET(i32 %34, i32* %16)
  %36 = call i32 @bzero(%struct.timeval* %13, i32 4)
  %37 = load i32, i32* %9, align 4
  %38 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  %41 = call i64 @select(i32 %40, i32* %15, i32* %16, i32 0, %struct.timeval* %13)
  %42 = icmp sle i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %29
  store i32 -1, i32* %5, align 4
  br label %70

44:                                               ; preds = %29
  %45 = load i32, i32* %6, align 4
  %46 = call i64 @FD_ISSET(i32 %45, i32* %16)
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = load i32, i32* %6, align 4
  %50 = call i64 @FD_ISSET(i32 %49, i32* %15)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %69

52:                                               ; preds = %48, %44
  store i32 4, i32* %11, align 4
  %53 = load i32, i32* %6, align 4
  %54 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %55 = call i32 @getpeername(i32 %53, %struct.sockaddr* %54, i32* %11)
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  store i32 -1, i32* %5, align 4
  br label %70

58:                                               ; preds = %52
  %59 = load i32, i32* %6, align 4
  %60 = load i32, i32* @F_GETFL, align 4
  %61 = call i32 @fcntl(i32 %59, i32 %60, i32 0)
  store i32 %61, i32* %12, align 4
  %62 = load i32, i32* %6, align 4
  %63 = load i32, i32* @F_SETFL, align 4
  %64 = load i32, i32* %12, align 4
  %65 = load i32, i32* @O_NONBLOCK, align 4
  %66 = xor i32 %65, -1
  %67 = and i32 %64, %66
  %68 = call i32 @fcntl(i32 %62, i32 %63, i32 %67)
  store i32 0, i32* %5, align 4
  br label %70

69:                                               ; preds = %48
  store i32 -1, i32* %5, align 4
  br label %70

70:                                               ; preds = %69, %58, %57, %43, %27
  %71 = load i32, i32* %5, align 4
  ret i32 %71
}

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @bzero(%struct.timeval*, i32) #1

declare dso_local i64 @select(i32, i32*, i32*, i32, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @getpeername(i32, %struct.sockaddr*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
