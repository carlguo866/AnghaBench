; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_out_order_caps.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_out_order_caps.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@desktop_save = common dso_local global i64 0, align 8
@False = common dso_local global i64 0, align 8
@RDP_CAPSET_ORDER = common dso_local global i32 0, align 4
@RDP_CAPLEN_ORDER = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @rdp_out_order_caps to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdp_out_order_caps(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [32 x i32], align 16
  store i32 %0, i32* %2, align 4
  %4 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 0
  %5 = call i32 @memset(i32* %4, i32 0, i32 32)
  %6 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 0
  store i32 1, i32* %6, align 16
  %7 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 1
  store i32 1, i32* %7, align 4
  %8 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 2
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 3
  store i32 1, i32* %9, align 4
  %10 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 8
  store i32 1, i32* %10, align 16
  %11 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 9
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 10
  store i32 1, i32* %12, align 8
  %13 = load i64, i64* @desktop_save, align 8
  %14 = load i64, i64* @False, align 8
  %15 = icmp eq i64 %13, %14
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 0, i32 1
  %18 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 11
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 13
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 14
  store i32 1, i32* %20, align 8
  %21 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 22
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 27
  store i32 1, i32* %22, align 4
  %23 = load i32, i32* %2, align 4
  %24 = load i32, i32* @RDP_CAPSET_ORDER, align 4
  %25 = call i32 @out_uint16_le(i32 %23, i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = load i32, i32* @RDP_CAPLEN_ORDER, align 4
  %28 = call i32 @out_uint16_le(i32 %26, i32 %27)
  %29 = load i32, i32* %2, align 4
  %30 = call i32 @out_uint8s(i32 %29, i32 20)
  %31 = load i32, i32* %2, align 4
  %32 = call i32 @out_uint16_le(i32 %31, i32 1)
  %33 = load i32, i32* %2, align 4
  %34 = call i32 @out_uint16_le(i32 %33, i32 20)
  %35 = load i32, i32* %2, align 4
  %36 = call i32 @out_uint16(i32 %35, i32 0)
  %37 = load i32, i32* %2, align 4
  %38 = call i32 @out_uint16_le(i32 %37, i32 1)
  %39 = load i32, i32* %2, align 4
  %40 = call i32 @out_uint16_le(i32 %39, i32 327)
  %41 = load i32, i32* %2, align 4
  %42 = call i32 @out_uint16_le(i32 %41, i32 42)
  %43 = load i32, i32* %2, align 4
  %44 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 0
  %45 = call i32 @out_uint8p(i32 %43, i32* %44, i32 32)
  %46 = load i32, i32* %2, align 4
  %47 = call i32 @out_uint16_le(i32 %46, i32 1697)
  %48 = load i32, i32* %2, align 4
  %49 = call i32 @out_uint8s(i32 %48, i32 6)
  %50 = load i32, i32* %2, align 4
  %51 = load i64, i64* @desktop_save, align 8
  %52 = load i64, i64* @False, align 8
  %53 = icmp eq i64 %51, %52
  %54 = zext i1 %53 to i64
  %55 = select i1 %53, i32 0, i32 230400
  %56 = call i32 @out_uint32_le(i32 %50, i32 %55)
  %57 = load i32, i32* %2, align 4
  %58 = call i32 @out_uint32(i32 %57, i32 0)
  %59 = load i32, i32* %2, align 4
  %60 = call i32 @out_uint32_le(i32 %59, i32 1252)
  ret void
}

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @out_uint16_le(i32, i32) #1

declare dso_local i32 @out_uint8s(i32, i32) #1

declare dso_local i32 @out_uint16(i32, i32) #1

declare dso_local i32 @out_uint8p(i32, i32*, i32) #1

declare dso_local i32 @out_uint32_le(i32, i32) #1

declare dso_local i32 @out_uint32(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
