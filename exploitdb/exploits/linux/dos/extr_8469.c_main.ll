; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.passwd = type { i32 }

@False = common dso_local global i8* null, align 8
@encryption = common dso_local global i8* null, align 8
@sendmotion = common dso_local global i8* null, align 8
@RDP_LOGON_NORMAL = common dso_local global i32 0, align 4
@keymapname = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"en-us\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"\0A[=] Usage: %s <ip address>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"\0A[=] Connected to %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"[=] Hit CTRL-C if the progress bar stops.\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"\0A[=] Done. Check port 3389 on the remote host.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [64 x i8], align 16
  %7 = alloca [64 x i8], align 16
  %8 = alloca [16 x i8], align 16
  %9 = alloca [16 x i8], align 16
  %10 = alloca [128 x i8], align 16
  %11 = alloca [32 x i8], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.passwd*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %17, align 4
  %18 = load i8*, i8** @False, align 8
  store i8* %18, i8** @encryption, align 8
  %19 = load i8*, i8** @False, align 8
  store i8* %19, i8** @sendmotion, align 8
  %20 = load i32, i32* @RDP_LOGON_NORMAL, align 4
  store i32 %20, i32* %14, align 4
  %21 = load i8*, i8** @False, align 8
  store i8* %21, i8** %12, align 8
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  store i8 0, i8* %22, align 16
  %23 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  store i8 0, i8* %23, align 16
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  store i8 0, i8* %24, align 16
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  store i8 0, i8* %25, align 16
  %26 = load i32, i32* @keymapname, align 4
  %27 = call i32 @strcpy(i32 %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %28 = load i32, i32* %4, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %36

30:                                               ; preds = %2
  %31 = load i32, i32* @stderr, align 4
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %31, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i8* %34)
  store i32 0, i32* %3, align 4
  br label %64

36:                                               ; preds = %2
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @strncpy(i8* %37, i8* %40, i32 64)
  %42 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  %47 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %48 = call i32 @rdp_connect(i8* %42, i32 %43, i8* %44, i8* %45, i8* %46, i8* %47)
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %36
  store i32 0, i32* %3, align 4
  br label %64

51:                                               ; preds = %36
  %52 = load i32, i32* @stderr, align 4
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 1
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %55)
  %57 = load i32, i32* @stderr, align 4
  %58 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %60 = call i32 @memset(i8* %59, i32 0, i32 16)
  %61 = call i32 (...) @rdp_main_loop()
  %62 = load i32, i32* @stderr, align 4
  %63 = call i32 (i32, i8*, ...) @fprintf(i32 %62, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %64

64:                                               ; preds = %51, %50, %30
  %65 = load i32, i32* %3, align 4
  ret i32 %65
}

declare dso_local i32 @strcpy(i32, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @rdp_connect(i8*, i32, i8*, i8*, i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @rdp_main_loop(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
