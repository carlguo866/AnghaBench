; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_handle_special_keys.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_handle_special_keys.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RDP_KEYPRESS = common dso_local global i32 0, align 4
@SCANCODE_EXTENDED = common dso_local global i32 0, align 4
@True = common dso_local global i32 0, align 4
@RDP_INPUT_SCANCODE = common dso_local global i32 0, align 4
@RDP_KEYRELEASE = common dso_local global i32 0, align 4
@SCANCODE_CHAR_LCTRL = common dso_local global i32 0, align 4
@SCANCODE_CHAR_ESC = common dso_local global i32 0, align 4
@False = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @handle_special_keys(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %10 = load i32, i32* %6, align 4
  switch i32 %10, label %85 [
    i32 135, label %11
    i32 130, label %27
    i32 132, label %62
    i32 129, label %62
    i32 134, label %62
    i32 131, label %62
    i32 128, label %62
    i32 133, label %62
  ]

11:                                               ; preds = %4
  %12 = load i32, i32* %9, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %25

14:                                               ; preds = %11
  %15 = load i32, i32* %8, align 4
  %16 = load i32, i32* @RDP_KEYPRESS, align 4
  %17 = load i32, i32* @SCANCODE_EXTENDED, align 4
  %18 = or i32 %17, 70
  %19 = call i32 @rdp_send_scancode(i32 %15, i32 %16, i32 %18)
  %20 = load i32, i32* %8, align 4
  %21 = load i32, i32* @RDP_KEYPRESS, align 4
  %22 = load i32, i32* @SCANCODE_EXTENDED, align 4
  %23 = or i32 %22, 198
  %24 = call i32 @rdp_send_scancode(i32 %20, i32 %21, i32 %23)
  br label %25

25:                                               ; preds = %14, %11
  %26 = load i32, i32* @True, align 4
  store i32 %26, i32* %5, align 4
  br label %87

27:                                               ; preds = %4
  %28 = load i32, i32* %9, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %55

30:                                               ; preds = %27
  %31 = load i32, i32* %8, align 4
  %32 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %33 = load i32, i32* @RDP_KEYPRESS, align 4
  %34 = call i32 @rdp_send_input(i32 %31, i32 %32, i32 %33, i32 225, i32 0)
  %35 = load i32, i32* %8, align 4
  %36 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %37 = load i32, i32* @RDP_KEYPRESS, align 4
  %38 = call i32 @rdp_send_input(i32 %35, i32 %36, i32 %37, i32 29, i32 0)
  %39 = load i32, i32* %8, align 4
  %40 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %41 = load i32, i32* @RDP_KEYPRESS, align 4
  %42 = call i32 @rdp_send_input(i32 %39, i32 %40, i32 %41, i32 69, i32 0)
  %43 = load i32, i32* %8, align 4
  %44 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %45 = load i32, i32* @RDP_KEYPRESS, align 4
  %46 = call i32 @rdp_send_input(i32 %43, i32 %44, i32 %45, i32 225, i32 0)
  %47 = load i32, i32* %8, align 4
  %48 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %49 = load i32, i32* @RDP_KEYPRESS, align 4
  %50 = call i32 @rdp_send_input(i32 %47, i32 %48, i32 %49, i32 157, i32 0)
  %51 = load i32, i32* %8, align 4
  %52 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %53 = load i32, i32* @RDP_KEYPRESS, align 4
  %54 = call i32 @rdp_send_input(i32 %51, i32 %52, i32 %53, i32 197, i32 0)
  br label %60

55:                                               ; preds = %27
  %56 = load i32, i32* %8, align 4
  %57 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %58 = load i32, i32* @RDP_KEYRELEASE, align 4
  %59 = call i32 @rdp_send_input(i32 %56, i32 %57, i32 %58, i32 29, i32 0)
  br label %60

60:                                               ; preds = %55, %30
  %61 = load i32, i32* @True, align 4
  store i32 %61, i32* %5, align 4
  br label %87

62:                                               ; preds = %4, %4, %4, %4, %4, %4
  %63 = load i32, i32* %9, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %74

65:                                               ; preds = %62
  %66 = load i32, i32* %8, align 4
  %67 = load i32, i32* @RDP_KEYPRESS, align 4
  %68 = load i32, i32* @SCANCODE_CHAR_LCTRL, align 4
  %69 = call i32 @rdp_send_scancode(i32 %66, i32 %67, i32 %68)
  %70 = load i32, i32* %8, align 4
  %71 = load i32, i32* @RDP_KEYPRESS, align 4
  %72 = load i32, i32* @SCANCODE_CHAR_ESC, align 4
  %73 = call i32 @rdp_send_scancode(i32 %70, i32 %71, i32 %72)
  br label %83

74:                                               ; preds = %62
  %75 = load i32, i32* %8, align 4
  %76 = load i32, i32* @RDP_KEYRELEASE, align 4
  %77 = load i32, i32* @SCANCODE_CHAR_ESC, align 4
  %78 = call i32 @rdp_send_scancode(i32 %75, i32 %76, i32 %77)
  %79 = load i32, i32* %8, align 4
  %80 = load i32, i32* @RDP_KEYRELEASE, align 4
  %81 = load i32, i32* @SCANCODE_CHAR_LCTRL, align 4
  %82 = call i32 @rdp_send_scancode(i32 %79, i32 %80, i32 %81)
  br label %83

83:                                               ; preds = %74, %65
  %84 = load i32, i32* @True, align 4
  store i32 %84, i32* %5, align 4
  br label %87

85:                                               ; preds = %4
  %86 = load i32, i32* @False, align 4
  store i32 %86, i32* %5, align 4
  br label %87

87:                                               ; preds = %85, %83, %60, %25
  %88 = load i32, i32* %5, align 4
  ret i32 %88
}

declare dso_local i32 @rdp_send_scancode(i32, i32, i32) #1

declare dso_local i32 @rdp_send_input(i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
