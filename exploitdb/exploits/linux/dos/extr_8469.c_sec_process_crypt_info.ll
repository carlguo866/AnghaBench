; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_sec_process_crypt_info.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_sec_process_crypt_info.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SEC_RANDOM_SIZE = common dso_local global i32 0, align 4
@sec_crypted_random = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @sec_process_crypt_info to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sec_process_crypt_info(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %10 = load i32, i32* @SEC_RANDOM_SIZE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca i32, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = load i32, i32* %2, align 4
  %15 = call i32 @sec_parse_crypt_info(i32 %14, i32* %8, i32** %3, i32** %4, i32** %5)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 1, i32* %9, align 4
  br label %27

18:                                               ; preds = %1
  %19 = load i32, i32* @sec_crypted_random, align 4
  %20 = load i32, i32* @SEC_RANDOM_SIZE, align 4
  %21 = load i32*, i32** %4, align 8
  %22 = load i32*, i32** %5, align 8
  %23 = call i32 @sec_rsa_encrypt(i32 %19, i32* %13, i32 %20, i32* %21, i32* %22)
  %24 = load i32*, i32** %3, align 8
  %25 = load i32, i32* %8, align 4
  %26 = call i32 @sec_generate_keys(i32* %13, i32* %24, i32 %25)
  store i32 0, i32* %9, align 4
  br label %27

27:                                               ; preds = %18, %17
  %28 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %28)
  %29 = load i32, i32* %9, align 4
  switch i32 %29, label %31 [
    i32 0, label %30
    i32 1, label %30
  ]

30:                                               ; preds = %27, %27
  ret void

31:                                               ; preds = %27
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sec_parse_crypt_info(i32, i32*, i32**, i32**, i32**) #2

declare dso_local i32 @sec_rsa_encrypt(i32, i32*, i32, i32*, i32*) #2

declare dso_local i32 @sec_generate_keys(i32*, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
