; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_45919.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_45919.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.nlmsghdr = type { i64, i32 }
%struct.inet_diag_msg = type { i32 }

@SOCKET_BUFFER_SIZE = common dso_local global i32 0, align 4
@server_thread = common dso_local global i32 0, align 4
@EXIT_FAILURE = common dso_local global i32 0, align 4
@client_thread = common dso_local global i32 0, align 4
@AF_NETLINK = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NETLINK_INET_DIAG = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"socket: \00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"sendmsg: \00", align 1
@NLMSG_DONE = common dso_local global i64 0, align 8
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@NLMSG_ERROR = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [26 x i8] c"Error in netlink message\0A\00", align 1
@client_stop_flag = common dso_local global i32 0, align 4
@servser_stop_flag = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.nlmsghdr*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.inet_diag_msg*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %16 = load i32, i32* @SOCKET_BUFFER_SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %10, align 8
  %19 = alloca i32, i64 %17, align 16
  store i64 %17, i64* %11, align 8
  %20 = load i32, i32* @server_thread, align 4
  %21 = call i64 @pthread_create(i32* %13, i32* null, i32 %20, i32* null)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %2
  %24 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %24, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

25:                                               ; preds = %2
  %26 = call i32 @sleep(i32 2)
  %27 = load i32, i32* @client_thread, align 4
  %28 = call i64 @pthread_create(i32* %14, i32* null, i32 %27, i32* null)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %31, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

32:                                               ; preds = %25
  %33 = call i32 @sleep(i32 2)
  %34 = load i32, i32* @AF_NETLINK, align 4
  %35 = load i32, i32* @SOCK_DGRAM, align 4
  %36 = load i32, i32* @NETLINK_INET_DIAG, align 4
  %37 = call i32 @socket(i32 %34, i32 %35, i32 %36)
  store i32 %37, i32* %6, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %32
  %40 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %41 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %41, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

42:                                               ; preds = %32
  %43 = load i32, i32* %6, align 4
  %44 = call i64 @send_diag_msg(i32 %43)
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %48 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %48, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

49:                                               ; preds = %42
  br label %50

50:                                               ; preds = %95, %49
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %6, align 4
  %53 = mul nuw i64 4, %17
  %54 = trunc i64 %53 to i32
  %55 = call i32 @recv(i32 %52, i32* %19, i32 %54, i32 0)
  store i32 %55, i32* %7, align 4
  %56 = bitcast i32* %19 to %struct.nlmsghdr*
  store %struct.nlmsghdr* %56, %struct.nlmsghdr** %9, align 8
  br label %57

57:                                               ; preds = %80, %51
  %58 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %59 = load i32, i32* %7, align 4
  %60 = call i64 @NLMSG_OK(%struct.nlmsghdr* %58, i32 %59)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %95

62:                                               ; preds = %57
  %63 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %64 = getelementptr inbounds %struct.nlmsghdr, %struct.nlmsghdr* %63, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = load i64, i64* @NLMSG_DONE, align 8
  %67 = icmp eq i64 %65, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %69, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

70:                                               ; preds = %62
  %71 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %72 = getelementptr inbounds %struct.nlmsghdr, %struct.nlmsghdr* %71, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* @NLMSG_ERROR, align 8
  %75 = icmp eq i64 %73, %74
  br i1 %75, label %76, label %80

76:                                               ; preds = %70
  %77 = load i32, i32* @stderr, align 4
  %78 = call i32 @fprintf(i32 %77, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %79 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %79, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %96

80:                                               ; preds = %70
  %81 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %82 = call i64 @NLMSG_DATA(%struct.nlmsghdr* %81)
  %83 = inttoptr i64 %82 to %struct.inet_diag_msg*
  store %struct.inet_diag_msg* %83, %struct.inet_diag_msg** %12, align 8
  %84 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %85 = getelementptr inbounds %struct.nlmsghdr, %struct.nlmsghdr* %84, i32 0, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = call i32 @NLMSG_LENGTH(i32 4)
  %88 = sub nsw i32 %86, %87
  store i32 %88, i32* %8, align 4
  %89 = load %struct.inet_diag_msg*, %struct.inet_diag_msg** %12, align 8
  %90 = load i32, i32* %8, align 4
  %91 = call i32 @parse_diag_msg(%struct.inet_diag_msg* %89, i32 %90)
  %92 = load %struct.nlmsghdr*, %struct.nlmsghdr** %9, align 8
  %93 = load i32, i32* %7, align 4
  %94 = call %struct.nlmsghdr* @NLMSG_NEXT(%struct.nlmsghdr* %92, i32 %93)
  store %struct.nlmsghdr* %94, %struct.nlmsghdr** %9, align 8
  br label %57

95:                                               ; preds = %57
  br label %50

96:                                               ; preds = %76, %68, %46, %39, %30, %23
  %97 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %97)
  %98 = load i32, i32* %3, align 4
  ret i32 %98
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare !callback !2 dso_local i64 @pthread_create(i32*, i32*, i32, i32*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i64 @send_diag_msg(i32) #2

declare dso_local i32 @recv(i32, i32*, i32, i32) #2

declare dso_local i64 @NLMSG_OK(%struct.nlmsghdr*, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i64 @NLMSG_DATA(%struct.nlmsghdr*) #2

declare dso_local i32 @NLMSG_LENGTH(i32) #2

declare dso_local i32 @parse_diag_msg(%struct.inet_diag_msg*, i32) #2

declare dso_local %struct.nlmsghdr* @NLMSG_NEXT(%struct.nlmsghdr*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
