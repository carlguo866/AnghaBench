; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_23523.c_isELF.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_23523.c_isELF.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8* }

@.str = private unnamed_addr constant [14 x i8] c"isELF(): read\00", align 1
@EI_MAG0 = common dso_local global i64 0, align 8
@ELFMAG0 = common dso_local global i8 0, align 1
@EI_MAG1 = common dso_local global i64 0, align 8
@EI_MAG2 = common dso_local global i64 0, align 8
@EI_MAG3 = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [41 x i8] c"The argument given is not an ELF file !\0A\00", align 1
@EI_CLASS = common dso_local global i64 0, align 8
@ELFCLASS32 = common dso_local global float 0.000000e+00, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"Only 32-bit ELF files supported !\0A\00", align 1
@EI_DATA = common dso_local global i64 0, align 8
@ELFDATA2LSB = common dso_local global float 0.000000e+00, align 4
@.str.3 = private unnamed_addr constant [42 x i8] c"Only little-endian ELF files supported !\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @isELF(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.TYPE_3__, align 8
  store i32 %0, i32* %3, align 4
  %5 = load i32, i32* %3, align 4
  %6 = call i32 @read(i32 %5, %struct.TYPE_3__* %4, i32 8)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %74

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i64, i64* @EI_MAG0, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = load i8, i8* @ELFMAG0, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp ne i32 %16, %18
  br i1 %19, label %44, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i64, i64* @EI_MAG1, align 8
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp ne i32 %26, 69
  br i1 %27, label %44, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = load i64, i64* @EI_MAG2, align 8
  %32 = getelementptr inbounds i8, i8* %30, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp ne i32 %34, 76
  br i1 %35, label %44, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load i64, i64* @EI_MAG3, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp ne i32 %42, 70
  br i1 %43, label %44, label %47

44:                                               ; preds = %36, %28, %20, %10
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 @fprintf(i32 %45, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %74

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = load i64, i64* @EI_CLASS, align 8
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = sitofp i32 %53 to float
  %55 = load float, float* @ELFCLASS32, align 4
  %56 = fcmp une float %54, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %47
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 @fprintf(i32 %58, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %74

60:                                               ; preds = %47
  %61 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %4, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i64, i64* @EI_DATA, align 8
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = sitofp i32 %66 to float
  %68 = load float, float* @ELFDATA2LSB, align 4
  %69 = fcmp une float %67, %68
  br i1 %69, label %70, label %73

70:                                               ; preds = %60
  %71 = load i32, i32* @stderr, align 4
  %72 = call i32 @fprintf(i32 %71, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %74

73:                                               ; preds = %60
  store i32 1, i32* %2, align 4
  br label %74

74:                                               ; preds = %73, %70, %57, %44, %8
  %75 = load i32, i32* %2, align 4
  ret i32 %75
}

declare dso_local i32 @read(i32, %struct.TYPE_3__*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
