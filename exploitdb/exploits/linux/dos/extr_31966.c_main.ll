; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_31966.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_31966.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"TESTTIME\00", align 1
@DEFAULT_TESTTIME = common dso_local global i64 0, align 8
@cleanup = common dso_local global i32 0, align 4
@SIGABRT = common dso_local global i32 0, align 4
@handler_fail = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"child\00", align 1
@pid = common dso_local global i32 0, align 4
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@PTRACE_DETACH = common dso_local global i32 0, align 4
@thread_func = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [15 x i8] c"pthread_create\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i8* @getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  store i8* %10, i8** %6, align 8
  %11 = call i64 @time(i32* null)
  %12 = load i8*, i8** %6, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = load i8*, i8** %6, align 8
  %16 = call i64 @atoi(i8* %15)
  br label %19

17:                                               ; preds = %2
  %18 = load i64, i64* @DEFAULT_TESTTIME, align 8
  br label %19

19:                                               ; preds = %17, %14
  %20 = phi i64 [ %16, %14 ], [ %18, %17 ]
  %21 = add nsw i64 %11, %20
  store i64 %21, i64* %7, align 8
  %22 = load i32, i32* @cleanup, align 4
  %23 = call i32 @atexit(i32 %22)
  %24 = load i32, i32* @SIGABRT, align 4
  %25 = load i32, i32* @handler_fail, align 4
  %26 = call i32 @signal(i32 %24, i32 %25)
  %27 = load i32, i32* @SIGINT, align 4
  %28 = load i32, i32* @handler_fail, align 4
  %29 = call i32 @signal(i32 %27, i32 %28)
  %30 = load i32, i32* %4, align 4
  %31 = icmp ne i32 %30, 2
  br i1 %31, label %38, label %32

32:                                               ; preds = %19
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @strcmp(i8* %35, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %56

38:                                               ; preds = %32, %19
  %39 = call i32 (...) @fork()
  store i32 %39, i32* @pid, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %56

41:                                               ; preds = %38
  store i64 0, i64* %8, align 8
  br label %42

42:                                               ; preds = %51, %41
  %43 = load i32, i32* @PTRACE_ATTACH, align 4
  %44 = load i32, i32* @pid, align 4
  %45 = call i32 @ptrace(i32 %43, i32 %44, i32* null, i32 0)
  %46 = load i32, i32* @PTRACE_DETACH, align 4
  %47 = load i32, i32* @pid, align 4
  %48 = call i32 @ptrace(i32 %46, i32 %47, i32* null, i32 0)
  %49 = load i64, i64* %8, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %8, align 8
  br label %51

51:                                               ; preds = %42
  %52 = call i64 @time(i32* null)
  %53 = load i64, i64* %7, align 8
  %54 = icmp slt i64 %52, %53
  br i1 %54, label %42, label %55

55:                                               ; preds = %51
  ret i32 0

56:                                               ; preds = %38, %32
  %57 = load i32, i32* @thread_func, align 4
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 0
  %60 = load i8*, i8** %59, align 8
  %61 = call i64 @pthread_create(i32* %9, i32* null, i32 %57, i8* %60)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %56
  %64 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  br label %65

65:                                               ; preds = %63, %56
  br label %66

66:                                               ; preds = %65, %66
  %67 = call i32 (...) @pause()
  br label %66
}

declare dso_local i8* @getenv(i8*) #1

declare dso_local i64 @time(i32*) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @atexit(i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @ptrace(i32, i32, i32*, i32) #1

declare !callback !2 dso_local i64 @pthread_create(i32*, i32*, i32, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @pause(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
