; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_911.c_do_aio_direct_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_911.c_do_aio_direct_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iocb = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32, i8*, i64 }
%struct.io_event = type { i32, %struct.iocb* }
%struct.stat = type { i32 }

@myctx = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"io_submit\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"AIO read of %d at offset %lld returned %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_aio_direct_read(i32 %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.iocb, align 8
  %11 = alloca %struct.iocb*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.io_event, align 8
  %14 = alloca %struct.stat, align 4
  %15 = alloca %struct.iocb*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  store i32 %0, i32* %6, align 4
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.iocb* %10, %struct.iocb** %11, align 8
  %19 = load i32, i32* %6, align 4
  %20 = load i8*, i8** %7, align 8
  %21 = load i32, i32* %9, align 4
  %22 = load i32, i32* %8, align 4
  %23 = call i32 @io_prep_pread(%struct.iocb* %10, i32 %19, i8* %20, i32 %21, i32 %22)
  %24 = load i32, i32* @myctx, align 4
  %25 = call i32 @io_submit(i32 %24, i32 1, %struct.iocb** %11)
  store i32 %25, i32* %12, align 4
  %26 = icmp ne i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %4
  %28 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %29 = load i32, i32* %12, align 4
  store i32 %29, i32* %5, align 4
  br label %60

30:                                               ; preds = %4
  %31 = load i32, i32* @myctx, align 4
  %32 = call i32 @io_getevents(i32 %31, i32 1, i32 1, %struct.io_event* %13, i32 0)
  store i32 %32, i32* %12, align 4
  %33 = load i32, i32* %12, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %58

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.io_event, %struct.io_event* %13, i32 0, i32 1
  %37 = load %struct.iocb*, %struct.iocb** %36, align 8
  store %struct.iocb* %37, %struct.iocb** %15, align 8
  %38 = load %struct.iocb*, %struct.iocb** %15, align 8
  %39 = getelementptr inbounds %struct.iocb, %struct.iocb* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %39, i32 0, i32 0
  %41 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 8
  store i32 %42, i32* %16, align 4
  %43 = load %struct.iocb*, %struct.iocb** %15, align 8
  %44 = getelementptr inbounds %struct.iocb, %struct.iocb* %43, i32 0, i32 0
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %44, i32 0, i32 0
  %46 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %45, i32 0, i32 1
  %47 = load i8*, i8** %46, align 8
  store i8* %47, i8** %17, align 8
  %48 = load %struct.iocb*, %struct.iocb** %15, align 8
  %49 = getelementptr inbounds %struct.iocb, %struct.iocb* %48, i32 0, i32 0
  %50 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %49, i32 0, i32 0
  %51 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %50, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %18, align 8
  %53 = load i32, i32* %16, align 4
  %54 = load i64, i64* %18, align 8
  %55 = getelementptr inbounds %struct.io_event, %struct.io_event* %13, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 %53, i64 %54, i32 %56)
  br label %58

58:                                               ; preds = %35, %30
  %59 = load i32, i32* %12, align 4
  store i32 %59, i32* %5, align 4
  br label %60

60:                                               ; preds = %58, %27
  %61 = load i32, i32* %5, align 4
  ret i32 %61
}

declare dso_local i32 @io_prep_pread(%struct.iocb*, i32, i8*, i32, i32) #1

declare dso_local i32 @io_submit(i32, i32, %struct.iocb**) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @io_getevents(i32, i32, i32, %struct.io_event*, i32) #1

declare dso_local i32 @printf(i8*, i32, i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
