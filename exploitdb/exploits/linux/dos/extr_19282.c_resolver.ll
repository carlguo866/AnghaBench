; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19282.c_resolver.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19282.c_resolver.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.hostent = type { i32, i32 }

@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"Could not resolve address\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @resolver(%struct.sockaddr* %0, i8* %1, i32 %2) #0 {
  %4 = alloca %struct.sockaddr*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in*, align 8
  %8 = alloca %struct.hostent*, align 8
  store %struct.sockaddr* %0, %struct.sockaddr** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = load %struct.sockaddr*, %struct.sockaddr** %4, align 8
  %10 = bitcast %struct.sockaddr* %9 to %struct.sockaddr_in*
  store %struct.sockaddr_in* %10, %struct.sockaddr_in** %7, align 8
  %11 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %12 = bitcast %struct.sockaddr_in* %11 to i8*
  %13 = call i32 @bzero(i8* %12, i32 16)
  %14 = load i32, i32* @AF_INET, align 4
  %15 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %14, i32* %16, align 4
  %17 = load i32, i32* %6, align 4
  %18 = call i32 @htons(i32 %17)
  %19 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %19, i32 0, i32 1
  store i32 %18, i32* %20, align 8
  %21 = load i8*, i8** %5, align 8
  %22 = call i64 @inet_addr(i8* %21)
  %23 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i64 %22, i64* %25, align 8
  %26 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %52

32:                                               ; preds = %3
  %33 = load i8*, i8** %5, align 8
  %34 = call %struct.hostent* @gethostbyname(i8* %33)
  store %struct.hostent* %34, %struct.hostent** %8, align 8
  %35 = load %struct.hostent*, %struct.hostent** %8, align 8
  %36 = icmp ne %struct.hostent* %35, null
  br i1 %36, label %37, label %48

37:                                               ; preds = %32
  %38 = load %struct.hostent*, %struct.hostent** %8, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 8
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %41, i32 0, i32 0
  %43 = bitcast %struct.TYPE_2__* %42 to i8*
  %44 = load %struct.hostent*, %struct.hostent** %8, align 8
  %45 = getelementptr inbounds %struct.hostent, %struct.hostent* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = call i32 @bcopy(i32 %40, i8* %43, i32 %46)
  br label %51

48:                                               ; preds = %32
  %49 = call i32 @perror(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %50 = call i32 @exit(i32 -1) #3
  unreachable

51:                                               ; preds = %37
  br label %52

52:                                               ; preds = %51, %3
  ret void
}

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bcopy(i32, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
