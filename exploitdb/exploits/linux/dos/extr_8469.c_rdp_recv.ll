; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i64, i64 }

@rdp_recv.rdp_s = internal global %struct.TYPE_6__* null, align 8
@next_packet = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (%struct.TYPE_6__* (i32*)* @rdp_recv to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.TYPE_6__* @rdp_recv(i32* %0) #0 {
  %2 = alloca %struct.TYPE_6__*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  %6 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %7 = icmp eq %struct.TYPE_6__* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = load i64, i64* @next_packet, align 8
  %10 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %11 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp sge i64 %9, %12
  br i1 %13, label %14, label %23

14:                                               ; preds = %8, %1
  %15 = call %struct.TYPE_6__* (...) @sec_recv()
  store %struct.TYPE_6__* %15, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %16 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %17 = icmp eq %struct.TYPE_6__* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store %struct.TYPE_6__* null, %struct.TYPE_6__** %2, align 8
  br label %52

19:                                               ; preds = %14
  %20 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %21 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %20, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* @next_packet, align 8
  br label %27

23:                                               ; preds = %8
  %24 = load i64, i64* @next_packet, align 8
  %25 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %26 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %25, i32 0, i32 1
  store i64 %24, i64* %26, align 8
  br label %27

27:                                               ; preds = %23, %19
  %28 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @in_uint16_le(%struct.TYPE_6__* %28, i32 %29)
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, 32768
  br i1 %32, label %33, label %38

33:                                               ; preds = %27
  %34 = load i64, i64* @next_packet, align 8
  %35 = add nsw i64 %34, 8
  store i64 %35, i64* @next_packet, align 8
  %36 = load i32*, i32** %3, align 8
  store i32 0, i32* %36, align 4
  %37 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  store %struct.TYPE_6__* %37, %struct.TYPE_6__** %2, align 8
  br label %52

38:                                               ; preds = %27
  %39 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %40 = load i32, i32* %5, align 4
  %41 = call i32 @in_uint16_le(%struct.TYPE_6__* %39, i32 %40)
  %42 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  %43 = call i32 @in_uint8s(%struct.TYPE_6__* %42, i32 2)
  %44 = load i32, i32* %5, align 4
  %45 = and i32 %44, 15
  %46 = load i32*, i32** %3, align 8
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* %4, align 4
  %48 = sext i32 %47 to i64
  %49 = load i64, i64* @next_packet, align 8
  %50 = add nsw i64 %49, %48
  store i64 %50, i64* @next_packet, align 8
  %51 = load %struct.TYPE_6__*, %struct.TYPE_6__** @rdp_recv.rdp_s, align 8
  store %struct.TYPE_6__* %51, %struct.TYPE_6__** %2, align 8
  br label %52

52:                                               ; preds = %38, %33, %18
  %53 = load %struct.TYPE_6__*, %struct.TYPE_6__** %2, align 8
  ret %struct.TYPE_6__* %53
}

declare dso_local %struct.TYPE_6__* @sec_recv(...) #1

declare dso_local i32 @in_uint16_le(%struct.TYPE_6__*, i32) #1

declare dso_local i32 @in_uint8s(%struct.TYPE_6__*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
