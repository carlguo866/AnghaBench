; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_sec_parse_crypt_info.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_sec_parse_crypt_info.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { i32*, i32* }

@False = common dso_local global i32 0, align 4
@SEC_RANDOM_SIZE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [15 x i8] c"random len %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.TYPE_9__*, i64*, i32**, i32**, i32**)* @sec_parse_crypt_info to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @sec_parse_crypt_info(%struct.TYPE_9__* %0, i64* %1, i32** %2, i32** %3, i32** %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_9__*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i32**, align 8
  %10 = alloca i32**, align 8
  %11 = alloca i32**, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i32*, align 8
  store %struct.TYPE_9__* %0, %struct.TYPE_9__** %7, align 8
  store i64* %1, i64** %8, align 8
  store i32** %2, i32*** %9, align 8
  store i32** %3, i32*** %10, align 8
  store i32** %4, i32*** %11, align 8
  %19 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %20 = load i64*, i64** %8, align 8
  %21 = load i64, i64* %20, align 8
  %22 = call i32 @in_uint32_le(%struct.TYPE_9__* %19, i64 %21)
  %23 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %24 = load i64, i64* %12, align 8
  %25 = call i32 @in_uint32_le(%struct.TYPE_9__* %23, i64 %24)
  %26 = load i64, i64* %12, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %5
  %29 = load i32, i32* @False, align 4
  store i32 %29, i32* %6, align 4
  br label %102

30:                                               ; preds = %5
  %31 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %32 = load i64, i64* %13, align 8
  %33 = call i32 @in_uint32_le(%struct.TYPE_9__* %31, i64 %32)
  %34 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %35 = load i64, i64* %14, align 8
  %36 = call i32 @in_uint32_le(%struct.TYPE_9__* %34, i64 %35)
  %37 = load i64, i64* %13, align 8
  %38 = load i64, i64* @SEC_RANDOM_SIZE, align 8
  %39 = icmp ne i64 %37, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %30
  %41 = load i64, i64* %13, align 8
  %42 = call i32 @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64 %41)
  %43 = load i32, i32* @False, align 4
  store i32 %43, i32* %6, align 4
  br label %102

44:                                               ; preds = %30
  %45 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %46 = load i32**, i32*** %9, align 8
  %47 = load i32*, i32** %46, align 8
  %48 = load i64, i64* %13, align 8
  %49 = call i32 @in_uint8p(%struct.TYPE_9__* %45, i32* %47, i64 %48)
  %50 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %51 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %50, i32 0, i32 0
  %52 = load i32*, i32** %51, align 8
  %53 = load i64, i64* %14, align 8
  %54 = getelementptr inbounds i32, i32* %52, i64 %53
  store i32* %54, i32** %18, align 8
  %55 = load i32*, i32** %18, align 8
  %56 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %57 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %56, i32 0, i32 1
  %58 = load i32*, i32** %57, align 8
  %59 = icmp ugt i32* %55, %58
  br i1 %59, label %60, label %62

60:                                               ; preds = %44
  %61 = load i32, i32* @False, align 4
  store i32 %61, i32* %6, align 4
  br label %102

62:                                               ; preds = %44
  %63 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %64 = call i32 @in_uint8s(%struct.TYPE_9__* %63, i32 12)
  br label %65

65:                                               ; preds = %95, %62
  %66 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %67 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %66, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  %69 = load i32*, i32** %18, align 8
  %70 = icmp ult i32* %68, %69
  br i1 %70, label %71, label %99

71:                                               ; preds = %65
  %72 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %73 = load i32, i32* %15, align 4
  %74 = call i32 @in_uint16_le(%struct.TYPE_9__* %72, i32 %73)
  %75 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %76 = load i32, i32* %16, align 4
  %77 = call i32 @in_uint16_le(%struct.TYPE_9__* %75, i32 %76)
  %78 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %79 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %78, i32 0, i32 0
  %80 = load i32*, i32** %79, align 8
  %81 = load i32, i32* %16, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %80, i64 %82
  store i32* %83, i32** %17, align 8
  %84 = load i32, i32* %15, align 4
  switch i32 %84, label %95 [
    i32 128, label %85
    i32 129, label %94
  ]

85:                                               ; preds = %71
  %86 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %87 = load i32**, i32*** %10, align 8
  %88 = load i32**, i32*** %11, align 8
  %89 = call i32 @sec_parse_public_key(%struct.TYPE_9__* %86, i32** %87, i32** %88)
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %93, label %91

91:                                               ; preds = %85
  %92 = load i32, i32* @False, align 4
  store i32 %92, i32* %6, align 4
  br label %102

93:                                               ; preds = %85
  br label %95

94:                                               ; preds = %71
  br label %95

95:                                               ; preds = %71, %94, %93
  %96 = load i32*, i32** %17, align 8
  %97 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %98 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %97, i32 0, i32 0
  store i32* %96, i32** %98, align 8
  br label %65

99:                                               ; preds = %65
  %100 = load %struct.TYPE_9__*, %struct.TYPE_9__** %7, align 8
  %101 = call i32 @s_check_end(%struct.TYPE_9__* %100)
  store i32 %101, i32* %6, align 4
  br label %102

102:                                              ; preds = %99, %91, %60, %40, %28
  %103 = load i32, i32* %6, align 4
  ret i32 %103
}

declare dso_local i32 @in_uint32_le(%struct.TYPE_9__*, i64) #1

declare dso_local i32 @error(i8*, i64) #1

declare dso_local i32 @in_uint8p(%struct.TYPE_9__*, i32*, i64) #1

declare dso_local i32 @in_uint8s(%struct.TYPE_9__*, i32) #1

declare dso_local i32 @in_uint16_le(%struct.TYPE_9__*, i32) #1

declare dso_local i32 @sec_parse_public_key(%struct.TYPE_9__*, i32**, i32**) #1

declare dso_local i32 @s_check_end(%struct.TYPE_9__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
