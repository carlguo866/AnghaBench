; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33193.c_expect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33193.c_expect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pollfd = type { i32, i32, i32 }

@LASTBUFSZ = common dso_local global i32 0, align 4
@POLLIN = common dso_local global i32 0, align 4
@POLLERR = common dso_local global i32 0, align 4
@POLLHUP = common dso_local global i32 0, align 4
@POLL_TIMEOUT = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"Timeout while waiting for '\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"' \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"poll failed: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [17 x i8] c"read failed: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32, i8*, i64)* @expect to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @expect(i32 %0, i8* %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [1 x i8], align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.pollfd, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %14 = load i32, i32* @LASTBUFSZ, align 4
  %15 = add nsw i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %7, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %8, align 8
  store i64 0, i64* %9, align 8
  %19 = trunc i64 %16 to i32
  %20 = call i32 @memset(i8* %18, i32 %19, i32 0)
  br label %21

21:                                               ; preds = %107, %3
  %22 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %13, i32 0, i32 0
  %23 = load i32, i32* %4, align 4
  store i32 %23, i32* %22, align 4
  %24 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %13, i32 0, i32 1
  %25 = load i32, i32* @POLLIN, align 4
  %26 = load i32, i32* @POLLERR, align 4
  %27 = or i32 %25, %26
  %28 = load i32, i32* @POLLHUP, align 4
  %29 = or i32 %27, %28
  store i32 %29, i32* %24, align 4
  %30 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %13, i32 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = load i32, i32* @POLL_TIMEOUT, align 4
  %32 = call i32 @poll(%struct.pollfd* %13, i32 1, i32 %31)
  store i32 %32, i32* %12, align 4
  %33 = load i32, i32* %12, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %49

35:                                               ; preds = %21
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %38 = load i8*, i8** %5, align 8
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 @putstr(i8* %38, i32 %39)
  %41 = load i32, i32* @stderr, align 4
  %42 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %43 = load i64, i64* %9, align 8
  %44 = load i32, i32* @stderr, align 4
  %45 = call i32 @print_lastbytes(i8* %18, i64 %43, i32 %44)
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %48 = call i32 @exit(i32 5) #4
  unreachable

49:                                               ; preds = %21
  %50 = load i32, i32* %12, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %58

52:                                               ; preds = %49
  %53 = load i32, i32* @stderr, align 4
  %54 = load i32, i32* @errno, align 4
  %55 = call i8* @strerror(i32 %54)
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* %55)
  %57 = call i32 @exit(i32 4) #4
  unreachable

58:                                               ; preds = %49
  br label %59

59:                                               ; preds = %58
  %60 = load i32, i32* %4, align 4
  %61 = getelementptr inbounds [1 x i8], [1 x i8]* %10, i64 0, i64 0
  %62 = call i32 @read(i32 %60, i8* %61, i32 1)
  store i32 %62, i32* %11, align 4
  %63 = load i32, i32* %11, align 4
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %92

65:                                               ; preds = %59
  %66 = load i64, i64* %9, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %9, align 8
  %68 = getelementptr inbounds i8, i8* %18, i64 1
  %69 = load i32, i32* @LASTBUFSZ, align 4
  %70 = call i32 @memmove(i8* %18, i8* %68, i32 %69)
  %71 = getelementptr inbounds [1 x i8], [1 x i8]* %10, i64 0, i64 0
  %72 = load i8, i8* %71, align 1
  %73 = load i32, i32* @LASTBUFSZ, align 4
  %74 = sub nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %18, i64 %75
  store i8 %72, i8* %76, align 1
  %77 = load i32, i32* @LASTBUFSZ, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %18, i64 %78
  store i8 0, i8* %79, align 1
  %80 = load i32, i32* @LASTBUFSZ, align 4
  %81 = sext i32 %80 to i64
  %82 = load i64, i64* %6, align 8
  %83 = sub i64 %81, %82
  %84 = getelementptr inbounds i8, i8* %18, i64 %83
  %85 = load i8*, i8** %5, align 8
  %86 = load i64, i64* %6, align 8
  %87 = call i64 @memcmp(i8* %84, i8* %85, i64 %86)
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %65
  %90 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %90)
  ret void

91:                                               ; preds = %65
  br label %107

92:                                               ; preds = %59
  %93 = load i32, i32* %11, align 4
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %106

95:                                               ; preds = %92
  %96 = load i32, i32* @stderr, align 4
  %97 = load i32, i32* @errno, align 4
  %98 = call i8* @strerror(i32 %97)
  %99 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %98)
  %100 = load i64, i64* %9, align 8
  %101 = load i32, i32* @stderr, align 4
  %102 = call i32 @print_lastbytes(i8* %18, i64 %100, i32 %101)
  %103 = load i32, i32* @stderr, align 4
  %104 = call i32 (i32, i8*, ...) @fprintf(i32 %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %105 = call i32 (...) @abort() #4
  unreachable

106:                                              ; preds = %92
  br label %107

107:                                              ; preds = %106, %91
  br label %21
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @poll(%struct.pollfd*, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @putstr(i8*, i32) #2

declare dso_local i32 @print_lastbytes(i8*, i64, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @strerror(i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @memmove(i8*, i8*, i32) #2

declare dso_local i64 @memcmp(i8*, i8*, i64) #2

; Function Attrs: noreturn
declare dso_local i32 @abort(...) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
