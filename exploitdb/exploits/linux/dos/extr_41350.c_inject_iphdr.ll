; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_41350.c_inject_iphdr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_41350.c_inject_iphdr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_8__ = type { %struct.TYPE_6__ }
%struct.TYPE_6__ = type { i8* }
%struct.ip = type { i32, i32, i32, i32, %struct.TYPE_7__, %struct.TYPE_5__, i64, i8*, i8*, i8* }
%struct.TYPE_7__ = type { i8* }
%struct.TYPE_5__ = type { i8* }

@dst_class = common dso_local global i32* null, align 8
@dstaddr = common dso_local global i8* null, align 8
@src_class = common dso_local global i32* null, align 8
@target = common dso_local global %struct.TYPE_8__ zeroinitializer, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.ip*, i8*, i8*)* @inject_iphdr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @inject_iphdr(%struct.ip* %0, i8* %1, i8* %2) #0 {
  %4 = alloca %struct.ip*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store %struct.ip* %0, %struct.ip** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %7 = load %struct.ip*, %struct.ip** %4, align 8
  %8 = getelementptr inbounds %struct.ip, %struct.ip* %7, i32 0, i32 0
  store i32 5, i32* %8, align 8
  %9 = load %struct.ip*, %struct.ip** %4, align 8
  %10 = getelementptr inbounds %struct.ip, %struct.ip* %9, i32 0, i32 1
  store i32 4, i32* %10, align 4
  %11 = load i8*, i8** %5, align 8
  %12 = load %struct.ip*, %struct.ip** %4, align 8
  %13 = getelementptr inbounds %struct.ip, %struct.ip* %12, i32 0, i32 9
  store i8* %11, i8** %13, align 8
  %14 = load %struct.ip*, %struct.ip** %4, align 8
  %15 = getelementptr inbounds %struct.ip, %struct.ip* %14, i32 0, i32 2
  store i32 8, i32* %15, align 8
  %16 = call i8* (...) @random()
  %17 = load %struct.ip*, %struct.ip** %4, align 8
  %18 = getelementptr inbounds %struct.ip, %struct.ip* %17, i32 0, i32 8
  store i8* %16, i8** %18, align 8
  %19 = load i8*, i8** %6, align 8
  %20 = load %struct.ip*, %struct.ip** %4, align 8
  %21 = getelementptr inbounds %struct.ip, %struct.ip* %20, i32 0, i32 7
  store i8* %19, i8** %21, align 8
  %22 = load %struct.ip*, %struct.ip** %4, align 8
  %23 = getelementptr inbounds %struct.ip, %struct.ip* %22, i32 0, i32 6
  store i64 0, i64* %23, align 8
  %24 = load %struct.ip*, %struct.ip** %4, align 8
  %25 = getelementptr inbounds %struct.ip, %struct.ip* %24, i32 0, i32 3
  store i32 255, i32* %25, align 4
  %26 = load i32*, i32** @dst_class, align 8
  %27 = icmp ne i32* %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %3
  %29 = load i32*, i32** @dst_class, align 8
  %30 = call i32 @class2ip(i32* %29)
  %31 = call i8* @inet_addr(i32 %30)
  br label %34

32:                                               ; preds = %3
  %33 = load i8*, i8** @dstaddr, align 8
  br label %34

34:                                               ; preds = %32, %28
  %35 = phi i8* [ %31, %28 ], [ %33, %32 ]
  %36 = load %struct.ip*, %struct.ip** %4, align 8
  %37 = getelementptr inbounds %struct.ip, %struct.ip* %36, i32 0, i32 4
  %38 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %37, i32 0, i32 0
  store i8* %35, i8** %38, align 8
  %39 = load i32*, i32** @src_class, align 8
  %40 = icmp ne i32* %39, null
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = load i32*, i32** @src_class, align 8
  %43 = call i32 @class2ip(i32* %42)
  %44 = call i8* @inet_addr(i32 %43)
  br label %47

45:                                               ; preds = %34
  %46 = call i8* (...) @random()
  br label %47

47:                                               ; preds = %45, %41
  %48 = phi i8* [ %44, %41 ], [ %46, %45 ]
  %49 = load %struct.ip*, %struct.ip** %4, align 8
  %50 = getelementptr inbounds %struct.ip, %struct.ip* %49, i32 0, i32 5
  %51 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %50, i32 0, i32 0
  store i8* %48, i8** %51, align 8
  %52 = load %struct.ip*, %struct.ip** %4, align 8
  %53 = getelementptr inbounds %struct.ip, %struct.ip* %52, i32 0, i32 4
  %54 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %53, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  store i8* %55, i8** getelementptr inbounds (%struct.TYPE_8__, %struct.TYPE_8__* @target, i32 0, i32 0, i32 0), align 8
  ret void
}

declare dso_local i8* @random(...) #1

declare dso_local i8* @inet_addr(i32) #1

declare dso_local i32 @class2ip(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
