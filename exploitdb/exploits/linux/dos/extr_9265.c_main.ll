; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_9265.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_9265.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bpf_program = type { i32 }

@PCAP_ERRBUF_SIZE = common dso_local global i32 0, align 4
@opterr = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [3 x i8] c"i:\00", align 1
@optarg = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [41 x i8] c"[-] couldn't find default interface: %s\0A\00", align 1
@PKT_BUFSIZ = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"[-] couldn't open interface %s: %s\0A\00", align 1
@BPF_FILTER = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [35 x i8] c"[-] couldn't parse BPF filter: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"[-] couldn't set BPF filter: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"[+] listening on %s: %s\0A\00", align 1
@process = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.bpf_program, align 4
  %12 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %8, align 8
  %13 = load i32, i32* @PCAP_ERRBUF_SIZE, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %9, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %10, align 8
  store i64 0, i64* @opterr, align 8
  br label %17

17:                                               ; preds = %29, %2
  %18 = load i32, i32* %4, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = call i32 @getopt(i32 %18, i8** %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32 %20, i32* %6, align 4
  %21 = icmp ne i32 %20, -1
  br i1 %21, label %22, label %30

22:                                               ; preds = %17
  %23 = load i32, i32* %6, align 4
  switch i32 %23, label %26 [
    i32 105, label %24
  ]

24:                                               ; preds = %22
  %25 = load i8*, i8** @optarg, align 8
  store i8* %25, i8** %8, align 8
  br label %29

26:                                               ; preds = %22
  %27 = load i8**, i8*** %5, align 8
  %28 = call i32 @usage(i8** %27)
  br label %29

29:                                               ; preds = %26, %24
  br label %17

30:                                               ; preds = %17
  %31 = load i8*, i8** %8, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = call i8* @pcap_lookupdev(i8* %16)
  store i8* %34, i8** %8, align 8
  %35 = load i8*, i8** %8, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = load i32, i32* @stderr, align 4
  %39 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i8* %16)
  %40 = call i32 @exit(i32 1) #4
  unreachable

41:                                               ; preds = %33
  br label %42

42:                                               ; preds = %41, %30
  %43 = load i8*, i8** %8, align 8
  %44 = load i32, i32* @PKT_BUFSIZ, align 4
  %45 = call i32* @pcap_open_live(i8* %43, i32 %44, i32 1, i32 1, i8* %16)
  store i32* %45, i32** %12, align 8
  %46 = load i32*, i32** %12, align 8
  %47 = icmp ne i32* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %42
  %49 = load i32, i32* @stderr, align 4
  %50 = load i8*, i8** %8, align 8
  %51 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %50, i8* %16)
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %42
  %54 = load i32*, i32** %12, align 8
  %55 = load i8*, i8** @BPF_FILTER, align 8
  %56 = call i32 @pcap_compile(i32* %54, %struct.bpf_program* %11, i8* %55, i32 1, i32 0)
  store i32 %56, i32* %7, align 4
  %57 = load i32, i32* %7, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %65

59:                                               ; preds = %53
  %60 = load i32, i32* @stderr, align 4
  %61 = load i32*, i32** %12, align 8
  %62 = call i8* @pcap_geterr(i32* %61)
  %63 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i8* %62)
  %64 = call i32 @exit(i32 1) #4
  unreachable

65:                                               ; preds = %53
  %66 = load i32*, i32** %12, align 8
  %67 = call i32 @pcap_setfilter(i32* %66, %struct.bpf_program* %11)
  %68 = load i32, i32* %7, align 4
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %76

70:                                               ; preds = %65
  %71 = load i32, i32* @stderr, align 4
  %72 = load i32*, i32** %12, align 8
  %73 = call i8* @pcap_geterr(i32* %72)
  %74 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0), i8* %73)
  %75 = call i32 @exit(i32 1) #4
  unreachable

76:                                               ; preds = %65
  %77 = load i8*, i8** %8, align 8
  %78 = load i8*, i8** @BPF_FILTER, align 8
  %79 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* %77, i8* %78)
  %80 = load i32*, i32** %12, align 8
  %81 = load i32, i32* @process, align 4
  %82 = load i8*, i8** %8, align 8
  %83 = call i32 @pcap_loop(i32* %80, i32 -1, i32 %81, i8* %82)
  store i32 0, i32* %3, align 4
  %84 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %84)
  %85 = load i32, i32* %3, align 4
  ret i32 %85
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i32 @usage(i8**) #2

declare dso_local i8* @pcap_lookupdev(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @pcap_open_live(i8*, i32, i32, i32, i8*) #2

declare dso_local i32 @pcap_compile(i32*, %struct.bpf_program*, i8*, i32, i32) #2

declare dso_local i8* @pcap_geterr(i32*) #2

declare dso_local i32 @pcap_setfilter(i32*, %struct.bpf_program*) #2

declare dso_local i32 @printf(i8*, i8*, i8*) #2

declare dso_local i32 @pcap_loop(i32*, i32, i32, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
