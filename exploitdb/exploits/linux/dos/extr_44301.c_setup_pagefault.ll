; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_setup_pagefault.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_setup_pagefault.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.uffdio_api = type { i64, i32, i32, %struct.TYPE_2__, i64 }
%struct.TYPE_2__ = type { i64, i32 }
%struct.uffdio_register = type { i64, i32, i32, %struct.TYPE_2__, i64 }
%struct.thread_struct = type { i32, i32 }

@__NR_userfaultfd = common dso_local global i32 0, align 4
@O_CLOEXEC = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"syscall\00", align 1
@UFFD_API = common dso_local global i64 0, align 8
@UFFDIO_API = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"UFFDIO_API\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"UFFDIO_API error %Lu\0A\00", align 1
@UFFDIO_REGISTER_MODE_MISSING = common dso_local global i32 0, align 4
@UFFDIO_REGISTER = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"ioctl(UFFDIO_REGISTER)\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"userfaultfd ioctls: 0x%llx\0A\00", align 1
@UFFD_API_RANGE_IOCTLS = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c"ioctl set is incorrect\0A\00", align 1
@pf_handler = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @setup_pagefault(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.uffdio_api, align 8
  %11 = alloca %struct.uffdio_register, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.thread_struct, align 4
  %14 = alloca %struct.thread_struct*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %15 = load i32, i32* @__NR_userfaultfd, align 4
  %16 = load i32, i32* @O_CLOEXEC, align 4
  %17 = load i32, i32* @O_NONBLOCK, align 4
  %18 = or i32 %16, %17
  %19 = call i32 @syscall(i32 %15, i32 %18)
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %8, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  br label %93

24:                                               ; preds = %3
  %25 = load i64, i64* @UFFD_API, align 8
  %26 = getelementptr inbounds %struct.uffdio_api, %struct.uffdio_api* %10, i32 0, i32 0
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.uffdio_api, %struct.uffdio_api* %10, i32 0, i32 4
  store i64 0, i64* %27, align 8
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* @UFFDIO_API, align 4
  %30 = bitcast %struct.uffdio_api* %10 to %struct.uffdio_register*
  %31 = call i32 @ioctl(i32 %28, i32 %29, %struct.uffdio_register* %30)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %24
  %34 = load i32, i32* @stderr, align 4
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %24
  %38 = getelementptr inbounds %struct.uffdio_api, %struct.uffdio_api* %10, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* @UFFD_API, align 8
  %41 = icmp ne i64 %39, %40
  br i1 %41, label %42, label %48

42:                                               ; preds = %37
  %43 = load i32, i32* @stderr, align 4
  %44 = getelementptr inbounds %struct.uffdio_api, %struct.uffdio_api* %10, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i64 %45)
  %47 = call i32 @exit(i32 1) #3
  unreachable

48:                                               ; preds = %37
  %49 = load i8*, i8** %4, align 8
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds %struct.uffdio_register, %struct.uffdio_register* %11, i32 0, i32 3
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  store i64 %50, i64* %52, align 8
  %53 = load i32, i32* %5, align 4
  %54 = getelementptr inbounds %struct.uffdio_register, %struct.uffdio_register* %11, i32 0, i32 3
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 1
  store i32 %53, i32* %55, align 8
  %56 = load i32, i32* @UFFDIO_REGISTER_MODE_MISSING, align 4
  %57 = getelementptr inbounds %struct.uffdio_register, %struct.uffdio_register* %11, i32 0, i32 2
  store i32 %56, i32* %57, align 4
  %58 = load i32, i32* %8, align 4
  %59 = load i32, i32* @UFFDIO_REGISTER, align 4
  %60 = call i32 @ioctl(i32 %58, i32 %59, %struct.uffdio_register* %11)
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %62, label %65

62:                                               ; preds = %48
  %63 = call i32 @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %64 = call i32 @exit(i32 1) #3
  unreachable

65:                                               ; preds = %48
  %66 = getelementptr inbounds %struct.uffdio_register, %struct.uffdio_register* %11, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i32 %67)
  %69 = load i32, i32* @UFFD_API_RANGE_IOCTLS, align 4
  store i32 %69, i32* %12, align 4
  %70 = getelementptr inbounds %struct.uffdio_register, %struct.uffdio_register* %11, i32 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = load i32, i32* %12, align 4
  %73 = and i32 %71, %72
  %74 = load i32, i32* %12, align 4
  %75 = icmp ne i32 %73, %74
  br i1 %75, label %76, label %80

76:                                               ; preds = %65
  %77 = load i32, i32* @stderr, align 4
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %77, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %79 = call i32 @exit(i32 1) #3
  unreachable

80:                                               ; preds = %65
  %81 = call i64 @malloc(i32 8)
  %82 = inttoptr i64 %81 to %struct.thread_struct*
  store %struct.thread_struct* %82, %struct.thread_struct** %14, align 8
  %83 = load i32, i32* %8, align 4
  %84 = load %struct.thread_struct*, %struct.thread_struct** %14, align 8
  %85 = getelementptr inbounds %struct.thread_struct, %struct.thread_struct* %84, i32 0, i32 0
  store i32 %83, i32* %85, align 4
  %86 = load i32, i32* %6, align 4
  %87 = load %struct.thread_struct*, %struct.thread_struct** %14, align 8
  %88 = getelementptr inbounds %struct.thread_struct, %struct.thread_struct* %87, i32 0, i32 1
  store i32 %86, i32* %88, align 4
  %89 = load i32, i32* @pf_handler, align 4
  %90 = load %struct.thread_struct*, %struct.thread_struct** %14, align 8
  %91 = bitcast %struct.thread_struct* %90 to i8*
  %92 = call i32 @pthread_create(i32* %9, i32* null, i32 %89, i8* %91)
  br label %93

93:                                               ; preds = %80, %22
  ret void
}

declare dso_local i32 @syscall(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @ioctl(i32, i32, %struct.uffdio_register*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
