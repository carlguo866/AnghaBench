; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_send_logon_info.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_send_logon_info.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@encryption = common dso_local global i64 0, align 8
@SEC_LOGON_INFO = common dso_local global i32 0, align 4
@SEC_ENCRYPT = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32, i8*, i8*, i8*, i8*, i8*)* @rdp_send_logon_info to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdp_send_logon_info(i32 %0, i8* %1, i8* %2, i8* %3, i8* %4, i8* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i8* %3, i8** %10, align 8
  store i8* %4, i8** %11, align 8
  store i8* %5, i8** %12, align 8
  %20 = load i8*, i8** %8, align 8
  %21 = call i32 @strlen(i8* %20)
  %22 = mul nsw i32 2, %21
  store i32 %22, i32* %13, align 4
  %23 = load i8*, i8** %9, align 8
  %24 = call i32 @strlen(i8* %23)
  %25 = mul nsw i32 2, %24
  store i32 %25, i32* %14, align 4
  %26 = load i8*, i8** %10, align 8
  %27 = call i32 @strlen(i8* %26)
  %28 = mul nsw i32 2, %27
  store i32 %28, i32* %15, align 4
  %29 = load i8*, i8** %11, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = mul nsw i32 2, %30
  store i32 %31, i32* %16, align 4
  %32 = load i8*, i8** %12, align 8
  %33 = call i32 @strlen(i8* %32)
  %34 = mul nsw i32 2, %33
  store i32 %34, i32* %17, align 4
  %35 = load i64, i64* @encryption, align 8
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %6
  %38 = load i32, i32* @SEC_LOGON_INFO, align 4
  %39 = load i32, i32* @SEC_ENCRYPT, align 4
  %40 = or i32 %38, %39
  br label %43

41:                                               ; preds = %6
  %42 = load i32, i32* @SEC_LOGON_INFO, align 4
  br label %43

43:                                               ; preds = %41, %37
  %44 = phi i32 [ %40, %37 ], [ %42, %41 ]
  store i32 %44, i32* %18, align 4
  %45 = load i32, i32* %18, align 4
  %46 = load i32, i32* %13, align 4
  %47 = add nsw i32 18, %46
  %48 = load i32, i32* %14, align 4
  %49 = add nsw i32 %47, %48
  %50 = load i32, i32* %15, align 4
  %51 = add nsw i32 %49, %50
  %52 = load i32, i32* %16, align 4
  %53 = add nsw i32 %51, %52
  %54 = load i32, i32* %17, align 4
  %55 = add nsw i32 %53, %54
  %56 = add nsw i32 %55, 10
  %57 = call i32 @sec_init(i32 %45, i32 %56)
  store i32 %57, i32* %19, align 4
  %58 = load i32, i32* %19, align 4
  %59 = call i32 @out_uint32(i32 %58, i32 0)
  %60 = load i32, i32* %19, align 4
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @out_uint32_le(i32 %60, i32 %61)
  %63 = load i32, i32* %19, align 4
  %64 = load i32, i32* %13, align 4
  %65 = call i32 @out_uint16_le(i32 %63, i32 %64)
  %66 = load i32, i32* %19, align 4
  %67 = load i32, i32* %14, align 4
  %68 = call i32 @out_uint16_le(i32 %66, i32 %67)
  %69 = load i32, i32* %19, align 4
  %70 = load i32, i32* %15, align 4
  %71 = call i32 @out_uint16_le(i32 %69, i32 %70)
  %72 = load i32, i32* %19, align 4
  %73 = load i32, i32* %16, align 4
  %74 = call i32 @out_uint16_le(i32 %72, i32 %73)
  %75 = load i32, i32* %19, align 4
  %76 = load i32, i32* %17, align 4
  %77 = call i32 @out_uint16_le(i32 %75, i32 %76)
  %78 = load i32, i32* %19, align 4
  %79 = load i8*, i8** %8, align 8
  %80 = load i32, i32* %13, align 4
  %81 = call i32 @rdp_out_unistr(i32 %78, i8* %79, i32 %80)
  %82 = load i32, i32* %19, align 4
  %83 = load i8*, i8** %9, align 8
  %84 = load i32, i32* %14, align 4
  %85 = call i32 @rdp_out_unistr(i32 %82, i8* %83, i32 %84)
  %86 = load i32, i32* %19, align 4
  %87 = load i8*, i8** %10, align 8
  %88 = load i32, i32* %15, align 4
  %89 = call i32 @rdp_out_unistr(i32 %86, i8* %87, i32 %88)
  %90 = load i32, i32* %19, align 4
  %91 = load i8*, i8** %11, align 8
  %92 = load i32, i32* %16, align 4
  %93 = call i32 @rdp_out_unistr(i32 %90, i8* %91, i32 %92)
  %94 = load i32, i32* %19, align 4
  %95 = load i8*, i8** %12, align 8
  %96 = load i32, i32* %17, align 4
  %97 = call i32 @rdp_out_unistr(i32 %94, i8* %95, i32 %96)
  %98 = load i32, i32* %19, align 4
  %99 = call i32 @s_mark_end(i32 %98)
  %100 = load i32, i32* %19, align 4
  %101 = load i32, i32* %18, align 4
  %102 = call i32 @sec_send(i32 %100, i32 %101)
  ret void
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sec_init(i32, i32) #1

declare dso_local i32 @out_uint32(i32, i32) #1

declare dso_local i32 @out_uint32_le(i32, i32) #1

declare dso_local i32 @out_uint16_le(i32, i32) #1

declare dso_local i32 @rdp_out_unistr(i32, i8*, i32) #1

declare dso_local i32 @s_mark_end(i32) #1

declare dso_local i32 @sec_send(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
