; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43199.c_unmap_and_read_thread.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_43199.c_unmap_and_read_thread.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_args = type { i64, i64, i32, i32 }

@TRIES_PER_PAGE = common dso_local global i32 0, align 4
@MAP_SIZE = common dso_local global i32 0, align 4
@MADV_DONTNEED = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @unmap_and_read_thread(%struct.thread_args* %0) #0 {
  %2 = alloca %struct.thread_args*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  store %struct.thread_args* %0, %struct.thread_args** %2, align 8
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %50, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* @TRIES_PER_PAGE, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %11 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %10, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  %14 = xor i1 %13, true
  br label %15

15:                                               ; preds = %9, %5
  %16 = phi i1 [ false, %5 ], [ %14, %9 ]
  br i1 %16, label %17, label %53

17:                                               ; preds = %15
  %18 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %19 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = load i32, i32* @MAP_SIZE, align 4
  %22 = load i32, i32* @MADV_DONTNEED, align 4
  %23 = call i32 @madvise(i64 %20, i32 %21, i32 %22)
  %24 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %25 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %24, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %28 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = add nsw i64 %26, %29
  %31 = call i32 @memcpy(i8* %3, i64 %30, i32 1)
  %32 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %33 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %32, i32 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = call i32 @read(i32 %34, i8* %3, i32 1)
  %36 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %37 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %36, i32 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %40 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %39, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = load %struct.thread_args*, %struct.thread_args** %2, align 8
  %43 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %42, i32 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = add nsw i64 %41, %44
  %46 = trunc i64 %45 to i32
  %47 = load i32, i32* @SEEK_SET, align 4
  %48 = call i32 @lseek(i32 %38, i32 %46, i32 %47)
  %49 = call i32 @usleep(i32 10)
  br label %50

50:                                               ; preds = %17
  %51 = load i32, i32* %4, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %4, align 4
  br label %5

53:                                               ; preds = %15
  ret i8* null
}

declare dso_local i32 @madvise(i64, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i64, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @lseek(i32, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
