; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_225.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_225.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@__const.main.code = private unnamed_addr constant [56 x i8] c"\EB)^)\C9\89\F3\89^\08\B1\07\80\03 C\E0\FA)\C0\88F\07\89F\0C\B0\0B\87\F3\8DK\08\8DS\0C\CD\80)\C0@\CD\80\E8\D2\FF\FF\FF\0FBIN\0FSH\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"Using ret %#010x\0A\00", align 1
@O_CREAT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"buf\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca [56 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @LEN, align 4
  %13 = add nsw i32 %12, 12
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %6, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  store i32 -1073743232, i32* %8, align 4
  %17 = bitcast [56 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([56 x i8], [56 x i8]* @__const.main.code, i32 0, i32 0), i64 56, i1 false)
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @atoi(i8* %23)
  %25 = load i32, i32* %8, align 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, %24
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* @stderr, align 4
  %30 = load i32, i32* %8, align 4
  %31 = call i32 @fprintf(i32 %29, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 %30)
  br label %32

32:                                               ; preds = %20, %2
  %33 = load i32, i32* @LEN, align 4
  %34 = call i32 @memset(i8* %16, i8 signext -112, i32 %33)
  %35 = load i32, i32* @LEN, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %16, i64 %36
  %38 = getelementptr inbounds [56 x i8], [56 x i8]* %11, i64 0, i64 0
  %39 = call i32 @strlen(i8* %38)
  %40 = sext i32 %39 to i64
  %41 = sub i64 0, %40
  %42 = getelementptr inbounds i8, i8* %37, i64 %41
  %43 = getelementptr inbounds [56 x i8], [56 x i8]* %11, i64 0, i64 0
  %44 = getelementptr inbounds [56 x i8], [56 x i8]* %11, i64 0, i64 0
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @memcpy(i8* %42, i8* %43, i32 %45)
  %47 = load i32, i32* @LEN, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %16, i64 %48
  %50 = bitcast i8* %49 to i32*
  store i32* %50, i32** %9, align 8
  %51 = load i32, i32* %8, align 4
  %52 = load i32*, i32** %9, align 8
  %53 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %53, i32** %9, align 8
  store i32 %51, i32* %52, align 4
  %54 = load i32, i32* %8, align 4
  %55 = load i32*, i32** %9, align 8
  %56 = getelementptr inbounds i32, i32* %55, i32 1
  store i32* %56, i32** %9, align 8
  store i32 %54, i32* %55, align 4
  %57 = load i32*, i32** %9, align 8
  store i32 0, i32* %57, align 4
  %58 = load i32, i32* @O_CREAT, align 4
  %59 = call i32 @open(i8* %16, i32 %58)
  store i32 %59, i32* %10, align 4
  %60 = load i32, i32* %10, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %32
  %63 = call i32 @perror(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  br label %64

64:                                               ; preds = %62, %32
  %65 = load i32, i32* %10, align 4
  %66 = call i32 @close(i32 %65)
  %67 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %67)
  %68 = load i32, i32* %3, align 4
  ret i32 %68
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i64 @atoi(i8*) #3

declare dso_local i32 @fprintf(i32, i8*, i32) #3

declare dso_local i32 @memset(i8*, i8 signext, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @open(i8*, i32) #3

declare dso_local i32 @perror(i8*) #3

declare dso_local i32 @close(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
