; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_send_bind_request.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_send_bind_request.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"0\82\FF\FF\02\01\01`\82\FF\FF\02\01\02\04\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"bind_dn too long\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_bind_request(i32 %0, i8 signext %1, i8* %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2000 x i8], align 16
  %14 = alloca i8*, align 8
  store i32 %0, i32* %6, align 4
  store i8 %1, i8* %7, align 1
  store i8* %2, i8** %8, align 8
  store i8* %3, i8** %9, align 8
  %15 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %16 = call i32 @memcpy(i8* %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 15)
  %17 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 15
  store i8* %17, i8** %14, align 8
  %18 = load i8*, i8** %8, align 8
  %19 = call i32 @strlen(i8* %18)
  %20 = icmp sgt i32 %19, 255
  br i1 %20, label %21, label %24

21:                                               ; preds = %4
  %22 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %4
  %25 = load i8*, i8** %8, align 8
  %26 = call i32 @strlen(i8* %25)
  %27 = trunc i32 %26 to i8
  %28 = load i8*, i8** %14, align 8
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %29, i8** %14, align 8
  store i8 %27, i8* %28, align 1
  %30 = load i8*, i8** %14, align 8
  %31 = load i8*, i8** %8, align 8
  %32 = call i32 @strcpy(i8* %30, i8* %31)
  %33 = load i8*, i8** %8, align 8
  %34 = call i32 @strlen(i8* %33)
  %35 = load i8*, i8** %14, align 8
  %36 = sext i32 %34 to i64
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  store i8* %37, i8** %14, align 8
  %38 = load i8, i8* %7, align 1
  %39 = load i8*, i8** %14, align 8
  %40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %40, i8** %14, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** %14, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %14, align 8
  store i8 -126, i8* %41, align 1
  %43 = load i8*, i8** %9, align 8
  %44 = call i32 @strlen(i8* %43)
  store i32 %44, i32* %10, align 4
  %45 = load i32, i32* %10, align 4
  %46 = ashr i32 %45, 8
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %14, align 8
  %50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %50, i8** %14, align 8
  store i8 %48, i8* %49, align 1
  %51 = load i32, i32* %10, align 4
  %52 = and i32 %51, 255
  %53 = trunc i32 %52 to i8
  %54 = load i8*, i8** %14, align 8
  %55 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %55, i8** %14, align 8
  store i8 %53, i8* %54, align 1
  %56 = load i8*, i8** %14, align 8
  %57 = load i8*, i8** %9, align 8
  %58 = call i32 @strcpy(i8* %56, i8* %57)
  %59 = load i8*, i8** %8, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = add nsw i32 5, %60
  %62 = add nsw i32 %61, 4
  %63 = load i32, i32* %10, align 4
  %64 = add nsw i32 %62, %63
  store i32 %64, i32* %11, align 4
  %65 = load i32, i32* %11, align 4
  %66 = ashr i32 %65, 8
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 9
  store i8 %68, i8* %69, align 1
  %70 = load i32, i32* %11, align 4
  %71 = and i32 %70, 255
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 10
  store i8 %72, i8* %73, align 2
  %74 = load i32, i32* %11, align 4
  %75 = add nsw i32 7, %74
  store i32 %75, i32* %12, align 4
  %76 = load i32, i32* %12, align 4
  %77 = ashr i32 %76, 8
  %78 = and i32 %77, 255
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 2
  store i8 %79, i8* %80, align 2
  %81 = load i32, i32* %12, align 4
  %82 = and i32 %81, 255
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 3
  store i8 %83, i8* %84, align 1
  %85 = load i32, i32* %6, align 4
  %86 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %87 = load i32, i32* %12, align 4
  %88 = add nsw i32 4, %87
  %89 = call i32 @send(i32 %85, i8* %86, i32 %88, i32 0)
  %90 = load i32, i32* %5, align 4
  ret i32 %90
}

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
