; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_282.c_runshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_282.c_runshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdin = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"uname -a; id;\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"Connection closed\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"Transmission loss\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @runshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = load i32, i32* @stdin, align 4
  %8 = call i32 @fileno(i32 %7)
  %9 = load i32, i32* %2, align 4
  %10 = call i32 @max(i32 %8, i32 %9)
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = call i32 @send(i32 %12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 15, i32 0)
  br label %14

14:                                               ; preds = %79, %1
  %15 = call i32 @FD_ZERO(i32* %6)
  %16 = load i32, i32* @stdin, align 4
  %17 = call i32 @fileno(i32 %16)
  %18 = call i32 @FD_SET(i32 %17, i32* %6)
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @FD_SET(i32 %19, i32* %6)
  %21 = load i32, i32* %4, align 4
  %22 = call i64 @select(i32 %21, i32* %6, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %14
  %25 = load i32, i32* @EXIT_FAILURE, align 4
  %26 = call i32 @exit(i32 %25) #3
  unreachable

27:                                               ; preds = %14
  %28 = load i32, i32* %2, align 4
  %29 = call i64 @FD_ISSET(i32 %28, i32* %6)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %55

31:                                               ; preds = %27
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %33 = call i32 @bzero(i8* %32, i32 1024)
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %36 = call i32 @recv(i32 %34, i8* %35, i32 1024, i32 0)
  store i32 %36, i32* %5, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = load i32, i32* @EXIT_FAILURE, align 4
  %40 = call i32 @exit(i32 %39) #3
  unreachable

41:                                               ; preds = %31
  %42 = load i32, i32* %5, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %41
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 @fprintf(i32 %45, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %47 = load i32, i32* @EXIT_FAILURE, align 4
  %48 = call i32 @exit(i32 %47) #3
  unreachable

49:                                               ; preds = %41
  %50 = load i32, i32* @stdout, align 4
  %51 = call i32 @fileno(i32 %50)
  %52 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %53 = load i32, i32* %5, align 4
  %54 = call i32 @write(i32 %51, i8* %52, i32 %53)
  br label %55

55:                                               ; preds = %49, %27
  %56 = load i32, i32* @stdin, align 4
  %57 = call i32 @fileno(i32 %56)
  %58 = call i64 @FD_ISSET(i32 %57, i32* %6)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %79

60:                                               ; preds = %55
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %62 = call i32 @bzero(i8* %61, i32 1024)
  %63 = load i32, i32* @stdin, align 4
  %64 = call i32 @fileno(i32 %63)
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %66 = call i32 @read(i32 %64, i8* %65, i32 1024)
  store i32 %66, i32* %5, align 4
  %67 = load i32, i32* %2, align 4
  %68 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %69 = load i32, i32* %5, align 4
  %70 = call i32 @send(i32 %67, i8* %68, i32 %69, i32 0)
  %71 = load i32, i32* %5, align 4
  %72 = icmp ne i32 %70, %71
  br i1 %72, label %73, label %78

73:                                               ; preds = %60
  %74 = load i32, i32* @stderr, align 4
  %75 = call i32 @fprintf(i32 %74, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %76 = load i32, i32* @EXIT_FAILURE, align 4
  %77 = call i32 @exit(i32 %76) #3
  unreachable

78:                                               ; preds = %60
  br label %79

79:                                               ; preds = %78, %55
  br label %14
}

declare dso_local i32 @max(i32, i32) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
