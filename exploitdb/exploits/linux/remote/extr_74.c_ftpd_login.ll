; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_74.c_ftpd_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_74.c_ftpd_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GET_R = common dso_local global i32 0, align 4
@SCS = common dso_local global i32 0, align 4
@NRL = common dso_local global i32 0, align 4
@FTP_CONN_SCS = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c" [-] ftpd connection failure.\0A\0A\00", align 1
@FAD = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [31 x i8] c" [*] ftpd connection success.\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c" [+] User id input.\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@FTP_USER_FAD = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c" [-] User id input failure.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c" [+] User password input.\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@FTP_LOGIN_FAD = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [27 x i8] c" [-] FAILED LOGIN on %s.\0A\0A\00", align 1
@FTP_LOGIN_SCS = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [25 x i8] c" [*] User %s logged in.\0A\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c" [-] ftpd handshake failure.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ftpd_login(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %9 = load i32, i32* @GET_R, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %7, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %8, align 8
  %13 = load i32, i32* @SCS, align 4
  %14 = call i32 @sleep(i32 %13)
  %15 = load i32, i32* @NRL, align 4
  %16 = trunc i64 %10 to i32
  %17 = call i32 @memset(i8* %12, i32 %15, i32 %16)
  %18 = load i32, i32* %4, align 4
  %19 = sub i64 %10, 1
  %20 = trunc i64 %19 to i32
  %21 = load i32, i32* @NRL, align 4
  %22 = call i32 @recv(i32 %18, i8* %12, i32 %20, i32 %21)
  %23 = load i32, i32* @FTP_CONN_SCS, align 4
  %24 = call i64 @strstr(i8* %12, i32 %23)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %3
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %27, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @close(i32 %29)
  %31 = load i32, i32* @FAD, align 4
  %32 = call i32 @exit(i32 %31) #4
  unreachable

33:                                               ; preds = %3
  %34 = load i32, i32* @stdout, align 4
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0))
  br label %36

36:                                               ; preds = %33
  %37 = load i32, i32* @stdout, align 4
  %38 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %39 = load i32, i32* @NRL, align 4
  %40 = trunc i64 %10 to i32
  %41 = call i32 @memset(i8* %12, i32 %39, i32 %40)
  %42 = sub i64 %10, 1
  %43 = trunc i64 %42 to i32
  %44 = load i8*, i8** %5, align 8
  %45 = call i32 @snprintf(i8* %12, i32 %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* %44)
  %46 = load i32, i32* %4, align 4
  %47 = call i32 @strlen(i8* %12)
  %48 = load i32, i32* @NRL, align 4
  %49 = call i32 @send(i32 %46, i8* %12, i32 %47, i32 %48)
  %50 = load i32, i32* @SCS, align 4
  %51 = call i32 @sleep(i32 %50)
  %52 = load i32, i32* @NRL, align 4
  %53 = trunc i64 %10 to i32
  %54 = call i32 @memset(i8* %12, i32 %52, i32 %53)
  %55 = load i32, i32* %4, align 4
  %56 = sub i64 %10, 1
  %57 = trunc i64 %56 to i32
  %58 = load i32, i32* @NRL, align 4
  %59 = call i32 @recv(i32 %55, i8* %12, i32 %57, i32 %58)
  %60 = load i32, i32* @FTP_USER_FAD, align 4
  %61 = call i64 @strstr(i8* %12, i32 %60)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %36
  %64 = load i32, i32* @stdout, align 4
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %66 = load i32, i32* %4, align 4
  %67 = call i32 @close(i32 %66)
  %68 = load i32, i32* @FAD, align 4
  %69 = call i32 @exit(i32 %68) #4
  unreachable

70:                                               ; preds = %36
  %71 = load i32, i32* @stdout, align 4
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  br label %73

73:                                               ; preds = %70
  %74 = load i32, i32* @NRL, align 4
  %75 = trunc i64 %10 to i32
  %76 = call i32 @memset(i8* %12, i32 %74, i32 %75)
  %77 = sub i64 %10, 1
  %78 = trunc i64 %77 to i32
  %79 = load i8*, i8** %6, align 8
  %80 = call i32 @snprintf(i8* %12, i32 %78, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* %79)
  %81 = load i32, i32* %4, align 4
  %82 = call i32 @strlen(i8* %12)
  %83 = load i32, i32* @NRL, align 4
  %84 = call i32 @send(i32 %81, i8* %12, i32 %82, i32 %83)
  %85 = load i32, i32* @SCS, align 4
  %86 = call i32 @sleep(i32 %85)
  %87 = load i32, i32* @NRL, align 4
  %88 = trunc i64 %10 to i32
  %89 = call i32 @memset(i8* %12, i32 %87, i32 %88)
  %90 = load i32, i32* %4, align 4
  %91 = sub i64 %10, 1
  %92 = trunc i64 %91 to i32
  %93 = load i32, i32* @NRL, align 4
  %94 = call i32 @recv(i32 %90, i8* %12, i32 %92, i32 %93)
  %95 = load i32, i32* @FTP_LOGIN_FAD, align 4
  %96 = call i64 @strstr(i8* %12, i32 %95)
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %73
  %99 = load i32, i32* @stdout, align 4
  %100 = load i8*, i8** %5, align 8
  %101 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %100)
  %102 = load i32, i32* %4, align 4
  %103 = call i32 @close(i32 %102)
  %104 = load i32, i32* @FAD, align 4
  %105 = call i32 @exit(i32 %104) #4
  unreachable

106:                                              ; preds = %73
  %107 = load i32, i32* @FTP_LOGIN_SCS, align 4
  %108 = call i64 @strstr(i8* %12, i32 %107)
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %114

110:                                              ; preds = %106
  %111 = load i32, i32* @stdout, align 4
  %112 = load i8*, i8** %5, align 8
  %113 = call i32 (i32, i8*, ...) @fprintf(i32 %111, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %112)
  br label %121

114:                                              ; preds = %106
  %115 = load i32, i32* @stdout, align 4
  %116 = call i32 (i32, i8*, ...) @fprintf(i32 %115, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0))
  %117 = load i32, i32* %4, align 4
  %118 = call i32 @close(i32 %117)
  %119 = load i32, i32* @FAD, align 4
  %120 = call i32 @exit(i32 %119) #4
  unreachable

121:                                              ; preds = %110
  br label %122

122:                                              ; preds = %121
  %123 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %123)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i64 @strstr(i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
