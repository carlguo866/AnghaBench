; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19458.c_get_id.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19458.c_get_id.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iphdr = type { i64, i32 }

@ICMP_ECHO = common dso_local global i32 0, align 4
@IP_H = common dso_local global i32 0, align 4
@ICMP_ECHO_H = common dso_local global i32 0, align 4
@packid = common dso_local global i32 0, align 4
@IPPROTO_ICMP = common dso_local global i32 0, align 4
@myaddr = common dso_local global i32 0, align 4
@target = common dso_local global i64 0, align 8
@sock = common dso_local global i32 0, align 4
@icmp_sock = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_id() #0 {
  %1 = alloca [200 x i8], align 16
  %2 = alloca [200 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = load i32, i32* @ICMP_ECHO, align 4
  %6 = call i32 (...) @getpid()
  %7 = getelementptr inbounds [200 x i8], [200 x i8]* %1, i64 0, i64 0
  %8 = load i32, i32* @IP_H, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  %11 = call i32 @build_icmp_echo(i32 %5, i32 0, i32 %6, i32 1, i32 0, i32 0, i8* %10)
  %12 = load i32, i32* @ICMP_ECHO_H, align 4
  %13 = load i32, i32* @packid, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* @packid, align 4
  %15 = load i32, i32* @IPPROTO_ICMP, align 4
  %16 = load i32, i32* @myaddr, align 4
  %17 = load i64, i64* @target, align 8
  %18 = getelementptr inbounds [200 x i8], [200 x i8]* %1, i64 0, i64 0
  %19 = call i32 @build_ip(i32 %12, i32 0, i32 %13, i32 0, i32 64, i32 %15, i32 %16, i64 %17, i32 0, i32 0, i8* %18)
  %20 = getelementptr inbounds [200 x i8], [200 x i8]* %1, i64 0, i64 0
  %21 = load i32, i32* @IPPROTO_ICMP, align 4
  %22 = load i32, i32* @ICMP_ECHO_H, align 4
  %23 = call i32 @do_checksum(i8* %20, i32 %21, i32 %22)
  %24 = load i32, i32* @sock, align 4
  %25 = getelementptr inbounds [200 x i8], [200 x i8]* %1, i64 0, i64 0
  %26 = load i32, i32* @IP_H, align 4
  %27 = load i32, i32* @ICMP_ECHO_H, align 4
  %28 = add nsw i32 %26, %27
  %29 = call i32 @write_ip(i32 %24, i8* %25, i32 %28)
  br label %30

30:                                               ; preds = %38, %0
  %31 = load i32, i32* @icmp_sock, align 4
  %32 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  %33 = call i32 @read(i32 %31, i8* %32, i32 200)
  store i32 %33, i32* %3, align 4
  %34 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  %35 = bitcast i8* %34 to %struct.iphdr*
  %36 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 16
  store i64 %37, i64* %4, align 8
  br label %38

38:                                               ; preds = %30
  %39 = load i64, i64* %4, align 8
  %40 = load i64, i64* @target, align 8
  %41 = icmp ne i64 %39, %40
  br i1 %41, label %30, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  %44 = bitcast i8* %43 to %struct.iphdr*
  %45 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = call i32 @ntohs(i32 %46)
  ret i32 %47
}

declare dso_local i32 @build_icmp_echo(i32, i32, i32, i32, i32, i32, i8*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @build_ip(i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i8*) #1

declare dso_local i32 @do_checksum(i8*, i32, i32) #1

declare dso_local i32 @write_ip(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @ntohs(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
