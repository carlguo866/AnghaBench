; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_usage.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [772 x i8] c" usage: %s [options] -p port\0A\0A options:\0A  -p <number>\09defines the server port.\09\09(REQUIRED, usually 80)\0A  -s <number>\09defines the bindshell port.\09\09(%u)\0A  -g <string>\09defines GOT address.\09\09\09(0x%.8x)\0A  -r <string>\09defines *request address.\09\09(0x%.8x)\0A  -+ <number>\09adds number*4 to the return address.\09(0x%.8x+(?*4))\0A  -t <number>\09imports a target table to use as values.\0A  -l\09\09will list the target values available.\0A\0A to find the -g argument type:\0A  # objdump -R /usr/bin/mpg123 | grep fprintf | grep -v \22vf\22\0A  08012345 R_386_JUMP_SLOT   fprintf\0A\0A to find the -r argument type:\0A  # ltrace /usr/bin/mpg123 -t http://null 2>&1|grep 1024|head -1\0A  malloc(1024)                                      = 0x08054321\0A\0A (offset to shellcode from *request(-r) must be found manually)\0A\0A\00", align 1
@sport = common dso_local global i32 0, align 4
@gotaddr = common dso_local global i32 0, align 4
@requestaddr = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @usage(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i32, i32* @sport, align 4
  %5 = load i32, i32* @gotaddr, align 4
  %6 = load i32, i32* @requestaddr, align 4
  %7 = load i32, i32* @requestaddr, align 4
  %8 = call i32 @printf(i8* getelementptr inbounds ([772 x i8], [772 x i8]* @.str, i64 0, i64 0), i8* %3, i32 %4, i32 %5, i32 %6, i32 %7)
  %9 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, i8*, i32, i32, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
