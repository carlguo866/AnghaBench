; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_580.c_encode_base64.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_580.c_encode_base64.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @encode_base64(i32 %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  %16 = load i8*, i8** %5, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %139

19:                                               ; preds = %2
  %20 = load i32, i32* %4, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %19
  %23 = load i8*, i8** %5, align 8
  %24 = call i32 @strlen(i8* %23)
  store i32 %24, i32* %4, align 4
  br label %25

25:                                               ; preds = %22, %19
  %26 = load i32, i32* %4, align 4
  %27 = sext i32 %26 to i64
  %28 = mul i64 1, %27
  %29 = mul i64 %28, 4
  %30 = udiv i64 %29, 3
  %31 = add i64 %30, 4
  %32 = trunc i64 %31 to i32
  %33 = call i64 @malloc(i32 %32)
  %34 = inttoptr i64 %33 to i8*
  store i8* %34, i8** %7, align 8
  %35 = load i8*, i8** %7, align 8
  store i8* %35, i8** %8, align 8
  store i32 0, i32* %6, align 4
  br label %36

36:                                               ; preds = %134, %25
  %37 = load i32, i32* %6, align 4
  %38 = load i32, i32* %4, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %137

40:                                               ; preds = %36
  store i8 0, i8* %9, align 1
  store i8 0, i8* %10, align 1
  store i8 0, i8* %11, align 1
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %41 = load i8*, i8** %5, align 8
  %42 = load i32, i32* %6, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %41, i64 %43
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %9, align 1
  %46 = load i32, i32* %6, align 4
  %47 = add nsw i32 %46, 1
  %48 = load i32, i32* %4, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %57

50:                                               ; preds = %40
  %51 = load i8*, i8** %5, align 8
  %52 = load i32, i32* %6, align 4
  %53 = add nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %51, i64 %54
  %56 = load i8, i8* %55, align 1
  store i8 %56, i8* %10, align 1
  br label %57

57:                                               ; preds = %50, %40
  %58 = load i32, i32* %6, align 4
  %59 = add nsw i32 %58, 2
  %60 = load i32, i32* %4, align 4
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %62, label %69

62:                                               ; preds = %57
  %63 = load i8*, i8** %5, align 8
  %64 = load i32, i32* %6, align 4
  %65 = add nsw i32 %64, 2
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %63, i64 %66
  %68 = load i8, i8* %67, align 1
  store i8 %68, i8* %11, align 1
  br label %69

69:                                               ; preds = %62, %57
  %70 = load i8, i8* %9, align 1
  %71 = zext i8 %70 to i32
  %72 = ashr i32 %71, 2
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %12, align 1
  %74 = load i8, i8* %9, align 1
  %75 = zext i8 %74 to i32
  %76 = and i32 %75, 3
  %77 = shl i32 %76, 4
  %78 = load i8, i8* %10, align 1
  %79 = zext i8 %78 to i32
  %80 = ashr i32 %79, 4
  %81 = or i32 %77, %80
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %13, align 1
  %83 = load i8, i8* %10, align 1
  %84 = zext i8 %83 to i32
  %85 = and i32 %84, 15
  %86 = shl i32 %85, 2
  %87 = load i8, i8* %11, align 1
  %88 = zext i8 %87 to i32
  %89 = ashr i32 %88, 6
  %90 = or i32 %86, %89
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %14, align 1
  %92 = load i8, i8* %11, align 1
  %93 = zext i8 %92 to i32
  %94 = and i32 %93, 63
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %15, align 1
  %96 = load i8, i8* %12, align 1
  %97 = call i8* @encode(i8 zeroext %96)
  %98 = ptrtoint i8* %97 to i8
  %99 = load i8*, i8** %8, align 8
  %100 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %100, i8** %8, align 8
  store i8 %98, i8* %99, align 1
  %101 = load i8, i8* %13, align 1
  %102 = call i8* @encode(i8 zeroext %101)
  %103 = ptrtoint i8* %102 to i8
  %104 = load i8*, i8** %8, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %8, align 8
  store i8 %103, i8* %104, align 1
  %106 = load i32, i32* %6, align 4
  %107 = add nsw i32 %106, 1
  %108 = load i32, i32* %4, align 4
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %69
  %111 = load i8, i8* %14, align 1
  %112 = call i8* @encode(i8 zeroext %111)
  %113 = ptrtoint i8* %112 to i8
  %114 = load i8*, i8** %8, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %8, align 8
  store i8 %113, i8* %114, align 1
  br label %119

116:                                              ; preds = %69
  %117 = load i8*, i8** %8, align 8
  %118 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %118, i8** %8, align 8
  store i8 61, i8* %117, align 1
  br label %119

119:                                              ; preds = %116, %110
  %120 = load i32, i32* %6, align 4
  %121 = add nsw i32 %120, 2
  %122 = load i32, i32* %4, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %130

124:                                              ; preds = %119
  %125 = load i8, i8* %15, align 1
  %126 = call i8* @encode(i8 zeroext %125)
  %127 = ptrtoint i8* %126 to i8
  %128 = load i8*, i8** %8, align 8
  %129 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %129, i8** %8, align 8
  store i8 %127, i8* %128, align 1
  br label %133

130:                                              ; preds = %119
  %131 = load i8*, i8** %8, align 8
  %132 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %132, i8** %8, align 8
  store i8 61, i8* %131, align 1
  br label %133

133:                                              ; preds = %130, %124
  br label %134

134:                                              ; preds = %133
  %135 = load i32, i32* %6, align 4
  %136 = add nsw i32 %135, 3
  store i32 %136, i32* %6, align 4
  br label %36

137:                                              ; preds = %36
  %138 = load i8*, i8** %7, align 8
  store i8* %138, i8** %3, align 8
  br label %139

139:                                              ; preds = %137, %18
  %140 = load i8*, i8** %3, align 8
  ret i8* %140
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i8* @encode(i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
