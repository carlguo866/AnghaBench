; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_mkfmtstr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_mkfmtstr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target = type { i32, i64, i64, i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"mkfmtstr(): small buffer\0A\00", align 1
@DUMMY = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"%%08x\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"%%%du%%n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mkfmtstr(%struct.target* %0, i32 %1, i8* %2, i64 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.target*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store %struct.target* %0, %struct.target** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i64 %3, i64* %9, align 8
  %16 = load i64, i64* %9, align 8
  %17 = icmp ult i64 %16, 50
  br i1 %17, label %18, label %21

18:                                               ; preds = %4
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %5, align 4
  br label %160

21:                                               ; preds = %4
  %22 = load i8*, i8** %8, align 8
  %23 = load %struct.target*, %struct.target** %6, align 8
  %24 = getelementptr inbounds %struct.target, %struct.target* %23, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = srem i32 %25, 4
  %27 = call i32 @memset(i8* %22, i8 signext 80, i32 %26)
  %28 = load %struct.target*, %struct.target** %6, align 8
  %29 = getelementptr inbounds %struct.target, %struct.target* %28, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = srem i32 %30, 4
  %32 = load i8*, i8** %8, align 8
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  store i8* %34, i8** %8, align 8
  %35 = load %struct.target*, %struct.target** %6, align 8
  %36 = getelementptr inbounds %struct.target, %struct.target* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %12, align 8
  %38 = load i64, i64* @DUMMY, align 8
  %39 = load i8*, i8** %8, align 8
  %40 = bitcast i8* %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load %struct.target*, %struct.target** %6, align 8
  %42 = getelementptr inbounds %struct.target, %struct.target* %41, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = load i8*, i8** %8, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 4
  %46 = bitcast i8* %45 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i8*, i8** %8, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 8
  store i8* %48, i8** %8, align 8
  %49 = load i64, i64* @DUMMY, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = bitcast i8* %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = load %struct.target*, %struct.target** %6, align 8
  %53 = getelementptr inbounds %struct.target, %struct.target* %52, i32 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %54, 1
  %56 = load i8*, i8** %8, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 4
  %58 = bitcast i8* %57 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i8*, i8** %8, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 8
  store i8* %60, i8** %8, align 8
  %61 = load i64, i64* @DUMMY, align 8
  %62 = load i8*, i8** %8, align 8
  %63 = bitcast i8* %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load %struct.target*, %struct.target** %6, align 8
  %65 = getelementptr inbounds %struct.target, %struct.target* %64, i32 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = add nsw i64 %66, 2
  %68 = load i8*, i8** %8, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 4
  %70 = bitcast i8* %69 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i8*, i8** %8, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 8
  store i8* %72, i8** %8, align 8
  %73 = load i64, i64* @DUMMY, align 8
  %74 = load i8*, i8** %8, align 8
  %75 = bitcast i8* %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = load %struct.target*, %struct.target** %6, align 8
  %77 = getelementptr inbounds %struct.target, %struct.target* %76, i32 0, i32 3
  %78 = load i64, i64* %77, align 8
  %79 = add nsw i64 %78, 3
  %80 = load i8*, i8** %8, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 4
  %82 = bitcast i8* %81 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i8*, i8** %8, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 8
  store i8* %84, i8** %8, align 8
  %85 = load i64, i64* %9, align 8
  %86 = sub i64 %85, 32
  store i64 %86, i64* %9, align 8
  %87 = load i64, i64* %12, align 8
  %88 = add i64 %87, 32
  store i64 %88, i64* %12, align 8
  %89 = load %struct.target*, %struct.target** %6, align 8
  %90 = getelementptr inbounds %struct.target, %struct.target* %89, i32 0, i32 2
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %11, align 8
  br label %92

92:                                               ; preds = %107, %21
  %93 = load i64, i64* %11, align 8
  %94 = icmp ugt i64 %93, 0
  br i1 %94, label %95, label %110

95:                                               ; preds = %92
  %96 = load i8*, i8** %8, align 8
  %97 = load i64, i64* %9, align 8
  %98 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %96, i64 %97, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %99 = call i64 @strlen(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %100 = load i64, i64* %9, align 8
  %101 = sub i64 %100, %99
  store i64 %101, i64* %9, align 8
  %102 = call i64 @strlen(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %103 = load i8*, i8** %8, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  store i8* %104, i8** %8, align 8
  %105 = load i64, i64* %12, align 8
  %106 = add i64 %105, 8
  store i64 %106, i64* %12, align 8
  br label %107

107:                                              ; preds = %95
  %108 = load i64, i64* %11, align 8
  %109 = sub i64 %108, 4
  store i64 %109, i64* %11, align 8
  br label %92

110:                                              ; preds = %92
  store i32 0, i32* %15, align 4
  br label %111

111:                                              ; preds = %148, %110
  %112 = load i32, i32* %15, align 4
  %113 = icmp slt i32 %112, 4
  br i1 %113, label %114, label %151

114:                                              ; preds = %111
  %115 = load i32, i32* %15, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %7, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = add nsw i32 %118, 256
  store i32 %119, i32* %14, align 4
  %120 = load i64, i64* %12, align 8
  %121 = urem i64 %120, 256
  store i64 %121, i64* %12, align 8
  %122 = load i32, i32* %14, align 4
  %123 = sext i32 %122 to i64
  %124 = load i64, i64* %12, align 8
  %125 = sub i64 %123, %124
  %126 = urem i64 %125, 256
  store i64 %126, i64* %10, align 8
  %127 = load i64, i64* %10, align 8
  %128 = icmp ult i64 %127, 10
  br i1 %128, label %129, label %132

129:                                              ; preds = %114
  %130 = load i64, i64* %10, align 8
  %131 = add i64 %130, 256
  store i64 %131, i64* %10, align 8
  br label %132

132:                                              ; preds = %129, %114
  %133 = load i8*, i8** %8, align 8
  %134 = load i64, i64* %9, align 8
  %135 = load i64, i64* %10, align 8
  %136 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %133, i64 %134, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i64 %135)
  store i32 %136, i32* %13, align 4
  %137 = load i64, i64* %10, align 8
  %138 = load i64, i64* %12, align 8
  %139 = add i64 %138, %137
  store i64 %139, i64* %12, align 8
  %140 = load i32, i32* %13, align 4
  %141 = sext i32 %140 to i64
  %142 = load i64, i64* %9, align 8
  %143 = sub i64 %142, %141
  store i64 %143, i64* %9, align 8
  %144 = load i32, i32* %13, align 4
  %145 = load i8*, i8** %8, align 8
  %146 = sext i32 %144 to i64
  %147 = getelementptr inbounds i8, i8* %145, i64 %146
  store i8* %147, i8** %8, align 8
  br label %148

148:                                              ; preds = %132
  %149 = load i32, i32* %15, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %15, align 4
  br label %111

151:                                              ; preds = %111
  %152 = load i64, i64* %9, align 8
  %153 = icmp uge i64 %152, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %151
  %155 = load i64, i64* %12, align 8
  br label %157

156:                                              ; preds = %151
  br label %157

157:                                              ; preds = %156, %154
  %158 = phi i64 [ %155, %154 ], [ -1, %156 ]
  %159 = trunc i64 %158 to i32
  store i32 %159, i32* %5, align 4
  br label %160

160:                                              ; preds = %157, %18
  %161 = load i32, i32* %5, align 4
  ret i32 %161
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #1

declare dso_local i64 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
