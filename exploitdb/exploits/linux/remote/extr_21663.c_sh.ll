; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21663.c_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21663.c_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"uname -a; pwd; id;\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"EOF.\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"could not spawn shell\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %9 = call i32 @strcpy(i8* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %2, align 4
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %13 = call i32 @strlen(i8* %12)
  %14 = call i32 @write(i32 %10, i8* %11, i32 %13)
  br label %15

15:                                               ; preds = %66, %1
  %16 = load i32, i32* @stdin, align 4
  %17 = call i32 @fileno(i32 %16)
  %18 = call i32 @FD_SET(i32 %17, i32* %5)
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @FD_SET(i32 %19, i32* %5)
  %21 = load i32, i32* @stdin, align 4
  %22 = call i32 @fileno(i32 %21)
  %23 = load i32, i32* %2, align 4
  %24 = call i32 @max(i32 %22, i32 %23)
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %6, align 4
  %27 = call i32 @select(i32 %26, i32* %5, i32* null, i32* null, i32* null)
  %28 = load i32, i32* @stdin, align 4
  %29 = call i32 @fileno(i32 %28)
  %30 = call i64 @FD_ISSET(i32 %29, i32* %5)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %43

32:                                               ; preds = %15
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %34 = call i32 @bzero(i8* %33, i32 1024)
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %36 = load i32, i32* @stdin, align 4
  %37 = call i32 @fgets(i8* %35, i32 1022, i32 %36)
  %38 = load i32, i32* %2, align 4
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %41 = call i32 @strlen(i8* %40)
  %42 = call i32 @write(i32 %38, i8* %39, i32 %41)
  br label %43

43:                                               ; preds = %32, %15
  %44 = load i32, i32* %2, align 4
  %45 = call i64 @FD_ISSET(i32 %44, i32* %5)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %66

47:                                               ; preds = %43
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %49 = call i32 @bzero(i8* %48, i32 1024)
  %50 = load i32, i32* %2, align 4
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %52 = call i32 @read(i32 %50, i8* %51, i32 1024)
  store i32 %52, i32* %7, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %47
  %55 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %47
  %58 = load i32, i32* %7, align 4
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %57
  %61 = call i32 @fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %57
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %64 = load i32, i32* @stdout, align 4
  %65 = call i32 @fputs(i8* %63, i32 %64)
  br label %66

66:                                               ; preds = %62, %43
  br label %15
}

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @max(i32, i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fail(i8*) #1

declare dso_local i32 @fputs(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
