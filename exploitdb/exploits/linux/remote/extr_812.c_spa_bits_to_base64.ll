; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_spa_bits_to_base64.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_spa_bits_to_base64.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@base64digits = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @spa_bits_to_base64(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  br label %8

8:                                                ; preds = %72, %3
  %9 = load i32, i32* %6, align 4
  %10 = icmp sge i32 %9, 3
  br i1 %10, label %11, label %75

11:                                               ; preds = %8
  %12 = load i8*, i8** @base64digits, align 8
  %13 = load i8*, i8** %5, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 0
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = ashr i32 %16, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %12, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %22, i8** %4, align 8
  store i8 %20, i8* %21, align 1
  %23 = load i8*, i8** @base64digits, align 8
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 0
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl i32 %27, 4
  %29 = and i32 %28, 48
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = ashr i32 %33, 4
  %35 = or i32 %29, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %23, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = load i8*, i8** %4, align 8
  %40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %40, i8** %4, align 8
  store i8 %38, i8* %39, align 1
  %41 = load i8*, i8** @base64digits, align 8
  %42 = load i8*, i8** %5, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 2
  %47 = and i32 %46, 60
  %48 = load i8*, i8** %5, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = ashr i32 %51, 6
  %53 = or i32 %47, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %41, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = load i8*, i8** %4, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %4, align 8
  store i8 %56, i8* %57, align 1
  %59 = load i8*, i8** @base64digits, align 8
  %60 = load i8*, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = and i32 %63, 63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %59, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = load i8*, i8** %4, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %69, i8** %4, align 8
  store i8 %67, i8* %68, align 1
  %70 = load i8*, i8** %5, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 3
  store i8* %71, i8** %5, align 8
  br label %72

72:                                               ; preds = %11
  %73 = load i32, i32* %6, align 4
  %74 = sub nsw i32 %73, 3
  store i32 %74, i32* %6, align 4
  br label %8

75:                                               ; preds = %8
  %76 = load i32, i32* %6, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %139

78:                                               ; preds = %75
  %79 = load i8*, i8** @base64digits, align 8
  %80 = load i8*, i8** %5, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 0
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = ashr i32 %83, 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %79, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = load i8*, i8** %4, align 8
  %89 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %89, i8** %4, align 8
  store i8 %87, i8* %88, align 1
  %90 = load i8*, i8** %5, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 0
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = shl i32 %93, 4
  %95 = and i32 %94, 48
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %7, align 1
  %97 = load i32, i32* %6, align 4
  %98 = icmp sgt i32 %97, 1
  br i1 %98, label %99, label %109

99:                                               ; preds = %78
  %100 = load i8*, i8** %5, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = ashr i32 %103, 4
  %105 = load i8, i8* %7, align 1
  %106 = zext i8 %105 to i32
  %107 = or i32 %106, %104
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %7, align 1
  br label %109

109:                                              ; preds = %99, %78
  %110 = load i8*, i8** @base64digits, align 8
  %111 = load i8, i8* %7, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds i8, i8* %110, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %4, align 8
  %116 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %116, i8** %4, align 8
  store i8 %114, i8* %115, align 1
  %117 = load i32, i32* %6, align 4
  %118 = icmp slt i32 %117, 2
  br i1 %118, label %119, label %120

119:                                              ; preds = %109
  br label %132

120:                                              ; preds = %109
  %121 = load i8*, i8** @base64digits, align 8
  %122 = load i8*, i8** %5, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = shl i32 %125, 2
  %127 = and i32 %126, 60
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %121, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = sext i8 %130 to i32
  br label %132

132:                                              ; preds = %120, %119
  %133 = phi i32 [ 61, %119 ], [ %131, %120 ]
  %134 = trunc i32 %133 to i8
  %135 = load i8*, i8** %4, align 8
  %136 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %136, i8** %4, align 8
  store i8 %134, i8* %135, align 1
  %137 = load i8*, i8** %4, align 8
  %138 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %138, i8** %4, align 8
  store i8 61, i8* %137, align 1
  br label %139

139:                                              ; preds = %132, %75
  %140 = load i8*, i8** %4, align 8
  store i8 0, i8* %140, align 1
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
