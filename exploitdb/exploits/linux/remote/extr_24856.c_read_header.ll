; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_read_header.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_read_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@out_stream = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"read_header(): read() failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"can't read the full header, read %d bytes\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Payload descr : 0x%.2hhx\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"TTL           : 0x%.2hhx\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Hops          : 0x%.2hhx\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"Payload len(b): 0x%.2hhx\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"%.2hhx\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"%.2hhx\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"Payload len   : %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @read_header(i32 %0, i8* %1, i32* %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca [23 x i8], align 16
  store i32 %0, i32* %6, align 4
  store i8* %1, i8** %7, align 8
  store i32* %2, i32** %8, align 8
  store i8* %3, i8** %9, align 8
  %12 = load i32, i32* %6, align 4
  %13 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 0
  %14 = call i32 @read(i32 %12, i8* %13, i32 23)
  store i32 %14, i32* %10, align 4
  %15 = load i32, i32* %10, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %20

17:                                               ; preds = %4
  %18 = load i32, i32* @out_stream, align 4
  %19 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  br label %20

20:                                               ; preds = %17, %4
  %21 = load i32, i32* %10, align 4
  %22 = icmp slt i32 %21, 23
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  %24 = load i32, i32* @out_stream, align 4
  %25 = load i32, i32* %10, align 4
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 %25)
  store i32 0, i32* %5, align 4
  br label %77

27:                                               ; preds = %20
  %28 = load i8*, i8** %9, align 8
  %29 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 0
  %30 = call i32 @memcpy(i8* %28, i8* %29, i32 16)
  %31 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 16
  %32 = load i8, i8* %31, align 16
  %33 = load i8*, i8** %7, align 8
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 19
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = load i32*, i32** %8, align 8
  store i32 %36, i32* %37, align 4
  %38 = load i32, i32* @out_stream, align 4
  %39 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 16
  %40 = load i8, i8* %39, align 16
  %41 = sext i8 %40 to i32
  %42 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i32 %41)
  %43 = load i32, i32* @out_stream, align 4
  %44 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 17
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i32 %46)
  %48 = load i32, i32* @out_stream, align 4
  %49 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 18
  %50 = load i8, i8* %49, align 2
  %51 = sext i8 %50 to i32
  %52 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i32 %51)
  %53 = load i32, i32* @out_stream, align 4
  %54 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 19
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* @out_stream, align 4
  %59 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 20
  %60 = load i8, i8* %59, align 4
  %61 = sext i8 %60 to i32
  %62 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i32 %61)
  %63 = load i32, i32* @out_stream, align 4
  %64 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 21
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = call i32 (i32, i8*, ...) @fprintf(i32 %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i32 %66)
  %68 = load i32, i32* @out_stream, align 4
  %69 = getelementptr inbounds [23 x i8], [23 x i8]* %11, i64 0, i64 22
  %70 = load i8, i8* %69, align 2
  %71 = sext i8 %70 to i32
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %71)
  %73 = load i32, i32* @out_stream, align 4
  %74 = load i32*, i32** %8, align 8
  %75 = load i32, i32* %74, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i32 %75)
  store i32 1, i32* %5, align 4
  br label %77

77:                                               ; preds = %27, %23
  %78 = load i32, i32* %5, align 4
  ret i32 %78
}

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
