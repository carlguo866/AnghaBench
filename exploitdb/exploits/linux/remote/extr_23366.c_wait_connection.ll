; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_wait_connection.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_wait_connection.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"[+] Setting up a fake IRC server...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"[-] %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"[+] Awaiting connection on port %i\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"[!] Connection established with %s\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"[%s] USER request received.\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"NICK \00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"[%s] NICK request received.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @wait_connection(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.sockaddr_in, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [512 x i8], align 16
  %12 = alloca [512 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i32 0, i32 1024)
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @AF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i32, i32* @errno, align 4
  %27 = call i8* @strerror(i32 %26)
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 0) #3
  unreachable

30:                                               ; preds = %2
  %31 = load i32, i32* %3, align 4
  %32 = call i32 @htons(i32 %31)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  store i64 0, i64* %35, align 8
  %36 = load i32, i32* @AF_INET, align 4
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 1
  store i32 %36, i32* %37, align 8
  %38 = load i32, i32* %7, align 4
  %39 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %40 = call i32 @bind(i32 %38, %struct.sockaddr* %39, i32 16)
  %41 = load i32, i32* %7, align 4
  %42 = call i32 @listen(i32 %41, i32 1)
  store i32 16, i32* %6, align 4
  %43 = load i32, i32* @stdout, align 4
  %44 = load i32, i32* %3, align 4
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 %44)
  br label %46

46:                                               ; preds = %30, %121
  %47 = load i32, i32* %7, align 4
  %48 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %49 = call i32 @accept(i32 %47, %struct.sockaddr* %48, i32* %6)
  store i32 %49, i32* %8, align 4
  %50 = load i32, i32* @stdout, align 4
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = call i8* @inet_ntoa(i64 %53)
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0), i8* %54)
  %56 = call i32 (...) @fork()
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %121, label %58

58:                                               ; preds = %46
  %59 = load i32, i32* %7, align 4
  %60 = call i32 @close(i32 %59)
  br label %61

61:                                               ; preds = %58, %111
  %62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %63 = call i32 @memset(i8* %62, i32 0, i32 1024)
  %64 = load i32, i32* %8, align 4
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %66 = call i32 @read(i32 %64, i8* %65, i32 1024)
  store i32 %66, i32* %9, align 4
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %68 = call i8* @strstr(i8* %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  store i8* %68, i8** %13, align 8
  %69 = icmp ne i8* %68, null
  br i1 %69, label %70, label %84

70:                                               ; preds = %61
  %71 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %72 = call i32 @memset(i8* %71, i32 0, i32 512)
  %73 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %74 = load i8*, i8** %13, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 5
  %76 = call i32 @strncpy(i8* %73, i8* %75, i32 511)
  %77 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 511
  store i8 0, i8* %77, align 1
  %78 = load i32, i32* @stdout, align 4
  %79 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %80 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = call i8* @inet_ntoa(i64 %81)
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %78, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8* %82)
  br label %84

84:                                               ; preds = %70, %61
  %85 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %86 = call i8* @strstr(i8* %85, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  store i8* %86, i8** %13, align 8
  %87 = icmp ne i8* %86, null
  br i1 %87, label %88, label %102

88:                                               ; preds = %84
  %89 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %90 = call i32 @memset(i8* %89, i32 0, i32 512)
  %91 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %92 = load i8*, i8** %13, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 5
  %94 = call i32 @strncpy(i8* %91, i8* %93, i32 511)
  %95 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 511
  store i8 0, i8* %95, align 1
  %96 = load i32, i32* @stdout, align 4
  %97 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %98 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %97, i32 0, i32 0
  %99 = load i64, i64* %98, align 8
  %100 = call i8* @inet_ntoa(i64 %99)
  %101 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %100)
  br label %102

102:                                              ; preds = %88, %84
  %103 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %104 = call i64 @strlen(i8* %103)
  %105 = icmp sgt i64 %104, 0
  br i1 %105, label %106, label %111

106:                                              ; preds = %102
  %107 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %108 = call i64 @strlen(i8* %107)
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %106
  br label %112

111:                                              ; preds = %106, %102
  br label %61

112:                                              ; preds = %110
  %113 = load i32, i32* %8, align 4
  %114 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %115 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %114, i32 0, i32 0
  %116 = load i64, i64* %115, align 8
  %117 = call i8* @inet_ntoa(i64 %116)
  %118 = call i32 @send_mes(i32 %113, i8* %117)
  %119 = load i64, i64* %14, align 8
  %120 = call i32 @back_connection(i64 %119)
  br label %121

121:                                              ; preds = %112, %46
  %122 = load i32, i32* %8, align 4
  %123 = call i32 @close(i32 %122)
  br label %46
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i64) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @send_mes(i32, i8*) #1

declare dso_local i32 @back_connection(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
