; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_base64.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_base64.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@base64tab = common dso_local global i32* null, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i8*, i64)* @base64 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @base64(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %16

16:                                               ; preds = %134, %3
  %17 = load i32, i32* %10, align 4
  %18 = sext i32 %17 to i64
  %19 = load i64, i64* %6, align 8
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %137

21:                                               ; preds = %16
  %22 = load i8*, i8** %4, align 8
  %23 = load i32, i32* %10, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  store i32 %27, i32* %7, align 4
  %28 = load i32, i32* %10, align 4
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = load i64, i64* %6, align 8
  %32 = icmp ult i64 %30, %31
  br i1 %32, label %33, label %41

33:                                               ; preds = %21
  %34 = load i8*, i8** %4, align 8
  %35 = load i32, i32* %10, align 4
  %36 = add nsw i32 %35, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  br label %42

41:                                               ; preds = %21
  br label %42

42:                                               ; preds = %41, %33
  %43 = phi i32 [ %40, %33 ], [ 0, %41 ]
  store i32 %43, i32* %8, align 4
  %44 = load i32, i32* %10, align 4
  %45 = add nsw i32 %44, 2
  %46 = sext i32 %45 to i64
  %47 = load i64, i64* %6, align 8
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %49, label %57

49:                                               ; preds = %42
  %50 = load i8*, i8** %4, align 8
  %51 = load i32, i32* %10, align 4
  %52 = add nsw i32 %51, 2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  br label %58

57:                                               ; preds = %42
  br label %58

58:                                               ; preds = %57, %49
  %59 = phi i32 [ %56, %49 ], [ 0, %57 ]
  store i32 %59, i32* %9, align 4
  %60 = load i32*, i32** @base64tab, align 8
  %61 = load i32, i32* %7, align 4
  %62 = ashr i32 %61, 2
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %60, i64 %63
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %12, align 4
  %66 = load i32*, i32** @base64tab, align 8
  %67 = load i32, i32* %7, align 4
  %68 = and i32 %67, 3
  %69 = shl i32 %68, 4
  %70 = load i32, i32* %8, align 4
  %71 = ashr i32 %70, 4
  %72 = or i32 %69, %71
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %66, i64 %73
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %13, align 4
  %76 = load i32*, i32** @base64tab, align 8
  %77 = load i32, i32* %8, align 4
  %78 = and i32 %77, 15
  %79 = shl i32 %78, 2
  %80 = load i32, i32* %9, align 4
  %81 = ashr i32 %80, 6
  %82 = or i32 %79, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %76, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %14, align 4
  %86 = load i32*, i32** @base64tab, align 8
  %87 = load i32, i32* %9, align 4
  %88 = and i32 %87, 63
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %86, i64 %89
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %15, align 4
  %92 = load i32, i32* %10, align 4
  %93 = add nsw i32 %92, 1
  %94 = sext i32 %93 to i64
  %95 = load i64, i64* %6, align 8
  %96 = icmp uge i64 %94, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %58
  store i32 61, i32* %14, align 4
  br label %98

98:                                               ; preds = %97, %58
  %99 = load i32, i32* %10, align 4
  %100 = add nsw i32 %99, 2
  %101 = sext i32 %100 to i64
  %102 = load i64, i64* %6, align 8
  %103 = icmp uge i64 %101, %102
  br i1 %103, label %104, label %105

104:                                              ; preds = %98
  store i32 61, i32* %15, align 4
  br label %105

105:                                              ; preds = %104, %98
  %106 = load i32, i32* %12, align 4
  %107 = trunc i32 %106 to i8
  %108 = load i8*, i8** %5, align 8
  %109 = load i32, i32* %11, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %11, align 4
  %111 = sext i32 %109 to i64
  %112 = getelementptr inbounds i8, i8* %108, i64 %111
  store i8 %107, i8* %112, align 1
  %113 = load i32, i32* %13, align 4
  %114 = trunc i32 %113 to i8
  %115 = load i8*, i8** %5, align 8
  %116 = load i32, i32* %11, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %11, align 4
  %118 = sext i32 %116 to i64
  %119 = getelementptr inbounds i8, i8* %115, i64 %118
  store i8 %114, i8* %119, align 1
  %120 = load i32, i32* %14, align 4
  %121 = trunc i32 %120 to i8
  %122 = load i8*, i8** %5, align 8
  %123 = load i32, i32* %11, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %11, align 4
  %125 = sext i32 %123 to i64
  %126 = getelementptr inbounds i8, i8* %122, i64 %125
  store i8 %121, i8* %126, align 1
  %127 = load i32, i32* %15, align 4
  %128 = trunc i32 %127 to i8
  %129 = load i8*, i8** %5, align 8
  %130 = load i32, i32* %11, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %11, align 4
  %132 = sext i32 %130 to i64
  %133 = getelementptr inbounds i8, i8* %129, i64 %132
  store i8 %128, i8* %133, align 1
  br label %134

134:                                              ; preds = %105
  %135 = load i32, i32* %10, align 4
  %136 = add nsw i32 %135, 3
  store i32 %136, i32* %10, align 4
  br label %16

137:                                              ; preds = %16
  %138 = load i8*, i8** %5, align 8
  %139 = load i32, i32* %11, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %11, align 4
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds i8, i8* %138, i64 %141
  store i8 10, i8* %142, align 1
  %143 = load i8*, i8** %5, align 8
  %144 = load i32, i32* %11, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %11, align 4
  %146 = sext i32 %144 to i64
  %147 = getelementptr inbounds i8, i8* %143, i64 %146
  store i8 0, i8* %147, align 1
  %148 = load i8*, i8** %5, align 8
  %149 = call i32 @strlen(i8* %148)
  ret i32 %149
}

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
