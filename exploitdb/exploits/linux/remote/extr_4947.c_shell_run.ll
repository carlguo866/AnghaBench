; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4947.c_shell_run.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4947.c_shell_run.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"id; uname -a; uptime\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @shell_run to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @shell_run(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %7 = load i32, i32* %2, align 4
  %8 = load i8*, i8** %6, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = call i32 @strlen(i8* %9)
  %11 = call i32 @write(i32 %7, i8* %8, i32 %10)
  br label %12

12:                                               ; preds = %1, %57
  %13 = call i32 @FD_ZERO(i32* %4)
  %14 = load i32, i32* %2, align 4
  %15 = call i32 @FD_SET(i32 %14, i32* %4)
  %16 = load i32, i32* @STDIN_FILENO, align 4
  %17 = call i32 @FD_SET(i32 %16, i32* %4)
  %18 = load i32, i32* %2, align 4
  %19 = add nsw i32 %18, 1
  %20 = call i32 @select(i32 %19, i32* %4, i32* null, i32* null, i32* null)
  %21 = load i32, i32* %2, align 4
  %22 = call i64 @FD_ISSET(i32 %21, i32* %4)
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %12
  %25 = load i32, i32* %2, align 4
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %27 = call i32 @read(i32 %25, i8* %26, i32 1023)
  store i32 %27, i32* %3, align 4
  %28 = load i32, i32* %3, align 4
  %29 = icmp sle i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  ret void

32:                                               ; preds = %24
  %33 = load i32, i32* %3, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %34
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %37 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* %36)
  br label %38

38:                                               ; preds = %32, %12
  %39 = load i32, i32* @STDIN_FILENO, align 4
  %40 = call i64 @FD_ISSET(i32 %39, i32* %4)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %57

42:                                               ; preds = %38
  %43 = load i32, i32* @STDIN_FILENO, align 4
  %44 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %45 = call i32 @read(i32 %43, i8* %44, i32 1023)
  store i32 %45, i32* %3, align 4
  %46 = load i32, i32* %3, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %42
  %49 = load i32, i32* %3, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %50
  store i8 0, i8* %51, align 1
  %52 = load i32, i32* %2, align 4
  %53 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %54 = load i32, i32* %3, align 4
  %55 = call i32 @write(i32 %52, i8* %53, i32 %54)
  br label %56

56:                                               ; preds = %48, %42
  br label %57

57:                                               ; preds = %56, %38
  br label %12
}

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
