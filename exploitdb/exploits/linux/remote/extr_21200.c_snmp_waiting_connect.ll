; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_snmp_waiting_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_snmp_waiting_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.pollfd = type { i32, i32, i32, i32, %struct.TYPE_2__, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"socket(): %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@use_bind_addr = common dso_local global i64 0, align 8
@bind_addr = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@bindport = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"bind(): %s\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"awaiting connection from client...\0A\00", align 1
@POLLIN = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [12 x i8] c"poll(): %s\0A\00", align 1
@POLLERR = common dso_local global i32 0, align 4
@POLLNVAL = common dso_local global i32 0, align 4
@POLLHUP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [51 x i8] c"no connection from client in 20 seconds. aborting\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"accept(): %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"received connection from %s:%i\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @snmp_waiting_connect to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snmp_waiting_connect() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca %struct.pollfd, align 4
  %7 = load i32, i32* @AF_INET, align 4
  %8 = load i32, i32* @SOCK_STREAM, align 4
  %9 = load i32, i32* @IPPROTO_TCP, align 4
  %10 = call i32 @socket(i32 %7, i32 %8, i32 %9)
  store i32 %10, i32* %1, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %0
  %13 = load i32, i32* @errno, align 4
  %14 = call i32 @strerror(i32 %13)
  %15 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %14)
  br label %16

16:                                               ; preds = %12, %0
  %17 = call i32 @memset(%struct.sockaddr_in* %5, i32 0, i32 24)
  %18 = load i32, i32* @AF_INET, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = load i64, i64* @use_bind_addr, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  %23 = load i32, i32* @bind_addr, align 4
  br label %26

24:                                               ; preds = %16
  %25 = load i32, i32* @INADDR_ANY, align 4
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi i32 [ %23, %22 ], [ %25, %24 ]
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 4
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %28, i32 0, i32 0
  store i32 %27, i32* %29, align 4
  %30 = load i32, i32* @bindport, align 4
  %31 = call i32 @htons(i32 %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* %1, align 4
  %34 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %35 = call i64 @bind(i32 %33, %struct.sockaddr* %34, i32 24)
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %26
  %38 = load i32, i32* @errno, align 4
  %39 = call i32 @strerror(i32 %38)
  %40 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %39)
  br label %41

41:                                               ; preds = %37, %26
  %42 = load i32, i32* %1, align 4
  %43 = call i32 @listen(i32 %42, i32 5)
  %44 = load i32, i32* @stderr, align 4
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %46 = bitcast %struct.pollfd* %6 to %struct.sockaddr_in*
  %47 = call i32 @memset(%struct.sockaddr_in* %46, i32 0, i32 24)
  %48 = load i32, i32* %1, align 4
  %49 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %6, i32 0, i32 1
  store i32 %48, i32* %49, align 4
  %50 = load i32, i32* @POLLIN, align 4
  %51 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %6, i32 0, i32 2
  store i32 %50, i32* %51, align 4
  %52 = bitcast %struct.pollfd* %6 to %struct.sockaddr_in*
  %53 = call i32 @poll(%struct.sockaddr_in* %52, i32 1, i32 20000)
  store i32 %53, i32* %2, align 4
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %41
  %56 = load i32, i32* @errno, align 4
  %57 = call i32 @strerror(i32 %56)
  %58 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i32 %57)
  br label %59

59:                                               ; preds = %55, %41
  %60 = load i32, i32* %2, align 4
  %61 = icmp slt i32 %60, 1
  br i1 %61, label %78, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %6, i32 0, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = load i32, i32* @POLLERR, align 4
  %66 = load i32, i32* @POLLNVAL, align 4
  %67 = or i32 %65, %66
  %68 = load i32, i32* @POLLHUP, align 4
  %69 = or i32 %67, %68
  %70 = and i32 %64, %69
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %78, label %72

72:                                               ; preds = %62
  %73 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %6, i32 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* @POLLIN, align 4
  %76 = and i32 %74, %75
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %72, %62, %59
  %79 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0))
  br label %80

80:                                               ; preds = %78, %72
  %81 = call i32 @memset(%struct.sockaddr_in* %5, i32 0, i32 24)
  store i32 24, i32* %4, align 4
  %82 = load i32, i32* %1, align 4
  %83 = call i32 @accept(i32 %82, %struct.sockaddr_in* %5, i32* %4)
  store i32 %83, i32* %3, align 4
  %84 = load i32, i32* %1, align 4
  %85 = call i32 @close(i32 %84)
  %86 = load i32, i32* %3, align 4
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %80
  %89 = load i32, i32* @errno, align 4
  %90 = call i32 @strerror(i32 %89)
  %91 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 %90)
  br label %92

92:                                               ; preds = %88, %80
  %93 = load i32, i32* @stderr, align 4
  %94 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 4
  %95 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %94, i32 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = call i8* @inet_ntoa(i32 %96)
  %98 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = call i32 @htons(i32 %99)
  %101 = call i32 (i32, i8*, ...) @fprintf(i32 %93, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i8* %97, i32 %100)
  %102 = load i32, i32* %3, align 4
  %103 = call i32 @bindshell(i32 %102)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @fatal(i8*, ...) #1

declare dso_local i32 @strerror(i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @poll(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr_in*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @bindshell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
