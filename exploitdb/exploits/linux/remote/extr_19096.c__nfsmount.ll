; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19096.c__nfsmount.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19096.c__nfsmount.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { i32 }
%struct.hostent = type { i8*, i32, i32 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.fhstatus = type { i32 }
%struct.timeval = type { i32, i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"mx: can't get address for %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@MOUNTPROG = common dso_local global i32 0, align 4
@MOUNTVERS = common dso_local global i32 0, align 4
@NFS_PROGRAM = common dso_local global i32 0, align 4
@NFS_VERSION = common dso_local global i32 0, align 4
@RPC_ANYSOCK = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"ok, attacking target %s\0A\00", align 1
@MOUNTPROC_MNT = common dso_local global i32 0, align 4
@xdr_dirpath = common dso_local global i64 0, align 8
@xdr_fhstatus = common dso_local global i64 0, align 8
@RPC_SUCCESS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [22 x i8] c"successful clnt_call\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"mx clntudp_create\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_nfsmount(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.TYPE_5__*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.hostent*, align 8
  %16 = alloca %struct.sockaddr_in, align 4
  %17 = alloca %struct.fhstatus, align 4
  %18 = alloca %struct.timeval, align 8
  %19 = alloca %struct.timeval, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 0, i32* %11, align 4
  %20 = load i8*, i8** %4, align 8
  %21 = call %struct.hostent* @gethostbyname(i8* %20)
  store %struct.hostent* %21, %struct.hostent** %15, align 8
  %22 = icmp ne %struct.hostent* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %2
  %24 = load i32, i32* @stderr, align 4
  %25 = load i8*, i8** %4, align 8
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* %25)
  store i32 -1, i32* %3, align 4
  br label %89

27:                                               ; preds = %2
  %28 = load i32, i32* @AF_INET, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  %31 = load %struct.hostent*, %struct.hostent** %15, align 8
  %32 = getelementptr inbounds %struct.hostent, %struct.hostent* %31, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = load %struct.hostent*, %struct.hostent** %15, align 8
  %35 = getelementptr inbounds %struct.hostent, %struct.hostent* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = call i32 @memcpy(i32* %30, i32 %33, i32 %36)
  %38 = load i32, i32* @MOUNTPROG, align 4
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* @MOUNTVERS, align 4
  store i32 %39, i32* %8, align 4
  %40 = load i32, i32* @NFS_PROGRAM, align 4
  store i32 %40, i32* %9, align 4
  %41 = load i32, i32* @NFS_VERSION, align 4
  store i32 %41, i32* %10, align 4
  %42 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  store i32 20, i32* %43, align 8
  %44 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  store i32 3, i32* %45, align 8
  %46 = load i32, i32* %11, align 4
  %47 = call i32 @htons(i32 %46)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  store i32 %47, i32* %48, align 4
  %49 = load i32, i32* @RPC_ANYSOCK, align 4
  store i32 %49, i32* %13, align 4
  %50 = load i32, i32* @stderr, align 4
  %51 = load %struct.hostent*, %struct.hostent** %15, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %53)
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* %8, align 4
  %57 = bitcast %struct.timeval* %19 to { i32, i64 }*
  %58 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %57, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = call %struct.TYPE_5__* @clntudp_create(%struct.sockaddr_in* %16, i32 %55, i32 %56, i32 %59, i64 %61, i32* %13)
  store %struct.TYPE_5__* %62, %struct.TYPE_5__** %6, align 8
  %63 = load %struct.TYPE_5__*, %struct.TYPE_5__** %6, align 8
  %64 = icmp ne %struct.TYPE_5__* %63, null
  br i1 %64, label %65, label %87

65:                                               ; preds = %27
  %66 = call i32 (...) @authunix_create_default()
  %67 = load %struct.TYPE_5__*, %struct.TYPE_5__** %6, align 8
  %68 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %67, i32 0, i32 0
  store i32 %66, i32* %68, align 4
  %69 = load %struct.TYPE_5__*, %struct.TYPE_5__** %6, align 8
  %70 = load i32, i32* @MOUNTPROC_MNT, align 4
  %71 = load i64, i64* @xdr_dirpath, align 8
  %72 = trunc i64 %71 to i32
  %73 = ptrtoint i8** %5 to i32
  %74 = load i64, i64* @xdr_fhstatus, align 8
  %75 = trunc i64 %74 to i32
  %76 = ptrtoint %struct.fhstatus* %17 to i32
  %77 = call i32 @clnt_call(%struct.TYPE_5__* %69, i32 %70, i32 %72, i32 %73, i32 %75, i32 %76, %struct.timeval* byval(%struct.timeval) align 8 %18)
  store i32 %77, i32* %12, align 4
  %78 = load i32, i32* %12, align 4
  %79 = load i32, i32* @RPC_SUCCESS, align 4
  %80 = icmp ne i32 %78, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %65
  %82 = load i32, i32* %13, align 4
  store i32 %82, i32* %3, align 4
  br label %89

83:                                               ; preds = %65
  %84 = load i32, i32* @stderr, align 4
  %85 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %86 = load i32, i32* %13, align 4
  store i32 %86, i32* %3, align 4
  br label %89

87:                                               ; preds = %27
  %88 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %89

89:                                               ; preds = %87, %83, %81, %23
  %90 = load i32, i32* %3, align 4
  ret i32 %90
}

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local %struct.TYPE_5__* @clntudp_create(%struct.sockaddr_in*, i32, i32, i32, i64, i32*) #1

declare dso_local i32 @authunix_create_default(...) #1

declare dso_local i32 @clnt_call(%struct.TYPE_5__*, i32, i32, i32, i32, i32, %struct.timeval* byval(%struct.timeval) align 8) #1

declare dso_local i32 @clnt_pcreateerror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
