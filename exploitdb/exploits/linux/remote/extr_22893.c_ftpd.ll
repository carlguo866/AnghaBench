; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_ftpd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_ftpd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"could not bind socket, ftpd already running?\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"[*] ftp daemon connection established.\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"220 FakeFTPD.\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"[*] ftp daemon connection closed.\0A\00", align 1
@SO_REUSEPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ftpd() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  store i32 1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = load i32, i32* @IPPROTO_TCP, align 4
  %11 = call i32 @socket(i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %1, align 4
  %12 = load i32, i32* %1, align 4
  %13 = load i32, i32* @SOL_SOCKET, align 4
  %14 = load i32, i32* @SO_REUSEADDR, align 4
  %15 = bitcast i32* %4 to i8*
  %16 = call i32 @setsockopt(i32 %12, i32 %13, i32 %14, i8* %15, i32 4)
  %17 = load i32, i32* @AF_INET, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %17, i32* %18, align 4
  %19 = call i32 @htons(i32 21)
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* @INADDR_ANY, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 0
  store i32 %21, i32* %23, align 4
  %24 = load i32, i32* %1, align 4
  %25 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %26 = call i32 @bind(i32 %24, %struct.sockaddr* %25, i32 12)
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %30

28:                                               ; preds = %0
  %29 = call i32 @printe(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %30

30:                                               ; preds = %28, %0
  %31 = load i32, i32* %1, align 4
  %32 = call i32 @listen(i32 %31, i32 1)
  %33 = bitcast %struct.sockaddr_in* %7 to i8*
  %34 = call i32 @bzero(i8* %33, i32 12)
  store i32 12, i32* %3, align 4
  %35 = load i32, i32* %1, align 4
  %36 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %37 = call i32 @accept(i32 %35, %struct.sockaddr* %36, i32* %3)
  store i32 %37, i32* %2, align 4
  %38 = load i32, i32* %1, align 4
  %39 = call i32 @close(i32 %38)
  %40 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %41 = load i32, i32* %2, align 4
  %42 = call i32 @dprintf(i32 %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  br label %43

43:                                               ; preds = %47, %30
  %44 = load i32, i32* %5, align 4
  %45 = icmp ne i32 %44, 0
  %46 = xor i1 %45, true
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = load i32, i32* %2, align 4
  %49 = call i32 @ftpd_read(i32 %48)
  store i32 %49, i32* %5, align 4
  br label %43

50:                                               ; preds = %43
  %51 = load i32, i32* %2, align 4
  %52 = call i32 @close(i32 %51)
  %53 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @dprintf(i32, i8*) #1

declare dso_local i32 @ftpd_read(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
