; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_ftp_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_ftp_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [38 x i8] c"ftp_read(): allocating memory failed.\00", align 1
@no_io = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"<- %s\0A\00", align 1
@ftp_i = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"GtkFTPd\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"this exploit is only for GtkFTPd, failed.\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"230\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"invalid username/password, failed.\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"250\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"invalid writable directory, failed. (try \22/\22)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ftp_read(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  %4 = call i64 @malloc(i32 1025)
  %5 = inttoptr i64 %4 to i8*
  store i8* %5, i8** %3, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = call i32 @printe(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %9

9:                                                ; preds = %7, %1
  %10 = load i8*, i8** %3, align 8
  %11 = call i32 @memset(i8* %10, i32 0, i32 1024)
  %12 = load i32, i32* %2, align 4
  %13 = load i8*, i8** %3, align 8
  %14 = call i32 @read(i32 %12, i8* %13, i32 1024)
  %15 = load i8*, i8** %3, align 8
  %16 = call i32 @filter_text(i8* %15)
  %17 = load i32, i32* @no_io, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %9
  %20 = load i8*, i8** %3, align 8
  %21 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %20)
  br label %22

22:                                               ; preds = %19, %9
  %23 = load i32, i32* @ftp_i, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %3, align 8
  %27 = call i32 @strstr(i8* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = call i32 @printe(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %31

31:                                               ; preds = %29, %25
  br label %32

32:                                               ; preds = %31, %22
  %33 = load i32, i32* @ftp_i, align 4
  %34 = icmp eq i32 %33, 2
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = load i8*, i8** %3, align 8
  %37 = call i64 @strncmp(i8* %36, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = call i32 @printe(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0), i32 1)
  br label %41

41:                                               ; preds = %39, %35
  br label %42

42:                                               ; preds = %41, %32
  %43 = load i32, i32* @ftp_i, align 4
  %44 = icmp eq i32 %43, 3
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  %46 = load i8*, i8** %3, align 8
  %47 = call i64 @strncmp(i8* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 3)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = call i32 @printe(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i32 1)
  br label %51

51:                                               ; preds = %49, %45
  br label %52

52:                                               ; preds = %51, %42
  %53 = load i8*, i8** %3, align 8
  %54 = call i32 @free(i8* %53)
  %55 = load i32, i32* @ftp_i, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* @ftp_i, align 4
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @filter_text(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @strstr(i8*, i8*) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
