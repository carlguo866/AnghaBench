; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_8556.c_sctp_crc32c.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_8556.c_sctp_crc32c.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SP_LEN = common dso_local global i64 0, align 8
@DP_LEN = common dso_local global i64 0, align 8
@VTAG_LEN = common dso_local global i64 0, align 8
@HEADER_LEN = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i8*, i64)* @sctp_crc32c to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @sctp_crc32c(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 4294967295, i64* %6, align 8
  store i64 0, i64* %5, align 8
  br label %12

12:                                               ; preds = %27, %2
  %13 = load i64, i64* %5, align 8
  %14 = load i64, i64* @SP_LEN, align 8
  %15 = load i64, i64* @DP_LEN, align 8
  %16 = add i64 %14, %15
  %17 = load i64, i64* @VTAG_LEN, align 8
  %18 = add i64 %16, %17
  %19 = icmp ult i64 %13, %18
  br i1 %19, label %20, label %30

20:                                               ; preds = %12
  %21 = load i64, i64* %6, align 8
  %22 = load i8*, i8** %3, align 8
  %23 = load i64, i64* %5, align 8
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = call i32 @CRC32C(i64 %21, i8 zeroext %25)
  br label %27

27:                                               ; preds = %20
  %28 = load i64, i64* %5, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* %5, align 8
  br label %12

30:                                               ; preds = %12
  %31 = load i64, i64* %6, align 8
  %32 = call i32 @CRC32C(i64 %31, i8 zeroext 0)
  %33 = load i64, i64* %6, align 8
  %34 = call i32 @CRC32C(i64 %33, i8 zeroext 0)
  %35 = load i64, i64* %6, align 8
  %36 = call i32 @CRC32C(i64 %35, i8 zeroext 0)
  %37 = load i64, i64* %6, align 8
  %38 = call i32 @CRC32C(i64 %37, i8 zeroext 0)
  %39 = load i64, i64* @HEADER_LEN, align 8
  store i64 %39, i64* %5, align 8
  br label %40

40:                                               ; preds = %51, %30
  %41 = load i64, i64* %5, align 8
  %42 = load i64, i64* %4, align 8
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %44, label %54

44:                                               ; preds = %40
  %45 = load i64, i64* %6, align 8
  %46 = load i8*, i8** %3, align 8
  %47 = load i64, i64* %5, align 8
  %48 = getelementptr inbounds i8, i8* %46, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = call i32 @CRC32C(i64 %45, i8 zeroext %49)
  br label %51

51:                                               ; preds = %44
  %52 = load i64, i64* %5, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %5, align 8
  br label %40

54:                                               ; preds = %40
  %55 = load i64, i64* %6, align 8
  %56 = xor i64 %55, -1
  store i64 %56, i64* %7, align 8
  %57 = load i64, i64* %7, align 8
  %58 = and i64 %57, 255
  %59 = trunc i64 %58 to i8
  store i8 %59, i8* %8, align 1
  %60 = load i64, i64* %7, align 8
  %61 = lshr i64 %60, 8
  %62 = and i64 %61, 255
  %63 = trunc i64 %62 to i8
  store i8 %63, i8* %9, align 1
  %64 = load i64, i64* %7, align 8
  %65 = lshr i64 %64, 16
  %66 = and i64 %65, 255
  %67 = trunc i64 %66 to i8
  store i8 %67, i8* %10, align 1
  %68 = load i64, i64* %7, align 8
  %69 = lshr i64 %68, 24
  %70 = and i64 %69, 255
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %11, align 1
  %72 = load i8, i8* %8, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %73, 24
  %75 = load i8, i8* %9, align 1
  %76 = zext i8 %75 to i32
  %77 = shl i32 %76, 16
  %78 = or i32 %74, %77
  %79 = load i8, i8* %10, align 1
  %80 = zext i8 %79 to i32
  %81 = shl i32 %80, 8
  %82 = or i32 %78, %81
  %83 = load i8, i8* %11, align 1
  %84 = zext i8 %83 to i32
  %85 = or i32 %82, %84
  %86 = sext i32 %85 to i64
  store i64 %86, i64* %6, align 8
  %87 = load i64, i64* %6, align 8
  ret i64 %87
}

declare dso_local i32 @CRC32C(i64, i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
