; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_107.c_modify.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_107.c_modify.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"[-] Sorry, the connect back ip:%s have '\\n' char\0A\00", align 1
@OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [52 x i8] c"[-] Sorry, the connect back port:%d have '\\n' char\0A\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"[-] Sorry, the bind port:%d have '\\n' char\0A\00", align 1
@OFF2 = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @modify(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %105

13:                                               ; preds = %3
  %14 = load i8*, i8** %5, align 8
  %15 = call i32 @sscanf(i8* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32* %7, i32* %8, i32* %9, i32* %10)
  %16 = load i32, i32* %7, align 4
  %17 = and i32 %16, 255
  store i32 %17, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = and i32 %18, 255
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = and i32 %20, 255
  store i32 %21, i32* %9, align 4
  %22 = load i32, i32* %10, align 4
  %23 = and i32 %22, 255
  store i32 %23, i32* %10, align 4
  %24 = load i32, i32* %7, align 4
  %25 = trunc i32 %24 to i8
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 10
  br i1 %27, label %43, label %28

28:                                               ; preds = %13
  %29 = load i32, i32* %8, align 4
  %30 = trunc i32 %29 to i8
  %31 = sext i8 %30 to i32
  %32 = icmp eq i32 %31, 10
  br i1 %32, label %43, label %33

33:                                               ; preds = %28
  %34 = load i32, i32* %9, align 4
  %35 = trunc i32 %34 to i8
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 10
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = load i32, i32* %10, align 4
  %40 = trunc i32 %39 to i8
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 10
  br i1 %42, label %43, label %46

43:                                               ; preds = %38, %33, %28, %13
  %44 = load i8*, i8** %5, align 8
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i8* %44)
  br label %46

46:                                               ; preds = %43, %38
  %47 = load i32, i32* %7, align 4
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = load i8*, i8** %4, align 8
  %51 = load i64, i64* @OFFSET, align 8
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  store i8 %49, i8* %52, align 1
  %53 = load i32, i32* %8, align 4
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i8*, i8** %4, align 8
  %57 = load i64, i64* @OFFSET, align 8
  %58 = add i64 %57, 1
  %59 = getelementptr inbounds i8, i8* %56, i64 %58
  store i8 %55, i8* %59, align 1
  %60 = load i32, i32* %9, align 4
  %61 = and i32 %60, 255
  %62 = trunc i32 %61 to i8
  %63 = load i8*, i8** %4, align 8
  %64 = load i64, i64* @OFFSET, align 8
  %65 = add i64 %64, 2
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  store i8 %62, i8* %66, align 1
  %67 = load i32, i32* %10, align 4
  %68 = and i32 %67, 255
  %69 = trunc i32 %68 to i8
  %70 = load i8*, i8** %4, align 8
  %71 = load i64, i64* @OFFSET, align 8
  %72 = add i64 %71, 3
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  store i8 %69, i8* %73, align 1
  %74 = load i32, i32* %6, align 4
  %75 = ashr i32 %74, 8
  %76 = and i32 %75, 255
  store i32 %76, i32* %7, align 4
  %77 = load i32, i32* %6, align 4
  %78 = and i32 %77, 255
  store i32 %78, i32* %8, align 4
  %79 = load i32, i32* %7, align 4
  %80 = trunc i32 %79 to i8
  %81 = sext i8 %80 to i32
  %82 = icmp eq i32 %81, 10
  br i1 %82, label %88, label %83

83:                                               ; preds = %46
  %84 = load i32, i32* %8, align 4
  %85 = trunc i32 %84 to i8
  %86 = sext i8 %85 to i32
  %87 = icmp eq i32 %86, 10
  br i1 %87, label %88, label %92

88:                                               ; preds = %83, %46
  %89 = load i32, i32* %6, align 4
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i32 %89)
  %91 = call i32 (...) @quit()
  br label %92

92:                                               ; preds = %88, %83
  %93 = load i32, i32* %7, align 4
  %94 = trunc i32 %93 to i8
  %95 = load i8*, i8** %4, align 8
  %96 = load i64, i64* @OFFSET, align 8
  %97 = add i64 %96, 6
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  store i8 %94, i8* %98, align 1
  %99 = load i32, i32* %8, align 4
  %100 = trunc i32 %99 to i8
  %101 = load i8*, i8** %4, align 8
  %102 = load i64, i64* @OFFSET, align 8
  %103 = add i64 %102, 7
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  store i8 %100, i8* %104, align 1
  br label %136

105:                                              ; preds = %3
  %106 = load i32, i32* %6, align 4
  %107 = ashr i32 %106, 8
  %108 = and i32 %107, 255
  store i32 %108, i32* %7, align 4
  %109 = load i32, i32* %6, align 4
  %110 = and i32 %109, 255
  store i32 %110, i32* %8, align 4
  %111 = load i32, i32* %7, align 4
  %112 = trunc i32 %111 to i8
  %113 = sext i8 %112 to i32
  %114 = icmp eq i32 %113, 10
  br i1 %114, label %120, label %115

115:                                              ; preds = %105
  %116 = load i32, i32* %8, align 4
  %117 = trunc i32 %116 to i8
  %118 = sext i8 %117 to i32
  %119 = icmp eq i32 %118, 10
  br i1 %119, label %120, label %124

120:                                              ; preds = %115, %105
  %121 = load i32, i32* %6, align 4
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i32 %121)
  %123 = call i32 (...) @quit()
  br label %124

124:                                              ; preds = %120, %115
  %125 = load i32, i32* %7, align 4
  %126 = trunc i32 %125 to i8
  %127 = load i8*, i8** %4, align 8
  %128 = load i64, i64* @OFF2, align 8
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  store i8 %126, i8* %129, align 1
  %130 = load i32, i32* %8, align 4
  %131 = trunc i32 %130 to i8
  %132 = load i8*, i8** %4, align 8
  %133 = load i64, i64* @OFF2, align 8
  %134 = add i64 %133, 1
  %135 = getelementptr inbounds i8, i8* %132, i64 %134
  store i8 %131, i8* %135, align 1
  br label %136

136:                                              ; preds = %124, %92
  ret void
}

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @quit(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
