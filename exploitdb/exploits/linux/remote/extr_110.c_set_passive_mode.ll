; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_110.c_set_passive_mode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_110.c_set_passive_mode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@localIP = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [16 x i8] c"Setting passive\00", align 1
@DOWNLOAD = common dso_local global i32 0, align 4
@currentPassivePort = common dso_local global i32 0, align 4
@controlSock = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"PORT %s,%d,%d\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"PASV\0D\0A\00", align 1
@FAILURE = common dso_local global i64 0, align 8
@serverBuf = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [18 x i8] c"%d,%d,%d,%d,%d,%d\00", align 1
@currentServerPort = common dso_local global i32 0, align 4
@SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_passive_mode(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  %12 = load i8*, i8** @localIP, align 8
  store i8* %12, i8** %10, align 8
  %13 = call i32 @status_bar(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* @DOWNLOAD, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %51

17:                                               ; preds = %1
  %18 = load i32, i32* @currentPassivePort, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* @currentPassivePort, align 4
  %20 = icmp sgt i32 %19, 35000
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  store i32 32789, i32* @currentPassivePort, align 4
  br label %22

22:                                               ; preds = %21, %17
  br label %23

23:                                               ; preds = %35, %22
  %24 = load i8*, i8** %10, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %25, i8** %10, align 8
  %26 = load i8, i8* %25, align 1
  %27 = icmp ne i8 %26, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %23
  %29 = load i8*, i8** %10, align 8
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp eq i32 %31, 46
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = load i8*, i8** %10, align 8
  store i8 44, i8* %34, align 1
  br label %35

35:                                               ; preds = %33, %28
  br label %23

36:                                               ; preds = %23
  %37 = load i32, i32* @currentPassivePort, align 4
  %38 = ashr i32 %37, 8
  %39 = and i32 %38, 255
  store i32 %39, i32* %4, align 4
  %40 = load i32, i32* @currentPassivePort, align 4
  %41 = and i32 %40, 255
  store i32 %41, i32* %5, align 4
  %42 = load i32, i32* @controlSock, align 4
  %43 = load i8*, i8** @localIP, align 8
  %44 = load i32, i32* %4, align 4
  %45 = load i32, i32* %5, align 4
  %46 = call i32 (i32, i8*, ...) @my_send(i32 %42, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* %43, i32 %44, i32 %45)
  %47 = load i32, i32* @controlSock, align 4
  %48 = call i32 @my_recv(i32 %47)
  %49 = call i64 (...) @check_status()
  %50 = trunc i64 %49 to i32
  store i32 %50, i32* %2, align 4
  br label %115

51:                                               ; preds = %1
  %52 = load i32, i32* @controlSock, align 4
  %53 = call i32 (i32, i8*, ...) @my_send(i32 %52, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %54 = load i32, i32* @controlSock, align 4
  %55 = call i32 @my_recv(i32 %54)
  %56 = call i64 (...) @check_status()
  %57 = load i64, i64* @FAILURE, align 8
  %58 = icmp eq i64 %56, %57
  br i1 %58, label %59, label %62

59:                                               ; preds = %51
  %60 = load i64, i64* @FAILURE, align 8
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %2, align 4
  br label %115

62:                                               ; preds = %51
  %63 = load i8*, i8** @serverBuf, align 8
  store i8* %63, i8** %10, align 8
  br label %64

64:                                               ; preds = %76, %62
  %65 = load i8*, i8** %10, align 8
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = load i8*, i8** %10, align 8
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp ne i32 %72, 40
  br label %74

74:                                               ; preds = %69, %64
  %75 = phi i1 [ false, %64 ], [ %73, %69 ]
  br i1 %75, label %76, label %79

76:                                               ; preds = %74
  %77 = load i8*, i8** %10, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %78, i8** %10, align 8
  br label %64

79:                                               ; preds = %74
  %80 = load i8*, i8** %10, align 8
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = load i64, i64* @FAILURE, align 8
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* %2, align 4
  br label %115

87:                                               ; preds = %79
  %88 = load i8*, i8** %10, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  store i8* %89, i8** %11, align 8
  br label %90

90:                                               ; preds = %102, %87
  %91 = load i8*, i8** %10, align 8
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %100

95:                                               ; preds = %90
  %96 = load i8*, i8** %10, align 8
  %97 = load i8, i8* %96, align 1
  %98 = sext i8 %97 to i32
  %99 = icmp ne i32 %98, 41
  br label %100

100:                                              ; preds = %95, %90
  %101 = phi i1 [ false, %90 ], [ %99, %95 ]
  br i1 %101, label %102, label %105

102:                                              ; preds = %100
  %103 = load i8*, i8** %10, align 8
  %104 = getelementptr inbounds i8, i8* %103, i32 1
  store i8* %104, i8** %10, align 8
  br label %90

105:                                              ; preds = %100
  %106 = load i8*, i8** %10, align 8
  store i8 0, i8* %106, align 1
  %107 = load i8*, i8** %11, align 8
  %108 = call i32 @sscanf(i8* %107, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32* %6, i32* %7, i32* %8, i32* %9, i32* %4, i32* %5)
  %109 = load i32, i32* %4, align 4
  %110 = shl i32 %109, 8
  %111 = load i32, i32* %5, align 4
  %112 = or i32 %110, %111
  store i32 %112, i32* @currentServerPort, align 4
  br label %113

113:                                              ; preds = %105
  %114 = load i32, i32* @SUCCESS, align 4
  store i32 %114, i32* %2, align 4
  br label %115

115:                                              ; preds = %113, %84, %59, %36
  %116 = load i32, i32* %2, align 4
  ret i32 %116
}

declare dso_local i32 @status_bar(i8*) #1

declare dso_local i32 @my_send(i32, i8*, ...) #1

declare dso_local i32 @my_recv(i32) #1

declare dso_local i64 @check_status(...) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
