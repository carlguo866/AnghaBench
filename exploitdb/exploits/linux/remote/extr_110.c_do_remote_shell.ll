; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_110.c_do_remote_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_110.c_do_remote_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stdout = common dso_local global i32 0, align 4
@SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_remote_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %6, align 4
  br label %7

7:                                                ; preds = %52, %1
  %8 = call i32 @FD_ZERO(i32* %3)
  %9 = call i32 @FD_SET(i32 0, i32* %3)
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %3)
  %12 = load i32, i32* %2, align 4
  %13 = add nsw i32 %12, 1
  %14 = call i32 @select(i32 %13, i32* %3, i32* null, i32* null, i32* null)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %45

17:                                               ; preds = %7
  %18 = load i32, i32* %2, align 4
  %19 = call i64 @FD_ISSET(i32 %18, i32* %3)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, i32* %2, align 4
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %24 = call i32 @recv(i32 %22, i8* %23, i32 1023, i32 0)
  store i32 %24, i32* %6, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 %25
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %28 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %27)
  %29 = load i32, i32* @stdout, align 4
  %30 = call i32 @fflush(i32 %29)
  br label %31

31:                                               ; preds = %21, %17
  %32 = call i64 @FD_ISSET(i32 0, i32* %3)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %44

34:                                               ; preds = %31
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %36 = call i32 @read(i32 0, i8* %35, i32 1023)
  store i32 %36, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 %37
  store i8 0, i8* %38, align 1
  %39 = load i32, i32* %2, align 4
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @send(i32 %39, i8* %40, i32 %42, i32 0)
  br label %44

44:                                               ; preds = %34, %31
  br label %45

45:                                               ; preds = %44, %7
  br label %46

46:                                               ; preds = %45
  %47 = load i32, i32* %5, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = load i32, i32* %6, align 4
  %51 = icmp ne i32 %50, 0
  br label %52

52:                                               ; preds = %49, %46
  %53 = phi i1 [ false, %46 ], [ %51, %49 ]
  br i1 %53, label %7, label %54

54:                                               ; preds = %52
  %55 = load i32, i32* @SUCCESS, align 4
  ret i32 %55
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
