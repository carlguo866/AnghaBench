; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22479.c_connect_server.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22479.c_connect_server.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i64, i8* }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@st = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [15 x i8] c"connecting... \00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connect_server(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.sockaddr_in, align 8
  store i8* %0, i8** %3, align 8
  %5 = load i32, i32* @PF_INET, align 4
  %6 = load i32, i32* @SOCK_STREAM, align 4
  %7 = call i32 @socket(i32 %5, i32 %6, i32 0)
  store i32 %7, i32* @st, align 4
  %8 = load i32, i32* @st, align 4
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %36

11:                                               ; preds = %1
  %12 = load i8*, i8** @AF_INET, align 8
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %16 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %15, i32 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = load i32, i32* @st, align 4
  %18 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %19 = call i32 @bind(i32 %17, %struct.sockaddr* %18, i32 24)
  %20 = load i8*, i8** @AF_INET, align 8
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i8* %20, i8** %21, align 8
  %22 = call i64 @htons(i32 1723)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  store i64 %22, i64* %23, align 8
  %24 = load i8*, i8** %3, align 8
  %25 = call i64 @inet_addr(i8* %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i32 0, i32 0
  store i64 %25, i64* %27, align 8
  %28 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %29 = load i32, i32* @st, align 4
  %30 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %31 = call i64 @connect(i32 %29, %struct.sockaddr* %30, i32 24)
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %11
  %34 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %36

35:                                               ; preds = %11
  store i32 1, i32* %2, align 4
  br label %36

36:                                               ; preds = %35, %33, %10
  %37 = load i32, i32* %2, align 4
  ret i32 %37
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @htons(i32) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
