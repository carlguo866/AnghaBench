; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_348.c_net_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_348.c_net_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@EINPROGRESS = common dso_local global i32 0, align 4
@ETIMEDOUT = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @net_connect(%struct.sockaddr_in* %0, i8* %1, i16 zeroext %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.sockaddr_in*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.timeval, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.sockaddr_in, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %6, align 8
  store i8* %1, i8** %7, align 8
  store i16 %2, i16* %8, align 2
  store i32 %3, i32* %9, align 4
  %19 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %20 = icmp eq %struct.sockaddr_in* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %4
  store %struct.sockaddr_in* %18, %struct.sockaddr_in** %6, align 8
  br label %22

22:                                               ; preds = %21, %4
  %23 = load i32, i32* @AF_INET, align 4
  %24 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %24, i32 0, i32 1
  store i32 %23, i32* %25, align 4
  %26 = load i16, i16* %8, align 2
  %27 = call i32 @htons(i16 zeroext %26)
  %28 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 2
  store i32 %27, i32* %29, align 4
  %30 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = load i32, i32* @SOCK_STREAM, align 4
  %34 = call i32 @socket(i32 %32, i32 %33, i32 0)
  store i32 %34, i32* %14, align 4
  %35 = load i32, i32* %14, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %38

37:                                               ; preds = %22
  store i32 -1, i32* %5, align 4
  br label %154

38:                                               ; preds = %22
  %39 = load i8*, i8** %7, align 8
  %40 = call i32 @net_resolve(i8* %39)
  %41 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %41, i32 0, i32 0
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i32 0, i32 0
  store i32 %40, i32* %43, align 4
  %44 = icmp ne i32 %40, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = load i32, i32* %14, align 4
  %47 = call i32 @close(i32 %46)
  store i32 -1, i32* %5, align 4
  br label %154

48:                                               ; preds = %38
  %49 = load i32, i32* %14, align 4
  %50 = load i32, i32* @F_GETFL, align 4
  %51 = call i32 @fcntl(i32 %49, i32 %50, i32 0)
  store i32 %51, i32* %13, align 4
  %52 = load i32, i32* %13, align 4
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = load i32, i32* %14, align 4
  %56 = call i32 @close(i32 %55)
  store i32 -1, i32* %5, align 4
  br label %154

57:                                               ; preds = %48
  %58 = load i32, i32* %14, align 4
  %59 = load i32, i32* @F_SETFL, align 4
  %60 = load i32, i32* %13, align 4
  %61 = load i32, i32* @O_NONBLOCK, align 4
  %62 = or i32 %60, %61
  %63 = call i32 @fcntl(i32 %58, i32 %59, i32 %62)
  store i32 %63, i32* %10, align 4
  %64 = load i32, i32* %10, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %69

66:                                               ; preds = %57
  %67 = load i32, i32* %14, align 4
  %68 = call i32 @close(i32 %67)
  store i32 -1, i32* %5, align 4
  br label %154

69:                                               ; preds = %57
  store i32 0, i32* %12, align 4
  %70 = load i32, i32* %14, align 4
  %71 = load %struct.sockaddr_in*, %struct.sockaddr_in** %6, align 8
  %72 = bitcast %struct.sockaddr_in* %71 to %struct.sockaddr*
  %73 = call i32 @connect(i32 %70, %struct.sockaddr* %72, i32 12)
  store i32 %73, i32* %10, align 4
  %74 = load i32, i32* %10, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %84

76:                                               ; preds = %69
  %77 = load i32, i32* @errno, align 4
  %78 = load i32, i32* @EINPROGRESS, align 4
  %79 = icmp ne i32 %77, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %76
  %81 = load i32, i32* %14, align 4
  %82 = call i32 @close(i32 %81)
  store i32 -1, i32* %5, align 4
  br label %154

83:                                               ; preds = %76
  br label %84

84:                                               ; preds = %83, %69
  %85 = load i32, i32* %10, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  br label %144

88:                                               ; preds = %84
  %89 = call i32 @FD_ZERO(i32* %16)
  %90 = call i32 @FD_ZERO(i32* %17)
  %91 = load i32, i32* %14, align 4
  %92 = call i32 @FD_SET(i32 %91, i32* %16)
  %93 = load i32, i32* %14, align 4
  %94 = call i32 @FD_SET(i32 %93, i32* %17)
  %95 = load i32, i32* %9, align 4
  %96 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 0
  store i32 %95, i32* %96, align 8
  %97 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 1
  store i64 0, i64* %97, align 8
  %98 = load i32, i32* %14, align 4
  %99 = add nsw i32 %98, 1
  %100 = call i32 @select(i32 %99, i32* %16, i32* %17, i32* null, %struct.timeval* %15)
  store i32 %100, i32* %10, align 4
  %101 = load i32, i32* %10, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %88
  %104 = load i32, i32* %14, align 4
  %105 = call i32 @close(i32 %104)
  %106 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %106, i32* @errno, align 4
  store i32 -1, i32* %5, align 4
  br label %154

107:                                              ; preds = %88
  %108 = load i32, i32* %10, align 4
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %111

110:                                              ; preds = %107
  store i32 -1, i32* %5, align 4
  br label %154

111:                                              ; preds = %107
  %112 = load i32, i32* %14, align 4
  %113 = call i64 @FD_ISSET(i32 %112, i32* %16)
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %111
  %116 = load i32, i32* %14, align 4
  %117 = call i64 @FD_ISSET(i32 %116, i32* %17)
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %142

119:                                              ; preds = %115, %111
  %120 = load i32, i32* %14, align 4
  %121 = call i64 @FD_ISSET(i32 %120, i32* %16)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %141

123:                                              ; preds = %119
  %124 = load i32, i32* %14, align 4
  %125 = call i64 @FD_ISSET(i32 %124, i32* %17)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %141

127:                                              ; preds = %123
  store i32 4, i32* %11, align 4
  %128 = load i32, i32* %14, align 4
  %129 = load i32, i32* @SOL_SOCKET, align 4
  %130 = load i32, i32* @SO_ERROR, align 4
  %131 = call i64 @getsockopt(i32 %128, i32 %129, i32 %130, i32* %12, i32* %11)
  %132 = icmp slt i64 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %127
  %134 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %134, i32* @errno, align 4
  store i32 -1, i32* %5, align 4
  br label %154

135:                                              ; preds = %127
  %136 = load i32, i32* %12, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  br label %144

139:                                              ; preds = %135
  %140 = load i32, i32* %12, align 4
  store i32 %140, i32* @errno, align 4
  store i32 -1, i32* %5, align 4
  br label %154

141:                                              ; preds = %123, %119
  br label %143

142:                                              ; preds = %115
  store i32 -1, i32* %5, align 4
  br label %154

143:                                              ; preds = %141
  br label %144

144:                                              ; preds = %143, %138, %87
  %145 = load i32, i32* %14, align 4
  %146 = load i32, i32* @F_SETFL, align 4
  %147 = load i32, i32* %13, align 4
  %148 = call i32 @fcntl(i32 %145, i32 %146, i32 %147)
  store i32 %148, i32* %10, align 4
  %149 = load i32, i32* %10, align 4
  %150 = icmp eq i32 %149, -1
  br i1 %150, label %151, label %152

151:                                              ; preds = %144
  store i32 -1, i32* %5, align 4
  br label %154

152:                                              ; preds = %144
  %153 = load i32, i32* %14, align 4
  store i32 %153, i32* %5, align 4
  br label %154

154:                                              ; preds = %152, %151, %142, %139, %133, %110, %103, %80, %66, %54, %45, %37
  %155 = load i32, i32* %5, align 4
  ret i32 %155
}

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @net_resolve(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i64 @getsockopt(i32, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
