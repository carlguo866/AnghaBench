; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_icmp_header.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_icmp_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.icmphdr = type { i32, %struct.TYPE_3__, i64, i32 }
%struct.TYPE_3__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i8*, i8* }

@ICMP_ECHO = common dso_local global i32 0, align 4
@ICMP_HDRLEN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @icmp_header(%struct.icmphdr* %0, i8* %1, i64 %2) #0 {
  %4 = alloca %struct.icmphdr*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store %struct.icmphdr* %0, %struct.icmphdr** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = load i32, i32* @ICMP_ECHO, align 4
  %9 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %10 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %9, i32 0, i32 3
  store i32 %8, i32* %10, align 8
  %11 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %12 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %11, i32 0, i32 2
  store i64 0, i64* %12, align 8
  %13 = call i8* @htons(i32 0)
  %14 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %15 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %16, i32 0, i32 1
  store i8* %13, i8** %17, align 8
  %18 = call i8* @htons(i32 0)
  %19 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %20 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %20, i32 0, i32 0
  %22 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %21, i32 0, i32 0
  store i8* %18, i8** %22, align 8
  %23 = load i8*, i8** %5, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %25, label %35

25:                                               ; preds = %3
  %26 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %27 = bitcast %struct.icmphdr* %26 to i8*
  %28 = load i32, i32* @ICMP_HDRLEN, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  store i8* %30, i8** %7, align 8
  %31 = load i8*, i8** %7, align 8
  %32 = load i8*, i8** %5, align 8
  %33 = load i64, i64* %6, align 8
  %34 = call i32 @memcpy(i8* %31, i8* %32, i64 %33)
  br label %35

35:                                               ; preds = %25, %3
  %36 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %37 = bitcast %struct.icmphdr* %36 to i16*
  %38 = load i32, i32* @ICMP_HDRLEN, align 4
  %39 = sext i32 %38 to i64
  %40 = load i64, i64* %6, align 8
  %41 = add i64 %39, %40
  %42 = trunc i64 %41 to i32
  %43 = call i32 @in_cksum(i16* %37, i32 %42)
  %44 = load %struct.icmphdr*, %struct.icmphdr** %4, align 8
  %45 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %44, i32 0, i32 0
  store i32 %43, i32* %45, align 8
  ret void
}

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i64) #1

declare dso_local i32 @in_cksum(i16*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
