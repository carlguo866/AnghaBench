; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_getbuf.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22786.c_getbuf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [35 x i8] c"getbuf(): allocating memory failed\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"GET /~\00", align 1
@x86_exec = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getbuf(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  store i32 0, i32* %3, align 4
  %5 = call i64 @malloc(i32 501)
  %6 = inttoptr i64 %5 to i8*
  store i8* %6, i8** %4, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = call i32 @printe(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %10

10:                                               ; preds = %8, %1
  %11 = load i8*, i8** %4, align 8
  %12 = call i32 @memset(i8* %11, i32 0, i32 501)
  %13 = load i8*, i8** %4, align 8
  %14 = call i32 @strcpy(i8* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 6, i32* %3, align 4
  br label %15

15:                                               ; preds = %25, %10
  %16 = load i32, i32* %3, align 4
  %17 = icmp ult i32 %16, 54
  br i1 %17, label %18, label %28

18:                                               ; preds = %15
  %19 = load i64, i64* %2, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = load i32, i32* %3, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  %24 = bitcast i8* %23 to i64*
  store i64 %19, i64* %24, align 8
  br label %25

25:                                               ; preds = %18
  %26 = load i32, i32* %3, align 4
  %27 = add i32 %26, 4
  store i32 %27, i32* %3, align 4
  br label %15

28:                                               ; preds = %15
  %29 = load i8*, i8** %4, align 8
  %30 = load i32, i32* %3, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %3, align 4
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds i8, i8* %29, i64 %32
  store i8 32, i8* %33, align 1
  %34 = load i8*, i8** %4, align 8
  %35 = load i32, i32* %3, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8*, i8** @x86_exec, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = sub nsw i32 500, %39
  %41 = load i32, i32* %3, align 4
  %42 = sub i32 %40, %41
  %43 = sub i32 %42, 2
  %44 = call i32 @memset(i8* %37, i32 144, i32 %43)
  %45 = load i8*, i8** %4, align 8
  %46 = load i8*, i8** @x86_exec, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 500, %47
  %49 = sub nsw i32 %48, 2
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %45, i64 %50
  %52 = load i8*, i8** @x86_exec, align 8
  %53 = load i8*, i8** @x86_exec, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i32 @memcpy(i8* %51, i8* %52, i32 %54)
  %56 = load i8*, i8** %4, align 8
  %57 = load i8*, i8** %4, align 8
  %58 = call i32 @strlen(i8* %57)
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %56, i64 %59
  %61 = call i32 @strcpy(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %62 = load i8*, i8** %4, align 8
  ret i8* %62
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
