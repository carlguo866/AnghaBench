; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1456.c_get_target.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1456.c_get_target.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }

@.str = private unnamed_addr constant [13 x i8] c"failed!\0D[-]\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"done!\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"GET /doesntmatter HTTP/1.1\0D\0A\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [64 x i8] c"[-] Wasnt able to determine version of server, do it yourself!\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"<BR>\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"[!] Version: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Server/Linux v1.9.4\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Server/Linux v1.9.2\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Server/FreeBSD\00", align 1
@.str.9 = private unnamed_addr constant [89 x i8] c"[-] The server runs on FreeBSD, it could be FBSD 4.x or 5.x choose the target yourself!\0A\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"[-] Wasnt able to find target for this server!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_target(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  store i32 %0, i32* %11, align 4
  store i32 %1, i32* %5, align 4
  %12 = load i32, i32* %5, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = call i32 @conn(i32 %14, i32 %12)
  store i32 %15, i32* %9, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 -2, i32* %3, align 4
  br label %67

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* %9, align 4
  %22 = call i32 @sockprintf(i32 %21, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %9, align 4
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %25 = call i32 @recv(i32 %23, i8* %24, i32 1023, i32 0)
  store i32 %25, i32* %10, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %29

27:                                               ; preds = %19
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %67

29:                                               ; preds = %19
  %30 = load i32, i32* %10, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %31
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %34 = call i8* @strstr(i8* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i8* %34, i8** %7, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %29
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %67

38:                                               ; preds = %29
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 4
  store i8* %40, i8** %7, align 8
  %41 = load i8*, i8** %7, align 8
  %42 = call i8* @strstr(i8* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i8* %42, i8** %8, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %67

46:                                               ; preds = %38
  %47 = load i8*, i8** %8, align 8
  store i8 0, i8* %47, align 1
  %48 = load i8*, i8** %7, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8* %48)
  %50 = load i8*, i8** %7, align 8
  %51 = call i8* @strstr(i8* %50, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %52 = icmp ne i8* %51, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %46
  store i32 1, i32* %3, align 4
  br label %67

54:                                               ; preds = %46
  %55 = load i8*, i8** %7, align 8
  %56 = call i8* @strstr(i8* %55, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %57 = icmp ne i8* %56, null
  br i1 %57, label %58, label %59

58:                                               ; preds = %54
  store i32 2, i32* %3, align 4
  br label %67

59:                                               ; preds = %54
  %60 = load i8*, i8** %7, align 8
  %61 = call i8* @strstr(i8* %60, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %67

65:                                               ; preds = %59
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %67

67:                                               ; preds = %65, %63, %58, %53, %44, %36, %27, %17
  %68 = load i32, i32* %3, align 4
  ret i32 %68
}

declare dso_local i32 @conn(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @sockprintf(i32, i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
