; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_348.c_ftp_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_348.c_ftp_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"220-\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"220 \00", align 1
@verbose = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1
@ftp_banner = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"331 \00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"230-\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"230 \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ftp_login(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca [512 x i8], align 16
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = call i32 @net_connect(i32* null, i8* %10, i32 21, i32 30)
  store i32 %11, i32* %8, align 4
  %12 = load i32, i32* %8, align 4
  %13 = icmp sle i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  store i32 0, i32* %4, align 4
  br label %105

15:                                               ; preds = %3
  %16 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %17 = call i32 @memset(i8* %16, i8 signext 0, i32 512)
  %18 = load i32, i32* %8, align 4
  %19 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %20 = call i64 @net_rlinet(i32 %18, i8* %19, i32 511, i32 20)
  %21 = icmp sle i64 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %15
  br label %98

23:                                               ; preds = %15
  %24 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %25 = call i64 @memcmp(i8* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = load i32, i32* %8, align 4
  %29 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %30 = call i32 @ftp_recv_until(i32 %28, i8* %29, i32 512, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %31

31:                                               ; preds = %27, %23
  %32 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %33 = call i64 @memcmp(i8* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %31
  %36 = load i64, i64* @verbose, align 8
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %40 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %39)
  br label %41

41:                                               ; preds = %38, %35
  br label %98

42:                                               ; preds = %31
  %43 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %44 = call i32 @strdup(i8* %43)
  store i32 %44, i32* @ftp_banner, align 4
  %45 = load i32, i32* %8, align 4
  %46 = load i8*, i8** %6, align 8
  %47 = call i32 @net_write(i32 %45, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %46)
  %48 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %49 = call i32 @memset(i8* %48, i8 signext 0, i32 512)
  %50 = load i32, i32* %8, align 4
  %51 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %52 = call i64 @net_rlinet(i32 %50, i8* %51, i32 511, i32 20)
  %53 = icmp sle i64 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %42
  br label %98

55:                                               ; preds = %42
  %56 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %57 = call i64 @memcmp(i8* %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 4)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %66

59:                                               ; preds = %55
  %60 = load i64, i64* @verbose, align 8
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %64 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %63)
  br label %65

65:                                               ; preds = %62, %59
  br label %98

66:                                               ; preds = %55
  %67 = load i32, i32* %8, align 4
  %68 = load i8*, i8** %7, align 8
  %69 = call i32 @net_write(i32 %67, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %68)
  %70 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %71 = call i32 @memset(i8* %70, i8 signext 0, i32 512)
  %72 = load i32, i32* %8, align 4
  %73 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %74 = call i64 @net_rlinet(i32 %72, i8* %73, i32 511, i32 20)
  %75 = icmp sle i64 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %66
  br label %98

77:                                               ; preds = %66
  %78 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %79 = call i64 @memcmp(i8* %78, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = load i32, i32* %8, align 4
  %83 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %84 = call i32 @ftp_recv_until(i32 %82, i8* %83, i32 512, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  br label %85

85:                                               ; preds = %81, %77
  %86 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %87 = call i64 @memcmp(i8* %86, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 4)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %96

89:                                               ; preds = %85
  %90 = load i64, i64* @verbose, align 8
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %89
  %93 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %94 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %93)
  br label %95

95:                                               ; preds = %92, %89
  br label %98

96:                                               ; preds = %85
  %97 = load i32, i32* %8, align 4
  store i32 %97, i32* %4, align 4
  br label %105

98:                                               ; preds = %95, %76, %65, %54, %41, %22
  %99 = load i32, i32* %8, align 4
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %98
  %102 = load i32, i32* %8, align 4
  %103 = call i32 @close(i32 %102)
  br label %104

104:                                              ; preds = %101, %98
  store i32 0, i32* %4, align 4
  br label %105

105:                                              ; preds = %104, %96, %14
  %106 = load i32, i32* %4, align 4
  ret i32 %106
}

declare dso_local i32 @net_connect(i32*, i8*, i32, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i64 @net_rlinet(i32, i8*, i32, i32) #1

declare dso_local i64 @memcmp(i8*, i8*, i32) #1

declare dso_local i32 @ftp_recv_until(i32, i8*, i32, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @strdup(i8*) #1

declare dso_local i32 @net_write(i32, i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
