; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_359.c_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_359.c_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"uname -a; id; w\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"FUCK: Error in read\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"FUCK: failed.\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Connection closed.\0A\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %10 = call i32 @strcpy(i8* %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %2, align 4
  %12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %14 = call i32 @strlen(i8* %13)
  %15 = call i32 @write(i32 %11, i8* %12, i32 %14)
  br label %16

16:                                               ; preds = %82, %1
  %17 = load i32, i32* @stdin, align 4
  %18 = call i32 @fileno(i32 %17)
  %19 = call i32 @FD_SET(i32 %18, i32* %5)
  %20 = load i32, i32* %2, align 4
  %21 = call i32 @FD_SET(i32 %20, i32* %5)
  %22 = load i32, i32* @stdin, align 4
  %23 = call i32 @fileno(i32 %22)
  %24 = load i32, i32* %2, align 4
  %25 = icmp sgt i32 %23, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %16
  %27 = load i32, i32* @stdin, align 4
  %28 = call i32 @fileno(i32 %27)
  br label %31

29:                                               ; preds = %16
  %30 = load i32, i32* %2, align 4
  br label %31

31:                                               ; preds = %29, %26
  %32 = phi i32 [ %28, %26 ], [ %30, %29 ]
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @select(i32 %34, i32* %5, i32* null, i32* null, i32* null)
  %36 = load i32, i32* @stdin, align 4
  %37 = call i32 @fileno(i32 %36)
  %38 = call i64 @FD_ISSET(i32 %37, i32* %5)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %51

40:                                               ; preds = %31
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %42 = call i32 @bzero(i8* %41, i32 1024)
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %44 = load i32, i32* @stdin, align 4
  %45 = call i32 @fgets(i8* %43, i32 1022, i32 %44)
  %46 = load i32, i32* %2, align 4
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %49 = call i32 @strlen(i8* %48)
  %50 = call i32 @write(i32 %46, i8* %47, i32 %49)
  br label %51

51:                                               ; preds = %40, %31
  %52 = load i32, i32* %2, align 4
  %53 = call i64 @FD_ISSET(i32 %52, i32* %5)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %55, label %82

55:                                               ; preds = %51
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %57 = call i32 @bzero(i8* %56, i32 1024)
  %58 = load i32, i32* %2, align 4
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %60 = call i32 @read(i32 %58, i8* %59, i32 1024)
  store i32 %60, i32* %7, align 4
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %62, label %65

62:                                               ; preds = %55
  %63 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %64 = call i32 @exit(i32 1) #3
  unreachable

65:                                               ; preds = %55
  %66 = load i32, i32* %7, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %65
  %69 = load i32, i32* %8, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  ret i32 0

73:                                               ; preds = %68
  %74 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %75 = call i32 @exit(i32 1) #3
  unreachable

76:                                               ; preds = %65
  store i32 1, i32* %8, align 4
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %78 = load i32, i32* @stdout, align 4
  %79 = call i32 @fputs(i8* %77, i32 %78)
  %80 = load i32, i32* @stdout, align 4
  %81 = call i32 @fflush(i32 %80)
  br label %82

82:                                               ; preds = %76, %51
  br label %16
}

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fputs(i8*, i32) #1

declare dso_local i32 @fflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
