; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24857.c_send_queryhit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24857.c_send_queryhit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_IV = common dso_local global i32 0, align 4
@ip = common dso_local global i8 0, align 1
@port = common dso_local global i8 0, align 1
@Hdr = common dso_local global i32* null, align 8
@QUERYHIT_DESCR = common dso_local global i32 0, align 4
@HDR_SIZE = common dso_local global i32 0, align 4
@out_stream = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"send_pong(): couldn't send header\0A\00", align 1
@Payload = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"send_pong(): couldn't send payload\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_queryhit(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca [16 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  store i8 1, i8* %8, align 1
  %14 = load i32, i32* @MAX_IV, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %11, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %12, align 8
  store i8 1, i8* @ip, align 1
  store i8 96, i8* @port, align 1
  %18 = load i8*, i8** %5, align 8
  %19 = call i32 @set_result_set(i8* %17, i8* %18)
  store i32 %19, i32* %13, align 4
  %20 = load i32, i32* %13, align 4
  %21 = load i32, i32* @MAX_IV, align 4
  %22 = icmp ule i32 %20, %21
  %23 = zext i1 %22 to i32
  %24 = call i32 @assert(i32 %23)
  %25 = load i32, i32* %13, align 4
  %26 = add i32 11, %25
  %27 = add i32 %26, 16
  store i32 %27, i32* %7, align 4
  %28 = load i32*, i32** @Hdr, align 8
  %29 = load i8*, i8** %6, align 8
  %30 = load i32, i32* @QUERYHIT_DESCR, align 4
  %31 = load i32, i32* %7, align 4
  %32 = call i32 @set_descr_hdr(i32* %28, i8* %29, i32 %30, i32 5, i32 0, i32 %31)
  %33 = load i32, i32* %4, align 4
  %34 = load i32*, i32** @Hdr, align 8
  %35 = load i32, i32* @HDR_SIZE, align 4
  %36 = call i32 @write_buf(i32 %33, i32* %34, i32 %35)
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %3
  %39 = load i32, i32* @out_stream, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  br label %41

41:                                               ; preds = %38, %3
  %42 = load i32, i32* %7, align 4
  %43 = load i32*, i32** @Payload, align 8
  %44 = call i32 @random_array(i32 %42, i32* %43)
  %45 = load i32*, i32** @Payload, align 8
  %46 = getelementptr inbounds i32, i32* %45, i64 0
  %47 = call i32 @memcpy(i32* %46, i8* %8, i32 1)
  %48 = load i32*, i32** @Payload, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 1
  %50 = call i32 @memcpy(i32* %49, i8* @port, i32 1)
  %51 = load i32*, i32** @Payload, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 3
  %53 = call i32 @memcpy(i32* %52, i8* @ip, i32 4)
  %54 = load i32*, i32** @Payload, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 7
  %56 = call i32 @memcpy(i32* %55, i8* %9, i32 4)
  %57 = load i32*, i32** @Payload, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 11
  %59 = load i32, i32* %13, align 4
  %60 = call i32 @memcpy(i32* %58, i8* %17, i32 %59)
  %61 = load i32*, i32** @Payload, align 8
  %62 = load i32, i32* %13, align 4
  %63 = add i32 11, %62
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %61, i64 %64
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 0
  %67 = call i32 @memcpy(i32* %65, i8* %66, i32 16)
  %68 = load i32, i32* %4, align 4
  %69 = load i32*, i32** @Payload, align 8
  %70 = load i32, i32* %7, align 4
  %71 = call i32 @write_buf(i32 %68, i32* %69, i32 %70)
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %41
  %74 = load i32, i32* @out_stream, align 4
  %75 = call i32 @fprintf(i32 %74, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %76

76:                                               ; preds = %73, %41
  %77 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %77)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @set_result_set(i8*, i8*) #2

declare dso_local i32 @assert(i32) #2

declare dso_local i32 @set_descr_hdr(i32*, i8*, i32, i32, i32, i32) #2

declare dso_local i32 @write_buf(i32, i32*, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @random_array(i32, i32*) #2

declare dso_local i32 @memcpy(i32*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
