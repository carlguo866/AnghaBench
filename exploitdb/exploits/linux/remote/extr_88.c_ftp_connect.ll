; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_ftp_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_ftp_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@host = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [27 x i8] c"couldn't resolve hostname.\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"gtkftpd connection failed.\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] connected successfully: %s:%d.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ftp_connect() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.hostent*, align 8
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = load i32, i32* @AF_INET, align 4
  %5 = load i32, i32* @SOCK_STREAM, align 4
  %6 = load i32, i32* @IPPROTO_TCP, align 4
  %7 = call i32 @socket(i32 %4, i32 %5, i32 %6)
  store i32 %7, i32* %1, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* @port, align 4
  %11 = call i32 @htons(i32 %10)
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %11, i32* %12, align 4
  %13 = load i8*, i8** @host, align 8
  %14 = call i32 @inet_addr(i8* %13)
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %16 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %15, i32 0, i32 0
  store i32 %14, i32* %16, align 4
  %17 = icmp ne i32 %14, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %0
  %19 = load i8*, i8** @host, align 8
  %20 = call %struct.hostent* @gethostbyname(i8* %19)
  store %struct.hostent* %20, %struct.hostent** %2, align 8
  %21 = icmp ne %struct.hostent* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %24

24:                                               ; preds = %22, %18
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %26 = bitcast %struct.TYPE_2__* %25 to i8*
  %27 = load %struct.hostent*, %struct.hostent** %2, align 8
  %28 = getelementptr inbounds %struct.hostent, %struct.hostent* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = inttoptr i64 %29 to i8*
  %31 = call i32 @memcpy(i8* %26, i8* %30, i32 4)
  br label %32

32:                                               ; preds = %24, %0
  %33 = load i8*, i8** @host, align 8
  %34 = load i32, i32* @port, align 4
  %35 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* %33, i32 %34)
  %36 = load i32, i32* @SIGALRM, align 4
  %37 = load i32, i32* @sig_alarm, align 4
  %38 = call i32 @signal(i32 %36, i32 %37)
  %39 = load i32, i32* @TIMEOUT, align 4
  %40 = call i32 @alarm(i32 %39)
  %41 = load i32, i32* %1, align 4
  %42 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %43 = call i64 @connect(i32 %41, %struct.sockaddr* %42, i32 12)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %32
  %46 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %47

47:                                               ; preds = %45, %32
  %48 = call i32 @alarm(i32 0)
  %49 = load i8*, i8** @host, align 8
  %50 = load i32, i32* @port, align 4
  %51 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %49, i32 %50)
  %52 = load i32, i32* %1, align 4
  %53 = call i32 @ftp_parse(i32 %52)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @ftp_parse(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
