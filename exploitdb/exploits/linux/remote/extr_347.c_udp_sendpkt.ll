; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_347.c_udp_sendpkt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_347.c_udp_sendpkt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.iphdr = type { i32, i32, i32, i32, i64, i64, i64, i32, i64, i8*, i64 }
%struct.udphdr = type { i16, i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@IPPROTO_UDP = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @udp_sendpkt(%struct.sockaddr_in* %0, i32 %1, i8* %2, i16 zeroext %3, i64 %4, i64 %5, i16 zeroext %6, i16 zeroext %7) #0 {
  %9 = alloca %struct.sockaddr_in*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca %struct.iphdr, align 8
  %18 = alloca %struct.udphdr, align 8
  %19 = alloca [8192 x i8], align 16
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %9, align 8
  store i32 %1, i32* %10, align 4
  store i8* %2, i8** %11, align 8
  store i16 %3, i16* %12, align 2
  store i64 %4, i64* %13, align 8
  store i64 %5, i64* %14, align 8
  store i16 %6, i16* %15, align 2
  store i16 %7, i16* %16, align 2
  %20 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 0
  store i32 5, i32* %20, align 8
  %21 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 1
  store i32 4, i32* %21, align 4
  %22 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 10
  store i64 0, i64* %22, align 8
  %23 = load i16, i16* %12, align 2
  %24 = zext i16 %23 to i32
  %25 = add nsw i32 28, %24
  %26 = call i8* @htons(i32 %25)
  %27 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 9
  store i8* %26, i8** %27, align 8
  %28 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 2
  store i32 29520, i32* %28, align 8
  %29 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 8
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 3
  store i32 255, i32* %30, align 4
  %31 = load i32, i32* @IPPROTO_UDP, align 4
  %32 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 7
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 6
  store i64 0, i64* %33, align 8
  %34 = load i64, i64* %13, align 8
  %35 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 4
  store i64 %34, i64* %35, align 8
  %36 = load i64, i64* %14, align 8
  %37 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 5
  store i64 %36, i64* %37, align 8
  %38 = bitcast %struct.iphdr* %17 to i16*
  %39 = call i64 @in_cksum(i16* %38, i32 72)
  %40 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %17, i32 0, i32 6
  store i64 %39, i64* %40, align 8
  %41 = load i16, i16* %15, align 2
  %42 = zext i16 %41 to i32
  %43 = call i8* @htons(i32 %42)
  %44 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %18, i32 0, i32 3
  store i8* %43, i8** %44, align 8
  %45 = load i16, i16* %16, align 2
  %46 = zext i16 %45 to i32
  %47 = call i8* @htons(i32 %46)
  %48 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %18, i32 0, i32 2
  store i8* %47, i8** %48, align 8
  %49 = load i16, i16* %12, align 2
  %50 = zext i16 %49 to i32
  %51 = add nsw i32 8, %50
  %52 = call i8* @htons(i32 %51)
  %53 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %18, i32 0, i32 1
  store i8* %52, i8** %53, align 8
  %54 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %18, i32 0, i32 0
  store i16 0, i16* %54, align 8
  %55 = getelementptr inbounds [8192 x i8], [8192 x i8]* %19, i64 0, i64 0
  %56 = bitcast %struct.iphdr* %17 to i8*
  %57 = call i32 @memcpy(i8* %55, i8* %56, i16 zeroext 72)
  %58 = getelementptr inbounds [8192 x i8], [8192 x i8]* %19, i64 0, i64 0
  %59 = getelementptr inbounds i8, i8* %58, i64 72
  %60 = bitcast %struct.udphdr* %18 to i8*
  %61 = call i32 @memcpy(i8* %59, i8* %60, i16 zeroext 32)
  %62 = getelementptr inbounds [8192 x i8], [8192 x i8]* %19, i64 0, i64 0
  %63 = getelementptr inbounds i8, i8* %62, i64 72
  %64 = getelementptr inbounds i8, i8* %63, i64 32
  %65 = load i8*, i8** %11, align 8
  %66 = load i16, i16* %12, align 2
  %67 = call i32 @memcpy(i8* %64, i8* %65, i16 zeroext %66)
  %68 = load i32, i32* %10, align 4
  %69 = getelementptr inbounds [8192 x i8], [8192 x i8]* %19, i64 0, i64 0
  %70 = load i16, i16* %12, align 2
  %71 = zext i16 %70 to i64
  %72 = add i64 104, %71
  %73 = trunc i64 %72 to i32
  %74 = load %struct.sockaddr_in*, %struct.sockaddr_in** %9, align 8
  %75 = bitcast %struct.sockaddr_in* %74 to %struct.sockaddr*
  %76 = call i32 @sendto(i32 %68, i8* %69, i32 %73, i32 0, %struct.sockaddr* %75, i32 4)
  ret i32 %76
}

declare dso_local i8* @htons(i32) #1

declare dso_local i64 @in_cksum(i16*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i16 zeroext) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
