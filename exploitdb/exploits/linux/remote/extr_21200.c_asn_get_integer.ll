; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_asn_get_integer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_asn_get_integer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ASN_INTEGER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [38 x i8] c"error: error while talking to client\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"error: incorrent integer len received from client\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32* (i32*, i32*)* @asn_get_integer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32* @asn_get_integer(i32* %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32* %1, i32** %4, align 8
  %8 = load i32*, i32** %3, align 8
  %9 = getelementptr inbounds i32, i32* %8, i32 1
  store i32* %9, i32** %3, align 8
  %10 = load i32, i32* %8, align 4
  %11 = load i32, i32* @ASN_INTEGER, align 4
  %12 = icmp ne i32 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32 @fatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  br label %15

15:                                               ; preds = %13, %2
  %16 = load i32*, i32** %3, align 8
  %17 = getelementptr inbounds i32, i32* %16, i32 1
  store i32* %17, i32** %3, align 8
  %18 = load i32, i32* %16, align 4
  store i32 %18, i32* %5, align 4
  %19 = load i32, i32* %5, align 4
  %20 = icmp ne i32 %19, 1
  br i1 %20, label %21, label %29

21:                                               ; preds = %15
  %22 = load i32, i32* %5, align 4
  %23 = icmp ne i32 %22, 2
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load i32, i32* %5, align 4
  %26 = icmp ne i32 %25, 4
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = call i32 @fatal(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  br label %29

29:                                               ; preds = %27, %24, %21, %15
  %30 = load i32, i32* %5, align 4
  switch i32 %30, label %34 [
    i32 4, label %31
    i32 2, label %32
    i32 1, label %33
  ]

31:                                               ; preds = %29
  store i32 24, i32* %6, align 4
  br label %34

32:                                               ; preds = %29
  store i32 8, i32* %6, align 4
  br label %34

33:                                               ; preds = %29
  store i32 0, i32* %6, align 4
  br label %34

34:                                               ; preds = %29, %33, %32, %31
  store i32 0, i32* %7, align 4
  br label %35

35:                                               ; preds = %39, %34
  %36 = load i32, i32* %5, align 4
  %37 = add nsw i32 %36, -1
  store i32 %37, i32* %5, align 4
  %38 = icmp ne i32 %36, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %35
  %40 = load i32*, i32** %3, align 8
  %41 = getelementptr inbounds i32, i32* %40, i32 1
  store i32* %41, i32** %3, align 8
  %42 = load i32, i32* %40, align 4
  %43 = load i32, i32* %6, align 4
  %44 = shl i32 %42, %43
  %45 = load i32, i32* %7, align 4
  %46 = or i32 %45, %44
  store i32 %46, i32* %7, align 4
  %47 = load i32, i32* %6, align 4
  %48 = sub nsw i32 %47, 8
  store i32 %48, i32* %6, align 4
  br label %35

49:                                               ; preds = %35
  %50 = load i32, i32* %7, align 4
  %51 = load i32*, i32** %4, align 8
  store i32 %50, i32* %51, align 4
  %52 = load i32*, i32** %3, align 8
  ret i32* %52
}

declare dso_local i32 @fatal(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
