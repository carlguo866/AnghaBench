; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21937.c_get_ban.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21937.c_get_ban.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"socket() error.\0A\00", align 1
@GAZTEK_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"\22%s\22 is an invalid ip address.\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"connect() error.\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"HEAD HTTP /\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"write() error.\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"read() error.\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Server\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"****** FULL HEADERS ******\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_ban(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %2, align 8
  %9 = load i32, i32* @AF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = call i32 @socket(i32 %9, i32 %10, i32 0)
  store i32 %11, i32* %4, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %13, label %16

13:                                               ; preds = %1
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @exit(i32 -1) #3
  unreachable

16:                                               ; preds = %1
  %17 = load i32, i32* @AF_INET, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* @GAZTEK_PORT, align 4
  %20 = call i32 @htons(i32 %19)
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i8*, i8** %2, align 8
  %23 = call i32 @inet_addr(i8* %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = icmp eq i32 %23, -1
  br i1 %26, label %27, label %31

27:                                               ; preds = %16
  %28 = load i8*, i8** %2, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 -1) #3
  unreachable

31:                                               ; preds = %16
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %33 = call i32 @bzero(i32* %32, i32 8)
  %34 = load i32, i32* %4, align 4
  %35 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %36 = call i32 @connect(i32 %34, %struct.sockaddr* %35, i32 16)
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  %40 = call i32 @exit(i32 -1) #3
  unreachable

41:                                               ; preds = %31
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @write(i32 %42, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 13)
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  %47 = call i32 @exit(i32 -1) #3
  unreachable

48:                                               ; preds = %41
  %49 = call i8* @malloc(i32 256)
  store i8* %49, i8** %5, align 8
  %50 = call i8* @malloc(i32 256)
  store i8* %50, i8** %6, align 8
  %51 = load i32, i32* %4, align 4
  %52 = load i8*, i8** %5, align 8
  %53 = call i32 @read(i32 %51, i8* %52, i32 256)
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %58

55:                                               ; preds = %48
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %57 = call i32 @exit(i32 -1) #3
  unreachable

58:                                               ; preds = %48
  %59 = load i8*, i8** %6, align 8
  %60 = load i8*, i8** %5, align 8
  %61 = call i32 @strcpy(i8* %59, i8* %60)
  %62 = load i8*, i8** %6, align 8
  %63 = call i8* @strstr(i8* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  store i8* %63, i8** %7, align 8
  %64 = load i8*, i8** %7, align 8
  %65 = call i8* @strtok(i8* %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i8* %65, i8** %7, align 8
  %66 = load i8*, i8** %7, align 8
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %66)
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %69 = load i8*, i8** %5, align 8
  %70 = call i8* @strtok(i8* %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i8* %70, i8** %7, align 8
  store i32 0, i32* %3, align 4
  br label %71

71:                                               ; preds = %78, %58
  %72 = load i32, i32* %3, align 4
  %73 = icmp slt i32 %72, 4
  br i1 %73, label %74, label %81

74:                                               ; preds = %71
  %75 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i8* %75, i8** %7, align 8
  %76 = load i8*, i8** %7, align 8
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i8* %76)
  br label %78

78:                                               ; preds = %74
  %79 = load i32, i32* %3, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %3, align 4
  br label %71

81:                                               ; preds = %71
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %83 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i8* @strtok(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
