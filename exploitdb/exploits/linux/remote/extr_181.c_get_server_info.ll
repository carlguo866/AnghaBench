; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_get_server_info.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_get_server_info.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"details\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c".  connecting to the server...  \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"\08server down!\0D*\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\08done\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"\09 server_name  [%s]\0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"\09    map_name  [%s]\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"\09   game_name  [%s]\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"\09users_online  [%d of %d]\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"\09   remote_OS  [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"windows\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"linux\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_server_info(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [256 x i8], align 16
  %13 = alloca i8*, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 3
  store i8 -1, i8* %14, align 1
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 2
  store i8 -1, i8* %15, align 2
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 1
  store i8 -1, i8* %16, align 1
  %17 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  store i8 -1, i8* %17, align 16
  %18 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 4
  %19 = call i32 @sprintf(i8* %18, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* %5, align 4
  %21 = load i32, i32* %6, align 4
  %22 = load i32, i32* %7, align 4
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = call i64 @strlen(i8* %24)
  %26 = call i32 @udp_send(i32 %20, i32 %21, i32 %22, i8* %23, i64 %25)
  store i32 %26, i32* %10, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %28 = load i32, i32* @stdout, align 4
  %29 = call i32 @fflush(i32 %28)
  %30 = load i32, i32* %5, align 4
  %31 = call i64 @async_read(i32 %30, i32 6)
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %3
  br label %41

34:                                               ; preds = %3
  %35 = load i32, i32* %5, align 4
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %37 = call i32 @udp_read(i32 %35, i32* %6, i32* %7, i8* %36, i32 256)
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %34
  br label %41

41:                                               ; preds = %40, %33
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %43 = call i32 @exit(i32 0) #3
  unreachable

44:                                               ; preds = %34
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 4
  store i8* %46, i8** %13, align 8
  %47 = load i8*, i8** %13, align 8
  %48 = call i64 @strlen(i8* %47)
  %49 = add nsw i64 %48, 1
  %50 = load i8*, i8** %13, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %49
  store i8* %51, i8** %13, align 8
  %52 = load i8*, i8** %13, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %52)
  %54 = load i8*, i8** %13, align 8
  %55 = call i64 @strlen(i8* %54)
  %56 = add nsw i64 %55, 1
  %57 = load i8*, i8** %13, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %56
  store i8* %58, i8** %13, align 8
  %59 = load i8*, i8** %13, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i8* %59)
  %61 = load i8*, i8** %13, align 8
  %62 = call i64 @strlen(i8* %61)
  %63 = add nsw i64 %62, 1
  %64 = load i8*, i8** %13, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  store i8* %65, i8** %13, align 8
  %66 = load i8*, i8** %13, align 8
  %67 = call i64 @strlen(i8* %66)
  %68 = add nsw i64 %67, 1
  %69 = load i8*, i8** %13, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  store i8* %70, i8** %13, align 8
  %71 = load i8*, i8** %13, align 8
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* %71)
  %73 = load i8*, i8** %13, align 8
  %74 = call i64 @strlen(i8* %73)
  %75 = add nsw i64 %74, 1
  %76 = load i8*, i8** %13, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8* %77, i8** %13, align 8
  %78 = load i8*, i8** %13, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 0
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = load i8*, i8** %13, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i32 %81, i32 %85)
  %87 = load i8*, i8** %13, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 3
  store i8* %88, i8** %13, align 8
  %89 = load i8*, i8** %13, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 1
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 119
  br i1 %93, label %94, label %95

94:                                               ; preds = %44
  br label %103

95:                                               ; preds = %44
  %96 = load i8*, i8** %13, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = icmp eq i32 %99, 108
  %101 = zext i1 %100 to i64
  %102 = select i1 %100, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0)
  br label %103

103:                                              ; preds = %95, %94
  %104 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), %94 ], [ %102, %95 ]
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8* %104)
  %106 = load i8*, i8** %13, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = icmp eq i32 %109, 119
  br i1 %110, label %111, label %112

111:                                              ; preds = %103
  store i32 2, i32* %4, align 4
  br label %120

112:                                              ; preds = %103
  %113 = load i8*, i8** %13, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = icmp eq i32 %116, 108
  br i1 %117, label %118, label %119

118:                                              ; preds = %112
  store i32 1, i32* %4, align 4
  br label %120

119:                                              ; preds = %112
  store i32 0, i32* %4, align 4
  br label %120

120:                                              ; preds = %119, %118, %111
  %121 = load i32, i32* %4, align 4
  ret i32 %121
}

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @udp_send(i32, i32, i32, i8*, i64) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i64 @async_read(i32, i32) #1

declare dso_local i32 @udp_read(i32, i32*, i32*, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
