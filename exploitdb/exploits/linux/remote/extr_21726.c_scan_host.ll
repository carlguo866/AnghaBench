; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21726.c_scan_host.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21726.c_scan_host.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.c_info = type { i32, i8* }
%struct.sockaddr_in = type { i32, i64, i32, i32, i32 }
%struct.timeval = type { i32, i64, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@MAXHOSTS = common dso_local global i32 0, align 4
@sockfd = common dso_local global i32* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"\0Asocket\00", align 1
@TIMEOUT = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"inet_aton error\0A\00", align 1
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"fcntl error\0A\00", align 1
@errno = common dso_local global i64 0, align 8
@EINPROGRESS = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [33 x i8] c"\09[%s]\09MySQLD running on port %d\0A\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4
@ECONNREFUSED = common dso_local global i32 0, align 4
@EHOSTUNREACH = common dso_local global i32 0, align 4
@BRIGHT = common dso_local global i32 0, align 4
@RED = common dso_local global i32 0, align 4
@BLACK = common dso_local global i32 0, align 4
@RESET = common dso_local global i32 0, align 4
@DEFAULT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scan_host(%struct.c_info* %0) #0 {
  %2 = alloca %struct.c_info*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.c_info*, align 8
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca %struct.timeval, align 8
  store %struct.c_info* %0, %struct.c_info** %2, align 8
  %12 = load %struct.c_info*, %struct.c_info** %2, align 8
  store %struct.c_info* %12, %struct.c_info** %9, align 8
  store i32 0, i32* %4, align 4
  br label %13

13:                                               ; preds = %30, %1
  %14 = load i32, i32* %4, align 4
  %15 = load i32, i32* @MAXHOSTS, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %33

17:                                               ; preds = %13
  %18 = load i32*, i32** @sockfd, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %17
  %25 = load i32*, i32** @sockfd, align 8
  %26 = load i32, i32* %4, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %25, i64 %27
  store i32* %28, i32** %3, align 8
  br label %33

29:                                               ; preds = %17
  br label %30

30:                                               ; preds = %29
  %31 = load i32, i32* %4, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %4, align 4
  br label %13

33:                                               ; preds = %24, %13
  %34 = load i32, i32* @AF_INET, align 4
  %35 = load i32, i32* @SOCK_STREAM, align 4
  %36 = load i32, i32* @IPPROTO_IP, align 4
  %37 = call i32 @socket(i32 %34, i32 %35, i32 %36)
  %38 = load i32*, i32** %3, align 8
  store i32 %37, i32* %38, align 4
  %39 = icmp eq i32 %37, -1
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %42 = call i32 @exit(i32 -1) #3
  unreachable

43:                                               ; preds = %33
  %44 = bitcast %struct.sockaddr_in* %10 to %struct.timeval*
  %45 = call i32 @bzero(%struct.timeval* %44, i32 32)
  %46 = call i32 @bzero(%struct.timeval* %11, i32 32)
  %47 = load %struct.c_info*, %struct.c_info** %9, align 8
  %48 = getelementptr inbounds %struct.c_info, %struct.c_info* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = call i32 @htons(i32 %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 4
  store i32 %50, i32* %51, align 8
  %52 = load i32, i32* @AF_INET, align 4
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 3
  store i32 %52, i32* %53, align 4
  %54 = load i32, i32* @TIMEOUT, align 4
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 2
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i64 0, i64* %56, align 8
  %57 = load %struct.c_info*, %struct.c_info** %9, align 8
  %58 = getelementptr inbounds %struct.c_info, %struct.c_info* %57, i32 0, i32 1
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %61 = call i32 @inet_aton(i8* %59, i32* %60)
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %43
  %64 = load i32, i32* @stderr, align 4
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %66 = call i32 @pthread_exit(i32 0)
  br label %67

67:                                               ; preds = %63, %43
  %68 = load i32*, i32** %3, align 8
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* @F_SETFL, align 4
  %71 = load i32, i32* @O_NONBLOCK, align 4
  %72 = call i32 @fcntl(i32 %69, i32 %70, i32 %71)
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %74, label %78

74:                                               ; preds = %67
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %77 = call i32 @pthread_exit(i32 0)
  br label %78

78:                                               ; preds = %74, %67
  %79 = load i32*, i32** %3, align 8
  %80 = load i32, i32* %79, align 4
  %81 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %82 = call i32 @connect(i32 %80, %struct.sockaddr* %81, i32 32)
  store i32 %82, i32* %6, align 4
  %83 = icmp eq i32 %82, -1
  br i1 %83, label %84, label %94

84:                                               ; preds = %78
  %85 = load i64, i64* @errno, align 8
  %86 = load i64, i64* @EINPROGRESS, align 8
  %87 = icmp ne i64 %85, %86
  br i1 %87, label %88, label %93

88:                                               ; preds = %84
  %89 = load i32*, i32** %3, align 8
  %90 = load i32, i32* %89, align 4
  %91 = call i32 @close(i32 %90)
  %92 = call i32 @pthread_exit(i32 0)
  br label %93

93:                                               ; preds = %88, %84
  br label %107

94:                                               ; preds = %78
  %95 = load i32, i32* %6, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %106

97:                                               ; preds = %94
  %98 = load %struct.c_info*, %struct.c_info** %9, align 8
  %99 = getelementptr inbounds %struct.c_info, %struct.c_info* %98, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = load %struct.c_info*, %struct.c_info** %9, align 8
  %102 = getelementptr inbounds %struct.c_info, %struct.c_info* %101, i32 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %100, i32 %103)
  %105 = call i32 @pthread_exit(i32 0)
  br label %106

106:                                              ; preds = %97, %94
  br label %107

107:                                              ; preds = %106, %93
  store i32 4, i32* %5, align 4
  %108 = load i32*, i32** %3, align 8
  %109 = load i32, i32* %108, align 4
  %110 = call i32 @FD_SET(i32 %109, i32* %8)
  %111 = load i32*, i32** %3, align 8
  %112 = load i32, i32* %111, align 4
  %113 = add nsw i32 %112, 1
  %114 = call i32 @select(i32 %113, i32* null, i32* %8, i32* null, %struct.timeval* %11)
  store i32 %114, i32* %6, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %121

116:                                              ; preds = %107
  %117 = load i32*, i32** %3, align 8
  %118 = load i32, i32* %117, align 4
  %119 = call i32 @close(i32 %118)
  %120 = call i32 @pthread_exit(i32 0)
  br label %130

121:                                              ; preds = %107
  %122 = load i32, i32* %6, align 4
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %124, label %129

124:                                              ; preds = %121
  %125 = load i32*, i32** %3, align 8
  %126 = load i32, i32* %125, align 4
  %127 = call i32 @close(i32 %126)
  %128 = call i32 @pthread_exit(i32 0)
  br label %129

129:                                              ; preds = %124, %121
  br label %130

130:                                              ; preds = %129, %116
  %131 = load i32*, i32** %3, align 8
  %132 = load i32, i32* %131, align 4
  %133 = load i32, i32* @SOL_SOCKET, align 4
  %134 = load i32, i32* @SO_ERROR, align 4
  %135 = call i32 @getsockopt(i32 %132, i32 %133, i32 %134, i32* %7, i32* %5)
  %136 = load i32, i32* %7, align 4
  %137 = load i32, i32* @ECONNREFUSED, align 4
  %138 = icmp eq i32 %136, %137
  br i1 %138, label %139, label %144

139:                                              ; preds = %130
  %140 = load i32*, i32** %3, align 8
  %141 = load i32, i32* %140, align 4
  %142 = call i32 @close(i32 %141)
  %143 = call i32 @pthread_exit(i32 0)
  br label %154

144:                                              ; preds = %130
  %145 = load i32, i32* %7, align 4
  %146 = load i32, i32* @EHOSTUNREACH, align 4
  %147 = icmp eq i32 %145, %146
  br i1 %147, label %148, label %153

148:                                              ; preds = %144
  %149 = load i32*, i32** %3, align 8
  %150 = load i32, i32* %149, align 4
  %151 = call i32 @close(i32 %150)
  %152 = call i32 @pthread_exit(i32 0)
  br label %153

153:                                              ; preds = %148, %144
  br label %154

154:                                              ; preds = %153, %139
  %155 = load i32, i32* @BRIGHT, align 4
  %156 = load i32, i32* @RED, align 4
  %157 = load i32, i32* @BLACK, align 4
  %158 = call i32 @textcolor(i32 %155, i32 %156, i32 %157)
  %159 = load i32, i32* @stderr, align 4
  %160 = load %struct.c_info*, %struct.c_info** %9, align 8
  %161 = getelementptr inbounds %struct.c_info, %struct.c_info* %160, i32 0, i32 1
  %162 = load i8*, i8** %161, align 8
  %163 = load %struct.c_info*, %struct.c_info** %9, align 8
  %164 = getelementptr inbounds %struct.c_info, %struct.c_info* %163, i32 0, i32 0
  %165 = load i32, i32* %164, align 8
  %166 = call i32 (i32, i8*, ...) @fprintf(i32 %159, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %162, i32 %165)
  %167 = load i32, i32* @RESET, align 4
  %168 = load i32, i32* @DEFAULT, align 4
  %169 = load i32, i32* @DEFAULT, align 4
  %170 = call i32 @textcolor(i32 %167, i32 %168, i32 %169)
  %171 = load i32*, i32** %3, align 8
  %172 = load i32, i32* %171, align 4
  %173 = call i32 @close(i32 %172)
  %174 = load %struct.c_info*, %struct.c_info** %9, align 8
  %175 = getelementptr inbounds %struct.c_info, %struct.c_info* %174, i32 0, i32 1
  %176 = load i8*, i8** %175, align 8
  %177 = load %struct.c_info*, %struct.c_info** %9, align 8
  %178 = getelementptr inbounds %struct.c_info, %struct.c_info* %177, i32 0, i32 0
  %179 = load i32, i32* %178, align 8
  %180 = call i32 @finger_mysql(i8* %176, i32 %179)
  %181 = call i32 @pthread_exit(i32 0)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(%struct.timeval*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_aton(i8*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @pthread_exit(i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @getsockopt(i32, i32, i32, i32*, i32*) #1

declare dso_local i32 @textcolor(i32, i32, i32) #1

declare dso_local i32 @finger_mysql(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
