; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_bindshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_bindshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pollfd = type { i32, i32, i32 }

@.str = private unnamed_addr constant [19 x i8] c"pwd; id; uname -a\0A\00", align 1
@BUFSIZ = common dso_local global i32 0, align 4
@POLLIN = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"poll(): %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@POLLERR = common dso_local global i32 0, align 4
@POLLNVAL = common dso_local global i32 0, align 4
@POLLHUP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"connection closed\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @bindshell to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @bindshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [2 x %struct.pollfd], align 16
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8** %4, align 8
  %8 = load i32, i32* @BUFSIZ, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %5, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %6, align 8
  %12 = load i32, i32* %2, align 4
  %13 = load i8*, i8** %4, align 8
  %14 = load i8*, i8** %4, align 8
  %15 = call i32 @strlen(i8* %14)
  %16 = call i32 @write(i32 %12, i8* %13, i32 %15)
  br label %17

17:                                               ; preds = %87, %1
  br label %18

18:                                               ; preds = %17
  %19 = bitcast [2 x %struct.pollfd]* %3 to %struct.pollfd**
  %20 = call i32 @memset(%struct.pollfd** %19, i32 0, i32 24)
  %21 = load i32, i32* @POLLIN, align 4
  %22 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 1
  %23 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %22, i32 0, i32 0
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %25 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %24, i32 0, i32 0
  store i32 %21, i32* %25, align 16
  %26 = load i32, i32* %2, align 4
  %27 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %28 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %27, i32 0, i32 1
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 1
  %30 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %29, i32 0, i32 1
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %32 = call i64 @poll(%struct.pollfd* %31, i32 2, i32 -1)
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %18
  %35 = load i32, i32* @errno, align 4
  %36 = call i32 @strerror(i32 %35)
  %37 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %36)
  br label %38

38:                                               ; preds = %34, %18
  %39 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %40 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = load i32, i32* @POLLERR, align 4
  %43 = load i32, i32* @POLLNVAL, align 4
  %44 = or i32 %42, %43
  %45 = load i32, i32* @POLLHUP, align 4
  %46 = or i32 %44, %45
  %47 = and i32 %41, %46
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %38
  %50 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  br label %51

51:                                               ; preds = %49, %38
  %52 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %53 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %52, i32 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = load i32, i32* @POLLIN, align 4
  %56 = and i32 %54, %55
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %71

58:                                               ; preds = %51
  %59 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 0
  %60 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %59, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = load i32, i32* @BUFSIZ, align 4
  %63 = call i32 @read(i32 %61, i8* %11, i32 %62)
  store i32 %63, i32* %7, align 4
  %64 = load i32, i32* %7, align 4
  %65 = icmp slt i32 %64, 1
  br i1 %65, label %66, label %68

66:                                               ; preds = %58
  %67 = call i32 (i8*, ...) @fatal(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %58
  %69 = load i32, i32* %7, align 4
  %70 = call i32 @write(i32 1, i8* %11, i32 %69)
  br label %71

71:                                               ; preds = %68, %51
  %72 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 1
  %73 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %72, i32 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* @POLLIN, align 4
  %76 = and i32 %74, %75
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %71
  %79 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %3, i64 0, i64 1
  %80 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %79, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = load i32, i32* @BUFSIZ, align 4
  %83 = call i32 @read(i32 %81, i8* %11, i32 %82)
  store i32 %83, i32* %7, align 4
  %84 = load i32, i32* %2, align 4
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @write(i32 %84, i8* %11, i32 %85)
  br label %87

87:                                               ; preds = %78, %71
  br label %17
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memset(%struct.pollfd**, i32, i32) #2

declare dso_local i64 @poll(%struct.pollfd*, i32, i32) #2

declare dso_local i32 @fatal(i8*, ...) #2

declare dso_local i32 @strerror(i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
