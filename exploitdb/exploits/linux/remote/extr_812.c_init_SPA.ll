; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_init_SPA.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_812.c_init_SPA.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"read\00", align 1
@brutemode = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"[*] Server banner: %s\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"EHLO ECL.PWNZ.J00\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"NTLM\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"[?] Server doesn't seem to support SPA, trying anyway\0A\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"AUTH NTLM\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"334\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"[!] SPA unsupported! Server responds: %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"[*] SPA (NTLM) supported\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_SPA(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  store i32 %0, i32* %2, align 4
  %4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %5 = call i32 @memset(i8* %4, i32 0, i32 1024)
  %6 = load i32, i32* %2, align 4
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %8 = call i32 @read(i32 %6, i8* %7, i32 1024)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  %11 = call i32 @err(i32 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %10, %1
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 255
  store i8 0, i8* %13, align 1
  %14 = load i32, i32* @brutemode, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  br label %19

19:                                               ; preds = %16, %12
  %20 = load i32, i32* %2, align 4
  %21 = call i32 @write(i32 %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 18)
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %23 = call i32 @memset(i8* %22, i32 0, i32 1024)
  %24 = load i32, i32* %2, align 4
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %26 = call i32 @read(i32 %24, i8* %25, i32 1024)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %19
  %29 = call i32 @err(i32 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %40

30:                                               ; preds = %19
  %31 = load i32, i32* @brutemode, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %35 = call i32 @strstr(i8* %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0))
  br label %39

39:                                               ; preds = %37, %33, %30
  br label %40

40:                                               ; preds = %39, %28
  %41 = load i32, i32* %2, align 4
  %42 = call i32 @write(i32 %41, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 10)
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %44 = call i32 @memset(i8* %43, i32 0, i32 1024)
  %45 = load i32, i32* %2, align 4
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %47 = call i32 @read(i32 %45, i8* %46, i32 1024)
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %40
  %50 = call i32 @err(i32 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %63

51:                                               ; preds = %40
  %52 = load i32, i32* @brutemode, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %62, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %56 = call i32 @strstr(i8* %55, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i8* %59)
  %61 = call i32 @exit(i32 1) #3
  unreachable

62:                                               ; preds = %54, %51
  br label %63

63:                                               ; preds = %62, %49
  %64 = load i32, i32* @brutemode, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %63
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strstr(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
