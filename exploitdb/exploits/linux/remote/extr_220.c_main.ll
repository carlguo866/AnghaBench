; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_220.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_220.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.system_type = type { i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"s:u:e:h:\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@systems = common dso_local global %struct.system_type* null, align 8
@STDOUT_FILENO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2000 x i8], align 16
  %7 = alloca %struct.system_type*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [2048 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = call i32 (...) @usage()
  br label %20

20:                                               ; preds = %18, %2
  br label %21

21:                                               ; preds = %47, %20
  %22 = load i32, i32* %4, align 4
  %23 = load i8**, i8*** %5, align 8
  %24 = call i32 @getopt(i32 %22, i8** %23, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  store i32 %24, i32* %15, align 4
  %25 = icmp ne i32 %24, -1
  br i1 %25, label %26, label %48

26:                                               ; preds = %21
  %27 = load i32, i32* %15, align 4
  switch i32 %27, label %45 [
    i32 104, label %28
    i32 101, label %31
    i32 115, label %34
    i32 117, label %39
    i32 63, label %44
  ]

28:                                               ; preds = %26
  %29 = load i8*, i8** @optarg, align 8
  %30 = call i32 @sscanf(i8* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %11)
  br label %47

31:                                               ; preds = %26
  %32 = load i8*, i8** @optarg, align 8
  %33 = call i32 @sscanf(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %10)
  br label %47

34:                                               ; preds = %26
  %35 = load %struct.system_type*, %struct.system_type** @systems, align 8
  %36 = load i8*, i8** @optarg, align 8
  %37 = call i64 @atoi(i8* %36)
  %38 = getelementptr inbounds %struct.system_type, %struct.system_type* %35, i64 %37
  store %struct.system_type* %38, %struct.system_type** %7, align 8
  br label %47

39:                                               ; preds = %26
  %40 = load i8*, i8** @optarg, align 8
  store i8* %40, i8** %8, align 8
  %41 = load i8*, i8** %8, align 8
  %42 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  %43 = call i32 @parse_url(i8* %41, i8* %42)
  br label %47

44:                                               ; preds = %26
  br label %45

45:                                               ; preds = %26, %44
  %46 = call i32 (...) @usage()
  br label %47

47:                                               ; preds = %45, %39, %34, %31, %28
  br label %21

48:                                               ; preds = %21
  %49 = load i32, i32* %10, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %48
  %52 = load i32, i32* %10, align 4
  %53 = load %struct.system_type*, %struct.system_type** %7, align 8
  %54 = getelementptr inbounds %struct.system_type, %struct.system_type* %53, i32 0, i32 0
  store i32 %52, i32* %54, align 4
  br label %55

55:                                               ; preds = %51, %48
  %56 = load i32, i32* %11, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %55
  %59 = load i32, i32* %11, align 4
  %60 = load %struct.system_type*, %struct.system_type** %7, align 8
  %61 = getelementptr inbounds %struct.system_type, %struct.system_type* %60, i32 0, i32 1
  store i32 %59, i32* %61, align 4
  br label %62

62:                                               ; preds = %58, %55
  %63 = getelementptr inbounds [2000 x i8], [2000 x i8]* %6, i64 0, i64 0
  %64 = load %struct.system_type*, %struct.system_type** %7, align 8
  %65 = load i8*, i8** %8, align 8
  %66 = call i32 @prepare_attack_buffer(i8* %63, %struct.system_type* %64, i8* %65)
  %67 = load i32, i32* @STDOUT_FILENO, align 4
  %68 = getelementptr inbounds [2000 x i8], [2000 x i8]* %6, i64 0, i64 0
  %69 = call i32 @write(i32 %67, i8* %68, i32 2000)
  %70 = load i32, i32* %3, align 4
  ret i32 %70
}

declare dso_local i32 @usage(...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @parse_url(i8*, i8*) #1

declare dso_local i32 @prepare_attack_buffer(i8*, %struct.system_type*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
