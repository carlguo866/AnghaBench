; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_send_pong.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_send_pong.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ip = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@MSG_ID_SIZE = common dso_local global i32 0, align 4
@MsgId = common dso_local global i8* null, align 8
@Len = common dso_local global i32 0, align 4
@Hdr = common dso_local global i8* null, align 8
@PONG_DESCR = common dso_local global i32 0, align 4
@HDR_SIZE = common dso_local global i32 0, align 4
@out_stream = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"send_pong(): couldn't send header\0A\00", align 1
@Payload = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"send_pong(): couldn't send payload\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_pong(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 16777343, i32* @ip, align 4
  store i32 50000, i32* @port, align 4
  %5 = load i32, i32* @MSG_ID_SIZE, align 4
  %6 = load i8*, i8** @MsgId, align 8
  %7 = call i32 @random_array(i32 %5, i8* %6)
  %8 = load i8*, i8** @MsgId, align 8
  store i8* %8, i8** %3, align 8
  store i32 14, i32* @Len, align 4
  %9 = load i8*, i8** @Hdr, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = load i32, i32* @PONG_DESCR, align 4
  %12 = load i32, i32* @Len, align 4
  %13 = call i32 @set_descr_hdr(i8* %9, i8* %10, i32 %11, i32 5, i32 0, i32 %12)
  %14 = load i32, i32* %2, align 4
  %15 = load i8*, i8** @Hdr, align 8
  %16 = load i32, i32* @HDR_SIZE, align 4
  %17 = call i32 @write_buf(i32 %14, i8* %15, i32 %16)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %1
  %20 = load i32, i32* @out_stream, align 4
  %21 = call i32 @fprintf(i32 %20, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  br label %22

22:                                               ; preds = %19, %1
  %23 = load i32, i32* @Len, align 4
  store i32 %23, i32* %4, align 4
  %24 = load i32, i32* %4, align 4
  %25 = load i8*, i8** @Payload, align 8
  %26 = call i32 @random_array(i32 %24, i8* %25)
  %27 = load i8*, i8** @Payload, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 0
  %29 = call i32 @memcpy(i8* %28, i32* @port, i32 2)
  %30 = load i8*, i8** @Payload, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 2
  %32 = call i32 @memcpy(i8* %31, i32* @ip, i32 4)
  %33 = load i32, i32* %2, align 4
  %34 = load i8*, i8** @Payload, align 8
  %35 = load i32, i32* %4, align 4
  %36 = call i32 @write_buf(i32 %33, i8* %34, i32 %35)
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %22
  %39 = load i32, i32* @out_stream, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %41

41:                                               ; preds = %38, %22
  ret void
}

declare dso_local i32 @random_array(i32, i8*) #1

declare dso_local i32 @set_descr_hdr(i8*, i8*, i32, i32, i32, i32) #1

declare dso_local i32 @write_buf(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
