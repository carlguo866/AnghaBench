; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3787.c_get_10_ip.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3787.c_get_10_ip.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@xterm_ip_count = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"0x%02x%02x\00", align 1
@xterm_shell = common dso_local global i64* null, align 8
@IP1 = common dso_local global i64 0, align 8
@IP2 = common dso_local global i64 0, align 8
@IP3 = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_10_ip(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [32 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %4, align 4
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %8, align 8
  store i64 %10, i64* %7, align 8
  store i64 %10, i64* %6, align 8
  store i64 %10, i64* %5, align 8
  %11 = load i8*, i8** %2, align 8
  %12 = call i32 @sscanf(i8* %11, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i64* %6, i64* %7, i64* %8, i64* %9)
  store i64 0, i64* %5, align 8
  %13 = load i64, i64* %6, align 8
  %14 = mul i64 %13, 16777216
  %15 = load i64, i64* %5, align 8
  %16 = add i64 %15, %14
  store i64 %16, i64* %5, align 8
  %17 = load i64, i64* %7, align 8
  %18 = mul i64 %17, 65536
  %19 = load i64, i64* %5, align 8
  %20 = add i64 %19, %18
  store i64 %20, i64* %5, align 8
  %21 = load i64, i64* %8, align 8
  %22 = mul i64 %21, 256
  %23 = load i64, i64* %5, align 8
  %24 = add i64 %23, %22
  store i64 %24, i64* %5, align 8
  %25 = load i64, i64* %9, align 8
  %26 = load i64, i64* %5, align 8
  %27 = add i64 %26, %25
  store i64 %27, i64* %5, align 8
  %28 = load i8*, i8** %2, align 8
  %29 = call i32 @memset(i8* %28, i32 0, i32 256)
  %30 = load i8*, i8** %2, align 8
  %31 = load i64, i64* %5, align 8
  %32 = call i32 @sprintf(i8* %30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %31)
  store i32 5, i32* @xterm_ip_count, align 4
  store i32 0, i32* %4, align 4
  br label %33

33:                                               ; preds = %60, %1
  %34 = load i32, i32* %4, align 4
  %35 = icmp slt i32 %34, 10
  br i1 %35, label %36, label %63

36:                                               ; preds = %33
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 0
  %38 = call i32 @memset(i8* %37, i32 0, i32 32)
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 0
  %40 = load i8*, i8** %2, align 8
  %41 = load i32, i32* %4, align 4
  %42 = add nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %40, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = load i8*, i8** %2, align 8
  %47 = load i32, i32* %4, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = call i32 @snprintf(i8* %39, i32 31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8 signext %45, i8 signext %50)
  %52 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 0
  %53 = call i64 @strtoul(i8* %52, i32* null, i32 0)
  store i64 %53, i64* %5, align 8
  %54 = load i64, i64* %5, align 8
  %55 = load i64*, i64** @xterm_shell, align 8
  %56 = load i32, i32* @xterm_ip_count, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* @xterm_ip_count, align 4
  %58 = sext i32 %56 to i64
  %59 = getelementptr inbounds i64, i64* %55, i64 %58
  store i64 %54, i64* %59, align 8
  br label %60

60:                                               ; preds = %36
  %61 = load i32, i32* %4, align 4
  %62 = add nsw i32 %61, 2
  store i32 %62, i32* %4, align 4
  br label %33

63:                                               ; preds = %33
  ret i32 0
}

declare dso_local i32 @sscanf(i8*, i8*, i64*, i64*, i64*, i64*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i64) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8 signext, i8 signext) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
