; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_8556.c_raw_socket_engine.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_8556.c_raw_socket_engine.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sctp_hdr = type { i32, i32, i64 }
%struct.sctp_chk = type { i64, i64 }
%struct.timeval = type { i32, i64 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_SCTP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"socket: RAW/SCTP\00", align 1
@SCTP_SACK = common dso_local global i64 0, align 8
@SCTP_INIT_ACK = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @raw_socket_engine(i64 %0, i64 %1, i64 %2, i32* %3, i32* %4, i32* %5, i32* %6) #0 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca [1500 x i8], align 16
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca %struct.sctp_hdr*, align 8
  %19 = alloca %struct.sctp_chk*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca %struct.timeval, align 8
  %25 = alloca i32, align 4
  store i64 %0, i64* %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store i32* %3, i32** %11, align 8
  store i32* %4, i32** %12, align 8
  store i32* %5, i32** %13, align 8
  store i32* %6, i32** %14, align 8
  %26 = load i32, i32* @PF_INET, align 4
  %27 = load i32, i32* @SOCK_RAW, align 4
  %28 = load i32, i32* @IPPROTO_SCTP, align 4
  %29 = call i32 @socket(i32 %26, i32 %27, i32 %28)
  store i32 %29, i32* %25, align 4
  %30 = load i32, i32* %25, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %7
  %33 = call i32 @__fatal_perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %7
  %35 = call i32 @FD_ZERO(i32* %23)
  %36 = load i32, i32* %25, align 4
  %37 = call i32 @FD_SET(i32 %36, i32* %23)
  %38 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 1
  store i64 0, i64* %38, align 8
  %39 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 0
  store i32 10, i32* %39, align 8
  br label %40

40:                                               ; preds = %155, %61, %34
  %41 = load i32, i32* %25, align 4
  %42 = add nsw i32 %41, 1
  %43 = call i64 @select(i32 %42, i32* %23, i32* null, i32* null, %struct.timeval* %24)
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %161

45:                                               ; preds = %40
  %46 = load i32, i32* %25, align 4
  %47 = getelementptr inbounds [1500 x i8], [1500 x i8]* %15, i64 0, i64 0
  %48 = call i32 @read(i32 %46, i8* %47, i32 1500)
  store i32 %48, i32* %16, align 4
  %49 = getelementptr inbounds [1500 x i8], [1500 x i8]* %15, i64 0, i64 0
  %50 = load i32, i32* %16, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  store i8* %52, i8** %17, align 8
  %53 = getelementptr inbounds [1500 x i8], [1500 x i8]* %15, i64 0, i64 0
  %54 = getelementptr inbounds i8, i8* %53, i64 4
  %55 = bitcast i8* %54 to %struct.sctp_hdr*
  store %struct.sctp_hdr* %55, %struct.sctp_hdr** %18, align 8
  %56 = load %struct.sctp_hdr*, %struct.sctp_hdr** %18, align 8
  %57 = bitcast %struct.sctp_hdr* %56 to i8*
  %58 = getelementptr inbounds i8, i8* %57, i64 4
  %59 = load i8*, i8** %17, align 8
  %60 = icmp uge i8* %58, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %45
  br label %40

62:                                               ; preds = %45
  %63 = load %struct.sctp_hdr*, %struct.sctp_hdr** %18, align 8
  %64 = getelementptr inbounds %struct.sctp_hdr, %struct.sctp_hdr* %63, i32 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = inttoptr i64 %65 to %struct.sctp_chk*
  store %struct.sctp_chk* %66, %struct.sctp_chk** %19, align 8
  %67 = load %struct.sctp_chk*, %struct.sctp_chk** %19, align 8
  %68 = getelementptr inbounds %struct.sctp_chk, %struct.sctp_chk* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = call i32 @ntohl(i32 %71)
  store i32 %72, i32* %20, align 4
  %73 = load %struct.sctp_hdr*, %struct.sctp_hdr** %18, align 8
  %74 = getelementptr inbounds %struct.sctp_hdr, %struct.sctp_hdr* %73, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = call i64 @ntohs(i32 %75)
  store i64 %76, i64* %21, align 8
  %77 = load %struct.sctp_hdr*, %struct.sctp_hdr** %18, align 8
  %78 = getelementptr inbounds %struct.sctp_hdr, %struct.sctp_hdr* %77, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = call i64 @ntohs(i32 %79)
  store i64 %80, i64* %22, align 8
  %81 = load %struct.sctp_chk*, %struct.sctp_chk** %19, align 8
  %82 = getelementptr inbounds %struct.sctp_chk, %struct.sctp_chk* %81, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = load i64, i64* @SCTP_SACK, align 8
  %85 = icmp eq i64 %83, %84
  br i1 %85, label %86, label %109

86:                                               ; preds = %62
  %87 = load i64, i64* %21, align 8
  %88 = load i64, i64* %10, align 8
  %89 = icmp eq i64 %87, %88
  br i1 %89, label %90, label %97

90:                                               ; preds = %86
  %91 = load i64, i64* %22, align 8
  %92 = load i64, i64* %8, align 8
  %93 = icmp eq i64 %91, %92
  br i1 %93, label %94, label %97

94:                                               ; preds = %90
  %95 = load i32, i32* %20, align 4
  %96 = load i32*, i32** %11, align 8
  store i32 %95, i32* %96, align 4
  br label %97

97:                                               ; preds = %94, %90, %86
  %98 = load i64, i64* %21, align 8
  %99 = load i64, i64* %10, align 8
  %100 = icmp eq i64 %98, %99
  br i1 %100, label %101, label %108

101:                                              ; preds = %97
  %102 = load i64, i64* %22, align 8
  %103 = load i64, i64* %9, align 8
  %104 = icmp eq i64 %102, %103
  br i1 %104, label %105, label %108

105:                                              ; preds = %101
  %106 = load i32, i32* %20, align 4
  %107 = load i32*, i32** %13, align 8
  store i32 %106, i32* %107, align 4
  br label %108

108:                                              ; preds = %105, %101, %97
  br label %109

109:                                              ; preds = %108, %62
  %110 = load %struct.sctp_chk*, %struct.sctp_chk** %19, align 8
  %111 = getelementptr inbounds %struct.sctp_chk, %struct.sctp_chk* %110, i32 0, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = load i64, i64* @SCTP_INIT_ACK, align 8
  %114 = icmp eq i64 %112, %113
  br i1 %114, label %115, label %138

115:                                              ; preds = %109
  %116 = load i64, i64* %21, align 8
  %117 = load i64, i64* %10, align 8
  %118 = icmp eq i64 %116, %117
  br i1 %118, label %119, label %126

119:                                              ; preds = %115
  %120 = load i64, i64* %22, align 8
  %121 = load i64, i64* %8, align 8
  %122 = icmp eq i64 %120, %121
  br i1 %122, label %123, label %126

123:                                              ; preds = %119
  %124 = load i32, i32* %20, align 4
  %125 = load i32*, i32** %12, align 8
  store i32 %124, i32* %125, align 4
  br label %126

126:                                              ; preds = %123, %119, %115
  %127 = load i64, i64* %21, align 8
  %128 = load i64, i64* %10, align 8
  %129 = icmp eq i64 %127, %128
  br i1 %129, label %130, label %137

130:                                              ; preds = %126
  %131 = load i64, i64* %22, align 8
  %132 = load i64, i64* %9, align 8
  %133 = icmp eq i64 %131, %132
  br i1 %133, label %134, label %137

134:                                              ; preds = %130
  %135 = load i32, i32* %20, align 4
  %136 = load i32*, i32** %14, align 8
  store i32 %135, i32* %136, align 4
  br label %137

137:                                              ; preds = %134, %130, %126
  br label %138

138:                                              ; preds = %137, %109
  %139 = load i32*, i32** %12, align 8
  %140 = load i32, i32* %139, align 4
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %155

142:                                              ; preds = %138
  %143 = load i32*, i32** %11, align 8
  %144 = load i32, i32* %143, align 4
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %155

146:                                              ; preds = %142
  %147 = load i32*, i32** %14, align 8
  %148 = load i32, i32* %147, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %155

150:                                              ; preds = %146
  %151 = load i32*, i32** %13, align 8
  %152 = load i32, i32* %151, align 4
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %150
  br label %161

155:                                              ; preds = %150, %146, %142, %138
  %156 = call i32 @FD_ZERO(i32* %23)
  %157 = load i32, i32* %25, align 4
  %158 = call i32 @FD_SET(i32 %157, i32* %23)
  %159 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 1
  store i64 0, i64* %159, align 8
  %160 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 0
  store i32 10, i32* %160, align 8
  br label %40

161:                                              ; preds = %154, %40
  ret i32 0
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @__fatal_perror(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @ntohl(i32) #1

declare dso_local i64 @ntohs(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
