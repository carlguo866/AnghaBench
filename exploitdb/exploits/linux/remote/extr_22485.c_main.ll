; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22485.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22485.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addrinfo = type { i64, i32*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [5 x i8] c"s:t:\00", align 1
@optarg = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"strdup\00", align 1
@AF_UNSPEC = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [18 x i8] c"getaddrinfo : %s\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"domain\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"sendto\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [65500 x i8], align 16
  %7 = alloca %struct.addrinfo, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %9, align 8
  store i8* null, i8** %10, align 8
  br label %14

14:                                               ; preds = %40, %2
  %15 = load i32, i32* %4, align 4
  %16 = load i8**, i8*** %5, align 8
  %17 = call i32 @getopt(i32 %15, i8** %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %17, i32* %13, align 4
  %18 = icmp ne i32 %17, -1
  br i1 %18, label %19, label %41

19:                                               ; preds = %14
  %20 = load i32, i32* %13, align 4
  switch i32 %20, label %35 [
    i32 115, label %21
    i32 116, label %28
  ]

21:                                               ; preds = %19
  %22 = load i32, i32* @optarg, align 4
  %23 = call i8* @strdup(i32 %22)
  store i8* %23, i8** %9, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %120

27:                                               ; preds = %21
  br label %40

28:                                               ; preds = %19
  %29 = load i32, i32* @optarg, align 4
  %30 = call i8* @strdup(i32 %29)
  store i8* %30, i8** %10, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %120

34:                                               ; preds = %28
  br label %40

35:                                               ; preds = %19
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @usage(i8* %38)
  br label %40

40:                                               ; preds = %35, %34, %27
  br label %14

41:                                               ; preds = %14
  %42 = load i8*, i8** %9, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = load i8*, i8** %10, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %52

47:                                               ; preds = %44, %41
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @usage(i8* %50)
  br label %52

52:                                               ; preds = %47, %44
  %53 = getelementptr inbounds [65500 x i8], [65500 x i8]* %6, i64 0, i64 0
  %54 = call i32 @fill(i8* %53, i64* %11)
  %55 = call i32 @memset(%struct.addrinfo* %7, i32 0, i32 24)
  %56 = load i8*, i8** @AF_UNSPEC, align 8
  %57 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %7, i32 0, i32 2
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %7, i32 0, i32 1
  store i32* null, i32** %58, align 8
  %59 = load i8*, i8** %9, align 8
  %60 = call i32 @getaddrinfo(i8* %59, i8* null, %struct.addrinfo* %7, %struct.addrinfo** %8)
  store i32 %60, i32* %13, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %52
  %63 = load i32, i32* @stderr, align 4
  %64 = load i32, i32* %13, align 4
  %65 = call i8* @gai_strerror(i32 %64)
  %66 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* %65)
  store i32 1, i32* %3, align 4
  br label %120

67:                                               ; preds = %52
  %68 = load i32, i32* @PF_INET, align 4
  %69 = load i32, i32* @SOCK_DGRAM, align 4
  %70 = load i32, i32* @IPPROTO_UDP, align 4
  %71 = call i32 @socket(i32 %68, i32 %69, i32 %70)
  store i32 %71, i32* %12, align 4
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %75

73:                                               ; preds = %67
  %74 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %120

75:                                               ; preds = %67
  %76 = load i32, i32* %12, align 4
  %77 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %78 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %77, i32 0, i32 1
  %79 = load i32*, i32** %78, align 8
  %80 = bitcast i32* %79 to %struct.sockaddr*
  %81 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %82 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %81, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = call i64 @bind(i32 %76, %struct.sockaddr* %80, i64 %83)
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %75
  %87 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %120

88:                                               ; preds = %75
  %89 = call i32 @memset(%struct.addrinfo* %7, i32 0, i32 24)
  %90 = load i8*, i8** @AF_UNSPEC, align 8
  %91 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %7, i32 0, i32 2
  store i8* %90, i8** %91, align 8
  %92 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %7, i32 0, i32 1
  store i32* null, i32** %92, align 8
  %93 = load i8*, i8** %10, align 8
  %94 = call i32 @getaddrinfo(i8* %93, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), %struct.addrinfo* %7, %struct.addrinfo** %8)
  store i32 %94, i32* %13, align 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %88
  %97 = load i32, i32* @stderr, align 4
  %98 = load i32, i32* %13, align 4
  %99 = call i8* @gai_strerror(i32 %98)
  %100 = call i32 @fprintf(i32 %97, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* %99)
  store i32 1, i32* %3, align 4
  br label %120

101:                                              ; preds = %88
  %102 = load i32, i32* %12, align 4
  %103 = getelementptr inbounds [65500 x i8], [65500 x i8]* %6, i64 0, i64 0
  %104 = load i64, i64* %11, align 8
  %105 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %106 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %105, i32 0, i32 1
  %107 = load i32*, i32** %106, align 8
  %108 = bitcast i32* %107 to %struct.sockaddr*
  %109 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %110 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %109, i32 0, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = trunc i64 %111 to i32
  %113 = call i64 @sendto(i32 %102, i8* %103, i64 %104, i32 0, %struct.sockaddr* %108, i32 %112)
  %114 = icmp sle i64 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %101
  %116 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %120

117:                                              ; preds = %101
  %118 = load i32, i32* %12, align 4
  %119 = call i32 @close(i32 %118)
  store i32 0, i32* %3, align 4
  br label %120

120:                                              ; preds = %117, %115, %96, %86, %73, %62, %32, %25
  %121 = load i32, i32* %3, align 4
  ret i32 %121
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @fill(i8*, i64*) #1

declare dso_local i32 @memset(%struct.addrinfo*, i32, i32) #1

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i8* @gai_strerror(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i64) #1

declare dso_local i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
