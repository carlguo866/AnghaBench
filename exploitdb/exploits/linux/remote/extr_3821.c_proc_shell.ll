; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3821.c_proc_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3821.c_proc_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @proc_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [4097 x i8], align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %6 = load i32, i32* @SIGINT, align 4
  %7 = load i32, i32* @SIG_IGN, align 4
  %8 = call i32 @signal(i32 %6, i32 %7)
  %9 = load i32, i32* %2, align 4
  %10 = call i32 @write(i32 %9, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 13)
  br label %11

11:                                               ; preds = %1, %56
  %12 = call i32 @FD_ZERO(i32* %5)
  %13 = call i32 @FD_SET(i32 0, i32* %5)
  %14 = load i32, i32* %2, align 4
  %15 = call i32 @FD_SET(i32 %14, i32* %5)
  %16 = load i32, i32* %2, align 4
  %17 = add nsw i32 %16, 1
  %18 = call i32 @select(i32 %17, i32* %5, i32 0, i32 0, i32 0)
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %11
  %21 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %22

22:                                               ; preds = %20, %11
  %23 = call i64 @FD_ISSET(i32 0, i32* %5)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %41

25:                                               ; preds = %22
  %26 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %27 = call i32 @read(i32 0, i8* %26, i32 4096)
  store i32 %27, i32* %3, align 4
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %31

31:                                               ; preds = %29, %25
  %32 = load i32, i32* %2, align 4
  %33 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %34 = load i32, i32* %3, align 4
  %35 = call i32 @write(i32 %32, i8* %33, i32 %34)
  %36 = load i32, i32* %3, align 4
  %37 = icmp ne i32 %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %31
  %39 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %40

40:                                               ; preds = %38, %31
  br label %41

41:                                               ; preds = %40, %22
  %42 = load i32, i32* %2, align 4
  %43 = call i64 @FD_ISSET(i32 %42, i32* %5)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %56

45:                                               ; preds = %41
  %46 = load i32, i32* %2, align 4
  %47 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %48 = call i32 @read(i32 %46, i8* %47, i32 4096)
  store i32 %48, i32* %3, align 4
  %49 = icmp slt i32 %48, 1
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = call i32 @exit(i32 0) #3
  unreachable

52:                                               ; preds = %45
  %53 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %54 = load i32, i32* %3, align 4
  %55 = call i32 @write(i32 1, i8* %53, i32 %54)
  br label %56

56:                                               ; preds = %52, %41
  br label %11
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
