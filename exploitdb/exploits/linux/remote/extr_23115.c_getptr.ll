; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_getptr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_getptr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [36 x i8] c"getptr(): allocating memory failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getptr(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %5 = call i64 @malloc(i32 129)
  %6 = inttoptr i64 %5 to i8*
  store i8* %6, i8** %4, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %10

10:                                               ; preds = %8, %1
  %11 = load i8*, i8** %4, align 8
  %12 = call i32 @memset(i8* %11, i32 0, i32 129)
  store i32 0, i32* %3, align 4
  br label %13

13:                                               ; preds = %24, %10
  %14 = load i32, i32* %3, align 4
  %15 = icmp ult i32 %14, 128
  br i1 %15, label %16, label %27

16:                                               ; preds = %13
  %17 = load i32, i32* %2, align 4
  %18 = zext i32 %17 to i64
  %19 = load i8*, i8** %4, align 8
  %20 = load i32, i32* %3, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = bitcast i8* %22 to i64*
  store i64 %18, i64* %23, align 8
  br label %24

24:                                               ; preds = %16
  %25 = load i32, i32* %3, align 4
  %26 = add i32 %25, 4
  store i32 %26, i32* %3, align 4
  br label %13

27:                                               ; preds = %13
  %28 = load i8*, i8** %4, align 8
  ret i8* %28
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
