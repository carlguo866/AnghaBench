; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_380.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_380.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }

@BS = common dso_local global i32 0, align 4
@SHELL_PORT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"got a shell\0A\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"\0A - Connection closed by user\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"\0A - Connection terminated.\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"\0A - Read failure\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(%struct.sockaddr_in* %0) #0 {
  %2 = alloca %struct.sockaddr_in*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %2, align 8
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  %8 = load i32, i32* @BS, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %5, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %6, align 8
  %12 = load i32, i32* @SHELL_PORT, align 4
  %13 = call i32 @htons(i32 %12)
  %14 = load %struct.sockaddr_in*, %struct.sockaddr_in** %2, align 8
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i32 %13, i32* %15, align 4
  %16 = load %struct.sockaddr_in*, %struct.sockaddr_in** %2, align 8
  %17 = call i32 @conn(%struct.sockaddr_in* %16)
  store i32 %17, i32* %3, align 4
  %18 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 @FD_ZERO(i32* %7)
  br label %20

20:                                               ; preds = %75, %1
  br label %21

21:                                               ; preds = %20
  %22 = load i32, i32* @STDIN_FILENO, align 4
  %23 = call i32 @FD_SET(i32 %22, i32* %7)
  %24 = load i32, i32* %3, align 4
  %25 = call i32 @FD_SET(i32 %24, i32* %7)
  %26 = load i32, i32* %3, align 4
  %27 = add nsw i32 %26, 1
  %28 = call i32 @select(i32 %27, i32* %7, i32* null, i32* null, i32* null)
  %29 = icmp slt i32 %28, 1
  br i1 %29, label %30, label %32

30:                                               ; preds = %21
  %31 = call i32 @die(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  br label %32

32:                                               ; preds = %30, %21
  %33 = load i32, i32* @STDIN_FILENO, align 4
  %34 = call i64 @FD_ISSET(i32 %33, i32* %7)
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = load i32, i32* @BS, align 4
  %38 = call i32 @read(i32 0, i8* %11, i32 %37)
  store i32 %38, i32* %4, align 4
  %39 = icmp sle i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = call i32 @die(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  br label %42

42:                                               ; preds = %40, %36
  %43 = load i32, i32* %3, align 4
  %44 = load i32, i32* %4, align 4
  %45 = call i32 @write(i32 %43, i8* %11, i32 %44)
  %46 = icmp slt i32 %45, 1
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = call i32 @die(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %49

49:                                               ; preds = %47, %42
  br label %50

50:                                               ; preds = %49, %32
  %51 = load i32, i32* %3, align 4
  %52 = call i64 @FD_ISSET(i32 %51, i32* %7)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %75

54:                                               ; preds = %50
  %55 = load i32, i32* %3, align 4
  %56 = trunc i64 %9 to i32
  %57 = call i32 @read(i32 %55, i8* %11, i32 %56)
  store i32 %57, i32* %4, align 4
  %58 = load i32, i32* %4, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = call i32 @die(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  br label %68

62:                                               ; preds = %54
  %63 = load i32, i32* %4, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %62
  %66 = call i32 @die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0))
  br label %67

67:                                               ; preds = %65, %62
  br label %68

68:                                               ; preds = %67, %60
  %69 = load i32, i32* %4, align 4
  %70 = call i32 @write(i32 1, i8* %11, i32 %69)
  %71 = icmp slt i32 %70, 1
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = call i32 @die(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %74

74:                                               ; preds = %72, %68
  br label %75

75:                                               ; preds = %74, %50
  br label %20
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @conn(%struct.sockaddr_in*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
