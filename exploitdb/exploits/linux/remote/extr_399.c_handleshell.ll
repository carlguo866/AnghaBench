; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_handleshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_handleshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SEND = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"write error\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"read error\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @handleshell(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [512 x i8], align 16
  %6 = alloca [512 x i8], align 16
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* %3, align 4
  %9 = call i32 @close(i32 %8)
  %10 = load i32, i32* %4, align 4
  %11 = load i8*, i8** @SEND, align 8
  %12 = load i8*, i8** @SEND, align 8
  %13 = call i32 @strlen(i8* %12)
  %14 = call i64 @write(i32 %10, i8* %11, i32 %13)
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = load i32, i32* @stderr, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  ret void

19:                                               ; preds = %2
  br label %20

20:                                               ; preds = %19, %88
  %21 = call i32 @FD_ZERO(i32* %7)
  %22 = load i32, i32* @stdin, align 4
  %23 = call i32 @fileno(i32 %22)
  %24 = call i32 @FD_SET(i32 %23, i32* %7)
  %25 = load i32, i32* %4, align 4
  %26 = call i32 @FD_SET(i32 %25, i32* %7)
  %27 = load i32, i32* %4, align 4
  %28 = add nsw i32 %27, 1
  %29 = call i32 @select(i32 %28, i32* %7, i32* null, i32* null, i32* null)
  %30 = load i32, i32* @stdin, align 4
  %31 = call i32 @fileno(i32 %30)
  %32 = call i64 @FD_ISSET(i32 %31, i32* %7)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %69

34:                                               ; preds = %20
  %35 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %36 = call i32 @memset(i8* %35, i8 signext 0, i32 512)
  %37 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %38 = call i64 @read(i32 0, i8* %37, i32 511)
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %34
  %41 = load i32, i32* @stderr, align 4
  %42 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #3
  unreachable

44:                                               ; preds = %34
  %45 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %46 = call i32 @strncmp(i8* %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %44
  %49 = load i32, i32* %4, align 4
  %50 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %51 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %52 = call i32 @strlen(i8* %51)
  %53 = call i64 @write(i32 %49, i8* %50, i32 %52)
  %54 = load i32, i32* %4, align 4
  %55 = call i32 @quit(i32 %54)
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %44
  %58 = load i32, i32* %4, align 4
  %59 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %60 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %61 = call i32 @strlen(i8* %60)
  %62 = call i64 @write(i32 %58, i8* %59, i32 %61)
  %63 = icmp slt i64 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %57
  %65 = load i32, i32* @stderr, align 4
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %65, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %67 = call i32 @exit(i32 1) #3
  unreachable

68:                                               ; preds = %57
  br label %69

69:                                               ; preds = %68, %20
  %70 = load i32, i32* %4, align 4
  %71 = call i64 @FD_ISSET(i32 %70, i32* %7)
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %88

73:                                               ; preds = %69
  %74 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %75 = call i32 @memset(i8* %74, i8 signext 0, i32 512)
  %76 = load i32, i32* %4, align 4
  %77 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %78 = call i64 @read(i32 %76, i8* %77, i32 511)
  %79 = icmp slt i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %73
  %81 = load i32, i32* @stderr, align 4
  %82 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %83 = call i32 @exit(i32 1) #3
  unreachable

84:                                               ; preds = %73
  %85 = load i32, i32* @stderr, align 4
  %86 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %86)
  br label %88

88:                                               ; preds = %84, %69
  br label %20
}

declare dso_local i32 @close(i32) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @quit(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
