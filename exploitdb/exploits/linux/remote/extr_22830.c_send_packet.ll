; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_send_packet.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22830.c_send_packet.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"send_packet(): couldn't resolve\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"(NULL)\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"send_packet(): allocating memory failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @send_packet(i8* %0, i16 zeroext %1, i8* %2, i32 %3, i16 zeroext %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i16, align 2
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca %struct.hostent*, align 8
  %15 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %7, align 8
  store i16 %1, i16* %8, align 2
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store i16 %4, i16* %11, align 2
  %16 = load i32, i32* @AF_INET, align 4
  %17 = load i32, i32* @SOCK_DGRAM, align 4
  %18 = load i32, i32* @IPPROTO_UDP, align 4
  %19 = call i32 @socket(i32 %16, i32 %17, i32 %18)
  store i32 %19, i32* %12, align 4
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i16, i16* %8, align 2
  %23 = call i32 @htons(i16 zeroext %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = load i8*, i8** %7, align 8
  %26 = call i32 @inet_addr(i8* %25)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  store i32 %26, i32* %28, align 4
  %29 = icmp ne i32 %26, 0
  br i1 %29, label %30, label %44

30:                                               ; preds = %5
  %31 = load i8*, i8** %7, align 8
  %32 = call %struct.hostent* @gethostbyname(i8* %31)
  store %struct.hostent* %32, %struct.hostent** %14, align 8
  %33 = icmp ne %struct.hostent* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = call i32 @printe(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 0)
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  br label %77

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %38 = bitcast %struct.TYPE_2__* %37 to i8*
  %39 = load %struct.hostent*, %struct.hostent** %14, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = inttoptr i64 %41 to i8*
  %43 = call i32 @memcpy(i8* %38, i8* %42, i32 4)
  br label %44

44:                                               ; preds = %36, %5
  %45 = load i32, i32* %12, align 4
  %46 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %47 = call i32 @connect(i32 %45, %struct.sockaddr* %46, i32 12)
  %48 = load i32, i32* %12, align 4
  %49 = load i8*, i8** %9, align 8
  %50 = load i32, i32* %10, align 4
  %51 = call i32 @write(i32 %48, i8* %49, i32 %50)
  %52 = load i16, i16* %11, align 2
  %53 = icmp ne i16 %52, 0
  br i1 %53, label %54, label %74

54:                                               ; preds = %44
  %55 = call i64 @malloc(i32 513)
  %56 = inttoptr i64 %55 to i8*
  store i8* %56, i8** %13, align 8
  %57 = icmp ne i8* %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %54
  %59 = call i32 @printe(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %60

60:                                               ; preds = %58, %54
  %61 = load i8*, i8** %13, align 8
  %62 = call i32 @memset(i8* %61, i32 0, i32 513)
  %63 = load i32, i32* %12, align 4
  %64 = load i8*, i8** %13, align 8
  %65 = call i32 @read(i32 %63, i8* %64, i32 512)
  %66 = icmp slt i32 %65, 1
  br i1 %66, label %67, label %70

67:                                               ; preds = %60
  %68 = load i32, i32* %12, align 4
  %69 = call i32 @close(i32 %68)
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  br label %77

70:                                               ; preds = %60
  %71 = load i32, i32* %12, align 4
  %72 = call i32 @close(i32 %71)
  %73 = load i8*, i8** %13, align 8
  store i8* %73, i8** %6, align 8
  br label %77

74:                                               ; preds = %44
  %75 = load i32, i32* %12, align 4
  %76 = call i32 @close(i32 %75)
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  br label %77

77:                                               ; preds = %74, %70, %67, %34
  %78 = load i8*, i8** %6, align 8
  ret i8* %78
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
