; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_39.c_try.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_39.c_try.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"[-] Socket\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@timeout = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@NOALARM = common dso_local global i32 0, align 4
@SIG_DFL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @try(i16 zeroext %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  store i16 %0, i16* %4, align 2
  store i64 %1, i64* %5, align 8
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = call i32 @socket(i32 %8, i32 %9, i32 0)
  store i32 %10, i32* %6, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* @EXIT_FAILURE, align 4
  %15 = call i32 @exit(i32 %14) #3
  unreachable

16:                                               ; preds = %2
  %17 = load i32, i32* @AF_INET, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %17, i32* %18, align 8
  %19 = load i64, i64* %5, align 8
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %20, i32 0, i32 0
  store i64 %19, i64* %21, align 8
  %22 = load i16, i16* %4, align 2
  %23 = call i32 @htons(i16 zeroext %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %23, i32* %24, align 8
  %25 = load i32, i32* @SIGALRM, align 4
  %26 = load i32, i32* @timeout, align 4
  %27 = call i32 @signal(i32 %25, i32 %26)
  %28 = load i32, i32* @TIMEOUT, align 4
  %29 = call i32 @alarm(i32 %28)
  %30 = load i32, i32* %6, align 4
  %31 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %32 = call i32 @connect(i32 %30, %struct.sockaddr* %31, i32 24)
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %40

34:                                               ; preds = %16
  %35 = load i32, i32* @NOALARM, align 4
  %36 = call i32 @alarm(i32 %35)
  %37 = load i32, i32* @SIGALRM, align 4
  %38 = load i32, i32* @SIG_DFL, align 4
  %39 = call i32 @signal(i32 %37, i32 %38)
  store i32 0, i32* %3, align 4
  br label %47

40:                                               ; preds = %16
  %41 = load i32, i32* @NOALARM, align 4
  %42 = call i32 @alarm(i32 %41)
  %43 = load i32, i32* @SIGALRM, align 4
  %44 = load i32, i32* @SIG_DFL, align 4
  %45 = call i32 @signal(i32 %43, i32 %44)
  %46 = load i32, i32* %6, align 4
  store i32 %46, i32* %3, align 4
  br label %47

47:                                               ; preds = %40, %34
  %48 = load i32, i32* %3, align 4
  ret i32 %48
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
