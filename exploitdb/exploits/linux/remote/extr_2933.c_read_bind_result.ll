; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_read_bind_result.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_2933.c_read_bind_result.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [23 x i8] c"Malformed bind result\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @read_bind_result(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1000 x i8], align 16
  store i32 %0, i32* %3, align 4
  %5 = load i32, i32* %3, align 4
  %6 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %7 = call i32 @read_data(i32 %5, i8* %6, i8 signext 2)
  %8 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %9 = load i8, i8* %8, align 16
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 48
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %64

13:                                               ; preds = %1
  %14 = load i32, i32* %3, align 4
  %15 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 2
  %16 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = call i32 @read_data(i32 %14, i8* %15, i8 signext %17)
  %19 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 2
  br i1 %22, label %23, label %31

23:                                               ; preds = %13
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp ne i32 %26, 1
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %23, %13
  %32 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp ne i32 %34, 97
  br i1 %35, label %36, label %39

36:                                               ; preds = %31
  %37 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 @exit(i32 1) #3
  unreachable

39:                                               ; preds = %31
  %40 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 6
  %41 = load i8, i8* %40, align 2
  %42 = sext i8 %41 to i32
  %43 = icmp slt i32 %42, 7
  br i1 %43, label %44, label %47

44:                                               ; preds = %39
  %45 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %46 = call i32 @exit(i32 1) #3
  unreachable

47:                                               ; preds = %39
  %48 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 7
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp ne i32 %50, 10
  br i1 %51, label %52, label %60

52:                                               ; preds = %47
  %53 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 8
  %54 = load i8, i8* %53, align 8
  %55 = sext i8 %54 to i32
  %56 = icmp ne i32 %55, 1
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %52, %47
  %61 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  store i32 %63, i32* %2, align 4
  br label %64

64:                                               ; preds = %60, %12
  %65 = load i32, i32* %2, align 4
  ret i32 %65
}

declare dso_local i32 @read_data(i32, i8*, i8 signext) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
