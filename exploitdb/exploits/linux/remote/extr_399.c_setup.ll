; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_setup.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_399.c_setup.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i64 }

@rsx = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [41 x i8] c"target is not vulnerable (version: %lu)\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"did not get version reply..aborting\0A\00", align 1
@.str.2 = private unnamed_addr constant [50 x i8] c"Target appears to be vulnerable..continue attack\0A\00", align 1
@VERSION = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"--server\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"--sender\0A\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setup(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [512 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i64 0, i64* %6, align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 1), align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %40

9:                                                ; preds = %1
  store i64 0, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 1), align 8
  %10 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %11 = call i32 @memset(i8* %10, i8 signext 0, i32 512)
  %12 = load i32, i32* %3, align 4
  %13 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %14 = call i32 @read(i32 %12, i8* %13, i32 511)
  %15 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %16 = call i8* @strchr(i8* %15, i32 58)
  store i8* %16, i8** %5, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %32

18:                                               ; preds = %9
  %19 = load i8*, i8** %5, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  %21 = load i8*, i8** %5, align 8
  %22 = bitcast i8* %21 to i8**
  %23 = getelementptr inbounds i8*, i8** %22, i64 3
  %24 = call i64 @strtoul(i8* %20, i8** %23, i32 0)
  store i64 %24, i64* %6, align 8
  %25 = load i64, i64* %6, align 8
  %26 = icmp sge i64 %25, 26
  br i1 %26, label %27, label %31

27:                                               ; preds = %18
  %28 = load i32, i32* @stderr, align 4
  %29 = load i64, i64* %6, align 8
  %30 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i64 %29)
  store i32 -1, i32* %2, align 4
  br label %90

31:                                               ; preds = %18
  br label %37

32:                                               ; preds = %9
  %33 = load i32, i32* @stderr, align 4
  %34 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %35 = load i32, i32* %3, align 4
  %36 = call i32 @quit(i32 %35)
  store i32 -1, i32* %2, align 4
  br label %90

37:                                               ; preds = %31
  %38 = load i32, i32* @stderr, align 4
  %39 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0))
  br label %40

40:                                               ; preds = %37, %1
  %41 = load i32, i32* %3, align 4
  %42 = load i8*, i8** @VERSION, align 8
  %43 = load i8*, i8** @VERSION, align 8
  %44 = call i32 @strlen(i8* %43)
  %45 = call i64 @write(i32 %41, i8* %42, i32 %44)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  store i32 -1, i32* %2, align 4
  br label %90

48:                                               ; preds = %40
  %49 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %50 = call i32 @memset(i8* %49, i8 signext 0, i32 512)
  %51 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %52 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 0), align 8
  %53 = call i32 @snprintf(i8* %51, i32 511, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* %52)
  %54 = load i32, i32* %3, align 4
  %55 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %56 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %57 = call i32 @strlen(i8* %56)
  %58 = call i64 @write(i32 %54, i8* %55, i32 %57)
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %48
  store i32 -1, i32* %2, align 4
  br label %90

61:                                               ; preds = %48
  %62 = load i32, i32* %3, align 4
  %63 = call i64 @write(i32 %62, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 9)
  %64 = icmp slt i64 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  store i32 -1, i32* %2, align 4
  br label %90

66:                                               ; preds = %61
  %67 = load i32, i32* %3, align 4
  %68 = call i64 @write(i32 %67, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32 9)
  %69 = icmp slt i64 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  store i32 -1, i32* %2, align 4
  br label %90

71:                                               ; preds = %66
  %72 = load i32, i32* %3, align 4
  %73 = call i64 @write(i32 %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 2)
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  store i32 -1, i32* %2, align 4
  br label %90

76:                                               ; preds = %71
  %77 = load i32, i32* %3, align 4
  %78 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %79 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %80 = call i32 @strlen(i8* %79)
  %81 = call i64 @write(i32 %77, i8* %78, i32 %80)
  %82 = icmp slt i64 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %76
  store i32 -1, i32* %2, align 4
  br label %90

84:                                               ; preds = %76
  %85 = load i32, i32* %3, align 4
  %86 = call i64 @write(i32 %85, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 1)
  %87 = icmp slt i64 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %84
  store i32 -1, i32* %2, align 4
  br label %90

89:                                               ; preds = %84
  store i32 1, i32* %2, align 4
  br label %90

90:                                               ; preds = %89, %88, %83, %75, %70, %65, %60, %47, %32, %27
  %91 = load i32, i32* %2, align 4
  ret i32 %91
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i8* @strchr(i8*, i32) #1

declare dso_local i64 @strtoul(i8*, i8**, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @quit(i32) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
