; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_107.c_execsh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_107.c_execsh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIZE = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINTR = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @execsh(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  %8 = load i32, i32* @SIZE, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %6, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %7, align 8
  %12 = load i32, i32* @SIZE, align 4
  %13 = call i32 @memset(i8* %11, i32 0, i32 %12)
  br label %14

14:                                               ; preds = %67, %28, %1
  br label %15

15:                                               ; preds = %14
  %16 = call i32 @FD_ZERO(i32* %4)
  %17 = call i32 @FD_SET(i32 0, i32* %4)
  %18 = load i32, i32* %3, align 4
  %19 = call i32 @FD_SET(i32 %18, i32* %4)
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, 1
  %22 = call i64 @select(i32 %21, i32* %4, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %15
  %25 = load i64, i64* @errno, align 8
  %26 = load i64, i64* @EINTR, align 8
  %27 = icmp eq i64 %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  br label %14

29:                                               ; preds = %24
  br label %68

30:                                               ; preds = %15
  %31 = call i64 @FD_ISSET(i32 0, i32* %4)
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %48

33:                                               ; preds = %30
  %34 = load i32, i32* @SIZE, align 4
  %35 = call i32 @read(i32 0, i8* %11, i32 %34)
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %5, align 4
  %37 = icmp sle i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %33
  br label %68

39:                                               ; preds = %33
  %40 = load i32, i32* %3, align 4
  %41 = load i32, i32* %5, align 4
  %42 = call i64 @write(i32 %40, i8* %11, i32 %41)
  %43 = icmp sle i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  br label %68

45:                                               ; preds = %39
  %46 = load i32, i32* @SIZE, align 4
  %47 = call i32 @memset(i8* %11, i32 0, i32 %46)
  br label %48

48:                                               ; preds = %45, %30
  %49 = load i32, i32* %3, align 4
  %50 = call i64 @FD_ISSET(i32 %49, i32* %4)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %67

52:                                               ; preds = %48
  %53 = load i32, i32* %3, align 4
  %54 = load i32, i32* @SIZE, align 4
  %55 = call i32 @read(i32 %53, i8* %11, i32 %54)
  store i32 %55, i32* %5, align 4
  %56 = load i32, i32* %5, align 4
  %57 = icmp sle i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  br label %68

59:                                               ; preds = %52
  %60 = load i32, i32* %5, align 4
  %61 = call i64 @write(i32 1, i8* %11, i32 %60)
  %62 = icmp sle i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  br label %68

64:                                               ; preds = %59
  %65 = load i32, i32* @SIZE, align 4
  %66 = call i32 @memset(i8* %11, i32 0, i32 %65)
  br label %67

67:                                               ; preds = %64, %48
  br label %14

68:                                               ; preds = %63, %58, %44, %38, %29
  %69 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %69)
  %70 = load i32, i32* %2, align 4
  ret i32 %70
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i64 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
