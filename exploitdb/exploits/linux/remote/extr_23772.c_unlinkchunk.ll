; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_unlinkchunk.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_unlinkchunk.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"unlinkchunk(): Small buffer\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"calloc()\00", align 1
@IS_MMAP = common dso_local global i64 0, align 8
@NON_MAIN_ARENA = common dso_local global i64 0, align 8
@PREV_INUSE = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @unlinkchunk(i32 %0, i32 %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i64 %2, i64* %7, align 8
  store i64 0, i64* %9, align 8
  %10 = load i64, i64* %7, align 8
  %11 = icmp ult i64 %10, 14
  br i1 %11, label %12, label %15

12:                                               ; preds = %3
  %13 = load i32, i32* @stderr, align 4
  %14 = call i32 @fprintf(i32 %13, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  store i8* null, i8** %4, align 8
  br label %117

15:                                               ; preds = %3
  %16 = load i64, i64* %7, align 8
  %17 = mul i64 %16, 4
  %18 = add i64 %17, 1
  %19 = call i32* @calloc(i64 %18, i32 1)
  store i32* %19, i32** %8, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  store i8* null, i8** %4, align 8
  br label %117

23:                                               ; preds = %15
  %24 = load i32*, i32** %8, align 8
  %25 = load i64, i64* %9, align 8
  %26 = add i64 %25, 1
  store i64 %26, i64* %9, align 8
  %27 = getelementptr inbounds i32, i32* %24, i64 %25
  store i32 -4, i32* %27, align 4
  %28 = load i32*, i32** %8, align 8
  %29 = load i64, i64* %9, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %9, align 8
  %31 = getelementptr inbounds i32, i32* %28, i64 %29
  store i32 -4, i32* %31, align 4
  %32 = load i32*, i32** %8, align 8
  %33 = load i64, i64* %9, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %9, align 8
  %35 = getelementptr inbounds i32, i32* %32, i64 %33
  store i32 -4, i32* %35, align 4
  %36 = load i32, i32* %5, align 4
  %37 = load i32*, i32** %8, align 8
  %38 = load i64, i64* %9, align 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %9, align 8
  %40 = getelementptr inbounds i32, i32* %37, i64 %38
  store i32 %36, i32* %40, align 4
  %41 = load i32, i32* %6, align 4
  %42 = sub nsw i32 %41, 8
  %43 = load i32*, i32** %8, align 8
  %44 = load i64, i64* %9, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %9, align 8
  %46 = getelementptr inbounds i32, i32* %43, i64 %44
  store i32 %42, i32* %46, align 4
  %47 = load i32*, i32** %8, align 8
  %48 = load i64, i64* %9, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %9, align 8
  %50 = getelementptr inbounds i32, i32* %47, i64 %48
  store i32 -4, i32* %50, align 4
  %51 = load i32*, i32** %8, align 8
  %52 = load i64, i64* %9, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %9, align 8
  %54 = getelementptr inbounds i32, i32* %51, i64 %52
  store i32 -4, i32* %54, align 4
  %55 = load i32*, i32** %8, align 8
  %56 = load i64, i64* %9, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %9, align 8
  %58 = getelementptr inbounds i32, i32* %55, i64 %56
  store i32 -4, i32* %58, align 4
  %59 = load i32, i32* %5, align 4
  %60 = load i32*, i32** %8, align 8
  %61 = load i64, i64* %9, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %9, align 8
  %63 = getelementptr inbounds i32, i32* %60, i64 %61
  store i32 %59, i32* %63, align 4
  %64 = load i32, i32* %6, align 4
  %65 = sub nsw i32 %64, 8
  %66 = load i32*, i32** %8, align 8
  %67 = load i64, i64* %9, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %9, align 8
  %69 = getelementptr inbounds i32, i32* %66, i64 %67
  store i32 %65, i32* %69, align 4
  br label %70

70:                                               ; preds = %111, %23
  %71 = load i64, i64* %9, align 8
  %72 = load i64, i64* %7, align 8
  %73 = icmp ult i64 %71, %72
  br i1 %73, label %74, label %114

74:                                               ; preds = %70
  %75 = load i64, i64* %9, align 8
  %76 = urem i64 %75, 2
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %94

78:                                               ; preds = %74
  %79 = load i64, i64* %9, align 8
  %80 = sub i64 %79, 8
  %81 = sub i64 0, %80
  %82 = mul i64 %81, 4
  %83 = load i64, i64* @IS_MMAP, align 8
  %84 = load i64, i64* @NON_MAIN_ARENA, align 8
  %85 = or i64 %83, %84
  %86 = xor i64 %85, -1
  %87 = and i64 %82, %86
  %88 = load i64, i64* @PREV_INUSE, align 8
  %89 = or i64 %87, %88
  %90 = trunc i64 %89 to i32
  %91 = load i32*, i32** %8, align 8
  %92 = load i64, i64* %9, align 8
  %93 = getelementptr inbounds i32, i32* %91, i64 %92
  store i32 %90, i32* %93, align 4
  br label %110

94:                                               ; preds = %74
  %95 = load i64, i64* %9, align 8
  %96 = sub i64 %95, 3
  %97 = sub i64 0, %96
  %98 = mul i64 %97, 4
  %99 = load i64, i64* @IS_MMAP, align 8
  %100 = load i64, i64* @NON_MAIN_ARENA, align 8
  %101 = or i64 %99, %100
  %102 = xor i64 %101, -1
  %103 = and i64 %98, %102
  %104 = load i64, i64* @PREV_INUSE, align 8
  %105 = or i64 %103, %104
  %106 = trunc i64 %105 to i32
  %107 = load i32*, i32** %8, align 8
  %108 = load i64, i64* %9, align 8
  %109 = getelementptr inbounds i32, i32* %107, i64 %108
  store i32 %106, i32* %109, align 4
  br label %110

110:                                              ; preds = %94, %78
  br label %111

111:                                              ; preds = %110
  %112 = load i64, i64* %9, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %9, align 8
  br label %70

114:                                              ; preds = %70
  %115 = load i32*, i32** %8, align 8
  %116 = bitcast i32* %115 to i8*
  store i8* %116, i8** %4, align 8
  br label %117

117:                                              ; preds = %114, %21, %12
  %118 = load i8*, i8** %4, align 8
  ret i8* %118
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32* @calloc(i64, i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
