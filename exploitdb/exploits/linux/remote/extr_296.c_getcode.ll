; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_getcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_296.c_getcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"getcode(): allocating memory failed.\00", align 1
@x86_exec = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getcode(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  %4 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8 0, i8* %3, align 1
  %5 = load i32, i32* @BUFSIZE, align 4
  %6 = add nsw i32 %5, 1
  %7 = call i64 @malloc(i32 %6)
  %8 = inttoptr i64 %7 to i8*
  store i8* %8, i8** %4, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  %11 = call i32 @printe(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %12

12:                                               ; preds = %10, %1
  %13 = load i8*, i8** %4, align 8
  %14 = load i32, i32* @BUFSIZE, align 4
  %15 = call i32 @memset(i8* %13, i32 144, i32 %14)
  store i8 0, i8* %3, align 1
  br label %16

16:                                               ; preds = %28, %12
  %17 = load i8, i8* %3, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp slt i32 %18, 64
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = load i32, i32* %2, align 4
  %22 = zext i32 %21 to i64
  %23 = load i8*, i8** %4, align 8
  %24 = load i8, i8* %3, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds i8, i8* %23, i64 %25
  %27 = bitcast i8* %26 to i64*
  store i64 %22, i64* %27, align 8
  br label %28

28:                                               ; preds = %20
  %29 = load i8, i8* %3, align 1
  %30 = zext i8 %29 to i32
  %31 = add nsw i32 %30, 4
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %3, align 1
  br label %16

33:                                               ; preds = %16
  %34 = load i8*, i8** %4, align 8
  %35 = load i32, i32* @BUFSIZE, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i32, i32* @x86_exec, align 4
  %39 = call i32 @strlen(i32 %38)
  %40 = sext i32 %39 to i64
  %41 = sub i64 0, %40
  %42 = getelementptr inbounds i8, i8* %37, i64 %41
  %43 = load i32, i32* @x86_exec, align 4
  %44 = load i32, i32* @x86_exec, align 4
  %45 = call i32 @strlen(i32 %44)
  %46 = call i32 @memcpy(i8* %42, i32 %43, i32 %45)
  %47 = load i8*, i8** %4, align 8
  ret i8* %47
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
