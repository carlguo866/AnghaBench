; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_284.c_openshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_284.c_openshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdin = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"Connection terminated!\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"uid\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"Exploit failed\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Exploit Success!!\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"id\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @openshell(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  br label %8

8:                                                ; preds = %2, %80
  %9 = call i32 @FD_ZERO(i32* %6)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %6)
  %12 = load i32, i32* @stdin, align 4
  %13 = call i32 @fileno(i32 %12)
  %14 = call i32 @FD_SET(i32 %13, i32* %6)
  %15 = load i32, i32* %3, align 4
  %16 = add nsw i32 %15, 1
  %17 = call i32 @select(i32 %16, i32* %6, i32* null, i32* null, i32* null)
  %18 = load i32, i32* %3, align 4
  %19 = call i64 @FD_ISSET(i32 %18, i32* %6)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %54

21:                                               ; preds = %8
  %22 = load i32, i32* %3, align 4
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %24 = call i32 @read(i32 %22, i8* %23, i32 1024)
  store i32 %24, i32* %7, align 4
  %25 = icmp sle i32 %24, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %21
  %27 = load i32, i32* @stderr, align 4
  %28 = call i32 @fprintf(i32 %27, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %29 = load i32, i32* %3, align 4
  %30 = call i32 @close(i32 %29)
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %21
  %33 = load i32, i32* %7, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %34
  store i8 0, i8* %35, align 1
  %36 = load i32, i32* %4, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %50

38:                                               ; preds = %32
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %40 = call i32 @strstr(i8* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = load i32, i32* @stderr, align 4
  %44 = call i32 @fprintf(i32 %43, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %45 = call i32 @exit(i32 -1) #3
  unreachable

46:                                               ; preds = %38
  %47 = load i32, i32* @stderr, align 4
  %48 = call i32 @fprintf(i32 %47, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %49

49:                                               ; preds = %46
  br label %50

50:                                               ; preds = %49, %32
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %52 = call i32 @puts(i8* %51)
  br label %53

53:                                               ; preds = %50
  br label %54

54:                                               ; preds = %53, %8
  %55 = load i32, i32* @stdin, align 4
  %56 = call i32 @fileno(i32 %55)
  %57 = call i64 @FD_ISSET(i32 %56, i32* %6)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %80

59:                                               ; preds = %54
  %60 = load i32, i32* %4, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i32, i32* %3, align 4
  %64 = call i32 @write(i32 %63, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  br label %65

65:                                               ; preds = %62, %59
  %66 = load i32, i32* @stdin, align 4
  %67 = call i32 @fileno(i32 %66)
  %68 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %69 = call i32 @read(i32 %67, i8* %68, i32 1024)
  store i32 %69, i32* %7, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %79

71:                                               ; preds = %65
  %72 = load i32, i32* %7, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %73
  store i8 0, i8* %74, align 1
  %75 = load i32, i32* %3, align 4
  %76 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %77 = load i32, i32* %7, align 4
  %78 = call i32 @write(i32 %75, i8* %76, i32 %77)
  br label %79

79:                                               ; preds = %71, %65
  br label %80

80:                                               ; preds = %79, %54
  br label %8
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strstr(i8*, i8*) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
