; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24856.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.itimerval = type { %struct.TYPE_4__, %struct.TYPE_3__ }
%struct.TYPE_4__ = type { i32, i64 }
%struct.TYPE_3__ = type { i32, i64 }

@.str = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@out_stream = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [20 x i8] c"Can't open /dev/tty\00", align 1
@stderr = common dso_local global i32* null, align 8
@SIGALRM = common dso_local global i32 0, align 4
@timer_send_ping = common dso_local global i32 0, align 4
@SIG_ERR = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [32 x i8] c"Couldn't set the signal handler\00", align 1
@ITIMER_REAL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [35 x i8] c"Can't read \22Connect\22 from the net\0A\00", align 1
@End = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"Connection closed before double \\n\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@OK = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c"Connected (hopefully)\0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"GNUTELLA/0.6 200 OK\0D\0A\0D\0A\00", align 1
@MAX_PAYLOAD_LEN = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [25 x i8] c"Received a Ping message\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"Payload for Ping > 0 !\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"Sending a Pong message\0A\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"Received a Pong message\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"Received a Query message\0A\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"Sending a QueryHit message\0A\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"QueryHit sent\0A\00", align 1
@.str.16 = private unnamed_addr constant [32 x i8] c"NOT sending a QueryHit message\0A\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Received a Push message\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [4096 x i8], align 16
  %10 = alloca i8, align 1
  %11 = alloca [1024 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.itimerval, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [16 x i8], align 16
  %21 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  store i32 1, i32* %13, align 4
  %22 = call i32* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %22, i32** @out_stream, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %24, label %27

24:                                               ; preds = %2
  %25 = call i32 @perror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %26 = load i32*, i32** @stderr, align 8
  store i32* %26, i32** @out_stream, align 8
  br label %27

27:                                               ; preds = %24, %2
  %28 = load i32, i32* @SIGALRM, align 4
  %29 = load i32, i32* @timer_send_ping, align 4
  %30 = call i64 @signal(i32 %28, i32 %29)
  %31 = load i64, i64* @SIG_ERR, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = load i32*, i32** @out_stream, align 8
  %35 = call i32 (i32*, i8*, ...) @fprintf(i32* %34, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %36 = call i32 @exit(i32 1) #4
  unreachable

37:                                               ; preds = %27
  %38 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %14, i32 0, i32 1
  %39 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %38, i32 0, i32 0
  store i32 5, i32* %39, align 8
  %40 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %14, i32 0, i32 1
  %41 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %40, i32 0, i32 1
  store i64 0, i64* %41, align 8
  %42 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %14, i32 0, i32 0
  %43 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %42, i32 0, i32 0
  store i32 5, i32* %43, align 8
  %44 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %14, i32 0, i32 0
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %44, i32 0, i32 1
  store i64 0, i64* %45, align 8
  %46 = load i32, i32* @ITIMER_REAL, align 4
  %47 = call i32 @setitimer(i32 %46, %struct.itimerval* %14, i32 0)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %53

49:                                               ; preds = %37
  %50 = load i32*, i32** @out_stream, align 8
  %51 = call i32 (i32*, i8*, ...) @fprintf(i32* %50, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %37
  %54 = load i32, i32* %7, align 4
  %55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %56 = call i32 @read(i32 %54, i8* %55, i32 4)
  store i32 %56, i32* %12, align 4
  %57 = load i32, i32* %12, align 4
  %58 = sext i32 %57 to i64
  %59 = icmp ne i64 %58, 4
  br i1 %59, label %60, label %64

60:                                               ; preds = %53
  %61 = load i32*, i32** @out_stream, align 8
  %62 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  %63 = call i32 @exit(i32 1) #4
  unreachable

64:                                               ; preds = %53
  %65 = load i32, i32* %7, align 4
  %66 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %67 = load i8*, i8** @End, align 8
  %68 = call i32 @strlen(i8* %67)
  %69 = call i32 @read(i32 %65, i8* %66, i32 %68)
  store i32 %69, i32* %12, align 4
  %70 = load i32, i32* %12, align 4
  %71 = load i8*, i8** @End, align 8
  %72 = call i32 @strlen(i8* %71)
  %73 = icmp ne i32 %70, %72
  br i1 %73, label %74, label %78

74:                                               ; preds = %64
  %75 = load i32*, i32** @out_stream, align 8
  %76 = call i32 (i32*, i8*, ...) @fprintf(i32* %75, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %77 = call i32 @exit(i32 1) #4
  unreachable

78:                                               ; preds = %64
  br label %79

79:                                               ; preds = %122, %78
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %81 = load i8*, i8** @End, align 8
  %82 = load i8*, i8** @End, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = call i64 @strncmp(i8* %80, i8* %81, i32 %83)
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %123

86:                                               ; preds = %79
  %87 = load i32*, i32** @out_stream, align 8
  %88 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %89 = call i32 (i32*, i8*, ...) @fprintf(i32* %87, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i8* %88)
  store i32 0, i32* %15, align 4
  br label %90

90:                                               ; preds = %105, %86
  %91 = load i32, i32* %15, align 4
  %92 = load i8*, i8** @End, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = sub i32 %93, 1
  %95 = icmp ult i32 %91, %94
  br i1 %95, label %96, label %108

96:                                               ; preds = %90
  %97 = load i32, i32* %15, align 4
  %98 = add nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = load i32, i32* %15, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 %103
  store i8 %101, i8* %104, align 1
  br label %105

105:                                              ; preds = %96
  %106 = load i32, i32* %15, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %15, align 4
  br label %90

108:                                              ; preds = %90
  %109 = load i32, i32* %7, align 4
  %110 = load i8*, i8** @End, align 8
  %111 = call i32 @strlen(i8* %110)
  %112 = sub i32 %111, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 %113
  %115 = call i32 @read(i32 %109, i8* %114, i32 1)
  store i32 %115, i32* %12, align 4
  %116 = load i32, i32* %12, align 4
  %117 = icmp ne i32 %116, 1
  br i1 %117, label %118, label %122

118:                                              ; preds = %108
  %119 = load i32*, i32** @out_stream, align 8
  %120 = call i32 (i32*, i8*, ...) @fprintf(i32* %119, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %121 = call i32 @exit(i32 1) #4
  unreachable

122:                                              ; preds = %108
  br label %79

123:                                              ; preds = %79
  %124 = load i32, i32* %13, align 4
  %125 = load i8*, i8** @OK, align 8
  %126 = load i8*, i8** @OK, align 8
  %127 = call i32 @strlen(i8* %126)
  %128 = call i32 @write(i32 %124, i8* %125, i32 %127)
  %129 = load i32*, i32** @out_stream, align 8
  %130 = call i32 (i32*, i8*, ...) @fprintf(i32* %129, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %131 = load i32, i32* %7, align 4
  %132 = call i32 @strlen(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %133 = call i32 @dump_fd(i32 %131, i32 %132)
  %134 = load i32, i32* @MAX_PAYLOAD_LEN, align 4
  %135 = zext i32 %134 to i64
  %136 = call i8* @llvm.stacksave()
  store i8* %136, i8** %18, align 8
  %137 = alloca i8, i64 %135, align 16
  store i64 %135, i64* %19, align 8
  store i32 0, i32* %21, align 4
  br label %138

138:                                              ; preds = %209, %123
  br label %139

139:                                              ; preds = %138
  %140 = load i32, i32* %7, align 4
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 0
  %142 = call i32 @read_header(i32 %140, i8* %16, i32* %17, i8* %141)
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %145, label %144

144:                                              ; preds = %139
  br label %210

145:                                              ; preds = %139
  %146 = load i32, i32* %17, align 4
  %147 = load i32, i32* @MAX_PAYLOAD_LEN, align 4
  %148 = icmp ule i32 %146, %147
  %149 = zext i1 %148 to i32
  %150 = call i32 @assert(i32 %149)
  %151 = load i8, i8* %16, align 1
  %152 = zext i8 %151 to i32
  switch i32 %152, label %209 [
    i32 131, label %153
    i32 130, label %166
    i32 128, label %175
    i32 129, label %200
  ]

153:                                              ; preds = %145
  %154 = load i32*, i32** @out_stream, align 8
  %155 = call i32 (i32*, i8*, ...) @fprintf(i32* %154, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %156 = load i32, i32* %17, align 4
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %153
  %159 = load i32*, i32** @out_stream, align 8
  %160 = call i32 (i32*, i8*, ...) @fprintf(i32* %159, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0))
  br label %161

161:                                              ; preds = %158, %153
  %162 = load i32*, i32** @out_stream, align 8
  %163 = call i32 (i32*, i8*, ...) @fprintf(i32* %162, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  %164 = load i32, i32* %13, align 4
  %165 = call i32 @send_pong(i32 %164)
  br label %209

166:                                              ; preds = %145
  %167 = load i32*, i32** @out_stream, align 8
  %168 = call i32 (i32*, i8*, ...) @fprintf(i32* %167, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0))
  %169 = load i32, i32* %7, align 4
  %170 = load i32, i32* %17, align 4
  %171 = call i32 @dump_fd(i32 %169, i32 %170)
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %174, label %173

173:                                              ; preds = %166
  br label %209

174:                                              ; preds = %166
  br label %209

175:                                              ; preds = %145
  %176 = load i32*, i32** @out_stream, align 8
  %177 = call i32 (i32*, i8*, ...) @fprintf(i32* %176, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0))
  %178 = load i32, i32* %7, align 4
  %179 = load i32, i32* %17, align 4
  %180 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %181 = call i32 @parse_query_payload(i32 %178, i32 %179, i8* %180)
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %184, label %183

183:                                              ; preds = %175
  br label %209

184:                                              ; preds = %175
  %185 = load i32, i32* %21, align 4
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %196, label %187

187:                                              ; preds = %184
  store i32 1, i32* %21, align 4
  %188 = load i32*, i32** @out_stream, align 8
  %189 = call i32 (i32*, i8*, ...) @fprintf(i32* %188, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0))
  %190 = load i32, i32* %13, align 4
  %191 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %192 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 0
  %193 = call i32 @send_queryhit(i32 %190, i8* %191, i8* %192)
  %194 = load i32*, i32** @out_stream, align 8
  %195 = call i32 (i32*, i8*, ...) @fprintf(i32* %194, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0))
  br label %199

196:                                              ; preds = %184
  %197 = load i32*, i32** @out_stream, align 8
  %198 = call i32 (i32*, i8*, ...) @fprintf(i32* %197, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.16, i64 0, i64 0))
  br label %199

199:                                              ; preds = %196, %187
  br label %209

200:                                              ; preds = %145
  %201 = load i32*, i32** @out_stream, align 8
  %202 = call i32 (i32*, i8*, ...) @fprintf(i32* %201, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0))
  %203 = load i32, i32* %7, align 4
  %204 = load i32, i32* %17, align 4
  %205 = call i32 @dump_fd(i32 %203, i32 %204)
  %206 = icmp ne i32 %205, 0
  br i1 %206, label %208, label %207

207:                                              ; preds = %200
  br label %209

208:                                              ; preds = %200
  br label %209

209:                                              ; preds = %145, %208, %207, %199, %183, %174, %173, %161
  br label %138

210:                                              ; preds = %144
  %211 = load i8*, i8** %18, align 8
  call void @llvm.stackrestore(i8* %211)
  %212 = load i32, i32* %3, align 4
  ret i32 %212
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @signal(i32, i32) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @setitimer(i32, %struct.itimerval*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @dump_fd(i32, i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @read_header(i32, i8*, i32*, i8*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @send_pong(i32) #1

declare dso_local i32 @parse_query_payload(i32, i32, i8*) #1

declare dso_local i32 @send_queryhit(i32, i8*, i8*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
