; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_Create_Death_Certificate.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_Create_Death_Certificate.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"preparing dirty certificate\00", align 1
@RSA_F4 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @Create_Death_Certificate(i32** %0) #0 {
  %2 = alloca i32**, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  store i32** %0, i32*** %2, align 8
  store i32* null, i32** %5, align 8
  store i32* null, i32** %6, align 8
  %13 = call i32 @step(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 0)
  %14 = call i32* (...) @X509_new()
  store i32* %14, i32** %10, align 8
  %15 = call i32* (...) @EVP_PKEY_new()
  store i32* %15, i32** %12, align 8
  %16 = load i32, i32* @RSA_F4, align 4
  %17 = call i32* @RSA_generate_key(i32 1024, i32 %16, i32* null, i32* null)
  store i32* %17, i32** %11, align 8
  %18 = load i32*, i32** %12, align 8
  %19 = load i32*, i32** %11, align 8
  %20 = call i32 @EVP_PKEY_assign_RSA(i32* %18, i32* %19)
  %21 = load i32*, i32** %10, align 8
  %22 = load i32*, i32** %12, align 8
  %23 = call i32 @X509_set_pubkey(i32* %21, i32* %22)
  %24 = load i32*, i32** %10, align 8
  %25 = call i32 @X509_set_version(i32* %24, i32 2)
  %26 = call i32* (...) @ASN1_INTEGER_new()
  store i32* %26, i32** %9, align 8
  %27 = load i32*, i32** %9, align 8
  %28 = call i32 @ASN1_INTEGER_set(i32* %27, i32 1)
  %29 = load i32*, i32** %10, align 8
  %30 = load i32*, i32** %9, align 8
  %31 = call i32 @X509_set_serialNumber(i32* %29, i32* %30)
  %32 = call i32* (...) @ASN1_TIME_new()
  store i32* %32, i32** %7, align 8
  %33 = call i32* (...) @ASN1_TIME_new()
  store i32* %33, i32** %8, align 8
  %34 = load i32*, i32** %7, align 8
  store i32 0, i32* %4, align 4
  %35 = call i32 @ASN1_TIME_set(i32* %34, i32 0)
  %36 = load i32*, i32** %8, align 8
  store i32 2055456000, i32* %4, align 4
  %37 = call i32 @ASN1_TIME_set(i32* %36, i32 2055456000)
  %38 = load i32*, i32** %10, align 8
  %39 = load i32*, i32** %7, align 8
  %40 = call i32 @X509_set_notBefore(i32* %38, i32* %39)
  %41 = load i32*, i32** %10, align 8
  %42 = load i32*, i32** %8, align 8
  %43 = call i32 @X509_set_notAfter(i32* %41, i32* %42)
  %44 = load i32*, i32** %10, align 8
  %45 = load i32*, i32** %5, align 8
  %46 = load i32*, i32** %6, align 8
  %47 = call i32 @set_subject(i32* %44, i32* %45, i32* %46)
  %48 = load i32*, i32** %10, align 8
  %49 = load i32*, i32** %12, align 8
  %50 = call i32 (...) @EVP_md5()
  %51 = call i32 @X509_sign(i32* %48, i32* %49, i32 %50)
  %52 = load i32*, i32** %12, align 8
  %53 = load i32**, i32*** %2, align 8
  store i32* %52, i32** %53, align 8
  %54 = load i32*, i32** %5, align 8
  %55 = call i32 @X509_NAME_free(i32* %54)
  %56 = load i32*, i32** %9, align 8
  %57 = call i32 @ASN1_INTEGER_free(i32* %56)
  %58 = load i32*, i32** %7, align 8
  %59 = call i32 @ASN1_TIME_free(i32* %58)
  %60 = load i32*, i32** %8, align 8
  %61 = call i32 @ASN1_TIME_free(i32* %60)
  %62 = load i32*, i32** %3, align 8
  %63 = call i32 @close(i32* %62)
  %64 = load i32*, i32** %10, align 8
  ret i32* %64
}

declare dso_local i32 @step(i8*, i32) #1

declare dso_local i32* @X509_new(...) #1

declare dso_local i32* @EVP_PKEY_new(...) #1

declare dso_local i32* @RSA_generate_key(i32, i32, i32*, i32*) #1

declare dso_local i32 @EVP_PKEY_assign_RSA(i32*, i32*) #1

declare dso_local i32 @X509_set_pubkey(i32*, i32*) #1

declare dso_local i32 @X509_set_version(i32*, i32) #1

declare dso_local i32* @ASN1_INTEGER_new(...) #1

declare dso_local i32 @ASN1_INTEGER_set(i32*, i32) #1

declare dso_local i32 @X509_set_serialNumber(i32*, i32*) #1

declare dso_local i32* @ASN1_TIME_new(...) #1

declare dso_local i32 @ASN1_TIME_set(i32*, i32) #1

declare dso_local i32 @X509_set_notBefore(i32*, i32*) #1

declare dso_local i32 @X509_set_notAfter(i32*, i32*) #1

declare dso_local i32 @set_subject(i32*, i32*, i32*) #1

declare dso_local i32 @X509_sign(i32*, i32*, i32) #1

declare dso_local i32 @EVP_md5(...) #1

declare dso_local i32 @X509_NAME_free(i32*) #1

declare dso_local i32 @ASN1_INTEGER_free(i32*) #1

declare dso_local i32 @ASN1_TIME_free(i32*) #1

declare dso_local i32 @close(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
