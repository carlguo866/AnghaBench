; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20908.c_sockami2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20908.c_sockami2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, i8*, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"gethostbyname()\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sockami2(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %11 = load i8*, i8** @AF_INET, align 8
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = call i32 @socket(i8* %11, i32 %12, i32 0)
  store i32 %13, i32* %10, align 4
  %14 = load i32, i32* %10, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 @exit(i32 -1) #3
  unreachable

19:                                               ; preds = %3
  %20 = load i8*, i8** %4, align 8
  %21 = call %struct.hostent* @gethostbyname(i8* %20)
  store %struct.hostent* %21, %struct.hostent** %9, align 8
  %22 = load %struct.hostent*, %struct.hostent** %9, align 8
  %23 = icmp eq %struct.hostent* %22, null
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 @exit(i32 -1) #3
  unreachable

27:                                               ; preds = %19
  %28 = load i8*, i8** @AF_INET, align 8
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i8* %28, i8** %29, align 8
  %30 = load i32, i32* %5, align 4
  %31 = call i8* @htons(i32 %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i8* %31, i8** %32, align 8
  %33 = load i32, i32* @INADDR_ANY, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  store i32 %33, i32* %35, align 8
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  %37 = call i32 @bzero(i32* %36, i32 8)
  %38 = load i32, i32* %10, align 4
  %39 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %40 = call i32 @bind(i32 %38, %struct.sockaddr* %39, i32 4)
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %45

42:                                               ; preds = %27
  %43 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %27
  %46 = call i32 @memset(%struct.sockaddr_in* %7, i32 0, i32 24)
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %48 = bitcast %struct.TYPE_2__* %47 to i8*
  %49 = load %struct.hostent*, %struct.hostent** %9, align 8
  %50 = getelementptr inbounds %struct.hostent, %struct.hostent* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = load %struct.hostent*, %struct.hostent** %9, align 8
  %53 = getelementptr inbounds %struct.hostent, %struct.hostent* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @memcpy(i8* %48, i32 %51, i32 %54)
  %56 = load i8*, i8** @AF_INET, align 8
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i8* %56, i8** %57, align 8
  %58 = load i32, i32* %6, align 4
  %59 = call i8* @htons(i32 %58)
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i8* %59, i8** %60, align 8
  %61 = load i32, i32* %10, align 4
  %62 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %63 = call i32 @connect(i32 %61, %struct.sockaddr* %62, i32 24)
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %68

65:                                               ; preds = %45
  %66 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %67 = call i32 @exit(i32 -1) #3
  unreachable

68:                                               ; preds = %45
  %69 = load i32, i32* %10, align 4
  ret i32 %69
}

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
