; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_ip_header.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_ip_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iphdr = type { i32, i32, i32, i32, i32, i8*, i8*, i32, i8*, i8*, i8* }

@IP4_HDRLEN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ip_header(%struct.iphdr* %0, i8* %1, i8* %2, i64 %3, i32 %4, i64 %5, i64 %6) #0 {
  %8 = alloca %struct.iphdr*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store %struct.iphdr* %0, %struct.iphdr** %8, align 8
  store i8* %1, i8** %9, align 8
  store i8* %2, i8** %10, align 8
  store i64 %3, i64* %11, align 8
  store i32 %4, i32* %12, align 4
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %15 = load i32, i32* @IP4_HDRLEN, align 4
  %16 = sext i32 %15 to i64
  %17 = udiv i64 %16, 4
  %18 = trunc i64 %17 to i32
  %19 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %20 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %19, i32 0, i32 0
  store i32 %18, i32* %20, align 8
  %21 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %22 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %21, i32 0, i32 1
  store i32 4, i32* %22, align 4
  %23 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %24 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %23, i32 0, i32 2
  store i32 0, i32* %24, align 8
  %25 = load i32, i32* @IP4_HDRLEN, align 4
  %26 = sext i32 %25 to i64
  %27 = load i64, i64* %11, align 8
  %28 = add nsw i64 %26, %27
  %29 = call i8* @htons(i64 %28)
  %30 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %31 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %30, i32 0, i32 10
  store i8* %29, i8** %31, align 8
  %32 = load i64, i64* %13, align 8
  %33 = call i8* @htons(i64 %32)
  %34 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %35 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %34, i32 0, i32 9
  store i8* %33, i8** %35, align 8
  %36 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %37 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %36, i32 0, i32 3
  store i32 64, i32* %37, align 4
  %38 = load i64, i64* %14, align 8
  %39 = call i8* @htons(i64 %38)
  %40 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %41 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %40, i32 0, i32 8
  store i8* %39, i8** %41, align 8
  %42 = load i32, i32* %12, align 4
  %43 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %44 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %43, i32 0, i32 7
  store i32 %42, i32* %44, align 8
  %45 = load i8*, i8** %9, align 8
  %46 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %47 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %46, i32 0, i32 6
  store i8* %45, i8** %47, align 8
  %48 = load i8*, i8** %10, align 8
  %49 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %50 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %49, i32 0, i32 5
  store i8* %48, i8** %50, align 8
  %51 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %52 = bitcast %struct.iphdr* %51 to i16*
  %53 = load i32, i32* @IP4_HDRLEN, align 4
  %54 = call i32 @in_cksum(i16* %52, i32 %53)
  %55 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 4
  store i32 %54, i32* %56, align 8
  ret void
}

declare dso_local i8* @htons(i64) #1

declare dso_local i32 @in_cksum(i16*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
