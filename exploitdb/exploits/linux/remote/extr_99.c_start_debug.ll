; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_99.c_start_debug.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_99.c_start_debug.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"getty()\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"fork()\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"pine\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"/tmp/pinerc\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-I\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"l,>,>,<,<,q,y\00", align 1
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [9 x i8] c"ptrace()\00", align 1
@line = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [7 x i8] c"open()\00", align 1
@PINE = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [9 x i8] c"execve()\00", align 1
@PTRACE_CONT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @start_debug(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [6 x i8*], align 16
  store i32 %0, i32* %2, align 4
  %7 = call i32 (...) @fork()
  store i32 %7, i32* %3, align 4
  %8 = call i32 @getty(i32* %5, i32* %4)
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = call i32 @die(i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %10, %1
  %13 = load i32, i32* %3, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = call i32 @die(i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %12
  %18 = load i32, i32* %3, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %49, label %20

20:                                               ; preds = %17
  %21 = bitcast [6 x i8*]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %21, i8 0, i64 48, i1 false)
  %22 = bitcast i8* %21 to [6 x i8*]*
  %23 = getelementptr inbounds [6 x i8*], [6 x i8*]* %22, i32 0, i32 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8** %23, align 16
  %24 = getelementptr inbounds [6 x i8*], [6 x i8*]* %22, i32 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8** %24, align 8
  %25 = getelementptr inbounds [6 x i8*], [6 x i8*]* %22, i32 0, i32 2
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8** %25, align 16
  %26 = getelementptr inbounds [6 x i8*], [6 x i8*]* %22, i32 0, i32 3
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8** %26, align 8
  %27 = getelementptr inbounds [6 x i8*], [6 x i8*]* %22, i32 0, i32 4
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8** %27, align 16
  %28 = load i32, i32* @PTRACE_TRACEME, align 4
  %29 = call i32 (i32, i32, i32, ...) @ptrace(i32 %28, i32 0, i32 0)
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %33

31:                                               ; preds = %20
  %32 = call i32 @die(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  br label %33

33:                                               ; preds = %31, %20
  %34 = load i32, i32* @line, align 4
  %35 = load i32, i32* @O_RDWR, align 4
  %36 = call i32 @open(i32 %34, i32 %35)
  store i32 %36, i32* %3, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = call i32 @die(i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %33
  %41 = load i32, i32* %3, align 4
  %42 = call i32 @dup2(i32 %41, i32 0)
  %43 = call i32 @close(i32 1)
  %44 = call i32 @close(i32 2)
  %45 = load i32, i32* @PINE, align 4
  %46 = getelementptr inbounds [6 x i8*], [6 x i8*]* %6, i64 0, i64 0
  %47 = call i32 @execv(i32 %45, i8** %46)
  %48 = call i32 @die(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0))
  br label %63

49:                                               ; preds = %17
  %50 = call i32 @wait(i32* null)
  %51 = load i32, i32* %2, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %62

53:                                               ; preds = %49
  %54 = load i32, i32* @PTRACE_CONT, align 4
  %55 = load i32, i32* %3, align 4
  %56 = call i32 (i32, i32, i32, ...) @ptrace(i32 %54, i32 %55, i32 0, i32 0)
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = call i32 @die(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  br label %60

60:                                               ; preds = %58, %53
  %61 = call i32 @wait(i32* null)
  br label %62

62:                                               ; preds = %60, %49
  br label %63

63:                                               ; preds = %62, %40
  %64 = load i32, i32* %3, align 4
  ret i32 %64
}

declare dso_local i32 @fork(...) #1

declare dso_local i32 @getty(i32*, i32*) #1

declare dso_local i32 @die(i32, i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @ptrace(i32, i32, i32, ...) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execv(i32, i8**) #1

declare dso_local i32 @wait(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
