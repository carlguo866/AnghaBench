; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_getinfo.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_getinfo.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"can't open datagram\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"gethostbyname\0A\00", align 1
@statusreq = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"sendto\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"read\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"linux-i386\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getinfo(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [512 x i8], align 16
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %6, align 4
  %10 = load i32, i32* @AF_INET, align 4
  %11 = load i32, i32* @SOCK_DGRAM, align 4
  %12 = call i32 @socket(i32 %10, i32 %11, i32 0)
  store i32 %12, i32* %5, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @exit(i32 1) #3
  unreachable

17:                                               ; preds = %2
  %18 = load i8*, i8** %3, align 8
  %19 = call %struct.hostent* @gethostbyname(i8* %18)
  store %struct.hostent* %19, %struct.hostent** %9, align 8
  %20 = icmp eq %struct.hostent* %19, null
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %17
  %25 = bitcast %struct.sockaddr_in* %8 to i8*
  %26 = call i32 @bzero(i8* %25, i32 12)
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = load %struct.hostent*, %struct.hostent** %9, align 8
  %30 = getelementptr inbounds %struct.hostent, %struct.hostent* %29, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = inttoptr i64 %31 to i8*
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %34 = bitcast i32* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %9, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = call i32 @bcopy(i8* %32, i8* %34, i32 %37)
  %39 = load i32, i32* %4, align 4
  %40 = call i32 @htons(i32 %39)
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %40, i32* %41, align 4
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* @statusreq, align 4
  %44 = load i32, i32* @statusreq, align 4
  %45 = call i32 @strlen(i32 %44)
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, 1
  %48 = trunc i64 %47 to i32
  %49 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %50 = call i64 @sendto(i32 %42, i32 %43, i32 %48, i32 0, %struct.sockaddr* %49, i32 12)
  %51 = icmp slt i64 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %24
  %53 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %54 = call i32 @exit(i32 1) #3
  unreachable

55:                                               ; preds = %24
  %56 = call i32 @usleep(i32 70000)
  %57 = load i32, i32* %5, align 4
  %58 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %59 = call i64 @read(i32 %57, i8* %58, i32 511)
  %60 = icmp slt i64 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %55
  %62 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %63 = call i32 @exit(i32 1) #3
  unreachable

64:                                               ; preds = %55
  %65 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %66 = call i64 @strstr(i8* %65, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %64
  store i32 0, i32* %6, align 4
  br label %69

69:                                               ; preds = %68, %64
  %70 = load i32, i32* %6, align 4
  ret i32 %70
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @bcopy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @sendto(i32, i32, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
