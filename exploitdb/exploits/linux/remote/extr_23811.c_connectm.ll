; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23811.c_connectm.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23811.c_connectm.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@inet = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"error> cannot resolve %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connectm(i8* %0, i32 %1, i32* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  %10 = call i32 @alarm(i32 20)
  %11 = load i32, i32* @PF_INET, align 4
  %12 = load i32, i32* @SOCK_STREAM, align 4
  %13 = call i32 @socket(i32 %11, i32 %12, i32 0)
  %14 = load i32*, i32** %7, align 8
  store i32 %13, i32* %14, align 4
  %15 = icmp ne i32 %13, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %50

17:                                               ; preds = %3
  %18 = load i8*, i8** %5, align 8
  %19 = call i32 @inet_addr(i8* %18)
  store i32 %19, i32* @inet, align 4
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %21, label %34

21:                                               ; preds = %17
  %22 = load i8*, i8** %5, align 8
  %23 = call %struct.hostent* @gethostbyname(i8* %22)
  store %struct.hostent* %23, %struct.hostent** %9, align 8
  %24 = icmp ne %struct.hostent* %23, null
  br i1 %24, label %25, label %30

25:                                               ; preds = %21
  %26 = load %struct.hostent*, %struct.hostent** %9, align 8
  %27 = getelementptr inbounds %struct.hostent, %struct.hostent* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @memcpy(i32* @inet, i32 %28, i32 4)
  br label %33

30:                                               ; preds = %21
  %31 = load i8*, i8** %5, align 8
  %32 = call i32 @log(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %31)
  store i32 -1, i32* %4, align 4
  br label %50

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33, %17
  %35 = load i32, i32* @PF_INET, align 4
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* %6, align 4
  %38 = call i32 @htons(i32 %37)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %38, i32* %39, align 4
  %40 = load i32, i32* @inet, align 4
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 0
  store i32 %40, i32* %42, align 4
  %43 = load i32*, i32** %7, align 8
  %44 = load i32, i32* %43, align 4
  %45 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %46 = call i32 @connect(i32 %44, %struct.sockaddr* %45, i32 12)
  store i32 %46, i32* @inet, align 4
  %47 = call i32 @perror(i32* null)
  %48 = call i32 @alarm(i32 0)
  %49 = load i32, i32* @inet, align 4
  store i32 %49, i32* %4, align 4
  br label %50

50:                                               ; preds = %34, %30, %16
  %51 = load i32, i32* %4, align 4
  ret i32 %51
}

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @log(i8*, i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
