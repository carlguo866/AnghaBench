; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4437.c_parse_response.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4437.c_parse_response.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"HTTP/1.1 \00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"HTTP/1.1 %d\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[*] request successful\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"[*] request failed (error code: %d)\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"Server: \00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"[*] server version: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"[*] %d bytes written to %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @parse_response(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  store i32 1, i32* %9, align 4
  store i32 0, i32* %11, align 4
  %13 = load i32*, i32** @stdout, align 8
  store i32* %13, i32** %12, align 8
  %14 = load i8*, i8** %4, align 8
  %15 = call i8* @strtok(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i8* %15, i8** %7, align 8
  br label %16

16:                                               ; preds = %83, %3
  %17 = load i8*, i8** %7, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %85

19:                                               ; preds = %16
  %20 = load i32, i32* %9, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %67

22:                                               ; preds = %19
  %23 = load i8*, i8** %7, align 8
  %24 = call i8* @strstr(i8* %23, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %25 = load i8*, i8** %7, align 8
  %26 = icmp eq i8* %24, %25
  br i1 %26, label %27, label %38

27:                                               ; preds = %22
  %28 = load i8*, i8** %7, align 8
  %29 = call i32 @sscanf(i8* %28, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* %8)
  %30 = load i32, i32* %8, align 4
  %31 = icmp eq i32 %30, 200
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %37

34:                                               ; preds = %27
  %35 = load i32, i32* %8, align 4
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i32 %35)
  br label %37

37:                                               ; preds = %34, %32
  br label %66

38:                                               ; preds = %22
  %39 = load i8*, i8** %7, align 8
  %40 = call i8* @strstr(i8* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %41 = load i8*, i8** %7, align 8
  %42 = icmp eq i8* %40, %41
  br i1 %42, label %43, label %48

43:                                               ; preds = %38
  %44 = load i8*, i8** %7, align 8
  %45 = call i8* @strstr(i8* %44, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %46 = getelementptr inbounds i8, i8* %45, i64 8
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i8* %46)
  br label %65

48:                                               ; preds = %38
  %49 = load i8*, i8** %7, align 8
  %50 = call i32 @strchr(i8* %49, i8 signext 58)
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %64, label %52

52:                                               ; preds = %48
  %53 = load i32, i32* %8, align 4
  %54 = icmp eq i32 %53, 200
  br i1 %54, label %55, label %64

55:                                               ; preds = %52
  %56 = load i8*, i8** %7, align 8
  %57 = call i32 @sscanf(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32* %10)
  store i32 0, i32* %9, align 4
  %58 = load i8*, i8** %6, align 8
  %59 = icmp ne i8* %58, null
  br i1 %59, label %60, label %63

60:                                               ; preds = %55
  %61 = load i8*, i8** %6, align 8
  %62 = call i32* @fopen(i8* %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i32* %62, i32** %12, align 8
  br label %63

63:                                               ; preds = %60, %55
  br label %64

64:                                               ; preds = %63, %52, %48
  br label %65

65:                                               ; preds = %64, %43
  br label %66

66:                                               ; preds = %65, %37
  br label %83

67:                                               ; preds = %19
  %68 = load i32, i32* %11, align 4
  %69 = load i32, i32* %10, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %82

71:                                               ; preds = %67
  %72 = load i32*, i32** %12, align 8
  %73 = load i8*, i8** %7, align 8
  %74 = call i32 @fprintf(i32* %72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8* %73)
  %75 = load i8*, i8** %7, align 8
  %76 = call i64 @strlen(i8* %75)
  %77 = add nsw i64 %76, 1
  %78 = load i32, i32* %11, align 4
  %79 = sext i32 %78 to i64
  %80 = add nsw i64 %79, %77
  %81 = trunc i64 %80 to i32
  store i32 %81, i32* %11, align 4
  br label %82

82:                                               ; preds = %71, %67
  br label %83

83:                                               ; preds = %82, %66
  %84 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i8* %84, i8** %7, align 8
  br label %16

85:                                               ; preds = %16
  %86 = load i32*, i32** %12, align 8
  %87 = load i32*, i32** @stdout, align 8
  %88 = icmp ne i32* %86, %87
  br i1 %88, label %89, label %98

89:                                               ; preds = %85
  %90 = load i32*, i32** %12, align 8
  %91 = icmp ne i32* %90, null
  br i1 %91, label %92, label %98

92:                                               ; preds = %89
  %93 = load i32, i32* %11, align 4
  %94 = load i8*, i8** %6, align 8
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i32 %93, i8* %94)
  %96 = load i32*, i32** %12, align 8
  %97 = call i32 @fclose(i32* %96)
  br label %98

98:                                               ; preds = %92, %89, %85
  ret void
}

declare dso_local i8* @strtok(i8*, i8*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strchr(i8*, i8 signext) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
