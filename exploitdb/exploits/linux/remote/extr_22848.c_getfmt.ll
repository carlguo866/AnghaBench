; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22848.c_getfmt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22848.c_getfmt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@POPS = common dso_local global i32 0, align 4
@SSCANF_GOT_ADDR = common dso_local global i64 0, align 8
@RET_ADDR = common dso_local global i64 0, align 8
@FMTSIZE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [35 x i8] c"getfmt(): allocating memory failed\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"%c%c%c%c%%.%dd%%%d$hn\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"x\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getfmt(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [3 x i8], align 1
  store i16 %0, i16* %2, align 2
  %10 = load i32, i32* @POPS, align 4
  store i32 %10, i32* %5, align 4
  %11 = load i64, i64* @SSCANF_GOT_ADDR, align 8
  store i64 %11, i64* %6, align 8
  %12 = load i64, i64* @RET_ADDR, align 8
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 4278190080
  %15 = lshr i64 %14, 24
  %16 = trunc i64 %15 to i8
  %17 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  store i8 %16, i8* %17, align 1
  %18 = load i64, i64* %6, align 8
  %19 = and i64 %18, 16711680
  %20 = lshr i64 %19, 16
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = load i64, i64* %6, align 8
  %24 = and i64 %23, 65280
  %25 = lshr i64 %24, 8
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  store i8 %26, i8* %27, align 1
  %28 = load i64, i64* %6, align 8
  %29 = and i64 %28, 255
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 3
  store i8 %30, i8* %31, align 1
  %32 = load i64, i64* %7, align 8
  %33 = and i64 %32, 4294901760
  %34 = lshr i64 %33, 16
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %3, align 4
  %36 = load i64, i64* %7, align 8
  %37 = and i64 %36, 65535
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %4, align 4
  %39 = load i64, i64* @FMTSIZE, align 8
  %40 = add nsw i64 %39, 1
  %41 = call i64 @malloc(i64 %40)
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %8, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %1
  %45 = call i32 @printe(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %46

46:                                               ; preds = %44, %1
  %47 = load i8*, i8** %8, align 8
  %48 = load i64, i64* @FMTSIZE, align 8
  %49 = add nsw i64 %48, 1
  %50 = call i32 @memset(i8* %47, i32 0, i64 %49)
  %51 = load i16, i16* %2, align 2
  %52 = icmp ne i16 %51, 0
  br i1 %52, label %72, label %53

53:                                               ; preds = %46
  %54 = load i8*, i8** %8, align 8
  %55 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %57, 2
  %59 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = load i32, i32* %3, align 4
  %69 = sub i32 %68, 9
  %70 = load i32, i32* %5, align 4
  %71 = call i32 (i8*, i8*, ...) @sprintf(i8* %54, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 %58, i32 %61, i32 %64, i32 %67, i32 %69, i32 %70)
  br label %103

72:                                               ; preds = %46
  %73 = load i16, i16* %2, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %94

76:                                               ; preds = %72
  %77 = load i8*, i8** %8, align 8
  %78 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 2
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = getelementptr inbounds [3 x i8], [3 x i8]* %9, i64 0, i64 0
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = load i32, i32* %4, align 4
  %91 = sub i32 %90, 9
  %92 = load i32, i32* %5, align 4
  %93 = call i32 (i8*, i8*, ...) @sprintf(i8* %77, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 %80, i32 %83, i32 %86, i32 %89, i32 %91, i32 %92)
  br label %102

94:                                               ; preds = %72
  %95 = load i16, i16* %2, align 2
  %96 = zext i16 %95 to i32
  %97 = icmp sgt i32 %96, 1
  br i1 %97, label %98, label %101

98:                                               ; preds = %94
  %99 = load i8*, i8** %8, align 8
  %100 = call i32 (i8*, i8*, ...) @sprintf(i8* %99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  br label %101

101:                                              ; preds = %98, %94
  br label %102

102:                                              ; preds = %101, %76
  br label %103

103:                                              ; preds = %102, %53
  %104 = load i8*, i8** %8, align 8
  ret i8* %104
}

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
