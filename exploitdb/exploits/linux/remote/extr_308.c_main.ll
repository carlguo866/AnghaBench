; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_308.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_308.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@PORT = common dso_local global i32 0, align 4
@main.exploit = internal global i8* null, align 8
@main.work = internal global i8* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"a:o:\00", align 1
@optarg = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [24 x i8] c"Could not create socket\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"Could not re-use socket\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"Could not bind socket\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"Could not listen on socket\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c" -> Listening for a connection on port %d\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [37 x i8] c" -> Action: Attaching from host[%s]\0A\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"Could not prep package\0A\00", align 1
@payload = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [24 x i8] c"Could not send package\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c" -> Test complete\0A\0A\00", align 1
@SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 1, i32* %8, align 4
  %16 = load i32, i32* @PORT, align 4
  store i32 %16, i32* %9, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = call i32 (...) @banner()
  %21 = load i8*, i8** @main.exploit, align 8
  %22 = call i32 @example(i8* %21)
  %23 = call i32 @_exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = call i32 (...) @banner()
  br label %26

26:                                               ; preds = %42, %24
  %27 = load i32, i32* %4, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = call i32 @getopt(i32 %27, i8** %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %29, i32* %11, align 4
  %30 = icmp ne i32 %29, -1
  br i1 %30, label %31, label %43

31:                                               ; preds = %26
  %32 = load i32, i32* %11, align 4
  switch i32 %32, label %39 [
    i32 97, label %33
    i32 111, label %36
  ]

33:                                               ; preds = %31
  %34 = load i32, i32* @optarg, align 4
  %35 = call i32 @atoi(i32 %34)
  store i32 %35, i32* %6, align 4
  br label %42

36:                                               ; preds = %31
  %37 = load i32, i32* @optarg, align 4
  %38 = call i32 @atoi(i32 %37)
  store i32 %38, i32* %7, align 4
  br label %42

39:                                               ; preds = %31
  %40 = load i32, i32* @ALIGN, align 4
  store i32 %40, i32* %6, align 4
  %41 = load i32, i32* @OFFSET, align 4
  store i32 %41, i32* %7, align 4
  br label %42

42:                                               ; preds = %39, %36, %33
  br label %26

43:                                               ; preds = %26
  %44 = load i32, i32* @AF_INET, align 4
  %45 = load i32, i32* @SOCK_STREAM, align 4
  %46 = call i32 @socket(i32 %44, i32 %45, i32 0)
  store i32 %46, i32* %13, align 4
  %47 = icmp eq i32 %46, -1
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = call i32 @die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  br label %50

50:                                               ; preds = %48, %43
  %51 = load i32, i32* %13, align 4
  %52 = load i32, i32* @SOL_SOCKET, align 4
  %53 = load i32, i32* @SO_REUSEADDR, align 4
  %54 = call i32 @setsockopt(i32 %51, i32 %52, i32 %53, i32* %8, i32 4)
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %58

56:                                               ; preds = %50
  %57 = call i32 @die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  br label %58

58:                                               ; preds = %56, %50
  %59 = call i32 @memset(%struct.sockaddr_in* %15, i32 0, i32 12)
  %60 = load i32, i32* @AF_INET, align 4
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %60, i32* %61, align 4
  %62 = load i32, i32* %9, align 4
  %63 = call i32 @htons(i32 %62)
  %64 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i32 %63, i32* %64, align 4
  %65 = load i32, i32* @INADDR_ANY, align 4
  %66 = call i32 @htonl(i32 %65)
  %67 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %68 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %67, i32 0, i32 0
  store i32 %66, i32* %68, align 4
  %69 = load i32, i32* %13, align 4
  %70 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %71 = call i32 @bind(i32 %69, %struct.sockaddr* %70, i32 4)
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %75

73:                                               ; preds = %58
  %74 = call i32 @die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  br label %75

75:                                               ; preds = %73, %58
  %76 = load i32, i32* %13, align 4
  %77 = call i32 @listen(i32 %76, i32 0)
  %78 = icmp eq i32 %77, -1
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = call i32 @die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0))
  br label %81

81:                                               ; preds = %79, %75
  %82 = load i32, i32* %9, align 4
  %83 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %82)
  store i32 12, i32* %10, align 4
  %84 = load i32, i32* %13, align 4
  %85 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %86 = call i32 @accept(i32 %84, %struct.sockaddr* %85, i32* %10)
  store i32 %86, i32* %12, align 4
  %87 = load i32, i32* @stderr, align 4
  %88 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %89 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %88, i32 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = call i8* @inet_ntoa(i32 %90)
  %92 = call i32 (i32, i8*, ...) @fprintf(i32 %87, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* %91)
  %93 = load i32, i32* %12, align 4
  %94 = load i32, i32* %6, align 4
  %95 = load i32, i32* %7, align 4
  %96 = call i32 @pkg_prep(i32 %93, i32 %94, i32 %95)
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %102

98:                                               ; preds = %81
  %99 = load i32, i32* @stderr, align 4
  %100 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0))
  %101 = call i32 @_exit(i32 1) #3
  unreachable

102:                                              ; preds = %81
  %103 = load i32, i32* %12, align 4
  %104 = load i32, i32* @payload, align 4
  %105 = call i32 @pkg_send(i32 %103, i32 %104)
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %111

107:                                              ; preds = %102
  %108 = load i32, i32* @stderr, align 4
  %109 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %110 = call i32 @_exit(i32 1) #3
  unreachable

111:                                              ; preds = %102
  %112 = call i32 @sleep(i32 2)
  %113 = load i32, i32* @stderr, align 4
  %114 = call i32 (i32, i8*, ...) @fprintf(i32 %113, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0))
  %115 = load i32, i32* %12, align 4
  %116 = call i32 @close(i32 %115)
  %117 = load i8*, i8** @main.work, align 8
  %118 = call i32 @looking(i8* %117)
  %119 = load i32, i32* @SUCCESS, align 4
  ret i32 %119
}

declare dso_local i32 @banner(...) #1

declare dso_local i32 @example(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @pkg_prep(i32, i32, i32) #1

declare dso_local i32 @pkg_send(i32, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @looking(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
