; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_asn_append_integer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_21200.c_asn_append_integer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"error: bad nlen in asn_append_integer(): %i\0A\00", align 1
@ASN_INTEGER = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i8** (i8**, i64, i32)* @asn_append_integer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i8** @asn_append_integer(i8** %0, i64 %1, i32 %2) #0 {
  %4 = alloca i8**, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i8** %0, i8*** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 4
  br i1 %8, label %9, label %18

9:                                                ; preds = %3
  %10 = load i32, i32* %6, align 4
  %11 = icmp ne i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %9
  %13 = load i32, i32* %6, align 4
  %14 = icmp ne i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load i32, i32* %6, align 4
  %17 = call i32 @fatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i32 %16)
  br label %18

18:                                               ; preds = %15, %12, %9, %3
  %19 = load i32, i32* @ASN_INTEGER, align 4
  %20 = sext i32 %19 to i64
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8**, i8*** %4, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i32 1
  store i8** %23, i8*** %4, align 8
  store i8* %21, i8** %22, align 8
  %24 = load i32, i32* %6, align 4
  %25 = and i32 %24, 255
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %26 to i8*
  %28 = load i8**, i8*** %4, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i32 1
  store i8** %29, i8*** %4, align 8
  store i8* %27, i8** %28, align 8
  %30 = load i32, i32* %6, align 4
  switch i32 %30, label %73 [
    i32 1, label %31
    i32 2, label %37
    i32 4, label %49
  ]

31:                                               ; preds = %18
  %32 = load i64, i64* %5, align 8
  %33 = and i64 %32, 255
  %34 = inttoptr i64 %33 to i8*
  %35 = load i8**, i8*** %4, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i32 1
  store i8** %36, i8*** %4, align 8
  store i8* %34, i8** %35, align 8
  br label %73

37:                                               ; preds = %18
  %38 = load i64, i64* %5, align 8
  %39 = and i64 %38, 65280
  %40 = lshr i64 %39, 8
  %41 = inttoptr i64 %40 to i8*
  %42 = load i8**, i8*** %4, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i32 1
  store i8** %43, i8*** %4, align 8
  store i8* %41, i8** %42, align 8
  %44 = load i64, i64* %5, align 8
  %45 = and i64 %44, 255
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8**, i8*** %4, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i32 1
  store i8** %48, i8*** %4, align 8
  store i8* %46, i8** %47, align 8
  br label %73

49:                                               ; preds = %18
  %50 = load i64, i64* %5, align 8
  %51 = and i64 %50, 4278190080
  %52 = lshr i64 %51, 24
  %53 = inttoptr i64 %52 to i8*
  %54 = load i8**, i8*** %4, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i32 1
  store i8** %55, i8*** %4, align 8
  store i8* %53, i8** %54, align 8
  %56 = load i64, i64* %5, align 8
  %57 = and i64 %56, 16711680
  %58 = lshr i64 %57, 16
  %59 = inttoptr i64 %58 to i8*
  %60 = load i8**, i8*** %4, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i32 1
  store i8** %61, i8*** %4, align 8
  store i8* %59, i8** %60, align 8
  %62 = load i64, i64* %5, align 8
  %63 = and i64 %62, 65280
  %64 = lshr i64 %63, 8
  %65 = inttoptr i64 %64 to i8*
  %66 = load i8**, i8*** %4, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i32 1
  store i8** %67, i8*** %4, align 8
  store i8* %65, i8** %66, align 8
  %68 = load i64, i64* %5, align 8
  %69 = and i64 %68, 255
  %70 = inttoptr i64 %69 to i8*
  %71 = load i8**, i8*** %4, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i32 1
  store i8** %72, i8*** %4, align 8
  store i8* %70, i8** %71, align 8
  br label %73

73:                                               ; preds = %18, %49, %37, %31
  %74 = load i8**, i8*** %4, align 8
  ret i8** %74
}

declare dso_local i32 @fatal(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
