; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_373.c_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Logged in as %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @login(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %10 = load i32, i32* @BS, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %7, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %8, align 8
  %14 = load i32, i32* @BS, align 4
  %15 = zext i32 %14 to i64
  %16 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %9, align 8
  %17 = load i32, i32* @BS, align 4
  %18 = sub nsw i32 %17, 1
  %19 = load i8*, i8** %4, align 8
  %20 = call i32 @snprintf(i8* %13, i32 %18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = load i32, i32* @BS, align 4
  %22 = sub nsw i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %13, i64 %23
  store i8 0, i8* %24, align 1
  %25 = load i32, i32* @BS, align 4
  %26 = sub nsw i32 %25, 1
  %27 = load i8*, i8** %5, align 8
  %28 = call i32 @snprintf(i8* %16, i32 %26, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = load i32, i32* @BS, align 4
  %30 = sub nsw i32 %29, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %16, i64 %31
  store i8 0, i8* %32, align 1
  %33 = call i32 @sleep(i32 1)
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @strlen(i8* %13)
  %36 = call i64 @send(i32 %34, i8* %13, i32 %35, i32 0)
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %3
  %39 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %3
  %41 = call i32 @sleep(i32 1)
  %42 = load i32, i32* %6, align 4
  %43 = call i32 @strlen(i8* %16)
  %44 = call i64 @send(i32 %42, i8* %16, i32 %43, i32 0)
  %45 = icmp slt i64 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %40
  %47 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %48

48:                                               ; preds = %46, %40
  %49 = call i32 @sleep(i32 1)
  %50 = load i8*, i8** %4, align 8
  %51 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* %50)
  %52 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %52)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
