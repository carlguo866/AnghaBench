; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_evil_auth.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23772.c_evil_auth.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"** socket()\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"** bind()\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"** listen()\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[*] Awaiting auth connection\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"** Connection error\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"** getpeername()\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"[*] %s:%u connected to auth\0A\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"** write()\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"[*] Sending evil ident\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"** close()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @evil_auth(i32 %0, i8* %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [128 x i8], align 16
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store i32 12, i32* %10, align 4
  %14 = load i32, i32* @AF_INET, align 4
  %15 = load i32, i32* @SOCK_STREAM, align 4
  %16 = call i32 @socket(i32 %14, i32 %15, i32 0)
  store i32 %16, i32* %11, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %3
  %19 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %96

20:                                               ; preds = %3
  %21 = call i32 @memset(%struct.sockaddr_in* %9, i32 0, i32 12)
  %22 = load i32, i32* @AF_INET, align 4
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %22, i32* %23, align 4
  %24 = load i32, i32* %5, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* @INADDR_ANY, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  store i32 %26, i32* %28, align 4
  %29 = load i32, i32* %11, align 4
  %30 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %31 = call i64 @bind(i32 %29, %struct.sockaddr* %30, i32 12)
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %20
  %34 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %96

35:                                               ; preds = %20
  %36 = load i32, i32* %11, align 4
  %37 = call i64 @listen(i32 %36, i32 1)
  %38 = icmp slt i64 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %96

41:                                               ; preds = %35
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %43 = load i32, i32* %11, align 4
  %44 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %45 = call i32 @accept(i32 %43, %struct.sockaddr* %44, i32* %10)
  store i32 %45, i32* %12, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %41
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 @fprintf(i32 %48, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %96

50:                                               ; preds = %41
  %51 = load i32, i32* %12, align 4
  %52 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %53 = call i64 @getpeername(i32 %51, %struct.sockaddr* %52, i32* %10)
  %54 = icmp slt i64 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  br label %66

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = call i8* @inet_ntoa(i32 %60)
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = call i32 @ntohs(i32 %63)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %61, i32 %64)
  br label %66

66:                                               ; preds = %57, %55
  %67 = load i32, i32* %12, align 4
  %68 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %69 = call i64 @read(i32 %67, i8* %68, i32 128)
  %70 = icmp sle i64 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %96

73:                                               ; preds = %66
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %75 = load i32, i32* %12, align 4
  %76 = load i8*, i8** %6, align 8
  %77 = load i64, i64* %7, align 8
  %78 = call i64 @write(i32 %75, i8* %76, i64 %77)
  %79 = load i64, i64* %7, align 8
  %80 = icmp ne i64 %78, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %73
  %82 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %96

83:                                               ; preds = %73
  %84 = load i32, i32* %12, align 4
  %85 = call i64 @close(i32 %84)
  %86 = icmp slt i64 %85, 0
  br i1 %86, label %93, label %87

87:                                               ; preds = %83
  %88 = load i32, i32* %11, align 4
  %89 = icmp slt i32 %88, 0
  %90 = zext i1 %89 to i32
  %91 = call i64 @close(i32 %90)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %87, %83
  %94 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %96

95:                                               ; preds = %87
  store i32 0, i32* %4, align 4
  br label %96

96:                                               ; preds = %95, %93, %81, %71, %47, %39, %33, %18
  %97 = load i32, i32* %4, align 4
  ret i32 %97
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @getpeername(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @write(i32, i8*, i64) #1

declare dso_local i64 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
