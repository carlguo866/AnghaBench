; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22072.c_makereq.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22072.c_makereq.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.in_addr, i32, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @makereq(i8* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2000 x i8], align 16
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %16 = load i8*, i8** %6, align 8
  %17 = call %struct.hostent* @gethostbyname(i8* %16)
  store %struct.hostent* %17, %struct.hostent** %15, align 8
  %18 = icmp eq %struct.hostent* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %4
  store i32 2, i32* %5, align 4
  br label %58

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 3
  %22 = call i32 @bzero(i32* %21, i32 8)
  %23 = load i32, i32* @AF_INET, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* %9, align 4
  %26 = call i32 @htons(i32 %25)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %29 = load %struct.hostent*, %struct.hostent** %15, align 8
  %30 = getelementptr inbounds %struct.hostent, %struct.hostent* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = inttoptr i64 %31 to %struct.in_addr*
  %33 = bitcast %struct.in_addr* %28 to i8*
  %34 = bitcast %struct.in_addr* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 4, i1 false)
  %35 = load i32, i32* @AF_INET, align 4
  %36 = load i32, i32* @SOCK_STREAM, align 4
  %37 = call i32 @socket(i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %40 = call i64 @connect(i32 %38, %struct.sockaddr* %39, i32 16)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %20
  store i32 3, i32* %5, align 4
  br label %58

43:                                               ; preds = %20
  %44 = load i32, i32* %10, align 4
  %45 = load i8*, i8** %7, align 8
  %46 = load i8*, i8** %7, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = call i32 @send(i32 %44, i8* %45, i32 %47, i32 0)
  %49 = load i32, i32* %10, align 4
  %50 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %51 = call i32 @read(i32 %49, i8* %50, i32 500)
  %52 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %53 = load i8*, i8** %8, align 8
  %54 = call i64 @strstr(i8* %52, i8* %53)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %43
  store i32 200, i32* %5, align 4
  br label %58

57:                                               ; preds = %43
  store i32 404, i32* %5, align 4
  br label %58

58:                                               ; preds = %57, %56, %42, %19
  %59 = load i32, i32* %5, align 4
  ret i32 %59
}

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
