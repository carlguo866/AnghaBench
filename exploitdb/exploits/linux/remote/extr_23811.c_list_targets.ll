; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23811.c_list_targets.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23811.c_list_targets.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i32, i64, i32* }
%struct.TYPE_4__ = type { i32, i32, i32, i32* }

@.str = private unnamed_addr constant [20 x i8] c"available targets:\0A\00", align 1
@i = common dso_local global i64 0, align 8
@tlist = common dso_local global %struct.TYPE_3__* null, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c" %2d %s\09\09 0x%08x %5d %4d\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"shellcodes:\0A\00", align 1
@slist = common dso_local global %struct.TYPE_4__* null, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c" %2d %s (%d)\09\09 %6d %6d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @list_targets() #0 {
  %1 = call i32 (i8*, ...) @log(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store i64 0, i64* @i, align 8
  br label %2

2:                                                ; preds = %42, %0
  %3 = load %struct.TYPE_3__*, %struct.TYPE_3__** @tlist, align 8
  %4 = load i64, i64* @i, align 8
  %5 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %3, i64 %4
  %6 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %5, i32 0, i32 3
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ne i32* %7, null
  br i1 %8, label %9, label %45

9:                                                ; preds = %2
  %10 = load i64, i64* @i, align 8
  %11 = add i64 %10, 1
  %12 = load %struct.TYPE_3__*, %struct.TYPE_3__** @tlist, align 8
  %13 = load i64, i64* @i, align 8
  %14 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %12, i64 %13
  %15 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %14, i32 0, i32 3
  %16 = load i32*, i32** %15, align 8
  %17 = load %struct.TYPE_3__*, %struct.TYPE_3__** @tlist, align 8
  %18 = load i64, i64* @i, align 8
  %19 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %17, i64 %18
  %20 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %19, i32 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = trunc i64 %21 to i32
  %23 = load %struct.TYPE_3__*, %struct.TYPE_3__** @tlist, align 8
  %24 = load i64, i64* @i, align 8
  %25 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %23, i64 %24
  %26 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = load %struct.TYPE_3__*, %struct.TYPE_3__** @tlist, align 8
  %29 = load i64, i64* @i, align 8
  %30 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %28, i64 %29
  %31 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = call i32 (i8*, ...) @log(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i64 %11, i32* %16, i32 %22, i32 %27, i32 %32)
  %34 = load i64, i64* @i, align 8
  %35 = add i64 %34, 1
  %36 = urem i64 %35, 3
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %9
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 @fputc(i8 signext 10, i32 %39)
  br label %41

41:                                               ; preds = %38, %9
  br label %42

42:                                               ; preds = %41
  %43 = load i64, i64* @i, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* @i, align 8
  br label %2

45:                                               ; preds = %2
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 @fputc(i8 signext 10, i32 %46)
  %48 = call i32 (i8*, ...) @log(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i64 0, i64* @i, align 8
  br label %49

49:                                               ; preds = %80, %45
  %50 = load %struct.TYPE_4__*, %struct.TYPE_4__** @slist, align 8
  %51 = load i64, i64* @i, align 8
  %52 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i64 %51
  %53 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %52, i32 0, i32 3
  %54 = load i32*, i32** %53, align 8
  %55 = icmp ne i32* %54, null
  br i1 %55, label %56, label %83

56:                                               ; preds = %49
  %57 = load i64, i64* @i, align 8
  %58 = load %struct.TYPE_4__*, %struct.TYPE_4__** @slist, align 8
  %59 = load i64, i64* @i, align 8
  %60 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %58, i64 %59
  %61 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %60, i32 0, i32 3
  %62 = load i32*, i32** %61, align 8
  %63 = load %struct.TYPE_4__*, %struct.TYPE_4__** @slist, align 8
  %64 = load i64, i64* @i, align 8
  %65 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %63, i64 %64
  %66 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %65, i32 0, i32 2
  %67 = load i32, i32* %66, align 8
  %68 = call i32 @strlen(i32 %67)
  %69 = load %struct.TYPE_4__*, %struct.TYPE_4__** @slist, align 8
  %70 = load i64, i64* @i, align 8
  %71 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %69, i64 %70
  %72 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = load %struct.TYPE_4__*, %struct.TYPE_4__** @slist, align 8
  %75 = load i64, i64* @i, align 8
  %76 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %74, i64 %75
  %77 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %76, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = call i32 (i8*, ...) @log(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i64 %57, i32* %62, i32 %68, i32 %73, i32 %78)
  br label %80

80:                                               ; preds = %56
  %81 = load i64, i64* @i, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* @i, align 8
  br label %49

83:                                               ; preds = %49
  %84 = load i32, i32* @stderr, align 4
  %85 = call i32 @fputc(i8 signext 10, i32 %84)
  ret void
}

declare dso_local i32 @log(i8*, ...) #1

declare dso_local i32 @fputc(i8 signext, i32) #1

declare dso_local i32 @strlen(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
