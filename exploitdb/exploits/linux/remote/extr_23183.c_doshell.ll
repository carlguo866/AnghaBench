; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23183.c_doshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_23183.c_doshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [36 x i8] c"-> Connection closed by local user\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [38 x i8] c"-> Connection closed by remote host.\0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"-> read() error\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @doshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [512 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  br label %8

8:                                                ; preds = %1, %76
  %9 = call i32 @FD_SET(i32 0, i32* %6)
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %6)
  %12 = load i32, i32* %2, align 4
  %13 = call i32 @FD_SET(i32 %12, i32* %7)
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  %16 = call i32 @select(i32 %15, i32* %6, i32* null, i32* null, i32* null)
  %17 = call i64 @FD_ISSET(i32 0, i32* %6)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %48

19:                                               ; preds = %8
  %20 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %21 = call i32 @read(i32 0, i8* %20, i32 512)
  store i32 %21, i32* %3, align 4
  %22 = load i32, i32* %3, align 4
  %23 = icmp sle i32 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %19
  %25 = load i32, i32* @stdout, align 4
  %26 = call i32 @fprintf(i32 %25, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* @EXIT_FAILURE, align 4
  %28 = call i32 @exit(i32 %27) #3
  unreachable

29:                                               ; preds = %19
  store i32 0, i32* %4, align 4
  br label %30

30:                                               ; preds = %46, %29
  %31 = load i32, i32* %4, align 4
  %32 = icmp ne i32 %31, 0
  %33 = xor i1 %32, true
  br i1 %33, label %34, label %47

34:                                               ; preds = %30
  %35 = load i32, i32* %2, align 4
  %36 = add nsw i32 %35, 1
  %37 = call i32 @select(i32 %36, i32* null, i32* %7, i32* null, i32* null)
  %38 = load i32, i32* %2, align 4
  %39 = call i64 @FD_ISSET(i32 %38, i32* %7)
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %34
  %42 = load i32, i32* %2, align 4
  %43 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %44 = load i32, i32* %3, align 4
  %45 = call i32 @write(i32 %42, i8* %43, i32 %44)
  store i32 1, i32* %4, align 4
  br label %46

46:                                               ; preds = %41, %34
  br label %30

47:                                               ; preds = %30
  br label %48

48:                                               ; preds = %47, %8
  %49 = load i32, i32* %2, align 4
  %50 = call i64 @FD_ISSET(i32 %49, i32* %6)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %76

52:                                               ; preds = %48
  %53 = load i32, i32* %2, align 4
  %54 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %55 = call i32 @read(i32 %53, i8* %54, i32 512)
  store i32 %55, i32* %3, align 4
  %56 = load i32, i32* %3, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %52
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 @fprintf(i32 %59, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %61 = load i32, i32* @EXIT_FAILURE, align 4
  %62 = call i32 @exit(i32 %61) #3
  unreachable

63:                                               ; preds = %52
  %64 = load i32, i32* %3, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %63
  %67 = load i32, i32* @stdout, align 4
  %68 = call i32 @fprintf(i32 %67, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %69 = load i32, i32* @EXIT_FAILURE, align 4
  %70 = call i32 @exit(i32 %69) #3
  unreachable

71:                                               ; preds = %63
  br label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds [512 x i8], [512 x i8]* %5, i64 0, i64 0
  %74 = load i32, i32* %3, align 4
  %75 = call i32 @write(i32 1, i8* %73, i32 %74)
  br label %76

76:                                               ; preds = %72, %48
  br label %8
}

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
