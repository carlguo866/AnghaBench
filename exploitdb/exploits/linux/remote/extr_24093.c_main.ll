; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_24093.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i64 }

@PORT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"o:n:x:a:p:t:s:bchv\00", align 1
@OPT_BRUTE = common dso_local global i32 0, align 4
@opt_flags = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@alignment = common dso_local global i8* null, align 8
@timeout = common dso_local global i8* null, align 8
@steps = common dso_local global i8* null, align 8
@nutcase = common dso_local global i8* null, align 8
@OPT_VERBOSE = common dso_local global i32 0, align 4
@OPT_CHECK = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@target = common dso_local global %struct.TYPE_3__* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %9, align 8
  %10 = load i8**, i8*** %5, align 8
  %11 = getelementptr inbounds i8*, i8** %10, i64 0
  %12 = load i8*, i8** %11, align 8
  %13 = call i32 @banner(i8* %12)
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @ussage(i8* %19)
  store i32 %20, i32* %3, align 4
  br label %111

21:                                               ; preds = %2
  %22 = load i32, i32* @PORT, align 4
  store i32 %22, i32* %7, align 4
  store i32 -1, i32* %8, align 4
  br label %23

23:                                               ; preds = %71, %21
  %24 = load i32, i32* %4, align 4
  %25 = load i8**, i8*** %5, align 8
  %26 = call i32 @getopt(i32 %24, i8** %25, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  store i32 %26, i32* %6, align 4
  %27 = icmp ne i32 %26, -1
  br i1 %27, label %28, label %72

28:                                               ; preds = %23
  %29 = load i32, i32* %6, align 4
  switch i32 %29, label %66 [
    i32 98, label %30
    i32 112, label %34
    i32 120, label %38
    i32 97, label %41
    i32 116, label %44
    i32 111, label %48
    i32 115, label %51
    i32 110, label %54
    i32 118, label %57
    i32 99, label %61
    i32 104, label %65
  ]

30:                                               ; preds = %28
  %31 = load i32, i32* @OPT_BRUTE, align 4
  %32 = load i32, i32* @opt_flags, align 4
  %33 = or i32 %32, %31
  store i32 %33, i32* @opt_flags, align 4
  br label %71

34:                                               ; preds = %28
  %35 = load i32, i32* @optarg, align 4
  %36 = call i8* @atoi(i32 %35)
  %37 = ptrtoint i8* %36 to i32
  store i32 %37, i32* %7, align 4
  br label %71

38:                                               ; preds = %28
  %39 = load i32, i32* @optarg, align 4
  %40 = call i64 @strtoll(i32 %39, i32* null, i32 16)
  store i64 %40, i64* %9, align 8
  br label %71

41:                                               ; preds = %28
  %42 = load i32, i32* @optarg, align 4
  %43 = call i8* @atoi(i32 %42)
  store i8* %43, i8** @alignment, align 8
  br label %71

44:                                               ; preds = %28
  %45 = load i32, i32* @optarg, align 4
  %46 = call i8* @atoi(i32 %45)
  %47 = ptrtoint i8* %46 to i32
  store i32 %47, i32* %8, align 4
  br label %71

48:                                               ; preds = %28
  %49 = load i32, i32* @optarg, align 4
  %50 = call i8* @atoi(i32 %49)
  store i8* %50, i8** @timeout, align 8
  br label %71

51:                                               ; preds = %28
  %52 = load i32, i32* @optarg, align 4
  %53 = call i8* @atoi(i32 %52)
  store i8* %53, i8** @steps, align 8
  br label %71

54:                                               ; preds = %28
  %55 = load i32, i32* @optarg, align 4
  %56 = call i8* @atoi(i32 %55)
  store i8* %56, i8** @nutcase, align 8
  br label %71

57:                                               ; preds = %28
  %58 = load i32, i32* @OPT_VERBOSE, align 4
  %59 = load i32, i32* @opt_flags, align 4
  %60 = or i32 %59, %58
  store i32 %60, i32* @opt_flags, align 4
  br label %71

61:                                               ; preds = %28
  %62 = load i32, i32* @OPT_CHECK, align 4
  %63 = load i32, i32* @opt_flags, align 4
  %64 = or i32 %63, %62
  store i32 %64, i32* @opt_flags, align 4
  br label %71

65:                                               ; preds = %28
  br label %66

66:                                               ; preds = %28, %65
  %67 = load i8**, i8*** %5, align 8
  %68 = getelementptr inbounds i8*, i8** %67, i64 0
  %69 = load i8*, i8** %68, align 8
  %70 = call i32 @ussage(i8* %69)
  store i32 %70, i32* %3, align 4
  br label %111

71:                                               ; preds = %61, %57, %54, %51, %48, %44, %41, %38, %34, %30
  br label %23

72:                                               ; preds = %23
  %73 = load i32, i32* %8, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %72
  %76 = call i32 (...) @print_targets()
  %77 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %77, i32* %3, align 4
  br label %111

78:                                               ; preds = %72
  %79 = load i32, i32* %8, align 4
  %80 = icmp eq i32 %79, -1
  br i1 %80, label %81, label %82

81:                                               ; preds = %78
  store i32 1, i32* %8, align 4
  br label %82

82:                                               ; preds = %81, %78
  br label %83

83:                                               ; preds = %82
  %84 = load i64, i64* %9, align 8
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %94

86:                                               ; preds = %83
  %87 = load i64, i64* %9, align 8
  %88 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %89 = load i32, i32* %8, align 4
  %90 = sub nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %88, i64 %91
  %93 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %92, i32 0, i32 0
  store i64 %87, i64* %93, align 8
  br label %94

94:                                               ; preds = %86, %83
  %95 = load i8**, i8*** %5, align 8
  %96 = load i32, i32* %4, align 4
  %97 = sub nsw i32 %96, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8*, i8** %95, i64 %98
  %100 = load i8*, i8** %99, align 8
  %101 = load i32, i32* %7, align 4
  %102 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %103 = load i32, i32* %8, align 4
  %104 = sub nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %102, i64 %105
  %107 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = call i32 @exploit(i8* %100, i32 %101, i64 %108)
  %110 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %110, i32* %3, align 4
  br label %111

111:                                              ; preds = %94, %75, %66, %16
  %112 = load i32, i32* %3, align 4
  ret i32 %112
}

declare dso_local i32 @banner(i8*) #1

declare dso_local i32 @ussage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i64 @strtoll(i32, i32*, i32) #1

declare dso_local i32 @print_targets(...) #1

declare dso_local i32 @exploit(i8*, i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
