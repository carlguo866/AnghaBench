; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_171.c_proof.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_171.c_proof.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addrinfo = type { %struct.addrinfo*, i32 }

@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"isakmp\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @proof to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @proof(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.addrinfo*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.addrinfo, align 8
  %7 = alloca %struct.addrinfo*, align 8
  store i8* %0, i8** %3, align 8
  %8 = call i32 @memset(%struct.addrinfo* %6, i32 0, i32 16)
  %9 = load i32, i32* @SOCK_DGRAM, align 4
  %10 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 1
  store i32 %9, i32* %10, align 8
  %11 = load i8*, i8** %3, align 8
  %12 = call i32 @getaddrinfo(i8* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), %struct.addrinfo* %6, %struct.addrinfo** %4)
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %33

15:                                               ; preds = %1
  %16 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  store %struct.addrinfo* %16, %struct.addrinfo** %7, align 8
  br label %17

17:                                               ; preds = %25, %15
  %18 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %19 = icmp ne %struct.addrinfo* %18, null
  br i1 %19, label %20, label %29

20:                                               ; preds = %17
  %21 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %22 = call i32 @send_evil_packet(%struct.addrinfo* %21)
  %23 = load i32, i32* %5, align 4
  %24 = or i32 %23, %22
  store i32 %24, i32* %5, align 4
  br label %25

25:                                               ; preds = %20
  %26 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %27 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %26, i32 0, i32 0
  %28 = load %struct.addrinfo*, %struct.addrinfo** %27, align 8
  store %struct.addrinfo* %28, %struct.addrinfo** %7, align 8
  br label %17

29:                                               ; preds = %17
  %30 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  %31 = call i32 @freeaddrinfo(%struct.addrinfo* %30)
  %32 = load i32, i32* %5, align 4
  store i32 %32, i32* %2, align 4
  br label %39

33:                                               ; preds = %1
  %34 = load i32, i32* @stderr, align 4
  %35 = load i8*, i8** %3, align 8
  %36 = load i32, i32* %5, align 4
  %37 = call i8* @gai_strerror(i32 %36)
  %38 = call i32 @fprintf(i32 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %35, i8* %37)
  store i32 -1, i32* %2, align 4
  br label %39

39:                                               ; preds = %33, %29
  %40 = load i32, i32* %2, align 4
  ret i32 %40
}

declare dso_local i32 @memset(%struct.addrinfo*, i32, i32) #1

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @send_evil_packet(%struct.addrinfo*) #1

declare dso_local i32 @freeaddrinfo(%struct.addrinfo*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, i8*) #1

declare dso_local i8* @gai_strerror(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
