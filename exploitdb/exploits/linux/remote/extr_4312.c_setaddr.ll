; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_setaddr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4312.c_setaddr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.in_addr, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }

@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"unkown host\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @setaddr(i8* %0, %struct.sockaddr_in* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.sockaddr_in*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %4, align 8
  store %struct.sockaddr_in* %1, %struct.sockaddr_in** %5, align 8
  store i32 %2, i32* %6, align 4
  %8 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %9 = call i32 @memset(%struct.sockaddr_in* %8, i32 0, i32 12)
  %10 = load i32, i32* @AF_INET, align 4
  %11 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  %13 = load i8*, i8** %4, align 8
  %14 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %16 = call i32 @inet_aton(i8* %13, %struct.in_addr* %15)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %34, label %18

18:                                               ; preds = %3
  %19 = load i8*, i8** %4, align 8
  %20 = call %struct.hostent* @gethostbyname(i8* %19)
  store %struct.hostent* %20, %struct.hostent** %7, align 8
  %21 = load %struct.hostent*, %struct.hostent** %7, align 8
  %22 = icmp eq %struct.hostent* %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = call i32 @step(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 -1)
  br label %45

25:                                               ; preds = %18
  %26 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %26, i32 0, i32 1
  %28 = load %struct.hostent*, %struct.hostent** %7, align 8
  %29 = getelementptr inbounds %struct.hostent, %struct.hostent* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = inttoptr i64 %30 to %struct.in_addr*
  %32 = bitcast %struct.in_addr* %27 to i8*
  %33 = bitcast %struct.in_addr* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %33, i64 4, i1 false)
  br label %40

34:                                               ; preds = %3
  %35 = load i8*, i8** %4, align 8
  %36 = call i32 @inet_addr(i8* %35)
  %37 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %37, i32 0, i32 1
  %39 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %38, i32 0, i32 0
  store i32 %36, i32* %39, align 4
  br label %40

40:                                               ; preds = %34, %25
  %41 = load i32, i32* %6, align 4
  %42 = call i32 @htons(i32 %41)
  %43 = load %struct.sockaddr_in*, %struct.sockaddr_in** %5, align 8
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %43, i32 0, i32 0
  store i32 %42, i32* %44, align 4
  br label %45

45:                                               ; preds = %40, %23
  ret void
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_aton(i8*, %struct.in_addr*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @step(i8*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
