; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4478.c_fmt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/remote/extr_4478.c_fmt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXPATH = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [77 x i8] c"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n%%%dx%%%d$n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fmt(i32* %0, i32* %1, i32 %2, i8* %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [4 x i8], align 1
  %10 = alloca [4 x i8], align 1
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  %18 = load i64, i64* @MAXPATH, align 8
  %19 = load i8*, i8** %8, align 8
  %20 = mul nsw i64 0, %18
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  store i8* %21, i8** %11, align 8
  store i32 1052, i32* %13, align 4
  store i32 256, i32* %14, align 4
  store i32 4, i32* %15, align 4
  %22 = load i32*, i32** %5, align 8
  %23 = getelementptr inbounds i32, i32* %22, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = inttoptr i64 %25 to i32*
  store i32* %26, i32** %16, align 8
  %27 = load i32*, i32** %6, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = inttoptr i64 %30 to i32*
  store i32* %31, i32** %17, align 8
  store i32 0, i32* %12, align 4
  br label %32

32:                                               ; preds = %207, %4
  %33 = load i32, i32* %12, align 4
  %34 = icmp ule i32 %33, 4
  br i1 %34, label %35, label %210

35:                                               ; preds = %32
  %36 = load i32*, i32** %16, align 8
  %37 = ptrtoint i32* %36 to i32
  %38 = ashr i32 %37, 24
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  store i8 %39, i8* %40, align 1
  %41 = load i32*, i32** %16, align 8
  %42 = ptrtoint i32* %41 to i32
  %43 = and i32 %42, 16711680
  %44 = ashr i32 %43, 16
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 1
  store i8 %45, i8* %46, align 1
  %47 = load i32*, i32** %16, align 8
  %48 = ptrtoint i32* %47 to i32
  %49 = and i32 %48, 65280
  %50 = ashr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i32*, i32** %16, align 8
  %54 = ptrtoint i32* %53 to i32
  %55 = and i32 %54, 255
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  store i8 %56, i8* %57, align 1
  %58 = load i32*, i32** %17, align 8
  %59 = ptrtoint i32* %58 to i32
  %60 = ashr i32 %59, 24
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  store i8 %61, i8* %62, align 1
  %63 = load i32*, i32** %17, align 8
  %64 = ptrtoint i32* %63 to i32
  %65 = and i32 %64, 16711680
  %66 = ashr i32 %65, 16
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 1
  store i8 %67, i8* %68, align 1
  %69 = load i32*, i32** %17, align 8
  %70 = ptrtoint i32* %69 to i32
  %71 = and i32 %70, 65280
  %72 = ashr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 2
  store i8 %73, i8* %74, align 1
  %75 = load i32*, i32** %17, align 8
  %76 = ptrtoint i32* %75 to i32
  %77 = and i32 %76, 255
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 3
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %11, align 8
  %81 = load i64, i64* @MAXPATH, align 8
  %82 = sub nsw i64 %81, 1
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 1
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add nsw i32 %93, 1
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %101 = load i8, i8* %100, align 1
  %102 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nsw i32 %104, 2
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 2
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 1
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nsw i32 %115, 3
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 2
  %119 = load i8, i8* %118, align 1
  %120 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 3
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = sub nsw i32 %126, 12
  %128 = load i32, i32* %14, align 4
  %129 = add i32 %127, %128
  %130 = load i32, i32* %15, align 4
  %131 = add i32 %130, 4
  %132 = load i32, i32* %15, align 4
  %133 = urem i32 %132, 4
  %134 = sub i32 %131, %133
  %135 = sub i32 %129, %134
  %136 = trunc i32 %135 to i8
  %137 = load i32, i32* %13, align 4
  %138 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 2
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 3
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = sub nsw i32 %140, %143
  %145 = load i32, i32* %14, align 4
  %146 = add i32 %144, %145
  %147 = trunc i32 %146 to i8
  %148 = load i32, i32* %13, align 4
  %149 = add i32 %148, 1
  %150 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 2
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = sub nsw i32 %152, %155
  %157 = load i32, i32* %14, align 4
  %158 = add i32 %156, %157
  %159 = trunc i32 %158 to i8
  %160 = load i32, i32* %13, align 4
  %161 = add i32 %160, 2
  %162 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 1
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %164, %167
  %169 = load i32, i32* %14, align 4
  %170 = add i32 %168, %169
  %171 = trunc i32 %170 to i8
  %172 = load i32, i32* %13, align 4
  %173 = add i32 %172, 3
  %174 = call i32 @snprintf(i8* %80, i64 %82, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str, i64 0, i64 0), i8 zeroext %84, i8 zeroext %86, i8 zeroext %88, i8 zeroext %90, i8 zeroext %95, i8 zeroext %97, i8 zeroext %99, i8 zeroext %101, i8 zeroext %106, i8 zeroext %108, i8 zeroext %110, i8 zeroext %112, i8 zeroext %117, i8 zeroext %119, i8 zeroext %121, i8 zeroext %123, i8 zeroext %136, i32 %137, i8 zeroext %147, i32 %149, i8 zeroext %159, i32 %161, i8 zeroext %171, i32 %173)
  %175 = load i8*, i8** %8, align 8
  %176 = load i32, i32* %12, align 4
  %177 = zext i32 %176 to i64
  %178 = mul nsw i64 %177, %18
  %179 = getelementptr inbounds i8, i8* %175, i64 %178
  store i8* %179, i8** %11, align 8
  %180 = load i32, i32* %12, align 4
  %181 = icmp ult i32 %180, 3
  br i1 %181, label %182, label %197

182:                                              ; preds = %35
  %183 = load i32*, i32** %5, align 8
  %184 = load i32, i32* %12, align 4
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %183, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = sext i32 %187 to i64
  %189 = inttoptr i64 %188 to i32*
  store i32* %189, i32** %16, align 8
  %190 = load i32*, i32** %6, align 8
  %191 = load i32, i32* %12, align 4
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %190, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %194 to i64
  %196 = inttoptr i64 %195 to i32*
  store i32* %196, i32** %17, align 8
  br label %206

197:                                              ; preds = %35
  %198 = load i32, i32* %7, align 4
  %199 = sext i32 %198 to i64
  %200 = inttoptr i64 %199 to i32*
  store i32* %200, i32** %16, align 8
  %201 = load i32*, i32** %5, align 8
  %202 = getelementptr inbounds i32, i32* %201, i64 0
  %203 = load i32, i32* %202, align 4
  %204 = sext i32 %203 to i64
  %205 = inttoptr i64 %204 to i32*
  store i32* %205, i32** %17, align 8
  br label %206

206:                                              ; preds = %197, %182
  br label %207

207:                                              ; preds = %206
  %208 = load i32, i32* %12, align 4
  %209 = add i32 %208, 1
  store i32 %209, i32* %12, align 4
  br label %32

210:                                              ; preds = %32
  ret void
}

declare dso_local i32 @snprintf(i8*, i64, i8*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32, i8 zeroext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
