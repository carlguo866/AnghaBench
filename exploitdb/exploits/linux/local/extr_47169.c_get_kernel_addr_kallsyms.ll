; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_get_kernel_addr_kallsyms.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_get_kernel_addr_kallsyms.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"startup_64\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"/proc/kallsyms\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"[.] trying %s...\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"[-] open/read(%s)\0A\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [10 x i8] c"%p %c %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"[-] kernel base not found in %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_addr_kallsyms() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca [256 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i64 0, i64* %3, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %7, align 8
  %9 = load i8*, i8** %7, align 8
  %10 = call i32 @dprintf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* %9)
  %11 = load i8*, i8** %7, align 8
  %12 = call i32* @fopen(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %12, i32** %2, align 8
  %13 = load i32*, i32** %2, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %0
  %16 = load i8*, i8** %7, align 8
  %17 = call i32 @dprintf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i8* %16)
  store i64 0, i64* %1, align 8
  br label %49

18:                                               ; preds = %0
  store i32 0, i32* %8, align 4
  br label %19

19:                                               ; preds = %43, %30, %18
  %20 = load i32, i32* %8, align 4
  %21 = load i32, i32* @EOF, align 4
  %22 = icmp ne i32 %20, %21
  br i1 %22, label %23, label %44

23:                                               ; preds = %19
  %24 = load i32*, i32** %2, align 8
  %25 = bitcast i64* %3 to i8**
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %27 = call i32 (i32*, i8*, ...) @fscanf(i32* %24, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8** %25, i8* %4, i8* %26)
  store i32 %27, i32* %8, align 4
  %28 = load i32, i32* %8, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %23
  %31 = load i32*, i32** %2, align 8
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %33 = call i32 (i32*, i8*, ...) @fscanf(i32* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i8* %32)
  br label %19

34:                                               ; preds = %23
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %37 = call i32 @strcmp(i8* %35, i8* %36)
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %34
  %40 = load i32*, i32** %2, align 8
  %41 = call i32 @fclose(i32* %40)
  %42 = load i64, i64* %3, align 8
  store i64 %42, i64* %1, align 8
  br label %49

43:                                               ; preds = %34
  br label %19

44:                                               ; preds = %19
  %45 = load i32*, i32** %2, align 8
  %46 = call i32 @fclose(i32* %45)
  %47 = load i8*, i8** %7, align 8
  %48 = call i32 @dprintf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i8* %47)
  store i64 0, i64* %1, align 8
  br label %49

49:                                               ; preds = %44, %39, %15
  %50 = load i64, i64* %1, align 8
  ret i64 %50
}

declare dso_local i32 @dprintf(i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, ...) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
