; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_save_mmap.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_save_mmap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mmap_entry = type { i32, i32, i32 }

@PAGE_SIZE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.mmap_entry*, i8*)* @save_mmap to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @save_mmap(%struct.mmap_entry* %0, i8* %1) #0 {
  %3 = alloca %struct.mmap_entry*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca [128 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store %struct.mmap_entry* %0, %struct.mmap_entry** %3, align 8
  store i8* %1, i8** %4, align 8
  %13 = load i8*, i8** %4, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* @PAGE_SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %8, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %9, align 8
  %20 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %21 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = load i32, i32* @PAGE_SIZE, align 4
  %24 = srem i32 %22, %23
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = call i32 @assert(i32 %26)
  %28 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %29 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %28, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* @PAGE_SIZE, align 4
  %32 = srem i32 %30, %31
  %33 = icmp eq i32 %32, 0
  %34 = zext i1 %33 to i32
  %35 = call i32 @assert(i32 %34)
  %36 = bitcast i8* %19 to i8**
  %37 = trunc i64 %17 to i32
  %38 = call i32 @memset(i8** %36, i32 0, i32 %37)
  %39 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %40 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %43 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = sub nsw i32 %41, %44
  %46 = sext i32 %45 to i64
  store i64 %46, i64* %6, align 8
  %47 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %48 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %52 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = sext i32 %53 to i64
  %55 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %56 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %55, i32 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = call i32 @print_mmap(i64 %50, i64 %54, i32 %57)
  %59 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %60 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  %63 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %64 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sext i32 %65 to i64
  %67 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %68 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %67, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %71 = call i32 @name_mmap(i64 %62, i64 %66, i32 %69, i8* %70, i32 128)
  %72 = load i32, i32* %5, align 4
  %73 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %74 = call i32 @create_file_in_dir(i32 %72, i8* %73)
  store i32 %74, i32* %10, align 4
  store i64 0, i64* %11, align 8
  br label %75

75:                                               ; preds = %117, %2
  %76 = load i64, i64* %11, align 8
  %77 = load i64, i64* %6, align 8
  %78 = icmp ult i64 %76, %77
  br i1 %78, label %79, label %122

79:                                               ; preds = %75
  %80 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %81 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %80, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = load i64, i64* %11, align 8
  %85 = add i64 %83, %84
  %86 = call i64 @page_check_virt(i64 %85)
  %87 = icmp ne i64 %86, 0
  br i1 %87, label %88, label %106

88:                                               ; preds = %79
  %89 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %90 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %89, i32 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = load i64, i64* %11, align 8
  %94 = add i64 %92, %93
  %95 = call i64 @page_virt_to_phys(i64 %94)
  store i64 %95, i64* %12, align 8
  %96 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %97 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %96, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = load i64, i64* %11, align 8
  %101 = add i64 %99, %100
  %102 = load i64, i64* %12, align 8
  %103 = load i32, i32* @PAGE_SIZE, align 4
  %104 = load i32, i32* %10, align 4
  %105 = call i32 @read_phys_memory(i64 %101, i64 %102, i32 %103, i32 %104)
  br label %117

106:                                              ; preds = %79
  %107 = load i32, i32* %10, align 4
  %108 = load %struct.mmap_entry*, %struct.mmap_entry** %3, align 8
  %109 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %108, i32 0, i32 0
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %110 to i64
  %112 = load i64, i64* %11, align 8
  %113 = add i64 %111, %112
  %114 = getelementptr inbounds i8, i8* %19, i64 0
  %115 = load i32, i32* @PAGE_SIZE, align 4
  %116 = call i32 @write_bytes(i32 %107, i64 %113, i8* %114, i32 %115)
  br label %117

117:                                              ; preds = %106, %88
  %118 = load i32, i32* @PAGE_SIZE, align 4
  %119 = sext i32 %118 to i64
  %120 = load i64, i64* %11, align 8
  %121 = add i64 %120, %119
  store i64 %121, i64* %11, align 8
  br label %75

122:                                              ; preds = %75
  %123 = load i32, i32* %10, align 4
  %124 = call i32 @close(i32 %123)
  %125 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %125)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @assert(i32) #2

declare dso_local i32 @memset(i8**, i32, i32) #2

declare dso_local i32 @print_mmap(i64, i64, i32) #2

declare dso_local i32 @name_mmap(i64, i64, i32, i8*, i32) #2

declare dso_local i32 @create_file_in_dir(i32, i8*) #2

declare dso_local i64 @page_check_virt(i64) #2

declare dso_local i64 @page_virt_to_phys(i64) #2

declare dso_local i32 @read_phys_memory(i64, i64, i32, i32) #2

declare dso_local i32 @write_bytes(i32, i64, i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
