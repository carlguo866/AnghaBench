; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_7177.c_locate_dv_func.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_7177.c_locate_dv_func.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@oracle = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"bfd_openr\00", align 1
@bfd_object = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"wtf?!\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"no symbols info\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"kzvtins\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[%d] symbol \22kzvtins\22 at 0x%lx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @locate_dv_func() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32**, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = load i32, i32* @oracle, align 4
  %10 = call i32* @bfd_openr(i32 %9, i32* null)
  store i32* %10, i32** %3, align 8
  %11 = load i32*, i32** %3, align 8
  %12 = icmp eq i32* %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %0
  %14 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @exit(i32 -1) #3
  unreachable

16:                                               ; preds = %0
  %17 = load i32*, i32** %3, align 8
  %18 = load i32, i32* @bfd_object, align 4
  %19 = call i32 @bfd_check_format(i32* %17, i32 %18)
  %20 = load i32*, i32** %3, align 8
  %21 = call i64 @bfd_get_symtab_upper_bound(i32* %20)
  store i64 %21, i64* %4, align 8
  %22 = load i64, i64* %4, align 8
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %16
  %25 = load i32, i32* @stderr, align 4
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 @exit(i32 -1) #3
  unreachable

28:                                               ; preds = %16
  %29 = load i64, i64* %4, align 8
  %30 = call i64 @malloc(i64 %29)
  %31 = inttoptr i64 %30 to i32**
  store i32** %31, i32*** %2, align 8
  %32 = icmp eq i32** %31, null
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %35 = call i32 @exit(i32 -1) #3
  unreachable

36:                                               ; preds = %28
  %37 = load i32*, i32** %3, align 8
  %38 = load i32**, i32*** %2, align 8
  %39 = call i32 @bfd_canonicalize_symtab(i32* %37, i32** %38)
  store i32 %39, i32* %5, align 4
  %40 = icmp sle i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = load i32, i32* @stderr, align 4
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %44 = call i32 @exit(i32 -1) #3
  unreachable

45:                                               ; preds = %36
  store i32 0, i32* %6, align 4
  br label %46

46:                                               ; preds = %75, %45
  %47 = load i32, i32* %6, align 4
  %48 = load i32, i32* %5, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %78

50:                                               ; preds = %46
  %51 = load i32**, i32*** %2, align 8
  %52 = load i32, i32* %6, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32*, i32** %51, i64 %53
  %55 = load i32*, i32** %54, align 8
  %56 = call i8* @bfd_asymbol_name(i32* %55)
  store i8* %56, i8** %7, align 8
  %57 = load i32**, i32*** %2, align 8
  %58 = load i32, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32*, i32** %57, i64 %59
  %61 = load i32*, i32** %60, align 8
  %62 = call i8* @bfd_asymbol_value(i32* %61)
  store i8* %62, i8** %8, align 8
  %63 = load i8*, i8** %7, align 8
  %64 = call i32 @strcmp(i8* %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %50
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 (...) @getpid()
  %69 = load i8*, i8** %8, align 8
  %70 = ptrtoint i8* %69 to i64
  %71 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 %68, i64 %70)
  %72 = load i8*, i8** %8, align 8
  %73 = ptrtoint i8* %72 to i64
  store i64 %73, i64* %1, align 8
  br label %79

74:                                               ; preds = %50
  br label %75

75:                                               ; preds = %74
  %76 = load i32, i32* %6, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %6, align 4
  br label %46

78:                                               ; preds = %46
  store i64 0, i64* %1, align 8
  br label %79

79:                                               ; preds = %78, %66
  %80 = load i64, i64* %1, align 8
  ret i64 %80
}

declare dso_local i32* @bfd_openr(i32, i32*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bfd_check_format(i32*, i32) #1

declare dso_local i64 @bfd_get_symtab_upper_bound(i32*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @bfd_canonicalize_symtab(i32*, i32**) #1

declare dso_local i8* @bfd_asymbol_name(i32*) #1

declare dso_local i8* @bfd_asymbol_value(i32*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @getpid(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
