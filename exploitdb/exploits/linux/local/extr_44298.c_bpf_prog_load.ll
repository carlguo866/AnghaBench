; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44298.c_bpf_prog_load.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44298.c_bpf_prog_load.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.bpf_attr = type { i32 }
%struct.bpf_insn = type { i32 }

@__const.bpf_prog_load.attr = private unnamed_addr constant %union.bpf_attr { i32 1 }, align 4
@bpf_log_buf = common dso_local global i64* null, align 8
@__NR_bpf = common dso_local global i32 0, align 4
@BPF_PROG_LOAD = common dso_local global i32 0, align 4
@LOG_BUF_SIZE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, %struct.bpf_insn*, i32, i8*, i32)* @bpf_prog_load to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bpf_prog_load(i32 %0, %struct.bpf_insn* %1, i32 %2, i8* %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.bpf_insn*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %union.bpf_attr, align 4
  store i32 %0, i32* %6, align 4
  store %struct.bpf_insn* %1, %struct.bpf_insn** %7, align 8
  store i32 %2, i32* %8, align 4
  store i8* %3, i8** %9, align 8
  store i32 %4, i32* %10, align 4
  %12 = bitcast %union.bpf_attr* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 bitcast (%union.bpf_attr* @__const.bpf_prog_load.attr to i8*), i64 4, i1 false)
  %13 = load i32, i32* %10, align 4
  %14 = bitcast %union.bpf_attr* %11 to i32*
  store i32 %13, i32* %14, align 4
  %15 = load i64*, i64** @bpf_log_buf, align 8
  %16 = getelementptr inbounds i64, i64* %15, i64 0
  store i64 0, i64* %16, align 8
  %17 = load i32, i32* @__NR_bpf, align 4
  %18 = load i32, i32* @BPF_PROG_LOAD, align 4
  %19 = call i32 @syscall(i32 %17, i32 %18, %union.bpf_attr* %11, i32 4)
  ret i32 %19
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @syscall(i32, i32, %union.bpf_attr*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
