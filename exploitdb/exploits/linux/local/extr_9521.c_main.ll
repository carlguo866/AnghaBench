; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9521.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9521.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_at = type { i32, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_APPLETALK = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@ATADDR_ANYNET = common dso_local global i32 0, align 4
@ATADDR_ANYNODE = common dso_local global i32 0, align 4
@ATADDR_ANYPORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_at, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [4 x i8], align 1
  store i32 0, i32* %1, align 4
  store i32 20, i32* %4, align 4
  store i32 500, i32* %5, align 4
  %7 = bitcast [4 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 4, i1 false)
  %8 = load i32, i32* @AF_APPLETALK, align 4
  %9 = load i32, i32* @SOCK_DGRAM, align 4
  %10 = call i32 @socket(i32 %8, i32 %9, i32 0)
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %3, align 4
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %0
  %14 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %15, i32* %1, align 4
  br label %73

16:                                               ; preds = %0
  %17 = call i32 @memset(%struct.sockaddr_at* %2, i32 0, i32 20)
  %18 = load i32, i32* @AF_APPLETALK, align 4
  %19 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 3
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* @ATADDR_ANYNET, align 4
  %21 = call i32 @htons(i32 %20)
  %22 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 2
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 1
  store i32 %21, i32* %23, align 4
  %24 = load i32, i32* @ATADDR_ANYNODE, align 4
  %25 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 2
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 4
  %27 = load i32, i32* @ATADDR_ANYPORT, align 4
  %28 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 1
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %3, align 4
  %30 = bitcast %struct.sockaddr_at* %2 to %struct.sockaddr*
  %31 = load i32, i32* %4, align 4
  %32 = call i64 @bind(i32 %29, %struct.sockaddr* %30, i32 %31)
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %16
  %35 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %36 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %36, i32* %1, align 4
  br label %73

37:                                               ; preds = %16
  %38 = call i32 @time(i32* null)
  %39 = call i32 (...) @getpid()
  %40 = xor i32 %38, %39
  %41 = call i32 @srand(i32 %40)
  br label %42

42:                                               ; preds = %68, %37
  %43 = load i32, i32* %5, align 4
  %44 = add nsw i32 %43, -1
  store i32 %44, i32* %5, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %69

46:                                               ; preds = %42
  %47 = load i32, i32* %3, align 4
  %48 = call i32 @kernop(i32 %47)
  %49 = load i32, i32* %3, align 4
  %50 = bitcast %struct.sockaddr_at* %2 to %struct.sockaddr*
  %51 = call i64 @getsockname(i32 %49, %struct.sockaddr* %50, i32* %4)
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %68

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %57 = call i64 @memcmp(i32 %55, i8* %56, i32 4)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %67

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 0
  %61 = bitcast i32* %60 to i8*
  %62 = call i32 @dump(i8* %61, i32 4)
  %63 = bitcast [4 x i8]* %6 to i8**
  %64 = getelementptr inbounds %struct.sockaddr_at, %struct.sockaddr_at* %2, i32 0, i32 0
  %65 = call i32 @memcpy(i8** %63, i32* %64, i32 4)
  %66 = call i32 @usleep(i32 5000)
  br label %67

67:                                               ; preds = %59, %53
  br label %68

68:                                               ; preds = %67, %46
  br label %42

69:                                               ; preds = %42
  %70 = load i32, i32* %3, align 4
  %71 = call i32 @close(i32 %70)
  %72 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %72, i32* %1, align 4
  br label %73

73:                                               ; preds = %69, %34, %13
  %74 = load i32, i32* %1, align 4
  ret i32 %74
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @memset(%struct.sockaddr_at*, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @srand(i32) #2

declare dso_local i32 @time(i32*) #2

declare dso_local i32 @getpid(...) #2

declare dso_local i32 @kernop(i32) #2

declare dso_local i64 @getsockname(i32, %struct.sockaddr*, i32*) #2

declare dso_local i64 @memcmp(i32, i8*, i32) #2

declare dso_local i32 @dump(i8*, i32) #2

declare dso_local i32 @memcpy(i8**, i32*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
