; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_virt_memory.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_virt_memory.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PAGE_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [50 x i8] c"read_virt_memory: addr = %016lx, length = %016lx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @read_virt_memory(i64 %0, i64 %1, i32 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %13 = load i32, i32* @PAGE_SIZE, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  %17 = load i32, i32* @PAGE_SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %9, align 8
  %20 = load i64, i64* %4, align 8
  %21 = load i64, i64* %5, align 8
  %22 = call i32 @debug1(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i64 %20, i64 %21)
  %23 = getelementptr inbounds i8, i8* %19, i64 0
  %24 = trunc i64 %18 to i32
  %25 = call i32 @memset(i8* %23, i32 0, i32 %24)
  store i64 0, i64* %10, align 8
  br label %26

26:                                               ; preds = %82, %3
  %27 = load i64, i64* %10, align 8
  %28 = load i64, i64* %5, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %86

30:                                               ; preds = %26
  %31 = load i64, i64* %4, align 8
  %32 = load i64, i64* %10, align 8
  %33 = add i64 %31, %32
  store i64 %33, i64* %11, align 8
  %34 = load i32, i32* @PAGE_SIZE, align 4
  %35 = sext i32 %34 to i64
  store i64 %35, i64* %12, align 8
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* @PAGE_SIZE, align 4
  %38 = sext i32 %37 to i64
  %39 = urem i64 %36, %38
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %49

41:                                               ; preds = %30
  %42 = load i32, i32* @PAGE_SIZE, align 4
  %43 = sext i32 %42 to i64
  %44 = load i64, i64* %11, align 8
  %45 = load i32, i32* @PAGE_SIZE, align 4
  %46 = sext i32 %45 to i64
  %47 = urem i64 %44, %46
  %48 = sub i64 %43, %47
  store i64 %48, i64* %12, align 8
  br label %49

49:                                               ; preds = %41, %30
  %50 = load i64, i64* %12, align 8
  %51 = load i64, i64* %5, align 8
  %52 = load i64, i64* %10, align 8
  %53 = sub i64 %51, %52
  %54 = call i64 @min(i64 %50, i64 %53)
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %4, align 8
  %56 = load i64, i64* %10, align 8
  %57 = add i64 %55, %56
  %58 = call i64 @page_check_virt(i64 %57)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %74

60:                                               ; preds = %49
  %61 = load i64, i64* %4, align 8
  %62 = load i64, i64* %10, align 8
  %63 = add i64 %61, %62
  %64 = load i64, i64* %12, align 8
  %65 = getelementptr inbounds i8, i8* %16, i64 0
  %66 = call i32 @read_range(i64 %63, i64 %64, i8* %65)
  %67 = load i32, i32* %6, align 4
  %68 = load i64, i64* %4, align 8
  %69 = load i64, i64* %10, align 8
  %70 = add i64 %68, %69
  %71 = getelementptr inbounds i8, i8* %16, i64 0
  %72 = load i64, i64* %12, align 8
  %73 = call i32 @write_bytes(i32 %67, i64 %70, i8* %71, i64 %72)
  br label %82

74:                                               ; preds = %49
  %75 = load i32, i32* %6, align 4
  %76 = load i64, i64* %4, align 8
  %77 = load i64, i64* %10, align 8
  %78 = add i64 %76, %77
  %79 = getelementptr inbounds i8, i8* %19, i64 0
  %80 = load i64, i64* %12, align 8
  %81 = call i32 @write_bytes(i32 %75, i64 %78, i8* %79, i64 %80)
  br label %82

82:                                               ; preds = %74, %60
  %83 = load i64, i64* %12, align 8
  %84 = load i64, i64* %10, align 8
  %85 = add i64 %84, %83
  store i64 %85, i64* %10, align 8
  br label %26

86:                                               ; preds = %26
  %87 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %87)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @debug1(i8*, i64, i64) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i64 @min(i64, i64) #2

declare dso_local i64 @page_check_virt(i64) #2

declare dso_local i32 @read_range(i64, i64, i8*) #2

declare dso_local i32 @write_bytes(i32, i64, i8*, i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
