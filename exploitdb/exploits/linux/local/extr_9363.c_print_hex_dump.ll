; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9363.c_print_hex_dump.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9363.c_print_hex_dump.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_hex_dump(i32 %0, i32 %1, i8* %2, i64 %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [200 x i8], align 16
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i64 %3, i64* %9, align 8
  store i32 %4, i32* %10, align 4
  %16 = load i8*, i8** %8, align 8
  %17 = bitcast i8* %16 to i32*
  store i32* %17, i32** %11, align 8
  %18 = load i64, i64* %9, align 8
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %14, align 4
  %20 = load i32, i32* %6, align 4
  %21 = icmp ne i32 %20, 16
  br i1 %21, label %22, label %26

22:                                               ; preds = %5
  %23 = load i32, i32* %6, align 4
  %24 = icmp ne i32 %23, 32
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  store i32 16, i32* %6, align 4
  br label %26

26:                                               ; preds = %25, %22, %5
  store i32 0, i32* %12, align 4
  br label %27

27:                                               ; preds = %57, %26
  %28 = load i32, i32* %12, align 4
  %29 = sext i32 %28 to i64
  %30 = load i64, i64* %9, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %61

32:                                               ; preds = %27
  %33 = load i32, i32* %14, align 4
  %34 = load i32, i32* %6, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = load i32, i32* %14, align 4
  br label %40

38:                                               ; preds = %32
  %39 = load i32, i32* %6, align 4
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i32 [ %37, %36 ], [ %39, %38 ]
  store i32 %41, i32* %13, align 4
  %42 = load i32, i32* %6, align 4
  %43 = load i32, i32* %14, align 4
  %44 = sub nsw i32 %43, %42
  store i32 %44, i32* %14, align 4
  %45 = load i32*, i32** %11, align 8
  %46 = load i32, i32* %12, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %45, i64 %47
  %49 = load i32, i32* %13, align 4
  %50 = load i32, i32* %6, align 4
  %51 = load i32, i32* %7, align 4
  %52 = getelementptr inbounds [200 x i8], [200 x i8]* %15, i64 0, i64 0
  %53 = load i32, i32* %10, align 4
  %54 = call i32 @hex_dump_to_buffer(i32* %48, i32 %49, i32 %50, i32 %51, i8* %52, i32 200, i32 %53)
  %55 = getelementptr inbounds [200 x i8], [200 x i8]* %15, i64 0, i64 0
  %56 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %55)
  br label %57

57:                                               ; preds = %40
  %58 = load i32, i32* %6, align 4
  %59 = load i32, i32* %12, align 4
  %60 = add nsw i32 %59, %58
  store i32 %60, i32* %12, align 4
  br label %27

61:                                               ; preds = %27
  ret void
}

declare dso_local i32 @hex_dump_to_buffer(i32*, i32, i32, i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
