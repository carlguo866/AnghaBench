; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_12.c_get_ids.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_12.c_get_ids.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.uids = type { i32, i32, i32, i32 }

@TMPSIZE = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4
@UIDNUM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"Uid: %u %u %u %u\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_ids(i32* %0, %struct.uids* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca %struct.uids*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  store i32* %0, i32** %3, align 8
  store %struct.uids* %1, %struct.uids** %4, align 8
  %8 = load i32, i32* @TMPSIZE, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %6, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %7, align 8
  %12 = load i32*, i32** %3, align 8
  %13 = load i32, i32* @SEEK_SET, align 4
  %14 = call i32 @fseek(i32* %12, i32 0, i32 %13)
  store i32 0, i32* %5, align 4
  br label %15

15:                                               ; preds = %23, %2
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* @UIDNUM, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %26

19:                                               ; preds = %15
  %20 = trunc i64 %9 to i32
  %21 = load i32*, i32** %3, align 8
  %22 = call i32 @fgets(i8* %11, i32 %20, i32* %21)
  br label %23

23:                                               ; preds = %19
  %24 = load i32, i32* %5, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %5, align 4
  br label %15

26:                                               ; preds = %15
  %27 = load i32*, i32** %3, align 8
  %28 = load %struct.uids*, %struct.uids** %4, align 8
  %29 = getelementptr inbounds %struct.uids, %struct.uids* %28, i32 0, i32 3
  %30 = load %struct.uids*, %struct.uids** %4, align 8
  %31 = getelementptr inbounds %struct.uids, %struct.uids* %30, i32 0, i32 2
  %32 = load %struct.uids*, %struct.uids** %4, align 8
  %33 = getelementptr inbounds %struct.uids, %struct.uids* %32, i32 0, i32 1
  %34 = load %struct.uids*, %struct.uids** %4, align 8
  %35 = getelementptr inbounds %struct.uids, %struct.uids* %34, i32 0, i32 0
  %36 = call i32 @fscanf(i32* %27, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32* %29, i32* %31, i32* %33, i32* %35)
  %37 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %37)
  ret i32 %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fseek(i32*, i32, i32) #2

declare dso_local i32 @fgets(i8*, i32, i32*) #2

declare dso_local i32 @fscanf(i32*, i8*, i32*, i32*, i32*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
