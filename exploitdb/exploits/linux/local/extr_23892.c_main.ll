; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23892.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23892.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [57 x i8] c"usage: ./systrace_exp <target> <arg1> <arg2> ... <argn>\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Unable to create pipe\0A\00", align 1
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@ESRCH = common dso_local global i64 0, align 8
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"Unable to fork.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [2 x i32], align 4
  %8 = alloca [2 x i32], align 4
  %9 = alloca [2 x i32], align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i32, align 4
  %14 = alloca %struct.timeval, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = call i32 @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %2
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %22 = call i32 @pipe(i32* %21)
  store i32 %22, i32* %10, align 4
  %23 = load i32, i32* %10, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 @exit(i32 1) #3
  unreachable

28:                                               ; preds = %20
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %30 = call i32 @pipe(i32* %29)
  store i32 %30, i32* %10, align 4
  %31 = load i32, i32* %10, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %35 = call i32 @exit(i32 1) #3
  unreachable

36:                                               ; preds = %28
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %38 = call i32 @pipe(i32* %37)
  store i32 %38, i32* %10, align 4
  %39 = load i32, i32* %10, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #3
  unreachable

44:                                               ; preds = %36
  %45 = call i32 (...) @fork()
  store i32 %45, i32* %6, align 4
  %46 = load i32, i32* %6, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %144

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  store i64 0, i64* %49, align 8
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  store i32 1000, i32* %50, align 8
  %51 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @close(i32 %52)
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %55 = load i32, i32* %54, align 4
  %56 = call i32 @close(i32 %55)
  %57 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %58 = load i32, i32* %57, align 4
  %59 = call i32 @close(i32 %58)
  %60 = call i32 @FD_ZERO(i32* %11)
  %61 = call i32 @FD_SET(i32 0, i32* %11)
  %62 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %63 = load i32, i32* %62, align 4
  %64 = call i32 @FD_SET(i32 %63, i32* %11)
  %65 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %66 = load i32, i32* %65, align 4
  %67 = call i32 @FD_SET(i32 %66, i32* %11)
  br label %68

68:                                               ; preds = %48, %142
  %69 = call i32 @FD_SET(i32 0, i32* %11)
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %71 = load i32, i32* %70, align 4
  %72 = call i32 @FD_SET(i32 %71, i32* %11)
  %73 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %74 = load i32, i32* %73, align 4
  %75 = call i32 @FD_SET(i32 %74, i32* %11)
  %76 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  store i64 0, i64* %76, align 8
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  store i32 1000, i32* %77, align 8
  br label %78

78:                                               ; preds = %124, %68
  %79 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, 1
  %82 = call i64 @select(i32 %81, i32* %11, i32* null, i32* null, %struct.timeval* %14)
  %83 = icmp sgt i64 %82, 0
  br i1 %83, label %84, label %134

84:                                               ; preds = %78
  %85 = call i64 @FD_ISSET(i32 0, i32* %11)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %96

87:                                               ; preds = %84
  %88 = call i32 @read(i32 0, i8* %12, i32 1)
  %89 = icmp ne i32 %88, 1
  br i1 %89, label %90, label %92

90:                                               ; preds = %87
  %91 = call i32 @exit(i32 0) #3
  unreachable

92:                                               ; preds = %87
  %93 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = call i32 @write(i32 %94, i8* %12, i32 1)
  br label %96

96:                                               ; preds = %92, %84
  %97 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %98 = load i32, i32* %97, align 4
  %99 = call i64 @FD_ISSET(i32 %98, i32* %11)
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %110

101:                                              ; preds = %96
  %102 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %103 = load i32, i32* %102, align 4
  %104 = call i32 @read(i32 %103, i8* %12, i32 1)
  %105 = icmp ne i32 %104, 1
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = call i32 @exit(i32 0) #3
  unreachable

108:                                              ; preds = %101
  %109 = call i32 @write(i32 1, i8* %12, i32 1)
  br label %110

110:                                              ; preds = %108, %96
  %111 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %112 = load i32, i32* %111, align 4
  %113 = call i64 @FD_ISSET(i32 %112, i32* %11)
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %124

115:                                              ; preds = %110
  %116 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %117 = load i32, i32* %116, align 4
  %118 = call i32 @read(i32 %117, i8* %12, i32 1)
  %119 = icmp ne i32 %118, 1
  br i1 %119, label %120, label %122

120:                                              ; preds = %115
  %121 = call i32 @exit(i32 0) #3
  unreachable

122:                                              ; preds = %115
  %123 = call i32 @write(i32 2, i8* %12, i32 1)
  br label %124

124:                                              ; preds = %122, %110
  %125 = call i32 @FD_SET(i32 0, i32* %11)
  %126 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %127 = load i32, i32* %126, align 4
  %128 = call i32 @FD_SET(i32 %127, i32* %11)
  %129 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %130 = load i32, i32* %129, align 4
  %131 = call i32 @FD_SET(i32 %130, i32* %11)
  %132 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  store i64 0, i64* %132, align 8
  %133 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  store i32 1000, i32* %133, align 8
  br label %78

134:                                              ; preds = %78
  %135 = load i32, i32* @PTRACE_SYSCALL, align 4
  %136 = load i32, i32* %6, align 4
  %137 = call i32 @ptrace(i32 %135, i32 %136, i32* null, i32* null)
  %138 = load i64, i64* @errno, align 8
  %139 = load i64, i64* @ESRCH, align 8
  %140 = icmp eq i64 %138, %139
  br i1 %140, label %141, label %142

141:                                              ; preds = %134
  br label %143

142:                                              ; preds = %134
  br label %68

143:                                              ; preds = %141
  br label %191

144:                                              ; preds = %44
  %145 = load i32, i32* %6, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %186

147:                                              ; preds = %144
  %148 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %149 = load i32, i32* %148, align 4
  %150 = call i32 @close(i32 %149)
  %151 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %152 = load i32, i32* %151, align 4
  %153 = call i32 @close(i32 %152)
  %154 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %155 = load i32, i32* %154, align 4
  %156 = call i32 @close(i32 %155)
  %157 = call i32 @close(i32 0)
  %158 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %159 = load i32, i32* %158, align 4
  %160 = call i32 @dup(i32 %159)
  %161 = call i32 @close(i32 1)
  %162 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %163 = load i32, i32* %162, align 4
  %164 = call i32 @dup(i32 %163)
  %165 = call i32 @close(i32 2)
  %166 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %167 = load i32, i32* %166, align 4
  %168 = call i32 @dup(i32 %167)
  %169 = load i32, i32* @PTRACE_TRACEME, align 4
  %170 = call i32 @ptrace(i32 %169, i32 0, i32* null, i32* null)
  %171 = load i32, i32* %4, align 4
  %172 = icmp eq i32 %171, 2
  br i1 %172, label %173, label %178

173:                                              ; preds = %147
  %174 = load i8**, i8*** %5, align 8
  %175 = getelementptr inbounds i8*, i8** %174, i64 1
  %176 = load i8*, i8** %175, align 8
  %177 = call i32 @execv(i8* %176, i8** null)
  br label %185

178:                                              ; preds = %147
  %179 = load i8**, i8*** %5, align 8
  %180 = getelementptr inbounds i8*, i8** %179, i64 1
  %181 = load i8*, i8** %180, align 8
  %182 = load i8**, i8*** %5, align 8
  %183 = getelementptr inbounds i8*, i8** %182, i64 1
  %184 = call i32 @execv(i8* %181, i8** %183)
  br label %185

185:                                              ; preds = %178, %173
  br label %190

186:                                              ; preds = %144
  %187 = load i32, i32* @stderr, align 4
  %188 = call i32 @fprintf(i32 %187, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %189 = call i32 @exit(i32 1) #3
  unreachable

190:                                              ; preds = %185
  br label %191

191:                                              ; preds = %190, %143
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @pipe(i32*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @ptrace(i32, i32, i32*, i32*) #1

declare dso_local i32 @dup(i32) #1

declare dso_local i32 @execv(i8*, i8**) #1

declare dso_local i32 @fprintf(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
