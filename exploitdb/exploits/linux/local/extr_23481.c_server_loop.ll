; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23481.c_server_loop.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23481.c_server_loop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32 }
%struct.sockaddr_in = type { i32 }

@ctx = common dso_local global i32 0, align 4
@ssl = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [17 x i8] c"HTTP/1.0 200 OK\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Content-Length: 40\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Content-Type: text/html\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"<html><body>You're owned!</body></html>\00", align 1
@SSL_SENT_SHUTDOWN = common dso_local global i32 0, align 4
@SSL_RECEIVED_SHUTDOWN = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @server_loop to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @server_loop(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.timeval, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1024 x i8], align 16
  store i32 %0, i32* %2, align 4
  %9 = call i32 @FD_ZERO(i32* %4)
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %4)
  br label %12

12:                                               ; preds = %63, %17, %1
  store i32 4, i32* %6, align 4
  %13 = load i32, i32* %2, align 4
  %14 = add nsw i32 %13, 1
  %15 = call i32 @select(i32 %14, i32* %4, i32* null, i32* null, i32 0)
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  br label %12

18:                                               ; preds = %12
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @accept(i32 %19, %struct.sockaddr_in* %5, i32* %6)
  store i32 %20, i32* %7, align 4
  %21 = load i32, i32* %7, align 4
  %22 = icmp sge i32 %21, 0
  br i1 %22, label %23, label %63

23:                                               ; preds = %18
  %24 = load i32, i32* @ctx, align 4
  %25 = call i32* @SSL_new(i32 %24)
  store i32* %25, i32** @ssl, align 8
  %26 = icmp ne i32* %25, null
  br i1 %26, label %27, label %60

27:                                               ; preds = %23
  %28 = load i32*, i32** @ssl, align 8
  %29 = load i32, i32* %7, align 4
  %30 = call i32 @SSL_set_fd(i32* %28, i32 %29)
  %31 = load i32*, i32** @ssl, align 8
  %32 = call i32 @SSL_set_accept_state(i32* %31)
  %33 = load i32*, i32** @ssl, align 8
  %34 = call i32 @SSL_accept(i32* %33)
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %38

36:                                               ; preds = %27
  %37 = call i32 @exit(i32 1) #3
  unreachable

38:                                               ; preds = %27
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %40 = call i32 @strcpy(i8* %39, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %42 = call i32 @strcat(i8* %41, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %44 = call i32 @strcat(i8* %43, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %45 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %46 = call i32 @strcat(i8* %45, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0))
  %47 = load i32*, i32** @ssl, align 8
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %50 = call i32 @strlen(i8* %49)
  %51 = call i32 @SSL_write(i32* %47, i8* %48, i32 %50)
  %52 = load i32*, i32** @ssl, align 8
  %53 = load i32, i32* @SSL_SENT_SHUTDOWN, align 4
  %54 = load i32, i32* @SSL_RECEIVED_SHUTDOWN, align 4
  %55 = or i32 %53, %54
  %56 = call i32 @SSL_set_shutdown(i32* %52, i32 %55)
  %57 = load i32*, i32** @ssl, align 8
  %58 = call i32 @SSL_free(i32* %57)
  %59 = call i32 @ERR_remove_state(i32 0)
  br label %60

60:                                               ; preds = %38, %23
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @close(i32 %61)
  br label %63

63:                                               ; preds = %60, %18
  br label %12
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr_in*, i32*) #1

declare dso_local i32* @SSL_new(i32) #1

declare dso_local i32 @SSL_set_fd(i32*, i32) #1

declare dso_local i32 @SSL_set_accept_state(i32*) #1

declare dso_local i32 @SSL_accept(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @SSL_write(i32*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @SSL_set_shutdown(i32*, i32) #1

declare dso_local i32 @SSL_free(i32*) #1

declare dso_local i32 @ERR_remove_state(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
