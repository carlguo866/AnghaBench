; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_160.c_check_kver.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_160.c_check_kver.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i8* }

@check_kver.un = internal global %struct.utsname zeroinitializer, align 8
@.str = private unnamed_addr constant [9 x i8] c"%d.%d.%d\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"\0A[-] invalid kernel version string\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"\0A[+] kernel %s  vulnerable: %s  exploitable %s\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"YES\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@stdout = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @check_kver to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_kver() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %7 = call i32 @uname(%struct.utsname* @check_kver.un)
  %8 = load i8*, i8** getelementptr inbounds (%struct.utsname, %struct.utsname* @check_kver.un, i32 0, i32 0), align 8
  %9 = call i32 @sscanf(i8* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32* %1, i32* %2, i32* %3)
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp ne i32 %10, 3
  br i1 %11, label %15, label %12

12:                                               ; preds = %0
  %13 = load i32, i32* %1, align 4
  %14 = icmp ne i32 %13, 2
  br i1 %14, label %15, label %18

15:                                               ; preds = %12, %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 @_exit(i32 0) #3
  unreachable

18:                                               ; preds = %12
  %19 = load i32, i32* %2, align 4
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = load i32, i32* %3, align 4
  %23 = icmp sle i32 %22, 25
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  store i32 1, i32* %4, align 4
  br label %25

25:                                               ; preds = %24, %21
  br label %69

26:                                               ; preds = %18
  %27 = load i32, i32* %2, align 4
  %28 = icmp eq i32 %27, 3
  br i1 %28, label %29, label %34

29:                                               ; preds = %26
  %30 = load i32, i32* %3, align 4
  %31 = icmp sle i32 %30, 99
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  store i32 1, i32* %4, align 4
  br label %33

33:                                               ; preds = %32, %29
  br label %68

34:                                               ; preds = %26
  %35 = load i32, i32* %2, align 4
  %36 = icmp eq i32 %35, 4
  br i1 %36, label %37, label %51

37:                                               ; preds = %34
  %38 = load i32, i32* %3, align 4
  %39 = icmp sgt i32 %38, 18
  br i1 %39, label %40, label %44

40:                                               ; preds = %37
  %41 = load i32, i32* %3, align 4
  %42 = icmp sle i32 %41, 24
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  store i32 1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  br label %50

44:                                               ; preds = %40, %37
  %45 = load i32, i32* %3, align 4
  %46 = icmp sgt i32 %45, 24
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  br label %49

48:                                               ; preds = %44
  store i32 1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  br label %49

49:                                               ; preds = %48, %47
  br label %50

50:                                               ; preds = %49, %43
  br label %67

51:                                               ; preds = %34
  %52 = load i32, i32* %2, align 4
  %53 = icmp eq i32 %52, 5
  br i1 %53, label %54, label %58

54:                                               ; preds = %51
  %55 = load i32, i32* %3, align 4
  %56 = icmp sle i32 %55, 75
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  store i32 1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  br label %66

58:                                               ; preds = %54, %51
  %59 = load i32, i32* %2, align 4
  %60 = icmp eq i32 %59, 6
  br i1 %60, label %61, label %65

61:                                               ; preds = %58
  %62 = load i32, i32* %3, align 4
  %63 = icmp sle i32 %62, 2
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i32 1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  br label %65

65:                                               ; preds = %64, %61, %58
  br label %66

66:                                               ; preds = %65, %57
  br label %67

67:                                               ; preds = %66, %50
  br label %68

68:                                               ; preds = %67, %33
  br label %69

69:                                               ; preds = %68, %25
  %70 = load i8*, i8** getelementptr inbounds (%struct.utsname, %struct.utsname* @check_kver.un, i32 0, i32 0), align 8
  %71 = load i32, i32* %4, align 4
  %72 = icmp ne i32 %71, 0
  %73 = zext i1 %72 to i64
  %74 = select i1 %72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %75 = load i32, i32* %5, align 4
  %76 = icmp ne i32 %75, 0
  %77 = zext i1 %76 to i64
  %78 = select i1 %76, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i8* %70, i8* %74, i8* %78)
  %80 = load i32, i32* @stdout, align 4
  %81 = call i32 @fflush(i32 %80)
  %82 = load i32, i32* %4, align 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %69
  %85 = load i32, i32* %5, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  ret void

88:                                               ; preds = %84, %69
  %89 = call i32 @_exit(i32 0) #3
  unreachable
}

declare dso_local i32 @uname(%struct.utsname*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @fflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
