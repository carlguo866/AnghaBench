; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_proc_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_proc_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.proc_reader = type { i32, i32*, i32 }

@.str = private unnamed_addr constant [42 x i8] c"proc_read: file: %s, pr->buffer_size: %d\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"[-] proc_read: open()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@PROC_CHUNK_SIZE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [15 x i8] c"[-] read(proc)\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"proc_read = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.proc_reader*, i8*)* @proc_read to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @proc_read(%struct.proc_reader* %0, i8* %1) #0 {
  %3 = alloca %struct.proc_reader*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.proc_reader* %0, %struct.proc_reader** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %9 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %8, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = call i32 (i8*, ...) @debug2(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i8* %7, i32 %10)
  %12 = load i8*, i8** %4, align 8
  %13 = load i32, i32* @O_RDONLY, align 4
  %14 = call i32 @open(i8* %12, i32 %13)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %21

17:                                               ; preds = %2
  %18 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i32, i32* @EXIT_FAILURE, align 4
  %20 = call i32 @exit(i32 %19) #3
  unreachable

21:                                               ; preds = %2
  %22 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %23 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %22, i32 0, i32 0
  store i32 0, i32* %23, align 8
  br label %24

24:                                               ; preds = %21, %59
  %25 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %26 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %27 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = load i32, i32* @PROC_CHUNK_SIZE, align 4
  %30 = add nsw i32 %28, %29
  %31 = call i32 @proc_ensure_size(%struct.proc_reader* %25, i32 %30)
  %32 = load i32, i32* %5, align 4
  %33 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %34 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %33, i32 0, i32 1
  %35 = load i32*, i32** %34, align 8
  %36 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %37 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %35, i64 %39
  %41 = load i32, i32* @PROC_CHUNK_SIZE, align 4
  %42 = call i32 @read(i32 %32, i32* %40, i32 %41)
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %45, label %49

45:                                               ; preds = %24
  %46 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %47 = load i32, i32* @EXIT_FAILURE, align 4
  %48 = call i32 @exit(i32 %47) #3
  unreachable

49:                                               ; preds = %24
  %50 = load i32, i32* %6, align 4
  %51 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %52 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = add nsw i32 %53, %50
  store i32 %54, i32* %52, align 8
  %55 = load i32, i32* %6, align 4
  %56 = load i32, i32* @PROC_CHUNK_SIZE, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %49
  br label %60

59:                                               ; preds = %49
  br label %24

60:                                               ; preds = %58
  %61 = load i32, i32* %5, align 4
  %62 = call i32 @close(i32 %61)
  %63 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %64 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %63, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = call i32 (i8*, ...) @debug2(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 %65)
  %67 = load %struct.proc_reader*, %struct.proc_reader** %3, align 8
  %68 = getelementptr inbounds %struct.proc_reader, %struct.proc_reader* %67, i32 0, i32 0
  %69 = load i32, i32* %68, align 8
  ret i32 %69
}

declare dso_local i32 @debug2(i8*, ...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @proc_ensure_size(%struct.proc_reader*, i32) #1

declare dso_local i32 @read(i32, i32*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
