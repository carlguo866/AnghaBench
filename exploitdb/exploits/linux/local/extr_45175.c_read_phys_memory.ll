; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_phys_memory.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_phys_memory.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PAGE_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [52 x i8] c"read_phys_memory: offset = %016lx, length = %016lx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @read_phys_memory(i64 %0, i64 %1, i64 %2, i32 %3) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i32 %3, i32* %8, align 4
  %15 = load i32, i32* @PAGE_SIZE, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %9, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %10, align 8
  %19 = load i32, i32* @PAGE_SIZE, align 4
  %20 = zext i32 %19 to i64
  %21 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %11, align 8
  %22 = load i64, i64* %6, align 8
  %23 = load i64, i64* %7, align 8
  %24 = call i32 @debug1(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i64 %22, i64 %23)
  %25 = getelementptr inbounds i8, i8* %21, i64 0
  %26 = trunc i64 %20 to i32
  %27 = call i32 @memset(i8* %25, i32 0, i32 %26)
  store i64 0, i64* %12, align 8
  br label %28

28:                                               ; preds = %88, %4
  %29 = load i64, i64* %12, align 8
  %30 = load i64, i64* %7, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %92

32:                                               ; preds = %28
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* %12, align 8
  %35 = add i64 %33, %34
  store i64 %35, i64* %13, align 8
  %36 = load i32, i32* @PAGE_SIZE, align 4
  %37 = sext i32 %36 to i64
  store i64 %37, i64* %14, align 8
  %38 = load i64, i64* %13, align 8
  %39 = load i32, i32* @PAGE_SIZE, align 4
  %40 = sext i32 %39 to i64
  %41 = urem i64 %38, %40
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %32
  %44 = load i32, i32* @PAGE_SIZE, align 4
  %45 = sext i32 %44 to i64
  %46 = load i64, i64* %13, align 8
  %47 = load i32, i32* @PAGE_SIZE, align 4
  %48 = sext i32 %47 to i64
  %49 = urem i64 %46, %48
  %50 = sub i64 %45, %49
  store i64 %50, i64* %14, align 8
  br label %51

51:                                               ; preds = %43, %32
  %52 = load i64, i64* %14, align 8
  %53 = load i64, i64* %7, align 8
  %54 = load i64, i64* %12, align 8
  %55 = sub i64 %53, %54
  %56 = call i64 @min(i64 %52, i64 %55)
  store i64 %56, i64* %14, align 8
  %57 = load i64, i64* %6, align 8
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %57, %58
  %60 = call i64 @page_check_phys(i64 %59)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %78

62:                                               ; preds = %51
  %63 = load i64, i64* %6, align 8
  %64 = load i64, i64* %12, align 8
  %65 = add i64 %63, %64
  %66 = load i64, i64* %14, align 8
  %67 = getelementptr inbounds i8, i8* %18, i64 0
  %68 = call i32 @phys_read_range(i64 %65, i64 %66, i8* %67)
  %69 = load i32, i32* %8, align 4
  %70 = load i64, i64* %5, align 8
  %71 = load i64, i64* %6, align 8
  %72 = add i64 %70, %71
  %73 = load i64, i64* %12, align 8
  %74 = add i64 %72, %73
  %75 = getelementptr inbounds i8, i8* %18, i64 0
  %76 = load i64, i64* %14, align 8
  %77 = call i32 @write_bytes(i32 %69, i64 %74, i8* %75, i64 %76)
  br label %88

78:                                               ; preds = %51
  %79 = load i32, i32* %8, align 4
  %80 = load i64, i64* %5, align 8
  %81 = load i64, i64* %6, align 8
  %82 = add i64 %80, %81
  %83 = load i64, i64* %12, align 8
  %84 = add i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %21, i64 0
  %86 = load i64, i64* %14, align 8
  %87 = call i32 @write_bytes(i32 %79, i64 %84, i8* %85, i64 %86)
  br label %88

88:                                               ; preds = %78, %62
  %89 = load i64, i64* %14, align 8
  %90 = load i64, i64* %12, align 8
  %91 = add i64 %90, %89
  store i64 %91, i64* %12, align 8
  br label %28

92:                                               ; preds = %28
  %93 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %93)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @debug1(i8*, i64, i64) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i64 @min(i64, i64) #2

declare dso_local i64 @page_check_phys(i64) #2

declare dso_local i32 @phys_read_range(i64, i64, i8*) #2

declare dso_local i32 @write_bytes(i32, i64, i8*, i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
