; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_26321.c_receive_fd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_26321.c_receive_fd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iovec = type { i8*, i32 }
%struct.msghdr = type { i32, i32, i64, i64, i32*, %struct.iovec* }

@cmptr = common dso_local global i32* null, align 8
@CONTROLLEN = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32)* @receive_fd to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @receive_fd(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1 x %struct.iovec], align 16
  %5 = alloca %struct.msghdr, align 8
  %6 = alloca [32 x i8], align 16
  store i32 %0, i32* %3, align 4
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  %8 = getelementptr inbounds [1 x %struct.iovec], [1 x %struct.iovec]* %4, i64 0, i64 0
  %9 = getelementptr inbounds %struct.iovec, %struct.iovec* %8, i32 0, i32 0
  store i8* %7, i8** %9, align 16
  %10 = getelementptr inbounds [1 x %struct.iovec], [1 x %struct.iovec]* %4, i64 0, i64 0
  %11 = getelementptr inbounds %struct.iovec, %struct.iovec* %10, i32 0, i32 1
  store i32 32, i32* %11, align 8
  %12 = getelementptr inbounds [1 x %struct.iovec], [1 x %struct.iovec]* %4, i64 0, i64 0
  %13 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 5
  store %struct.iovec* %12, %struct.iovec** %13, align 8
  %14 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 0
  store i32 1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 4
  store i32* null, i32** %15, align 8
  %16 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 3
  store i64 0, i64* %16, align 8
  %17 = load i32*, i32** @cmptr, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %19, label %24

19:                                               ; preds = %1
  %20 = load i32, i32* @CONTROLLEN, align 4
  %21 = call i32* @malloc(i32 %20)
  store i32* %21, i32** @cmptr, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  store i32 -1, i32* %2, align 4
  br label %39

24:                                               ; preds = %19, %1
  %25 = load i32*, i32** @cmptr, align 8
  %26 = ptrtoint i32* %25 to i64
  %27 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 2
  store i64 %26, i64* %27, align 8
  %28 = load i32, i32* @CONTROLLEN, align 4
  %29 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 1
  store i32 %28, i32* %29, align 4
  %30 = load i32, i32* %3, align 4
  %31 = call i64 @recvmsg(i32 %30, %struct.msghdr* %5, i32 0)
  %32 = icmp sle i64 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  store i32 -1, i32* %2, align 4
  br label %39

34:                                               ; preds = %24
  %35 = load i32*, i32** @cmptr, align 8
  %36 = call i64 @CMSG_DATA(i32* %35)
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %2, align 4
  br label %39

39:                                               ; preds = %34, %33, %23
  %40 = load i32, i32* %2, align 4
  ret i32 %40
}

declare dso_local i32* @malloc(i32) #1

declare dso_local i64 @recvmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i64 @CMSG_DATA(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
