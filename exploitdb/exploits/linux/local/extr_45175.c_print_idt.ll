; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_print_idt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_print_idt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.idt_register = type { i32, i32 }
%struct.idt_gate = type { i32 }

@.str = private unnamed_addr constant [26 x i8] c"base: %016lx, length: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"gate #%03d: %016lx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @print_idt to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_idt(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [4096 x i8], align 16
  %4 = alloca %struct.idt_register, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.idt_gate*, align 8
  %7 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %8 = call i32 @get_idt(%struct.idt_register* %4)
  %9 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = icmp ule i64 %11, 4096
  %13 = zext i1 %12 to i32
  %14 = call i32 @assert(i32 %13)
  %15 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i64 0
  %20 = call i32 @read_range(i32 %16, i32 %18, i8* %19)
  %21 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = call i32 @info(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i32 %22, i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = udiv i64 %29, 4
  %31 = trunc i64 %30 to i32
  %32 = call i32 @min(i32 %26, i32 %31)
  store i32 %32, i32* %2, align 4
  store i32 0, i32* %5, align 4
  br label %33

33:                                               ; preds = %48, %1
  %34 = load i32, i32* %5, align 4
  %35 = load i32, i32* %2, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %51

37:                                               ; preds = %33
  %38 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i64 0
  %39 = bitcast i8* %38 to %struct.idt_gate*
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.idt_gate, %struct.idt_gate* %39, i64 %41
  store %struct.idt_gate* %42, %struct.idt_gate** %6, align 8
  %43 = load %struct.idt_gate*, %struct.idt_gate** %6, align 8
  %44 = call i32 @idt_gate_addr(%struct.idt_gate* %43)
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %5, align 4
  %46 = load i32, i32* %7, align 4
  %47 = call i32 @info(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 %45, i32 %46)
  br label %48

48:                                               ; preds = %37
  %49 = load i32, i32* %5, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %5, align 4
  br label %33

51:                                               ; preds = %33
  ret void
}

declare dso_local i32 @get_idt(%struct.idt_register*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @read_range(i32, i32, i8*) #1

declare dso_local i32 @info(i8*, i32, i32) #1

declare dso_local i32 @min(i32, i32) #1

declare dso_local i32 @idt_gate_addr(%struct.idt_gate*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
