; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_recv_fd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_recv_fd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iovec = type { i8*, i32 }
%struct.msghdr = type { i32, i32, i64, %struct.iovec*, i64, i64, i32, i32 }
%struct.cmsghdr = type { i32 }
%struct.sockaddr_un = type { i32, i32, i64, %struct.iovec*, i64, i64, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@socket_path = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @recv_fd() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1 x i8], align 1
  %7 = alloca %struct.iovec, align 8
  %8 = alloca %struct.msghdr, align 8
  %9 = alloca %struct.cmsghdr*, align 8
  %10 = alloca %struct.sockaddr_un, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = call i32 @CMSG_SPACE(i32 4)
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %11, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %12, align 8
  %18 = load i32, i32* @AF_UNIX, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = call i32 @socket(i32 %18, i32 %19, i32 0)
  store i32 %20, i32* %2, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %0
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

23:                                               ; preds = %0
  %24 = call i32 @memset(%struct.sockaddr_un* %10, i32 0, i32 48)
  %25 = load i32, i32* @AF_UNIX, align 4
  %26 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %10, i32 0, i32 7
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %10, i32 0, i32 6
  %28 = load i32, i32* %27, align 8
  %29 = load i32, i32* @socket_path, align 4
  %30 = call i32 @strncpy(i32 %28, i32 %29, i32 3)
  %31 = load i32, i32* @socket_path, align 4
  %32 = call i32 @unlink(i32 %31)
  %33 = load i32, i32* %2, align 4
  %34 = bitcast %struct.sockaddr_un* %10 to %struct.sockaddr*
  %35 = call i64 @bind(i32 %33, %struct.sockaddr* %34, i32 48)
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %23
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

38:                                               ; preds = %23
  %39 = load i32, i32* %2, align 4
  %40 = call i64 @listen(i32 %39, i32 1)
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

43:                                               ; preds = %38
  %44 = load i32, i32* %2, align 4
  %45 = call i32 @accept(i32 %44, i32* null, i32* null)
  store i32 %45, i32* %3, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %43
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

48:                                               ; preds = %43
  %49 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i64 0, i64 0
  %50 = getelementptr inbounds %struct.iovec, %struct.iovec* %7, i32 0, i32 0
  store i8* %49, i8** %50, align 8
  %51 = getelementptr inbounds %struct.iovec, %struct.iovec* %7, i32 0, i32 1
  store i32 1, i32* %51, align 8
  %52 = bitcast %struct.msghdr* %8 to %struct.sockaddr_un*
  %53 = call i32 @memset(%struct.sockaddr_un* %52, i32 0, i32 48)
  %54 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 5
  store i64 0, i64* %54, align 8
  %55 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 4
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 3
  store %struct.iovec* %7, %struct.iovec** %56, align 8
  %57 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 0
  store i32 1, i32* %57, align 8
  %58 = ptrtoint i8* %17 to i64
  %59 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 2
  store i64 %58, i64* %59, align 8
  %60 = trunc i64 %15 to i32
  %61 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 1
  store i32 %60, i32* %61, align 4
  %62 = load i32, i32* %3, align 4
  %63 = bitcast %struct.msghdr* %8 to %struct.sockaddr_un*
  %64 = call i32 @recvmsg(i32 %62, %struct.sockaddr_un* %63, i32 0)
  store i32 %64, i32* %4, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %48
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

67:                                               ; preds = %48
  %68 = load i32, i32* %4, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

71:                                               ; preds = %67
  %72 = bitcast %struct.msghdr* %8 to %struct.sockaddr_un*
  %73 = call %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.sockaddr_un* %72)
  store %struct.cmsghdr* %73, %struct.cmsghdr** %9, align 8
  %74 = load %struct.cmsghdr*, %struct.cmsghdr** %9, align 8
  %75 = call i32 @CMSG_DATA(%struct.cmsghdr* %74)
  %76 = call i32 @memmove(i32* %5, i32 %75, i32 4)
  %77 = load i32, i32* %3, align 4
  %78 = call i32 @close(i32 %77)
  %79 = load i32, i32* %2, align 4
  %80 = call i32 @close(i32 %79)
  %81 = load i32, i32* %5, align 4
  store i32 %81, i32* %1, align 4
  store i32 1, i32* %13, align 4
  br label %82

82:                                               ; preds = %71, %70, %66, %47, %42, %37, %22
  %83 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %83)
  %84 = load i32, i32* %1, align 4
  ret i32 %84
}

declare dso_local i32 @CMSG_SPACE(i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_un*, i32, i32) #1

declare dso_local i32 @strncpy(i32, i32, i32) #1

declare dso_local i32 @unlink(i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, i32*, i32*) #1

declare dso_local i32 @recvmsg(i32, %struct.sockaddr_un*, i32) #1

declare dso_local %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.sockaddr_un*) #1

declare dso_local i32 @memmove(i32*, i32, i32) #1

declare dso_local i32 @CMSG_DATA(%struct.cmsghdr*) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
