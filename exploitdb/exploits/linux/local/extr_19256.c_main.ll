; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19256.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19256.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.bootp = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@server_addr = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@SERVER_PORT = common dso_local global i32 0, align 4
@host_addr = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"cannot create socket\0A\00", align 1
@MAX_MSG_SIZE = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"Cannot malloc.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca %struct.bootp*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %7 = load i32, i32* %3, align 4
  %8 = load i8**, i8*** %4, align 8
  %9 = call i32 @get_args(i32 %7, i8** %8)
  %10 = load i32, i32* @AF_INET, align 4
  store i32 %10, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @server_addr, i32 0, i32 2), align 4
  %11 = load i32, i32* @SERVER_PORT, align 4
  %12 = call i32 @htons(i32 %11)
  store i32 %12, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @server_addr, i32 0, i32 1), align 4
  %13 = load i32, i32* @host_addr, align 4
  %14 = call i32 @inet_addr(i32 %13)
  store i32 %14, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @server_addr, i32 0, i32 0, i32 0), align 4
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_DGRAM, align 4
  %17 = call i32 @socket(i32 %15, i32 %16, i32 0)
  store i32 %17, i32* %6, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %2
  %20 = load i32, i32* @stderr, align 4
  %21 = call i32 @fprintf(i32 %20, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #3
  unreachable

23:                                               ; preds = %2
  %24 = load i64, i64* @MAX_MSG_SIZE, align 8
  %25 = add nsw i64 %24, 1000
  %26 = call i64 @malloc(i64 %25)
  %27 = inttoptr i64 %26 to %struct.bootp*
  store %struct.bootp* %27, %struct.bootp** %5, align 8
  %28 = icmp eq %struct.bootp* %27, null
  br i1 %28, label %29, label %33

29:                                               ; preds = %23
  %30 = load i32, i32* @stderr, align 4
  %31 = call i32 @fprintf(i32 %30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 1) #3
  unreachable

33:                                               ; preds = %23
  %34 = load %struct.bootp*, %struct.bootp** %5, align 8
  %35 = load i64, i64* @MAX_MSG_SIZE, align 8
  %36 = add nsw i64 %35, 1000
  %37 = call i32 @memset(%struct.bootp* %34, i32 0, i64 %36)
  %38 = load %struct.bootp*, %struct.bootp** %5, align 8
  %39 = load i32, i32* %3, align 4
  %40 = load i8**, i8*** %4, align 8
  %41 = call i32 @build_packet(%struct.bootp* %38, i32 %39, i8** %40)
  %42 = load i32, i32* %6, align 4
  %43 = load %struct.bootp*, %struct.bootp** %5, align 8
  %44 = call i32 @sendpacket(i32 %42, %struct.bootp* %43)
  ret i32 0
}

declare dso_local i32 @get_args(i32, i8**) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @memset(%struct.bootp*, i32, i64) #1

declare dso_local i32 @build_packet(%struct.bootp*, i32, i8**) #1

declare dso_local i32 @sendpacket(i32, %struct.bootp*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
