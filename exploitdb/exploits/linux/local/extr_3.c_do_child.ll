; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_do_child.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_do_child.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@child = common dso_local global i32 0, align 4
@victim = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@sigchld = common dso_local global i32 0, align 4
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@ESRCH = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [21 x i8] c"[-] Unable to attach\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"[+] Attached to %d\0A\00", align 1
@gotchild = common dso_local global i32 0, align 4
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"[-] Unable to setup syscall trace\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[+] Waiting for signal\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_child() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 (...) @getpid()
  store i32 %2, i32* @child, align 4
  %3 = load i32, i32* @child, align 4
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* @victim, align 4
  %5 = load i32, i32* @SIGCHLD, align 4
  %6 = load i32, i32* @sigchld, align 4
  %7 = call i32 @signal(i32 %5, i32 %6)
  br label %8

8:                                                ; preds = %19, %0
  %9 = load i32, i32* @PTRACE_ATTACH, align 4
  %10 = load i32, i32* @victim, align 4
  %11 = call i32 @ptrace(i32 %9, i32 %10, i32 0, i32 0)
  store i32 %11, i32* %1, align 4
  br label %12

12:                                               ; preds = %8
  %13 = load i32, i32* %1, align 4
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  %16 = load i64, i64* @errno, align 8
  %17 = load i64, i64* @ESRCH, align 8
  %18 = icmp eq i64 %16, %17
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i1 [ false, %12 ], [ %18, %15 ]
  br i1 %20, label %8, label %21

21:                                               ; preds = %19
  %22 = load i32, i32* %1, align 4
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = call i32 @fatal(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %21
  %27 = load i32, i32* @stderr, align 4
  %28 = load i32, i32* @victim, align 4
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 %28)
  br label %30

30:                                               ; preds = %34, %26
  %31 = load i32, i32* @gotchild, align 4
  %32 = icmp ne i32 %31, 0
  %33 = xor i1 %32, true
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  br label %30

35:                                               ; preds = %30
  %36 = load i32, i32* @PTRACE_SYSCALL, align 4
  %37 = load i32, i32* @victim, align 4
  %38 = call i32 @ptrace(i32 %36, i32 %37, i32 0, i32 0)
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = call i32 @fatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0))
  br label %42

42:                                               ; preds = %40, %35
  %43 = load i32, i32* @stderr, align 4
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %45

45:                                               ; preds = %45, %42
  br label %45
}

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @ptrace(i32, i32, i32, i32) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
