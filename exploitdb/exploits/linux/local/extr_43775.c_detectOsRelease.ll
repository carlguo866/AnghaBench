; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43775.c_detectOsRelease.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43775.c_detectOsRelease.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"/etc/os-release\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"VERSION\00", align 1
@osRelease = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"NAME\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"Detected OS version: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @detectOsRelease() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = load i32, i32* @O_RDONLY, align 4
  %6 = call i32 @open(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 %5)
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %0
  store i32 -1, i32* %1, align 4
  br label %38

10:                                               ; preds = %0
  %11 = call i8* @alloca(i32 1024)
  store i8* %11, i8** %3, align 8
  %12 = load i32, i32* %2, align 4
  %13 = load i8*, i8** %3, align 8
  %14 = call i32 @read(i32 %12, i8* %13, i32 1024)
  store i32 %14, i32* %4, align 4
  %15 = load i32, i32* %2, align 4
  %16 = call i32 @close(i32 %15)
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  store i32 -1, i32* %1, align 4
  br label %38

20:                                               ; preds = %10
  %21 = load i8*, i8** %3, align 8
  %22 = load i32, i32* %4, align 4
  %23 = call i8* @getReleaseFileField(i8* %21, i32 %22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i8* %23, i8** @osRelease, align 8
  %24 = load i8*, i8** @osRelease, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = load i8*, i8** %3, align 8
  %28 = load i32, i32* %4, align 4
  %29 = call i8* @getReleaseFileField(i8* %27, i32 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  store i8* %29, i8** @osRelease, align 8
  br label %30

30:                                               ; preds = %26, %20
  %31 = load i8*, i8** @osRelease, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %30
  %34 = load i32, i32* @stderr, align 4
  %35 = load i8*, i8** @osRelease, align 8
  %36 = call i32 @fprintf(i32 %34, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %35)
  store i32 0, i32* %1, align 4
  br label %38

37:                                               ; preds = %30
  store i32 -1, i32* %1, align 4
  br label %38

38:                                               ; preds = %37, %33, %19, %9
  %39 = load i32, i32* %1, align 4
  ret i32 %39
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i8* @alloca(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i8* @getReleaseFileField(i8*, i32, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
