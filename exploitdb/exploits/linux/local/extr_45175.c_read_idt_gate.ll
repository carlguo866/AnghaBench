; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_idt_gate.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_read_idt_gate.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.idt_register = type { i32, i32 }
%struct.idt_gate = type { i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32)* @read_idt_gate to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_idt_gate(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [4096 x i8], align 16
  %4 = alloca %struct.idt_register, align 4
  %5 = alloca %struct.idt_gate*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = call i32 @get_idt(%struct.idt_register* %4)
  %8 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = icmp ule i64 %10, 4096
  %12 = zext i1 %11 to i32
  %13 = call i32 @assert(i32 %12)
  %14 = load i32, i32* %2, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = udiv i64 %18, 4
  %20 = icmp ule i64 %15, %19
  %21 = zext i1 %20 to i32
  %22 = call i32 @assert(i32 %21)
  %23 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.idt_register, %struct.idt_register* %4, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i64 0
  %28 = call i32 @read_range(i32 %24, i32 %26, i8* %27)
  %29 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i64 0
  %30 = bitcast i8* %29 to %struct.idt_gate*
  %31 = load i32, i32* %2, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.idt_gate, %struct.idt_gate* %30, i64 %32
  store %struct.idt_gate* %33, %struct.idt_gate** %5, align 8
  %34 = load %struct.idt_gate*, %struct.idt_gate** %5, align 8
  %35 = call i32 @idt_gate_addr(%struct.idt_gate* %34)
  store i32 %35, i32* %6, align 4
  %36 = load i32, i32* %6, align 4
  ret i32 %36
}

declare dso_local i32 @get_idt(%struct.idt_register*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @read_range(i32, i32, i8*) #1

declare dso_local i32 @idt_gate_addr(%struct.idt_gate*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
