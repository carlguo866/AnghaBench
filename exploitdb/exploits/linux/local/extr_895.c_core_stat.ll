; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_895.c_core_stat.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_895.c_core_stat.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"/proc/%d/maps\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rt\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%x-%x\00", align 1
@PAGE_SIZE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [16 x i8] c"in core 0x%08x-\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"0x%08x (%d)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @core_stat() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [512 x i8], align 16
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i64 0, i64* %4, align 8
  %9 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %10 = call i32 (...) @getpid()
  %11 = call i32 @sprintf(i8* %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %10)
  %12 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %13 = call i32* @fopen(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %13, i32** %5, align 8
  br label %14

14:                                               ; preds = %94, %0
  %15 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %16 = load i32*, i32** %5, align 8
  %17 = call i64 @fgets(i8* %15, i32 512, i32* %16)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %95

19:                                               ; preds = %14
  %20 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %21 = call i32 @sscanf(i8* %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* %6, i32* %7)
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  br label %95

24:                                               ; preds = %19
  %25 = load i32, i32* %6, align 4
  store i32 %25, i32* %8, align 4
  br label %26

26:                                               ; preds = %90, %24
  %27 = load i32, i32* %8, align 4
  %28 = load i32, i32* %7, align 4
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %94

30:                                               ; preds = %26
  %31 = load i32, i32* %8, align 4
  %32 = zext i32 %31 to i64
  %33 = inttoptr i64 %32 to i8*
  %34 = load i32, i32* @PAGE_SIZE, align 4
  %35 = call i32 @mincore(i8* %33, i32 %34, i8* %3)
  %36 = load i8, i8* %3, align 1
  %37 = icmp ne i8 %36, 0
  br i1 %37, label %38, label %73

38:                                               ; preds = %30
  br label %39

39:                                               ; preds = %60, %38
  %40 = load i64, i64* %4, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %49, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %8, align 4
  %44 = zext i32 %43 to i64
  %45 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i64 %44)
  %46 = load i32, i32* %8, align 4
  %47 = zext i32 %46 to i64
  store i64 %47, i64* %4, align 8
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %1, align 4
  br label %90

49:                                               ; preds = %39
  %50 = load i64, i64* %4, align 8
  %51 = load i32, i32* @PAGE_SIZE, align 4
  %52 = zext i32 %51 to i64
  %53 = add i64 %50, %52
  %54 = load i32, i32* %8, align 4
  %55 = zext i32 %54 to i64
  %56 = icmp eq i64 %53, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %49
  %58 = load i32, i32* %8, align 4
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %4, align 8
  br label %90

60:                                               ; preds = %49
  %61 = load i64, i64* %4, align 8
  %62 = load i32, i32* @PAGE_SIZE, align 4
  %63 = zext i32 %62 to i64
  %64 = add i64 %61, %63
  %65 = load i64, i64* %4, align 8
  %66 = load i32, i32* @PAGE_SIZE, align 4
  %67 = zext i32 %66 to i64
  %68 = add i64 %65, %67
  %69 = load i32, i32* %1, align 4
  %70 = sext i32 %69 to i64
  %71 = sub i64 %68, %70
  %72 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i64 %64, i64 %71)
  store i64 0, i64* %4, align 8
  br label %39

73:                                               ; preds = %30
  %74 = load i64, i64* %4, align 8
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %73
  br label %90

77:                                               ; preds = %73
  %78 = load i64, i64* %4, align 8
  %79 = load i32, i32* @PAGE_SIZE, align 4
  %80 = zext i32 %79 to i64
  %81 = add i64 %78, %80
  %82 = load i64, i64* %4, align 8
  %83 = load i32, i32* @PAGE_SIZE, align 4
  %84 = zext i32 %83 to i64
  %85 = add i64 %82, %84
  %86 = load i32, i32* %1, align 4
  %87 = sext i32 %86 to i64
  %88 = sub i64 %85, %87
  %89 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i64 %81, i64 %88)
  store i64 0, i64* %4, align 8
  br label %90

90:                                               ; preds = %77, %76, %57, %42
  %91 = load i32, i32* @PAGE_SIZE, align 4
  %92 = load i32, i32* %8, align 4
  %93 = add i32 %92, %91
  store i32 %93, i32* %8, align 4
  br label %26

94:                                               ; preds = %26
  br label %14

95:                                               ; preds = %23, %14
  %96 = load i32*, i32** %5, align 8
  %97 = call i32 @fclose(i32* %96)
  ret void
}

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i64 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*) #1

declare dso_local i32 @mincore(i8*, i32, i8*) #1

declare dso_local i32 @printf(i8*, i64, ...) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
