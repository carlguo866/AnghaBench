; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15704.c_get_kernel_sym.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15704.c_get_kernel_sym.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i8* }

@.str = private unnamed_addr constant [15 x i8] c"/proc/kallsyms\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"/proc/ksyms\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"%p %c %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%p %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"_O/\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"_S.\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"smp\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [26 x i8] c" [+] Resolved %s to %p%s\0A\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c" (via System.map)\00", align 1
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"2.6\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"/boot/System.map-%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_sym(i8* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca [512 x i8], align 16
  %8 = alloca %struct.utsname, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %13 = call i32* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %13, i32** %4, align 8
  %14 = load i32*, i32** %4, align 8
  %15 = icmp eq i32* %14, null
  br i1 %15, label %16, label %22

16:                                               ; preds = %1
  %17 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %17, i32** %4, align 8
  %18 = load i32*, i32** %4, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  br label %119

21:                                               ; preds = %16
  store i32 1, i32* %11, align 4
  br label %22

22:                                               ; preds = %21, %1
  br label %23

23:                                               ; preds = %136, %22
  store i32 0, i32* %9, align 4
  br label %24

24:                                               ; preds = %111, %89, %51, %23
  %25 = load i32, i32* %9, align 4
  %26 = load i32, i32* @EOF, align 4
  %27 = icmp ne i32 %25, %26
  br i1 %27, label %28, label %112

28:                                               ; preds = %24
  %29 = load i32, i32* %11, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %28
  %32 = load i32*, i32** %4, align 8
  %33 = bitcast i64* %5 to i8**
  %34 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %35 = call i32 (i32*, i8*, ...) @fscanf(i32* %32, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8** %33, i8* %6, i8* %34)
  store i32 %35, i32* %9, align 4
  br label %86

36:                                               ; preds = %28
  %37 = load i32*, i32** %4, align 8
  %38 = bitcast i64* %5 to i8**
  %39 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %40 = call i32 (i32*, i8*, ...) @fscanf(i32* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8** %38, i8* %39)
  store i32 %40, i32* %9, align 4
  %41 = load i32, i32* %9, align 4
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %43, label %85

43:                                               ; preds = %36
  %44 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %45 = call i64 @strstr(i8* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %49 = call i64 @strstr(i8* %48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %47, %43
  br label %24

52:                                               ; preds = %47
  %53 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %54 = call i8* @strrchr(i8* %53, i8 signext 95)
  store i8* %54, i8** %12, align 8
  %55 = load i8*, i8** %12, align 8
  %56 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %57 = getelementptr inbounds i8, i8* %56, i64 5
  %58 = icmp ugt i8* %55, %57
  br i1 %58, label %59, label %84

59:                                               ; preds = %52
  %60 = load i8*, i8** %12, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 -3
  %62 = call i64 @strncmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %84, label %64

64:                                               ; preds = %59
  %65 = load i8*, i8** %12, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 -4
  store i8* %66, i8** %12, align 8
  br label %67

67:                                               ; preds = %79, %64
  %68 = load i8*, i8** %12, align 8
  %69 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %70 = icmp ugt i8* %68, %69
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = load i8*, i8** %12, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 -1
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 95
  br label %77

77:                                               ; preds = %71, %67
  %78 = phi i1 [ false, %67 ], [ %76, %71 ]
  br i1 %78, label %79, label %82

79:                                               ; preds = %77
  %80 = load i8*, i8** %12, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 -1
  store i8* %81, i8** %12, align 8
  br label %67

82:                                               ; preds = %77
  %83 = load i8*, i8** %12, align 8
  store i8 0, i8* %83, align 1
  br label %84

84:                                               ; preds = %82, %59, %52
  br label %85

85:                                               ; preds = %84, %36
  br label %86

86:                                               ; preds = %85, %31
  %87 = load i32, i32* %9, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %93

89:                                               ; preds = %86
  %90 = load i32*, i32** %4, align 8
  %91 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %92 = call i32 (i32*, i8*, ...) @fscanf(i32* %90, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %91)
  br label %24

93:                                               ; preds = %86
  %94 = load i8*, i8** %3, align 8
  %95 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %96 = call i32 @strcmp(i8* %94, i8* %95)
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %111, label %98

98:                                               ; preds = %93
  %99 = load i32, i32* @stdout, align 4
  %100 = load i8*, i8** %3, align 8
  %101 = load i64, i64* %5, align 8
  %102 = inttoptr i64 %101 to i8*
  %103 = load i32, i32* %10, align 4
  %104 = icmp ne i32 %103, 0
  %105 = zext i1 %104 to i64
  %106 = select i1 %104, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0)
  %107 = call i32 @fprintf(i32 %99, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %100, i8* %102, i8* %106)
  %108 = load i32*, i32** %4, align 8
  %109 = call i32 @fclose(i32* %108)
  %110 = load i64, i64* %5, align 8
  store i64 %110, i64* %2, align 8
  br label %137

111:                                              ; preds = %93
  br label %24

112:                                              ; preds = %24
  %113 = load i32*, i32** %4, align 8
  %114 = call i32 @fclose(i32* %113)
  %115 = load i32, i32* %10, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %112
  store i64 0, i64* %2, align 8
  br label %137

118:                                              ; preds = %112
  br label %119

119:                                              ; preds = %118, %20
  %120 = call i32 @uname(%struct.utsname* %8)
  %121 = getelementptr inbounds %struct.utsname, %struct.utsname* %8, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = call i64 @strncmp(i8* %122, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0), i32 3)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %119
  store i32 1, i32* %11, align 4
  br label %126

126:                                              ; preds = %125, %119
  %127 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %128 = getelementptr inbounds %struct.utsname, %struct.utsname* %8, i32 0, i32 0
  %129 = load i8*, i8** %128, align 8
  %130 = call i32 @sprintf(i8* %127, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0), i8* %129)
  %131 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %132 = call i32* @fopen(i8* %131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %132, i32** %4, align 8
  %133 = load i32*, i32** %4, align 8
  %134 = icmp eq i32* %133, null
  br i1 %134, label %135, label %136

135:                                              ; preds = %126
  store i64 0, i64* %2, align 8
  br label %137

136:                                              ; preds = %126
  store i32 1, i32* %10, align 4
  br label %23

137:                                              ; preds = %135, %117, %98
  %138 = load i64, i64* %2, align 8
  ret i64 %138
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, ...) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i8* @strrchr(i8*, i8 signext) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @uname(%struct.utsname*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
