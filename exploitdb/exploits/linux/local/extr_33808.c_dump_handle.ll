; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33808.c_dump_handle.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33808.c_dump_handle.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.my_file_handle = type { i32, i32, i32* }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"[*] #=%d, %d, char nh[] = {\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"0x%02x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"};\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dump_handle(%struct.my_file_handle* %0) #0 {
  %2 = alloca %struct.my_file_handle*, align 8
  %3 = alloca i32, align 4
  store %struct.my_file_handle* %0, %struct.my_file_handle** %2, align 8
  %4 = load i32, i32* @stderr, align 4
  %5 = load %struct.my_file_handle*, %struct.my_file_handle** %2, align 8
  %6 = getelementptr inbounds %struct.my_file_handle, %struct.my_file_handle* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = load %struct.my_file_handle*, %struct.my_file_handle** %2, align 8
  %9 = getelementptr inbounds %struct.my_file_handle, %struct.my_file_handle* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = call i32 (i32, i8*, ...) @fprintf(i32 %4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %7, i32 %10)
  store i32 0, i32* %3, align 4
  br label %12

12:                                               ; preds = %46, %1
  %13 = load i32, i32* %3, align 4
  %14 = load %struct.my_file_handle*, %struct.my_file_handle** %2, align 8
  %15 = getelementptr inbounds %struct.my_file_handle, %struct.my_file_handle* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %13, %16
  br i1 %17, label %18, label %49

18:                                               ; preds = %12
  %19 = load i32, i32* @stderr, align 4
  %20 = load %struct.my_file_handle*, %struct.my_file_handle** %2, align 8
  %21 = getelementptr inbounds %struct.my_file_handle, %struct.my_file_handle* %20, i32 0, i32 2
  %22 = load i32*, i32** %21, align 8
  %23 = load i32, i32* %3, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %22, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %26)
  %28 = load i32, i32* %3, align 4
  %29 = add nsw i32 %28, 1
  %30 = srem i32 %29, 20
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %18
  %33 = load i32, i32* @stderr, align 4
  %34 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  br label %35

35:                                               ; preds = %32, %18
  %36 = load i32, i32* %3, align 4
  %37 = load %struct.my_file_handle*, %struct.my_file_handle** %2, align 8
  %38 = getelementptr inbounds %struct.my_file_handle, %struct.my_file_handle* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = sub nsw i32 %39, 1
  %41 = icmp slt i32 %36, %40
  br i1 %41, label %42, label %45

42:                                               ; preds = %35
  %43 = load i32, i32* @stderr, align 4
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  br label %45

45:                                               ; preds = %42, %35
  br label %46

46:                                               ; preds = %45
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %3, align 4
  br label %12

49:                                               ; preds = %12
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
