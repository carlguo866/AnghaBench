; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_131.c_find.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_131.c_find.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@task_size = common dso_local global i32 0, align 4
@address = common dso_local global i32 0, align 4
@TOP_ADDR = common dso_local global i32 0, align 4
@MAP_ISPAGE = common dso_local global i32 0, align 4
@LDT_PAGES = common dso_local global i32 0, align 4
@EAGAIN = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"double allocation\0A\00", align 1
@PAGE_SIZE = common dso_local global i64 0, align 8
@SIGSEGV = common dso_local global i32 0, align 4
@SIG_DFL = common dso_local global i32 0, align 4
@ENOTSUP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [35 x i8] c"Unable to determine kernel address\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @find(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32* %0, i32** %2, align 8
  %8 = load i32, i32* @task_size, align 4
  store i32 %8, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %9 = call i32 (...) @prepare()
  store i32 0, i32* %5, align 4
  store i32 0, i32* @address, align 4
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %50, %1
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* @TOP_ADDR, align 4
  %13 = icmp ult i32 %11, %12
  br i1 %13, label %14, label %59

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  %16 = call i32 @testaddr(i32 %15)
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* @MAP_ISPAGE, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %20, label %34

20:                                               ; preds = %14
  %21 = load i32*, i32** %2, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32, i32* %4, align 4
  %24 = and i32 %22, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %34

26:                                               ; preds = %20
  %27 = load i32, i32* %6, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %3, align 4
  store i32 %30, i32* %6, align 4
  br label %31

31:                                               ; preds = %29, %26
  %32 = load i32, i32* %5, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* %5, align 4
  br label %50

34:                                               ; preds = %20, %14
  %35 = load i32, i32* %6, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %34
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* @LDT_PAGES, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = load i32, i32* @EAGAIN, align 4
  store i32 %42, i32* @errno, align 4
  %43 = load i32, i32* @address, align 4
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = call i32 @fatal(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  br label %47

47:                                               ; preds = %45, %41
  %48 = load i32, i32* %6, align 4
  store i32 %48, i32* @address, align 4
  br label %49

49:                                               ; preds = %47, %37, %34
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %50

50:                                               ; preds = %49, %31
  %51 = load i64, i64* @PAGE_SIZE, align 8
  %52 = load i32, i32* %3, align 4
  %53 = zext i32 %52 to i64
  %54 = add nsw i64 %53, %51
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %3, align 4
  %56 = load i32*, i32** %2, align 8
  %57 = load i32, i32* %4, align 4
  %58 = call i32 @next(i32* %56, i32 %57)
  br label %10

59:                                               ; preds = %10
  %60 = load i32, i32* @SIGSEGV, align 4
  %61 = load i32, i32* @SIG_DFL, align 4
  %62 = call i32 @signal(i32 %60, i32 %61)
  %63 = load i32, i32* @address, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  br label %69

66:                                               ; preds = %59
  %67 = load i32, i32* @ENOTSUP, align 4
  store i32 %67, i32* @errno, align 4
  %68 = call i32 @fatal(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  br label %69

69:                                               ; preds = %66, %65
  ret void
}

declare dso_local i32 @prepare(...) #1

declare dso_local i32 @testaddr(i32) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @next(i32*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
