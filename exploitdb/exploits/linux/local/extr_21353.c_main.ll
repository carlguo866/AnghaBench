; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21353.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21353.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PATH_MAX = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@_PATH_TMP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"getcwd #1\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"CWD=%.40s\0A\00", align 1
@PATH_COMPONENT = common dso_local global i32 0, align 4
@EEXIST = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [6 x i8] c"mkdir\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"CWD=%.40s... [stripped]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @PATH_MAX, align 4
  %6 = add nsw i32 %5, 1
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %2, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %3, align 8
  store i64 0, i64* @errno, align 8
  %10 = load i32, i32* @_PATH_TMP, align 4
  %11 = call i32 @chdir(i32 %10)
  %12 = call i32 @err(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %13 = trunc i64 %7 to i32
  %14 = call i32 @getcwd(i8* %9, i32 %13)
  %15 = call i32 @err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* @stderr, align 4
  %17 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %9)
  store i32 0, i32* %4, align 4
  br label %18

18:                                               ; preds = %34, %0
  %19 = load i32, i32* %4, align 4
  %20 = load i32, i32* @PATH_MAX, align 4
  %21 = icmp sle i32 %19, %20
  br i1 %21, label %22, label %42

22:                                               ; preds = %18
  store i64 0, i64* @errno, align 8
  %23 = load i32, i32* @PATH_COMPONENT, align 4
  %24 = call i32 @mkdir(i32 %23, i32 448)
  %25 = load i64, i64* @errno, align 8
  %26 = load i64, i64* @EEXIST, align 8
  %27 = icmp ne i64 %25, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = call i32 @err(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %30

30:                                               ; preds = %28, %22
  store i64 0, i64* @errno, align 8
  %31 = load i32, i32* @PATH_COMPONENT, align 4
  %32 = call i32 @chdir(i32 %31)
  %33 = call i32 @err(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %34

34:                                               ; preds = %30
  %35 = load i32, i32* @PATH_COMPONENT, align 4
  %36 = call i64 @strlen(i32 %35)
  %37 = add nsw i64 %36, 1
  %38 = load i32, i32* %4, align 4
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, %37
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %4, align 4
  br label %18

42:                                               ; preds = %18
  %43 = trunc i64 %7 to i32
  %44 = call i32 @getcwd(i8* %9, i32 %43)
  %45 = call i32 @err(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 @fprintf(i32 %46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8* %9)
  store i32 0, i32* %1, align 4
  %48 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %48)
  %49 = load i32, i32* %1, align 4
  ret i32 %49
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @chdir(i32) #2

declare dso_local i32 @err(i8*) #2

declare dso_local i32 @getcwd(i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @mkdir(i32, i32) #2

declare dso_local i64 @strlen(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
