; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44302.c_notify_thread_func.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44302.c_notify_thread_func.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pollfd = type { i32, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"test_dir\00", align 1
@__const.notify_thread_func.argv = private unnamed_addr constant [3 x i8*] [i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@IN_NONBLOCK = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"inotify_init1\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"calloc\00", align 1
@IN_OPEN = common dso_local global i32 0, align 4
@IN_CLOSE = common dso_local global i32 0, align 4
@IN_ACCESS = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c"Cannot watch '%s'\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"inotify_add_watch\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@POLLIN = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [23 x i8] c"Listening for events.\0A\00", align 1
@stop = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINTR = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"poll\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i8* (i8*)* @notify_thread_func to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @notify_thread_func(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca [2 x %struct.pollfd], align 16
  %10 = alloca i32, align 4
  %11 = alloca [3 x i8*], align 16
  store i8* %0, i8** %2, align 8
  store i32 2, i32* %10, align 4
  %12 = bitcast [3 x i8*]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([3 x i8*]* @__const.notify_thread_func.argv to i8*), i64 24, i1 false)
  %13 = load i32, i32* @IN_NONBLOCK, align 4
  %14 = call i32 @inotify_init1(i32 %13)
  store i32 %14, i32* %4, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %21

17:                                               ; preds = %1
  %18 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i32, i32* @EXIT_FAILURE, align 4
  %20 = call i32 @exit(i32 %19) #4
  unreachable

21:                                               ; preds = %1
  %22 = load i32, i32* %10, align 4
  %23 = call i32* @calloc(i32 %22, i32 4)
  store i32* %23, i32** %7, align 8
  %24 = load i32*, i32** %7, align 8
  %25 = icmp eq i32* %24, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  %27 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %28 = load i32, i32* @EXIT_FAILURE, align 4
  %29 = call i32 @exit(i32 %28) #4
  unreachable

30:                                               ; preds = %21
  store i32 1, i32* %5, align 4
  br label %31

31:                                               ; preds = %68, %30
  %32 = load i32, i32* %5, align 4
  %33 = load i32, i32* %10, align 4
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %35, label %71

35:                                               ; preds = %31
  %36 = load i32, i32* %4, align 4
  %37 = load i32, i32* %5, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %38
  %40 = load i8*, i8** %39, align 8
  %41 = load i32, i32* @IN_OPEN, align 4
  %42 = load i32, i32* @IN_CLOSE, align 4
  %43 = or i32 %41, %42
  %44 = load i32, i32* @IN_ACCESS, align 4
  %45 = or i32 %43, %44
  %46 = call i32 @inotify_add_watch(i32 %36, i8* %40, i32 %45)
  %47 = load i32*, i32** %7, align 8
  %48 = load i32, i32* %5, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  store i32 %46, i32* %50, align 4
  %51 = load i32*, i32** %7, align 8
  %52 = load i32, i32* %5, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %51, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %67

57:                                               ; preds = %35
  %58 = load i32, i32* @stderr, align 4
  %59 = load i32, i32* %5, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %60
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 @fprintf(i32 %58, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %62)
  %64 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  %65 = load i32, i32* @EXIT_FAILURE, align 4
  %66 = call i32 @exit(i32 %65) #4
  unreachable

67:                                               ; preds = %35
  br label %68

68:                                               ; preds = %67
  %69 = load i32, i32* %5, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %5, align 4
  br label %31

71:                                               ; preds = %31
  store i32 2, i32* %8, align 4
  %72 = load i32, i32* @STDIN_FILENO, align 4
  %73 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 0
  %74 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %73, i32 0, i32 0
  store i32 %72, i32* %74, align 16
  %75 = load i32, i32* @POLLIN, align 4
  %76 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 0
  %77 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %76, i32 0, i32 1
  store i32 %75, i32* %77, align 4
  %78 = load i32, i32* %4, align 4
  %79 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 1
  %80 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %79, i32 0, i32 0
  store i32 %78, i32* %80, align 4
  %81 = load i32, i32* @POLLIN, align 4
  %82 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 1
  %83 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %82, i32 0, i32 1
  store i32 %81, i32* %83, align 4
  %84 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  br label %85

85:                                               ; preds = %121, %99, %71
  %86 = load i32, i32* @stop, align 4
  %87 = icmp ne i32 %86, 0
  %88 = xor i1 %87, true
  br i1 %88, label %89, label %122

89:                                               ; preds = %85
  %90 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 0
  %91 = load i32, i32* %8, align 4
  %92 = call i32 @poll(%struct.pollfd* %90, i32 %91, i32 -1)
  store i32 %92, i32* %6, align 4
  %93 = load i32, i32* %6, align 4
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %95, label %104

95:                                               ; preds = %89
  %96 = load i64, i64* @errno, align 8
  %97 = load i64, i64* @EINTR, align 8
  %98 = icmp eq i64 %96, %97
  br i1 %98, label %99, label %100

99:                                               ; preds = %95
  br label %85

100:                                              ; preds = %95
  %101 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %102 = load i32, i32* @EXIT_FAILURE, align 4
  %103 = call i32 @exit(i32 %102) #4
  unreachable

104:                                              ; preds = %89
  %105 = load i32, i32* %6, align 4
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %121

107:                                              ; preds = %104
  %108 = getelementptr inbounds [2 x %struct.pollfd], [2 x %struct.pollfd]* %9, i64 0, i64 1
  %109 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %108, i32 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = load i32, i32* @POLLIN, align 4
  %112 = and i32 %110, %111
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %107
  %115 = load i32, i32* %4, align 4
  %116 = load i32*, i32** %7, align 8
  %117 = load i32, i32* %10, align 4
  %118 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  %119 = call i32 @handle_events(i32 %115, i32* %116, i32 %117, i8** %118)
  br label %120

120:                                              ; preds = %114, %107
  br label %121

121:                                              ; preds = %120, %104
  br label %85

122:                                              ; preds = %85
  %123 = load i32, i32* %4, align 4
  %124 = call i32 @close(i32 %123)
  %125 = load i32*, i32** %7, align 8
  %126 = call i32 @free(i32* %125)
  %127 = load i32, i32* @EXIT_SUCCESS, align 4
  %128 = call i32 @exit(i32 %127) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @inotify_init1(i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @calloc(i32, i32) #2

declare dso_local i32 @inotify_add_watch(i32, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @poll(%struct.pollfd*, i32, i32) #2

declare dso_local i32 @handle_events(i32, i32*, i32, i8**) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @free(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
