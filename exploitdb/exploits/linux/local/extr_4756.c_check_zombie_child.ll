; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_4756.c_check_zombie_child.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_4756.c_check_zombie_child.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [34 x i8] c"KERNEL Oops. Exit Code = %d.(%s)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_zombie_child(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  %7 = call i32 @waitpid(i32 %6, i32* %4, i32 0)
  %8 = load i32, i32* %4, align 4
  %9 = call i64 @WIFEXITED(i32 %8)
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 4
  %13 = call i32 @WEXITSTATUS(i32 %12)
  %14 = icmp ne i32 %13, 255
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = call i32 @exit(i32 -1) #3
  unreachable

17:                                               ; preds = %11
  br label %32

18:                                               ; preds = %2
  %19 = load i32, i32* %4, align 4
  %20 = call i64 @WIFSIGNALED(i32 %19)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %31

22:                                               ; preds = %18
  %23 = load i32, i32* %4, align 4
  %24 = call i32 @WTERMSIG(i32 %23)
  %25 = load i32, i32* %4, align 4
  %26 = call i32 @WTERMSIG(i32 %25)
  %27 = call i8* @strsignal(i32 %26)
  %28 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 %24, i8* %27)
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @WTERMSIG(i32 %29)
  store i32 %30, i32* %3, align 4
  br label %32

31:                                               ; preds = %18
  br label %32

32:                                               ; preds = %22, %31, %17
  %33 = load i32, i32* %3, align 4
  ret i32 %33
}

declare dso_local i32 @waitpid(i32, i32*, i32) #1

declare dso_local i64 @WIFEXITED(i32) #1

declare dso_local i32 @WEXITSTATUS(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @WIFSIGNALED(i32) #1

declare dso_local i32 @printf(i8*, i32, i8*) #1

declare dso_local i32 @WTERMSIG(i32) #1

declare dso_local i8* @strsignal(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
