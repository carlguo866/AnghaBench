; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15285.c_send_message.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15285.c_send_message.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.iovec*, %struct.sockaddr_in*, %struct.TYPE_2__, i32, i32 }
%struct.iovec = type { i32, i64* }
%struct.TYPE_2__ = type { i32 }
%struct.msghdr = type { i32, i32, %struct.iovec*, %struct.msghdr*, %struct.TYPE_2__, i32, i32 }

@RECVPORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"[*] Something went wrong sending.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_message(i64 %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca %struct.msghdr, align 8
  %9 = alloca %struct.iovec, align 8
  %10 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  %11 = call i32 @memset(%struct.sockaddr_in* %7, i32 0, i32 40)
  store i32 40, i32* %5, align 4
  %12 = load i32, i32* @RECVPORT, align 4
  %13 = call i32 @htons(i32 %12)
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 6
  store i32 %13, i32* %14, align 8
  %15 = load i32, i32* @AF_INET, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 5
  store i32 %15, i32* %16, align 4
  %17 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 4
  %19 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %18, i32 0, i32 0
  store i32 %17, i32* %19, align 8
  %20 = bitcast %struct.msghdr* %8 to %struct.sockaddr_in*
  %21 = call i32 @memset(%struct.sockaddr_in* %20, i32 0, i32 40)
  %22 = bitcast %struct.sockaddr_in* %7 to %struct.msghdr*
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 3
  store %struct.msghdr* %22, %struct.msghdr** %23, align 8
  %24 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 0
  store i32 40, i32* %24, align 8
  %25 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 1
  store i32 1, i32* %25, align 4
  %26 = load i64, i64* %3, align 8
  store i64 %26, i64* %10, align 8
  %27 = getelementptr inbounds %struct.iovec, %struct.iovec* %9, i32 0, i32 0
  store i32 8, i32* %27, align 8
  %28 = getelementptr inbounds %struct.iovec, %struct.iovec* %9, i32 0, i32 1
  store i64* %10, i64** %28, align 8
  %29 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 2
  store %struct.iovec* %9, %struct.iovec** %29, align 8
  %30 = load i32, i32* %4, align 4
  %31 = bitcast %struct.msghdr* %8 to %struct.sockaddr_in*
  %32 = call i32 @sendmsg(i32 %30, %struct.sockaddr_in* %31, i32 0)
  store i32 %32, i32* %6, align 4
  %33 = load i32, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %2
  %36 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  %37 = call i32 @exit(i32 -1) #3
  unreachable

38:                                               ; preds = %2
  ret void
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @sendmsg(i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
