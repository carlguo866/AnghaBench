; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_send_fd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_send_fd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iovec = type { i8*, i32 }
%struct.msghdr = type { i32, i8*, i64, %struct.iovec* }
%struct.cmsghdr = type { i32, i32, i8* }

@SOL_SOCKET = common dso_local global i32 0, align 4
@SCM_RIGHTS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_fd(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1 x i8], align 1
  %7 = alloca %struct.iovec, align 8
  %8 = alloca %struct.msghdr, align 8
  %9 = alloca %struct.cmsghdr*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %14 = call i32 @CMSG_SPACE(i32 4)
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %11, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %12, align 8
  %18 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i64 0, i64 0
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i64 0, i64 0
  %20 = getelementptr inbounds %struct.iovec, %struct.iovec* %7, i32 0, i32 0
  store i8* %19, i8** %20, align 8
  %21 = getelementptr inbounds %struct.iovec, %struct.iovec* %7, i32 0, i32 1
  store i32 1, i32* %21, align 8
  %22 = call i32 @memset(%struct.msghdr* %8, i32 0, i32 32)
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 3
  store %struct.iovec* %7, %struct.iovec** %23, align 8
  %24 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 0
  store i32 1, i32* %24, align 8
  %25 = ptrtoint i8* %17 to i64
  %26 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 2
  store i64 %25, i64* %26, align 8
  %27 = call i8* @CMSG_LEN(i32 4)
  %28 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %8, i32 0, i32 1
  store i8* %27, i8** %28, align 8
  %29 = call %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.msghdr* %8)
  store %struct.cmsghdr* %29, %struct.cmsghdr** %9, align 8
  %30 = call i8* @CMSG_LEN(i32 4)
  %31 = load %struct.cmsghdr*, %struct.cmsghdr** %9, align 8
  %32 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %31, i32 0, i32 2
  store i8* %30, i8** %32, align 8
  %33 = load i32, i32* @SOL_SOCKET, align 4
  %34 = load %struct.cmsghdr*, %struct.cmsghdr** %9, align 8
  %35 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %34, i32 0, i32 1
  store i32 %33, i32* %35, align 4
  %36 = load i32, i32* @SCM_RIGHTS, align 4
  %37 = load %struct.cmsghdr*, %struct.cmsghdr** %9, align 8
  %38 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %37, i32 0, i32 0
  store i32 %36, i32* %38, align 8
  %39 = load %struct.cmsghdr*, %struct.cmsghdr** %9, align 8
  %40 = call i32 @CMSG_DATA(%struct.cmsghdr* %39)
  %41 = call i32 @memmove(i32 %40, i32* %5, i32 4)
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @sendmsg(i32 %42, %struct.msghdr* %8, i32 0)
  store i32 %43, i32* %10, align 4
  %44 = getelementptr inbounds %struct.iovec, %struct.iovec* %7, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp ne i32 %43, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %51

48:                                               ; preds = %2
  %49 = load i32, i32* %4, align 4
  %50 = call i32 @close(i32 %49)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %51

51:                                               ; preds = %48, %47
  %52 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %52)
  %53 = load i32, i32* %3, align 4
  ret i32 %53
}

declare dso_local i32 @CMSG_SPACE(i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @memset(%struct.msghdr*, i32, i32) #1

declare dso_local i8* @CMSG_LEN(i32) #1

declare dso_local %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.msghdr*) #1

declare dso_local i32 @memmove(i32, i32*, i32) #1

declare dso_local i32 @CMSG_DATA(%struct.cmsghdr*) #1

declare dso_local i32 @sendmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
