; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_detect_kernel.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_detect_kernel.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8*, i8* }
%struct.utsname = type { i8*, i32, i32 }

@DISTRO_CODENAME_LENGTH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"64\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"[-] system is not using a 64-bit kernel\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"-Ubuntu\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"[-] system is not using an Ubuntu kernel\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"14.04.1\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"trusty\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"16.04.1\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"xenial\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"qiana\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"rebecca\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"rafaela\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"rosa\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"sarah\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"serena\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"sonya\00", align 1
@kernels = common dso_local global %struct.TYPE_3__* null, align 8
@.str.15 = private unnamed_addr constant [34 x i8] c"[.] kernel version '%s' detected\0A\00", align 1
@kernel = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [35 x i8] c"[-] kernel version not recognized\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @detect_kernel() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.utsname, align 8
  %4 = alloca %struct.utsname, align 8
  %5 = alloca i32, align 4
  %6 = load i32, i32* @DISTRO_CODENAME_LENGTH, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %1, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %2, align 8
  %10 = call { i8*, i64 } (...) @get_kernel_version()
  %11 = bitcast %struct.utsname* %4 to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = extractvalue { i8*, i64 } %10, 0
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = extractvalue { i8*, i64 } %10, 1
  store i64 %15, i64* %14, align 8
  %16 = bitcast %struct.utsname* %3 to i8*
  %17 = bitcast %struct.utsname* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 16, i1 false)
  %18 = getelementptr inbounds %struct.utsname, %struct.utsname* %3, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = call i32* @strstr(i32 %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %0
  %23 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %24 = load i32, i32* @EXIT_FAILURE, align 4
  %25 = call i32 @exit(i32 %24) #5
  unreachable

26:                                               ; preds = %0
  %27 = getelementptr inbounds %struct.utsname, %struct.utsname* %3, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = call i32* @strstr(i32 %28, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %30 = icmp eq i32* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %26
  %32 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  %33 = load i32, i32* @EXIT_FAILURE, align 4
  %34 = call i32 @exit(i32 %33) #5
  unreachable

35:                                               ; preds = %26
  %36 = getelementptr inbounds %struct.utsname, %struct.utsname* %3, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = call i32* @strstr(i32 %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %39 = icmp ne i32* %38, null
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = getelementptr inbounds i8, i8* %9, i64 0
  %42 = call i32 @strcpy(i8* %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %105

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.utsname, %struct.utsname* %3, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = call i32* @strstr(i32 %45, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  %47 = icmp ne i32* %46, null
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %9, i64 0
  %50 = call i32 @strcpy(i8* %49, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %104

51:                                               ; preds = %43
  %52 = getelementptr inbounds i8, i8* %9, i64 0
  %53 = load i32, i32* @DISTRO_CODENAME_LENGTH, align 4
  %54 = call i32 @get_distro_codename(i8* %52, i32 %53)
  %55 = getelementptr inbounds i8, i8* %9, i64 0
  %56 = call i64 @strcmp(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0))
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %51
  %59 = getelementptr inbounds i8, i8* %9, i64 0
  %60 = call i32 @strcpy(i8* %59, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %61

61:                                               ; preds = %58, %51
  %62 = getelementptr inbounds i8, i8* %9, i64 0
  %63 = call i64 @strcmp(i8* %62, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8, i8* %9, i64 0
  %67 = call i32 @strcpy(i8* %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %68

68:                                               ; preds = %65, %61
  %69 = getelementptr inbounds i8, i8* %9, i64 0
  %70 = call i64 @strcmp(i8* %69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %9, i64 0
  %74 = call i32 @strcpy(i8* %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %75

75:                                               ; preds = %72, %68
  %76 = getelementptr inbounds i8, i8* %9, i64 0
  %77 = call i64 @strcmp(i8* %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds i8, i8* %9, i64 0
  %81 = call i32 @strcpy(i8* %80, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %82

82:                                               ; preds = %79, %75
  %83 = getelementptr inbounds i8, i8* %9, i64 0
  %84 = call i64 @strcmp(i8* %83, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0))
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds i8, i8* %9, i64 0
  %88 = call i32 @strcpy(i8* %87, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %89

89:                                               ; preds = %86, %82
  %90 = getelementptr inbounds i8, i8* %9, i64 0
  %91 = call i64 @strcmp(i8* %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8, i8* %9, i64 0
  %95 = call i32 @strcpy(i8* %94, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %96

96:                                               ; preds = %93, %89
  %97 = getelementptr inbounds i8, i8* %9, i64 0
  %98 = call i64 @strcmp(i8* %97, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0))
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds i8, i8* %9, i64 0
  %102 = call i32 @strcpy(i8* %101, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %103

103:                                              ; preds = %100, %96
  br label %104

104:                                              ; preds = %103, %48
  br label %105

105:                                              ; preds = %104, %40
  store i32 0, i32* %5, align 4
  br label %106

106:                                              ; preds = %143, %105
  %107 = load i32, i32* %5, align 4
  %108 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %109 = call i32 @ARRAY_SIZE(%struct.TYPE_3__* %108)
  %110 = icmp slt i32 %107, %109
  br i1 %110, label %111, label %146

111:                                              ; preds = %106
  %112 = getelementptr inbounds i8, i8* %9, i64 0
  %113 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %114 = load i32, i32* %5, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %113, i64 %115
  %117 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %116, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = call i64 @strcmp(i8* %112, i8* %118)
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %142

121:                                              ; preds = %111
  %122 = getelementptr inbounds %struct.utsname, %struct.utsname* %3, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %125 = load i32, i32* %5, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %124, i64 %126
  %128 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %127, i32 0, i32 1
  %129 = load i8*, i8** %128, align 8
  %130 = call i64 @strcmp(i8* %123, i8* %129)
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %142

132:                                              ; preds = %121
  %133 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %134 = load i32, i32* %5, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %133, i64 %135
  %137 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %136, i32 0, i32 1
  %138 = load i8*, i8** %137, align 8
  %139 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0), i8* %138)
  %140 = load i32, i32* %5, align 4
  store i32 %140, i32* @kernel, align 4
  %141 = load i8*, i8** %1, align 8
  call void @llvm.stackrestore(i8* %141)
  ret void

142:                                              ; preds = %121, %111
  br label %143

143:                                              ; preds = %142
  %144 = load i32, i32* %5, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %5, align 4
  br label %106

146:                                              ; preds = %106
  %147 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.16, i64 0, i64 0))
  %148 = load i32, i32* @EXIT_FAILURE, align 4
  %149 = call i32 @exit(i32 %148) #5
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local { i8*, i64 } @get_kernel_version(...) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32* @strstr(i32, i8*) #2

declare dso_local i32 @dprintf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @get_distro_codename(i8*, i32) #2

declare dso_local i64 @strcmp(i8*, i8*) #2

declare dso_local i32 @ARRAY_SIZE(%struct.TYPE_3__*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
