; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_create_netlink_candidate.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_create_netlink_candidate.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sock_pid = type { i32, i32 }
%struct.sockaddr_nl = type { i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_NETLINK = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NETLINK_USERSOCK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"[-] socket\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"[-] bind\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"[-] getsockname\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.sock_pid*)* @create_netlink_candidate to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @create_netlink_candidate(%struct.sock_pid* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.sock_pid*, align 8
  %4 = alloca %struct.sockaddr_nl, align 4
  %5 = alloca i64, align 8
  store %struct.sock_pid* %0, %struct.sock_pid** %3, align 8
  %6 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %4, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %4, i32 0, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %4, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %4, i32 0, i32 3
  %10 = load i32, i32* @AF_NETLINK, align 4
  store i32 %10, i32* %9, align 4
  store i64 16, i64* %5, align 8
  %11 = load i32, i32* @AF_NETLINK, align 4
  %12 = load i32, i32* @SOCK_DGRAM, align 4
  %13 = load i32, i32* @NETLINK_USERSOCK, align 4
  %14 = call i32 @_socket(i32 %11, i32 %12, i32 %13)
  %15 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %16 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %15, i32 0, i32 0
  store i32 %14, i32* %16, align 4
  %17 = icmp eq i32 %14, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %1
  %19 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  br label %47

20:                                               ; preds = %1
  %21 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %22 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = bitcast %struct.sockaddr_nl* %4 to %struct.sockaddr*
  %25 = call i32 @_bind(i32 %23, %struct.sockaddr* %24, i32 16)
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %29

27:                                               ; preds = %20
  %28 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  br label %42

29:                                               ; preds = %20
  %30 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %31 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = call i64 @_getsockname(i32 %32, %struct.sockaddr_nl* %4, i64* %5)
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  br label %42

37:                                               ; preds = %29
  %38 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %4, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %41 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %40, i32 0, i32 1
  store i32 %39, i32* %41, align 4
  store i32 0, i32* %2, align 4
  br label %52

42:                                               ; preds = %35, %27
  %43 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %44 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = call i32 @close(i32 %45)
  br label %47

47:                                               ; preds = %42, %18
  %48 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %49 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %48, i32 0, i32 0
  store i32 -1, i32* %49, align 4
  %50 = load %struct.sock_pid*, %struct.sock_pid** %3, align 8
  %51 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %50, i32 0, i32 1
  store i32 -1, i32* %51, align 4
  store i32 -1, i32* %2, align 4
  br label %52

52:                                               ; preds = %47, %37
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

declare dso_local i32 @_socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @_bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @_getsockname(i32, %struct.sockaddr_nl*, i64*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
