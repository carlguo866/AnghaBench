; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_socket_sendmmsg.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_socket_sendmmsg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mmsghdr = type { %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i8*, i32, i8*, i32, i64 }

@.str = private unnamed_addr constant [5 x i8] c"root\00", align 1
@__NR_sendmmsg = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINVAL = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"[-] sendmmsg()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @socket_sendmmsg(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [1 x %struct.mmsghdr], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %7 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %8 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %8, i32 0, i32 4
  store i64 0, i64* %9, align 16
  %10 = load i8*, i8** %4, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 0
  %12 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %13 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %12, i32 0, i32 0
  %14 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %13, i32 0, i32 0
  store i8* %11, i8** %14, align 16
  %15 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %16 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %16, i32 0, i32 1
  store i32 2048, i32* %17, align 8
  %18 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %19 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 2
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %20, align 16
  %21 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %22 = getelementptr inbounds %struct.mmsghdr, %struct.mmsghdr* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 3
  store i32 1, i32* %23, align 8
  %24 = load i32, i32* @__NR_sendmmsg, align 4
  %25 = load i32, i32* %3, align 4
  %26 = getelementptr inbounds [1 x %struct.mmsghdr], [1 x %struct.mmsghdr]* %5, i64 0, i64 0
  %27 = call i32 @syscall(i32 %24, i32 %25, %struct.mmsghdr* %26, i32 1, i32 0)
  store i32 %27, i32* %6, align 4
  %28 = load i32, i32* %6, align 4
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %38

30:                                               ; preds = %2
  %31 = load i64, i64* @errno, align 8
  %32 = load i64, i64* @EINVAL, align 8
  %33 = icmp ne i64 %31, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %36 = load i32, i32* @EXIT_FAILURE, align 4
  %37 = call i32 @exit(i32 %36) #3
  unreachable

38:                                               ; preds = %30, %2
  ret void
}

declare dso_local i32 @syscall(i32, i32, %struct.mmsghdr*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
