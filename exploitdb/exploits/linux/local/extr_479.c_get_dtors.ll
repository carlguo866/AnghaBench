; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_479.c_get_dtors.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_479.c_get_dtors.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"/tmp/candyXXXXXX\00", align 1
@GET_DTORS_CMD = common dso_local global i8* null, align 8
@SHAR_PATH = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [49 x i8] c"[+]Utilities check successful, no Need Defaults\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"[+]Using default .Dtors address\0A\00", align 1
@DEFAULT_DTORS_SHAR = common dso_local global i32 0, align 4
@DEFAULT_DTORS_UNSHAR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [26 x i8] c"[+]Dtors address => 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [32 x i8] c"[+]Dtors address found => 0x%x\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_dtors(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca [32 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  store i8* null, i8** %11, align 8
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %15 = call i32 @bzero(i8* %14, i32 32)
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %17 = call i32 @strlen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 @strncpy(i8* %16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %17)
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %20 = call i64 @mkstemp(i8* %19)
  %21 = inttoptr i64 %20 to i32*
  store i32* %21, i32** %4, align 8
  %22 = call i64 @malloc(i32 800)
  %23 = inttoptr i64 %22 to i8*
  store i8* %23, i8** %12, align 8
  %24 = load i8*, i8** %12, align 8
  %25 = call i32 @bzero(i8* %24, i32 8)
  %26 = load i8*, i8** %12, align 8
  %27 = load i8*, i8** @GET_DTORS_CMD, align 8
  %28 = load i8*, i8** %2, align 8
  %29 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %30 = call i32 @snprintf(i8* %26, i32 100, i8* %27, i8* %28, i8* %29)
  %31 = load i8*, i8** %12, align 8
  %32 = load i8*, i8** %12, align 8
  %33 = call i32 @strlen(i8* %32)
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %31, i64 %34
  store i8 0, i8* %35, align 1
  %36 = load i8*, i8** @SHAR_PATH, align 8
  store i8* %36, i8** %13, align 8
  %37 = load i8*, i8** %12, align 8
  %38 = call i32 @system(i8* %37)
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %7, align 4
  %40 = ashr i32 %39, 8
  %41 = and i32 %40, 255
  switch i32 %41, label %57 [
    i32 0, label %42
    i32 1, label %45
  ]

42:                                               ; preds = %1
  %43 = load i32, i32* @stdout, align 4
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0))
  br label %72

45:                                               ; preds = %1
  %46 = load i32, i32* @stdout, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  %48 = load i8*, i8** %2, align 8
  %49 = load i8*, i8** %13, align 8
  %50 = icmp eq i8* %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  %52 = load i32, i32* @DEFAULT_DTORS_SHAR, align 4
  br label %55

53:                                               ; preds = %45
  %54 = load i32, i32* @DEFAULT_DTORS_UNSHAR, align 4
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i32 [ %52, %51 ], [ %54, %53 ]
  store i32 %56, i32* %10, align 4
  br label %113

57:                                               ; preds = %1
  %58 = load i32, i32* @stdout, align 4
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %58, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  %60 = load i32, i32* @stdout, align 4
  %61 = load i32, i32* @DEFAULT_DTORS_SHAR, align 4
  %62 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i32 %61)
  %63 = load i8*, i8** %2, align 8
  %64 = load i8*, i8** %13, align 8
  %65 = icmp eq i8* %63, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %57
  %67 = load i32, i32* @DEFAULT_DTORS_SHAR, align 4
  br label %70

68:                                               ; preds = %57
  %69 = load i32, i32* @DEFAULT_DTORS_UNSHAR, align 4
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi i32 [ %67, %66 ], [ %69, %68 ]
  store i32 %71, i32* %10, align 4
  br label %113

72:                                               ; preds = %42
  %73 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %74 = call i32* @fopen(i8* %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  store i32* %74, i32** %3, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %76, label %90

76:                                               ; preds = %72
  %77 = load i32, i32* @errno, align 4
  %78 = call i32 @strerror(i32 %77)
  %79 = load i32, i32* @stdout, align 4
  %80 = call i32 (i32, i8*, ...) @fprintf(i32 %79, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  %81 = load i8*, i8** %2, align 8
  %82 = load i8*, i8** %13, align 8
  %83 = icmp eq i8* %81, %82
  br i1 %83, label %84, label %86

84:                                               ; preds = %76
  %85 = load i32, i32* @DEFAULT_DTORS_SHAR, align 4
  br label %88

86:                                               ; preds = %76
  %87 = load i32, i32* @DEFAULT_DTORS_UNSHAR, align 4
  br label %88

88:                                               ; preds = %86, %84
  %89 = phi i32 [ %85, %84 ], [ %87, %86 ]
  store i32 %89, i32* %10, align 4
  br label %113

90:                                               ; preds = %72
  %91 = load i32*, i32** %3, align 8
  %92 = call i32 @getline(i8** %11, i32* %8, i32* %91)
  store i32 %92, i32* %9, align 4
  %93 = load i32*, i32** %3, align 8
  %94 = call i32 @fflush(i32* %93)
  %95 = load i8*, i8** %11, align 8
  %96 = load i8*, i8** %11, align 8
  %97 = call i32 @strlen(i8* %96)
  %98 = sub nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  store i8 0, i8* %100, align 1
  %101 = load i8*, i8** %11, align 8
  %102 = call i32 @strtoul(i8* %101, i8** %6, i32 16)
  store i32 %102, i32* %10, align 4
  %103 = load i32*, i32** %3, align 8
  %104 = call i32 @fclose(i32* %103)
  %105 = load i8*, i8** %11, align 8
  %106 = call i32 @free(i8* %105)
  %107 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %108 = call i32 @unlink(i8* %107)
  %109 = load i32, i32* @stdout, align 4
  %110 = load i32, i32* %10, align 4
  %111 = add nsw i32 %110, 4
  %112 = call i32 (i32, i8*, ...) @fprintf(i32 %109, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 %111)
  br label %113

113:                                              ; preds = %90, %88, %70, %55
  %114 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %115 = call i32 @unlink(i8* %114)
  %116 = load i32, i32* %10, align 4
  %117 = add nsw i32 %116, 4
  ret i32 %117
}

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @mkstemp(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @strerror(i32) #1

declare dso_local i32 @getline(i8**, i32*, i32*) #1

declare dso_local i32 @fflush(i32*) #1

declare dso_local i32 @strtoul(i8*, i8**, i32) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @unlink(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
