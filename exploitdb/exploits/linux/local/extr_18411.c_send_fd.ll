; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_send_fd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_send_fd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iovec = type { i8*, i32 }
%struct.msghdr = type { i32, i8*, i64, %struct.iovec*, i32, i32 }
%struct.cmsghdr = type { i32, i32, i8* }
%struct.sockaddr_un = type { i32, i8*, i64, %struct.iovec*, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@socket_path = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SCM_RIGHTS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_fd(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1 x i8], align 1
  %5 = alloca %struct.iovec, align 8
  %6 = alloca %struct.msghdr, align 8
  %7 = alloca %struct.cmsghdr*, align 8
  %8 = alloca %struct.sockaddr_un, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %14 = call i32 @CMSG_SPACE(i32 4)
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %11, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %12, align 8
  %18 = load i32, i32* @AF_UNIX, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = call i32 @socket(i32 %18, i32 %19, i32 0)
  store i32 %20, i32* %10, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %13, align 4
  br label %73

23:                                               ; preds = %1
  %24 = call i32 @memset(%struct.sockaddr_un* %8, i32 0, i32 40)
  %25 = load i32, i32* @AF_UNIX, align 4
  %26 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %8, i32 0, i32 5
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %8, i32 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = load i32, i32* @socket_path, align 4
  %30 = call i32 @strncpy(i32 %28, i32 %29, i32 3)
  %31 = load i32, i32* %10, align 4
  %32 = bitcast %struct.sockaddr_un* %8 to %struct.sockaddr*
  %33 = call i64 @connect(i32 %31, %struct.sockaddr* %32, i32 40)
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %23
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %13, align 4
  br label %73

36:                                               ; preds = %23
  %37 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %39 = getelementptr inbounds %struct.iovec, %struct.iovec* %5, i32 0, i32 0
  store i8* %38, i8** %39, align 8
  %40 = getelementptr inbounds %struct.iovec, %struct.iovec* %5, i32 0, i32 1
  store i32 1, i32* %40, align 8
  %41 = bitcast %struct.msghdr* %6 to %struct.sockaddr_un*
  %42 = call i32 @memset(%struct.sockaddr_un* %41, i32 0, i32 40)
  %43 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %6, i32 0, i32 3
  store %struct.iovec* %5, %struct.iovec** %43, align 8
  %44 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %6, i32 0, i32 0
  store i32 1, i32* %44, align 8
  %45 = ptrtoint i8* %17 to i64
  %46 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %6, i32 0, i32 2
  store i64 %45, i64* %46, align 8
  %47 = call i8* @CMSG_LEN(i32 4)
  %48 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %6, i32 0, i32 1
  store i8* %47, i8** %48, align 8
  %49 = bitcast %struct.msghdr* %6 to %struct.sockaddr_un*
  %50 = call %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.sockaddr_un* %49)
  store %struct.cmsghdr* %50, %struct.cmsghdr** %7, align 8
  %51 = call i8* @CMSG_LEN(i32 4)
  %52 = load %struct.cmsghdr*, %struct.cmsghdr** %7, align 8
  %53 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %52, i32 0, i32 2
  store i8* %51, i8** %53, align 8
  %54 = load i32, i32* @SOL_SOCKET, align 4
  %55 = load %struct.cmsghdr*, %struct.cmsghdr** %7, align 8
  %56 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %55, i32 0, i32 1
  store i32 %54, i32* %56, align 4
  %57 = load i32, i32* @SCM_RIGHTS, align 4
  %58 = load %struct.cmsghdr*, %struct.cmsghdr** %7, align 8
  %59 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %58, i32 0, i32 0
  store i32 %57, i32* %59, align 8
  %60 = load %struct.cmsghdr*, %struct.cmsghdr** %7, align 8
  %61 = call i32 @CMSG_DATA(%struct.cmsghdr* %60)
  %62 = call i32 @memmove(i32 %61, i32* %3, i32 4)
  %63 = load i32, i32* %10, align 4
  %64 = bitcast %struct.msghdr* %6 to %struct.sockaddr_un*
  %65 = call i32 @sendmsg(i32 %63, %struct.sockaddr_un* %64, i32 0)
  store i32 %65, i32* %9, align 4
  %66 = getelementptr inbounds %struct.iovec, %struct.iovec* %5, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp ne i32 %65, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %36
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %13, align 4
  br label %73

70:                                               ; preds = %36
  %71 = load i32, i32* %10, align 4
  %72 = call i32 @close(i32 %71)
  store i32 0, i32* %2, align 4
  store i32 1, i32* %13, align 4
  br label %73

73:                                               ; preds = %70, %69, %35, %22
  %74 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %74)
  %75 = load i32, i32* %2, align 4
  ret i32 %75
}

declare dso_local i32 @CMSG_SPACE(i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_un*, i32, i32) #1

declare dso_local i32 @strncpy(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i8* @CMSG_LEN(i32) #1

declare dso_local %struct.cmsghdr* @CMSG_FIRSTHDR(%struct.sockaddr_un*) #1

declare dso_local i32 @memmove(i32, i32*, i32) #1

declare dso_local i32 @CMSG_DATA(%struct.cmsghdr*) #1

declare dso_local i32 @sendmsg(i32, %struct.sockaddr_un*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
