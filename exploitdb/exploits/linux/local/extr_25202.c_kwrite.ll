; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25202.c_kwrite.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25202.c_kwrite.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.epoll_event = type { i32, i32 }

@EPOLLIN = common dso_local global i32 0, align 4
@EPOLLOUT = common dso_local global i32 0, align 4
@EPOLLPRI = common dso_local global i32 0, align 4
@EPOLLERR = common dso_local global i32 0, align 4
@EPOLLHUP = common dso_local global i32 0, align 4
@RES = common dso_local global i32 0, align 4
@DIV = common dso_local global i32 0, align 4
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"a\00", align 1
@EPOLL_CTL_ADD = common dso_local global i32 0, align 4
@EPOLL_CTL_MOD = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @kwrite(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [2 x i32], align 4
  %13 = alloca %struct.epoll_event, align 4
  %14 = alloca i32*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 357913942, i32* %17, align 4
  %19 = call i32 @epoll_create(i32 4096)
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %8, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %184

23:                                               ; preds = %3
  %24 = load i32, i32* @EPOLLIN, align 4
  %25 = load i32, i32* @EPOLLOUT, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @EPOLLPRI, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @EPOLLERR, align 4
  %30 = or i32 %28, %29
  %31 = load i32, i32* @EPOLLHUP, align 4
  %32 = or i32 %30, %31
  %33 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %13, i32 0, i32 0
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %7, align 4
  %35 = add nsw i32 %34, 11
  %36 = sdiv i32 %35, 12
  %37 = load i32, i32* @RES, align 4
  %38 = add nsw i32 %36, %37
  store i32 %38, i32* %16, align 4
  %39 = load i32, i32* %16, align 4
  %40 = load i32, i32* @DIV, align 4
  %41 = add nsw i32 %39, %40
  %42 = sub nsw i32 %41, 1
  %43 = load i32, i32* @DIV, align 4
  %44 = sdiv i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = mul i64 %45, 4
  %47 = trunc i64 %46 to i32
  %48 = call i32* @alloca(i32 %47)
  store i32* %48, i32** %14, align 8
  store i32 0, i32* %10, align 4
  br label %49

49:                                               ; preds = %76, %23
  %50 = load i32, i32* %10, align 4
  %51 = load i32, i32* %16, align 4
  %52 = load i32, i32* @DIV, align 4
  %53 = add nsw i32 %51, %52
  %54 = sub nsw i32 %53, 1
  %55 = load i32, i32* @DIV, align 4
  %56 = sdiv i32 %54, %55
  %57 = add nsw i32 %56, 1
  %58 = icmp slt i32 %50, %57
  br i1 %58, label %59, label %79

59:                                               ; preds = %49
  %60 = load i32, i32* @AF_UNIX, align 4
  %61 = load i32, i32* @SOCK_DGRAM, align 4
  %62 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  %63 = call i64 @socketpair(i32 %60, i32 %61, i32 0, i32* %62)
  %64 = icmp slt i64 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %59
  store i32 -1, i32* %4, align 4
  br label %184

66:                                               ; preds = %59
  %67 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 @send(i32 %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i32 1, i32 0)
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = load i32*, i32** %14, align 8
  %73 = load i32, i32* %10, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  store i32 %71, i32* %75, align 4
  br label %76

76:                                               ; preds = %66
  %77 = load i32, i32* %10, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %10, align 4
  br label %49

79:                                               ; preds = %49
  %80 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %11, align 4
  %82 = load i32, i32* %8, align 4
  %83 = load i32, i32* @EPOLL_CTL_ADD, align 4
  %84 = load i32, i32* %11, align 4
  %85 = call i32 @epoll_ctl(i32 %82, i32 %83, i32 %84, %struct.epoll_event* %13)
  store i32 0, i32* %10, align 4
  store i32 0, i32* %9, align 4
  br label %86

86:                                               ; preds = %116, %79
  %87 = load i32, i32* %10, align 4
  %88 = load i32, i32* %16, align 4
  %89 = sub nsw i32 %88, 1
  %90 = icmp slt i32 %87, %89
  br i1 %90, label %91, label %119

91:                                               ; preds = %86
  %92 = load i32*, i32** %14, align 8
  %93 = load i32, i32* %10, align 4
  %94 = load i32, i32* @DIV, align 4
  %95 = sdiv i32 %93, %94
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %92, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = load i32, i32* %11, align 4
  %100 = add nsw i32 %99, 2
  %101 = load i32, i32* %10, align 4
  %102 = load i32, i32* @DIV, align 4
  %103 = srem i32 %101, %102
  %104 = add nsw i32 %100, %103
  %105 = call i32 @dup2(i32 %98, i32 %104)
  store i32 %105, i32* %18, align 4
  %106 = load i32, i32* %18, align 4
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %91
  store i32 -1, i32* %4, align 4
  br label %184

109:                                              ; preds = %91
  %110 = load i32, i32* %8, align 4
  %111 = load i32, i32* @EPOLL_CTL_ADD, align 4
  %112 = load i32, i32* %18, align 4
  %113 = call i32 @epoll_ctl(i32 %110, i32 %111, i32 %112, %struct.epoll_event* %13)
  %114 = load i32, i32* %18, align 4
  %115 = call i32 @close(i32 %114)
  br label %116

116:                                              ; preds = %109
  %117 = load i32, i32* %10, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %10, align 4
  br label %86

119:                                              ; preds = %86
  store i32 0, i32* %10, align 4
  br label %120

120:                                              ; preds = %167, %119
  %121 = load i32, i32* %10, align 4
  %122 = load i32, i32* %7, align 4
  %123 = add nsw i32 %122, 7
  %124 = sdiv i32 %123, 8
  %125 = icmp slt i32 %121, %124
  br i1 %125, label %126, label %170

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %13, i32 0, i32 1
  %128 = load i8*, i8** %6, align 8
  %129 = load i32, i32* %7, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %128, i64 %130
  %132 = getelementptr inbounds i8, i8* %131, i64 -8
  %133 = load i32, i32* %10, align 4
  %134 = mul nsw i32 %133, 8
  %135 = sext i32 %134 to i64
  %136 = sub i64 0, %135
  %137 = getelementptr inbounds i8, i8* %132, i64 %136
  %138 = call i32 @memcpy(i32* %127, i8* %137, i32 8)
  %139 = load i32, i32* %8, align 4
  %140 = load i32, i32* @EPOLL_CTL_MOD, align 4
  %141 = load i32, i32* %11, align 4
  %142 = call i32 @epoll_ctl(i32 %139, i32 %140, i32 %141, %struct.epoll_event* %13)
  %143 = load i32, i32* %5, align 4
  %144 = load i32, i32* %7, align 4
  %145 = add i32 %143, %144
  %146 = load i32, i32* %10, align 4
  %147 = mul nsw i32 %146, 8
  %148 = sub i32 %145, %147
  %149 = load i32, i32* %16, align 4
  %150 = mul nsw i32 %149, 12
  %151 = sub i32 %148, %150
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %15, align 8
  %153 = load i32, i32* %8, align 4
  %154 = load i64, i64* %15, align 8
  %155 = inttoptr i64 %154 to i8*
  %156 = load i32, i32* %17, align 4
  %157 = call i32 @epoll_wait(i32 %153, i8* %155, i32 %156, i32 31337)
  %158 = load i32, i32* %10, align 4
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %160, label %166

160:                                              ; preds = %126
  %161 = load i32, i32* %8, align 4
  %162 = load i64, i64* %15, align 8
  %163 = inttoptr i64 %162 to i8*
  %164 = load i32, i32* %17, align 4
  %165 = call i32 @epoll_wait(i32 %161, i8* %163, i32 %164, i32 31337)
  br label %166

166:                                              ; preds = %160, %126
  br label %167

167:                                              ; preds = %166
  %168 = load i32, i32* %10, align 4
  %169 = add nsw i32 %168, 1
  store i32 %169, i32* %10, align 4
  br label %120

170:                                              ; preds = %120
  %171 = load i32, i32* %8, align 4
  %172 = call i32 @close(i32 %171)
  store i32 3, i32* %10, align 4
  br label %173

173:                                              ; preds = %180, %170
  %174 = load i32, i32* %10, align 4
  %175 = load i32, i32* %11, align 4
  %176 = icmp sle i32 %174, %175
  br i1 %176, label %177, label %183

177:                                              ; preds = %173
  %178 = load i32, i32* %10, align 4
  %179 = call i32 @close(i32 %178)
  br label %180

180:                                              ; preds = %177
  %181 = load i32, i32* %10, align 4
  %182 = add nsw i32 %181, 1
  store i32 %182, i32* %10, align 4
  br label %173

183:                                              ; preds = %173
  store i32 0, i32* %4, align 4
  br label %184

184:                                              ; preds = %183, %108, %65, %22
  %185 = load i32, i32* %4, align 4
  ret i32 %185
}

declare dso_local i32 @epoll_create(i32) #1

declare dso_local i32* @alloca(i32) #1

declare dso_local i64 @socketpair(i32, i32, i32, i32*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @epoll_ctl(i32, i32, i32, %struct.epoll_event*) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

declare dso_local i32 @epoll_wait(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
