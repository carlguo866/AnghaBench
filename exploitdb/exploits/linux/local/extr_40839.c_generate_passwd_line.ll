; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_generate_passwd_line.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_generate_passwd_line.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Userinfo = type { i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [22 x i8] c"%s:%s:%d:%d:%s:%s:%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @generate_passwd_line(%struct.Userinfo* byval(%struct.Userinfo) align 8 %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = call i32 @snprintf(i32* null, i32 0, i8* %5, i32 %7, i32 %9, i32 %11, i32 %13, i32 %15, i32 %17, i32 %19)
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = add nsw i32 %21, 1
  %23 = call i8* @malloc(i32 %22)
  store i8* %23, i8** %4, align 8
  %24 = load i8*, i8** %4, align 8
  %25 = load i8*, i8** %2, align 8
  %26 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 6
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 5
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = call i32 @sprintf(i8* %24, i8* %25, i32 %27, i32 %29, i32 %31, i32 %33, i32 %35, i32 %37, i32 %39)
  %41 = load i8*, i8** %4, align 8
  ret i8* %41
}

declare dso_local i32 @snprintf(i32*, i32, i8*, i32, i32, i32, i32, i32, i32, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32, i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
