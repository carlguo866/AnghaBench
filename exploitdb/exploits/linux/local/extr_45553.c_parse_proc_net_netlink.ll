; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_parse_proc_net_netlink.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_parse_proc_net_netlink.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"[-] not enough memory\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"/proc/net/netlink\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"[-] open\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"[-] read\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"sk\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"[-] can't find end of first line\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [10 x i8] c"[-] lseek\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"%p %d %d\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"[-] not enough memory\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32**, i64*, i32)* @parse_proc_net_netlink to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @parse_proc_net_netlink(i32** %0, i64* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32**, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [4096 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32** %0, i32*** %5, align 8
  store i64* %1, i64** %6, align 8
  store i32 %2, i32* %7, align 4
  store i64 0, i64* %13, align 8
  store i64 1024, i64* %14, align 8
  %18 = load i32**, i32*** %5, align 8
  store i32* null, i32** %18, align 8
  %19 = load i64*, i64** %6, align 8
  store i64 0, i64* %19, align 8
  %20 = load i64, i64* %14, align 8
  %21 = call i32* @calloc(i64 %20, i32 4)
  %22 = load i32**, i32*** %5, align 8
  store i32* %21, i32** %22, align 8
  %23 = icmp eq i32* %21, null
  br i1 %23, label %24, label %26

24:                                               ; preds = %3
  %25 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %135

26:                                               ; preds = %3
  %27 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %28 = call i32 @memset(i8* %27, i32 0, i32 4096)
  %29 = load i32, i32* @O_RDONLY, align 4
  %30 = call i32 @_open(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 %29)
  store i32 %30, i32* %8, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %135

34:                                               ; preds = %26
  br label %35

35:                                               ; preds = %82, %34
  %36 = load i32, i32* %8, align 4
  %37 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %38 = call i32 @_read(i32 %36, i8* %37, i32 4096)
  store i32 %38, i32* %10, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  br label %132

42:                                               ; preds = %35
  %43 = load i32, i32* %10, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  br label %129

46:                                               ; preds = %42
  br label %47

47:                                               ; preds = %46
  %48 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  store i8* %48, i8** %11, align 8
  %49 = load i8*, i8** %11, align 8
  %50 = call i8* @strstr(i8* %49, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %69

52:                                               ; preds = %47
  %53 = load i8*, i8** %11, align 8
  %54 = call i8* @strstr(i8* %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i8* %54, i8** %12, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  br label %132

58:                                               ; preds = %52
  %59 = load i8*, i8** %12, align 8
  %60 = load i8*, i8** %11, align 8
  %61 = ptrtoint i8* %59 to i64
  %62 = ptrtoint i8* %60 to i64
  %63 = sub i64 %61, %62
  %64 = add nsw i64 %63, 1
  %65 = load i64, i64* %13, align 8
  %66 = add i64 %65, %64
  store i64 %66, i64* %13, align 8
  %67 = load i8*, i8** %12, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %68, i8** %11, align 8
  br label %69

69:                                               ; preds = %58, %47
  br label %70

70:                                               ; preds = %118, %69
  %71 = load i8*, i8** %11, align 8
  %72 = call i8* @strstr(i8* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i8* %72, i8** %12, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %74, label %83

74:                                               ; preds = %70
  %75 = load i32, i32* %8, align 4
  %76 = load i64, i64* %13, align 8
  %77 = load i32, i32* @SEEK_SET, align 4
  %78 = call i32 @_lseek(i32 %75, i64 %76, i32 %77)
  %79 = icmp eq i32 %78, -1
  br i1 %79, label %80, label %82

80:                                               ; preds = %74
  %81 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  br label %132

82:                                               ; preds = %74
  br label %35

83:                                               ; preds = %70
  %84 = load i8*, i8** %11, align 8
  %85 = call i32 @sscanf(i8* %84, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i8** %15, i32* %16, i32* %17)
  %86 = load i32, i32* %16, align 4
  %87 = load i32, i32* %7, align 4
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %89, label %118

89:                                               ; preds = %83
  %90 = load i64*, i64** %6, align 8
  %91 = load i64, i64* %90, align 8
  %92 = load i64, i64* %14, align 8
  %93 = icmp uge i64 %91, %92
  br i1 %93, label %94, label %107

94:                                               ; preds = %89
  %95 = load i64, i64* %14, align 8
  %96 = mul i64 %95, 2
  store i64 %96, i64* %14, align 8
  %97 = load i32**, i32*** %5, align 8
  %98 = load i32*, i32** %97, align 8
  %99 = load i64, i64* %14, align 8
  %100 = mul i64 %99, 4
  %101 = call i32* @realloc(i32* %98, i64 %100)
  %102 = load i32**, i32*** %5, align 8
  store i32* %101, i32** %102, align 8
  %103 = icmp eq i32* %101, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %94
  %105 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0))
  br label %132

106:                                              ; preds = %94
  br label %107

107:                                              ; preds = %106, %89
  %108 = load i32, i32* %17, align 4
  %109 = load i32**, i32*** %5, align 8
  %110 = load i32*, i32** %109, align 8
  %111 = load i64*, i64** %6, align 8
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds i32, i32* %110, i64 %112
  store i32 %108, i32* %113, align 4
  %114 = load i64*, i64** %6, align 8
  %115 = load i64, i64* %114, align 8
  %116 = add i64 %115, 1
  %117 = load i64*, i64** %6, align 8
  store i64 %116, i64* %117, align 8
  br label %118

118:                                              ; preds = %107, %83
  %119 = load i8*, i8** %12, align 8
  %120 = load i8*, i8** %11, align 8
  %121 = ptrtoint i8* %119 to i64
  %122 = ptrtoint i8* %120 to i64
  %123 = sub i64 %121, %122
  %124 = add nsw i64 %123, 1
  %125 = load i64, i64* %13, align 8
  %126 = add i64 %125, %124
  store i64 %126, i64* %13, align 8
  %127 = load i8*, i8** %12, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8* %128, i8** %11, align 8
  br label %70

129:                                              ; preds = %45
  %130 = load i32, i32* %8, align 4
  %131 = call i32 @close(i32 %130)
  store i32 0, i32* %4, align 4
  br label %145

132:                                              ; preds = %104, %80, %56, %40
  %133 = load i32, i32* %8, align 4
  %134 = call i32 @close(i32 %133)
  br label %135

135:                                              ; preds = %132, %32, %24
  %136 = load i32**, i32*** %5, align 8
  %137 = load i32*, i32** %136, align 8
  %138 = icmp ne i32* %137, null
  br i1 %138, label %139, label %143

139:                                              ; preds = %135
  %140 = load i32**, i32*** %5, align 8
  %141 = load i32*, i32** %140, align 8
  %142 = call i32 @free(i32* %141)
  br label %143

143:                                              ; preds = %139, %135
  %144 = load i64*, i64** %6, align 8
  store i64 0, i64* %144, align 8
  store i32 -1, i32* %4, align 4
  br label %145

145:                                              ; preds = %143, %129
  %146 = load i32, i32* %4, align 4
  ret i32 %146
}

declare dso_local i32* @calloc(i64, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @_open(i8*, i32) #1

declare dso_local i32 @_read(i32, i8*, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @_lseek(i32, i64, i32) #1

declare dso_local i32 @sscanf(i8*, i8*, i8**, i32*, i32*) #1

declare dso_local i32* @realloc(i32*, i64) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
