; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_nvidia_fd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_nvidia_fd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dirent = type { i8* }

@.str = private unnamed_addr constant [28 x i8] c"/sys/bus/pci/drivers/nvidia\00", align 1
@dirfilter = common dso_local global i32 0, align 4
@versionsort = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [40 x i8] c"/sys/bus/pci/drivers/nvidia/%s/resource\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"/dev/nvidia0\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"COULD NOT DO SUPER SECRET HACKING STUFF, YOU ARE ON YOUR OWN!\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32*)* @nvidia_fd to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @nvidia_fd(i32* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca %struct.dirent**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [256 x i8], align 16
  store i32* %0, i32** %3, align 8
  %9 = load i32, i32* @dirfilter, align 4
  %10 = load i32, i32* @versionsort, align 4
  %11 = call i32 @scandir(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), %struct.dirent*** %4, i32 %9, i32 %10)
  store i32 %11, i32* %7, align 4
  %12 = load i32, i32* %7, align 4
  %13 = icmp sle i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  br label %44

15:                                               ; preds = %1
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %17 = load %struct.dirent**, %struct.dirent*** %4, align 8
  %18 = getelementptr inbounds %struct.dirent*, %struct.dirent** %17, i64 0
  %19 = load %struct.dirent*, %struct.dirent** %18, align 8
  %20 = getelementptr inbounds %struct.dirent, %struct.dirent* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @sprintf(i8* %16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %24 = load i32, i32* @O_RDONLY, align 4
  %25 = call i32 @open(i8* %23, i32 %24)
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %6, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %15
  br label %44

29:                                               ; preds = %15
  %30 = load i32, i32* %6, align 4
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %32 = call i32 @read(i32 %30, i8* %31, i32 256)
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %34 = call i32 @strtoll(i8* %33, i32* null, i32 16)
  %35 = load i32*, i32** %3, align 8
  store i32 %34, i32* %35, align 4
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @close(i32 %36)
  %38 = load i32, i32* @O_RDWR, align 4
  %39 = call i32 @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 %38)
  store i32 %39, i32* %5, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %29
  br label %44

42:                                               ; preds = %29
  %43 = load i32, i32* %5, align 4
  store i32 %43, i32* %2, align 4
  br label %47

44:                                               ; preds = %41, %28, %14
  %45 = call i32 @perror(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0))
  %46 = load i32*, i32** %3, align 8
  store i32 0, i32* %46, align 4
  store i32 -1, i32* %2, align 4
  br label %47

47:                                               ; preds = %44, %42
  %48 = load i32, i32* %2, align 4
  ret i32 %48
}

declare dso_local i32 @scandir(i8*, %struct.dirent***, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @strtoll(i8*, i32*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
