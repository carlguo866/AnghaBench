; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22729.c_setlang.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22729.c_setlang.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.passwd = type { i8* }

@.str = private unnamed_addr constant [37 x i8] c"passwd entry doesn't appear to exist\00", align 1
@LANG_NAME = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"setlang(): allocating memory failed\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"%s/mess.%s\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"passwd entry lookup failure\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%s.src\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"setlang(): failed to write to cat file.\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"gencat %s %s\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"NLSPATH=%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @setlang(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.passwd*, align 8
  %8 = alloca i32*, align 8
  store i32 %0, i32* %2, align 4
  %9 = call i32 (...) @getuid()
  %10 = call %struct.passwd* @getpwuid(i32 %9)
  store %struct.passwd* %10, %struct.passwd** %7, align 8
  %11 = icmp ne %struct.passwd* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %1
  %13 = call i32 @printe(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  br label %44

14:                                               ; preds = %1
  %15 = load %struct.passwd*, %struct.passwd** %7, align 8
  %16 = getelementptr inbounds %struct.passwd, %struct.passwd* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i64 @strlen(i8* %17)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %41

20:                                               ; preds = %14
  %21 = load %struct.passwd*, %struct.passwd** %7, align 8
  %22 = getelementptr inbounds %struct.passwd, %struct.passwd* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strlen(i8* %23)
  %25 = load i8*, i8** @LANG_NAME, align 8
  %26 = call i64 @strlen(i8* %25)
  %27 = add nsw i64 %24, %26
  %28 = add nsw i64 %27, 7
  %29 = call i64 @malloc(i64 %28)
  %30 = inttoptr i64 %29 to i8*
  store i8* %30, i8** %3, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %20
  %33 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %20
  %35 = load i8*, i8** %3, align 8
  %36 = load %struct.passwd*, %struct.passwd** %7, align 8
  %37 = getelementptr inbounds %struct.passwd, %struct.passwd* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load i8*, i8** @LANG_NAME, align 8
  %40 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %35, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %38, i8* %39)
  br label %43

41:                                               ; preds = %14
  %42 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  br label %43

43:                                               ; preds = %41, %34
  br label %44

44:                                               ; preds = %43, %12
  %45 = load i8*, i8** %3, align 8
  %46 = call i64 @strlen(i8* %45)
  %47 = add nsw i64 %46, 5
  %48 = call i64 @malloc(i64 %47)
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %4, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %44
  %52 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %44
  %54 = load i8*, i8** %4, align 8
  %55 = load i8*, i8** %3, align 8
  %56 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %54, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* %55)
  %57 = load i8*, i8** %4, align 8
  %58 = call i32* @fopen(i8* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %58, i32** %8, align 8
  %59 = icmp ne i32* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %53
  %61 = call i32 @printe(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %53
  %63 = load i8*, i8** %4, align 8
  %64 = call i32* @fopen(i8* %63, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %64, i32** %8, align 8
  %65 = load i32*, i32** %8, align 8
  %66 = load i32, i32* %2, align 4
  %67 = call i8* @setfmt(i32 %66)
  %68 = call i32 @fprintf(i32* %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* %67)
  %69 = load i32*, i32** %8, align 8
  %70 = call i32 @fclose(i32* %69)
  %71 = load i8*, i8** %3, align 8
  %72 = call i64 @strlen(i8* %71)
  %73 = load i8*, i8** %4, align 8
  %74 = call i64 @strlen(i8* %73)
  %75 = add nsw i64 %72, %74
  %76 = add nsw i64 %75, 9
  %77 = call i64 @malloc(i64 %76)
  %78 = inttoptr i64 %77 to i8*
  store i8* %78, i8** %5, align 8
  %79 = icmp ne i8* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %62
  %81 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %82

82:                                               ; preds = %80, %62
  %83 = load i8*, i8** %5, align 8
  %84 = load i8*, i8** %3, align 8
  %85 = load i8*, i8** %4, align 8
  %86 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %83, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i8* %84, i8* %85)
  %87 = load i8*, i8** %3, align 8
  %88 = call i32 @unlink(i8* %87)
  %89 = load i8*, i8** %5, align 8
  %90 = call i32 @system(i8* %89)
  %91 = load i8*, i8** %3, align 8
  %92 = call i64 @strlen(i8* %91)
  %93 = add nsw i64 %92, 9
  %94 = call i64 @malloc(i64 %93)
  %95 = inttoptr i64 %94 to i8*
  store i8* %95, i8** %6, align 8
  %96 = icmp ne i8* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %82
  %98 = call i32 @printe(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  br label %99

99:                                               ; preds = %97, %82
  %100 = load i8*, i8** %6, align 8
  %101 = load i8*, i8** %3, align 8
  %102 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %100, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %101)
  %103 = load i8*, i8** %3, align 8
  %104 = call i32 @free(i8* %103)
  %105 = load i8*, i8** %4, align 8
  %106 = call i32 @free(i8* %105)
  %107 = load i8*, i8** %5, align 8
  %108 = call i32 @free(i8* %107)
  %109 = load i8*, i8** %6, align 8
  ret i8* %109
}

declare dso_local %struct.passwd* @getpwuid(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @printe(i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i8* @setfmt(i32) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
