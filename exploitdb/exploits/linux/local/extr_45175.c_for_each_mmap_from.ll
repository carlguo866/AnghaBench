; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_for_each_mmap_from.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_for_each_mmap_from.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mmap_entry = type { i64, i64, i32 }

@MAX_MMAPS_PER_TASK = common dso_local global i32 0, align 4
@O_VM_AREA_STRUCT_VM_START = common dso_local global i32 0, align 4
@O_VM_AREA_STRUCT_VM_END = common dso_local global i32 0, align 4
@TASK_SIZE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [34 x i8] c"[-] bad mmap (did the task die?)\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@O_VM_AREA_STRUCT_VM_FLAGS = common dso_local global i32 0, align 4
@O_VM_AREA_STRUCT_VM_NEXT = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i64, i32 (%struct.mmap_entry*, i8*)*, i8*)* @for_each_mmap_from to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @for_each_mmap_from(i64 %0, i32 (%struct.mmap_entry*, i8*)* %1, i8* %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i32 (%struct.mmap_entry*, i8*)*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i32 (%struct.mmap_entry*, i8*)* %1, i32 (%struct.mmap_entry*, i8*)** %5, align 8
  store i8* %2, i8** %6, align 8
  %14 = load i32, i32* @MAX_MMAPS_PER_TASK, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %7, align 8
  %17 = alloca %struct.mmap_entry, i64 %15, align 16
  store i64 %15, i64* %8, align 8
  store i32 0, i32* %10, align 4
  br label %18

18:                                               ; preds = %44, %3
  %19 = load i64, i64* %4, align 8
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %68

21:                                               ; preds = %18
  %22 = load i32, i32* %10, align 4
  %23 = load i32, i32* @MAX_MMAPS_PER_TASK, align 4
  %24 = icmp slt i32 %22, %23
  %25 = zext i1 %24 to i32
  %26 = call i32 @assert(i32 %25)
  %27 = load i64, i64* %4, align 8
  %28 = load i32, i32* @O_VM_AREA_STRUCT_VM_START, align 4
  %29 = call i64 @read_field_8(i64 %27, i32 %28)
  store i64 %29, i64* %11, align 8
  %30 = load i64, i64* %4, align 8
  %31 = load i32, i32* @O_VM_AREA_STRUCT_VM_END, align 4
  %32 = call i64 @read_field_8(i64 %30, i32 %31)
  store i64 %32, i64* %12, align 8
  %33 = load i64, i64* %11, align 8
  %34 = load i64, i64* @TASK_SIZE, align 8
  %35 = icmp uge i64 %33, %34
  br i1 %35, label %40, label %36

36:                                               ; preds = %21
  %37 = load i64, i64* %12, align 8
  %38 = load i64, i64* @TASK_SIZE, align 8
  %39 = icmp uge i64 %37, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %36, %21
  %41 = call i32 @info(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  %42 = load i32, i32* @EXIT_FAILURE, align 4
  %43 = call i32 @exit(i32 %42) #4
  unreachable

44:                                               ; preds = %36
  %45 = load i64, i64* %4, align 8
  %46 = load i32, i32* @O_VM_AREA_STRUCT_VM_FLAGS, align 4
  %47 = call i32 @read_field_4(i64 %45, i32 %46)
  store i32 %47, i32* %13, align 4
  %48 = load i64, i64* %11, align 8
  %49 = load i32, i32* %10, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %17, i64 %50
  %52 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %51, i32 0, i32 0
  store i64 %48, i64* %52, align 8
  %53 = load i64, i64* %12, align 8
  %54 = load i32, i32* %10, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %17, i64 %55
  %57 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %56, i32 0, i32 1
  store i64 %53, i64* %57, align 8
  %58 = load i32, i32* %13, align 4
  %59 = load i32, i32* %10, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %17, i64 %60
  %62 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %61, i32 0, i32 2
  store i32 %58, i32* %62, align 8
  %63 = load i32, i32* %10, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %10, align 4
  %65 = load i64, i64* %4, align 8
  %66 = load i32, i32* @O_VM_AREA_STRUCT_VM_NEXT, align 4
  %67 = call i64 @read_field_8(i64 %65, i32 %66)
  store i64 %67, i64* %4, align 8
  br label %18

68:                                               ; preds = %18
  store i32 0, i32* %9, align 4
  br label %69

69:                                               ; preds = %80, %68
  %70 = load i32, i32* %9, align 4
  %71 = load i32, i32* %10, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %73, label %83

73:                                               ; preds = %69
  %74 = load i32 (%struct.mmap_entry*, i8*)*, i32 (%struct.mmap_entry*, i8*)** %5, align 8
  %75 = load i32, i32* %9, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.mmap_entry, %struct.mmap_entry* %17, i64 %76
  %78 = load i8*, i8** %6, align 8
  %79 = call i32 %74(%struct.mmap_entry* %77, i8* %78)
  br label %80

80:                                               ; preds = %73
  %81 = load i32, i32* %9, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %9, align 4
  br label %69

83:                                               ; preds = %69
  %84 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %84)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @assert(i32) #2

declare dso_local i64 @read_field_8(i64, i32) #2

declare dso_local i32 @info(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @read_field_4(i64, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
