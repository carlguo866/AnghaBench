; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37088.c_checker.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37088.c_checker.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@report = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [52 x i8] c"\0Achecker: mode %d\0Awaiting for file to be unlinked..\00", align 1
@apport_pid = common dso_local global i32 0, align 4
@SIGCONT = common dso_local global i32 0, align 4
@SIGSTOP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [31 x i8] c"\0Achecker: new mode %d .. done\0A\00", align 1
@S_IFIFO = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [18 x i8] c"checker: SIGCONT\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"checker: writing core\0A\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@crash_report = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [15 x i8] c"checker: done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @checker() #0 {
  %1 = alloca %struct.stat, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* @report, align 4
  %6 = call i32 @stat(i32 %5, %struct.stat* %1)
  %7 = load i32, i32* @stderr, align 4
  %8 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 %9)
  %11 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %3, align 4
  br label %13

13:                                               ; preds = %0, %35
  %14 = load i32, i32* @apport_pid, align 4
  %15 = load i32, i32* @SIGCONT, align 4
  %16 = call i32 @kill(i32 %14, i32 %15)
  %17 = load i32, i32* @apport_pid, align 4
  %18 = load i32, i32* @SIGSTOP, align 4
  %19 = call i32 @kill(i32 %17, i32 %18)
  store i32 0, i32* %4, align 4
  br label %20

20:                                               ; preds = %24, %13
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 100000
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  br label %24

24:                                               ; preds = %23
  %25 = load i32, i32* %4, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %4, align 4
  br label %20

27:                                               ; preds = %20
  %28 = load i32, i32* @report, align 4
  %29 = call i32 @stat(i32 %28, %struct.stat* %1)
  %30 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %3, align 4
  %33 = icmp ne i32 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  br label %36

35:                                               ; preds = %27
  br label %13

36:                                               ; preds = %34
  %37 = load i32, i32* @stderr, align 4
  %38 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %39)
  %41 = load i32, i32* @report, align 4
  %42 = call i32 @unlink(i32 %41)
  %43 = load i32, i32* @report, align 4
  %44 = load i32, i32* @S_IFIFO, align 4
  %45 = or i32 %44, 438
  %46 = call i32 @mknod(i32 %43, i32 %45, i32 0)
  %47 = load i32, i32* @stderr, align 4
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  %49 = load i32, i32* @apport_pid, align 4
  %50 = load i32, i32* @SIGCONT, align 4
  %51 = call i32 @kill(i32 %49, i32 %50)
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %54 = load i32, i32* @report, align 4
  %55 = load i32, i32* @O_WRONLY, align 4
  %56 = call i32 @open(i32 %54, i32 %55)
  store i32 %56, i32* %2, align 4
  %57 = load i32, i32* %2, align 4
  %58 = load i32, i32* @crash_report, align 4
  %59 = load i32, i32* @crash_report, align 4
  %60 = call i32 @strlen(i32 %59)
  %61 = call i32 @write(i32 %57, i32 %58, i32 %60)
  %62 = load i32, i32* %2, align 4
  %63 = call i32 @close(i32 %62)
  %64 = load i32, i32* @stderr, align 4
  %65 = call i32 (i32, i8*, ...) @fprintf(i32 %64, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  br label %66

66:                                               ; preds = %36, %66
  %67 = call i32 @sleep(i32 1)
  br label %66
}

declare dso_local i32 @stat(i32, %struct.stat*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @unlink(i32) #1

declare dso_local i32 @mknod(i32, i32, i32) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
