; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_leak_ptr_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_leak_ptr_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MEMFD_SIZE = common dso_local global i64 0, align 8
@MMAP_ADDR_START = common dso_local global i64 0, align 8
@MMAP_ADDR_END = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"%lx %lx\0A\00", align 1
@PAGE_SIZE = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"%lx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 ()* @bisect_leak_ptr_addr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @bisect_leak_ptr_addr() #0 {
  %1 = alloca i64, align 8
  %2 = load i64, i64* @MEMFD_SIZE, align 8
  %3 = load i64, i64* @MMAP_ADDR_START, align 8
  %4 = load i64, i64* @MMAP_ADDR_END, align 8
  %5 = call i64 @bisect_via_memfd(i64 %2, i64 %3, i64 %4)
  store i64 %5, i64* %1, align 8
  %6 = load i64, i64* %1, align 8
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* @MEMFD_SIZE, align 8
  %9 = add i64 %7, %8
  %10 = call i32 (i8*, i64, ...) @debug1(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i64 %6, i64 %9)
  %11 = load i64, i64* @PAGE_SIZE, align 8
  %12 = load i64, i64* %1, align 8
  %13 = load i64, i64* %1, align 8
  %14 = load i64, i64* @MEMFD_SIZE, align 8
  %15 = add i64 %13, %14
  %16 = call i64 @bisect_via_memfd(i64 %11, i64 %12, i64 %15)
  store i64 %16, i64* %1, align 8
  %17 = load i64, i64* %1, align 8
  %18 = load i64, i64* %1, align 8
  %19 = load i64, i64* @PAGE_SIZE, align 8
  %20 = add i64 %18, %19
  %21 = call i32 (i8*, i64, ...) @debug1(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i64 %17, i64 %20)
  %22 = load i64, i64* %1, align 8
  %23 = load i64, i64* %1, align 8
  %24 = load i64, i64* @PAGE_SIZE, align 8
  %25 = add i64 %23, %24
  %26 = call i64 @bisect_via_assign(i64 %22, i64 %25)
  store i64 %26, i64* %1, align 8
  %27 = load i64, i64* %1, align 8
  %28 = call i32 (i8*, i64, ...) @debug1(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %27)
  %29 = load i64, i64* %1, align 8
  ret i64 %29
}

declare dso_local i64 @bisect_via_memfd(i64, i64, i64) #1

declare dso_local i32 @debug1(i8*, i64, ...) #1

declare dso_local i64 @bisect_via_assign(i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
