; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34421.c_parse_fatal_error.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34421.c_parse_fatal_error.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LOG_DEBUG = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [73 x i8] c"Attempting to invoke pseudo-pty helper (this will take a few seconds)...\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"./pty\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@LOG_ERROR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [61 x i8] c"failed to execute pseudo-pty helper utility, cannot continue\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"failed to read output from pseudo-pty helper, %d (%m)\00", align 1
@.str.5 = private unnamed_addr constant [59 x i8] c"Read %u bytes of output from pseudo-pty helper, parsing...\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"corrupted double-linked list\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"======= Memory map: ========\00", align 1
@LOG_WARN = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [58 x i8] c"expected output missing (this is normal), trying again...\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"pseudo-pty helper succeeded\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"attempting to parse libc fatal error message...\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"unable to locate required error messages in crash dump\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"corrupted double-linked list: %p ***\00", align 1
@.str.13 = private unnamed_addr constant [49 x i8] c"having trouble parsing this error message: %.20s\00", align 1
@.str.14 = private unnamed_addr constant [48 x i8] c"discovered chunk pointer from `%.20s...`, => %p\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"attempting to parse the libc maps dump...\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.17 = private unnamed_addr constant [37 x i8] c"%08x-%08x %c%c%c%c %*8x %*s %*u %31s\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"[heap]\00", align 1
@.str.19 = private unnamed_addr constant [52 x i8] c"successfully located first morecore chunk w/tag @%p\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"[stack]\00", align 1
@.str.21 = private unnamed_addr constant [44 x i8] c"no [heap] tag was found, using heuristic...\00", align 1
@.str.22 = private unnamed_addr constant [42 x i8] c"%08x-%*08x %*c%*c%*c%*c %*8x %*s %*u %31s\00", align 1
@.str.23 = private unnamed_addr constant [56 x i8] c"expected to find heap location in line `%s`, but failed\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"located first morecore chunk w/o tag@%p\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"/usr/lib/libc-2.18.so\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"found libc.so mapped @%p\00", align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"expecting libc.so bss to begin at %p\00", align 1
@.str.28 = private unnamed_addr constant [40 x i8] c"unable to parse maps line `%s`, quiting\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i64*, i64*, i64*, i64*)* @parse_fatal_error to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @parse_fatal_error(i64* %0, i64* %1, i64* %2, i64* %3) #0 {
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca [16384 x i8], align 16
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca [32 x i8], align 16
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store i64* %3, i64** %8, align 8
  store i8* null, i8** %15, align 8
  br label %25

25:                                               ; preds = %4, %60
  %26 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %27 = call i32 @memset(i8* %26, i32 0, i32 16384)
  %28 = load i32, i32* @LOG_DEBUG, align 4
  %29 = call i32 (i32, i8*, ...) @logmessage(i32 %28, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0))
  %30 = call i32* @popen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %30, i32** %9, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %32, label %35

32:                                               ; preds = %25
  %33 = load i32, i32* @LOG_ERROR, align 4
  %34 = call i32 (i32, i8*, ...) @logmessage(i32 %33, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0))
  br label %35

35:                                               ; preds = %32, %25
  %36 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %37 = load i32*, i32** %9, align 8
  %38 = call i8* @fread(i8* %36, i32 1, i32 16384, i32* %37)
  store i8* %38, i8** %20, align 8
  %39 = icmp ule i8* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = load i32, i32* @LOG_ERROR, align 4
  %42 = load i8*, i8** %20, align 8
  %43 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %44 = call i32 (i32, i8*, ...) @logmessage(i32 %41, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i8* %42, i8* %43)
  br label %45

45:                                               ; preds = %40, %35
  %46 = load i32, i32* @LOG_DEBUG, align 4
  %47 = load i8*, i8** %20, align 8
  %48 = call i32 (i32, i8*, ...) @logmessage(i32 %46, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0), i8* %47)
  %49 = load i32*, i32** %9, align 8
  %50 = call i32 @pclose(i32* %49)
  %51 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %52 = call i8* @strstr(i8* %51, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  store i8* %52, i8** %10, align 8
  %53 = getelementptr inbounds [16384 x i8], [16384 x i8]* %14, i64 0, i64 0
  %54 = call i8* @strstr(i8* %53, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  store i8* %54, i8** %11, align 8
  %55 = load i8*, i8** %10, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %45
  %58 = load i8*, i8** %11, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %63

60:                                               ; preds = %57, %45
  %61 = load i32, i32* @LOG_WARN, align 4
  %62 = call i32 (i32, i8*, ...) @logmessage(i32 %61, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0))
  br label %25

63:                                               ; preds = %57
  %64 = load i32, i32* @LOG_DEBUG, align 4
  %65 = call i32 (i32, i8*, ...) @logmessage(i32 %64, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  br label %66

66:                                               ; preds = %63
  %67 = load i64*, i64** %6, align 8
  store i64 0, i64* %67, align 8
  %68 = load i64*, i64** %5, align 8
  store i64 0, i64* %68, align 8
  %69 = load i64*, i64** %7, align 8
  store i64 0, i64* %69, align 8
  %70 = load i64*, i64** %8, align 8
  store i64 0, i64* %70, align 8
  %71 = load i32, i32* @LOG_DEBUG, align 4
  %72 = call i32 (i32, i8*, ...) @logmessage(i32 %71, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0))
  %73 = load i8*, i8** %10, align 8
  %74 = icmp ne i8* %73, null
  br i1 %74, label %75, label %78

75:                                               ; preds = %66
  %76 = load i8*, i8** %11, align 8
  %77 = icmp ne i8* %76, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %75, %66
  %79 = load i32, i32* @LOG_ERROR, align 4
  %80 = call i32 (i32, i8*, ...) @logmessage(i32 %79, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0))
  br label %81

81:                                               ; preds = %78, %75
  %82 = load i8*, i8** %10, align 8
  %83 = load i64*, i64** %5, align 8
  %84 = call i32 (i8*, i8*, i64*, ...) @sscanf(i8* %82, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0), i64* %83)
  %85 = icmp ne i32 %84, 1
  br i1 %85, label %86, label %90

86:                                               ; preds = %81
  %87 = load i32, i32* @LOG_ERROR, align 4
  %88 = load i8*, i8** %10, align 8
  %89 = call i32 (i32, i8*, ...) @logmessage(i32 %87, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.13, i64 0, i64 0), i8* %88)
  br label %90

90:                                               ; preds = %86, %81
  %91 = load i32, i32* @LOG_DEBUG, align 4
  %92 = load i8*, i8** %10, align 8
  %93 = load i64*, i64** %5, align 8
  %94 = load i64, i64* %93, align 8
  %95 = call i32 (i32, i8*, ...) @logmessage(i32 %91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.14, i64 0, i64 0), i8* %92, i64 %94)
  %96 = load i32, i32* @LOG_DEBUG, align 4
  %97 = call i32 (i32, i8*, ...) @logmessage(i32 %96, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0))
  %98 = load i8*, i8** %11, align 8
  store i8* %98, i8** %12, align 8
  store i8* %98, i8** %13, align 8
  br label %99

99:                                               ; preds = %190, %90
  %100 = load i8*, i8** %12, align 8
  %101 = call i8* @strtok(i8* %100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  store i8* %101, i8** %12, align 8
  %102 = icmp ne i8* %101, null
  br i1 %102, label %103, label %192

103:                                              ; preds = %99
  %104 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %105 = call i32 @memset(i8* %104, i32 0, i32 32)
  %106 = load i8*, i8** %12, align 8
  %107 = call i64 @strcmp(i8* %106, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  br label %190

110:                                              ; preds = %103
  %111 = load i8*, i8** %12, align 8
  %112 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %113 = call i32 (i8*, i8*, i64*, ...) @sscanf(i8* %111, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.17, i64 0, i64 0), i64* %22, i64* %23, i8* %16, i8* %17, i8* %18, i8* %19, i8* %112)
  %114 = icmp sge i32 %113, 1
  br i1 %114, label %115, label %186

115:                                              ; preds = %110
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %117 = call i64 @strlen(i8* %116)
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %115
  %120 = load i8*, i8** %12, align 8
  store i8* %120, i8** %15, align 8
  br label %121

121:                                              ; preds = %119, %115
  %122 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %123 = call i64 @strcmp(i8* %122, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0))
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = load i32, i32* @LOG_DEBUG, align 4
  %127 = load i64, i64* %22, align 8
  %128 = call i32 (i32, i8*, ...) @logmessage(i32 %126, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.19, i64 0, i64 0), i64 %127)
  %129 = load i64, i64* %22, align 8
  %130 = load i64*, i64** %6, align 8
  store i64 %129, i64* %130, align 8
  br label %131

131:                                              ; preds = %125, %121
  %132 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %133 = call i64 @strcmp(i8* %132, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0))
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %156

135:                                              ; preds = %131
  %136 = load i64*, i64** %6, align 8
  %137 = load i64, i64* %136, align 8
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %156, label %139

139:                                              ; preds = %135
  %140 = load i32, i32* @LOG_WARN, align 4
  %141 = call i32 (i32, i8*, ...) @logmessage(i32 %140, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0))
  %142 = load i8*, i8** %15, align 8
  %143 = load i64*, i64** %6, align 8
  %144 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %145 = call i32 (i8*, i8*, i64*, ...) @sscanf(i8* %142, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.22, i64 0, i64 0), i64* %143, i8* %144)
  %146 = icmp slt i32 %145, 1
  br i1 %146, label %147, label %151

147:                                              ; preds = %139
  %148 = load i32, i32* @LOG_ERROR, align 4
  %149 = load i8*, i8** %15, align 8
  %150 = call i32 (i32, i8*, ...) @logmessage(i32 %148, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.23, i64 0, i64 0), i8* %149)
  br label %151

151:                                              ; preds = %147, %139
  %152 = load i32, i32* @LOG_DEBUG, align 4
  %153 = load i64*, i64** %6, align 8
  %154 = load i64, i64* %153, align 8
  %155 = call i32 (i32, i8*, ...) @logmessage(i32 %152, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i64 %154)
  br label %156

156:                                              ; preds = %151, %135, %131
  %157 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %158 = call i64 @strcmp(i8* %157, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0))
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %170

160:                                              ; preds = %156
  %161 = load i8, i8* %18, align 1
  %162 = sext i8 %161 to i32
  %163 = icmp eq i32 %162, 120
  br i1 %163, label %164, label %170

164:                                              ; preds = %160
  %165 = load i32, i32* @LOG_DEBUG, align 4
  %166 = load i64, i64* %22, align 8
  %167 = call i32 (i32, i8*, ...) @logmessage(i32 %165, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0), i64 %166)
  %168 = load i64, i64* %22, align 8
  %169 = load i64*, i64** %8, align 8
  store i64 %168, i64* %169, align 8
  br label %170

170:                                              ; preds = %164, %160, %156
  %171 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  %172 = call i64 @strlen(i8* %171)
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %170
  %175 = load i64, i64* %23, align 8
  %176 = load i64, i64* %22, align 8
  %177 = sub i64 %175, %176
  %178 = icmp eq i64 %177, 1056768
  br i1 %178, label %179, label %185

179:                                              ; preds = %174
  %180 = load i32, i32* @LOG_DEBUG, align 4
  %181 = load i64, i64* %22, align 8
  %182 = call i32 (i32, i8*, ...) @logmessage(i32 %180, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i64 0, i64 0), i64 %181)
  %183 = load i64, i64* %22, align 8
  %184 = load i64*, i64** %7, align 8
  store i64 %183, i64* %184, align 8
  br label %185

185:                                              ; preds = %179, %174, %170
  br label %190

186:                                              ; preds = %110
  %187 = load i32, i32* @LOG_ERROR, align 4
  %188 = load i8*, i8** %12, align 8
  %189 = call i32 (i32, i8*, ...) @logmessage(i32 %187, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.28, i64 0, i64 0), i8* %188)
  br label %192

190:                                              ; preds = %185, %109
  %191 = load i8*, i8** %12, align 8
  store i8* %191, i8** %13, align 8
  store i8* null, i8** %12, align 8
  br label %99

192:                                              ; preds = %186, %99
  %193 = load i64*, i64** %5, align 8
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %208, label %196

196:                                              ; preds = %192
  %197 = load i64*, i64** %6, align 8
  %198 = load i64, i64* %197, align 8
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %208, label %200

200:                                              ; preds = %196
  %201 = load i64*, i64** %7, align 8
  %202 = load i64, i64* %201, align 8
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %208, label %204

204:                                              ; preds = %200
  %205 = load i64*, i64** %8, align 8
  %206 = load i64, i64* %205, align 8
  %207 = icmp eq i64 %206, 0
  br label %208

208:                                              ; preds = %204, %200, %196, %192
  %209 = phi i1 [ true, %200 ], [ true, %196 ], [ true, %192 ], [ %207, %204 ]
  %210 = zext i1 %209 to i64
  %211 = select i1 %209, i32 1, i32 0
  ret i32 %211
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @logmessage(i32, i8*, ...) #1

declare dso_local i32* @popen(i8*, i8*) #1

declare dso_local i8* @fread(i8*, i32, i32, i32*) #1

declare dso_local i32 @pclose(i32*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i64*, ...) #1

declare dso_local i8* @strtok(i8*, i8*) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i64 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
