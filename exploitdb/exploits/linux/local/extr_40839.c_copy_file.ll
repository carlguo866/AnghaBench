; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_copy_file.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_copy_file.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@F_OK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [56 x i8] c"File %s already exists! Please delete it and run again\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@EOF = common dso_local global i8 0, align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"%s successfully backed up to %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @copy_file(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i32, i32* @F_OK, align 4
  %11 = call i32 @access(i8* %9, i32 %10)
  %12 = icmp ne i32 %11, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = load i8*, i8** %5, align 8
  %15 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i8* %14)
  store i32 -1, i32* %3, align 4
  br label %50

16:                                               ; preds = %2
  %17 = load i8*, i8** %4, align 8
  %18 = call i32* @fopen(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %18, i32** %7, align 8
  %19 = load i32*, i32** %7, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  store i32 -1, i32* %3, align 4
  br label %50

22:                                               ; preds = %16
  %23 = load i8*, i8** %5, align 8
  %24 = call i32* @fopen(i8* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %24, i32** %8, align 8
  %25 = load i32*, i32** %8, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = load i32*, i32** %7, align 8
  %29 = call i32 @fclose(i32* %28)
  store i32 -1, i32* %3, align 4
  br label %50

30:                                               ; preds = %22
  br label %31

31:                                               ; preds = %38, %30
  %32 = load i32*, i32** %7, align 8
  %33 = call signext i8 @fgetc(i32* %32)
  store i8 %33, i8* %6, align 1
  %34 = sext i8 %33 to i32
  %35 = load i8, i8* @EOF, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp ne i32 %34, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %31
  %39 = load i8, i8* %6, align 1
  %40 = load i32*, i32** %8, align 8
  %41 = call i32 @fputc(i8 signext %39, i32* %40)
  br label %31

42:                                               ; preds = %31
  %43 = load i8*, i8** %4, align 8
  %44 = load i8*, i8** %5, align 8
  %45 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %43, i8* %44)
  %46 = load i32*, i32** %7, align 8
  %47 = call i32 @fclose(i32* %46)
  %48 = load i32*, i32** %8, align 8
  %49 = call i32 @fclose(i32* %48)
  store i32 0, i32* %3, align 4
  br label %50

50:                                               ; preds = %42, %27, %21, %13
  %51 = load i32, i32* %3, align 4
  ret i32 %51
}

declare dso_local i32 @access(i8*, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local signext i8 @fgetc(i32*) #1

declare dso_local i32 @fputc(i8 signext, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
