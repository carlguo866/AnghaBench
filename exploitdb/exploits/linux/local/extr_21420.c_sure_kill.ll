; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21420.c_sure_kill.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21420.c_sure_kill.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_4__* }
%struct.TYPE_4__ = type { i8* }

@SURE_KILL_ARGV = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"[+] Removing the user's timestamp entirely..\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@SURE_KILL_OPTION = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"[-] fork()\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"[-] execve()\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"[-] wait()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sure_kill(%struct.TYPE_5__* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.TYPE_5__*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store %struct.TYPE_5__* %0, %struct.TYPE_5__** %3, align 8
  store i32 0, i32* %4, align 4
  %10 = load i32, i32* @SURE_KILL_ARGV, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %5, align 8
  %13 = alloca i8*, i64 %11, align 16
  store i64 %11, i64* %6, align 8
  %14 = load i32, i32* @stderr, align 4
  %15 = call i32 @fputs(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 %14)
  %16 = load %struct.TYPE_5__*, %struct.TYPE_5__** %3, align 8
  %17 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %16, i32 0, i32 0
  %18 = load %struct.TYPE_4__*, %struct.TYPE_4__** %17, align 8
  %19 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = load i32, i32* %4, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %4, align 4
  %23 = zext i32 %21 to i64
  %24 = getelementptr inbounds i8*, i8** %13, i64 %23
  store i8* %20, i8** %24, align 8
  %25 = load i8*, i8** @SURE_KILL_OPTION, align 8
  %26 = load i32, i32* %4, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %4, align 4
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds i8*, i8** %13, i64 %28
  store i8* %25, i8** %29, align 8
  %30 = load i32, i32* %4, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8*, i8** %13, i64 %31
  store i8* null, i8** %32, align 8
  %33 = call i64 (...) @fork()
  store i64 %33, i64* %7, align 8
  %34 = load i64, i64* %7, align 8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %1
  %37 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %9, align 4
  br label %56

38:                                               ; preds = %1
  %39 = load i64, i64* %7, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8*, i8** %13, i64 0
  %43 = load i8*, i8** %42, align 16
  %44 = call i32 @execve(i8* %43, i8** %13, i32* null)
  %45 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %9, align 4
  br label %56

46:                                               ; preds = %38
  %47 = call i64 @wait(i32* null)
  store i64 %47, i64* %8, align 8
  %48 = load i64, i64* %8, align 8
  %49 = load i64, i64* %7, align 8
  %50 = icmp ne i64 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %9, align 4
  br label %56

53:                                               ; preds = %46
  br label %54

54:                                               ; preds = %53
  br label %55

55:                                               ; preds = %54
  store i32 0, i32* %2, align 4
  store i32 1, i32* %9, align 4
  br label %56

56:                                               ; preds = %55, %51, %41, %36
  %57 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %57)
  %58 = load i32, i32* %2, align 4
  ret i32 %58
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fputs(i8*, i32) #2

declare dso_local i64 @fork(...) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @execve(i8*, i8**, i32*) #2

declare dso_local i64 @wait(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
