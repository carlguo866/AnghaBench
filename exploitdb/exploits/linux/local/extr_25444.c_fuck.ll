; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25444.c_fuck.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25444.c_fuck.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fuck() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [4 x i32], align 16
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %11 = call i32 @AB(i32 2)
  store i32 %11, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %10, i64 1
  %13 = call i32 @AB(i32 3)
  store i32 %13, i32* %12, align 4
  %14 = getelementptr inbounds i32, i32* %12, i64 1
  %15 = call i32 @AB(i32 4)
  store i32 %15, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %14, i64 1
  %17 = call i32 @AB(i32 5)
  store i32 %17, i32* %16, align 4
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %19 = ptrtoint i32* %18 to i32
  %20 = and i32 %19, -8192
  %21 = sext i32 %20 to i64
  %22 = inttoptr i64 %21 to i32**
  %23 = load i32*, i32** %22, align 8
  store i32* %23, i32** %5, align 8
  %24 = load i32*, i32** %5, align 8
  %25 = ptrtoint i32* %24 to i32
  %26 = ashr i32 %25, 36
  store i32 %26, i32* %6, align 4
  %27 = call i32 @AB(i32 1)
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %28 to i8*
  %30 = bitcast i8* %29 to i32*
  store i32* %30, i32** %7, align 8
  %31 = load i32*, i32** %7, align 8
  store i32 -1, i32* %31, align 4
  store i32 0, i32* %1, align 4
  br label %32

32:                                               ; preds = %125, %0
  %33 = load i32, i32* %1, align 4
  %34 = icmp slt i32 %33, 4000
  br i1 %34, label %35, label %128

35:                                               ; preds = %32
  %36 = load i32*, i32** %5, align 8
  %37 = load i32, i32* %1, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %36, i64 %38
  %40 = bitcast i32* %39 to i8*
  %41 = bitcast i8* %40 to i32*
  store i32* %41, i32** %8, align 8
  %42 = load i32*, i32** %8, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = sext i32 %44 to i64
  %46 = inttoptr i64 %45 to i8*
  %47 = bitcast i8* %46 to i32*
  store i32* %47, i32** %9, align 8
  %48 = load i32*, i32** %8, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 0
  %50 = load i32, i32* %49, align 4
  %51 = load i32*, i32** %8, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp ne i32 %50, %53
  br i1 %54, label %62, label %55

55:                                               ; preds = %35
  %56 = load i32*, i32** %8, align 8
  %57 = getelementptr inbounds i32, i32* %56, i64 0
  %58 = load i32, i32* %57, align 4
  %59 = ashr i32 %58, 36
  %60 = load i32, i32* %6, align 4
  %61 = icmp ne i32 %59, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %55, %35
  br label %125

63:                                               ; preds = %55
  store i32 0, i32* %2, align 4
  br label %64

64:                                               ; preds = %121, %63
  %65 = load i32, i32* %2, align 4
  %66 = icmp slt i32 %65, 20
  br i1 %66, label %67, label %124

67:                                               ; preds = %64
  store i32 0, i32* %3, align 4
  br label %68

68:                                               ; preds = %87, %67
  %69 = load i32, i32* %3, align 4
  %70 = icmp slt i32 %69, 8
  br i1 %70, label %71, label %90

71:                                               ; preds = %68
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %73 = load i32, i32* %3, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = load i32*, i32** %9, align 8
  %78 = load i32, i32* %2, align 4
  %79 = load i32, i32* %3, align 4
  %80 = add nsw i32 %78, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %77, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = icmp ne i32 %76, %83
  br i1 %84, label %85, label %86

85:                                               ; preds = %71
  br label %120

86:                                               ; preds = %71
  br label %87

87:                                               ; preds = %86
  %88 = load i32, i32* %3, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %3, align 4
  br label %68

90:                                               ; preds = %68
  store i32 0, i32* %1, align 4
  br label %91

91:                                               ; preds = %101, %90
  %92 = load i32, i32* %1, align 4
  %93 = icmp slt i32 %92, 8
  br i1 %93, label %94, label %104

94:                                               ; preds = %91
  %95 = load i32*, i32** %9, align 8
  %96 = load i32, i32* %2, align 4
  %97 = load i32, i32* %1, align 4
  %98 = add nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %95, i64 %99
  store i32 0, i32* %100, align 4
  br label %101

101:                                              ; preds = %94
  %102 = load i32, i32* %1, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %1, align 4
  br label %91

104:                                              ; preds = %91
  store i32 0, i32* %1, align 4
  br label %105

105:                                              ; preds = %116, %104
  %106 = load i32, i32* %1, align 4
  %107 = icmp slt i32 %106, 10
  br i1 %107, label %108, label %119

108:                                              ; preds = %105
  %109 = load i32*, i32** %9, align 8
  %110 = load i32, i32* %2, align 4
  %111 = add nsw i32 %110, 9
  %112 = load i32, i32* %1, align 4
  %113 = add nsw i32 %111, %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %109, i64 %114
  store i32 -1, i32* %115, align 4
  br label %116

116:                                              ; preds = %108
  %117 = load i32, i32* %1, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %1, align 4
  br label %105

119:                                              ; preds = %105
  br label %128

120:                                              ; preds = %85
  br label %121

121:                                              ; preds = %120
  %122 = load i32, i32* %2, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %2, align 4
  br label %64

124:                                              ; preds = %64
  br label %125

125:                                              ; preds = %124, %62
  %126 = load i32, i32* %1, align 4
  %127 = add nsw i32 %126, 4
  store i32 %127, i32* %1, align 4
  br label %32

128:                                              ; preds = %119, %32
  ret void
}

declare dso_local i32 @AB(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
