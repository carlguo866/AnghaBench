; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_dccp_connect_pad.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_dccp_connect_pad.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dccp_handle = type { i32, %struct.TYPE_3__, i8* }
%struct.TYPE_3__ = type { i64, i64, i32, i32, i32 }

@AF_INET6 = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"::1\00", align 1
@PF_INET6 = common dso_local global i32 0, align 4
@SOCK_DCCP = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"socket(SOCK_DCCP)\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"listen()\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"connect(SOCK_DCCP)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dccp_connect_pad(%struct.dccp_handle* %0, i32 %1) #0 {
  %3 = alloca %struct.dccp_handle*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.dccp_handle* %0, %struct.dccp_handle** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* @AF_INET6, align 4
  %7 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %8 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %8, i32 0, i32 4
  store i32 %6, i32* %9, align 8
  %10 = load i32, i32* %4, align 4
  %11 = call i32 @htons(i32 %10)
  %12 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %13 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %13, i32 0, i32 3
  store i32 %11, i32* %14, align 4
  %15 = load i32, i32* @AF_INET6, align 4
  %16 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %17 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %17, i32 0, i32 2
  %19 = call i32 @inet_pton(i32 %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32* %18)
  %20 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %21 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %21, i32 0, i32 1
  store i64 0, i64* %22, align 8
  %23 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %24 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %24, i32 0, i32 0
  store i64 0, i64* %25, align 8
  %26 = load i32, i32* @PF_INET6, align 4
  %27 = load i32, i32* @SOCK_DCCP, align 4
  %28 = load i32, i32* @IPPROTO_IP, align 4
  %29 = call i8* @socket(i32 %26, i32 %27, i32 %28)
  %30 = ptrtoint i8* %29 to i32
  %31 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %32 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %31, i32 0, i32 0
  store i32 %30, i32* %32, align 8
  %33 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %34 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %41

37:                                               ; preds = %2
  %38 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %39 = load i32, i32* @EXIT_FAILURE, align 4
  %40 = call i32 @exit(i32 %39) #3
  unreachable

41:                                               ; preds = %2
  %42 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %43 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %46 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %45, i32 0, i32 1
  %47 = call i32 @bind(i32 %44, %struct.TYPE_3__* %46, i32 32)
  store i32 %47, i32* %5, align 4
  %48 = load i32, i32* %5, align 4
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %41
  %51 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %52 = load i32, i32* @EXIT_FAILURE, align 4
  %53 = call i32 @exit(i32 %52) #3
  unreachable

54:                                               ; preds = %41
  %55 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %56 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = call i32 @listen(i32 %57, i32 9)
  store i32 %58, i32* %5, align 4
  %59 = load i32, i32* %5, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %54
  %62 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %63 = load i32, i32* @EXIT_FAILURE, align 4
  %64 = call i32 @exit(i32 %63) #3
  unreachable

65:                                               ; preds = %54
  %66 = load i32, i32* @PF_INET6, align 4
  %67 = load i32, i32* @SOCK_DCCP, align 4
  %68 = load i32, i32* @IPPROTO_IP, align 4
  %69 = call i8* @socket(i32 %66, i32 %67, i32 %68)
  %70 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %71 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %70, i32 0, i32 2
  store i8* %69, i8** %71, align 8
  %72 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %73 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %72, i32 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %76, label %80

76:                                               ; preds = %65
  %77 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %78 = load i32, i32* @EXIT_FAILURE, align 4
  %79 = call i32 @exit(i32 %78) #3
  unreachable

80:                                               ; preds = %65
  %81 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %82 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %81, i32 0, i32 2
  %83 = load i8*, i8** %82, align 8
  %84 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %85 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %84, i32 0, i32 1
  %86 = call i32 @connect(i8* %83, %struct.TYPE_3__* %85, i32 32)
  store i32 %86, i32* %5, align 4
  %87 = load i32, i32* %5, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %93

89:                                               ; preds = %80
  %90 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %91 = load i32, i32* @EXIT_FAILURE, align 4
  %92 = call i32 @exit(i32 %91) #3
  unreachable

93:                                               ; preds = %80
  ret void
}

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_pton(i32, i8*, i32*) #1

declare dso_local i8* @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bind(i32, %struct.TYPE_3__*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @connect(i8*, %struct.TYPE_3__*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
