; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_dccp_init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_dccp_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dccp_handle = type { i32, i8*, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64, i64, i32, i32, i32 }

@AF_INET6 = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"::1\00", align 1
@PF_INET6 = common dso_local global i32 0, align 4
@SOCK_DCCP = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"socket(SOCK_DCCP)\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"listen()\00", align 1
@IPPROTO_IPV6 = common dso_local global i32 0, align 4
@IPV6_RECVPKTINFO = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"setsockopt(IPV6_RECVPKTINFO)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @dccp_init(%struct.dccp_handle* %0, i32 %1) #0 {
  %3 = alloca %struct.dccp_handle*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.dccp_handle* %0, %struct.dccp_handle** %3, align 8
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* @AF_INET6, align 4
  %8 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %9 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %8, i32 0, i32 2
  %10 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %9, i32 0, i32 4
  store i32 %7, i32* %10, align 8
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @htons(i32 %11)
  %13 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %14 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %13, i32 0, i32 2
  %15 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %14, i32 0, i32 3
  store i32 %12, i32* %15, align 4
  %16 = load i32, i32* @AF_INET6, align 4
  %17 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %18 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %17, i32 0, i32 2
  %19 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %18, i32 0, i32 2
  %20 = call i32 @inet_pton(i32 %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32* %19)
  %21 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %22 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %21, i32 0, i32 2
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 1
  store i64 0, i64* %23, align 8
  %24 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %25 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i64 0, i64* %26, align 8
  %27 = load i32, i32* @PF_INET6, align 4
  %28 = load i32, i32* @SOCK_DCCP, align 4
  %29 = load i32, i32* @IPPROTO_IP, align 4
  %30 = call i8* @socket(i32 %27, i32 %28, i32 %29)
  %31 = ptrtoint i8* %30 to i32
  %32 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %33 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 8
  %34 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %35 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %42

38:                                               ; preds = %2
  %39 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %40 = load i32, i32* @EXIT_FAILURE, align 4
  %41 = call i32 @exit(i32 %40) #3
  unreachable

42:                                               ; preds = %2
  %43 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %44 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %47 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %46, i32 0, i32 2
  %48 = call i32 @bind(i32 %45, %struct.TYPE_2__* %47, i32 32)
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %5, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %42
  %52 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %53 = load i32, i32* @EXIT_FAILURE, align 4
  %54 = call i32 @exit(i32 %53) #3
  unreachable

55:                                               ; preds = %42
  %56 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %57 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %56, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = call i32 @listen(i32 %58, i32 9)
  store i32 %59, i32* %5, align 4
  %60 = load i32, i32* %5, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %55
  %63 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %64 = load i32, i32* @EXIT_FAILURE, align 4
  %65 = call i32 @exit(i32 %64) #3
  unreachable

66:                                               ; preds = %55
  store i32 8, i32* %6, align 4
  %67 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %68 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %67, i32 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = load i32, i32* @IPPROTO_IPV6, align 4
  %71 = load i32, i32* @IPV6_RECVPKTINFO, align 4
  %72 = call i32 @setsockopt(i32 %69, i32 %70, i32 %71, i32* %6, i32 4)
  store i32 %72, i32* %5, align 4
  %73 = load i32, i32* %5, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %66
  %76 = call i32 @perror(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %77 = load i32, i32* @EXIT_FAILURE, align 4
  %78 = call i32 @exit(i32 %77) #3
  unreachable

79:                                               ; preds = %66
  %80 = load i32, i32* @PF_INET6, align 4
  %81 = load i32, i32* @SOCK_DCCP, align 4
  %82 = load i32, i32* @IPPROTO_IP, align 4
  %83 = call i8* @socket(i32 %80, i32 %81, i32 %82)
  %84 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %85 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %84, i32 0, i32 1
  store i8* %83, i8** %85, align 8
  %86 = load %struct.dccp_handle*, %struct.dccp_handle** %3, align 8
  %87 = getelementptr inbounds %struct.dccp_handle, %struct.dccp_handle* %86, i32 0, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %90, label %94

90:                                               ; preds = %79
  %91 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %92 = load i32, i32* @EXIT_FAILURE, align 4
  %93 = call i32 @exit(i32 %92) #3
  unreachable

94:                                               ; preds = %79
  ret void
}

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_pton(i32, i8*, i32*) #1

declare dso_local i8* @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bind(i32, %struct.TYPE_2__*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
