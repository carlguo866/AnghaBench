; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47168.c_get_kernel_addr_sysmap.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47168.c_get_kernel_addr_sysmap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.get_kernel_addr_sysmap.path = private unnamed_addr constant [512 x i8] c"/boot/System.mapalign 16
@.str = private unnamed_addr constant [18 x i8] c"[.] trying %s...\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"[-] open/read(%s)\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"startup_64\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"%p %c %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"[-] kernel base not found in %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_addr_sysmap() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i64, align 8
  %4 = alloca [512 x i8], align 16
  %5 = alloca [32 x i8], align 16
  %6 = alloca i8, align 1
  %7 = alloca [256 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i64 0, i64* %3, align 8
  %10 = bitcast [512 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([512 x i8], [512 x i8]* @__const.get_kernel_addr_sysmap.path, i32 0, i32 0), i64 512, i1 false)
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %12 = call i32 @get_kernel_version(i8* %11, i32 32)
  %13 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %15 = call i32 @strcat(i8* %13, i8* %14)
  %16 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %17 = call i32 @dprintf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %19 = call i32* @fopen(i8* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %19, i32** %2, align 8
  %20 = load i32*, i32** %2, align 8
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %0
  %23 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %24 = call i32 @dprintf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %23)
  store i64 0, i64* %1, align 8
  br label %56

25:                                               ; preds = %0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8** %8, align 8
  store i32 0, i32* %9, align 4
  br label %26

26:                                               ; preds = %50, %37, %25
  %27 = load i32, i32* %9, align 4
  %28 = load i32, i32* @EOF, align 4
  %29 = icmp ne i32 %27, %28
  br i1 %29, label %30, label %51

30:                                               ; preds = %26
  %31 = load i32*, i32** %2, align 8
  %32 = bitcast i64* %3 to i8**
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %34 = call i32 (i32*, i8*, ...) @fscanf(i32* %31, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8** %32, i8* %6, i8* %33)
  store i32 %34, i32* %9, align 4
  %35 = load i32, i32* %9, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %30
  %38 = load i32*, i32** %2, align 8
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %40 = call i32 (i32*, i8*, ...) @fscanf(i32* %38, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %39)
  br label %26

41:                                               ; preds = %30
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %44 = call i32 @strcmp(i8* %42, i8* %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = load i32*, i32** %2, align 8
  %48 = call i32 @fclose(i32* %47)
  %49 = load i64, i64* %3, align 8
  store i64 %49, i64* %1, align 8
  br label %56

50:                                               ; preds = %41
  br label %26

51:                                               ; preds = %26
  %52 = load i32*, i32** %2, align 8
  %53 = call i32 @fclose(i32* %52)
  %54 = getelementptr inbounds [512 x i8], [512 x i8]* %4, i64 0, i64 0
  %55 = call i32 @dprintf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %54)
  store i64 0, i64* %1, align 8
  br label %56

56:                                               ; preds = %51, %46, %22
  %57 = load i64, i64* %1, align 8
  ret i64 %57
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @get_kernel_version(i8*, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @dprintf(i8*, i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fscanf(i32*, i8*, ...) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
