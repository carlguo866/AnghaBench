; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19762.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19762.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { i8*, i32, i8, i32 }

@.str = private unnamed_addr constant [51 x i8] c"FTP Explorer's Criptography v%s - by Nelson Brito\0A\00", align 1
@VERSION = common dso_local global i8* null, align 8
@main.long_options = internal global [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 1, i8 0, i32 108 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 1, i8 0, i32 114 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i32 1, i8 0, i32 105 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i32 1, i8 0, i32 111 }, %struct.option zeroinitializer], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"ratio\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"increment\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"l:r:i:o:\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"unable to open %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32* null, i32** %6, align 8
  store i32 48, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %14 = load i8*, i8** @VERSION, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i8* %14)
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 9
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @usage(i8* %21)
  br label %23

23:                                               ; preds = %18, %2
  br label %24

24:                                               ; preds = %23, %56
  store i32 0, i32* %12, align 4
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = call i32 @getopt_long(i32 %25, i8** %26, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @main.long_options, i64 0, i64 0), i32* %12)
  store i32 %27, i32* %11, align 4
  %28 = load i32, i32* %11, align 4
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  br label %57

31:                                               ; preds = %24
  %32 = load i32, i32* %11, align 4
  switch i32 %32, label %51 [
    i32 108, label %33
    i32 114, label %36
    i32 105, label %39
    i32 111, label %42
  ]

33:                                               ; preds = %31
  %34 = load i8*, i8** @optarg, align 8
  %35 = call i32 @atoi(i8* %34)
  store i32 %35, i32* %10, align 4
  br label %56

36:                                               ; preds = %31
  %37 = load i8*, i8** @optarg, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %8, align 4
  br label %56

39:                                               ; preds = %31
  %40 = load i8*, i8** @optarg, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %9, align 4
  br label %56

42:                                               ; preds = %31
  %43 = load i8*, i8** @optarg, align 8
  %44 = call i32* @fopen(i8* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %44, i32** %6, align 8
  %45 = icmp ne i32* %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %42
  %47 = load i8*, i8** @optarg, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i8* %47)
  %49 = call i32 @exit(i32 0) #3
  unreachable

50:                                               ; preds = %42
  br label %56

51:                                               ; preds = %31
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 0
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 @usage(i8* %54)
  br label %56

56:                                               ; preds = %51, %50, %39, %36, %33
  br label %24

57:                                               ; preds = %30
  br label %58

58:                                               ; preds = %107, %57
  %59 = load i32, i32* %7, align 4
  %60 = icmp slt i32 %59, 123
  br i1 %60, label %61, label %108

61:                                               ; preds = %58
  %62 = load i32, i32* %7, align 4
  %63 = icmp sge i32 %62, 58
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = load i32, i32* %7, align 4
  %66 = icmp sle i32 %65, 64
  br i1 %66, label %67, label %71

67:                                               ; preds = %64
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i32 0)
  %69 = load i32, i32* %7, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %7, align 4
  br label %107

71:                                               ; preds = %64, %61
  %72 = load i32, i32* %7, align 4
  %73 = icmp sge i32 %72, 91
  br i1 %73, label %74, label %81

74:                                               ; preds = %71
  %75 = load i32, i32* %7, align 4
  %76 = icmp sle i32 %75, 96
  br i1 %76, label %77, label %81

77:                                               ; preds = %74
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i32 0)
  %79 = load i32, i32* %7, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %7, align 4
  br label %106

81:                                               ; preds = %74, %71
  %82 = load i32*, i32** %6, align 8
  %83 = load i32, i32* %7, align 4
  %84 = trunc i32 %83 to i8
  %85 = sext i8 %84 to i32
  %86 = call i32 (i32*, i8*, ...) @fprintf(i32* %82, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i32 %85)
  store i32 0, i32* %13, align 4
  br label %87

87:                                               ; preds = %98, %81
  %88 = load i32, i32* %13, align 4
  %89 = load i32, i32* %10, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %101

91:                                               ; preds = %87
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* %13, align 4
  %94 = load i32, i32* %8, align 4
  %95 = load i32, i32* %9, align 4
  %96 = load i32*, i32** %6, align 8
  %97 = call i32 @r2(i32 %92, i32 %93, i32 %94, i32 %95, i32* %96)
  br label %98

98:                                               ; preds = %91
  %99 = load i32, i32* %13, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %13, align 4
  br label %87

101:                                              ; preds = %87
  %102 = load i32*, i32** %6, align 8
  %103 = call i32 (i32*, i8*, ...) @fprintf(i32* %102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  %104 = load i32, i32* %7, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %7, align 4
  br label %106

106:                                              ; preds = %101, %77
  br label %107

107:                                              ; preds = %106, %67
  br label %58

108:                                              ; preds = %58
  %109 = load i32*, i32** %6, align 8
  %110 = call i32 @fclose(i32* %109)
  ret i32 1
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @r2(i32, i32, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
