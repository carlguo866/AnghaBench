; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_via_assign.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_via_assign.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PAGE_SIZE = common dso_local global i64 0, align 8
@evil = common dso_local global i64 0, align 8
@good = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [13 x i8] c"[-] munmap()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i64, i64)* @bisect_via_assign to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @bisect_via_assign(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  store i32 8, i32* %5, align 4
  %12 = load i64, i64* %4, align 8
  %13 = load i64, i64* %3, align 8
  %14 = sub i64 %12, %13
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = urem i64 %14, %16
  %18 = icmp eq i64 %17, 0
  %19 = zext i1 %18 to i32
  %20 = call i32 @assert(i32 %19)
  %21 = load i64, i64* %4, align 8
  %22 = load i64, i64* %3, align 8
  %23 = sub i64 %21, %22
  %24 = load i64, i64* @PAGE_SIZE, align 8
  %25 = urem i64 %23, %24
  %26 = icmp eq i64 %25, 0
  %27 = zext i1 %26 to i32
  %28 = call i32 @assert(i32 %27)
  %29 = load i64, i64* %3, align 8
  %30 = load i64, i64* %4, align 8
  %31 = load i64, i64* %3, align 8
  %32 = sub i64 %30, %31
  %33 = call i32 @mmap_fixed(i64 %29, i64 %32)
  store i64 0, i64* %6, align 8
  %34 = load i64, i64* %4, align 8
  %35 = load i64, i64* %3, align 8
  %36 = sub i64 %34, %35
  %37 = load i32, i32* %5, align 4
  %38 = sext i32 %37 to i64
  %39 = udiv i64 %36, %38
  store i64 %39, i64* %7, align 8
  br label %40

40:                                               ; preds = %95, %2
  %41 = load i64, i64* %7, align 8
  %42 = load i64, i64* %6, align 8
  %43 = sub i64 %41, %42
  %44 = icmp ugt i64 %43, 1
  br i1 %44, label %45, label %96

45:                                               ; preds = %40
  %46 = load i64, i64* %6, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load i64, i64* %6, align 8
  %49 = sub i64 %47, %48
  %50 = udiv i64 %49, 2
  %51 = add i64 %46, %50
  store i64 %51, i64* %8, align 8
  %52 = load i64, i64* %6, align 8
  store i64 %52, i64* %9, align 8
  br label %53

53:                                               ; preds = %66, %45
  %54 = load i64, i64* %9, align 8
  %55 = load i64, i64* %8, align 8
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %53
  %58 = load i64, i64* @evil, align 8
  %59 = load i64, i64* %3, align 8
  %60 = load i64, i64* %9, align 8
  %61 = load i32, i32* %5, align 4
  %62 = sext i32 %61 to i64
  %63 = mul i64 %60, %62
  %64 = add i64 %59, %63
  %65 = inttoptr i64 %64 to i64*
  store i64 %58, i64* %65, align 8
  br label %66

66:                                               ; preds = %57
  %67 = load i64, i64* %9, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %9, align 8
  br label %53

69:                                               ; preds = %53
  %70 = load i64, i64* %8, align 8
  store i64 %70, i64* %9, align 8
  br label %71

71:                                               ; preds = %84, %69
  %72 = load i64, i64* %9, align 8
  %73 = load i64, i64* %7, align 8
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %75, label %87

75:                                               ; preds = %71
  %76 = load i64, i64* @good, align 8
  %77 = load i64, i64* %3, align 8
  %78 = load i64, i64* %9, align 8
  %79 = load i32, i32* %5, align 4
  %80 = sext i32 %79 to i64
  %81 = mul i64 %78, %80
  %82 = add i64 %77, %81
  %83 = inttoptr i64 %82 to i64*
  store i64 %76, i64* %83, align 8
  br label %84

84:                                               ; preds = %75
  %85 = load i64, i64* %9, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %9, align 8
  br label %71

87:                                               ; preds = %71
  %88 = call i32 (...) @bisect_probe()
  store i32 %88, i32* %10, align 4
  %89 = load i32, i32* %10, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  %92 = load i64, i64* %8, align 8
  store i64 %92, i64* %6, align 8
  br label %95

93:                                               ; preds = %87
  %94 = load i64, i64* %8, align 8
  store i64 %94, i64* %7, align 8
  br label %95

95:                                               ; preds = %93, %91
  br label %40

96:                                               ; preds = %40
  %97 = load i64, i64* %3, align 8
  %98 = inttoptr i64 %97 to i8*
  %99 = load i64, i64* %4, align 8
  %100 = load i64, i64* %3, align 8
  %101 = sub i64 %99, %100
  %102 = call i32 @munmap(i8* %98, i64 %101)
  store i32 %102, i32* %11, align 4
  %103 = load i32, i32* %11, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %96
  %106 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %107 = load i32, i32* @EXIT_FAILURE, align 4
  %108 = call i32 @exit(i32 %107) #3
  unreachable

109:                                              ; preds = %96
  %110 = load i64, i64* %3, align 8
  %111 = load i64, i64* %6, align 8
  %112 = load i32, i32* %5, align 4
  %113 = sext i32 %112 to i64
  %114 = mul i64 %111, %113
  %115 = add i64 %110, %114
  ret i64 %115
}

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @mmap_fixed(i64, i64) #1

declare dso_local i32 @bisect_probe(...) #1

declare dso_local i32 @munmap(i8*, i64) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
