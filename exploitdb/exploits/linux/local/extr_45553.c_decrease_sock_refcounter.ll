; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_decrease_sock_refcounter.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45553.c_decrease_sock_refcounter.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sigevent = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i8* }
%struct.unblock_thread_arg = type { i32, i32, i32 }

@NOTIFY_COOKIE_LEN = common dso_local global i32 0, align 4
@SIGEV_THREAD = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"[ ] creating unblock thread...\0A\00", align 1
@unblock_thread = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [19 x i8] c"[-] pthread_create\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"[+] unblocking thread has been created!\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[ ] get ready to block\0A\00", align 1
@EBADF = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [14 x i8] c"[-] mq_notify\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"[+] mq_notify succeed\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i32)* @decrease_sock_refcounter to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decrease_sock_refcounter(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sigevent, align 8
  %8 = alloca %struct.unblock_thread_arg, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %12 = load i32, i32* @NOTIFY_COOKIE_LEN, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %9, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %10, align 8
  %16 = load i32, i32* %4, align 4
  %17 = getelementptr inbounds %struct.unblock_thread_arg, %struct.unblock_thread_arg* %8, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = load i32, i32* %5, align 4
  %19 = getelementptr inbounds %struct.unblock_thread_arg, %struct.unblock_thread_arg* %8, i32 0, i32 1
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.unblock_thread_arg, %struct.unblock_thread_arg* %8, i32 0, i32 2
  store i32 0, i32* %20, align 4
  %21 = call i32 @memset(%struct.sigevent* %7, i32 0, i32 24)
  %22 = load i32, i32* @SIGEV_THREAD, align 4
  %23 = getelementptr inbounds %struct.sigevent, %struct.sigevent* %7, i32 0, i32 2
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.sigevent, %struct.sigevent* %7, i32 0, i32 1
  %25 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %24, i32 0, i32 0
  store i8* %15, i8** %25, align 8
  %26 = getelementptr inbounds %struct.unblock_thread_arg, %struct.unblock_thread_arg* %8, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.sigevent, %struct.sigevent* %7, i32 0, i32 0
  store i32 %27, i32* %28, align 8
  %29 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %30 = load i32, i32* @unblock_thread, align 4
  %31 = call i64 @pthread_create(i32* %6, i32* null, i32 %30, %struct.unblock_thread_arg* %8)
  store i64 %31, i64* @errno, align 8
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %2
  %34 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  br label %54

35:                                               ; preds = %2
  br label %36

36:                                               ; preds = %40, %35
  %37 = getelementptr inbounds %struct.unblock_thread_arg, %struct.unblock_thread_arg* %8, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  br label %36

41:                                               ; preds = %36
  %42 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  %43 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %44 = call i32 @_mq_notify(i32 -1, %struct.sigevent* %7)
  %45 = icmp ne i32 %44, -1
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = load i64, i64* @errno, align 8
  %48 = load i64, i64* @EBADF, align 8
  %49 = icmp ne i64 %47, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %46, %41
  %51 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  br label %54

52:                                               ; preds = %46
  %53 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %55

54:                                               ; preds = %50, %33
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %55

55:                                               ; preds = %54, %52
  %56 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %56)
  %57 = load i32, i32* %3, align 4
  ret i32 %57
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(%struct.sigevent*, i32, i32) #2

declare dso_local i32 @printf(i8*) #2

declare !callback !2 dso_local i64 @pthread_create(i32*, i32*, i32, %struct.unblock_thread_arg*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @_mq_notify(i32, %struct.sigevent*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
