; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18040.c_launch_xorg_instance.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18040.c_launch_xorg_instance.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@XORG_BIN = common dso_local global i8* null, align 8
@DISPLAY = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @launch_xorg_instance(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [3 x i8*], align 16
  store i32 %0, i32* %2, align 4
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  %7 = load i8*, i8** @XORG_BIN, align 8
  store i8* %7, i8** %6, align 8
  %8 = getelementptr inbounds i8*, i8** %6, i64 1
  %9 = load i8*, i8** @DISPLAY, align 8
  store i8* %9, i8** %8, align 8
  %10 = getelementptr inbounds i8*, i8** %8, i64 1
  store i8* null, i8** %10, align 8
  %11 = call i32 (...) @fork()
  store i32 %11, i32* %3, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %27

13:                                               ; preds = %1
  %14 = load i32, i32* @O_RDONLY, align 4
  %15 = call i32 @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %14)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = call i32 @dup2(i32 %16, i32 0)
  %18 = call i32 @close(i32 1)
  %19 = call i32 @close(i32 2)
  %20 = load i32, i32* %2, align 4
  %21 = call i32 @nice(i32 %20)
  %22 = call i32 @usleep(i32 30000)
  %23 = load i8*, i8** @XORG_BIN, align 8
  %24 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  %25 = call i32 @execve(i8* %23, i8** %24, i32* null)
  %26 = call i32 @_exit(i32 0) #3
  unreachable

27:                                               ; preds = %1
  %28 = load i32, i32* %3, align 4
  ret i32 %28
}

declare dso_local i32 @fork(...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @nice(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @execve(i8*, i8**, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
