; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20901.c_vudo_setenv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20901.c_vudo_setenv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.passwd = type { i8*, i64, i64 }

@MAX_UID_T_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"SUDO_USER=\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"SUDO_UID=\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"SUDO_GID=\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @vudo_setenv(i32 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.passwd*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %9 = load i32, i32* @MAX_UID_T_LEN, align 4
  %10 = add nsw i32 %9, 1
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = load i32, i32* %3, align 4
  %15 = call %struct.passwd* @getpwuid(i32 %14)
  store %struct.passwd* %15, %struct.passwd** %4, align 8
  %16 = load %struct.passwd*, %struct.passwd** %4, align 8
  %17 = icmp eq %struct.passwd* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %1
  store i64 0, i64* %2, align 8
  store i32 1, i32* %8, align 4
  br label %63

19:                                               ; preds = %1
  %20 = call i64 @r2s(i32 16)
  store i64 %20, i64* %5, align 8
  %21 = call i32 @strlen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %22 = load %struct.passwd*, %struct.passwd** %4, align 8
  %23 = getelementptr inbounds %struct.passwd, %struct.passwd* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = add nsw i32 %21, %25
  %27 = add nsw i32 %26, 1
  %28 = call i64 @r2s(i32 %27)
  %29 = load i64, i64* %5, align 8
  %30 = add i64 %29, %28
  store i64 %30, i64* %5, align 8
  %31 = call i64 @r2s(i32 16)
  %32 = load i64, i64* %5, align 8
  %33 = add i64 %32, %31
  store i64 %33, i64* %5, align 8
  %34 = load %struct.passwd*, %struct.passwd** %4, align 8
  %35 = getelementptr inbounds %struct.passwd, %struct.passwd* %34, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = call i32 @sprintf(i8* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %36)
  %38 = call i32 @strlen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %39 = call i32 @strlen(i8* %13)
  %40 = add nsw i32 %38, %39
  %41 = add nsw i32 %40, 1
  %42 = call i64 @r2s(i32 %41)
  %43 = load i64, i64* %5, align 8
  %44 = add i64 %43, %42
  store i64 %44, i64* %5, align 8
  %45 = call i64 @r2s(i32 16)
  %46 = load i64, i64* %5, align 8
  %47 = add i64 %46, %45
  store i64 %47, i64* %5, align 8
  %48 = load %struct.passwd*, %struct.passwd** %4, align 8
  %49 = getelementptr inbounds %struct.passwd, %struct.passwd* %48, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = call i32 @sprintf(i8* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 %50)
  %52 = call i32 @strlen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %53 = call i32 @strlen(i8* %13)
  %54 = add nsw i32 %52, %53
  %55 = add nsw i32 %54, 1
  %56 = call i64 @r2s(i32 %55)
  %57 = load i64, i64* %5, align 8
  %58 = add i64 %57, %56
  store i64 %58, i64* %5, align 8
  %59 = call i64 @r2s(i32 16)
  %60 = load i64, i64* %5, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* %5, align 8
  %62 = load i64, i64* %5, align 8
  store i64 %62, i64* %2, align 8
  store i32 1, i32* %8, align 4
  br label %63

63:                                               ; preds = %19, %18
  %64 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %64)
  %65 = load i64, i64* %2, align 8
  ret i64 %65
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local %struct.passwd* @getpwuid(i32) #2

declare dso_local i64 @r2s(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
