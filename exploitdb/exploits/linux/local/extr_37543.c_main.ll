; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37543.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37543.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.msghdr = type { i32, i32, i64, i64, i64, %struct.iovec*, %struct.sockaddr_in* }
%struct.iovec = type { i8*, i32 }
%struct.sockaddr = type { i32 }

@AF_RDS = common dso_local global i32 0, align 4
@SOCK_SEQPACKET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"create socket error\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"bind error\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"server is waiting to receive data...\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"old socket fd=%d\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"recvmsg() error\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"server received data from client:%s\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"msg.msg_namelen=%d\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"new socket fd=%d\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"--data from server\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"sendmsg()\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_in, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca i32, align 4
  %6 = alloca [128 x i8], align 16
  %7 = alloca %struct.msghdr, align 8
  %8 = alloca %struct.iovec, align 8
  store i32 0, i32* %1, align 4
  %9 = load i32, i32* @AF_RDS, align 4
  %10 = load i32, i32* @SOCK_SEQPACKET, align 4
  %11 = call i32 @socket(i32 %9, i32 %10, i32 0)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %0
  %15 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @exit(i32 0) #3
  unreachable

17:                                               ; preds = %0
  %18 = call i32 @memset(%struct.sockaddr_in* %4, i32 0, i32 12)
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 0
  store i32 %21, i32* %23, align 4
  %24 = call i32 @htons(i32 4000)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* %3, align 4
  %27 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %28 = call i64 @bind(i32 %26, %struct.sockaddr* %27, i32 12)
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %17
  %31 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  %32 = load i32, i32* %3, align 4
  %33 = call i32 @close(i32 %32)
  %34 = call i32 @exit(i32 1) #3
  unreachable

35:                                               ; preds = %17
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %37 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 6
  store %struct.sockaddr_in* %2, %struct.sockaddr_in** %37, align 8
  %38 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 0
  store i32 28, i32* %38, align 8
  %39 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 5
  store %struct.iovec* %8, %struct.iovec** %39, align 8
  %40 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 1
  store i32 1, i32* %40, align 4
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %42 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 5
  %43 = load %struct.iovec*, %struct.iovec** %42, align 8
  %44 = getelementptr inbounds %struct.iovec, %struct.iovec* %43, i32 0, i32 0
  store i8* %41, i8** %44, align 8
  %45 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 5
  %46 = load %struct.iovec*, %struct.iovec** %45, align 8
  %47 = getelementptr inbounds %struct.iovec, %struct.iovec* %46, i32 0, i32 1
  store i32 128, i32* %47, align 8
  %48 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 4
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 3
  store i64 0, i64* %49, align 8
  %50 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 2
  store i64 0, i64* %50, align 8
  br label %51

51:                                               ; preds = %35, %80
  %52 = load i32, i32* %3, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %3, align 4
  %55 = call i32 @recvmsg(i32 %54, %struct.msghdr* %7, i32 0)
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %62

57:                                               ; preds = %51
  %58 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %59 = load i32, i32* %3, align 4
  %60 = call i32 @close(i32 %59)
  %61 = call i32 @exit(i32 1) #3
  unreachable

62:                                               ; preds = %51
  %63 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* %63)
  %65 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i32 %66)
  %68 = load i32, i32* %3, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i32 %68)
  %70 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  %71 = call i32 @strcat(i8* %70, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %72 = load i32, i32* %3, align 4
  %73 = call i32 @sendmsg(i32 %72, %struct.msghdr* %7, i32 0)
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %75, label %80

75:                                               ; preds = %62
  %76 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0))
  %77 = load i32, i32* %3, align 4
  %78 = call i32 @close(i32 %77)
  %79 = call i32 @exit(i32 1) #3
  unreachable

80:                                               ; preds = %62
  br label %51
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @recvmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @sendmsg(i32, %struct.msghdr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
