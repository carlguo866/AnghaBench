; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_180.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_180.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [79 x i8] c"[ (linux/debian)gnomehack[v1.0.5] buffer overflow, by: v9[v9@fakehalo.org]. ]\0A\00", align 1
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [53 x i8] c"*** ignored argument alignment value: %s. (use 0-3)\0A\00", align 1
@DEFAULT_ALIGN = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [51 x i8] c"[ return address: 0x%lx, offset: %d, align: %d. ]\0A\00", align 1
@exec = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c"gnomehack\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"*** execution of %s failed. (check the path)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [300 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* %4, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @atoi(i8* %17)
  store i32 %18, i32* %8, align 4
  br label %21

19:                                               ; preds = %2
  %20 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %20, i32* %8, align 4
  br label %21

21:                                               ; preds = %19, %14
  %22 = load i32, i32* %4, align 4
  %23 = icmp sgt i32 %22, 2
  br i1 %23, label %24, label %48

24:                                               ; preds = %21
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  %29 = icmp sgt i32 %28, 3
  br i1 %29, label %36, label %30

30:                                               ; preds = %24
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %42

36:                                               ; preds = %30, %24
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 2
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i8* %39)
  %41 = load i32, i32* @DEFAULT_ALIGN, align 4
  store i32 %41, i32* %9, align 4
  br label %47

42:                                               ; preds = %30
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %9, align 4
  br label %47

47:                                               ; preds = %42, %36
  br label %50

48:                                               ; preds = %21
  %49 = load i32, i32* @DEFAULT_ALIGN, align 4
  store i32 %49, i32* %9, align 4
  br label %50

50:                                               ; preds = %48, %47
  %51 = call i32 (...) @esp()
  %52 = load i32, i32* %8, align 4
  %53 = sub nsw i32 %51, %52
  %54 = sext i32 %53 to i64
  store i64 %54, i64* %10, align 8
  %55 = load i64, i64* %10, align 8
  %56 = load i32, i32* %8, align 4
  %57 = load i32, i32* %9, align 4
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i64 %55, i32 %56, i32 %57)
  %59 = load i32, i32* %9, align 4
  store i32 %59, i32* %7, align 4
  br label %60

60:                                               ; preds = %69, %50
  %61 = load i32, i32* %7, align 4
  %62 = icmp slt i32 %61, 300
  br i1 %62, label %63, label %72

63:                                               ; preds = %60
  %64 = load i64, i64* %10, align 8
  %65 = load i32, i32* %7, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [300 x i8], [300 x i8]* %6, i64 0, i64 %66
  %68 = bitcast i8* %67 to i64*
  store i64 %64, i64* %68, align 1
  br label %69

69:                                               ; preds = %63
  %70 = load i32, i32* %7, align 4
  %71 = add nsw i32 %70, 4
  store i32 %71, i32* %7, align 4
  br label %60

72:                                               ; preds = %60
  store i32 0, i32* %7, align 4
  br label %73

73:                                               ; preds = %84, %72
  %74 = load i32, i32* %7, align 4
  %75 = load i32, i32* @exec, align 4
  %76 = call i32 @strlen(i32 %75)
  %77 = sub nsw i32 250, %76
  %78 = icmp slt i32 %74, %77
  br i1 %78, label %79, label %87

79:                                               ; preds = %73
  %80 = getelementptr inbounds [300 x i8], [300 x i8]* %6, i64 0, i64 0
  %81 = load i32, i32* %7, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  store i8 -112, i8* %83, align 1
  br label %84

84:                                               ; preds = %79
  %85 = load i32, i32* %7, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %7, align 4
  br label %73

87:                                               ; preds = %73
  %88 = getelementptr inbounds [300 x i8], [300 x i8]* %6, i64 0, i64 0
  %89 = load i32, i32* %7, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %88, i64 %90
  %92 = load i32, i32* @exec, align 4
  %93 = load i32, i32* @exec, align 4
  %94 = call i32 @strlen(i32 %93)
  %95 = call i32 @memcpy(i8* %91, i32 %92, i32 %94)
  %96 = getelementptr inbounds [300 x i8], [300 x i8]* %6, i64 0, i64 0
  %97 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %96, i32 1)
  %98 = load i8*, i8** @PATH, align 8
  %99 = call i64 @execlp(i8* %98, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 0)
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %87
  %102 = load i8*, i8** @PATH, align 8
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i8* %102)
  %104 = call i32 @exit(i32 -1) #3
  unreachable

105:                                              ; preds = %87
  %106 = load i32, i32* %3, align 4
  ret i32 %106
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @esp(...) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i64 @execlp(i8*, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
