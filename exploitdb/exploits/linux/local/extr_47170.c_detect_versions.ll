; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_detect_versions.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47170.c_detect_versions.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32 }
%struct.utsname = type { i8*, i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"64\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"[-] system is not using a 64-bit kernel\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"-Ubuntu\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"[-] system is not using an Ubuntu kernel\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@kernels = common dso_local global %struct.TYPE_3__* null, align 8
@.str.6 = private unnamed_addr constant [34 x i8] c"[.] kernel version '%s' detected\0A\00", align 1
@kernel = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [35 x i8] c"[-] kernel version not recognized\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @detect_versions() #0 {
  %1 = alloca %struct.utsname, align 8
  %2 = alloca [512 x i8], align 16
  %3 = alloca %struct.utsname, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = call { i8*, i64 } (...) @get_kernel_version()
  %7 = bitcast %struct.utsname* %3 to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %9 = extractvalue { i8*, i64 } %6, 0
  store i8* %9, i8** %8, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %11 = extractvalue { i8*, i64 } %6, 1
  store i64 %11, i64* %10, align 8
  %12 = bitcast %struct.utsname* %1 to i8*
  %13 = bitcast %struct.utsname* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false)
  %14 = getelementptr inbounds %struct.utsname, %struct.utsname* %1, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = call i32* @strstr(i32 %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %17 = icmp eq i32* %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %0
  %19 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %20 = load i32, i32* @EXIT_FAILURE, align 4
  %21 = call i32 @exit(i32 %20) #4
  unreachable

22:                                               ; preds = %0
  %23 = getelementptr inbounds %struct.utsname, %struct.utsname* %1, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = call i32* @strstr(i32 %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %26 = icmp eq i32* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  %28 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  %29 = load i32, i32* @EXIT_FAILURE, align 4
  %30 = call i32 @exit(i32 %29) #4
  unreachable

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.utsname, %struct.utsname* %1, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = call i8* @strtok(i32 %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i8* %34, i8** %4, align 8
  %35 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %36 = getelementptr inbounds %struct.utsname, %struct.utsname* %1, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = load i8*, i8** %4, align 8
  %39 = call i32 @snprintf(i8* %35, i32 512, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* %37, i8* %38)
  store i32 0, i32* %5, align 4
  br label %40

40:                                               ; preds = %65, %31
  %41 = load i32, i32* %5, align 4
  %42 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %43 = call i32 @ARRAY_SIZE(%struct.TYPE_3__* %42)
  %44 = icmp slt i32 %41, %43
  br i1 %44, label %45, label %68

45:                                               ; preds = %40
  %46 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  %47 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %48 = load i32, i32* %5, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %47, i64 %49
  %51 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = call i64 @strcmp(i8* %46, i32 %52)
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %45
  %56 = load %struct.TYPE_3__*, %struct.TYPE_3__** @kernels, align 8
  %57 = load i32, i32* %5, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %56, i64 %58
  %60 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i32 %61)
  %63 = load i32, i32* %5, align 4
  store i32 %63, i32* @kernel, align 4
  ret void

64:                                               ; preds = %45
  br label %65

65:                                               ; preds = %64
  %66 = load i32, i32* %5, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %5, align 4
  br label %40

68:                                               ; preds = %40
  %69 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  %70 = load i32, i32* @EXIT_FAILURE, align 4
  %71 = call i32 @exit(i32 %70) #4
  unreachable
}

declare dso_local { i8*, i64 } @get_kernel_version(...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32* @strstr(i32, i8*) #1

declare dso_local i32 @dprintf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @strtok(i32, i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*) #1

declare dso_local i32 @ARRAY_SIZE(%struct.TYPE_3__*) #1

declare dso_local i64 @strcmp(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
