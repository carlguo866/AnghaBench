; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_778.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_778.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"n:l:a:w:c:d:fsh\00", align 1
@fstop = common dso_local global i32 0, align 4
@silent = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@smp_max = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@delta_max = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"bad delta value\00", align 1
@wtime = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [15 x i8] c"bad wait value\00", align 1
@libname = common dso_local global i8* null, align 8
@shellname = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@map_base = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [15 x i8] c"bad addr value\00", align 1
@PGD_SIZE = common dso_local global i32 0, align 4
@consume_pid = common dso_local global i64 0, align 8
@uid = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  br label %7

7:                                                ; preds = %66, %2
  %8 = load i32, i32* %4, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %67

10:                                               ; preds = %7
  %11 = load i32, i32* %4, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = call i32 @getopt(i32 %11, i8** %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %10
  br label %67

17:                                               ; preds = %10
  %18 = load i32, i32* %6, align 4
  switch i32 %18, label %61 [
    i32 102, label %19
    i32 115, label %20
    i32 110, label %21
    i32 100, label %24
    i32 119, label %34
    i32 108, label %42
    i32 99, label %45
    i32 97, label %48
    i32 104, label %60
  ]

19:                                               ; preds = %17
  store i32 1, i32* @fstop, align 4
  br label %66

20:                                               ; preds = %17
  store i32 1, i32* @silent, align 4
  br label %66

21:                                               ; preds = %17
  %22 = load i32, i32* @optarg, align 4
  %23 = call i8* @atoi(i32 %22)
  store i8* %23, i8** @smp_max, align 8
  br label %66

24:                                               ; preds = %17
  %25 = load i32, i32* @optarg, align 4
  %26 = call i32 @sscanf(i32 %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* @delta_max)
  %27 = icmp ne i32 1, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = load i32, i32* @delta_max, align 4
  %30 = icmp ugt i32 %29, 100000
  br i1 %30, label %31, label %33

31:                                               ; preds = %28, %24
  %32 = call i32 @fatal(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i32 0)
  br label %33

33:                                               ; preds = %31, %28
  br label %66

34:                                               ; preds = %17
  %35 = load i32, i32* @optarg, align 4
  %36 = call i8* @atoi(i32 %35)
  store i8* %36, i8** @wtime, align 8
  %37 = load i8*, i8** @wtime, align 8
  %38 = icmp ult i8* %37, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = call i32 @fatal(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i32 0)
  br label %41

41:                                               ; preds = %39, %34
  br label %66

42:                                               ; preds = %17
  %43 = load i32, i32* @optarg, align 4
  %44 = call i8* @strdup(i32 %43)
  store i8* %44, i8** @libname, align 8
  br label %66

45:                                               ; preds = %17
  %46 = load i32, i32* @optarg, align 4
  %47 = call i8* @strdup(i32 %46)
  store i8* %47, i8** @shellname, align 8
  br label %66

48:                                               ; preds = %17
  %49 = load i32, i32* @optarg, align 4
  %50 = call i32 @sscanf(i32 %49, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32* @map_base)
  %51 = icmp ne i32 1, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = call i32 @fatal(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i32 0)
  br label %54

54:                                               ; preds = %52, %48
  %55 = load i32, i32* @PGD_SIZE, align 4
  %56 = sub nsw i32 %55, 1
  %57 = xor i32 %56, -1
  %58 = load i32, i32* @map_base, align 4
  %59 = and i32 %58, %57
  store i32 %59, i32* @map_base, align 4
  br label %66

60:                                               ; preds = %17
  br label %61

61:                                               ; preds = %17, %60
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @usage(i8* %64)
  br label %66

66:                                               ; preds = %61, %54, %45, %42, %41, %33, %21, %20, %19
  br label %7

67:                                               ; preds = %16, %7
  %68 = call i64 (...) @fork()
  store i64 %68, i64* @consume_pid, align 8
  %69 = load i64, i64* @consume_pid, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = call i32 (...) @consume_memory()
  %73 = call i32 (...) @pause()
  store i32 0, i32* %3, align 4
  br label %79

74:                                               ; preds = %67
  %75 = call i32 (...) @getuid()
  store i32 %75, i32* @uid, align 4
  %76 = call i32 (...) @setpgrp()
  %77 = call i32 (...) @wipe_slab()
  %78 = call i32 (...) @prepare()
  store i32 0, i32* %3, align 4
  br label %79

79:                                               ; preds = %74, %71
  %80 = load i32, i32* %3, align 4
  ret i32 %80
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i32 @sscanf(i32, i8*, i32*) #1

declare dso_local i32 @fatal(i8*, i32) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @consume_memory(...) #1

declare dso_local i32 @pause(...) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @setpgrp(...) #1

declare dso_local i32 @wipe_slab(...) #1

declare dso_local i32 @prepare(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
