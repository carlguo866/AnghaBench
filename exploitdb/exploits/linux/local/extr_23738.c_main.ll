; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23738.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23738.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"br:s:\00", align 1
@D_START = common dso_local global i64 0, align 8
@optarg = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"[-] option '%c' invalid\0A\00", align 1
@optopt = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %12 = load i64, i64* @D_START, align 8
  store i64 %12, i64* %11, align 8
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @banner(i8* %18)
  br label %20

20:                                               ; preds = %15, %2
  br label %21

21:                                               ; preds = %49, %20
  %22 = load i32, i32* %4, align 4
  %23 = load i8**, i8*** %5, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = call i32 @getopt(i32 %22, i8** %23, i8* %24)
  store i32 %25, i32* %7, align 4
  %26 = icmp ne i32 %25, -1
  br i1 %26, label %27, label %50

27:                                               ; preds = %21
  %28 = load i32, i32* %7, align 4
  switch i32 %28, label %49 [
    i32 98, label %29
    i32 114, label %30
    i32 115, label %37
    i32 63, label %40
  ]

29:                                               ; preds = %27
  store i32 1, i32* %8, align 4
  br label %49

30:                                               ; preds = %27
  %31 = load i32, i32* @optarg, align 4
  %32 = call i64 @strtoul(i32 %31, i32* null, i32 0)
  store i64 %32, i64* %10, align 8
  %33 = load i64, i64* %10, align 8
  %34 = call i32 @make_string(i64 %33)
  %35 = call i32 (...) @tease()
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %27
  %38 = load i32, i32* @optarg, align 4
  %39 = call i64 @strtoul(i32 %38, i32* null, i32 0)
  store i64 %39, i64* %11, align 8
  br label %49

40:                                               ; preds = %27
  %41 = load i32, i32* @stderr, align 4
  %42 = load i32, i32* @optopt, align 4
  %43 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i32 %42)
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 0
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @banner(i8* %46)
  %48 = call i32 @exit(i32 1) #3
  unreachable

49:                                               ; preds = %27, %37, %29
  br label %21

50:                                               ; preds = %21
  %51 = load i32, i32* %8, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = load i64, i64* %11, align 8
  %55 = call i32 @bruteforce(i64 %54)
  br label %56

56:                                               ; preds = %53, %50
  ret i32 0
}

declare dso_local i32 @banner(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i64 @strtoul(i32, i32*, i32) #1

declare dso_local i32 @make_string(i64) #1

declare dso_local i32 @tease(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fprintf(i32, i8*, i32) #1

declare dso_local i32 @bruteforce(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
