; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_physmap_init.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_physmap_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [30 x i8] c"[.] divide_error:     %016lx\0A\00", align 1
@O_DIVIDE_ERROR = common dso_local global i64 0, align 8
@g_kernel_text = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c"[.] kernel text:      %016lx\0A\00", align 1
@O_PAGE_OFFSET_BASE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [30 x i8] c"[.] page_offset_base: %016lx\0A\00", align 1
@g_physmap = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [30 x i8] c"[.] physmap:          %016lx\0A\00", align 1
@PAGE_OFFSET_BASE = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [49 x i8] c"[-] physmap sanity check failed (wrong offset?)\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @physmap_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @physmap_init() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = call i64 @read_idt_gate(i32 0)
  store i64 %3, i64* %1, align 8
  %4 = load i64, i64* %1, align 8
  %5 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i64 %4)
  %6 = load i64, i64* %1, align 8
  %7 = load i64, i64* @O_DIVIDE_ERROR, align 8
  %8 = sub i64 %6, %7
  store i64 %8, i64* @g_kernel_text, align 8
  %9 = load i64, i64* @g_kernel_text, align 8
  %10 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i64 %9)
  %11 = load i64, i64* @O_PAGE_OFFSET_BASE, align 8
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %31

13:                                               ; preds = %0
  %14 = load i64, i64* @g_kernel_text, align 8
  %15 = load i64, i64* @O_PAGE_OFFSET_BASE, align 8
  %16 = add nsw i64 %14, %15
  store i64 %16, i64* %2, align 8
  %17 = load i64, i64* %2, align 8
  %18 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i64 %17)
  %19 = load i64, i64* %2, align 8
  %20 = call i64 @read_8(i64 %19)
  store i64 %20, i64* @g_physmap, align 8
  %21 = load i64, i64* @g_physmap, align 8
  %22 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i64 %21)
  %23 = load i64, i64* @g_physmap, align 8
  %24 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %30

26:                                               ; preds = %13
  %27 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0))
  %28 = load i32, i32* @EXIT_FAILURE, align 4
  %29 = call i32 @exit(i32 %28) #3
  unreachable

30:                                               ; preds = %13
  br label %35

31:                                               ; preds = %0
  %32 = load i64, i64* @PAGE_OFFSET_BASE, align 8
  store i64 %32, i64* @g_physmap, align 8
  %33 = load i64, i64* @g_physmap, align 8
  %34 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i64 %33)
  br label %35

35:                                               ; preds = %31, %30
  ret void
}

declare dso_local i64 @read_idt_gate(i32) #1

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i64 @read_8(i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
