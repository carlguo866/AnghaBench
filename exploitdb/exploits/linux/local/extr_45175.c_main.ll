; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45175.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PAGE_SIZE = common dso_local global i64 0, align 8
@EXIT_FAILURE = common dso_local global i32 0, align 4
@g_cmd = common dso_local global i32 0, align 4
@CMD_IDT = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@g_pid = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = call i64 (...) @getpagesize()
  %7 = load i64, i64* @PAGE_SIZE, align 8
  %8 = icmp eq i64 %6, %7
  %9 = zext i1 %8 to i32
  %10 = call i32 @assert(i32 %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = call i32 @parse_args(i32 %11, i8** %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @print_usage(i8* %18)
  %20 = load i32, i32* @EXIT_FAILURE, align 4
  %21 = call i32 @exit(i32 %20) #3
  unreachable

22:                                               ; preds = %2
  %23 = call i32 (...) @arbitrary_read_init()
  %24 = load i32, i32* @g_cmd, align 4
  %25 = load i32, i32* @CMD_IDT, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = call i32 (...) @handle_cmd_idt()
  %29 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %29, i32* %3, align 4
  br label %49

30:                                               ; preds = %22
  %31 = call i32 (...) @physmap_init()
  %32 = load i32, i32* @g_cmd, align 4
  switch i32 %32, label %47 [
    i32 128, label %33
    i32 131, label %37
    i32 129, label %40
    i32 130, label %43
  ]

33:                                               ; preds = %30
  %34 = call i32 (...) @getpid()
  %35 = call i32 @pts_init(i32 %34)
  %36 = call i32 (...) @handle_cmd_virt()
  br label %47

37:                                               ; preds = %30
  %38 = call i32 @pts_init(i32 0)
  %39 = call i32 (...) @handle_cmd_phys()
  br label %47

40:                                               ; preds = %30
  %41 = call i32 @pts_init(i32 0)
  %42 = call i32 (...) @handle_cmd_search()
  br label %47

43:                                               ; preds = %30
  %44 = load i32, i32* @g_pid, align 4
  %45 = call i32 @pts_init(i32 %44)
  %46 = call i32 (...) @handle_cmd_pid()
  br label %47

47:                                               ; preds = %30, %43, %40, %37, %33
  %48 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %48, i32* %3, align 4
  br label %49

49:                                               ; preds = %47, %27
  %50 = load i32, i32* %3, align 4
  ret i32 %50
}

declare dso_local i32 @assert(i32) #1

declare dso_local i64 @getpagesize(...) #1

declare dso_local i32 @parse_args(i32, i8**) #1

declare dso_local i32 @print_usage(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @arbitrary_read_init(...) #1

declare dso_local i32 @handle_cmd_idt(...) #1

declare dso_local i32 @physmap_init(...) #1

declare dso_local i32 @pts_init(i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @handle_cmd_virt(...) #1

declare dso_local i32 @handle_cmd_phys(...) #1

declare dso_local i32 @handle_cmd_search(...) #1

declare dso_local i32 @handle_cmd_pid(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
