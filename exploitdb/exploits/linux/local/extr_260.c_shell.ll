; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_260.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_260.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64, i8* }

@n = common dso_local global %struct.TYPE_2__* null, align 8
@null = common dso_local global i64 0, align 8
@aos_argv = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i64 0, i64* %2, align 8
  store i32 0, i32* %3, align 4
  br label %6

6:                                                ; preds = %18, %0
  %7 = load %struct.TYPE_2__*, %struct.TYPE_2__** @n, align 8
  %8 = load i32, i32* %3, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %7, i64 %9
  %11 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* @null, align 8
  %14 = icmp ne i64 %12, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %6
  %16 = load i64, i64* %2, align 8
  %17 = add i64 %16, 8
  store i64 %17, i64* %2, align 8
  br label %18

18:                                               ; preds = %15
  %19 = load i32, i32* %3, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %3, align 4
  br label %6

21:                                               ; preds = %6
  %22 = load i64, i64* %2, align 8
  %23 = add i64 %22, 3
  %24 = add i64 %23, 1
  %25 = call i8* @malloc(i64 %24)
  store i8* %25, i8** %4, align 8
  %26 = load i8*, i8** %4, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  store i32 -1, i32* %1, align 4
  br label %98

29:                                               ; preds = %21
  store i32 0, i32* %3, align 4
  br label %30

30:                                               ; preds = %51, %29
  %31 = load %struct.TYPE_2__*, %struct.TYPE_2__** @n, align 8
  %32 = load i32, i32* %3, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i64 %33
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = load i64, i64* @null, align 8
  %38 = icmp ne i64 %36, %37
  br i1 %38, label %39, label %54

39:                                               ; preds = %30
  %40 = load %struct.TYPE_2__*, %struct.TYPE_2__** @n, align 8
  %41 = load i32, i32* %3, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i64 %42
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = load i8*, i8** %4, align 8
  %47 = bitcast i8* %46 to i8**
  %48 = load i32, i32* %3, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8*, i8** %47, i64 %49
  store i8* %45, i8** %50, align 8
  br label %51

51:                                               ; preds = %39
  %52 = load i32, i32* %3, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %3, align 4
  br label %30

54:                                               ; preds = %30
  store i32 0, i32* %3, align 4
  br label %55

55:                                               ; preds = %65, %54
  %56 = load i32, i32* %3, align 4
  %57 = icmp ult i32 %56, 3
  br i1 %57, label %58, label %68

58:                                               ; preds = %55
  %59 = load i8*, i8** %4, align 8
  %60 = load i64, i64* %2, align 8
  %61 = load i32, i32* %3, align 4
  %62 = zext i32 %61 to i64
  %63 = add i64 %60, %62
  %64 = getelementptr inbounds i8, i8* %59, i64 %63
  store i8 88, i8* %64, align 1
  br label %65

65:                                               ; preds = %58
  %66 = load i32, i32* %3, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %3, align 4
  br label %55

68:                                               ; preds = %55
  %69 = load i8*, i8** %4, align 8
  %70 = load i64, i64* %2, align 8
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = add i64 %70, %72
  %74 = getelementptr inbounds i8, i8* %69, i64 %73
  store i8 0, i8* %74, align 1
  %75 = load i8*, i8** %4, align 8
  store i8* %75, i8** %5, align 8
  br label %76

76:                                               ; preds = %91, %68
  %77 = load i8*, i8** %5, align 8
  %78 = load i8*, i8** %4, align 8
  %79 = load i64, i64* %2, align 8
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = load i32, i32* %3, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = icmp ule i8* %77, %83
  br i1 %84, label %85, label %97

85:                                               ; preds = %76
  %86 = load i8*, i8** %5, align 8
  %87 = call i64 @array_of_strings(i32* @aos_argv, i8* %86)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %85
  store i32 -1, i32* %1, align 4
  br label %98

90:                                               ; preds = %85
  br label %91

91:                                               ; preds = %90
  %92 = load i8*, i8** %5, align 8
  %93 = call i64 @strlen(i8* %92)
  %94 = add nsw i64 %93, 1
  %95 = load i8*, i8** %5, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 %94
  store i8* %96, i8** %5, align 8
  br label %76

97:                                               ; preds = %76
  store i32 0, i32* %1, align 4
  br label %98

98:                                               ; preds = %97, %89, %28
  %99 = load i32, i32* %1, align 4
  ret i32 %99
}

declare dso_local i8* @malloc(i64) #1

declare dso_local i64 @array_of_strings(i32*, i8*) #1

declare dso_local i64 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
