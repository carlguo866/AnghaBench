; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45010.c_load_prog.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_45010.c_load_prog.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bpf_insn = type { i32 }

@BPF_DW = common dso_local global i32 0, align 4
@BPF_REG_10 = common dso_local global i32 0, align 4
@BPF_REG_1 = common dso_local global i32 0, align 4
@BPF_REG_9 = common dso_local global i32 0, align 4
@mapfd = common dso_local global i32 0, align 4
@BPF_REG_6 = common dso_local global i32 0, align 4
@BPF_REG_7 = common dso_local global i32 0, align 4
@BPF_REG_8 = common dso_local global i32 0, align 4
@BPF_REG_2 = common dso_local global i32 0, align 4
@BPF_REG_0 = common dso_local global i32 0, align 4
@BPF_JNE = common dso_local global i32 0, align 4
@BPF_REG_3 = common dso_local global i32 0, align 4
@BPF_PROG_TYPE_SOCKET_FILTER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"GPL\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @load_prog to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @load_prog() #0 {
  %1 = alloca [21 x %struct.bpf_insn], align 16
  %2 = getelementptr inbounds [21 x %struct.bpf_insn], [21 x %struct.bpf_insn]* %1, i64 0, i64 0
  %3 = call i32 (...) @BPF_DISABLE_VERIFIER()
  %4 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %2, i32 0, i32 0
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %2, i64 1
  %6 = load i32, i32* @BPF_DW, align 4
  %7 = load i32, i32* @BPF_REG_10, align 4
  %8 = load i32, i32* @BPF_REG_1, align 4
  %9 = call i32 @BPF_STX_MEM(i32 %6, i32 %7, i32 %8, i32 -16)
  %10 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %5, i64 1
  %12 = load i32, i32* @BPF_REG_9, align 4
  %13 = load i32, i32* @mapfd, align 4
  %14 = call i32 @BPF_LD_MAP_FD(i32 %12, i32 %13)
  %15 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %11, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %11, i64 1
  %17 = load i32, i32* @BPF_REG_6, align 4
  %18 = call i32 @BPF_MAP_GET(i32 0, i32 %17)
  %19 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %16, i32 0, i32 0
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %16, i64 1
  %21 = load i32, i32* @BPF_REG_7, align 4
  %22 = call i32 @BPF_MAP_GET(i32 1, i32 %21)
  %23 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %20, i32 0, i32 0
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %20, i64 1
  %25 = load i32, i32* @BPF_REG_8, align 4
  %26 = call i32 @BPF_MAP_GET(i32 2, i32 %25)
  %27 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %24, i32 0, i32 0
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %24, i64 1
  %29 = load i32, i32* @BPF_REG_2, align 4
  %30 = load i32, i32* @BPF_REG_0, align 4
  %31 = call i32 @BPF_MOV64_REG(i32 %29, i32 %30)
  %32 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %28, i32 0, i32 0
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %28, i64 1
  %34 = load i32, i32* @BPF_REG_0, align 4
  %35 = call i32 @BPF_MOV64_IMM(i32 %34, i32 0)
  %36 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %33, i32 0, i32 0
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %33, i64 1
  %38 = load i32, i32* @BPF_JNE, align 4
  %39 = load i32, i32* @BPF_REG_6, align 4
  %40 = call i32 @BPF_JMP_IMM(i32 %38, i32 %39, i32 0, i32 2)
  %41 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %37, i32 0, i32 0
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %37, i64 1
  %43 = load i32, i32* @BPF_DW, align 4
  %44 = load i32, i32* @BPF_REG_2, align 4
  %45 = load i32, i32* @BPF_REG_10, align 4
  %46 = call i32 @BPF_STX_MEM(i32 %43, i32 %44, i32 %45, i32 0)
  %47 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %42, i32 0, i32 0
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %42, i64 1
  %49 = call i32 (...) @BPF_EXIT_INSN()
  %50 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %48, i32 0, i32 0
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %48, i64 1
  %52 = load i32, i32* @BPF_JNE, align 4
  %53 = load i32, i32* @BPF_REG_6, align 4
  %54 = call i32 @BPF_JMP_IMM(i32 %52, i32 %53, i32 1, i32 3)
  %55 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %51, i32 0, i32 0
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %51, i64 1
  %57 = load i32, i32* @BPF_DW, align 4
  %58 = load i32, i32* @BPF_REG_3, align 4
  %59 = load i32, i32* @BPF_REG_10, align 4
  %60 = call i32 @BPF_LDX_MEM(i32 %57, i32 %58, i32 %59, i32 -16)
  %61 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %56, i32 0, i32 0
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %56, i64 1
  %63 = load i32, i32* @BPF_DW, align 4
  %64 = load i32, i32* @BPF_REG_2, align 4
  %65 = load i32, i32* @BPF_REG_3, align 4
  %66 = call i32 @BPF_STX_MEM(i32 %63, i32 %64, i32 %65, i32 0)
  %67 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %62, i32 0, i32 0
  store i32 %66, i32* %67, align 4
  %68 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %62, i64 1
  %69 = call i32 (...) @BPF_EXIT_INSN()
  %70 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %68, i32 0, i32 0
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %68, i64 1
  %72 = load i32, i32* @BPF_JNE, align 4
  %73 = load i32, i32* @BPF_REG_6, align 4
  %74 = call i32 @BPF_JMP_IMM(i32 %72, i32 %73, i32 2, i32 3)
  %75 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %71, i32 0, i32 0
  store i32 %74, i32* %75, align 4
  %76 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %71, i64 1
  %77 = load i32, i32* @BPF_DW, align 4
  %78 = load i32, i32* @BPF_REG_3, align 4
  %79 = load i32, i32* @BPF_REG_7, align 4
  %80 = call i32 @BPF_LDX_MEM(i32 %77, i32 %78, i32 %79, i32 0)
  %81 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %76, i32 0, i32 0
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %76, i64 1
  %83 = load i32, i32* @BPF_DW, align 4
  %84 = load i32, i32* @BPF_REG_2, align 4
  %85 = load i32, i32* @BPF_REG_3, align 4
  %86 = call i32 @BPF_STX_MEM(i32 %83, i32 %84, i32 %85, i32 0)
  %87 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %82, i32 0, i32 0
  store i32 %86, i32* %87, align 4
  %88 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %82, i64 1
  %89 = call i32 (...) @BPF_EXIT_INSN()
  %90 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %88, i32 0, i32 0
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %88, i64 1
  %92 = load i32, i32* @BPF_DW, align 4
  %93 = load i32, i32* @BPF_REG_7, align 4
  %94 = load i32, i32* @BPF_REG_8, align 4
  %95 = call i32 @BPF_STX_MEM(i32 %92, i32 %93, i32 %94, i32 0)
  %96 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %91, i32 0, i32 0
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %91, i64 1
  %98 = call i32 (...) @BPF_EXIT_INSN()
  %99 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %97, i32 0, i32 0
  store i32 %98, i32* %99, align 4
  %100 = load i32, i32* @BPF_PROG_TYPE_SOCKET_FILTER, align 4
  %101 = getelementptr inbounds [21 x %struct.bpf_insn], [21 x %struct.bpf_insn]* %1, i64 0, i64 0
  %102 = call i32 @bpf_prog_load(i32 %100, %struct.bpf_insn* %101, i32 84, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 0)
  ret i32 %102
}

declare dso_local i32 @BPF_DISABLE_VERIFIER(...) #1

declare dso_local i32 @BPF_STX_MEM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_LD_MAP_FD(i32, i32) #1

declare dso_local i32 @BPF_MAP_GET(i32, i32) #1

declare dso_local i32 @BPF_MOV64_REG(i32, i32) #1

declare dso_local i32 @BPF_MOV64_IMM(i32, i32) #1

declare dso_local i32 @BPF_JMP_IMM(i32, i32, i32, i32) #1

declare dso_local i32 @BPF_EXIT_INSN(...) #1

declare dso_local i32 @BPF_LDX_MEM(i32, i32, i32, i32) #1

declare dso_local i32 @bpf_prog_load(i32, %struct.bpf_insn*, i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
