; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_335.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_335.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.code = private unnamed_addr constant [23 x i32] [i32 2080899750, i32 -1809712208, i32 -1878981544, i32 1012985881, i32 1617112136, i32 -1872690112, i32 1012977666, i32 1617120268, i32 -1872690108, i32 1012936546, i32 1617127790, i32 -1872690120, i32 1012936563, i32 1617127425, i32 946077695, i32 -1872690116, i32 811664440, i32 2089034360, i32 -2143222720, i32 -2147417020, i32 2080965542, i32 1317012512, i32 0], align 16
@.str = private unnamed_addr constant [3 x i8] c"-L\00", align 1
@execv = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"Bad parameters\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Return address has zero\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"EGGSHEL\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"EGGSHE2\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"EGGSHE3\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"EGGSHE4\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@prog2 = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [9 x i8] c"Start...\00", align 1
@prog = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [25 x i8] c"Error executing execve \0A\00", align 1
@MAXBUF = common dso_local global i32 0, align 4
@OO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [23 x i32], align 16
  %9 = alloca [600 x i32], align 16
  %10 = alloca [600 x i32], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca [4 x i8*], align 16
  %25 = alloca i8*, align 8
  %26 = alloca [8 x i8*], align 16
  %27 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %28 = bitcast [23 x i32]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 16 bitcast ([23 x i32]* @__const.main.code to i8*), i64 92, i1 false)
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32 4600, i32* %23, align 4
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %25, align 8
  store i32 0, i32* %27, align 4
  store i32 100, i32* %13, align 4
  store i32 280, i32* %14, align 4
  %29 = load i32, i32* %5, align 4
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %31, label %36

31:                                               ; preds = %3
  %32 = load i8**, i8*** %6, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  store i32 %35, i32* %23, align 4
  br label %36

36:                                               ; preds = %31, %3
  store i32* @execv, i32** %19, align 8
  %37 = load i32*, i32** %19, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 1
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %17, align 4
  %40 = load i32*, i32** %19, align 8
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %18, align 4
  %42 = load i32, i32* %13, align 4
  %43 = bitcast [23 x i32]* %8 to i8*
  %44 = call i32 @strlen(i8* %43)
  %45 = sdiv i32 %44, 4
  %46 = add i32 %42, %45
  %47 = load i32, i32* %14, align 4
  %48 = icmp ugt i32 %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %36
  %50 = load i32, i32* %14, align 4
  %51 = icmp sgt i32 %50, 600
  br i1 %51, label %52, label %55

52:                                               ; preds = %49, %36
  %53 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %54 = call i32 @exit(i32 1) #4
  unreachable

55:                                               ; preds = %49
  %56 = load i32, i32* %17, align 4
  %57 = and i32 %56, 65535
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %60 = bitcast i32* %59 to i16*
  %61 = getelementptr inbounds i16, i16* %60, i64 7
  %62 = getelementptr inbounds i16, i16* %61, i64 2
  store i16 %58, i16* %62, align 2
  %63 = load i32, i32* %17, align 4
  %64 = lshr i32 %63, 16
  %65 = and i32 %64, 65535
  %66 = trunc i32 %65 to i16
  %67 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %68 = bitcast i32* %67 to i16*
  %69 = getelementptr inbounds i16, i16* %68, i64 7
  store i16 %66, i16* %69, align 2
  %70 = load i32, i32* %18, align 4
  %71 = and i32 %70, 65535
  %72 = trunc i32 %71 to i16
  %73 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %74 = bitcast i32* %73 to i16*
  %75 = getelementptr inbounds i16, i16* %74, i64 7
  %76 = getelementptr inbounds i16, i16* %75, i64 8
  store i16 %72, i16* %76, align 2
  %77 = load i32, i32* %18, align 4
  %78 = lshr i32 %77, 16
  %79 = and i32 %78, 65535
  %80 = trunc i32 %79 to i16
  %81 = getelementptr inbounds [23 x i32], [23 x i32]* %8, i64 0, i64 0
  %82 = bitcast i32* %81 to i16*
  %83 = getelementptr inbounds i16, i16* %82, i64 7
  %84 = getelementptr inbounds i16, i16* %83, i64 6
  store i16 %80, i16* %84, align 2
  %85 = load i32, i32* %27, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %94

87:                                               ; preds = %55
  %88 = load i32, i32* %13, align 4
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %89
  %91 = ptrtoint i32* %90 to i32
  %92 = load i32, i32* %23, align 4
  %93 = add i32 %91, %92
  br label %99

94:                                               ; preds = %55
  %95 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %96 = ptrtoint i32* %95 to i32
  %97 = load i32, i32* %23, align 4
  %98 = add i32 %96, %97
  br label %99

99:                                               ; preds = %94, %87
  %100 = phi i32 [ %93, %87 ], [ %98, %94 ]
  store i32 %100, i32* %22, align 4
  store i32 0, i32* %12, align 4
  br label %101

101:                                              ; preds = %116, %99
  %102 = load i32, i32* %12, align 4
  %103 = load i32, i32* %13, align 4
  %104 = icmp ult i32 %102, %103
  br i1 %104, label %105, label %119

105:                                              ; preds = %101
  %106 = load i32, i32* %27, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %105
  %109 = load i32, i32* %22, align 4
  br label %111

110:                                              ; preds = %105
  br label %111

111:                                              ; preds = %110, %108
  %112 = phi i32 [ %109, %108 ], [ 1342176130, %110 ]
  %113 = load i32, i32* %12, align 4
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %114
  store i32 %112, i32* %115, align 4
  br label %116

116:                                              ; preds = %111
  %117 = load i32, i32* %12, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %12, align 4
  br label %101

119:                                              ; preds = %101
  %120 = load i32, i32* %12, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %121
  %123 = bitcast i32* %122 to i8*
  %124 = bitcast [23 x i32]* %8 to i8*
  %125 = call i32 @strcpy(i8* %123, i8* %124)
  %126 = load i32, i32* %12, align 4
  %127 = bitcast [23 x i32]* %8 to i8*
  %128 = call i32 @strlen(i8* %127)
  %129 = sdiv i32 %128, 4
  %130 = add i32 %126, %129
  %131 = sub i32 %130, 1
  store i32 %131, i32* %11, align 4
  %132 = load i32, i32* %22, align 4
  %133 = and i32 %132, 255
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %144

135:                                              ; preds = %119
  %136 = load i32, i32* %22, align 4
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %144

138:                                              ; preds = %135
  %139 = load i32, i32* %22, align 4
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %138
  %142 = load i32, i32* %22, align 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %147, label %144

144:                                              ; preds = %141, %138, %135, %119
  %145 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %146 = call i32 @exit(i32 5) #4
  unreachable

147:                                              ; preds = %141
  br label %148

148:                                              ; preds = %153, %147
  %149 = load i32, i32* %11, align 4
  %150 = add i32 %149, 1
  store i32 %150, i32* %11, align 4
  %151 = load i32, i32* %14, align 4
  %152 = icmp ult i32 %149, %151
  br i1 %152, label %153, label %158

153:                                              ; preds = %148
  %154 = load i32, i32* %22, align 4
  %155 = load i32, i32* %11, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %156
  store i32 %154, i32* %157, align 4
  br label %148

158:                                              ; preds = %148
  %159 = load i32, i32* %11, align 4
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 %160
  store i32 0, i32* %161, align 4
  store i32 0, i32* %11, align 4
  br label %162

162:                                              ; preds = %172, %158
  %163 = load i32, i32* %11, align 4
  %164 = load i32, i32* %14, align 4
  %165 = sub nsw i32 %164, 1
  %166 = icmp ult i32 %163, %165
  br i1 %166, label %167, label %175

167:                                              ; preds = %162
  %168 = load i32, i32* %22, align 4
  %169 = load i32, i32* %11, align 4
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [600 x i32], [600 x i32]* %10, i64 0, i64 %170
  store i32 %168, i32* %171, align 4
  br label %172

172:                                              ; preds = %167
  %173 = load i32, i32* %11, align 4
  %174 = add i32 %173, 1
  store i32 %174, i32* %11, align 4
  br label %162

175:                                              ; preds = %162
  %176 = load i32, i32* %11, align 4
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [600 x i32], [600 x i32]* %10, i64 0, i64 %177
  store i32 0, i32* %178, align 4
  %179 = load i32, i32* %15, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %187

181:                                              ; preds = %175
  %182 = bitcast [600 x i32]* %9 to i8*
  %183 = call i32 @puts(i8* %182)
  %184 = load i32, i32* @stdout, align 4
  %185 = call i32 @fflush(i32 %184)
  %186 = call i32 @exit(i32 0) #4
  unreachable

187:                                              ; preds = %175
  %188 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %189 = bitcast i32* %188 to i8*
  %190 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %189)
  %191 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 0
  store i8* %190, i8** %191, align 16
  %192 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %193 = bitcast i32* %192 to i8*
  %194 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* %193)
  %195 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 1
  store i8* %194, i8** %195, align 8
  %196 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %197 = bitcast i32* %196 to i8*
  %198 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* %197)
  %199 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 2
  store i8* %198, i8** %199, align 16
  %200 = getelementptr inbounds [600 x i32], [600 x i32]* %9, i64 0, i64 0
  %201 = bitcast i32* %200 to i8*
  %202 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* %201)
  %203 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 3
  store i8* %202, i8** %203, align 8
  %204 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  %205 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i8* %204)
  %206 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 4
  store i8* %205, i8** %206, align 16
  %207 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 5
  store i8* null, i8** %207, align 8
  %208 = load i8*, i8** @prog2, align 8
  %209 = getelementptr inbounds [4 x i8*], [4 x i8*]* %24, i64 0, i64 0
  store i8* %208, i8** %209, align 16
  %210 = load i8*, i8** %25, align 8
  %211 = getelementptr inbounds [4 x i8*], [4 x i8*]* %24, i64 0, i64 1
  store i8* %210, i8** %211, align 8
  %212 = getelementptr inbounds [600 x i32], [600 x i32]* %10, i64 0, i64 0
  %213 = bitcast i32* %212 to i8*
  %214 = getelementptr inbounds [4 x i8*], [4 x i8*]* %24, i64 0, i64 2
  store i8* %213, i8** %214, align 16
  %215 = call i32 @puts(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0))
  %216 = load i32, i32* @prog, align 4
  %217 = getelementptr inbounds [4 x i8*], [4 x i8*]* %24, i64 0, i64 0
  %218 = getelementptr inbounds [8 x i8*], [8 x i8*]* %26, i64 0, i64 0
  %219 = call i32 @execve(i32 %216, i8** %217, i8** %218)
  %220 = call i32 @perror(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %221 = load i32, i32* %4, align 4
  ret i32 %221
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i8* @createvar(i8*, i8*) #2

declare dso_local i8* @getenv(i8*) #2

declare dso_local i32 @execve(i32, i8**, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
