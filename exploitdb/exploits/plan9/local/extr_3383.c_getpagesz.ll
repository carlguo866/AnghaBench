; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_getpagesz.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_getpagesz.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"#c/swap\00", align 1
@OREAD = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"can't open \22#c/swap\22: %r\00", align 1
@False = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"can't read \22#c/swap\22: %r\00", align 1
@pagesz = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"the system page size is %d\00", align 1
@True = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @getpagesz to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getpagesz() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [64 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = load i32, i32* @OREAD, align 4
  %8 = call i32 @open(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %7)
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %0
  %12 = call i32 @err(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* @False, align 4
  store i32 %13, i32* %1, align 4
  br label %82

14:                                               ; preds = %0
  %15 = load i32, i32* %5, align 4
  %16 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  %17 = call i32 @read(i32 %15, i8* %16, i32 64)
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %14
  %21 = call i32 @err(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %22 = load i32, i32* %5, align 4
  %23 = call i32 @close(i32 %22)
  %24 = load i32, i32* @False, align 4
  store i32 %24, i32* %1, align 4
  br label %82

25:                                               ; preds = %14
  %26 = load i32, i32* %5, align 4
  %27 = call i32 @close(i32 %26)
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  store i8* %28, i8** %3, align 8
  br label %29

29:                                               ; preds = %44, %25
  %30 = load i8*, i8** %3, align 8
  %31 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  %32 = ptrtoint i8* %30 to i64
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %32, %33
  %35 = icmp ult i64 %34, 64
  br i1 %35, label %36, label %41

36:                                               ; preds = %29
  %37 = load i8*, i8** %3, align 8
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp ne i32 %39, 10
  br label %41

41:                                               ; preds = %36, %29
  %42 = phi i1 [ false, %29 ], [ %40, %36 ]
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  br label %44

44:                                               ; preds = %43
  %45 = load i8*, i8** %3, align 8
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %46, i8** %3, align 8
  br label %29

47:                                               ; preds = %41
  %48 = load i8*, i8** %3, align 8
  %49 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %49, i8** %3, align 8
  store i8* %49, i8** %4, align 8
  br label %50

50:                                               ; preds = %72, %47
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  %53 = ptrtoint i8* %51 to i64
  %54 = ptrtoint i8* %52 to i64
  %55 = sub i64 %53, %54
  %56 = icmp ult i64 %55, 64
  br i1 %56, label %57, label %69

57:                                               ; preds = %50
  %58 = load i8*, i8** %4, align 8
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp ne i32 %60, 32
  br i1 %61, label %62, label %67

62:                                               ; preds = %57
  %63 = load i8*, i8** %4, align 8
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp ne i32 %65, 9
  br label %67

67:                                               ; preds = %62, %57
  %68 = phi i1 [ false, %57 ], [ %66, %62 ]
  br label %69

69:                                               ; preds = %67, %50
  %70 = phi i1 [ false, %50 ], [ %68, %67 ]
  br i1 %70, label %71, label %75

71:                                               ; preds = %69
  br label %72

72:                                               ; preds = %71
  %73 = load i8*, i8** %4, align 8
  %74 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %74, i8** %4, align 8
  br label %50

75:                                               ; preds = %69
  %76 = load i8*, i8** %4, align 8
  store i8 0, i8* %76, align 1
  %77 = load i8*, i8** %3, align 8
  %78 = call i32 @strtoul(i8* %77, i32 0, i32 0)
  store i32 %78, i32* @pagesz, align 4
  %79 = load i32, i32* @pagesz, align 4
  %80 = call i32 @msg(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i32 %79)
  %81 = load i32, i32* @True, align 4
  store i32 %81, i32* %1, align 4
  br label %82

82:                                               ; preds = %75, %20, %11
  %83 = load i32, i32* %1, align 4
  ret i32 %83
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @err(i8*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @strtoul(i8*, i32, i32) #1

declare dso_local i32 @msg(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
