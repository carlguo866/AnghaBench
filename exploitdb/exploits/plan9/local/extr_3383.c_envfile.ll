; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_envfile.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_envfile.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"#e/XXXXXXXXXXX\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"mktemp failed: %r\00", align 1
@False = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"creating \22%s\22\00", align 1
@ORDWR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"can't create \22%s\22: %r\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"truncating \22%s\22\00", align 1
@OWRITE = common dso_local global i32 0, align 4
@OTRUNC = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [20 x i8] c"can't open \22%s\22: %r\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"\22%s\22 is ready for manipulation\00", align 1
@envpath = common dso_local global i32 0, align 4
@envfd = common dso_local global i32 0, align 4
@True = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @envfile to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @envfile() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [32 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  %6 = call i32 @snprint(i8* %5, i32 32, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  %8 = call i8* @mktemp(i8* %7)
  store i8* %8, i8** %3, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %0
  %14 = load i8*, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 0
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 47
  br i1 %18, label %19, label %27

19:                                               ; preds = %13
  %20 = load i8*, i8** %3, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %19, %0
  %25 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  %26 = load i32, i32* @False, align 4
  store i32 %26, i32* %1, align 4
  br label %62

27:                                               ; preds = %19, %13
  %28 = load i8*, i8** %3, align 8
  %29 = call i32 @msg(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %28)
  %30 = load i8*, i8** %3, align 8
  %31 = load i32, i32* @ORDWR, align 4
  %32 = call i32 @create(i8* %30, i32 %31, i32 384)
  store i32 %32, i32* %4, align 4
  %33 = load i32, i32* %4, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %27
  %36 = load i8*, i8** %3, align 8
  %37 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %36)
  %38 = load i32, i32* @False, align 4
  store i32 %38, i32* %1, align 4
  br label %62

39:                                               ; preds = %27
  %40 = load i8*, i8** %3, align 8
  %41 = call i32 @msg(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %40)
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @close(i32 %42)
  %44 = load i8*, i8** %3, align 8
  %45 = load i32, i32* @OWRITE, align 4
  %46 = load i32, i32* @OTRUNC, align 4
  %47 = or i32 %45, %46
  %48 = call i32 @open(i8* %44, i32 %47)
  store i32 %48, i32* %4, align 4
  %49 = load i32, i32* %4, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %39
  %52 = load i8*, i8** %3, align 8
  %53 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %52)
  %54 = load i32, i32* @False, align 4
  store i32 %54, i32* %1, align 4
  br label %62

55:                                               ; preds = %39
  %56 = load i8*, i8** %3, align 8
  %57 = call i32 @msg(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i8* %56)
  %58 = getelementptr inbounds [32 x i8], [32 x i8]* %2, i64 0, i64 0
  %59 = call i32 @xstrdup(i8* %58, i32* @envpath)
  %60 = load i32, i32* %4, align 4
  store i32 %60, i32* @envfd, align 4
  %61 = load i32, i32* @True, align 4
  store i32 %61, i32* %1, align 4
  br label %62

62:                                               ; preds = %55, %51, %35, %24
  %63 = load i32, i32* %1, align 4
  ret i32 %63
}

declare dso_local i32 @snprint(i8*, i32, i8*) #1

declare dso_local i8* @mktemp(i8*) #1

declare dso_local i32 @err(i8*, ...) #1

declare dso_local i32 @msg(i8*, i8*) #1

declare dso_local i32 @create(i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @xstrdup(i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
