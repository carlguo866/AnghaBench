; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_addk.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_addk.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_5__*, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [7 x i8] c"calloc\00", align 1
@kf = common dso_local global %struct.TYPE_5__* null, align 8
@True = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"invalid K syntax\00", align 1
@False = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*)* @addk to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @addk(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.TYPE_5__*, align 8
  %5 = alloca %struct.TYPE_5__*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  %9 = call %struct.TYPE_5__* @calloc(i32 1, i32 32)
  store %struct.TYPE_5__* %9, %struct.TYPE_5__** %5, align 8
  %10 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %11 = icmp ne %struct.TYPE_5__* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (...) @abort() #3
  unreachable

15:                                               ; preds = %1
  %16 = load i8*, i8** %3, align 8
  store i8* %16, i8** %6, align 8
  br label %17

17:                                               ; preds = %30, %15
  %18 = load i8*, i8** %6, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %17
  %23 = load i8*, i8** %6, align 8
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp ne i32 %25, 44
  br label %27

27:                                               ; preds = %22, %17
  %28 = phi i1 [ false, %17 ], [ %26, %22 ]
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  br label %30

30:                                               ; preds = %29
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %6, align 8
  br label %17

33:                                               ; preds = %27
  %34 = load i8*, i8** %6, align 8
  %35 = load i8, i8* %34, align 1
  store i8 %35, i8* %8, align 1
  %36 = load i8*, i8** %6, align 8
  store i8 0, i8* %36, align 1
  %37 = load i8*, i8** %3, align 8
  %38 = call i32 @strtoull(i8* %37, i32 0, i32 0)
  %39 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %40 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %39, i32 0, i32 5
  store i32 %38, i32* %40, align 8
  %41 = load i8, i8* %8, align 1
  %42 = load i8*, i8** %6, align 8
  store i8 %41, i8* %42, align 1
  %43 = load i8, i8* %8, align 1
  %44 = icmp ne i8 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %33
  br label %129

46:                                               ; preds = %33
  %47 = load i8*, i8** %6, align 8
  %48 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %48, i8** %6, align 8
  store i8* %48, i8** %7, align 8
  br label %49

49:                                               ; preds = %62, %46
  %50 = load i8*, i8** %6, align 8
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = load i8*, i8** %6, align 8
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp ne i32 %57, 44
  br label %59

59:                                               ; preds = %54, %49
  %60 = phi i1 [ false, %49 ], [ %58, %54 ]
  br i1 %60, label %61, label %65

61:                                               ; preds = %59
  br label %62

62:                                               ; preds = %61
  %63 = load i8*, i8** %6, align 8
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %64, i8** %6, align 8
  br label %49

65:                                               ; preds = %59
  %66 = load i8*, i8** %6, align 8
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %8, align 1
  %68 = load i8*, i8** %6, align 8
  store i8 0, i8* %68, align 1
  %69 = load i8*, i8** %7, align 8
  %70 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %71 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %70, i32 0, i32 4
  %72 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %73 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %72, i32 0, i32 3
  %74 = call i32 @parsebytes(i8* %69, i32* %71, i32* %73)
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %77, label %76

76:                                               ; preds = %65
  br label %129

77:                                               ; preds = %65
  %78 = load i8, i8* %8, align 1
  %79 = icmp ne i8 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  br label %129

81:                                               ; preds = %77
  %82 = load i8*, i8** %6, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %6, align 8
  store i8* %83, i8** %7, align 8
  br label %84

84:                                               ; preds = %89, %81
  %85 = load i8*, i8** %6, align 8
  %86 = load i8, i8* %85, align 1
  %87 = icmp ne i8 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %84
  br label %89

89:                                               ; preds = %88
  %90 = load i8*, i8** %6, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %6, align 8
  br label %84

92:                                               ; preds = %84
  %93 = load i8*, i8** %7, align 8
  %94 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %95 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %94, i32 0, i32 2
  %96 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %97 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %96, i32 0, i32 1
  %98 = call i32 @parsebytes(i8* %93, i32* %95, i32* %97)
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %101, label %100

100:                                              ; preds = %92
  br label %129

101:                                              ; preds = %92
  %102 = load %struct.TYPE_5__*, %struct.TYPE_5__** @kf, align 8
  store %struct.TYPE_5__* %102, %struct.TYPE_5__** %4, align 8
  br label %103

103:                                              ; preds = %114, %101
  %104 = load %struct.TYPE_5__*, %struct.TYPE_5__** %4, align 8
  %105 = icmp ne %struct.TYPE_5__* %104, null
  br i1 %105, label %106, label %111

106:                                              ; preds = %103
  %107 = load %struct.TYPE_5__*, %struct.TYPE_5__** %4, align 8
  %108 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %107, i32 0, i32 0
  %109 = load %struct.TYPE_5__*, %struct.TYPE_5__** %108, align 8
  %110 = icmp ne %struct.TYPE_5__* %109, null
  br label %111

111:                                              ; preds = %106, %103
  %112 = phi i1 [ false, %103 ], [ %110, %106 ]
  br i1 %112, label %113, label %118

113:                                              ; preds = %111
  br label %114

114:                                              ; preds = %113
  %115 = load %struct.TYPE_5__*, %struct.TYPE_5__** %4, align 8
  %116 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %115, i32 0, i32 0
  %117 = load %struct.TYPE_5__*, %struct.TYPE_5__** %116, align 8
  store %struct.TYPE_5__* %117, %struct.TYPE_5__** %4, align 8
  br label %103

118:                                              ; preds = %111
  %119 = load %struct.TYPE_5__*, %struct.TYPE_5__** %4, align 8
  %120 = icmp ne %struct.TYPE_5__* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %118
  %122 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  store %struct.TYPE_5__* %122, %struct.TYPE_5__** @kf, align 8
  br label %127

123:                                              ; preds = %118
  %124 = load %struct.TYPE_5__*, %struct.TYPE_5__** %5, align 8
  %125 = load %struct.TYPE_5__*, %struct.TYPE_5__** %4, align 8
  %126 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %125, i32 0, i32 0
  store %struct.TYPE_5__* %124, %struct.TYPE_5__** %126, align 8
  br label %127

127:                                              ; preds = %123, %121
  %128 = load i32, i32* @True, align 4
  store i32 %128, i32* %2, align 4
  br label %133

129:                                              ; preds = %100, %80, %76, %45
  %130 = call i32 @err(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %131 = call i32 @delk(%struct.TYPE_5__** %5)
  %132 = load i32, i32* @False, align 4
  store i32 %132, i32* %2, align 4
  br label %133

133:                                              ; preds = %129, %127
  %134 = load i32, i32* %2, align 4
  ret i32 %134
}

declare dso_local %struct.TYPE_5__* @calloc(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @abort(...) #2

declare dso_local i32 @strtoull(i8*, i32, i32) #1

declare dso_local i32 @parsebytes(i8*, i32*, i32*) #1

declare dso_local i32 @err(i8*) #1

declare dso_local i32 @delk(%struct.TYPE_5__**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
