; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_cleanup.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/plan9/local/extr_3383.c_cleanup.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_4__* }

@us = common dso_local global i64 0, align 8
@seg = common dso_local global i64 0, align 8
@them = common dso_local global i64 0, align 8
@outfile = common dso_local global i64 0, align 8
@envpath = common dso_local global i64 0, align 8
@envfd = common dso_local global i64 0, align 8
@outfd = common dso_local global i64 0, align 8
@kf = common dso_local global %struct.TYPE_4__* null, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @cleanup to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cleanup() #0 {
  %1 = alloca %struct.TYPE_4__*, align 8
  %2 = alloca %struct.TYPE_4__*, align 8
  %3 = load i64, i64* @us, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %0
  %6 = load i64, i64* @us, align 8
  %7 = call i32 @free(i64 %6)
  br label %8

8:                                                ; preds = %5, %0
  %9 = load i64, i64* @seg, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = load i64, i64* @seg, align 8
  %13 = call i32 @free(i64 %12)
  br label %14

14:                                               ; preds = %11, %8
  %15 = load i64, i64* @them, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = load i64, i64* @them, align 8
  %19 = call i32 @free(i64 %18)
  br label %20

20:                                               ; preds = %17, %14
  %21 = load i64, i64* @outfile, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %20
  %24 = load i64, i64* @outfile, align 8
  %25 = call i32 @free(i64 %24)
  br label %26

26:                                               ; preds = %23, %20
  %27 = load i64, i64* @envpath, align 8
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = load i64, i64* @envpath, align 8
  %31 = call i32 @free(i64 %30)
  br label %32

32:                                               ; preds = %29, %26
  %33 = load i64, i64* @envfd, align 8
  %34 = icmp sgt i64 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = load i64, i64* @envfd, align 8
  %37 = call i32 @close(i64 %36)
  br label %38

38:                                               ; preds = %35, %32
  %39 = load i64, i64* @outfd, align 8
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  %42 = load i64, i64* @outfd, align 8
  %43 = call i32 @close(i64 %42)
  br label %44

44:                                               ; preds = %41, %38
  %45 = load %struct.TYPE_4__*, %struct.TYPE_4__** @kf, align 8
  store %struct.TYPE_4__* %45, %struct.TYPE_4__** %1, align 8
  br label %46

46:                                               ; preds = %54, %44
  %47 = load %struct.TYPE_4__*, %struct.TYPE_4__** %1, align 8
  %48 = icmp ne %struct.TYPE_4__* %47, null
  br i1 %48, label %49, label %56

49:                                               ; preds = %46
  %50 = load %struct.TYPE_4__*, %struct.TYPE_4__** %1, align 8
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i32 0, i32 0
  %52 = load %struct.TYPE_4__*, %struct.TYPE_4__** %51, align 8
  store %struct.TYPE_4__* %52, %struct.TYPE_4__** %2, align 8
  %53 = call i32 @delk(%struct.TYPE_4__** %1)
  br label %54

54:                                               ; preds = %49
  %55 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  store %struct.TYPE_4__* %55, %struct.TYPE_4__** %1, align 8
  br label %46

56:                                               ; preds = %46
  ret void
}

declare dso_local i32 @free(i64) #1

declare dso_local i32 @close(i64) #1

declare dso_local i32 @delk(%struct.TYPE_4__**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
