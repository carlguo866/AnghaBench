; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sock_stat = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"ogin:\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"sername:\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"n0login\00", align 1
@.str.3 = private unnamed_addr constant [60 x i8] c"%s username needed... give me a username next time :)\0A\0A\1B[0m\00", align 1
@BOX = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [43 x i8] c"%s login requested. sending [%s] and [%s]\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"assword:\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"%s only password needed. sending [%s]\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"assword\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"%s seems we are logged in :)\0A\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"%s sorry... [%s] is not a good password for login :?n\1B[0m\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @login(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = call i8* @malloc(i32 4000)
  store i8* %8, i8** %6, align 8
  br label %9

9:                                                ; preds = %43, %2
  %10 = load i32, i32* @sock_stat, align 4
  %11 = load i8*, i8** %6, align 8
  %12 = call i64 @read(i32 %10, i8* %11, i32 4000)
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %14, label %46

14:                                               ; preds = %9
  %15 = load i8*, i8** %6, align 8
  %16 = call i64 @strstr(i8* %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = load i8*, i8** %6, align 8
  %20 = call i64 @strstr(i8* %19, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %35

22:                                               ; preds = %18, %14
  %23 = load i8*, i8** %4, align 8
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = load i8*, i8** @BOX, align 8
  %28 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 0) #3
  unreachable

30:                                               ; preds = %22
  %31 = load i8*, i8** @BOX, align 8
  %32 = load i8*, i8** %4, align 8
  %33 = load i8*, i8** %5, align 8
  %34 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i64 0, i64 0), i8* %31, i8* %32, i8* %33)
  store i32 1, i32* %7, align 4
  br label %46

35:                                               ; preds = %18
  %36 = load i8*, i8** %6, align 8
  %37 = call i64 @strstr(i8* %36, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %35
  %40 = load i8*, i8** @BOX, align 8
  %41 = load i8*, i8** %5, align 8
  %42 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0), i8* %40, i8* %41)
  store i32 0, i32* %7, align 4
  br label %46

43:                                               ; preds = %35
  %44 = load i8*, i8** %6, align 8
  %45 = call i32 @bzero(i8* %44, i32 4000)
  br label %9

46:                                               ; preds = %39, %30, %9
  %47 = load i32, i32* %7, align 4
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %69

49:                                               ; preds = %46
  %50 = load i32, i32* @sock_stat, align 4
  %51 = load i8*, i8** %4, align 8
  %52 = load i8*, i8** %4, align 8
  %53 = call i32 @strlen(i8* %52)
  %54 = call i32 @write(i32 %50, i8* %51, i32 %53)
  %55 = load i32, i32* @sock_stat, align 4
  %56 = call i32 @write(i32 %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  br label %57

57:                                               ; preds = %49
  %58 = load i32, i32* @sock_stat, align 4
  %59 = load i8*, i8** %6, align 8
  %60 = call i64 @read(i32 %58, i8* %59, i32 4000)
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = load i8*, i8** %6, align 8
  %64 = call i64 @strstr(i8* %63, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  br label %67

67:                                               ; preds = %66, %62
  br label %68

68:                                               ; preds = %67, %57
  br label %69

69:                                               ; preds = %68, %46
  %70 = load i32, i32* @sock_stat, align 4
  %71 = load i8*, i8** %5, align 8
  %72 = load i8*, i8** %5, align 8
  %73 = call i32 @strlen(i8* %72)
  %74 = call i32 @write(i32 %70, i8* %71, i32 %73)
  %75 = load i32, i32* @sock_stat, align 4
  %76 = call i32 @write(i32 %75, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  %77 = call i32 @sleep(i32 2)
  %78 = load i8*, i8** %6, align 8
  %79 = call i32 @bzero(i8* %78, i32 4000)
  br label %80

80:                                               ; preds = %101, %69
  %81 = load i32, i32* @sock_stat, align 4
  %82 = load i8*, i8** %6, align 8
  %83 = call i64 @read(i32 %81, i8* %82, i32 4000)
  %84 = icmp sgt i64 %83, 0
  br i1 %84, label %85, label %104

85:                                               ; preds = %80
  %86 = load i8*, i8** %6, align 8
  %87 = call i64 @strstr(i8* %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = load i8*, i8** @BOX, align 8
  %91 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i8* %90)
  br label %104

92:                                               ; preds = %85
  %93 = load i8*, i8** %6, align 8
  %94 = call i64 @strstr(i8* %93, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %92
  %97 = load i8*, i8** @BOX, align 8
  %98 = load i8*, i8** %5, align 8
  %99 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0), i8* %97, i8* %98)
  %100 = call i32 @exit(i32 0) #3
  unreachable

101:                                              ; preds = %92
  %102 = load i8*, i8** %6, align 8
  %103 = call i32 @bzero(i8* %102, i32 4000)
  br label %80

104:                                              ; preds = %89, %80
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
