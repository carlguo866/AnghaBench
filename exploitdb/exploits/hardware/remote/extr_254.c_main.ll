; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIGINT = common dso_local global i32 0, align 4
@sig = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"23\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@BOX = common dso_local global i8* null, align 8
@host = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"n0login\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i32, i32* @SIGINT, align 4
  %8 = load i32, i32* @sig, align 4
  %9 = call i32 @signal(i32 %7, i32 %8)
  %10 = call i32 (...) @banner()
  %11 = load i32, i32* %4, align 4
  %12 = icmp sle i32 %11, 3
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = load i32, i32* %4, align 4
  %15 = icmp sge i32 %14, 8
  br i1 %15, label %16, label %22

16:                                               ; preds = %13, %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @usage(i8* %19)
  %21 = call i32 @exit(i32 0) #3
  unreachable

22:                                               ; preds = %13
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 2
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %60, label %28

28:                                               ; preds = %22
  %29 = load i32, i32* %4, align 4
  %30 = icmp eq i32 %29, 6
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = call i32 @atoi(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32 %32, i32* %6, align 4
  br label %38

33:                                               ; preds = %28
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 6
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  store i32 %37, i32* %6, align 4
  br label %38

38:                                               ; preds = %33, %31
  %39 = load i8*, i8** @BOX, align 8
  %40 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %39)
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 5
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @loadwordlist(i8* %43)
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @resolve(i8* %47)
  %49 = load i32, i32* @host, align 4
  %50 = load i32, i32* %6, align 4
  %51 = call i32 @sock(i32 %49, i32 %50)
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 3
  %54 = load i8*, i8** %53, align 8
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 4
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @login(i8* %54, i8* %57)
  %59 = call i32 (...) @brute()
  br label %89

60:                                               ; preds = %22
  %61 = load i32, i32* %4, align 4
  %62 = icmp eq i32 %61, 4
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = call i32 @atoi(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32 %64, i32* %6, align 4
  br label %70

65:                                               ; preds = %60
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 4
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @atoi(i8* %68)
  store i32 %69, i32* %6, align 4
  br label %70

70:                                               ; preds = %65, %63
  %71 = load i8*, i8** @BOX, align 8
  %72 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %71)
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 3
  %75 = load i8*, i8** %74, align 8
  %76 = call i32 @loadwordlist(i8* %75)
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 1
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 @resolve(i8* %79)
  %81 = load i32, i32* @host, align 4
  %82 = load i32, i32* %6, align 4
  %83 = call i32 @sock(i32 %81, i32 %82)
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 2
  %86 = load i8*, i8** %85, align 8
  %87 = call i32 @login(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %86)
  %88 = call i32 (...) @brute()
  br label %89

89:                                               ; preds = %70, %38
  %90 = load i32, i32* %3, align 4
  ret i32 %90
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @banner(...) #1

declare dso_local i32 @usage(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @loadwordlist(i8*) #1

declare dso_local i32 @resolve(i8*) #1

declare dso_local i32 @sock(i32, i32) #1

declare dso_local i32 @login(i8*, i8*) #1

declare dso_local i32 @brute(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
