; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_24115.c_ascii_print_with_offset.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_24115.c_ascii_print_with_offset.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HEXDUMP_SHORTS_PER_LINE = common dso_local global i32 0, align 4
@HEXDUMP_HEXSTUFF_PER_SHORT = common dso_local global i32 0, align 4
@HEXDUMP_BYTES_PER_LINE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"01;32\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c" %02x%02x\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"\0A0x%04x\09%-*s \00", align 1
@HEXDUMP_HEXSTUFF_PER_LINE = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [6 x i8] c"\1B[%sm\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\1B[00m\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c" %02x\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ascii_print_with_offset(i32* %0, i32 %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  store i32* %0, i32** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %6, align 4
  store i32 0, i32* %9, align 4
  %17 = load i32, i32* @HEXDUMP_SHORTS_PER_LINE, align 4
  %18 = load i32, i32* @HEXDUMP_HEXSTUFF_PER_SHORT, align 4
  %19 = mul nsw i32 %17, %18
  %20 = add nsw i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %11, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %12, align 8
  %24 = load i32, i32* @HEXDUMP_BYTES_PER_LINE, align 4
  %25 = add nsw i32 %24, 1
  %26 = zext i32 %25 to i64
  %27 = alloca i8, i64 %26, align 16
  store i64 %26, i64* %14, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %16, align 8
  %28 = load i32, i32* %4, align 4
  %29 = sext i32 %28 to i64
  %30 = udiv i64 %29, 4
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %10, align 4
  store i32 0, i32* %5, align 4
  store i8* %23, i8** %13, align 8
  store i8* %27, i8** %15, align 8
  br label %32

32:                                               ; preds = %108, %2
  %33 = load i32, i32* %10, align 4
  %34 = add nsw i32 %33, -1
  store i32 %34, i32* %10, align 4
  %35 = icmp sge i32 %34, 0
  br i1 %35, label %36, label %109

36:                                               ; preds = %32
  %37 = load i32*, i32** %3, align 8
  %38 = getelementptr inbounds i32, i32* %37, i32 1
  store i32* %38, i32** %3, align 8
  %39 = load i32, i32* %37, align 4
  store i32 %39, i32* %7, align 4
  %40 = load i32*, i32** %3, align 8
  %41 = getelementptr inbounds i32, i32* %40, i32 1
  store i32* %41, i32** %3, align 8
  %42 = load i32, i32* %40, align 4
  store i32 %42, i32* %8, align 4
  %43 = load i8*, i8** %13, align 8
  %44 = load i8*, i8** %13, align 8
  %45 = ptrtoint i8* %44 to i64
  %46 = ptrtoint i8* %23 to i64
  %47 = sub i64 %45, %46
  %48 = sub i64 %21, %47
  %49 = trunc i64 %48 to i32
  %50 = load i32, i32* %7, align 4
  %51 = load i32, i32* %8, align 4
  %52 = call i32 (i8*, i32, i8*, i32, ...) @snprintf(i8* %43, i32 %49, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %50, i32 %51)
  %53 = load i32, i32* @HEXDUMP_HEXSTUFF_PER_SHORT, align 4
  %54 = load i8*, i8** %13, align 8
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds i8, i8* %54, i64 %55
  store i8* %56, i8** %13, align 8
  %57 = load i32, i32* %7, align 4
  %58 = trunc i32 %57 to i8
  %59 = load i8*, i8** %15, align 8
  %60 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %60, i8** %15, align 8
  store i8 %58, i8* %59, align 1
  %61 = load i32, i32* %8, align 4
  %62 = trunc i32 %61 to i8
  %63 = load i8*, i8** %15, align 8
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %64, i8** %15, align 8
  store i8 %62, i8* %63, align 1
  %65 = load i32, i32* %5, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %5, align 4
  %67 = load i32, i32* @HEXDUMP_SHORTS_PER_LINE, align 4
  %68 = icmp sge i32 %66, %67
  br i1 %68, label %69, label %108

69:                                               ; preds = %36
  %70 = load i8*, i8** %15, align 8
  store i8 0, i8* %70, align 1
  %71 = load i8*, i8** %13, align 8
  store i8 0, i8* %71, align 1
  %72 = load i32, i32* %6, align 4
  %73 = load i8*, i8** @HEXDUMP_HEXSTUFF_PER_LINE, align 8
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 %72, i8* %73, i8* %23)
  store i32 0, i32* %9, align 4
  br label %75

75:                                               ; preds = %101, %69
  %76 = load i32, i32* %9, align 4
  %77 = sext i32 %76 to i64
  %78 = sub i64 %26, 1
  %79 = icmp ult i64 %77, %78
  br i1 %79, label %80, label %104

80:                                               ; preds = %75
  %81 = load i32, i32* %9, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %27, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = call i64 @isprint(i8 signext %84)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %98

87:                                               ; preds = %80
  %88 = load i8*, i8** %16, align 8
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* %88)
  %90 = load i32, i32* %9, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %27, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 %94)
  %96 = load i32, i32* @stdout, align 4
  %97 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 %96)
  br label %100

98:                                               ; preds = %80
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  br label %100

100:                                              ; preds = %98, %87
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* %9, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %9, align 4
  br label %75

104:                                              ; preds = %75
  store i32 0, i32* %5, align 4
  store i8* %23, i8** %13, align 8
  store i8* %27, i8** %15, align 8
  %105 = load i32, i32* @HEXDUMP_BYTES_PER_LINE, align 4
  %106 = load i32, i32* %6, align 4
  %107 = add nsw i32 %106, %105
  store i32 %107, i32* %6, align 4
  br label %108

108:                                              ; preds = %104, %36
  br label %32

109:                                              ; preds = %32
  %110 = load i32, i32* %4, align 4
  %111 = and i32 %110, 1
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %134

113:                                              ; preds = %109
  %114 = load i32*, i32** %3, align 8
  %115 = getelementptr inbounds i32, i32* %114, i32 1
  store i32* %115, i32** %3, align 8
  %116 = load i32, i32* %114, align 4
  store i32 %116, i32* %7, align 4
  %117 = load i8*, i8** %13, align 8
  %118 = load i8*, i8** %13, align 8
  %119 = ptrtoint i8* %118 to i64
  %120 = ptrtoint i8* %23 to i64
  %121 = sub i64 %119, %120
  %122 = sub i64 %21, %121
  %123 = trunc i64 %122 to i32
  %124 = load i32, i32* %7, align 4
  %125 = call i32 (i8*, i32, i8*, i32, ...) @snprintf(i8* %117, i32 %123, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 %124)
  %126 = load i8*, i8** %13, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 3
  store i8* %127, i8** %13, align 8
  %128 = load i32, i32* %7, align 4
  %129 = trunc i32 %128 to i8
  %130 = load i8*, i8** %15, align 8
  %131 = getelementptr inbounds i8, i8* %130, i32 1
  store i8* %131, i8** %15, align 8
  store i8 %129, i8* %130, align 1
  %132 = load i32, i32* %5, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %5, align 4
  br label %134

134:                                              ; preds = %113, %109
  %135 = load i32, i32* %5, align 4
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %182

137:                                              ; preds = %134
  %138 = load i8*, i8** %15, align 8
  store i8 0, i8* %138, align 1
  %139 = load i8*, i8** %13, align 8
  store i8 0, i8* %139, align 1
  %140 = load i32, i32* %6, align 4
  %141 = load i8*, i8** @HEXDUMP_HEXSTUFF_PER_LINE, align 8
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 %140, i8* %141, i8* %23)
  store i32 0, i32* %9, align 4
  br label %143

143:                                              ; preds = %178, %137
  %144 = load i32, i32* %9, align 4
  %145 = sext i32 %144 to i64
  %146 = sub i64 %26, 1
  %147 = icmp ult i64 %145, %146
  br i1 %147, label %148, label %155

148:                                              ; preds = %143
  %149 = load i32, i32* %9, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %27, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp ne i32 %153, 0
  br label %155

155:                                              ; preds = %148, %143
  %156 = phi i1 [ false, %143 ], [ %154, %148 ]
  br i1 %156, label %157, label %181

157:                                              ; preds = %155
  %158 = load i32, i32* %9, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %27, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = call i64 @isgraph(i8 signext %161)
  %163 = icmp ne i64 %162, 0
  br i1 %163, label %164, label %175

164:                                              ; preds = %157
  %165 = load i8*, i8** %16, align 8
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* %165)
  %167 = load i32, i32* %9, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %27, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 %171)
  %173 = load i32, i32* @stdout, align 4
  %174 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 %173)
  br label %177

175:                                              ; preds = %157
  %176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  br label %177

177:                                              ; preds = %175, %164
  br label %178

178:                                              ; preds = %177
  %179 = load i32, i32* %9, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %9, align 4
  br label %143

181:                                              ; preds = %155
  br label %182

182:                                              ; preds = %181, %134
  %183 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %183)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i32, ...) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @isprint(i8 signext) #2

declare dso_local i32 @fputs(i8*, i32) #2

declare dso_local i64 @isgraph(i8 signext) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
