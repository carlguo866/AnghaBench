; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6366.c_sendudp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_6366.c_sendudp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i64 }
%struct.iphdr = type { i64, i64, i32, i32, i32, i32, i8*, i32, i8* }
%struct.udphdr = type { i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [15 x i8] c"Malloc failed\0A\00", align 1
@IPPROTO_UDP = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"sendto() failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sendudp(i32 %0, i64* %1, i64* %2, i32 %3, i32 %4, i8* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca %struct.sockaddr_in, align 8
  %18 = alloca %struct.iphdr*, align 8
  %19 = alloca %struct.udphdr*, align 8
  store i32 %0, i32* %9, align 4
  store i64* %1, i64** %10, align 8
  store i64* %2, i64** %11, align 8
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i8* %5, i8** %14, align 8
  store i32 %6, i32* %15, align 4
  %20 = load i32, i32* %15, align 4
  %21 = sext i32 %20 to i64
  %22 = add i64 80, %21
  %23 = trunc i64 %22 to i32
  %24 = call i64 @malloc(i32 %23)
  %25 = inttoptr i64 %24 to i8*
  store i8* %25, i8** %16, align 8
  %26 = load i8*, i8** %16, align 8
  %27 = load i32, i32* %15, align 4
  %28 = sext i32 %27 to i64
  %29 = add i64 80, %28
  %30 = trunc i64 %29 to i32
  %31 = call i32 @memset(i8* %26, i32 0, i32 %30)
  %32 = load i8*, i8** %16, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %7
  %35 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %36 = call i32 @exit(i32 -1) #3
  unreachable

37:                                               ; preds = %7
  %38 = load i8*, i8** %16, align 8
  %39 = bitcast i8* %38 to %struct.iphdr*
  store %struct.iphdr* %39, %struct.iphdr** %18, align 8
  %40 = load i8*, i8** %16, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 56
  %42 = bitcast i8* %41 to %struct.udphdr*
  store %struct.udphdr* %42, %struct.udphdr** %19, align 8
  %43 = load i64*, i64** %10, align 8
  %44 = load i64, i64* %43, align 8
  %45 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %46 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %45, i32 0, i32 0
  store i64 %44, i64* %46, align 8
  %47 = load i64*, i64** %11, align 8
  %48 = load i64, i64* %47, align 8
  %49 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %50 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %49, i32 0, i32 1
  store i64 %48, i64* %50, align 8
  %51 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %52 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %51, i32 0, i32 2
  store i32 4, i32* %52, align 8
  %53 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %54 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %53, i32 0, i32 3
  store i32 5, i32* %54, align 4
  %55 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 4
  store i32 255, i32* %56, align 8
  %57 = call i64 (...) @rand()
  %58 = trunc i64 %57 to i16
  %59 = zext i16 %58 to i32
  %60 = call i8* @htons(i32 %59)
  %61 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %62 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %61, i32 0, i32 8
  store i8* %60, i8** %62, align 8
  %63 = load i32, i32* @IPPROTO_UDP, align 4
  %64 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %65 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %64, i32 0, i32 7
  store i32 %63, i32* %65, align 8
  %66 = load i32, i32* %15, align 4
  %67 = sext i32 %66 to i64
  %68 = add i64 80, %67
  %69 = trunc i64 %68 to i32
  %70 = call i8* @htons(i32 %69)
  %71 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %72 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %71, i32 0, i32 6
  store i8* %70, i8** %72, align 8
  %73 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %74 = call i32 @in_cksum(%struct.iphdr* %73, i32 56)
  %75 = load %struct.iphdr*, %struct.iphdr** %18, align 8
  %76 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %75, i32 0, i32 5
  store i32 %74, i32* %76, align 4
  %77 = load i32, i32* %12, align 4
  %78 = call i8* @htons(i32 %77)
  %79 = load %struct.udphdr*, %struct.udphdr** %19, align 8
  %80 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %79, i32 0, i32 2
  store i8* %78, i8** %80, align 8
  %81 = load i32, i32* %13, align 4
  %82 = call i8* @htons(i32 %81)
  %83 = load %struct.udphdr*, %struct.udphdr** %19, align 8
  %84 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %83, i32 0, i32 1
  store i8* %82, i8** %84, align 8
  %85 = load i32, i32* %15, align 4
  %86 = sext i32 %85 to i64
  %87 = add i64 24, %86
  %88 = trunc i64 %87 to i32
  %89 = call i8* @htons(i32 %88)
  %90 = load %struct.udphdr*, %struct.udphdr** %19, align 8
  %91 = getelementptr inbounds %struct.udphdr, %struct.udphdr* %90, i32 0, i32 0
  store i8* %89, i8** %91, align 8
  %92 = load i8*, i8** %16, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 80
  %94 = load i8*, i8** %14, align 8
  %95 = load i32, i32* %15, align 4
  %96 = call i32 @memcpy(i8* %93, i8* %94, i32 %95)
  %97 = load i32, i32* @AF_INET, align 4
  %98 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  store i32 %97, i32* %98, align 8
  %99 = load i64*, i64** %11, align 8
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  %102 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %101, i32 0, i32 0
  store i64 %100, i64* %102, align 8
  %103 = load i32, i32* %9, align 4
  %104 = load i8*, i8** %16, align 8
  %105 = load i32, i32* %15, align 4
  %106 = sext i32 %105 to i64
  %107 = add i64 80, %106
  %108 = trunc i64 %107 to i32
  %109 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %110 = call i64 @sendto(i32 %103, i8* %104, i32 %108, i32 0, %struct.sockaddr* %109, i32 16)
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %37
  %113 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  br label %114

114:                                              ; preds = %112, %37
  %115 = load i8*, i8** %16, align 8
  %116 = call i32 @free(i8* %115)
  %117 = load i32, i32* %8, align 4
  ret i32 %117
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @htons(i32) #1

declare dso_local i64 @rand(...) #1

declare dso_local i32 @in_cksum(%struct.iphdr*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
