; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_loadwordlist.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/remote/extr_254.c_loadwordlist.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"%s sorry, unable to open the passlist [%s]\0A\1B[0m\0A\00", align 1
@BOX = common dso_local global i8* null, align 8
@SEEK_END = common dso_local global i32 0, align 4
@password = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [85 x i8] c"%s sorry, can't allocate memory for passlist. buy more ram or cut the passlist\0A\1B[0m\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@x = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [73 x i8] c"%s sorry, but passlist must contain at least 3 passwords. leaving \0A\1B[0m\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @loadwordlist(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca [32 x i8], align 16
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = call i32* @fopen(i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32* %10, i32** %4, align 8
  %11 = icmp eq i32* %10, null
  br i1 %11, label %12, label %17

12:                                               ; preds = %1
  %13 = load i8*, i8** @BOX, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %14)
  %16 = call i32 @exit(i32 0) #3
  unreachable

17:                                               ; preds = %1
  %18 = load i32*, i32** %4, align 8
  %19 = load i32, i32* @SEEK_END, align 4
  %20 = call i32 @fseek(i32* %18, i64 0, i32 %19)
  %21 = load i32*, i32** %4, align 8
  %22 = call i32 @ftell(i32* %21)
  %23 = call i8* @malloc(i32 %22)
  %24 = bitcast i8* %23 to i32*
  store i32* %24, i32** @password, align 8
  %25 = load i32*, i32** @password, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %17
  %28 = load i8*, i8** @BOX, align 8
  %29 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.2, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 0) #3
  unreachable

31:                                               ; preds = %17
  %32 = load i32*, i32** %4, align 8
  %33 = load i32, i32* @SEEK_SET, align 4
  %34 = call i32 @fseek(i32* %32, i64 0, i32 %33)
  br label %35

35:                                               ; preds = %75, %53, %31
  %36 = load i32*, i32** %4, align 8
  %37 = call i32 @feof(i32* %36)
  %38 = icmp ne i32 %37, 0
  %39 = xor i1 %38, true
  br i1 %39, label %40, label %91

40:                                               ; preds = %35
  %41 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %42 = load i32*, i32** %4, align 8
  %43 = call i32 @fgets(i8* %41, i32 32, i32* %42)
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %45 = load i8, i8* %44, align 16
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 35
  br i1 %47, label %53, label %48

48:                                               ; preds = %40
  %49 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %50 = load i8, i8* %49, align 16
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 10
  br i1 %52, label %53, label %54

53:                                               ; preds = %48, %40
  br label %35

54:                                               ; preds = %48
  store i32 0, i32* %7, align 4
  br label %55

55:                                               ; preds = %72, %54
  %56 = load i32, i32* %7, align 4
  %57 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %58 = call i32 @strlen(i8* %57)
  %59 = icmp slt i32 %56, %58
  br i1 %59, label %60, label %75

60:                                               ; preds = %55
  %61 = load i32, i32* %7, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, 10
  br i1 %66, label %67, label %71

67:                                               ; preds = %60
  %68 = load i32, i32* %7, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %69
  store i8 0, i8* %70, align 1
  br label %71

71:                                               ; preds = %67, %60
  br label %72

72:                                               ; preds = %71
  %73 = load i32, i32* %7, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %7, align 4
  br label %55

75:                                               ; preds = %55
  %76 = call i8* @malloc(i32 32)
  %77 = ptrtoint i8* %76 to i32
  %78 = load i32*, i32** @password, align 8
  %79 = load i64, i64* @x, align 8
  %80 = getelementptr inbounds i32, i32* %78, i64 %79
  store i32 %77, i32* %80, align 4
  %81 = load i32*, i32** @password, align 8
  %82 = load i64, i64* @x, align 8
  %83 = getelementptr inbounds i32, i32* %81, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %86 = call i32 @strcpy(i32 %84, i8* %85)
  %87 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  %88 = call i32 @memset(i8* %87, i32 0, i32 32)
  %89 = load i64, i64* @x, align 8
  %90 = add i64 %89, 1
  store i64 %90, i64* @x, align 8
  br label %35

91:                                               ; preds = %35
  %92 = load i32*, i32** @password, align 8
  %93 = load i64, i64* @x, align 8
  %94 = getelementptr inbounds i32, i32* %92, i64 %93
  store i32 0, i32* %94, align 4
  %95 = load i32*, i32** %4, align 8
  %96 = call i32 @fclose(i32* %95)
  %97 = load i64, i64* @x, align 8
  %98 = icmp ult i64 %97, 4
  br i1 %98, label %99, label %103

99:                                               ; preds = %91
  %100 = load i8*, i8** @BOX, align 8
  %101 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.3, i64 0, i64 0), i8* %100)
  %102 = call i32 @exit(i32 0) #3
  unreachable

103:                                              ; preds = %91
  %104 = load i32, i32* %2, align 4
  ret i32 %104
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fseek(i32*, i64, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @ftell(i32*) #1

declare dso_local i32 @feof(i32*) #1

declare dso_local i32 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i32, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
