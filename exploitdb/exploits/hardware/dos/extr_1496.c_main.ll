; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1496.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_1496.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"D:d:s:a:b:h\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [37 x i8] c"\0A----------------------------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"      -=    D-Link DoS PoC     =-\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"          Aaron Portnoy\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"       deft () thunkers ! net     \0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"   silc.thunkers.net, thunkers\0A\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"----------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"\0ADevice: \09%s\0A\00", align 1
@DEVICE = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [13 x i8] c"SRC IP: \09%s\0A\00", align 1
@SRC_IP = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [13 x i8] c"DST IP: \09%s\0A\00", align 1
@DST_IP = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [13 x i8] c"SPort: \09\09%d\0A\00", align 1
@SRC_PRT = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [14 x i8] c"DPort: \09\09%d\0A\0A\00", align 1
@DST_PRT = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i8* null, i8** %9, align 8
  store i8* null, i8** %8, align 8
  store i8* null, i8** %7, align 8
  br label %12

12:                                               ; preds = %37, %2
  %13 = load i32, i32* %4, align 4
  %14 = load i8**, i8*** %5, align 8
  %15 = call i32 @getopt(i32 %13, i8** %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0))
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* @EOF, align 4
  %17 = icmp ne i32 %15, %16
  br i1 %17, label %18, label %38

18:                                               ; preds = %12
  %19 = load i32, i32* %6, align 4
  switch i32 %19, label %37 [
    i32 68, label %20
    i32 100, label %22
    i32 115, label %24
    i32 97, label %26
    i32 98, label %29
    i32 104, label %32
  ]

20:                                               ; preds = %18
  %21 = load i8*, i8** @optarg, align 8
  store i8* %21, i8** %9, align 8
  br label %37

22:                                               ; preds = %18
  %23 = load i8*, i8** @optarg, align 8
  store i8* %23, i8** %7, align 8
  br label %37

24:                                               ; preds = %18
  %25 = load i8*, i8** @optarg, align 8
  store i8* %25, i8** %8, align 8
  br label %37

26:                                               ; preds = %18
  %27 = load i8*, i8** @optarg, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %11, align 4
  br label %37

29:                                               ; preds = %18
  %30 = load i8*, i8** @optarg, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %10, align 4
  br label %37

32:                                               ; preds = %18
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 0
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @usage(i8* %35)
  br label %37

37:                                               ; preds = %18, %32, %29, %26, %24, %22, %20
  br label %12

38:                                               ; preds = %12
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0))
  %45 = load i8*, i8** %9, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %47, label %50

47:                                               ; preds = %38
  %48 = load i8*, i8** %9, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i8* %48)
  br label %53

50:                                               ; preds = %38
  %51 = load i8*, i8** @DEVICE, align 8
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i8* %51)
  br label %53

53:                                               ; preds = %50, %47
  %54 = phi i32 [ %49, %47 ], [ %52, %50 ]
  %55 = load i8*, i8** %8, align 8
  %56 = icmp ne i8* %55, null
  br i1 %56, label %57, label %60

57:                                               ; preds = %53
  %58 = load i8*, i8** %8, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i8* %58)
  br label %63

60:                                               ; preds = %53
  %61 = load i8*, i8** @SRC_IP, align 8
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i8* %61)
  br label %63

63:                                               ; preds = %60, %57
  %64 = phi i32 [ %59, %57 ], [ %62, %60 ]
  %65 = load i8*, i8** %7, align 8
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %70

67:                                               ; preds = %63
  %68 = load i8*, i8** %7, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %68)
  br label %73

70:                                               ; preds = %63
  %71 = load i8*, i8** @DST_IP, align 8
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* %71)
  br label %73

73:                                               ; preds = %70, %67
  %74 = phi i32 [ %69, %67 ], [ %72, %70 ]
  %75 = load i32, i32* %11, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %73
  %78 = load i32, i32* %11, align 4
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i32 %78)
  br label %83

80:                                               ; preds = %73
  %81 = load i32, i32* @SRC_PRT, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i32 %81)
  br label %83

83:                                               ; preds = %80, %77
  %84 = phi i32 [ %79, %77 ], [ %82, %80 ]
  %85 = load i32, i32* %10, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %83
  %88 = load i32, i32* %10, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 %88)
  br label %93

90:                                               ; preds = %83
  %91 = load i32, i32* @DST_PRT, align 4
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 %91)
  br label %93

93:                                               ; preds = %90, %87
  %94 = phi i32 [ %89, %87 ], [ %92, %90 ]
  store i32 1, i32* %6, align 4
  br label %95

95:                                               ; preds = %106, %93
  %96 = load i32, i32* %6, align 4
  %97 = icmp sle i32 %96, 3
  br i1 %97, label %98, label %109

98:                                               ; preds = %95
  %99 = load i8*, i8** %9, align 8
  %100 = load i8*, i8** %8, align 8
  %101 = load i8*, i8** %7, align 8
  %102 = load i32, i32* %11, align 4
  %103 = load i32, i32* %10, align 4
  %104 = load i32, i32* %6, align 4
  %105 = call i32 @gen_packet(i8* %99, i8* %100, i8* %101, i32 %102, i32 %103, i32 %104)
  br label %106

106:                                              ; preds = %98
  %107 = load i32, i32* %6, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %6, align 4
  br label %95

109:                                              ; preds = %95
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %111 = load i32, i32* @EXIT_SUCCESS, align 4
  ret i32 %111
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @gen_packet(i8*, i8*, i8*, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
