; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_43317.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_43317.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32, i32 (i32)* }

@dstaddr = common dso_local global i32 0, align 4
@a_flags = common dso_local global i32 0, align 4
@src_ep = common dso_local global i64 0, align 8
@src_sp = common dso_local global i64 0, align 8
@dst_ep = common dso_local global i64 0, align 8
@dst_sp = common dso_local global i64 0, align 8
@dst_class = common dso_local global i32* null, align 8
@src_class = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"Is:h:\00", align 1
@cicmp = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@rawsock = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@a_list = common dso_local global %struct.TYPE_2__* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %8, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* @dstaddr, align 4
  store i32 0, i32* @a_flags, align 4
  store i64 0, i64* @src_ep, align 8
  store i64 0, i64* @src_sp, align 8
  store i64 0, i64* @dst_ep, align 8
  store i64 0, i64* @dst_sp, align 8
  store i32 -1, i32* %9, align 4
  store i32 -1, i32* %10, align 4
  store i32* null, i32** @dst_class, align 8
  store i32 0, i32* @src_class, align 4
  br label %12

12:                                               ; preds = %31, %2
  %13 = load i32, i32* %4, align 4
  %14 = load i8**, i8*** %5, align 8
  %15 = call i32 @getopt(i32 %13, i8** %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 %15, i32* %6, align 4
  %16 = icmp ne i32 %15, -1
  br i1 %16, label %17, label %32

17:                                               ; preds = %12
  %18 = load i32, i32* %6, align 4
  switch i32 %18, label %26 [
    i32 73, label %19
    i32 104, label %23
  ]

19:                                               ; preds = %17
  %20 = load i32, i32* @cicmp, align 4
  %21 = load i32, i32* @a_flags, align 4
  %22 = or i32 %21, %20
  store i32 %22, i32* @a_flags, align 4
  br label %31

23:                                               ; preds = %17
  %24 = load i32, i32* @optarg, align 4
  %25 = call i32 @change(i32 %24)
  store i32 %25, i32* @dstaddr, align 4
  br label %31

26:                                               ; preds = %17
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @usage(i8* %29)
  br label %31

31:                                               ; preds = %26, %23, %19
  br label %12

32:                                               ; preds = %12
  %33 = load i32, i32* @dstaddr, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = load i32, i32* %7, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %61

38:                                               ; preds = %35, %32
  %39 = load i32, i32* @dstaddr, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  %42 = load i32, i32* %7, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %41, %38
  %45 = call i32 (...) @aicmp()
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %61

47:                                               ; preds = %44
  %48 = load i64, i64* @src_sp, align 8
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = load i64, i64* @src_sp, align 8
  %52 = load i64, i64* @src_ep, align 8
  %53 = icmp sgt i64 %51, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %50, %47
  %55 = load i64, i64* @dst_sp, align 8
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %66

57:                                               ; preds = %54
  %58 = load i64, i64* @dst_sp, align 8
  %59 = load i64, i64* @dst_ep, align 8
  %60 = icmp sgt i64 %58, %59
  br i1 %60, label %61, label %66

61:                                               ; preds = %57, %50, %44, %41, %35
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @usage(i8* %64)
  br label %66

66:                                               ; preds = %61, %57, %54
  %67 = load i32, i32* @AF_INET, align 4
  %68 = load i32, i32* @SOCK_RAW, align 4
  %69 = load i32, i32* @IPPROTO_RAW, align 4
  %70 = call i32 @socket(i32 %67, i32 %68, i32 %69)
  store i32 %70, i32* @rawsock, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %66
  %73 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %74 = call i32 @exit(i32 -1) #3
  unreachable

75:                                               ; preds = %66
  store i32 0, i32* %6, align 4
  br label %76

76:                                               ; preds = %135, %92, %75
  %77 = load i32, i32* %9, align 4
  %78 = icmp ne i32 %77, -1
  br i1 %78, label %79, label %93

79:                                               ; preds = %76
  %80 = call i32 (...) @random()
  %81 = srem i32 %80, 100
  %82 = add nsw i32 %81, 1
  %83 = load i32, i32* %9, align 4
  %84 = icmp sgt i32 %82, %83
  br i1 %84, label %85, label %93

85:                                               ; preds = %79
  %86 = call i32 (...) @random()
  %87 = srem i32 %86, 200
  %88 = add nsw i32 %87, 1
  %89 = icmp sgt i32 %88, 199
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = call i32 @usleep(i32 1)
  br label %92

92:                                               ; preds = %90, %85
  br label %76

93:                                               ; preds = %79, %76
  store i32 0, i32* %7, align 4
  br label %94

94:                                               ; preds = %127, %93
  %95 = load %struct.TYPE_2__*, %struct.TYPE_2__** @a_list, align 8
  %96 = load i32, i32* %7, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %95, i64 %97
  %99 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %98, i32 0, i32 2
  %100 = load i32 (i32)*, i32 (i32)** %99, align 8
  %101 = icmp ne i32 (i32)* %100, null
  br i1 %101, label %102, label %130

102:                                              ; preds = %94
  %103 = load %struct.TYPE_2__*, %struct.TYPE_2__** @a_list, align 8
  %104 = load i32, i32* %7, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %103, i64 %105
  %107 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %106, i32 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = load i32, i32* @a_flags, align 4
  %110 = and i32 %108, %109
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %126

112:                                              ; preds = %102
  %113 = load %struct.TYPE_2__*, %struct.TYPE_2__** @a_list, align 8
  %114 = load i32, i32* %7, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %113, i64 %115
  %117 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %116, i32 0, i32 2
  %118 = load i32 (i32)*, i32 (i32)** %117, align 8
  %119 = load %struct.TYPE_2__*, %struct.TYPE_2__** @a_list, align 8
  %120 = load i32, i32* %7, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %119, i64 %121
  %123 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %122, i32 0, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = call i32 %118(i32 %124)
  br label %126

126:                                              ; preds = %112, %102
  br label %127

127:                                              ; preds = %126
  %128 = load i32, i32* %7, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %7, align 4
  br label %94

130:                                              ; preds = %94
  %131 = load i32, i32* %6, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %6, align 4
  %133 = icmp eq i32 %131, 100
  br i1 %133, label %134, label %135

134:                                              ; preds = %130
  store i32 0, i32* %6, align 4
  br label %135

135:                                              ; preds = %134, %130
  br label %76
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @change(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @aicmp(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @random(...) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
