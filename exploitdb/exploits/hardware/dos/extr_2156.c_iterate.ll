; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_2156.c_iterate.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_2156.c_iterate.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"%u%u\00", align 1
@iteration = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"http://127.0.0.1/?%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @iterate(i8* %0, i32* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca [57 x i8], align 16
  %6 = alloca [57 x i8], align 16
  store i8* %0, i8** %3, align 8
  store i32* %1, i32** %4, align 8
  %7 = getelementptr inbounds [57 x i8], [57 x i8]* %5, i64 0, i64 0
  %8 = call i32 @time(i32* null)
  %9 = load i32, i32* @iteration, align 4
  %10 = call i32 (i8*, i8*, ...) @sprintf(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 %8, i32 %9)
  %11 = load i8*, i8** %3, align 8
  %12 = load i32*, i32** %4, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = call i32 @memset(i8* %16, i32 48, i32 57)
  %18 = load i8*, i8** %3, align 8
  %19 = load i32*, i32** %4, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = getelementptr inbounds [57 x i8], [57 x i8]* %5, i64 0, i64 0
  %25 = getelementptr inbounds [57 x i8], [57 x i8]* %5, i64 0, i64 0
  %26 = call i32 @strlen(i8* %25)
  %27 = icmp slt i32 %26, 57
  br i1 %27, label %28, label %31

28:                                               ; preds = %2
  %29 = getelementptr inbounds [57 x i8], [57 x i8]* %5, i64 0, i64 0
  %30 = call i32 @strlen(i8* %29)
  br label %32

31:                                               ; preds = %2
  br label %32

32:                                               ; preds = %31, %28
  %33 = phi i32 [ %30, %28 ], [ 56, %31 ]
  %34 = call i32 @memcpy(i8* %23, i8* %24, i32 %33)
  %35 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i64 0, i64 0
  %36 = getelementptr inbounds [57 x i8], [57 x i8]* %5, i64 0, i64 0
  %37 = call i32 (i8*, i8*, ...) @sprintf(i8* %35, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i8* %36)
  %38 = load i8*, i8** %3, align 8
  %39 = load i32*, i32** %4, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 4
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %38, i64 %42
  %44 = call i32 @memset(i8* %43, i32 48, i32 57)
  %45 = load i8*, i8** %3, align 8
  %46 = load i32*, i32** %4, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 4
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i64 0, i64 0
  %52 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i64 0, i64 0
  %53 = call i32 @strlen(i8* %52)
  %54 = icmp slt i32 %53, 57
  br i1 %54, label %55, label %58

55:                                               ; preds = %32
  %56 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i64 0, i64 0
  %57 = call i32 @strlen(i8* %56)
  br label %59

58:                                               ; preds = %32
  br label %59

59:                                               ; preds = %58, %55
  %60 = phi i32 [ %57, %55 ], [ 56, %58 ]
  %61 = call i32 @memcpy(i8* %50, i8* %51, i32 %60)
  ret void
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
