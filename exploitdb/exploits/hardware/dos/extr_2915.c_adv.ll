; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_2915.c_adv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_2915.c_adv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [1082 x i8] c"D-LINK DWL-2000AP+ with firmware version 2.11 is prone to two remote denial\0Aof service vulnerability because it fails to handle arp flooding. \0AThe first vuln causes the wireless link (802.11) to be resetted and the arp \0Atable to be rebuilded. All clients connected to the AP are disconnected.\0AThis bug can be triggered by sending lots of arp replies through the wired link\0Aor the radio one at a very high speed.\0AThe second vulnerability affects the wireless link only and are quite harder\0Ato trigger but causes the AP firmware to crash making a manual reboot mandatory.\0AThis bug can be triggered only if no other D-LINK ethernet products are visible \0Ato AP, if wep encryption is enabled and it needs a very large amount of\0Aarp-requests to be broadcasted through its wireless link at a very high speed. \0AThis exploit works in the 90%% of cases because sometimes the AP is able to ban\0Athe flooding client before the exploiting process is complete.\0AD-LINK doesn't support this product anymore so no solution is available.\0AOther products can be vulnerable.\0A\0ANot vulnerable: DWL-700AP\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @adv() #0 {
  %1 = call i32 @printf(i8* getelementptr inbounds ([1082 x i8], [1082 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
