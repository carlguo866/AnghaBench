; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_23087.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_23087.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i8* }
%struct.sockaddr_in = type { i8*, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i8* }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [47 x i8] c"\0Ausage : %s start-ip-address  end-ip-address\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"Checking: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"Port 264 open on %s -- Checkpoint Firewall-1 v4.1 or later.\0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Can not connect to %s on port 264\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [62 x i8] c"Port 256 open on %s -- Checkpoint Firewall-1 4.0 or earlier.\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Can not connect to %s on port 256\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.in_addr, align 8
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca [1000 x i8], align 16
  %12 = alloca %struct.hostent*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca [16 x i8], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store %struct.hostent* null, %struct.hostent** %12, align 8
  %18 = load i32, i32* %3, align 4
  %19 = icmp ne i32 %18, 3
  br i1 %19, label %20, label %26

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i8* %23)
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %2
  %27 = load i8**, i8*** %4, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @inet_addr(i8* %29)
  store i64 %30, i64* %8, align 8
  %31 = load i8**, i8*** %4, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i64 @inet_addr(i8* %33)
  store i64 %34, i64* %9, align 8
  %35 = load i64, i64* %8, align 8
  %36 = call i64 @ntohl(i64 %35)
  store i64 %36, i64* %10, align 8
  br label %37

37:                                               ; preds = %128, %26
  %38 = load i64, i64* %10, align 8
  %39 = load i64, i64* %9, align 8
  %40 = call i64 @ntohl(i64 %39)
  %41 = icmp ule i64 %38, %40
  br i1 %41, label %42, label %131

42:                                               ; preds = %37
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  %43 = load i32, i32* @AF_INET, align 4
  %44 = load i32, i32* @SOCK_STREAM, align 4
  %45 = call i32 @socket(i32 %43, i32 %44, i32 0)
  store i32 %45, i32* %5, align 4
  %46 = load i64, i64* %10, align 8
  %47 = and i64 %46, 255
  %48 = icmp eq i64 %47, 255
  br i1 %48, label %49, label %52

49:                                               ; preds = %42
  %50 = load i64, i64* %10, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %10, align 8
  br label %52

52:                                               ; preds = %49, %42
  %53 = load i64, i64* %10, align 8
  %54 = and i64 %53, 255
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load i64, i64* %10, align 8
  %58 = add i64 %57, 1
  store i64 %58, i64* %10, align 8
  br label %59

59:                                               ; preds = %56, %52
  %60 = load i32, i32* @AF_INET, align 4
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i32 %60, i32* %61, align 8
  %62 = call i8* @htons(i32 264)
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i8* %62, i8** %63, align 8
  %64 = load i64, i64* %10, align 8
  %65 = call i8* @htonl(i64 %64)
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %67 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %66, i32 0, i32 0
  store i8* %65, i8** %67, align 8
  %68 = load i64, i64* %10, align 8
  %69 = call i8* @htonl(i64 %68)
  %70 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  store i8* %69, i8** %70, align 8
  %71 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %72 = call i32 @bzero(i32* %71, i32 8)
  %73 = load i32, i32* @stdout, align 4
  %74 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = call i8* @inet_ntoa(i8* %75)
  %77 = call i32 @fprintf(i32 %73, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* %76)
  %78 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i8* @inet_ntoa(i8* %79)
  store i8* %80, i8** %14, align 8
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %82 = load i8*, i8** %14, align 8
  %83 = call i32 @strcpy(i8* %81, i8* %82)
  %84 = load i32, i32* %5, align 4
  %85 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %86 = call i32 @connect(i32 %84, %struct.sockaddr* %85, i32 32)
  store i32 %86, i32* %16, align 4
  %87 = load i32, i32* %16, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %98

89:                                               ; preds = %59
  %90 = load i32, i32* @stdout, align 4
  %91 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = call i8* @inet_ntoa(i8* %92)
  %94 = call i32 @fprintf(i32 %90, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i8* %93)
  %95 = load i32, i32* %5, align 4
  %96 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %97 = call i32 @snatch(i32 %95, i8* %96)
  br label %127

98:                                               ; preds = %59
  %99 = load i32, i32* @stdout, align 4
  %100 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = call i8* @inet_ntoa(i8* %101)
  %103 = call i32 @fprintf(i32 %99, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %102)
  %104 = call i8* @htons(i32 256)
  %105 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i8* %104, i8** %105, align 8
  store i32 0, i32* %16, align 4
  %106 = load i32, i32* %5, align 4
  %107 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %108 = call i32 @connect(i32 %106, %struct.sockaddr* %107, i32 32)
  store i32 %108, i32* %16, align 4
  %109 = load i32, i32* %16, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %120

111:                                              ; preds = %98
  %112 = load i32, i32* @stdout, align 4
  %113 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = call i8* @inet_ntoa(i8* %114)
  %116 = call i32 @fprintf(i32 %112, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i8* %115)
  %117 = load i32, i32* %5, align 4
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 0
  %119 = call i32 @snatch(i32 %117, i8* %118)
  br label %126

120:                                              ; preds = %98
  %121 = load i32, i32* @stdout, align 4
  %122 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %6, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = call i8* @inet_ntoa(i8* %123)
  %125 = call i32 @fprintf(i32 %121, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i8* %124)
  br label %126

126:                                              ; preds = %120, %111
  br label %127

127:                                              ; preds = %126, %89
  store i32 0, i32* %16, align 4
  br label %128

128:                                              ; preds = %127
  %129 = load i64, i64* %10, align 8
  %130 = add i64 %129, 1
  store i64 %130, i64* %10, align 8
  br label %37

131:                                              ; preds = %37
  ret void
}

declare dso_local i32 @printf(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local i64 @ntohl(i64) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @htonl(i64) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i8* @inet_ntoa(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @snatch(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
