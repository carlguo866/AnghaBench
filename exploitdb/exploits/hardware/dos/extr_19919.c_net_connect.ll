; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_19919.c_net_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/dos/extr_19919.c_net_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@EINPROGRESS = common dso_local global i32 0, align 4
@ETIMEDOUT = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @net_connect(%struct.sockaddr_in* %0, i8* %1, i16 zeroext %2, i8* %3, i16 zeroext %4, i32 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i16, align 2
  %11 = alloca i8*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.timeval, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %8, align 8
  store i8* %1, i8** %9, align 8
  store i16 %2, i16* %10, align 2
  store i8* %3, i8** %11, align 8
  store i16 %4, i16* %12, align 2
  store i32 %5, i32* %13, align 4
  %22 = load i32, i32* @AF_INET, align 4
  %23 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 8
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 1
  store i32 %22, i32* %24, align 4
  %25 = load i16, i16* %10, align 2
  %26 = call i32 @htons(i16 zeroext %25)
  %27 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 8
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %27, i32 0, i32 2
  store i32 %26, i32* %28, align 4
  %29 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 8
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %29, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* @SOCK_STREAM, align 4
  %33 = call i32 @socket(i32 %31, i32 %32, i32 0)
  store i32 %33, i32* %18, align 4
  %34 = load i32, i32* %18, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %37

36:                                               ; preds = %6
  store i32 -1, i32* %7, align 4
  br label %153

37:                                               ; preds = %6
  %38 = load i8*, i8** %9, align 8
  %39 = call i32 @net_resolve(i8* %38)
  %40 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 8
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %40, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 0
  store i32 %39, i32* %42, align 4
  %43 = icmp ne i32 %39, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %37
  %45 = load i32, i32* %18, align 4
  %46 = call i32 @close(i32 %45)
  store i32 -1, i32* %7, align 4
  br label %153

47:                                               ; preds = %37
  %48 = load i32, i32* %18, align 4
  %49 = load i32, i32* @F_GETFL, align 4
  %50 = call i32 @fcntl(i32 %48, i32 %49, i32 0)
  store i32 %50, i32* %17, align 4
  %51 = load i32, i32* %17, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %53, label %56

53:                                               ; preds = %47
  %54 = load i32, i32* %18, align 4
  %55 = call i32 @close(i32 %54)
  store i32 -1, i32* %7, align 4
  br label %153

56:                                               ; preds = %47
  %57 = load i32, i32* %18, align 4
  %58 = load i32, i32* @F_SETFL, align 4
  %59 = load i32, i32* %17, align 4
  %60 = load i32, i32* @O_NONBLOCK, align 4
  %61 = or i32 %59, %60
  %62 = call i32 @fcntl(i32 %57, i32 %58, i32 %61)
  store i32 %62, i32* %14, align 4
  %63 = load i32, i32* %14, align 4
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %68

65:                                               ; preds = %56
  %66 = load i32, i32* %18, align 4
  %67 = call i32 @close(i32 %66)
  store i32 -1, i32* %7, align 4
  br label %153

68:                                               ; preds = %56
  store i32 0, i32* %16, align 4
  %69 = load i32, i32* %18, align 4
  %70 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 8
  %71 = bitcast %struct.sockaddr_in* %70 to %struct.sockaddr*
  %72 = call i32 @connect(i32 %69, %struct.sockaddr* %71, i32 12)
  store i32 %72, i32* %14, align 4
  %73 = load i32, i32* %14, align 4
  %74 = icmp slt i32 %73, 0
  br i1 %74, label %75, label %83

75:                                               ; preds = %68
  %76 = load i32, i32* @errno, align 4
  %77 = load i32, i32* @EINPROGRESS, align 4
  %78 = icmp ne i32 %76, %77
  br i1 %78, label %79, label %82

79:                                               ; preds = %75
  %80 = load i32, i32* %18, align 4
  %81 = call i32 @close(i32 %80)
  store i32 -1, i32* %7, align 4
  br label %153

82:                                               ; preds = %75
  br label %83

83:                                               ; preds = %82, %68
  %84 = load i32, i32* %14, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  br label %143

87:                                               ; preds = %83
  %88 = call i32 @FD_ZERO(i32* %20)
  %89 = call i32 @FD_ZERO(i32* %21)
  %90 = load i32, i32* %18, align 4
  %91 = call i32 @FD_SET(i32 %90, i32* %20)
  %92 = load i32, i32* %18, align 4
  %93 = call i32 @FD_SET(i32 %92, i32* %21)
  %94 = load i32, i32* %13, align 4
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  store i64 0, i64* %96, align 8
  %97 = load i32, i32* %18, align 4
  %98 = add nsw i32 %97, 1
  %99 = call i32 @select(i32 %98, i32* %20, i32* %21, i32* null, %struct.timeval* %19)
  store i32 %99, i32* %14, align 4
  %100 = load i32, i32* %14, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %87
  %103 = load i32, i32* %18, align 4
  %104 = call i32 @close(i32 %103)
  %105 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %105, i32* @errno, align 4
  store i32 -1, i32* %7, align 4
  br label %153

106:                                              ; preds = %87
  %107 = load i32, i32* %14, align 4
  %108 = icmp eq i32 %107, -1
  br i1 %108, label %109, label %110

109:                                              ; preds = %106
  store i32 -1, i32* %7, align 4
  br label %153

110:                                              ; preds = %106
  %111 = load i32, i32* %18, align 4
  %112 = call i64 @FD_ISSET(i32 %111, i32* %20)
  %113 = icmp ne i64 %112, 0
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = load i32, i32* %18, align 4
  %116 = call i64 @FD_ISSET(i32 %115, i32* %21)
  %117 = icmp ne i64 %116, 0
  br i1 %117, label %118, label %141

118:                                              ; preds = %114, %110
  %119 = load i32, i32* %18, align 4
  %120 = call i64 @FD_ISSET(i32 %119, i32* %20)
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %140

122:                                              ; preds = %118
  %123 = load i32, i32* %18, align 4
  %124 = call i64 @FD_ISSET(i32 %123, i32* %21)
  %125 = icmp ne i64 %124, 0
  br i1 %125, label %126, label %140

126:                                              ; preds = %122
  store i32 4, i32* %15, align 4
  %127 = load i32, i32* %18, align 4
  %128 = load i32, i32* @SOL_SOCKET, align 4
  %129 = load i32, i32* @SO_ERROR, align 4
  %130 = call i64 @getsockopt(i32 %127, i32 %128, i32 %129, i32* %16, i32* %15)
  %131 = icmp slt i64 %130, 0
  br i1 %131, label %132, label %134

132:                                              ; preds = %126
  %133 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %133, i32* @errno, align 4
  store i32 -1, i32* %7, align 4
  br label %153

134:                                              ; preds = %126
  %135 = load i32, i32* %16, align 4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  br label %143

138:                                              ; preds = %134
  %139 = load i32, i32* %16, align 4
  store i32 %139, i32* @errno, align 4
  store i32 -1, i32* %7, align 4
  br label %153

140:                                              ; preds = %122, %118
  br label %142

141:                                              ; preds = %114
  store i32 -1, i32* %7, align 4
  br label %153

142:                                              ; preds = %140
  br label %143

143:                                              ; preds = %142, %137, %86
  %144 = load i32, i32* %18, align 4
  %145 = load i32, i32* @F_SETFL, align 4
  %146 = load i32, i32* %17, align 4
  %147 = call i32 @fcntl(i32 %144, i32 %145, i32 %146)
  store i32 %147, i32* %14, align 4
  %148 = load i32, i32* %14, align 4
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %150, label %151

150:                                              ; preds = %143
  store i32 -1, i32* %7, align 4
  br label %153

151:                                              ; preds = %143
  %152 = load i32, i32* %18, align 4
  store i32 %152, i32* %7, align 4
  br label %153

153:                                              ; preds = %151, %150, %141, %138, %132, %109, %102, %79, %65, %53, %44, %36
  %154 = load i32, i32* %7, align 4
  ret i32 %154
}

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @net_resolve(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i64 @getsockopt(i32, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
