; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19488.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19488.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFERSIZE = common dso_local global i32 0, align 4
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_RCVBUF = common dso_local global i32 0, align 4
@SO_SNDBUF = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @BUFFERSIZE, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %4, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %5, align 8
  br label %10

10:                                               ; preds = %18, %0
  br label %11

11:                                               ; preds = %10
  %12 = load i32, i32* @AF_UNIX, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %15 = call i32 @socketpair(i32 %12, i32 %13, i32 0, i32* %14)
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  br label %58

18:                                               ; preds = %11
  %19 = load i32, i32* @BUFFERSIZE, align 4
  store i32 %19, i32* %3, align 4
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* @SOL_SOCKET, align 4
  %23 = load i32, i32* @SO_RCVBUF, align 4
  %24 = call i32 @setsockopt(i32 %21, i32 %22, i32 %23, i32* %3, i32 4)
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = load i32, i32* @SOL_SOCKET, align 4
  %28 = load i32, i32* @SO_SNDBUF, align 4
  %29 = call i32 @setsockopt(i32 %26, i32 %27, i32 %28, i32* %3, i32 4)
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* @SOL_SOCKET, align 4
  %33 = load i32, i32* @SO_RCVBUF, align 4
  %34 = call i32 @setsockopt(i32 %31, i32 %32, i32 %33, i32* %3, i32 4)
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = load i32, i32* @SOL_SOCKET, align 4
  %38 = load i32, i32* @SO_SNDBUF, align 4
  %39 = call i32 @setsockopt(i32 %36, i32 %37, i32 %38, i32* %3, i32 4)
  %40 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* @F_SETFL, align 4
  %43 = load i32, i32* @O_NONBLOCK, align 4
  %44 = call i32 @fcntl(i32 %41, i32 %42, i32 %43)
  %45 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1
  %46 = load i32, i32* %45, align 4
  %47 = load i32, i32* @F_SETFL, align 4
  %48 = load i32, i32* @O_NONBLOCK, align 4
  %49 = call i32 @fcntl(i32 %46, i32 %47, i32 %48)
  %50 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* @BUFFERSIZE, align 4
  %53 = call i32 @write(i32 %51, i8* %9, i32 %52)
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* @BUFFERSIZE, align 4
  %57 = call i32 @write(i32 %55, i8* %9, i32 %56)
  br label %10

58:                                               ; preds = %17
  %59 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @socketpair(i32, i32, i32, i32*) #2

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #2

declare dso_local i32 @fcntl(i32, i32, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
