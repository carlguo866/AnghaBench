; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_343.c_send_syn.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_343.c_send_syn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i16, %struct.TYPE_4__, i32 }
%struct.TYPE_4__ = type { i64 }
%struct.ip = type { i32, i32, i32, i32, i32, i8*, %struct.TYPE_6__, %struct.TYPE_5__, i64, i64, i8* }
%struct.TYPE_6__ = type { i64 }
%struct.TYPE_5__ = type { i64 }
%struct.tcphdr = type { i16, i32, i32, i32, i64, i64, i32, i64, i64, i8*, i64, i64, i64, i8*, i8* }
%struct.pseudo = type { i16, i32, i32, i32, i64, i64, i32, i64, i64, i8*, i64, i64, i64, i8*, i8* }
%struct.checksum = type { i32, i32 }
%struct.sockaddr = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@sox = common dso_local global i32 0, align 4
@MSG_DONTWAIT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"sendto\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i16 @send_syn(i64 %0, i64 %1, i16 zeroext %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i16, align 2
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca %struct.ip*, align 8
  %10 = alloca %struct.tcphdr*, align 8
  %11 = alloca %struct.pseudo, align 8
  %12 = alloca %struct.checksum, align 4
  %13 = alloca [176 x i8], align 16
  %14 = alloca i32, align 4
  store i64 %0, i64* %5, align 8
  store i64 %1, i64* %6, align 8
  store i16 %2, i16* %7, align 2
  %15 = load i32, i32* @PF_INET, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %15, i32* %16, align 8
  %17 = load i16, i16* %7, align 2
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i16 %17, i16* %18, align 8
  %19 = load i64, i64* %6, align 8
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %20, i32 0, i32 0
  store i64 %19, i64* %21, align 8
  %22 = bitcast [176 x i8]* %13 to %struct.ip*
  store %struct.ip* %22, %struct.ip** %9, align 8
  %23 = load %struct.ip*, %struct.ip** %9, align 8
  %24 = ptrtoint %struct.ip* %23 to i32
  %25 = sext i32 %24 to i64
  %26 = add i64 %25, 72
  %27 = inttoptr i64 %26 to %struct.tcphdr*
  store %struct.tcphdr* %27, %struct.tcphdr** %10, align 8
  %28 = bitcast [176 x i8]* %13 to i8**
  %29 = call i32 @memset(i8** %28, i32 0, i32 176)
  %30 = load %struct.ip*, %struct.ip** %9, align 8
  %31 = getelementptr inbounds %struct.ip, %struct.ip* %30, i32 0, i32 0
  store i32 5, i32* %31, align 8
  %32 = load %struct.ip*, %struct.ip** %9, align 8
  %33 = getelementptr inbounds %struct.ip, %struct.ip* %32, i32 0, i32 1
  store i32 4, i32* %33, align 4
  %34 = load %struct.ip*, %struct.ip** %9, align 8
  %35 = getelementptr inbounds %struct.ip, %struct.ip* %34, i32 0, i32 2
  store i32 8, i32* %35, align 8
  %36 = call i8* @htons(i32 176)
  %37 = load %struct.ip*, %struct.ip** %9, align 8
  %38 = getelementptr inbounds %struct.ip, %struct.ip* %37, i32 0, i32 5
  store i8* %36, i8** %38, align 8
  %39 = call i32 (...) @getrandportid()
  %40 = call i8* @htons(i32 %39)
  %41 = load %struct.ip*, %struct.ip** %9, align 8
  %42 = getelementptr inbounds %struct.ip, %struct.ip* %41, i32 0, i32 10
  store i8* %40, i8** %42, align 8
  %43 = load %struct.ip*, %struct.ip** %9, align 8
  %44 = getelementptr inbounds %struct.ip, %struct.ip* %43, i32 0, i32 9
  store i64 0, i64* %44, align 8
  %45 = load %struct.ip*, %struct.ip** %9, align 8
  %46 = getelementptr inbounds %struct.ip, %struct.ip* %45, i32 0, i32 3
  store i32 255, i32* %46, align 4
  %47 = load %struct.ip*, %struct.ip** %9, align 8
  %48 = getelementptr inbounds %struct.ip, %struct.ip* %47, i32 0, i32 4
  store i32 6, i32* %48, align 8
  %49 = load %struct.ip*, %struct.ip** %9, align 8
  %50 = getelementptr inbounds %struct.ip, %struct.ip* %49, i32 0, i32 8
  store i64 0, i64* %50, align 8
  %51 = load i64, i64* %5, align 8
  %52 = load %struct.ip*, %struct.ip** %9, align 8
  %53 = getelementptr inbounds %struct.ip, %struct.ip* %52, i32 0, i32 7
  %54 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %53, i32 0, i32 0
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %6, align 8
  %56 = load %struct.ip*, %struct.ip** %9, align 8
  %57 = getelementptr inbounds %struct.ip, %struct.ip* %56, i32 0, i32 6
  %58 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %57, i32 0, i32 0
  store i64 %55, i64* %58, align 8
  %59 = call i32 (...) @getrandportid()
  %60 = call i8* @htons(i32 %59)
  %61 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %62 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %61, i32 0, i32 14
  store i8* %60, i8** %62, align 8
  %63 = load i16, i16* %7, align 2
  %64 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %65 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %64, i32 0, i32 0
  store i16 %63, i16* %65, align 8
  %66 = call i32 (...) @getrandportid()
  %67 = call i8* @htons(i32 %66)
  %68 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %69 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %68, i32 0, i32 13
  store i8* %67, i8** %69, align 8
  %70 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %71 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %70, i32 0, i32 12
  store i64 0, i64* %71, align 8
  %72 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %73 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %72, i32 0, i32 11
  store i64 0, i64* %73, align 8
  %74 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %75 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %74, i32 0, i32 1
  store i32 5, i32* %75, align 4
  %76 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %77 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %76, i32 0, i32 2
  store i32 2, i32* %77, align 8
  %78 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %79 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %78, i32 0, i32 3
  store i32 65535, i32* %79, align 4
  %80 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %81 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %80, i32 0, i32 10
  store i64 0, i64* %81, align 8
  %82 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %83 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %82, i32 0, i32 7
  store i64 0, i64* %83, align 8
  %84 = load i64, i64* %5, align 8
  %85 = getelementptr inbounds %struct.pseudo, %struct.pseudo* %11, i32 0, i32 4
  store i64 %84, i64* %85, align 8
  %86 = load i64, i64* %6, align 8
  %87 = getelementptr inbounds %struct.pseudo, %struct.pseudo* %11, i32 0, i32 5
  store i64 %86, i64* %87, align 8
  %88 = getelementptr inbounds %struct.pseudo, %struct.pseudo* %11, i32 0, i32 6
  store i32 6, i32* %88, align 8
  %89 = call i8* @htons(i32 104)
  %90 = getelementptr inbounds %struct.pseudo, %struct.pseudo* %11, i32 0, i32 9
  store i8* %89, i8** %90, align 8
  %91 = getelementptr inbounds %struct.pseudo, %struct.pseudo* %11, i32 0, i32 8
  store i64 0, i64* %91, align 8
  %92 = getelementptr inbounds %struct.checksum, %struct.checksum* %12, i32 0, i32 1
  %93 = bitcast %struct.pseudo* %11 to %struct.tcphdr*
  %94 = call i32 @memcpy(i32* %92, %struct.tcphdr* %93, i32 104)
  %95 = getelementptr inbounds %struct.checksum, %struct.checksum* %12, i32 0, i32 0
  %96 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %97 = call i32 @memcpy(i32* %95, %struct.tcphdr* %96, i32 104)
  %98 = bitcast %struct.checksum* %12 to i8*
  %99 = call i64 @in_cksum(i8* %98, i32 8)
  %100 = load %struct.tcphdr*, %struct.tcphdr** %10, align 8
  %101 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %100, i32 0, i32 7
  store i64 %99, i64* %101, align 8
  %102 = load i32, i32* @sox, align 4
  %103 = getelementptr inbounds [176 x i8], [176 x i8]* %13, i64 0, i64 0
  %104 = load %struct.ip*, %struct.ip** %9, align 8
  %105 = getelementptr inbounds %struct.ip, %struct.ip* %104, i32 0, i32 5
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 @ntohs(i8* %106)
  %108 = load i32, i32* @MSG_DONTWAIT, align 4
  %109 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %110 = call i32 @sendto(i32 %102, i8* %103, i32 %107, i32 %108, %struct.sockaddr* %109, i32 24)
  store i32 %110, i32* %14, align 4
  %111 = load i32, i32* %14, align 4
  %112 = icmp eq i32 %111, -1
  br i1 %112, label %113, label %115

113:                                              ; preds = %3
  %114 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i16 -1, i16* %4, align 2
  br label %116

115:                                              ; preds = %3
  store i16 0, i16* %4, align 2
  br label %116

116:                                              ; preds = %115, %113
  %117 = load i16, i16* %4, align 2
  ret i16 %117
}

declare dso_local i32 @memset(i8**, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @getrandportid(...) #1

declare dso_local i32 @memcpy(i32*, %struct.tcphdr*, i32) #1

declare dso_local i64 @in_cksum(i8*, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @ntohs(i8*) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
