; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bs = common dso_local global i32 0, align 4
@mode = common dso_local global i32 0, align 4
@num = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"xp:send\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @xp(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [2048 x i8], align 16
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* @bs, align 4
  store i32 %5, i32* %3, align 4
  br label %6

6:                                                ; preds = %22, %1
  %7 = load i32, i32* %3, align 4
  %8 = sext i32 %7 to i64
  %9 = icmp ult i64 %8, 2048
  br i1 %9, label %10, label %25

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* @bs, align 4
  %13 = sub nsw i32 %11, %12
  %14 = srem i32 %13, 2
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 -10, i32 -1
  %18 = trunc i32 %17 to i8
  %19 = load i32, i32* %3, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %20
  store i8 %18, i8* %21, align 1
  br label %22

22:                                               ; preds = %10
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %3, align 4
  br label %6

25:                                               ; preds = %6
  %26 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  store i8 -1, i8* %26, align 16
  %27 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 1
  store i8 -11, i8* %27, align 1
  %28 = load i32, i32* @mode, align 4
  %29 = icmp eq i32 %28, 16
  br i1 %29, label %30, label %34

30:                                               ; preds = %25
  %31 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 2
  store i8 -1, i8* %31, align 2
  %32 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 3
  store i8 -5, i8* %32, align 1
  %33 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 4
  store i8 38, i8* %33, align 4
  br label %34

34:                                               ; preds = %30, %25
  %35 = load i32, i32* @num, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* @num, align 4
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %37
  store i8 -1, i8* %38, align 1
  %39 = load i32, i32* @num, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* @num, align 4
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %41
  store i8 -5, i8* %42, align 1
  %43 = load i32, i32* @num, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* @num, align 4
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %45
  store i8 8, i8* %46, align 1
  %47 = load i32, i32* @num, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* @num, align 4
  %49 = sext i32 %47 to i64
  %50 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %49
  store i8 -1, i8* %50, align 1
  %51 = load i32, i32* @num, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* @num, align 4
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 %53
  store i8 -10, i8* %54, align 1
  %55 = load i32, i32* %2, align 4
  %56 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %57 = load i32, i32* @num, align 4
  %58 = call i32 @send(i32 %55, i8* %56, i32 %57, i32 0)
  store i32 %58, i32* %3, align 4
  %59 = load i32, i32* %3, align 4
  %60 = load i32, i32* @num, align 4
  %61 = icmp ne i32 %59, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %34
  %63 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  br label %64

64:                                               ; preds = %62, %34
  ret void
}

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
