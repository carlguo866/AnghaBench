; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp_setenv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp_setenv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@IAC = common dso_local global i8 0, align 1
@SB = common dso_local global i8 0, align 1
@TELOPT_NEW_ENVIRON = common dso_local global i8 0, align 1
@TELQUAL_IS = common dso_local global i8 0, align 1
@ENV_USERVAR = common dso_local global i8 0, align 1
@NEW_ENV_VALUE = common dso_local global i8 0, align 1
@SE = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [15 x i8] c"xp_setenv:send\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @xp_setenv(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [2048 x i8], align 16
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  store i32 0, i32* %7, align 4
  %9 = load i8, i8* @IAC, align 1
  %10 = load i32, i32* %7, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %7, align 4
  %12 = sext i32 %10 to i64
  %13 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %12
  store i8 %9, i8* %13, align 1
  %14 = load i8, i8* @SB, align 1
  %15 = load i32, i32* %7, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %7, align 4
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %17
  store i8 %14, i8* %18, align 1
  %19 = load i8, i8* @TELOPT_NEW_ENVIRON, align 1
  %20 = load i32, i32* %7, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %7, align 4
  %22 = sext i32 %20 to i64
  %23 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %22
  store i8 %19, i8* %23, align 1
  %24 = load i8, i8* @TELQUAL_IS, align 1
  %25 = load i32, i32* %7, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %7, align 4
  %27 = sext i32 %25 to i64
  %28 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %27
  store i8 %24, i8* %28, align 1
  %29 = load i8, i8* @ENV_USERVAR, align 1
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %7, align 4
  %32 = sext i32 %30 to i64
  %33 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %32
  store i8 %29, i8* %33, align 1
  br label %34

34:                                               ; preds = %52, %3
  %35 = load i8*, i8** %5, align 8
  %36 = load i8, i8* %35, align 1
  %37 = icmp ne i8 %36, 0
  br i1 %37, label %38, label %60

38:                                               ; preds = %34
  %39 = load i8*, i8** %5, align 8
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8, i8* @IAC, align 1
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %41, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %38
  %46 = load i8*, i8** %5, align 8
  %47 = load i8, i8* %46, align 1
  %48 = load i32, i32* %7, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %7, align 4
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %50
  store i8 %47, i8* %51, align 1
  br label %52

52:                                               ; preds = %45, %38
  %53 = load i8*, i8** %5, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %54, i8** %5, align 8
  %55 = load i8, i8* %53, align 1
  %56 = load i32, i32* %7, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %7, align 4
  %58 = sext i32 %56 to i64
  %59 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %58
  store i8 %55, i8* %59, align 1
  br label %34

60:                                               ; preds = %34
  %61 = load i8, i8* @NEW_ENV_VALUE, align 1
  %62 = load i32, i32* %7, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %7, align 4
  %64 = sext i32 %62 to i64
  %65 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %64
  store i8 %61, i8* %65, align 1
  br label %66

66:                                               ; preds = %84, %60
  %67 = load i8*, i8** %6, align 8
  %68 = load i8, i8* %67, align 1
  %69 = icmp ne i8 %68, 0
  br i1 %69, label %70, label %92

70:                                               ; preds = %66
  %71 = load i8*, i8** %6, align 8
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = load i8, i8* @IAC, align 1
  %75 = zext i8 %74 to i32
  %76 = icmp eq i32 %73, %75
  br i1 %76, label %77, label %84

77:                                               ; preds = %70
  %78 = load i8*, i8** %6, align 8
  %79 = load i8, i8* %78, align 1
  %80 = load i32, i32* %7, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %7, align 4
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %82
  store i8 %79, i8* %83, align 1
  br label %84

84:                                               ; preds = %77, %70
  %85 = load i8*, i8** %6, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %6, align 8
  %87 = load i8, i8* %85, align 1
  %88 = load i32, i32* %7, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %7, align 4
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %90
  store i8 %87, i8* %91, align 1
  br label %66

92:                                               ; preds = %66
  %93 = load i8, i8* @IAC, align 1
  %94 = load i32, i32* %7, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %7, align 4
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %96
  store i8 %93, i8* %97, align 1
  %98 = load i8, i8* @SE, align 1
  %99 = load i32, i32* %7, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %7, align 4
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 %101
  store i8 %98, i8* %102, align 1
  %103 = load i32, i32* %4, align 4
  %104 = getelementptr inbounds [2048 x i8], [2048 x i8]* %8, i64 0, i64 0
  %105 = load i32, i32* %7, align 4
  %106 = call i32 @send(i32 %103, i8* %104, i32 %105, i32 0)
  %107 = load i32, i32* %7, align 4
  %108 = icmp ne i32 %106, %107
  br i1 %108, label %109, label %113

109:                                              ; preds = %92
  %110 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %111 = load i32, i32* @EXIT_FAILURE, align 4
  %112 = call i32 @exit(i32 %111) #3
  unreachable

113:                                              ; preds = %92
  ret void
}

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
