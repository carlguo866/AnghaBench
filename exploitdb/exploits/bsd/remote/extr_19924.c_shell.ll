; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_19924.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_19924.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"cd /; id; pwd; uname -a;\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"EOF from server\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"OK. Quitting\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"write\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  store i32 %0, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i64 @write(i32 %8, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i32 25)
  %10 = call i32 @FD_ZERO(i32* %3)
  br label %11

11:                                               ; preds = %83, %1
  %12 = load i32, i32* @stdin, align 4
  %13 = call i32 @fileno(i32 %12)
  %14 = call i32 @FD_SET(i32 %13, i32* %3)
  %15 = load i32, i32* %2, align 4
  %16 = call i32 @FD_SET(i32 %15, i32* %3)
  %17 = load i32, i32* %2, align 4
  %18 = load i32, i32* @stdin, align 4
  %19 = call i32 @fileno(i32 %18)
  %20 = call i64 @MAX(i32 %17, i32 %19)
  %21 = add nsw i64 %20, 1
  %22 = call i64 @select(i64 %21, i32* %3, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %11
  %25 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 @exit(i32 -1) #3
  unreachable

27:                                               ; preds = %11
  %28 = load i32, i32* %2, align 4
  %29 = call i64 @FD_ISSET(i32 %28, i32* %3)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %53

31:                                               ; preds = %27
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %33 = call i32 @bzero(i8* %32, i32 1024)
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %36 = call i32 @read(i32 %34, i8* %35, i32 1023)
  store i32 %36, i32* %6, align 4
  %37 = load i32, i32* %6, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %31
  %40 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @exit(i32 0) #3
  unreachable

42:                                               ; preds = %31
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %42
  %46 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %47 = call i32 @exit(i32 -1) #3
  unreachable

48:                                               ; preds = %42
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %50 = load i32, i32* %6, align 4
  %51 = call i64 @write(i32 1, i8* %49, i32 %50)
  br label %52

52:                                               ; preds = %48
  br label %53

53:                                               ; preds = %52, %27
  %54 = load i32, i32* @stdin, align 4
  %55 = call i32 @fileno(i32 %54)
  %56 = call i64 @FD_ISSET(i32 %55, i32* %3)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %83

58:                                               ; preds = %53
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %60 = call i32 @bzero(i8* %59, i32 1024)
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %62 = load i32, i32* @stdin, align 4
  %63 = call i32* @fgets(i8* %61, i32 1020, i32 %62)
  %64 = icmp eq i32* %63, null
  br i1 %64, label %65, label %70

65:                                               ; preds = %58
  %66 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %67 = load i32, i32* %2, align 4
  %68 = call i32 @close(i32 %67)
  %69 = call i32 @exit(i32 0) #3
  unreachable

70:                                               ; preds = %58
  %71 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %72 = call i32 @strcat(i8* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %73 = load i32, i32* %2, align 4
  %74 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %75 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %76 = call i32 @strlen(i8* %75)
  %77 = call i64 @write(i32 %73, i8* %74, i32 %76)
  %78 = icmp slt i64 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %70
  %80 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %81 = call i32 @exit(i32 0) #3
  unreachable

82:                                               ; preds = %70
  br label %83

83:                                               ; preds = %82, %53
  br label %11
}

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @fileno(i32) #1

declare dso_local i64 @select(i64, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @MAX(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @fgets(i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
