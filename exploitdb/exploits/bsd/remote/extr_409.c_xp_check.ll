; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp_check.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_xp_check.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.xp_check.expected = private unnamed_addr constant [16 x i8] c"\0D\0A[Yes]\0D\0A\FF\FE\08\FF\FD&\00", align 16
@__const.xp_check.additional = private unnamed_addr constant [9 x i8] c"\FF\FA&\01\01\02\FF\F0\00", align 1
@IAC = common dso_local global i8 0, align 1
@AYT = common dso_local global i8 0, align 1
@WILL = common dso_local global i8 0, align 1
@TELOPT_NAOL = common dso_local global i8 0, align 1
@TELOPT_ENCRYPT = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [14 x i8] c"xp_check:send\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@mode = common dso_local global i32 0, align 4
@bs34 = common dso_local global i32 0, align 4
@bs = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"check: PASSED, using %dmb mode\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"check: FAILED\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xp_check(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [16 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca [9 x i8], align 1
  %9 = alloca [128 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i32 15, i32* %5, align 4
  %10 = bitcast [16 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.xp_check.expected, i32 0, i32 0), i64 16, i1 false)
  store i32 8, i32* %7, align 4
  %11 = bitcast [9 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.xp_check.additional, i32 0, i32 0), i64 9, i1 false)
  %12 = load i32, i32* %3, align 4
  %13 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  %14 = call i32 @read(i32 %12, i8* %13, i32 128)
  store i32 0, i32* %4, align 4
  %15 = load i8, i8* @IAC, align 1
  %16 = load i32, i32* %4, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %4, align 4
  %18 = sext i32 %16 to i64
  %19 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %18
  store i8 %15, i8* %19, align 1
  %20 = load i8, i8* @AYT, align 1
  %21 = load i32, i32* %4, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %4, align 4
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %23
  store i8 %20, i8* %24, align 1
  %25 = load i8, i8* @IAC, align 1
  %26 = load i32, i32* %4, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %4, align 4
  %28 = sext i32 %26 to i64
  %29 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %28
  store i8 %25, i8* %29, align 1
  %30 = load i8, i8* @WILL, align 1
  %31 = load i32, i32* %4, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %4, align 4
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %33
  store i8 %30, i8* %34, align 1
  %35 = load i8, i8* @TELOPT_NAOL, align 1
  %36 = load i32, i32* %4, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %4, align 4
  %38 = sext i32 %36 to i64
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %38
  store i8 %35, i8* %39, align 1
  %40 = load i8, i8* @IAC, align 1
  %41 = load i32, i32* %4, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %4, align 4
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %43
  store i8 %40, i8* %44, align 1
  %45 = load i8, i8* @WILL, align 1
  %46 = load i32, i32* %4, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %4, align 4
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %48
  store i8 %45, i8* %49, align 1
  %50 = load i8, i8* @TELOPT_ENCRYPT, align 1
  %51 = load i32, i32* %4, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %4, align 4
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %53
  store i8 %50, i8* %54, align 1
  %55 = load i32, i32* %3, align 4
  %56 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  %57 = load i32, i32* %4, align 4
  %58 = call i32 @send(i32 %55, i8* %56, i32 %57, i32 0)
  %59 = load i32, i32* %4, align 4
  %60 = icmp ne i32 %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %1
  %62 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %63 = load i32, i32* @EXIT_FAILURE, align 4
  %64 = call i32 @exit(i32 %63) #4
  unreachable

65:                                               ; preds = %1
  %66 = load i32, i32* %3, align 4
  %67 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  %68 = call i32 @read(i32 %66, i8* %67, i32 128)
  store i32 %68, i32* %4, align 4
  %69 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %71 = load i32, i32* %5, align 4
  %72 = call i64 @memcmp(i8* %69, i8* %70, i32 %71)
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %89

74:                                               ; preds = %65
  %75 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  %76 = load i32, i32* %5, align 4
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = getelementptr inbounds [9 x i8], [9 x i8]* %8, i64 0, i64 0
  %80 = load i32, i32* %7, align 4
  %81 = call i64 @memcmp(i8* %78, i8* %79, i32 %80)
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %74
  store i32 16, i32* @mode, align 4
  br label %86

84:                                               ; preds = %74
  store i32 34, i32* @mode, align 4
  %85 = load i32, i32* @bs34, align 4
  store i32 %85, i32* @bs, align 4
  br label %86

86:                                               ; preds = %84, %83
  %87 = load i32, i32* @mode, align 4
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 %87)
  store i32 1, i32* %2, align 4
  br label %91

89:                                               ; preds = %65
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %91

91:                                               ; preds = %89, %86
  %92 = load i32, i32* %2, align 4
  ret i32 %92
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @memcmp(i8*, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
