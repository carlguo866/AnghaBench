; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_x86_nop.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_409.c_x86_nop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"0011.0111\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"0011.1111\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"1001.1000\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"1001.1001\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"1111.1000\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"1111.1100\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"1111.0101\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"0010.0111\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"0010.1111\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"0100.1r\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"0100.0r\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"1001.1111\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"1001.0000\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"1111.1001\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"1111.1101\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"1001.0r\00", align 1
@__const.x86_nop.xferstr = private unnamed_addr constant [17 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* null], align 16
@stderr = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [37 x i8] c"too much blacklisting, giving up...\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @x86_nop(i8* %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca [17 x i8*], align 16
  %13 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %14 = bitcast [17 x i8*]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 bitcast ([17 x i8*]* @__const.x86_nop.xferstr to i8*), i64 136, i1 false)
  store i32 0, i32* %9, align 4
  br label %15

15:                                               ; preds = %55, %4
  %16 = load i32, i32* %6, align 4
  %17 = icmp ugt i32 %16, 0
  br i1 %17, label %18, label %60

18:                                               ; preds = %15
  store i32 0, i32* %10, align 4
  br label %19

19:                                               ; preds = %43, %18
  %20 = load i32, i32* %10, align 4
  %21 = icmp slt i32 %20, 16384
  br i1 %21, label %22, label %46

22:                                               ; preds = %19
  %23 = call i64 @random_get(i32 0, i32 15)
  %24 = getelementptr inbounds [17 x i8*], [17 x i8*]* %12, i64 0, i64 %23
  %25 = load i8*, i8** %24, align 8
  store i8* %25, i8** %11, align 8
  %26 = load i8*, i8** %11, align 8
  %27 = call zeroext i8 @x86_nop_xfer(i8* %26)
  store i8 %27, i8* %13, align 1
  %28 = load i8, i8* %13, align 1
  %29 = load i8*, i8** %5, align 8
  %30 = load i32, i32* %9, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  store i8 %28, i8* %32, align 1
  %33 = load i8*, i8** %5, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  %37 = load i8*, i8** %7, align 8
  %38 = load i32, i32* %8, align 4
  %39 = call i64 @badstr(i8* %36, i32 1, i8* %37, i32 %38)
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %22
  br label %46

42:                                               ; preds = %22
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* %10, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %10, align 4
  br label %19

46:                                               ; preds = %41, %19
  %47 = load i32, i32* %10, align 4
  %48 = icmp sge i32 %47, 16384
  br i1 %48, label %49, label %54

49:                                               ; preds = %46
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 @fprintf(i32 %50, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16, i64 0, i64 0))
  %52 = load i32, i32* @EXIT_FAILURE, align 4
  %53 = call i32 @exit(i32 %52) #4
  unreachable

54:                                               ; preds = %46
  br label %55

55:                                               ; preds = %54
  %56 = load i32, i32* %6, align 4
  %57 = sub i32 %56, 1
  store i32 %57, i32* %6, align 4
  %58 = load i32, i32* %9, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %9, align 4
  br label %15

60:                                               ; preds = %15
  %61 = load i32, i32* %9, align 4
  ret i32 %61
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @random_get(i32, i32) #2

declare dso_local zeroext i8 @x86_nop_xfer(i8*) #2

declare dso_local i64 @badstr(i8*, i32, i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
