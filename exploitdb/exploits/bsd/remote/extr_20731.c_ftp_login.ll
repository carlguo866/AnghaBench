; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_20731.c_ftp_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/remote/extr_20731.c_ftp_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"\09server runs:\09%s\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ftp_login(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %11 = load i32, i32* %5, align 4
  %12 = call i8* @read_sock(i32 %11)
  store i8* %12, i8** %10, align 8
  %13 = load i8*, i8** %10, align 8
  %14 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8* %13)
  %15 = load i8*, i8** %10, align 8
  %16 = call i32 @free(i8* %15)
  %17 = load i8*, i8** %6, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = load i8*, i8** %7, align 8
  %20 = call i32 @strlen(i8* %19)
  %21 = call i32 @MAXX(i32 %18, i32 %20)
  %22 = add nsw i32 %21, 7
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, 1
  %25 = trunc i64 %24 to i32
  %26 = call i8* @Malloc(i32 %25)
  store i8* %26, i8** %9, align 8
  %27 = load i8*, i8** %9, align 8
  %28 = load i8*, i8** %6, align 8
  %29 = call i32 @sprintf(i8* %27, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  %30 = load i32, i32* %5, align 4
  %31 = load i8*, i8** %9, align 8
  %32 = call i32 @write_sock(i32 %30, i8* %31)
  %33 = load i32, i32* %5, align 4
  %34 = call i8* @read_sock(i32 %33)
  store i8* %34, i8** %8, align 8
  %35 = load i8*, i8** %8, align 8
  %36 = call i32 @atoi(i8* %35)
  %37 = icmp ne i32 %36, 331
  br i1 %37, label %38, label %41

38:                                               ; preds = %3
  %39 = load i8*, i8** %8, align 8
  %40 = call i32 @free(i8* %39)
  store i32 0, i32* %4, align 4
  br label %59

41:                                               ; preds = %3
  %42 = load i8*, i8** %9, align 8
  %43 = load i8*, i8** %7, align 8
  %44 = call i32 @sprintf(i8* %42, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* %43)
  %45 = load i32, i32* %5, align 4
  %46 = load i8*, i8** %9, align 8
  %47 = call i32 @write_sock(i32 %45, i8* %46)
  %48 = load i32, i32* %5, align 4
  %49 = call i8* @read_sock(i32 %48)
  store i8* %49, i8** %8, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = call i32 @atoi(i8* %50)
  %52 = icmp ne i32 %51, 230
  br i1 %52, label %53, label %56

53:                                               ; preds = %41
  %54 = load i8*, i8** %8, align 8
  %55 = call i32 @free(i8* %54)
  store i32 0, i32* %4, align 4
  br label %59

56:                                               ; preds = %41
  %57 = load i8*, i8** %9, align 8
  %58 = call i32 @free(i8* %57)
  store i32 1, i32* %4, align 4
  br label %59

59:                                               ; preds = %56, %53, %38
  %60 = load i32, i32* %4, align 4
  ret i32 %60
}

declare dso_local i8* @read_sock(i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i8* @Malloc(i32) #1

declare dso_local i32 @MAXX(i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write_sock(i32, i8*) #1

declare dso_local i32 @atoi(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
