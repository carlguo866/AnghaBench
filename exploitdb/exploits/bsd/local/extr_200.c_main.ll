; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_200.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_200.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"[ (BSDi)suidperl[]: buffer overflow, by: v9[v9@fakehalo.org]. ]\0A\00", align 1
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@exec = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"EXEC=\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"*** [data]: return address: 0x%lx, offset: %d.\0A\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"suidperl\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"*** [error]: could not execute %s successfully.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2048 x i8], align 16
  %7 = alloca [4096 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* %4, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @atoi(i8* %17)
  store i32 %18, i32* %9, align 4
  br label %21

19:                                               ; preds = %2
  %20 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %20, i32* %9, align 4
  br label %21

21:                                               ; preds = %19, %14
  %22 = call i32 (...) @pointer()
  %23 = load i32, i32* %9, align 4
  %24 = sub nsw i32 %22, %23
  %25 = sext i32 %24 to i64
  store i64 %25, i64* %10, align 8
  %26 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  store i8 1, i8* %26, align 16
  store i32 1, i32* %8, align 4
  br label %27

27:                                               ; preds = %36, %21
  %28 = load i32, i32* %8, align 4
  %29 = icmp slt i32 %28, 2048
  br i1 %29, label %30, label %39

30:                                               ; preds = %27
  %31 = load i64, i64* %10, align 8
  %32 = load i32, i32* %8, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 %33
  %35 = bitcast i8* %34 to i64*
  store i64 %31, i64* %35, align 1
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %8, align 4
  %38 = add nsw i32 %37, 4
  store i32 %38, i32* %8, align 4
  br label %27

39:                                               ; preds = %27
  %40 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 1248
  store i8 0, i8* %40, align 16
  store i32 0, i32* %8, align 4
  br label %41

41:                                               ; preds = %55, %39
  %42 = load i32, i32* %8, align 4
  %43 = load i8*, i8** @exec, align 8
  %44 = call i32 @strlen(i8* %43)
  %45 = sub nsw i32 4096, %44
  %46 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 %45, %47
  %49 = icmp slt i32 %42, %48
  br i1 %49, label %50, label %58

50:                                               ; preds = %41
  %51 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %52 = load i32, i32* %8, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  store i8 -112, i8* %54, align 1
  br label %55

55:                                               ; preds = %50
  %56 = load i32, i32* %8, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %8, align 4
  br label %41

58:                                               ; preds = %41
  %59 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %60 = load i32, i32* %8, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = load i8*, i8** @exec, align 8
  %64 = load i8*, i8** @exec, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @memcpy(i8* %62, i8* %63, i32 %65)
  %67 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %68 = call i32 @memcpy(i8* %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 5)
  %69 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %70 = call i32 @putenv(i8* %69)
  %71 = load i64, i64* %10, align 8
  %72 = load i32, i32* %9, align 4
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i64 %71, i32 %72)
  %74 = load i8*, i8** @PATH, align 8
  %75 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %76 = call i64 @execlp(i8* %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* %75, i32 0)
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %58
  %79 = load i8*, i8** @PATH, align 8
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i8* %79)
  %81 = call i32 @exit(i32 1) #3
  unreachable

82:                                               ; preds = %58
  %83 = load i32, i32* %3, align 4
  ret i32 %83
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @pointer(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i64 @execlp(i8*, i8*, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
