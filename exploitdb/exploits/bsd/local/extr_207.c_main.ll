; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_207.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_207.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [62 x i8] c"[ (BSDi)inc[mh]: buffer overflow, by: v9[v9@fakehalo.org]. ]\0A\00", align 1
@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@exec = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"EXEC=\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"*** [data]: return address: 0x%lx, offset: %d.\0A\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [4 x i8] c"inc\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"-file\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"*** [error]: could not execute %s successfully.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [4096 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BUFFER, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %10, align 4
  br label %26

24:                                               ; preds = %2
  %25 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %25, i32* %10, align 4
  br label %26

26:                                               ; preds = %24, %19
  %27 = call i32 (...) @pointer()
  %28 = load i32, i32* %10, align 4
  %29 = sub nsw i32 %27, %28
  %30 = sext i32 %29 to i64
  store i64 %30, i64* %11, align 8
  %31 = getelementptr inbounds i8, i8* %15, i64 0
  store i8 1, i8* %31, align 16
  %32 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 1, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 1, i8* %33, align 2
  store i32 3, i32* %9, align 4
  br label %34

34:                                               ; preds = %44, %26
  %35 = load i32, i32* %9, align 4
  %36 = load i32, i32* @BUFFER, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %47

38:                                               ; preds = %34
  %39 = load i64, i64* %11, align 8
  %40 = load i32, i32* %9, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %15, i64 %41
  %43 = bitcast i8* %42 to i64*
  store i64 %39, i64* %43, align 1
  br label %44

44:                                               ; preds = %38
  %45 = load i32, i32* %9, align 4
  %46 = add nsw i32 %45, 4
  store i32 %46, i32* %9, align 4
  br label %34

47:                                               ; preds = %34
  %48 = load i32, i32* @BUFFER, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %15, i64 %49
  store i8 0, i8* %50, align 1
  store i32 0, i32* %9, align 4
  br label %51

51:                                               ; preds = %64, %47
  %52 = load i32, i32* %9, align 4
  %53 = load i8*, i8** @exec, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = sub nsw i32 4096, %54
  %56 = call i32 @strlen(i8* %15)
  %57 = sub nsw i32 %55, %56
  %58 = icmp slt i32 %52, %57
  br i1 %58, label %59, label %67

59:                                               ; preds = %51
  %60 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %61 = load i32, i32* %9, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  store i8 -112, i8* %63, align 1
  br label %64

64:                                               ; preds = %59
  %65 = load i32, i32* %9, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %9, align 4
  br label %51

67:                                               ; preds = %51
  %68 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %69 = load i32, i32* %9, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  %72 = load i8*, i8** @exec, align 8
  %73 = load i8*, i8** @exec, align 8
  %74 = call i32 @strlen(i8* %73)
  %75 = call i32 @memcpy(i8* %71, i8* %72, i32 %74)
  %76 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %77 = call i32 @memcpy(i8* %76, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 5)
  %78 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %79 = call i32 @putenv(i8* %78)
  %80 = load i64, i64* %11, align 8
  %81 = load i32, i32* %10, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i64 %80, i32 %81)
  %83 = load i8*, i8** @PATH, align 8
  %84 = call i64 @execlp(i8* %83, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %15, i32 0)
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %67
  %87 = load i8*, i8** @PATH, align 8
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0), i8* %87)
  %89 = call i32 @exit(i32 1) #4
  unreachable

90:                                               ; preds = %67
  %91 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %91)
  %92 = load i32, i32* %3, align 4
  ret i32 %92
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @pointer(...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i64 @execlp(i8*, i8*, i8*, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
