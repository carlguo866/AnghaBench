; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_24015.c_child_process.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_24015.c_child_process.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"[-]%s. Fork Failed!\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"[-] %s. Wait Failed! \0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"Child Terminated Normally. Exit Code = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"Child Terminated Abnormally. Exit Code = %d.(%s)\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"[-] Child Stopped\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @child_process() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = call i32 (...) @fork()
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %15

9:                                                ; preds = %0
  %10 = load i32, i32* @stderr, align 4
  %11 = load i32, i32* @errno, align 4
  %12 = call i8* @strerror(i32 %11)
  %13 = call i32 (i32, i8*, ...) @fprintf(i32 %10, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %12)
  %14 = call i32 @exit(i32 127) #3
  unreachable

15:                                               ; preds = %0
  %16 = load i32, i32* %4, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %15
  %19 = call i32 (...) @vuln_start()
  br label %66

20:                                               ; preds = %15
  %21 = call i32 @wait(i32* %3)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = load i32, i32* @stderr, align 4
  %26 = load i32, i32* @errno, align 4
  %27 = call i8* @strerror(i32 %26)
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %20
  %31 = load i32, i32* %5, align 4
  %32 = load i32, i32* %4, align 4
  %33 = icmp ne i32 %31, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = call i32 (...) @abort() #3
  unreachable

36:                                               ; preds = %30
  %37 = load i32, i32* %3, align 4
  %38 = call i64 @WIFEXITED(i32 %37)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %36
  %41 = load i32, i32* %3, align 4
  %42 = call i32 @WEXITSTATUS(i32 %41)
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i32 %42)
  %44 = load i32, i32* %3, align 4
  %45 = call i32 @WEXITSTATUS(i32 %44)
  store i32 %45, i32* %1, align 4
  br label %68

46:                                               ; preds = %36
  %47 = load i32, i32* %3, align 4
  %48 = call i64 @WIFSIGNALED(i32 %47)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %59

50:                                               ; preds = %46
  %51 = load i32, i32* %3, align 4
  %52 = call i32 @WTERMSIG(i32 %51)
  %53 = load i32, i32* %3, align 4
  %54 = call i32 @WTERMSIG(i32 %53)
  %55 = call i8* @strsignal(i32 %54)
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0), i32 %52, i8* %55)
  %57 = load i32, i32* %3, align 4
  %58 = call i32 @WTERMSIG(i32 %57)
  store i32 %58, i32* %1, align 4
  br label %68

59:                                               ; preds = %46
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  br label %62

62:                                               ; preds = %59
  br label %63

63:                                               ; preds = %62
  br label %64

64:                                               ; preds = %63
  br label %65

65:                                               ; preds = %64
  br label %66

66:                                               ; preds = %65, %18
  br label %67

67:                                               ; preds = %66
  store i32 1, i32* %1, align 4
  br label %68

68:                                               ; preds = %67, %50, %40
  %69 = load i32, i32* %1, align 4
  ret i32 %69
}

declare dso_local i32 @fork(...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @vuln_start(...) #1

declare dso_local i32 @wait(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @abort(...) #2

declare dso_local i64 @WIFEXITED(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WEXITSTATUS(i32) #1

declare dso_local i64 @WIFSIGNALED(i32) #1

declare dso_local i32 @WTERMSIG(i32) #1

declare dso_local i8* @strsignal(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
