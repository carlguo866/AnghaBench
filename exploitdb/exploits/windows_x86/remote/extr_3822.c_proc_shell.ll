; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_3822.c_proc_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_3822.c_proc_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIGINT = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"getshell(): select() failed.\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"getshell(): read() failed.\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"getshell(): write() failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @proc_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [4097 x i8], align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %6 = load i32, i32* @SIGINT, align 4
  %7 = load i32, i32* @SIG_IGN, align 4
  %8 = call i32 @signal(i32 %6, i32 %7)
  br label %9

9:                                                ; preds = %1, %54
  %10 = call i32 @FD_ZERO(i32* %5)
  %11 = call i32 @FD_SET(i32 0, i32* %5)
  %12 = load i32, i32* %2, align 4
  %13 = call i32 @FD_SET(i32 %12, i32* %5)
  %14 = load i32, i32* %2, align 4
  %15 = add nsw i32 %14, 1
  %16 = call i32 @select(i32 %15, i32* %5, i32 0, i32 0, i32 0)
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %9
  %19 = call i32 @printe(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %20

20:                                               ; preds = %18, %9
  %21 = call i64 @FD_ISSET(i32 0, i32* %5)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %39

23:                                               ; preds = %20
  %24 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %25 = call i32 @read(i32 0, i8* %24, i32 4096)
  store i32 %25, i32* %3, align 4
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = call i32 @printe(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %29

29:                                               ; preds = %27, %23
  %30 = load i32, i32* %2, align 4
  %31 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %32 = load i32, i32* %3, align 4
  %33 = call i32 @write(i32 %30, i8* %31, i32 %32)
  %34 = load i32, i32* %3, align 4
  %35 = icmp ne i32 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = call i32 @printe(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 1)
  br label %38

38:                                               ; preds = %36, %29
  br label %39

39:                                               ; preds = %38, %20
  %40 = load i32, i32* %2, align 4
  %41 = call i64 @FD_ISSET(i32 %40, i32* %5)
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %54

43:                                               ; preds = %39
  %44 = load i32, i32* %2, align 4
  %45 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %46 = call i32 @read(i32 %44, i8* %45, i32 4096)
  store i32 %46, i32* %3, align 4
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = call i32 @exit(i32 0) #3
  unreachable

50:                                               ; preds = %43
  %51 = getelementptr inbounds [4097 x i8], [4097 x i8]* %4, i64 0, i64 0
  %52 = load i32, i32* %3, align 4
  %53 = call i32 @write(i32 1, i8* %51, i32 %52)
  br label %54

54:                                               ; preds = %50, %39
  br label %9
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
