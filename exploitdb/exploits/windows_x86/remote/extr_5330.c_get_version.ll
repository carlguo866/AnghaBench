; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_5330.c_get_version.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_5330.c_get_version.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8* }

@.str = private unnamed_addr constant [25 x i8] c"GET /a.html HTTP/1.0\0D\0A\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Server:\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Win32\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"   [-] OS is not a Win32\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Apache/\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"   [-] No Apache\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"   [+] Version of Apache is %s\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.9 = private unnamed_addr constant [46 x i8] c"   [-] This version of Apache is UNSUPPORTED\0A\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"   [+] This version of Apache is SUPPORTED\0A\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"mod_jk2/\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"   [-] No mod_jk2\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"   [+] mod_jk2 is %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [47 x i8] c"   [-] This version of mod_jk2 is UNSUPPORTED\0A\00", align 1
@.str.15 = private unnamed_addr constant [45 x i8] c"   [+] This version of mod_jk2 is SUPPORTED\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_version(i8* %0, i32 %1, i32* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca [4096 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca [1000 x i8], align 16
  %12 = alloca [1000 x i8], align 16
  %13 = alloca [1000 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  %18 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %19 = call i32 @memset(i8* %18, i32 0, i32 4096)
  %20 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %21 = call i32 @memset(i8* %20, i32 0, i32 1000)
  %22 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %23 = call i32 @memset(i8* %22, i32 0, i32 1000)
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %25 = call i32 @memset(i8* %24, i32 0, i32 1000)
  %26 = load i8*, i8** %5, align 8
  %27 = load i32, i32* %6, align 4
  %28 = call i32 @do_connect(i8* %26, i32 %27)
  store i32 %28, i32* %17, align 4
  %29 = load i32, i32* %17, align 4
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %3
  store i32 -1, i32* %4, align 4
  br label %205

32:                                               ; preds = %3
  %33 = load i32, i32* %17, align 4
  %34 = call i32 @strlen(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %35 = call i32 @send(i32 %33, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i32 %34, i32 0)
  %36 = load i32, i32* %17, align 4
  %37 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %38 = call i32 @recv(i32 %36, i8* %37, i32 4096, i32 0)
  store i32 %38, i32* %14, align 4
  %39 = icmp sle i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %32
  store i32 -1, i32* %4, align 4
  br label %205

41:                                               ; preds = %32
  %42 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 4095
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i64 0, i64 0
  %44 = call i8* @strstr(i8* %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i8* %44, i8** %9, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  store i32 -1, i32* %4, align 4
  br label %205

47:                                               ; preds = %41
  %48 = load i8*, i8** %9, align 8
  %49 = call i8* @strstr(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i8* %49, i8** %10, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  store i32 -1, i32* %4, align 4
  br label %205

52:                                               ; preds = %47
  %53 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %54 = load i8*, i8** %9, align 8
  %55 = load i8*, i8** %10, align 8
  %56 = load i8*, i8** %9, align 8
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = call i32 @strncpy(i8* %53, i8* %54, i32 %60)
  %62 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %63 = call i8* @strstr(i8* %62, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  store i8* %63, i8** %9, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %52
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %205

67:                                               ; preds = %52
  %68 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %69 = call i8* @strstr(i8* %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  store i8* %69, i8** %9, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %71, label %73

71:                                               ; preds = %67
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %205

73:                                               ; preds = %67
  %74 = load i8*, i8** %9, align 8
  %75 = call i32 @strlen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %79 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %80 = call i32 @strlen(i8* %79)
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  %83 = getelementptr inbounds i8, i8* %82, i64 -1
  %84 = icmp ugt i8* %77, %83
  br i1 %84, label %85, label %86

85:                                               ; preds = %73
  store i32 -1, i32* %4, align 4
  br label %205

86:                                               ; preds = %73
  %87 = call i32 @strlen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %88 = load i8*, i8** %9, align 8
  %89 = sext i32 %87 to i64
  %90 = getelementptr inbounds i8, i8* %88, i64 %89
  store i8* %90, i8** %9, align 8
  %91 = load i8*, i8** %9, align 8
  %92 = call i8* @strstr(i8* %91, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i8* %92, i8** %10, align 8
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %95

94:                                               ; preds = %86
  store i32 -1, i32* %4, align 4
  br label %205

95:                                               ; preds = %86
  %96 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %97 = load i8*, i8** %9, align 8
  %98 = load i8*, i8** %10, align 8
  %99 = load i8*, i8** %9, align 8
  %100 = ptrtoint i8* %98 to i64
  %101 = ptrtoint i8* %99 to i64
  %102 = sub i64 %100, %101
  %103 = trunc i64 %102 to i32
  %104 = call i32 @strncpy(i8* %96, i8* %97, i32 %103)
  %105 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i8* %105)
  store i32 0, i32* %16, align 4
  store i32 0, i32* %15, align 4
  br label %107

107:                                              ; preds = %127, %95
  %108 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %109 = load i32, i32* %15, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %108, i64 %110
  %112 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %111, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = icmp ne i8* %113, null
  br i1 %114, label %115, label %130

115:                                              ; preds = %107
  %116 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %117 = load i32, i32* %15, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %116, i64 %118
  %120 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %119, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds [1000 x i8], [1000 x i8]* %12, i64 0, i64 0
  %123 = call i8* @strstr(i8* %121, i8* %122)
  %124 = icmp ne i8* %123, null
  br i1 %124, label %125, label %126

125:                                              ; preds = %115
  store i32 1, i32* %16, align 4
  br label %130

126:                                              ; preds = %115
  br label %127

127:                                              ; preds = %126
  %128 = load i32, i32* %15, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %15, align 4
  br label %107

130:                                              ; preds = %125, %107
  %131 = load i32, i32* %16, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %205

135:                                              ; preds = %130
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0))
  %137 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %138 = load i8*, i8** %9, align 8
  %139 = load i8*, i8** %10, align 8
  %140 = load i8*, i8** %9, align 8
  %141 = ptrtoint i8* %139 to i64
  %142 = ptrtoint i8* %140 to i64
  %143 = sub i64 %141, %142
  %144 = trunc i64 %143 to i32
  %145 = call i32 @strncpy(i8* %137, i8* %138, i32 %144)
  %146 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %147 = call i8* @strstr(i8* %146, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  store i8* %147, i8** %9, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %149, label %151

149:                                              ; preds = %135
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %205

151:                                              ; preds = %135
  %152 = load i8*, i8** %9, align 8
  %153 = call i8* @strstr(i8* %152, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i8* %153, i8** %10, align 8
  %154 = icmp eq i8* %153, null
  br i1 %154, label %155, label %161

155:                                              ; preds = %151
  %156 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %157 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %158 = call i32 @strlen(i8* %157)
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %156, i64 %159
  store i8* %160, i8** %10, align 8
  br label %161

161:                                              ; preds = %155, %151
  %162 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %163 = load i8*, i8** %9, align 8
  %164 = load i8*, i8** %10, align 8
  %165 = load i8*, i8** %9, align 8
  %166 = ptrtoint i8* %164 to i64
  %167 = ptrtoint i8* %165 to i64
  %168 = sub i64 %166, %167
  %169 = trunc i64 %168 to i32
  %170 = call i32 @strncpy(i8* %162, i8* %163, i32 %169)
  %171 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i8* %171)
  store i32 0, i32* %16, align 4
  store i32 0, i32* %15, align 4
  br label %173

173:                                              ; preds = %195, %161
  %174 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %175 = load i32, i32* %15, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %174, i64 %176
  %178 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %177, i32 0, i32 0
  %179 = load i8*, i8** %178, align 8
  %180 = icmp ne i8* %179, null
  br i1 %180, label %181, label %198

181:                                              ; preds = %173
  %182 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %183 = load i32, i32* %15, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %182, i64 %184
  %186 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %185, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds [1000 x i8], [1000 x i8]* %13, i64 0, i64 0
  %189 = call i8* @strstr(i8* %187, i8* %188)
  %190 = icmp ne i8* %189, null
  br i1 %190, label %191, label %194

191:                                              ; preds = %181
  %192 = load i32, i32* %15, align 4
  %193 = load i32*, i32** %7, align 8
  store i32 %192, i32* %193, align 4
  store i32 1, i32* %16, align 4
  br label %198

194:                                              ; preds = %181
  br label %195

195:                                              ; preds = %194
  %196 = load i32, i32* %15, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %15, align 4
  br label %173

198:                                              ; preds = %191, %173
  %199 = load i32, i32* %16, align 4
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %198
  %202 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %205

203:                                              ; preds = %198
  %204 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.15, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %205

205:                                              ; preds = %203, %201, %149, %133, %94, %85, %71, %65, %51, %46, %40, %31
  %206 = load i32, i32* %4, align 4
  ret i32 %206
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @do_connect(i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
