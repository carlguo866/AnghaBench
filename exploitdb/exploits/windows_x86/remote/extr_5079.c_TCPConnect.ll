; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_5079.c_TCPConnect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86/remote/extr_5079.c_TCPConnect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@FIONBIO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @TCPConnect(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.timeval, align 4
  %10 = alloca [2 x i32], align 4
  %11 = alloca [2 x i32], align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 1, i32* %14, align 4
  store i32 4, i32* %15, align 4
  %16 = load i32, i32* @AF_INET, align 4
  %17 = load i32, i32* @SOCK_STREAM, align 4
  %18 = load i32, i32* @IPPROTO_TCP, align 4
  %19 = call i32 @socket(i32 %16, i32 %17, i32 %18)
  store i32 %19, i32* %12, align 4
  %20 = load i32, i32* %12, align 4
  %21 = load i32, i32* @INVALID_SOCKET, align 4
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %3
  %24 = load i32, i32* @SOCKET_ERROR, align 4
  store i32 %24, i32* %4, align 4
  br label %74

25:                                               ; preds = %3
  %26 = load i32, i32* %12, align 4
  %27 = load i32, i32* @FIONBIO, align 4
  %28 = call i32 @ioctlsocket(i32 %26, i32 %27, i32* %14)
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 0
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  store i32 1, i32* %30, align 4
  %31 = load i32, i32* %12, align 4
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %31, i32* %33, align 4
  %34 = call i32 @memset(%struct.sockaddr_in* %8, i32 0, i32 12)
  %35 = load i32, i32* %6, align 4
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* @AF_INET, align 4
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %5, align 4
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 0
  store i32 %39, i32* %41, align 4
  %42 = load i32, i32* %12, align 4
  %43 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %44 = call i32 @connect(i32 %42, %struct.sockaddr* %43, i32 12)
  %45 = load i32, i32* %7, align 4
  %46 = sdiv i32 %45, 1000
  %47 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  store i32 %46, i32* %47, align 4
  %48 = load i32, i32* %7, align 4
  %49 = srem i32 %48, 1000
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  store i32 %49, i32* %50, align 4
  %51 = bitcast [2 x i32]* %10 to i32*
  %52 = bitcast [2 x i32]* %11 to i32*
  %53 = call i32 @select(i32 0, i32* null, i32* %51, i32* %52, %struct.timeval* %9)
  store i32 %53, i32* %13, align 4
  %54 = load i32, i32* %13, align 4
  switch i32 %54, label %59 [
    i32 -1, label %55
    i32 0, label %55
  ]

55:                                               ; preds = %25, %25
  %56 = load i32, i32* %12, align 4
  %57 = call i32 @closesocket(i32 %56)
  %58 = load i32, i32* @SOCKET_ERROR, align 4
  store i32 %58, i32* %4, align 4
  br label %74

59:                                               ; preds = %25
  %60 = load i32, i32* %12, align 4
  %61 = bitcast [2 x i32]* %11 to i32*
  %62 = call i32 @FD_ISSET(i32 %60, i32* %61)
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %59
  store i32 0, i32* %14, align 4
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* @FIONBIO, align 4
  %67 = call i32 @ioctlsocket(i32 %65, i32 %66, i32* %14)
  %68 = load i32, i32* %12, align 4
  store i32 %68, i32* %4, align 4
  br label %74

69:                                               ; preds = %59
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %12, align 4
  %72 = call i32 @closesocket(i32 %71)
  %73 = load i32, i32* @SOCKET_ERROR, align 4
  store i32 %73, i32* %4, align 4
  br label %74

74:                                               ; preds = %70, %64, %55, %23
  %75 = load i32, i32* %4, align 4
  ret i32 %75
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @ioctlsocket(i32, i32, i32*) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @FD_ISSET(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
