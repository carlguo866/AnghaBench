; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_my_bsearch.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_my_bsearch.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SSIZE_MAX = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i8*, i8*, i64, i64, i32 (i8*, i8*)*)* @my_bsearch to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @my_bsearch(i8* %0, i8* %1, i64 %2, i64 %3, i32 (i8*, i8*)* %4) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32 (i8*, i8*)*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i32 (i8*, i8*)* %4, i32 (i8*, i8*)** %11, align 8
  %16 = load i8*, i8** %7, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %5
  %19 = call i32 (...) @die()
  br label %20

20:                                               ; preds = %18, %5
  %21 = load i64, i64* %10, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  %24 = call i32 (...) @die()
  br label %25

25:                                               ; preds = %23, %20
  %26 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %11, align 8
  %27 = icmp ne i32 (i8*, i8*)* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = call i32 (...) @die()
  br label %30

30:                                               ; preds = %28, %25
  %31 = load i64, i64* %9, align 8
  %32 = load i64, i64* @SSIZE_MAX, align 8
  %33 = load i64, i64* %10, align 8
  %34 = udiv i64 %32, %33
  %35 = icmp uge i64 %31, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = call i32 (...) @die()
  br label %38

38:                                               ; preds = %36, %30
  %39 = load i8*, i8** %8, align 8
  %40 = icmp ne i8* %39, null
  %41 = xor i1 %40, true
  %42 = zext i1 %41 to i32
  %43 = load i64, i64* %9, align 8
  %44 = icmp ne i64 %43, 0
  %45 = xor i1 %44, true
  %46 = zext i1 %45 to i32
  %47 = icmp ne i32 %42, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %38
  %49 = call i32 (...) @die()
  br label %50

50:                                               ; preds = %48, %38
  %51 = load i8*, i8** %8, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = load i64, i64* %9, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %53, %50
  store i64 0, i64* %6, align 8
  br label %120

57:                                               ; preds = %53
  store i64 0, i64* %12, align 8
  %58 = load i64, i64* %9, align 8
  %59 = sub i64 %58, 1
  store i64 %59, i64* %13, align 8
  br label %60

60:                                               ; preds = %111, %57
  %61 = load i64, i64* %12, align 8
  %62 = load i64, i64* %13, align 8
  %63 = icmp ule i64 %61, %62
  br i1 %63, label %64, label %112

64:                                               ; preds = %60
  %65 = load i64, i64* %12, align 8
  %66 = load i64, i64* %13, align 8
  %67 = load i64, i64* %12, align 8
  %68 = sub i64 %66, %67
  %69 = udiv i64 %68, 2
  %70 = add i64 %65, %69
  store i64 %70, i64* %14, align 8
  %71 = load i64, i64* %14, align 8
  %72 = load i64, i64* %9, align 8
  %73 = icmp uge i64 %71, %72
  br i1 %73, label %74, label %76

74:                                               ; preds = %64
  %75 = call i32 (...) @die()
  br label %76

76:                                               ; preds = %74, %64
  %77 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %11, align 8
  %78 = load i8*, i8** %7, align 8
  %79 = load i8*, i8** %8, align 8
  %80 = load i64, i64* %14, align 8
  %81 = load i64, i64* %10, align 8
  %82 = mul i64 %80, %81
  %83 = getelementptr i8, i8* %79, i64 %82
  %84 = call i32 %77(i8* %78, i8* %83)
  store i32 %84, i32* %15, align 4
  %85 = load i32, i32* %15, align 4
  switch i32 %85, label %109 [
    i32 0, label %86
    i32 -1, label %88
    i32 1, label %106
  ]

86:                                               ; preds = %76
  %87 = load i64, i64* %14, align 8
  store i64 %87, i64* %6, align 8
  br label %120

88:                                               ; preds = %76
  %89 = load i64, i64* %14, align 8
  %90 = icmp ule i64 %89, 0
  br i1 %90, label %91, label %103

91:                                               ; preds = %88
  %92 = load i64, i64* %14, align 8
  %93 = icmp ne i64 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = call i32 (...) @die()
  br label %96

96:                                               ; preds = %94, %91
  %97 = load i64, i64* %12, align 8
  %98 = icmp ne i64 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %96
  %100 = call i32 (...) @die()
  br label %101

101:                                              ; preds = %99, %96
  %102 = load i64, i64* %12, align 8
  store i64 %102, i64* %6, align 8
  br label %120

103:                                              ; preds = %88
  %104 = load i64, i64* %14, align 8
  %105 = sub i64 %104, 1
  store i64 %105, i64* %13, align 8
  br label %111

106:                                              ; preds = %76
  %107 = load i64, i64* %14, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %12, align 8
  br label %111

109:                                              ; preds = %76
  %110 = call i32 (...) @die()
  br label %111

111:                                              ; preds = %109, %106, %103
  br label %60

112:                                              ; preds = %60
  %113 = load i64, i64* %12, align 8
  %114 = load i64, i64* %9, align 8
  %115 = icmp ugt i64 %113, %114
  br i1 %115, label %116, label %118

116:                                              ; preds = %112
  %117 = call i32 (...) @die()
  br label %118

118:                                              ; preds = %116, %112
  %119 = load i64, i64* %12, align 8
  store i64 %119, i64* %6, align 8
  br label %120

120:                                              ; preds = %118, %101, %86, %56
  %121 = load i64, i64* %6, align 8
  ret i64 %121
}

declare dso_local i32 @die(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
