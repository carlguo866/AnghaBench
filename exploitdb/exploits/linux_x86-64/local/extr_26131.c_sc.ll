; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_26131.c_sc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_26131.c_sc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sc() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = ptrtoint i32* %1 to i32
  %10 = and i32 %9, -8192
  %11 = sext i32 %10 to i64
  %12 = inttoptr i64 %11 to i32**
  %13 = load i32*, i32** %12, align 8
  store i32* %13, i32** %3, align 8
  %14 = load i32*, i32** %3, align 8
  %15 = ptrtoint i32* %14 to i32
  %16 = ashr i32 %15, 36
  store i32 %16, i32* %4, align 4
  %17 = call i32 @TMP(i32 1)
  store i32 %17, i32* %5, align 4
  %18 = call i32 @TMP(i32 2)
  store i32 %18, i32* %6, align 4
  store i32 0, i32* %1, align 4
  br label %19

19:                                               ; preds = %90, %0
  %20 = load i32, i32* %1, align 4
  %21 = icmp slt i32 %20, 4000
  br i1 %21, label %22, label %93

22:                                               ; preds = %19
  %23 = load i32*, i32** %3, align 8
  %24 = load i32, i32* %1, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %23, i64 %25
  %27 = bitcast i32* %26 to i8*
  %28 = bitcast i8* %27 to i32*
  store i32* %28, i32** %7, align 8
  %29 = load i32*, i32** %7, align 8
  %30 = getelementptr inbounds i32, i32* %29, i64 0
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = inttoptr i64 %32 to i32*
  store i32* %33, i32** %8, align 8
  %34 = load i32*, i32** %7, align 8
  %35 = getelementptr inbounds i32, i32* %34, i64 0
  %36 = load i32, i32* %35, align 4
  %37 = load i32*, i32** %7, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %36, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %22
  %42 = load i32*, i32** %7, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 0
  %44 = load i32, i32* %43, align 4
  %45 = ashr i32 %44, 36
  %46 = load i32, i32* %4, align 4
  %47 = icmp ne i32 %45, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %41, %22
  br label %90

49:                                               ; preds = %41
  store i32 0, i32* %2, align 4
  br label %50

50:                                               ; preds = %86, %49
  %51 = load i32, i32* %2, align 4
  %52 = icmp slt i32 %51, 20
  br i1 %52, label %53, label %89

53:                                               ; preds = %50
  %54 = load i32*, i32** %8, align 8
  %55 = load i32, i32* %2, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = load i32, i32* %5, align 4
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %61, label %85

61:                                               ; preds = %53
  %62 = load i32*, i32** %8, align 8
  %63 = load i32, i32* %2, align 4
  %64 = add nsw i32 %63, 1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %62, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = load i32, i32* %6, align 4
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %70, label %85

70:                                               ; preds = %61
  store i32 0, i32* %1, align 4
  br label %71

71:                                               ; preds = %81, %70
  %72 = load i32, i32* %1, align 4
  %73 = icmp slt i32 %72, 8
  br i1 %73, label %74, label %84

74:                                               ; preds = %71
  %75 = load i32*, i32** %8, align 8
  %76 = load i32, i32* %2, align 4
  %77 = load i32, i32* %1, align 4
  %78 = add nsw i32 %76, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %75, i64 %79
  store i32 0, i32* %80, align 4
  br label %93

81:                                               ; No predecessors!
  %82 = load i32, i32* %1, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %1, align 4
  br label %71

84:                                               ; preds = %71
  br label %85

85:                                               ; preds = %84, %61, %53
  br label %86

86:                                               ; preds = %85
  %87 = load i32, i32* %2, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %2, align 4
  br label %50

89:                                               ; preds = %50
  br label %90

90:                                               ; preds = %89, %48
  %91 = load i32, i32* %1, align 4
  %92 = add nsw i32 %91, 4
  store i32 %92, i32* %1, align 4
  br label %19

93:                                               ; preds = %74, %19
  ret void
}

declare dso_local i32 @TMP(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
