; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_get_symbol.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_get_symbol.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"/proc/kallsyms\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"/proc/ksyms\00", align 1
@EOF = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"%p %c %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%p %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"_O/\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"_S.\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"smp\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"resolved symbol %s to %p\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_symbol(i8* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca [512 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %11 = call i32* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %11, i32** %4, align 8
  %12 = load i32*, i32** %4, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %14, label %20

14:                                               ; preds = %1
  %15 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %15, i32** %4, align 8
  %16 = load i32*, i32** %4, align 8
  %17 = icmp eq i32* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i64 0, i64* %2, align 8
  br label %107

19:                                               ; preds = %14
  store i32 1, i32* %9, align 4
  br label %20

20:                                               ; preds = %19, %1
  br label %21

21:                                               ; preds = %103, %86, %48, %20
  %22 = load i32, i32* %8, align 4
  %23 = load i32, i32* @EOF, align 4
  %24 = icmp ne i32 %22, %23
  br i1 %24, label %25, label %104

25:                                               ; preds = %21
  %26 = load i32, i32* %9, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %25
  %29 = load i32*, i32** %4, align 8
  %30 = bitcast i64* %5 to i8**
  %31 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %32 = call i32 (i32*, i8*, ...) @fscanf(i32* %29, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8** %30, i8* %6, i8* %31)
  store i32 %32, i32* %8, align 4
  br label %83

33:                                               ; preds = %25
  %34 = load i32*, i32** %4, align 8
  %35 = bitcast i64* %5 to i8**
  %36 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %37 = call i32 (i32*, i8*, ...) @fscanf(i32* %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8** %35, i8* %36)
  store i32 %37, i32* %8, align 4
  %38 = load i32, i32* %8, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %40, label %82

40:                                               ; preds = %33
  %41 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %42 = call i64 @strstr(i8* %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %46 = call i64 @strstr(i8* %45, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %44, %40
  br label %21

49:                                               ; preds = %44
  %50 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %51 = call i8* @strrchr(i8* %50, i8 signext 95)
  store i8* %51, i8** %10, align 8
  %52 = load i8*, i8** %10, align 8
  %53 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %54 = getelementptr inbounds i8, i8* %53, i64 5
  %55 = icmp ugt i8* %52, %54
  br i1 %55, label %56, label %81

56:                                               ; preds = %49
  %57 = load i8*, i8** %10, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 -3
  %59 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %81, label %61

61:                                               ; preds = %56
  %62 = load i8*, i8** %10, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 -4
  store i8* %63, i8** %10, align 8
  br label %64

64:                                               ; preds = %76, %61
  %65 = load i8*, i8** %10, align 8
  %66 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %67 = icmp ugt i8* %65, %66
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = load i8*, i8** %10, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 -1
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = icmp eq i32 %72, 95
  br label %74

74:                                               ; preds = %68, %64
  %75 = phi i1 [ false, %64 ], [ %73, %68 ]
  br i1 %75, label %76, label %79

76:                                               ; preds = %74
  %77 = load i8*, i8** %10, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 -1
  store i8* %78, i8** %10, align 8
  br label %64

79:                                               ; preds = %74
  %80 = load i8*, i8** %10, align 8
  store i8 0, i8* %80, align 1
  br label %81

81:                                               ; preds = %79, %56, %49
  br label %82

82:                                               ; preds = %81, %33
  br label %83

83:                                               ; preds = %82, %28
  %84 = load i32, i32* %8, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %83
  %87 = load i32*, i32** %4, align 8
  %88 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %89 = call i32 (i32*, i8*, ...) @fscanf(i32* %87, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %88)
  br label %21

90:                                               ; preds = %83
  %91 = load i8*, i8** %3, align 8
  %92 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %93 = call i32 @strcmp(i8* %91, i8* %92)
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %103, label %95

95:                                               ; preds = %90
  %96 = load i8*, i8** %3, align 8
  %97 = load i64, i64* %5, align 8
  %98 = inttoptr i64 %97 to i8*
  %99 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %96, i8* %98)
  %100 = load i32*, i32** %4, align 8
  %101 = call i32 @fclose(i32* %100)
  %102 = load i64, i64* %5, align 8
  store i64 %102, i64* %2, align 8
  br label %107

103:                                              ; preds = %90
  br label %21

104:                                              ; preds = %21
  %105 = load i32*, i32** %4, align 8
  %106 = call i32 @fclose(i32* %105)
  store i64 0, i64* %2, align 8
  br label %107

107:                                              ; preds = %104, %95, %18
  %108 = load i64, i64* %2, align 8
  ret i64 %108
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fscanf(i32*, i8*, ...) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i8* @strrchr(i8*, i8 signext) #1

declare dso_local i32 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
