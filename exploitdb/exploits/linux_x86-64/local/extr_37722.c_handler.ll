; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_37722.c_handler.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_37722.c_handler.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i64* }

@REG_ERR = common dso_local global i64 0, align 8
@REG_TRAPNO = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"PRESENT \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"WRITE \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"at 0x%llX\00", align 1
@REG_CR2 = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [5 x i8] c" EXT\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"GDT\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"LDT\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"IDT\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c" %s%s index %lu, \00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"GP\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"NP\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"SS\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"PF\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"IRET\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.18 = private unnamed_addr constant [40 x i8] c"+ State was corrupted: %s #%s(0x%lx%s)\0A\00", align 1
@SIGSEGV = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [8 x i8] c"SIGSEGV\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"SIGTRAP\00", align 1
@cpl0 = common dso_local global i64 0, align 8
@.str.21 = private unnamed_addr constant [8 x i8] c"  CPL0\0A\00", align 1
@REG_EFL = common dso_local global i64 0, align 8
@X86_EFLAGS_IF = common dso_local global i32 0, align 4
@.str.22 = private unnamed_addr constant [41 x i8] c"  RFLAGS = 0x%llX (interrupts disabled)\0A\00", align 1
@REG_SP = common dso_local global i64 0, align 8
@expected_rsp = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [19 x i8] c"  RSP = 0x%016llX\0A\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"  SS = 0x%hX\0A\00", align 1
@jmpbuf = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32, i32*, i8*)* @handler to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @handler(i32 %0, i32* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.TYPE_5__*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [64 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca [32 x i8], align 16
  %14 = alloca i16, align 2
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  store i8* %2, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = bitcast i8* %15 to %struct.TYPE_5__*
  store %struct.TYPE_5__* %16, %struct.TYPE_5__** %7, align 8
  %17 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %18 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %17, i32 0, i32 0
  %19 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %18, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = load i64, i64* @REG_ERR, align 8
  %22 = getelementptr inbounds i64, i64* %20, i64 %21
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %8, align 8
  %24 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %25 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %24, i32 0, i32 0
  %26 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %25, i32 0, i32 0
  %27 = load i64*, i64** %26, align 8
  %28 = load i64, i64* @REG_TRAPNO, align 8
  %29 = getelementptr inbounds i64, i64* %27, i64 %28
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %9, align 8
  %31 = bitcast [64 x i8]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 0, i64 64, i1 false)
  %32 = load i64, i64* %9, align 8
  %33 = icmp eq i64 %32, 14
  br i1 %33, label %34, label %71

34:                                               ; preds = %3
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %36 = call i32 @strcpy(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %37 = load i64, i64* %8, align 8
  %38 = and i64 %37, 1
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %34
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %42 = call i32 @strcat(i8* %41, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  br label %43

43:                                               ; preds = %40, %34
  %44 = load i64, i64* %8, align 8
  %45 = and i64 %44, 2
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %49 = call i32 @strcat(i8* %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  br label %50

50:                                               ; preds = %47, %43
  %51 = load i64, i64* %8, align 8
  %52 = and i64 %51, 4
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %56 = call i32 @strcat(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %57

57:                                               ; preds = %54, %50
  %58 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %59 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %60 = call i32 @strlen(i8* %59)
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %58, i64 %61
  %63 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %64 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %63, i32 0, i32 0
  %65 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %64, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* @REG_CR2, align 8
  %68 = getelementptr inbounds i64, i64* %66, i64 %67
  %69 = load i64, i64* %68, align 8
  %70 = call i32 (i8*, i8*, ...) @sprintf(i8* %62, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i64 %69)
  br label %105

71:                                               ; preds = %3
  %72 = load i64, i64* %8, align 8
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %104

74:                                               ; preds = %71
  %75 = load i64, i64* %8, align 8
  %76 = and i64 %75, 1
  %77 = icmp ne i64 %76, 0
  %78 = zext i1 %77 to i64
  %79 = select i1 %77, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0)
  store i8* %79, i8** %11, align 8
  %80 = load i64, i64* %8, align 8
  %81 = and i64 %80, 6
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %74
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8** %12, align 8
  br label %97

84:                                               ; preds = %74
  %85 = load i64, i64* %8, align 8
  %86 = and i64 %85, 6
  %87 = icmp eq i64 %86, 4
  br i1 %87, label %88, label %89

88:                                               ; preds = %84
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8** %12, align 8
  br label %96

89:                                               ; preds = %84
  %90 = load i64, i64* %8, align 8
  %91 = and i64 %90, 6
  %92 = icmp eq i64 %91, 2
  br i1 %92, label %93, label %94

93:                                               ; preds = %89
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8** %12, align 8
  br label %95

94:                                               ; preds = %89
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i8** %12, align 8
  br label %95

95:                                               ; preds = %94, %93
  br label %96

96:                                               ; preds = %95, %88
  br label %97

97:                                               ; preds = %96, %83
  %98 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %99 = load i8*, i8** %12, align 8
  %100 = load i8*, i8** %11, align 8
  %101 = load i64, i64* %8, align 8
  %102 = lshr i64 %101, 3
  %103 = call i32 (i8*, i8*, ...) @sprintf(i8* %98, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* %99, i8* %100, i64 %102)
  br label %104

104:                                              ; preds = %97, %71
  br label %105

105:                                              ; preds = %104, %57
  %106 = load i64, i64* %9, align 8
  %107 = icmp eq i64 %106, 13
  br i1 %107, label %108, label %111

108:                                              ; preds = %105
  %109 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %110 = call i32 @strcpy(i8* %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0))
  br label %143

111:                                              ; preds = %105
  %112 = load i64, i64* %9, align 8
  %113 = icmp eq i64 %112, 11
  br i1 %113, label %114, label %117

114:                                              ; preds = %111
  %115 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %116 = call i32 @strcpy(i8* %115, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0))
  br label %142

117:                                              ; preds = %111
  %118 = load i64, i64* %9, align 8
  %119 = icmp eq i64 %118, 12
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %122 = call i32 @strcpy(i8* %121, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0))
  br label %141

123:                                              ; preds = %117
  %124 = load i64, i64* %9, align 8
  %125 = icmp eq i64 %124, 14
  br i1 %125, label %126, label %129

126:                                              ; preds = %123
  %127 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %128 = call i32 @strcpy(i8* %127, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0))
  br label %140

129:                                              ; preds = %123
  %130 = load i64, i64* %9, align 8
  %131 = icmp eq i64 %130, 32
  br i1 %131, label %132, label %135

132:                                              ; preds = %129
  %133 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %134 = call i32 @strcpy(i8* %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  br label %139

135:                                              ; preds = %129
  %136 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %137 = load i64, i64* %9, align 8
  %138 = call i32 (i8*, i8*, ...) @sprintf(i8* %136, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0), i64 %137)
  br label %139

139:                                              ; preds = %135, %132
  br label %140

140:                                              ; preds = %139, %126
  br label %141

141:                                              ; preds = %140, %120
  br label %142

142:                                              ; preds = %141, %114
  br label %143

143:                                              ; preds = %142, %108
  %144 = load i32, i32* %4, align 4
  %145 = load i32, i32* @SIGSEGV, align 4
  %146 = icmp eq i32 %144, %145
  %147 = zext i1 %146 to i64
  %148 = select i1 %146, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0)
  %149 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %150 = load i64, i64* %8, align 8
  %151 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.18, i64 0, i64 0), i8* %148, i8* %149, i64 %150, i8* %151)
  %153 = load i64, i64* @cpl0, align 8
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %143
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0))
  store i64 0, i64* @cpl0, align 8
  br label %157

157:                                              ; preds = %155, %143
  %158 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %159 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %158, i32 0, i32 0
  %160 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %159, i32 0, i32 0
  %161 = load i64*, i64** %160, align 8
  %162 = load i64, i64* @REG_EFL, align 8
  %163 = getelementptr inbounds i64, i64* %161, i64 %162
  %164 = load i64, i64* %163, align 8
  %165 = load i32, i32* @X86_EFLAGS_IF, align 4
  %166 = sext i32 %165 to i64
  %167 = and i64 %164, %166
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %178, label %169

169:                                              ; preds = %157
  %170 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %171 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %170, i32 0, i32 0
  %172 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %171, i32 0, i32 0
  %173 = load i64*, i64** %172, align 8
  %174 = load i64, i64* @REG_EFL, align 8
  %175 = getelementptr inbounds i64, i64* %173, i64 %174
  %176 = load i64, i64* %175, align 8
  %177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.22, i64 0, i64 0), i64 %176)
  br label %178

178:                                              ; preds = %169, %157
  %179 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %180 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %179, i32 0, i32 0
  %181 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %180, i32 0, i32 0
  %182 = load i64*, i64** %181, align 8
  %183 = load i64, i64* @REG_SP, align 8
  %184 = getelementptr inbounds i64, i64* %182, i64 %183
  %185 = load i64, i64* %184, align 8
  %186 = load i32, i32* @expected_rsp, align 4
  %187 = sext i32 %186 to i64
  %188 = icmp ne i64 %185, %187
  br i1 %188, label %189, label %198

189:                                              ; preds = %178
  %190 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %191 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %190, i32 0, i32 0
  %192 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %191, i32 0, i32 0
  %193 = load i64*, i64** %192, align 8
  %194 = load i64, i64* @REG_SP, align 8
  %195 = getelementptr inbounds i64, i64* %193, i64 %194
  %196 = load i64, i64* %195, align 8
  %197 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0), i64 %196)
  br label %198

198:                                              ; preds = %189, %178
  call void asm "mov %ss, $0", "=*rm,~{dirflag},~{fpsr},~{flags}"(i16* %14) #3, !srcloc !2
  %199 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %200 = call i16* @ssptr(%struct.TYPE_5__* %199)
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = icmp ne i32 %202, 7
  br i1 %203, label %204, label %218

204:                                              ; preds = %198
  %205 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %206 = call i16* @ssptr(%struct.TYPE_5__* %205)
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = load i16, i16* %14, align 2
  %210 = zext i16 %209 to i32
  %211 = icmp ne i32 %208, %210
  br i1 %211, label %212, label %218

212:                                              ; preds = %204
  %213 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %214 = call i16* @ssptr(%struct.TYPE_5__* %213)
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i64 0, i64 0), i32 %216)
  br label %218

218:                                              ; preds = %212, %204, %198
  %219 = load i32, i32* @jmpbuf, align 4
  %220 = call i32 @siglongjmp(i32 %219, i32 1)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i16* @ssptr(%struct.TYPE_5__*) #2

declare dso_local i32 @siglongjmp(i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 2592}
