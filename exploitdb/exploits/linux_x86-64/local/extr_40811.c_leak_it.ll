; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40811.c_leak_it.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40811.c_leak_it.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c" R8=%08x%08x\0A\00", align 1
@_r82 = common dso_local global i32 0, align 4
@_r81 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c" R9=%08x%08x\0A\00", align 1
@_r92 = common dso_local global i32 0, align 4
@_r91 = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"R10=%08x%08x\0A\00", align 1
@_r102 = common dso_local global i32 0, align 4
@_r101 = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [14 x i8] c"R11=%08x%08x\0A\00", align 1
@_r112 = common dso_local global i32 0, align 4
@_r111 = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"R12=%08x%08x\0A\00", align 1
@_r122 = common dso_local global i32 0, align 4
@_r121 = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [14 x i8] c"R13=%08x%08x\0A\00", align 1
@_r132 = common dso_local global i32 0, align 4
@_r131 = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [14 x i8] c"R14=%08x%08x\0A\00", align 1
@_r142 = common dso_local global i32 0, align 4
@_r141 = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [14 x i8] c"R15=%08x%08x\0A\00", align 1
@_r152 = common dso_local global i32 0, align 4
@_r151 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @leak_it() #0 {
  call void asm sideeffect ".intel_syntax noprefix\0A.code32\0Ajmp label1\0Afarcalllabel1:\0A.code64\0Amov eax, r8d\0Ashr r8, 32\0Amov ebx, r8d\0Amov ecx, r9d\0Ashr r9, 32\0Amov edx, r9d\0Amov esi, r10d\0Ashr r10, 32\0Amov edi, r10d\0A.att_syntax noprefix\0Alret\0A.intel_syntax noprefix\0Afarcalllabel2:\0Amov eax, r11d\0Ashr r11, 32\0Amov ebx, r11d\0Amov ecx, r12d\0Ashr r12, 32\0Amov edx, r12d\0Amov esi, r13d\0Ashr r13, 32\0Amov edi, r13d\0A.att_syntax noprefix\0Alret\0A.intel_syntax noprefix\0Afarcalllabel3:\0Amov eax, r14d\0Ashr r14, 32\0Amov ebx, r14d\0Amov ecx, r15d\0Ashr r15, 32\0Amov edx, r15d\0A.att_syntax noprefix\0Alret\0A.intel_syntax noprefix\0A.code32\0Alabel1:\0A.att_syntax noprefix\0Alcall $$0x33, $$farcalllabel1\0A.intel_syntax noprefix\0Amov _r81, eax\0Amov _r82, ebx\0Amov _r91, ecx\0Amov _r92, edx\0Amov _r101, esi\0Amov _r102, edi\0A.att_syntax noprefix\0Alcall $$0x33, $$farcalllabel2\0A.intel_syntax noprefix\0Amov _r111, eax\0Amov _r112, ebx\0Amov _r121, ecx\0Amov _r122, edx\0Amov _r131, esi\0Amov _r132, edi\0A.att_syntax noprefix\0Alcall $$0x33, $$farcalllabel3\0A.intel_syntax noprefix\0Amov _r141, eax\0Amov _r142, ebx\0Amov _r151, ecx\0Amov _r152, edx\0A.att_syntax noprefix\0A", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !2
  %1 = load i32, i32* @_r82, align 4
  %2 = load i32, i32* @_r81, align 4
  %3 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %1, i32 %2)
  %4 = load i32, i32* @_r92, align 4
  %5 = load i32, i32* @_r91, align 4
  %6 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i32 %4, i32 %5)
  %7 = load i32, i32* @_r102, align 4
  %8 = load i32, i32* @_r101, align 4
  %9 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 %7, i32 %8)
  %10 = load i32, i32* @_r112, align 4
  %11 = load i32, i32* @_r111, align 4
  %12 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 %10, i32 %11)
  %13 = load i32, i32* @_r122, align 4
  %14 = load i32, i32* @_r121, align 4
  %15 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 %13, i32 %14)
  %16 = load i32, i32* @_r132, align 4
  %17 = load i32, i32* @_r131, align 4
  %18 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 %16, i32 %17)
  %19 = load i32, i32* @_r142, align 4
  %20 = load i32, i32* @_r141, align 4
  %21 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i32 %19, i32 %20)
  %22 = load i32, i32* @_r152, align 4
  %23 = load i32, i32* @_r151, align 4
  %24 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32 %22, i32 %23)
  ret i32 0
}

declare dso_local i32 @printf(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 406, i32 435, i32 448, i32 464, i32 484, i32 497, i32 515, i32 531, i32 549, i32 567, i32 583, i32 601, i32 620, i32 637, i32 656, i32 682, i32 692, i32 720, i32 740, i32 759, i32 776, i32 795, i32 814, i32 831, i32 850, i32 869, i32 886, i32 905, i32 931, i32 941, i32 969, i32 989, i32 1008, i32 1025, i32 1044, i32 1063, i32 1080, i32 1099, i32 1125, i32 1135, i32 1163, i32 1176, i32 1189, i32 1215, i32 1248, i32 1276, i32 1295, i32 1314, i32 1333, i32 1352, i32 1372, i32 1392, i32 1418, i32 1451, i32 1479, i32 1499, i32 1519, i32 1539, i32 1559, i32 1579, i32 1599, i32 1625, i32 1658, i32 1686, i32 1706, i32 1726, i32 1746, i32 1766}
