; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_create_needed_libs.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_create_needed_libs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [69 x i8] c"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+,-./_\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"/usr/bin/env - %s --list %s\00", align 1
@LDSO = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"\09 \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"lib\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c" => /\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c" (0x\00", align 1
@create_needed_libs.prefixes = internal constant [4 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"/..\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"copied %u lib%s\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@EXIT_SUCCESS = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*)* @create_needed_libs to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @create_needed_libs(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [256 x i8], align 16
  %6 = alloca i32*, align 8
  %7 = alloca [256 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca [256 x i8], align 16
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = call i32 (...) @die()
  br label %18

18:                                               ; preds = %16, %2
  %19 = load i8*, i8** %3, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 47
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = call i32 (...) @die()
  br label %25

25:                                               ; preds = %23, %18
  %26 = load i8*, i8** %3, align 8
  %27 = call i32 @strspn(i8* %26, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i64 0, i64 0))
  %28 = load i8*, i8** %3, align 8
  %29 = call i32 @strlen(i8* %28)
  %30 = icmp ne i32 %27, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %25
  %32 = call i32 (...) @die()
  br label %33

33:                                               ; preds = %31, %25
  %34 = load i8*, i8** %4, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = call i32 (...) @die()
  br label %38

38:                                               ; preds = %36, %33
  %39 = load i8*, i8** %4, align 8
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp ne i32 %41, 47
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = call i32 (...) @die()
  br label %45

45:                                               ; preds = %43, %38
  %46 = load i8*, i8** %4, align 8
  %47 = load i8*, i8** %4, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = sub nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %46, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp ne i32 %53, 47
  br i1 %54, label %55, label %57

55:                                               ; preds = %45
  %56 = call i32 (...) @die()
  br label %57

57:                                               ; preds = %55, %45
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %59 = load i8*, i8** @LDSO, align 8
  %60 = load i8*, i8** %3, align 8
  %61 = call i64 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %58, i32 256, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %59, i8* %60)
  %62 = trunc i64 %61 to i32
  %63 = zext i32 %62 to i64
  %64 = icmp uge i64 %63, 256
  br i1 %64, label %65, label %67

65:                                               ; preds = %57
  %66 = call i32 (...) @die()
  br label %67

67:                                               ; preds = %65, %57
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %69 = call i32* @popen(i8* %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %69, i32** %6, align 8
  %70 = load i32*, i32** %6, align 8
  %71 = icmp ne i32* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %67
  %73 = call i32 (...) @die()
  br label %74

74:                                               ; preds = %72, %67
  store i32 0, i32* %8, align 4
  br label %75

75:                                               ; preds = %170, %96, %74
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %77 = load i32*, i32** %6, align 8
  %78 = call i8* @fgets(i8* %76, i32 256, i32* %77)
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %80 = icmp eq i8* %78, %79
  br i1 %80, label %81, label %171

81:                                               ; preds = %75
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %83 = call i8* @strchr(i8* %82, i8 signext 10)
  %84 = icmp ne i8* %83, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  %86 = call i32 (...) @die()
  br label %87

87:                                               ; preds = %85, %81
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %90 = call i32 @strspn(i8* %89, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %88, i64 %91
  store i8* %92, i8** %9, align 8
  %93 = load i8*, i8** %9, align 8
  %94 = call i64 @strncmp(i8* %93, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %87
  br label %75

97:                                               ; preds = %87
  %98 = load i8*, i8** %9, align 8
  %99 = call i8* @strchr(i8* %98, i8 signext 32)
  store i8* %99, i8** %10, align 8
  %100 = load i8*, i8** %10, align 8
  %101 = icmp ne i8* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %97
  %103 = call i32 (...) @die()
  br label %104

104:                                              ; preds = %102, %97
  %105 = load i8*, i8** %10, align 8
  %106 = call i64 @strncmp(i8* %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 5)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %104
  %109 = call i32 (...) @die()
  br label %110

110:                                              ; preds = %108, %104
  %111 = load i8*, i8** %10, align 8
  store i8 0, i8* %111, align 1
  %112 = load i8*, i8** %9, align 8
  %113 = call i8* @strchr(i8* %112, i8 signext 47)
  %114 = icmp ne i8* %113, null
  br i1 %114, label %115, label %117

115:                                              ; preds = %110
  %116 = call i32 (...) @die()
  br label %117

117:                                              ; preds = %115, %110
  %118 = load i8*, i8** %10, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 4
  store i8* %119, i8** %11, align 8
  %120 = load i8*, i8** %11, align 8
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp ne i32 %122, 47
  br i1 %123, label %124, label %126

124:                                              ; preds = %117
  %125 = call i32 (...) @die()
  br label %126

126:                                              ; preds = %124, %117
  %127 = load i8*, i8** %11, align 8
  %128 = call i8* @strchr(i8* %127, i8 signext 32)
  store i8* %128, i8** %10, align 8
  %129 = load i8*, i8** %10, align 8
  %130 = icmp ne i8* %129, null
  br i1 %130, label %133, label %131

131:                                              ; preds = %126
  %132 = call i32 (...) @die()
  br label %133

133:                                              ; preds = %131, %126
  %134 = load i8*, i8** %10, align 8
  %135 = call i64 @strncmp(i8* %134, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %133
  %138 = call i32 (...) @die()
  br label %139

139:                                              ; preds = %137, %133
  %140 = load i8*, i8** %10, align 8
  store i8 0, i8* %140, align 1
  store i64 0, i64* %12, align 8
  br label %141

141:                                              ; preds = %161, %139
  %142 = load i64, i64* %12, align 8
  %143 = icmp ult i64 %142, 4
  br i1 %143, label %144, label %164

144:                                              ; preds = %141
  %145 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  %146 = load i8*, i8** %4, align 8
  %147 = load i64, i64* %12, align 8
  %148 = getelementptr inbounds [4 x i8*], [4 x i8*]* @create_needed_libs.prefixes, i64 0, i64 %147
  %149 = load i8*, i8** %148, align 8
  %150 = load i8*, i8** %9, align 8
  %151 = call i64 (i8*, i32, i8*, i8*, i8*, ...) @snprintf(i8* %145, i32 256, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i8* %146, i8* %149, i8* %150)
  %152 = trunc i64 %151 to i32
  %153 = zext i32 %152 to i64
  %154 = icmp uge i64 %153, 256
  br i1 %154, label %155, label %157

155:                                              ; preds = %144
  %156 = call i32 (...) @die()
  br label %157

157:                                              ; preds = %155, %144
  %158 = load i8*, i8** %11, align 8
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  %160 = call i32 @copy_lib(i8* %158, i8* %159)
  br label %161

161:                                              ; preds = %157
  %162 = load i64, i64* %12, align 8
  %163 = add i64 %162, 1
  store i64 %163, i64* %12, align 8
  br label %141

164:                                              ; preds = %141
  %165 = load i32, i32* %8, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %8, align 4
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %170, label %168

168:                                              ; preds = %164
  %169 = call i32 (...) @die()
  br label %170

170:                                              ; preds = %168, %164
  br label %75

171:                                              ; preds = %75
  %172 = load i32, i32* %8, align 4
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %176, label %174

174:                                              ; preds = %171
  %175 = call i32 (...) @die()
  br label %176

176:                                              ; preds = %174, %171
  %177 = load i32, i32* %8, align 4
  %178 = load i32, i32* %8, align 4
  %179 = icmp ugt i32 %178, 1
  %180 = zext i1 %179 to i64
  %181 = select i1 %179, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i64 0, i64 0)
  %182 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i64 0, i64 0), i32 %177, i8* %181)
  %183 = load i32*, i32** %6, align 8
  %184 = call i64 @pclose(i32* %183)
  %185 = load i64, i64* @EXIT_SUCCESS, align 8
  %186 = icmp ne i64 %184, %185
  br i1 %186, label %187, label %189

187:                                              ; preds = %176
  %188 = call i32 (...) @die()
  br label %189

189:                                              ; preds = %187, %176
  ret void
}

declare dso_local i32 @die(...) #1

declare dso_local i32 @strspn(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @snprintf(i8*, i32, i8*, i8*, i8*, ...) #1

declare dso_local i32* @popen(i8*, i8*) #1

declare dso_local i8* @fgets(i8*, i32, i32*) #1

declare dso_local i8* @strchr(i8*, i8 signext) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @copy_lib(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i32, i8*) #1

declare dso_local i64 @pclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
