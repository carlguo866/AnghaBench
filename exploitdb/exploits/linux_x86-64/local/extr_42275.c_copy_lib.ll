; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_copy_lib.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_42275.c_copy_lib.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@O_RDONLY = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@O_NOFOLLOW = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*)* @copy_lib to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @copy_lib(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = call i32 (...) @die()
  br label %14

14:                                               ; preds = %12, %2
  %15 = load i8*, i8** %3, align 8
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp ne i32 %17, 47
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  %20 = call i32 (...) @die()
  br label %21

21:                                               ; preds = %19, %14
  %22 = load i8*, i8** %4, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = call i32 (...) @die()
  br label %26

26:                                               ; preds = %24, %21
  %27 = load i8*, i8** %4, align 8
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp ne i32 %29, 47
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = call i32 (...) @die()
  br label %33

33:                                               ; preds = %31, %26
  %34 = load i8*, i8** %3, align 8
  %35 = load i32, i32* @O_RDONLY, align 4
  %36 = call i32 (i8*, i32, ...) @open(i8* %34, i32 %35)
  store i32 %36, i32* %5, align 4
  %37 = load i32, i32* %5, align 4
  %38 = icmp sle i32 %37, -1
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = call i32 (...) @die()
  br label %41

41:                                               ; preds = %39, %33
  %42 = load i8*, i8** %4, align 8
  %43 = load i32, i32* @O_WRONLY, align 4
  %44 = load i32, i32* @O_CREAT, align 4
  %45 = or i32 %43, %44
  %46 = load i32, i32* @O_TRUNC, align 4
  %47 = or i32 %45, %46
  %48 = load i32, i32* @O_NOFOLLOW, align 4
  %49 = or i32 %47, %48
  %50 = call i32 (i8*, i32, ...) @open(i8* %42, i32 %49, i32 0)
  store i32 %50, i32* %6, align 4
  %51 = load i32, i32* %6, align 4
  %52 = icmp sle i32 %51, -1
  br i1 %52, label %53, label %55

53:                                               ; preds = %41
  %54 = call i32 (...) @die()
  br label %55

55:                                               ; preds = %53, %41
  br label %56

56:                                               ; preds = %78, %55
  %57 = load i32, i32* %5, align 4
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %59 = call i64 @read(i32 %57, i8* %58, i32 1024)
  store i64 %59, i64* %8, align 8
  %60 = load i64, i64* %8, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  br label %79

63:                                               ; preds = %56
  %64 = load i64, i64* %8, align 8
  %65 = icmp sle i64 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  %67 = call i32 (...) @die()
  br label %68

68:                                               ; preds = %66, %63
  %69 = load i32, i32* %6, align 4
  %70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %71 = load i64, i64* %8, align 8
  %72 = call i64 @write(i32 %69, i8* %70, i64 %71)
  store i64 %72, i64* %9, align 8
  %73 = load i64, i64* %9, align 8
  %74 = load i64, i64* %8, align 8
  %75 = icmp ne i64 %73, %74
  br i1 %75, label %76, label %78

76:                                               ; preds = %68
  %77 = call i32 (...) @die()
  br label %78

78:                                               ; preds = %76, %68
  br label %56

79:                                               ; preds = %62
  %80 = load i32, i32* %6, align 4
  %81 = call i64 @fchmod(i32 %80, i32 493)
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = call i32 (...) @die()
  br label %85

85:                                               ; preds = %83, %79
  %86 = load i32, i32* %6, align 4
  %87 = call i64 @close(i32 %86)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = call i32 (...) @die()
  br label %91

91:                                               ; preds = %89, %85
  %92 = load i32, i32* %5, align 4
  %93 = call i64 @close(i32 %92)
  %94 = icmp ne i64 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %91
  %96 = call i32 (...) @die()
  br label %97

97:                                               ; preds = %95, %91
  ret void
}

declare dso_local i32 @die(...) #1

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i64 @write(i32, i8*, i64) #1

declare dso_local i64 @fchmod(i32, i32) #1

declare dso_local i64 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
