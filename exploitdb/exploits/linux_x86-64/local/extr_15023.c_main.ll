; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/linux_x86-64/local/extr_15023.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PTRACE_TRACEME = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"exec fault\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"fork fault\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Process finished\0A\00", align 1
@SIGTRAP = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [29 x i8] c"Process received signal: %d\0A\00", align 1
@PTRACE_PEEKUSER = common dso_local global i32 0, align 4
@ORIG_RAX = common dso_local global i32 0, align 4
@PTRACE_POKEUSER = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [23 x i8] c"PTRACE_POKEUSER fault\0A\00", align 1
@PTRACE_DETACH = common dso_local global i32 0, align 4
@PTRACE_SYSCALL = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [22 x i8] c"PTRACE_SYSCALL fault\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 -2147483648, i32* %10, align 4
  store i32 -2080374784, i32* %11, align 4
  store i32 2056, i32* %12, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 4
  br i1 %14, label %15, label %26

15:                                               ; preds = %2
  %16 = load i32, i32* %10, align 4
  %17 = load i32, i32* %12, align 4
  %18 = add nsw i32 %16, %17
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %11, align 4
  %22 = load i32, i32* %10, align 4
  %23 = sub nsw i32 %21, %22
  %24 = call i32 @docall(i32* %20, i32 %23)
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %2
  %27 = call i32 (...) @fork()
  store i32 %27, i32* %6, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %26
  %30 = load i32, i32* @PTRACE_TRACEME, align 4
  %31 = call i32 @ptrace(i32 %30, i32 0, i32 0, i32 0)
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 0
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @execl(i8* %34, i8* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32* null)
  %39 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0))
  %40 = call i32 @exit(i32 1) #3
  unreachable

41:                                               ; preds = %26
  %42 = load i32, i32* %6, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %46 = call i32 @exit(i32 1) #3
  unreachable

47:                                               ; preds = %41
  br label %48

48:                                               ; preds = %115, %63, %52, %47
  %49 = call i32 @wait(i32* %7)
  %50 = load i32, i32* %6, align 4
  %51 = icmp ne i32 %49, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  br label %48

53:                                               ; preds = %48
  %54 = load i32, i32* %7, align 4
  %55 = call i64 @WIFEXITED(i32 %54)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0))
  br label %116

59:                                               ; preds = %53
  %60 = load i32, i32* %7, align 4
  %61 = call i32 @WIFSTOPPED(i32 %60)
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  br label %48

64:                                               ; preds = %59
  %65 = load i32, i32* %7, align 4
  %66 = call i32 @WSTOPSIG(i32 %65)
  %67 = sext i32 %66 to i64
  %68 = load i64, i64* @SIGTRAP, align 8
  %69 = icmp ne i64 %67, %68
  br i1 %69, label %70, label %74

70:                                               ; preds = %64
  %71 = load i32, i32* %7, align 4
  %72 = call i32 @WSTOPSIG(i32 %71)
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 %72)
  br label %116

74:                                               ; preds = %64
  %75 = load i32, i32* @PTRACE_PEEKUSER, align 4
  %76 = load i32, i32* %6, align 4
  %77 = load i32, i32* @ORIG_RAX, align 4
  %78 = mul nsw i32 8, %77
  %79 = call i32 @ptrace(i32 %75, i32 %76, i32 %78, i32 0)
  store i32 %79, i32* %9, align 4
  %80 = load i32, i32* %9, align 4
  %81 = icmp eq i32 %80, 257
  br i1 %81, label %82, label %95

82:                                               ; preds = %74
  %83 = load i32, i32* @PTRACE_POKEUSER, align 4
  %84 = load i32, i32* %6, align 4
  %85 = load i32, i32* @ORIG_RAX, align 4
  %86 = mul nsw i32 8, %85
  %87 = load i32, i32* %12, align 4
  %88 = sdiv i32 %87, 8
  %89 = call i32 @ptrace(i32 %83, i32 %84, i32 %86, i32 %88)
  %90 = icmp eq i32 %89, -1
  br i1 %90, label %91, label %94

91:                                               ; preds = %82
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %93 = call i32 @exit(i32 1) #3
  unreachable

94:                                               ; preds = %82
  store i32 1, i32* %8, align 4
  br label %95

95:                                               ; preds = %94, %74
  %96 = load i32, i32* %9, align 4
  %97 = icmp eq i32 %96, 11
  br i1 %97, label %98, label %107

98:                                               ; preds = %95
  %99 = load i32, i32* %8, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %107

101:                                              ; preds = %98
  %102 = load i32, i32* @PTRACE_DETACH, align 4
  %103 = load i32, i32* %6, align 4
  %104 = call i32 @ptrace(i32 %102, i32 %103, i32 0, i32 0)
  br label %105

105:                                              ; preds = %105, %101
  %106 = call i32 @sleep(i32 10000)
  br label %105

107:                                              ; preds = %98, %95
  %108 = load i32, i32* @PTRACE_SYSCALL, align 4
  %109 = load i32, i32* %6, align 4
  %110 = call i32 @ptrace(i32 %108, i32 %109, i32 1, i32 0)
  %111 = icmp eq i32 %110, -1
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %114 = call i32 @exit(i32 1) #3
  unreachable

115:                                              ; preds = %107
  br label %48

116:                                              ; preds = %70, %57
  ret i32 0
}

declare dso_local i32 @docall(i32*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fork(...) #1

declare dso_local i32 @ptrace(i32, i32, i32, i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i32*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i64 @WIFEXITED(i32) #1

declare dso_local i32 @WIFSTOPPED(i32) #1

declare dso_local i32 @WSTOPSIG(i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
