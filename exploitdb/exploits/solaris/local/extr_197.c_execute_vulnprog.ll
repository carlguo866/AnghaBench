; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_execute_vulnprog.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_execute_vulnprog.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [79 x i8] c"Warning: The pattern is %d bytes long. Only the first 512 bytes will be used.\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"messages.po\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"Error openning messages.po for writing.\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"domain \22messages\22\0A\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"msgid  \22usage: %%s [-fndq] [name | nickname]\\n\22\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"msgstr \22%s\\n\22\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"/usr/bin/msgfmt messages.po\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"cp messages.mo SUNW_OST_OSCMD\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"cp messages.mo SUNW_OST_OSLIB\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"NLSPATH=:.\00", align 1
@VULPROG = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [3 x i8] c"-x\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @execute_vulnprog(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [3 x i8*], align 16
  %6 = alloca i32*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = call i32 @strlen(i8* %7)
  %9 = icmp sgt i32 %8, 512
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = load i8*, i8** %3, align 8
  %12 = call i32 @strlen(i8* %11)
  %13 = call i32 @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i32 %12)
  br label %14

14:                                               ; preds = %10, %2
  %15 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32* %15, i32** %6, align 8
  %16 = icmp ne i32* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = call i32 @perror(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0))
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %14
  %21 = load i32*, i32** %6, align 8
  %22 = call i32 (i32*, i8*, ...) @fprintf(i32* %21, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %23 = load i32*, i32** %6, align 8
  %24 = call i32 (i32*, i8*, ...) @fprintf(i32* %23, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0))
  %25 = load i32*, i32** %6, align 8
  %26 = load i8*, i8** %3, align 8
  %27 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* %26)
  %28 = load i32*, i32** %6, align 8
  %29 = call i32 @fclose(i32* %28)
  %30 = call i32 @system(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  %31 = call i32 @system(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %32 = call i32 @system(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0))
  %33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i8** %33, align 16
  %34 = load i8*, i8** %4, align 8
  %35 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 1
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 2
  store i8* null, i8** %36, align 16
  %37 = load i32, i32* @VULPROG, align 4
  %38 = load i32, i32* @VULPROG, align 4
  %39 = getelementptr inbounds [3 x i8*], [3 x i8*]* %5, i64 0, i64 0
  %40 = call i32 @execle(i32 %37, i32 %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32* null, i8** %39)
  ret void
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @execle(i32, i32, i8*, i32*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
