; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19160.c_plt_offset.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19160.c_plt_offset.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_10__ = type { i32, i64 }
%struct.TYPE_14__ = type { i32 }
%struct.TYPE_13__ = type { i64, i32 }
%struct.TYPE_12__ = type { i64, i32, i64 }
%struct.TYPE_11__ = type { i64 }

@O_RDONLY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"open\00", align 1
@EV_CURRENT = common dso_local global i32 0, align 4
@ELF_C_READ = common dso_local global i32 0, align 4
@SHT_RELA = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c".rela.plt\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [33 x i8] c"%s: .rela.plt section not found\0A\00", align 1
@prog = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [29 x i8] c"%s: .rela.plt section empty\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"%s: dynamic symbol table empty\0A\00", align 1
@PLT_SYMBOL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @plt_offset(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca %struct.TYPE_10__*, align 8
  %9 = alloca %struct.TYPE_14__*, align 8
  %10 = alloca %struct.TYPE_13__*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.TYPE_12__*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca %struct.TYPE_11__*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i32* null, i32** %7, align 8
  store %struct.TYPE_13__* null, %struct.TYPE_13__** %10, align 8
  store i32 0, i32* %11, align 4
  store i64 0, i64* %16, align 8
  %19 = load i8*, i8** %3, align 8
  %20 = load i32, i32* @O_RDONLY, align 4
  %21 = call i32 @open(i8* %19, i32 %20)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %2
  %25 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %26 = call i32 @exit(i32 1) #3
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* @EV_CURRENT, align 4
  %29 = call i32 @elf_version(i32 %28)
  %30 = load i32, i32* %5, align 4
  %31 = load i32, i32* @ELF_C_READ, align 4
  %32 = call i32* @elf_begin(i32 %30, i32 %31, i32 0)
  store i32* %32, i32** %6, align 8
  %33 = load i32*, i32** %6, align 8
  %34 = icmp eq i32* %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %27
  %36 = call i32 (...) @elferr()
  br label %37

37:                                               ; preds = %35, %27
  %38 = load i32*, i32** %6, align 8
  %39 = call %struct.TYPE_14__* @elf32_getehdr(i32* %38)
  store %struct.TYPE_14__* %39, %struct.TYPE_14__** %9, align 8
  %40 = load %struct.TYPE_14__*, %struct.TYPE_14__** %9, align 8
  %41 = icmp eq %struct.TYPE_14__* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = call i32 (...) @elferr()
  br label %44

44:                                               ; preds = %42, %37
  br label %45

45:                                               ; preds = %80, %44
  %46 = load i32*, i32** %6, align 8
  %47 = load i32*, i32** %7, align 8
  %48 = call i32* @elf_nextscn(i32* %46, i32* %47)
  store i32* %48, i32** %7, align 8
  %49 = icmp ne i32* %48, null
  br i1 %49, label %50, label %81

50:                                               ; preds = %45
  %51 = load i32*, i32** %7, align 8
  %52 = call %struct.TYPE_12__* @elf32_getshdr(i32* %51)
  store %struct.TYPE_12__* %52, %struct.TYPE_12__** %12, align 8
  %53 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %54 = icmp eq %struct.TYPE_12__* %53, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = call i32 (...) @elferr()
  br label %57

57:                                               ; preds = %55, %50
  %58 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %59 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load i64, i64* @SHT_RELA, align 8
  %62 = icmp eq i64 %60, %61
  br i1 %62, label %63, label %80

63:                                               ; preds = %57
  %64 = load i32*, i32** %6, align 8
  %65 = load %struct.TYPE_14__*, %struct.TYPE_14__** %9, align 8
  %66 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %69 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %68, i32 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = call i8* @elf_strptr(i32* %64, i32 %67, i64 %70)
  store i8* %71, i8** %15, align 8
  %72 = load i8*, i8** %15, align 8
  %73 = icmp ne i8* %72, null
  br i1 %73, label %74, label %79

74:                                               ; preds = %63
  %75 = load i8*, i8** %15, align 8
  %76 = call i32 @strcmp(i8* %75, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  br label %81

79:                                               ; preds = %74, %63
  br label %80

80:                                               ; preds = %79, %57
  br label %45

81:                                               ; preds = %78, %45
  %82 = load i32*, i32** %7, align 8
  %83 = icmp eq i32* %82, null
  br i1 %83, label %84, label %89

84:                                               ; preds = %81
  %85 = load i32, i32* @stderr, align 4
  %86 = load i8*, i8** @prog, align 8
  %87 = call i32 @fprintf(i32 %85, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %86)
  %88 = call i32 @exit(i32 1) #3
  unreachable

89:                                               ; preds = %81
  %90 = load i32*, i32** %7, align 8
  %91 = call %struct.TYPE_10__* @elf_getdata(i32* %90, %struct.TYPE_10__* null)
  store %struct.TYPE_10__* %91, %struct.TYPE_10__** %8, align 8
  %92 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %93 = icmp eq %struct.TYPE_10__* %92, null
  br i1 %93, label %94, label %96

94:                                               ; preds = %89
  %95 = call i32 (...) @elferr()
  br label %96

96:                                               ; preds = %94, %89
  %97 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %98 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %97, i32 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %106

101:                                              ; preds = %96
  %102 = load i32, i32* @stderr, align 4
  %103 = load i8*, i8** @prog, align 8
  %104 = call i32 @fprintf(i32 %102, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %103)
  %105 = call i32 @exit(i32 1) #3
  unreachable

106:                                              ; preds = %96
  %107 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %108 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %107, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = inttoptr i64 %109 to %struct.TYPE_13__*
  store %struct.TYPE_13__* %110, %struct.TYPE_13__** %10, align 8
  %111 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %112 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %111, i32 0, i32 0
  %113 = load i32, i32* %112, align 8
  %114 = sext i32 %113 to i64
  %115 = udiv i64 %114, 16
  %116 = trunc i64 %115 to i32
  store i32 %116, i32* %11, align 4
  %117 = load %struct.TYPE_13__*, %struct.TYPE_13__** %10, align 8
  %118 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %117, i64 4
  store %struct.TYPE_13__* %118, %struct.TYPE_13__** %10, align 8
  %119 = load i32, i32* %11, align 4
  %120 = sub nsw i32 %119, 4
  store i32 %120, i32* %11, align 4
  %121 = load i32*, i32** %6, align 8
  %122 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %123 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %122, i32 0, i32 1
  %124 = load i32, i32* %123, align 8
  %125 = call i32* @elf_getscn(i32* %121, i32 %124)
  store i32* %125, i32** %13, align 8
  %126 = load i32*, i32** %13, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %128, label %130

128:                                              ; preds = %106
  %129 = call i32 (...) @elferr()
  br label %130

130:                                              ; preds = %128, %106
  %131 = load i32*, i32** %13, align 8
  %132 = call %struct.TYPE_12__* @elf32_getshdr(i32* %131)
  store %struct.TYPE_12__* %132, %struct.TYPE_12__** %12, align 8
  %133 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %134 = icmp eq %struct.TYPE_12__* %133, null
  br i1 %134, label %135, label %137

135:                                              ; preds = %130
  %136 = call i32 (...) @elferr()
  br label %137

137:                                              ; preds = %135, %130
  %138 = load i32*, i32** %13, align 8
  %139 = call %struct.TYPE_10__* @elf_getdata(i32* %138, %struct.TYPE_10__* null)
  store %struct.TYPE_10__* %139, %struct.TYPE_10__** %8, align 8
  %140 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %141 = icmp eq %struct.TYPE_10__* %140, null
  br i1 %141, label %142, label %144

142:                                              ; preds = %137
  %143 = call i32 (...) @elferr()
  br label %144

144:                                              ; preds = %142, %137
  %145 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %146 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %145, i32 0, i32 0
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %154

149:                                              ; preds = %144
  %150 = load i32, i32* @stderr, align 4
  %151 = load i8*, i8** @prog, align 8
  %152 = call i32 @fprintf(i32 %150, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i8* %151)
  %153 = call i32 @exit(i32 1) #3
  unreachable

154:                                              ; preds = %144
  %155 = load %struct.TYPE_10__*, %struct.TYPE_10__** %8, align 8
  %156 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %155, i32 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = inttoptr i64 %157 to %struct.TYPE_11__*
  store %struct.TYPE_11__* %158, %struct.TYPE_11__** %14, align 8
  br label %159

159:                                              ; preds = %187, %154
  %160 = load i32, i32* %11, align 4
  %161 = add nsw i32 %160, -1
  store i32 %161, i32* %11, align 4
  %162 = icmp sgt i32 %160, 0
  br i1 %162, label %163, label %190

163:                                              ; preds = %159
  %164 = load %struct.TYPE_13__*, %struct.TYPE_13__** %10, align 8
  %165 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %164, i32 0, i32 1
  %166 = load i32, i32* %165, align 8
  %167 = call i32 @ELF32_R_SYM(i32 %166)
  store i32 %167, i32* %18, align 4
  %168 = load i32*, i32** %6, align 8
  %169 = load %struct.TYPE_12__*, %struct.TYPE_12__** %12, align 8
  %170 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %169, i32 0, i32 1
  %171 = load i32, i32* %170, align 8
  %172 = load %struct.TYPE_11__*, %struct.TYPE_11__** %14, align 8
  %173 = load i32, i32* %18, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %172, i64 %174
  %176 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %175, i32 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = call i8* @elf_strptr(i32* %168, i32 %171, i64 %177)
  store i8* %178, i8** %15, align 8
  %179 = load i8*, i8** %15, align 8
  %180 = icmp ne i8* %179, null
  br i1 %180, label %181, label %187

181:                                              ; preds = %163
  %182 = load i8*, i8** %15, align 8
  %183 = load i8*, i8** %4, align 8
  %184 = call i32 @strcmp(i8* %182, i8* %183)
  %185 = icmp ne i32 %184, 0
  br i1 %185, label %187, label %186

186:                                              ; preds = %181
  br label %190

187:                                              ; preds = %181, %163
  %188 = load %struct.TYPE_13__*, %struct.TYPE_13__** %10, align 8
  %189 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %188, i32 1
  store %struct.TYPE_13__* %189, %struct.TYPE_13__** %10, align 8
  br label %159

190:                                              ; preds = %186, %159
  %191 = load %struct.TYPE_13__*, %struct.TYPE_13__** %10, align 8
  %192 = icmp ne %struct.TYPE_13__* %191, null
  br i1 %192, label %193, label %202

193:                                              ; preds = %190
  %194 = load i8*, i8** %3, align 8
  %195 = load i32, i32* @PLT_SYMBOL, align 4
  %196 = call i64 @symval(i8* %194, i32 %195)
  store i64 %196, i64* %17, align 8
  %197 = load %struct.TYPE_13__*, %struct.TYPE_13__** %10, align 8
  %198 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %197, i32 0, i32 0
  %199 = load i64, i64* %198, align 8
  %200 = load i64, i64* %17, align 8
  %201 = sub nsw i64 %199, %200
  store i64 %201, i64* %16, align 8
  br label %202

202:                                              ; preds = %193, %190
  %203 = load i32*, i32** %6, align 8
  %204 = call i32 @elf_end(i32* %203)
  %205 = load i32, i32* %5, align 4
  %206 = call i32 @close(i32 %205)
  %207 = load i64, i64* %16, align 8
  ret i64 %207
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @elf_version(i32) #1

declare dso_local i32* @elf_begin(i32, i32, i32) #1

declare dso_local i32 @elferr(...) #1

declare dso_local %struct.TYPE_14__* @elf32_getehdr(i32*) #1

declare dso_local i32* @elf_nextscn(i32*, i32*) #1

declare dso_local %struct.TYPE_12__* @elf32_getshdr(i32*) #1

declare dso_local i8* @elf_strptr(i32*, i32, i64) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local %struct.TYPE_10__* @elf_getdata(i32*, %struct.TYPE_10__*) #1

declare dso_local i32* @elf_getscn(i32*, i32) #1

declare dso_local i32 @ELF32_R_SYM(i32) #1

declare dso_local i64 @symval(i8*, i32) #1

declare dso_local i32 @elf_end(i32*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
