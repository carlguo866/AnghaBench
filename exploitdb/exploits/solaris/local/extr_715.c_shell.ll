; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_715.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_715.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [77 x i8] c"\22Pai Mei taught you the five point palm exploding heart technique?\22 -- Bill\0A\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"\22Of course.\22 -- Beatrix Kidd0, alias Black Mamba, alias The Bride (KB Vol2)\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@CMD = common dso_local global i8* null, align 8
@FD_SETSIZE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Goodbye...\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"read\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [128 x i8], align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = load i32, i32* @stderr, align 4
  %7 = call i32 @fprintf(i32 %6, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str, i64 0, i64 0))
  %8 = load i32, i32* @stderr, align 4
  %9 = call i32 @fprintf(i32 %8, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0))
  %10 = call i64 @write(i32 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 2)
  %11 = load i32, i32* %2, align 4
  %12 = load i8*, i8** @CMD, align 8
  %13 = load i8*, i8** @CMD, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = call i64 @write(i32 %11, i8* %12, i32 %14)
  br label %16

16:                                               ; preds = %64, %1
  %17 = call i32 @FD_ZERO(i32* %3)
  %18 = load i32, i32* %2, align 4
  %19 = call i32 @FD_SET(i32 %18, i32* %3)
  %20 = call i32 @FD_SET(i32 0, i32* %3)
  %21 = load i32, i32* @FD_SETSIZE, align 4
  %22 = call i64 @select(i32 %21, i32* %3, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  br label %65

26:                                               ; preds = %16
  %27 = load i32, i32* %2, align 4
  %28 = call i64 @FD_ISSET(i32 %27, i32* %3)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %46

30:                                               ; preds = %26
  %31 = load i32, i32* %2, align 4
  %32 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %33 = call i32 @read(i32 %31, i8* %32, i32 128)
  store i32 %33, i32* %5, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 @fprintf(i32 %36, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  br label %65

38:                                               ; preds = %30
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %40 = load i32, i32* %5, align 4
  %41 = call i64 @write(i32 1, i8* %39, i32 %40)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  br label %65

45:                                               ; preds = %38
  br label %46

46:                                               ; preds = %45, %26
  %47 = call i64 @FD_ISSET(i32 0, i32* %3)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %64

49:                                               ; preds = %46
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %51 = call i32 @read(i32 0, i8* %50, i32 128)
  store i32 %51, i32* %5, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  br label %65

55:                                               ; preds = %49
  %56 = load i32, i32* %2, align 4
  %57 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %58 = load i32, i32* %5, align 4
  %59 = call i64 @write(i32 %56, i8* %57, i32 %58)
  %60 = icmp slt i64 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %55
  %62 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  br label %65

63:                                               ; preds = %55
  br label %64

64:                                               ; preds = %63, %46
  br label %16

65:                                               ; preds = %61, %53, %43, %35, %24
  %66 = load i32, i32* %2, align 4
  %67 = call i32 @close(i32 %66)
  %68 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
