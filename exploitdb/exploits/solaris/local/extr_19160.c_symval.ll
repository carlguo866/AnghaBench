; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19160.c_symval.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19160.c_symval.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { i64, i32 }
%struct.TYPE_7__ = type { i32, i64 }
%struct.TYPE_8__ = type { i32, i64 }

@O_RDONLY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"open\00", align 1
@EV_CURRENT = common dso_local global i32 0, align 4
@ELF_C_READ = common dso_local global i32 0, align 4
@SHT_DYNSYM = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [36 x i8] c"%s: dynamic symbol table not found\0A\00", align 1
@prog = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [33 x i8] c"%s: .dynamic symbol table empty\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @symval(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.TYPE_9__*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca %struct.TYPE_7__*, align 8
  %14 = alloca %struct.TYPE_8__*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i32 0, i32* %8, align 4
  store i32* null, i32** %11, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = load i32, i32* @O_RDONLY, align 4
  %18 = call i32 @open(i8* %16, i32 %17)
  store i32 %18, i32* %5, align 4
  %19 = load i32, i32* %5, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %2
  %22 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i32, i32* @EV_CURRENT, align 4
  %26 = call i32 @elf_version(i32 %25)
  %27 = load i32, i32* %5, align 4
  %28 = load i32, i32* @ELF_C_READ, align 4
  %29 = call i32* @elf_begin(i32 %27, i32 %28, i32 0)
  store i32* %29, i32** %10, align 8
  %30 = load i32*, i32** %10, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %24
  %33 = call i32 (...) @elferr()
  br label %34

34:                                               ; preds = %32, %24
  %35 = load i32*, i32** %10, align 8
  %36 = call i32* @elf32_getehdr(i32* %35)
  store i32* %36, i32** %12, align 8
  %37 = load i32*, i32** %12, align 8
  %38 = icmp eq i32* %37, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = call i32 (...) @elferr()
  br label %41

41:                                               ; preds = %39, %34
  br label %42

42:                                               ; preds = %61, %41
  %43 = load i32*, i32** %10, align 8
  %44 = load i32*, i32** %11, align 8
  %45 = call i32* @elf_nextscn(i32* %43, i32* %44)
  store i32* %45, i32** %11, align 8
  %46 = icmp ne i32* %45, null
  br i1 %46, label %47, label %62

47:                                               ; preds = %42
  %48 = load i32*, i32** %11, align 8
  %49 = call %struct.TYPE_9__* @elf32_getshdr(i32* %48)
  store %struct.TYPE_9__* %49, %struct.TYPE_9__** %9, align 8
  %50 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %51 = icmp eq %struct.TYPE_9__* %50, null
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = call i32 (...) @elferr()
  br label %54

54:                                               ; preds = %52, %47
  %55 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %56 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %55, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* @SHT_DYNSYM, align 8
  %59 = icmp eq i64 %57, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %54
  br label %62

61:                                               ; preds = %54
  br label %42

62:                                               ; preds = %60, %42
  %63 = load i32*, i32** %11, align 8
  %64 = icmp eq i32* %63, null
  br i1 %64, label %65, label %70

65:                                               ; preds = %62
  %66 = load i32, i32* @stderr, align 4
  %67 = load i8*, i8** @prog, align 8
  %68 = call i32 @fprintf(i32 %66, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i8* %67)
  %69 = call i32 @exit(i32 1) #3
  unreachable

70:                                               ; preds = %62
  %71 = load i32*, i32** %11, align 8
  %72 = call %struct.TYPE_7__* @elf_getdata(i32* %71, %struct.TYPE_7__* null)
  store %struct.TYPE_7__* %72, %struct.TYPE_7__** %13, align 8
  %73 = load %struct.TYPE_7__*, %struct.TYPE_7__** %13, align 8
  %74 = icmp eq %struct.TYPE_7__* %73, null
  br i1 %74, label %75, label %77

75:                                               ; preds = %70
  %76 = call i32 (...) @elferr()
  br label %77

77:                                               ; preds = %75, %70
  %78 = load %struct.TYPE_7__*, %struct.TYPE_7__** %13, align 8
  %79 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %78, i32 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %77
  %83 = load i32, i32* @stderr, align 4
  %84 = load i8*, i8** @prog, align 8
  %85 = call i32 @fprintf(i32 %83, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %84)
  %86 = call i32 @exit(i32 1) #3
  unreachable

87:                                               ; preds = %77
  %88 = load %struct.TYPE_7__*, %struct.TYPE_7__** %13, align 8
  %89 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %88, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = inttoptr i64 %90 to %struct.TYPE_8__*
  store %struct.TYPE_8__* %91, %struct.TYPE_8__** %14, align 8
  %92 = load %struct.TYPE_7__*, %struct.TYPE_7__** %13, align 8
  %93 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %92, i32 0, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = sext i32 %94 to i64
  %96 = udiv i64 %95, 16
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %98

98:                                               ; preds = %123, %87
  %99 = load i32, i32* %6, align 4
  %100 = load i32, i32* %7, align 4
  %101 = icmp slt i32 %99, %100
  br i1 %101, label %102, label %126

102:                                              ; preds = %98
  %103 = load i32*, i32** %10, align 8
  %104 = load %struct.TYPE_9__*, %struct.TYPE_9__** %9, align 8
  %105 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %104, i32 0, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = load %struct.TYPE_8__*, %struct.TYPE_8__** %14, align 8
  %108 = load i32, i32* %6, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %107, i64 %109
  %111 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %110, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = call i8* @elf_strptr(i32* %103, i32 %106, i64 %112)
  store i8* %113, i8** %15, align 8
  %114 = load i8*, i8** %15, align 8
  %115 = icmp ne i8* %114, null
  br i1 %115, label %116, label %122

116:                                              ; preds = %102
  %117 = load i8*, i8** %15, align 8
  %118 = load i8*, i8** %4, align 8
  %119 = call i32 @strcmp(i8* %117, i8* %118)
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %122, label %121

121:                                              ; preds = %116
  br label %126

122:                                              ; preds = %116, %102
  br label %123

123:                                              ; preds = %122
  %124 = load i32, i32* %6, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %6, align 4
  br label %98

126:                                              ; preds = %121, %98
  %127 = load i32, i32* %6, align 4
  %128 = load i32, i32* %7, align 4
  %129 = icmp slt i32 %127, %128
  br i1 %129, label %130, label %137

130:                                              ; preds = %126
  %131 = load %struct.TYPE_8__*, %struct.TYPE_8__** %14, align 8
  %132 = load i32, i32* %6, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %131, i64 %133
  %135 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %134, i32 0, i32 0
  %136 = load i32, i32* %135, align 8
  store i32 %136, i32* %8, align 4
  br label %137

137:                                              ; preds = %130, %126
  %138 = load i32*, i32** %10, align 8
  %139 = call i32 @elf_end(i32* %138)
  %140 = load i32, i32* %5, align 4
  %141 = call i32 @close(i32 %140)
  %142 = load i32, i32* %8, align 4
  ret i32 %142
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @elf_version(i32) #1

declare dso_local i32* @elf_begin(i32, i32, i32) #1

declare dso_local i32 @elferr(...) #1

declare dso_local i32* @elf32_getehdr(i32*) #1

declare dso_local i32* @elf_nextscn(i32*, i32*) #1

declare dso_local %struct.TYPE_9__* @elf32_getshdr(i32*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local %struct.TYPE_7__* @elf_getdata(i32*, %struct.TYPE_7__*) #1

declare dso_local i8* @elf_strptr(i32*, i32, i64) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @elf_end(i32*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
