; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_2330.c_find_rwxmem.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_2330.c_find_rwxmem.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i64 }

@.str = private unnamed_addr constant [15 x i8] c"/proc/self/map\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@MA_READ = common dso_local global i32 0, align 4
@MA_WRITE = common dso_local global i32 0, align 4
@MA_EXEC = common dso_local global i32 0, align 4
@MA_STACK = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @find_rwxmem() #0 {
  %1 = alloca i32*, align 8
  %2 = alloca %struct.TYPE_3__, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = call i32* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %5, i32** %1, align 8
  %6 = icmp eq i32* %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %0
  %8 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %9 = load i32, i32* @EXIT_FAILURE, align 4
  %10 = call i32 @exit(i32 %9) #3
  unreachable

11:                                               ; preds = %0
  br label %12

12:                                               ; preds = %42, %37, %11
  %13 = load i32*, i32** %1, align 8
  %14 = call i64 @fread(%struct.TYPE_3__* %2, i32 16, i32 1, i32* %13)
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %43

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %2, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = load i32, i32* @MA_READ, align 4
  %21 = load i32, i32* @MA_WRITE, align 4
  %22 = or i32 %20, %21
  %23 = load i32, i32* @MA_EXEC, align 4
  %24 = or i32 %22, %23
  %25 = and i32 %19, %24
  %26 = load i32, i32* @MA_READ, align 4
  %27 = load i32, i32* @MA_WRITE, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @MA_EXEC, align 4
  %30 = or i32 %28, %29
  %31 = icmp eq i32 %25, %30
  br i1 %31, label %32, label %42

32:                                               ; preds = %16
  %33 = load i32, i32* %3, align 4
  %34 = load i32, i32* @MA_STACK, align 4
  %35 = and i32 %33, %34
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  br label %12

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %2, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = inttoptr i64 %40 to i8*
  store i8* %41, i8** %4, align 8
  br label %42

42:                                               ; preds = %38, %16
  br label %12

43:                                               ; preds = %12
  %44 = load i32*, i32** %1, align 8
  %45 = call i32 @fclose(i32* %44)
  %46 = load i8*, i8** %4, align 8
  ret i8* %46
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @fread(%struct.TYPE_3__*, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
