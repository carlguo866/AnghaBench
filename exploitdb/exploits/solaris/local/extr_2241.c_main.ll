; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_2241.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_2241.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFSIZE = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"%s\0A%s\0A\0A\00", align 1
@INFO1 = common dso_local global i8* null, align 8
@INFO2 = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c"usage: %s outfile [outsize]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"Error (atoi): invalid outsize\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Using outfile\09: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Using outsize\09: %u\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"Error (malloc)\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"Hint: Try again with a smaller output size\0A\00", align 1
@SI_SYSNAME = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [13 x i8] c"Error (open)\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"Pitagora Suicchi! %u bytes written to %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"Hint: Try also with a bigger output size\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i64, i64* @BUFSIZE, align 8
  store i64 %10, i64* %8, align 8
  %11 = load i32, i32* @stderr, align 4
  %12 = load i8*, i8** @INFO1, align 8
  %13 = load i8*, i8** @INFO2, align 8
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %12, i8* %13)
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 2
  br i1 %26, label %27, label %38

27:                                               ; preds = %24
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i64 @atoi(i8* %30)
  store i64 %31, i64* %8, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = load i32, i32* @stderr, align 4
  %35 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  %36 = call i32 @exit(i32 1) #3
  unreachable

37:                                               ; preds = %27
  br label %38

38:                                               ; preds = %37, %24
  %39 = load i32, i32* @stderr, align 4
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* @stderr, align 4
  %45 = load i64, i64* %8, align 8
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %44, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i64 %45)
  %47 = load i64, i64* %8, align 8
  %48 = call i64 @malloc(i64 %47)
  %49 = inttoptr i64 %48 to i8*
  store i8* %49, i8** %9, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %56

51:                                               ; preds = %38
  %52 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0))
  %55 = call i32 @exit(i32 1) #3
  unreachable

56:                                               ; preds = %38
  %57 = load i8*, i8** %9, align 8
  %58 = load i64, i64* %8, align 8
  %59 = call i32 @memset(i8* %57, i32 0, i64 %58)
  %60 = load i32, i32* @SI_SYSNAME, align 4
  %61 = load i8*, i8** %9, align 8
  %62 = call i32 @sysinfo(i32 %60, i8* %61, i32 0)
  %63 = load i8**, i8*** %5, align 8
  %64 = getelementptr inbounds i8*, i8** %63, i64 1
  %65 = load i8*, i8** %64, align 8
  %66 = load i32, i32* @O_RDWR, align 4
  %67 = load i32, i32* @O_CREAT, align 4
  %68 = or i32 %66, %67
  %69 = load i32, i32* @O_TRUNC, align 4
  %70 = or i32 %68, %69
  %71 = call i32 @open(i8* %65, i32 %70, i32 448)
  store i32 %71, i32* %6, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %56
  %74 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  %75 = load i8*, i8** %9, align 8
  %76 = call i32 @free(i8* %75)
  %77 = call i32 @exit(i32 1) #3
  unreachable

78:                                               ; preds = %56
  %79 = load i32, i32* %6, align 4
  %80 = load i8*, i8** %9, align 8
  %81 = load i64, i64* %8, align 8
  %82 = call i64 @write(i32 %79, i8* %80, i64 %81)
  store i64 %82, i64* %7, align 8
  %83 = load i32, i32* @stderr, align 4
  %84 = load i64, i64* %7, align 8
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = call i32 (i32, i8*, ...) @fprintf(i32 %83, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0), i64 %84, i8* %87)
  %89 = load i32, i32* @stderr, align 4
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i64 0, i64 0))
  %91 = load i32, i32* %6, align 4
  %92 = call i32 @close(i32 %91)
  %93 = load i8*, i8** %9, align 8
  %94 = call i32 @free(i8* %93)
  %95 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @atoi(i8*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @sysinfo(i32, i8*, i32) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i64 @write(i32, i8*, i64) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
