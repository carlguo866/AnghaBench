; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_715.c_check_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_715.c_check_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"Error: %s contains a 0x00!\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Error: %s contains a 0x04!\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"Error: %s contains a 0x0a!\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"Error: %s contains a 0x0d!\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"Error: %s contains a 0x61-0x7a!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @check_addr(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %5 = load i32, i32* %3, align 4
  %6 = and i32 %5, 255
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %2
  %9 = load i32, i32* %3, align 4
  %10 = and i32 %9, 65280
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = load i32, i32* %3, align 4
  %14 = and i32 %13, 16711680
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %12
  %17 = load i32, i32* %3, align 4
  %18 = and i32 %17, -16777216
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16, %12, %8, %2
  %21 = load i32, i32* @stderr, align 4
  %22 = load i8*, i8** %4, align 8
  %23 = call i32 @fprintf(i32 %21, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %16
  %26 = load i32, i32* %3, align 4
  %27 = and i32 %26, 255
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %41, label %29

29:                                               ; preds = %25
  %30 = load i32, i32* %3, align 4
  %31 = and i32 %30, 65280
  %32 = icmp eq i32 %31, 1024
  br i1 %32, label %41, label %33

33:                                               ; preds = %29
  %34 = load i32, i32* %3, align 4
  %35 = and i32 %34, 16711680
  %36 = icmp eq i32 %35, 262144
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = load i32, i32* %3, align 4
  %39 = and i32 %38, -16777216
  %40 = icmp eq i32 %39, 67108864
  br i1 %40, label %41, label %46

41:                                               ; preds = %37, %33, %29, %25
  %42 = load i32, i32* @stderr, align 4
  %43 = load i8*, i8** %4, align 8
  %44 = call i32 @fprintf(i32 %42, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %43)
  %45 = call i32 @exit(i32 1) #3
  unreachable

46:                                               ; preds = %37
  %47 = load i32, i32* %3, align 4
  %48 = and i32 %47, 255
  %49 = icmp eq i32 %48, 10
  br i1 %49, label %62, label %50

50:                                               ; preds = %46
  %51 = load i32, i32* %3, align 4
  %52 = and i32 %51, 65280
  %53 = icmp eq i32 %52, 2560
  br i1 %53, label %62, label %54

54:                                               ; preds = %50
  %55 = load i32, i32* %3, align 4
  %56 = and i32 %55, 16711680
  %57 = icmp eq i32 %56, 655360
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = load i32, i32* %3, align 4
  %60 = and i32 %59, -16777216
  %61 = icmp eq i32 %60, 167772160
  br i1 %61, label %62, label %67

62:                                               ; preds = %58, %54, %50, %46
  %63 = load i32, i32* @stderr, align 4
  %64 = load i8*, i8** %4, align 8
  %65 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %64)
  %66 = call i32 @exit(i32 1) #3
  unreachable

67:                                               ; preds = %58
  %68 = load i32, i32* %3, align 4
  %69 = and i32 %68, 255
  %70 = icmp eq i32 %69, 13
  br i1 %70, label %83, label %71

71:                                               ; preds = %67
  %72 = load i32, i32* %3, align 4
  %73 = and i32 %72, 65280
  %74 = icmp eq i32 %73, 3328
  br i1 %74, label %83, label %75

75:                                               ; preds = %71
  %76 = load i32, i32* %3, align 4
  %77 = and i32 %76, 16711680
  %78 = icmp eq i32 %77, 851968
  br i1 %78, label %83, label %79

79:                                               ; preds = %75
  %80 = load i32, i32* %3, align 4
  %81 = and i32 %80, -16777216
  %82 = icmp eq i32 %81, 218103808
  br i1 %82, label %83, label %88

83:                                               ; preds = %79, %75, %71, %67
  %84 = load i32, i32* @stderr, align 4
  %85 = load i8*, i8** %4, align 8
  %86 = call i32 @fprintf(i32 %84, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8* %85)
  %87 = call i32 @exit(i32 1) #3
  unreachable

88:                                               ; preds = %79
  %89 = load i32, i32* %3, align 4
  %90 = and i32 %89, 255
  %91 = call i64 @islower(i32 %90)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %111, label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %3, align 4
  %95 = and i32 %94, 65280
  %96 = ashr i32 %95, 8
  %97 = call i64 @islower(i32 %96)
  %98 = icmp ne i64 %97, 0
  br i1 %98, label %111, label %99

99:                                               ; preds = %93
  %100 = load i32, i32* %3, align 4
  %101 = and i32 %100, 16711680
  %102 = ashr i32 %101, 16
  %103 = call i64 @islower(i32 %102)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %111, label %105

105:                                              ; preds = %99
  %106 = load i32, i32* %3, align 4
  %107 = and i32 %106, -16777216
  %108 = lshr i32 %107, 24
  %109 = call i64 @islower(i32 %108)
  %110 = icmp ne i64 %109, 0
  br i1 %110, label %111, label %116

111:                                              ; preds = %105, %99, %93, %88
  %112 = load i32, i32* @stderr, align 4
  %113 = load i8*, i8** %4, align 8
  %114 = call i32 @fprintf(i32 %112, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0), i8* %113)
  %115 = call i32 @exit(i32 1) #3
  unreachable

116:                                              ; preds = %105
  ret void
}

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @islower(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
