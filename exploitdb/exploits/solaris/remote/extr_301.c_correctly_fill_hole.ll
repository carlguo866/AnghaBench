; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_correctly_fill_hole.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_correctly_fill_hole.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RET = common dso_local global i64 0, align 8
@word_size = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @correctly_fill_hole(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [256 x i8], align 16
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [2048 x i8], align 16
  %14 = alloca i64, align 8
  %15 = alloca [4096 x i8], align 16
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 0, i32* %10, align 4
  %16 = load i64, i64* @RET, align 8
  store i64 %16, i64* %14, align 8
  %17 = load i32, i32* @word_size, align 4
  %18 = add nsw i32 1024, %17
  store i32 %18, i32* %6, align 4
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %6, align 4
  %21 = sdiv i32 %19, %20
  store i32 %21, i32* %8, align 4
  %22 = load i32, i32* %5, align 4
  %23 = load i32, i32* %6, align 4
  %24 = srem i32 %22, %23
  store i32 %24, i32* %9, align 4
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %26 = call i32 @memset(i8* %25, i32 0, i32 1024)
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %28 = call i32 @memset(i8* %27, i32 136, i32 508)
  %29 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %30 = call i32 @memset(i8* %29, i32 0, i32 2048)
  %31 = load i32, i32* %9, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %60

33:                                               ; preds = %2
  store i32 0, i32* %10, align 4
  br label %34

34:                                               ; preds = %56, %33
  %35 = load i32, i32* %10, align 4
  %36 = load i32, i32* %8, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %34
  %39 = load i32, i32* %5, align 4
  %40 = icmp sgt i32 %39, 0
  br label %41

41:                                               ; preds = %38, %34
  %42 = phi i1 [ false, %34 ], [ %40, %38 ]
  br i1 %42, label %43, label %59

43:                                               ; preds = %41
  %44 = load i32, i32* %4, align 4
  %45 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %47 = load i32, i32* %5, align 4
  %48 = load i32, i32* @word_size, align 4
  %49 = add nsw i32 1024, %48
  %50 = sub nsw i32 %47, %49
  %51 = call i32 @do_sized_entry(i32 %44, i8* %45, i8* %46, i32 %50)
  %52 = load i32, i32* @word_size, align 4
  %53 = add nsw i32 1024, %52
  %54 = load i32, i32* %5, align 4
  %55 = sub nsw i32 %54, %53
  store i32 %55, i32* %5, align 4
  br label %56

56:                                               ; preds = %43
  %57 = load i32, i32* %10, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %10, align 4
  br label %34

59:                                               ; preds = %41
  br label %131

60:                                               ; preds = %2
  store i32 0, i32* %10, align 4
  br label %61

61:                                               ; preds = %84, %60
  %62 = load i32, i32* %10, align 4
  %63 = load i32, i32* %8, align 4
  %64 = sub nsw i32 %63, 2
  %65 = icmp slt i32 %62, %64
  br i1 %65, label %66, label %69

66:                                               ; preds = %61
  %67 = load i32, i32* %5, align 4
  %68 = icmp sgt i32 %67, 0
  br label %69

69:                                               ; preds = %66, %61
  %70 = phi i1 [ false, %61 ], [ %68, %66 ]
  br i1 %70, label %71, label %87

71:                                               ; preds = %69
  %72 = load i32, i32* %4, align 4
  %73 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %74 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %75 = load i32, i32* %5, align 4
  %76 = load i32, i32* @word_size, align 4
  %77 = add nsw i32 1024, %76
  %78 = sub nsw i32 %75, %77
  %79 = call i32 @do_sized_entry(i32 %72, i8* %73, i8* %74, i32 %78)
  %80 = load i32, i32* @word_size, align 4
  %81 = add nsw i32 1024, %80
  %82 = load i32, i32* %5, align 4
  %83 = sub nsw i32 %82, %81
  store i32 %83, i32* %5, align 4
  br label %84

84:                                               ; preds = %71
  %85 = load i32, i32* %10, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %10, align 4
  br label %61

87:                                               ; preds = %69
  %88 = load i32, i32* %6, align 4
  %89 = mul nsw i32 %88, 2
  %90 = load i32, i32* %9, align 4
  %91 = add nsw i32 %89, %90
  store i32 %91, i32* %7, align 4
  %92 = load i32, i32* %7, align 4
  %93 = call i32 @ROUND(i32 %92)
  %94 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %95 = call i32 @memset(i8* %94, i32 0, i32 2048)
  %96 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %97 = load i32, i32* %7, align 4
  %98 = sub nsw i32 %97, 8
  %99 = sdiv i32 %98, 2
  %100 = call i32 @memset(i8* %96, i32 255, i32 %99)
  %101 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %102 = call i32 @memset(i8* %101, i32 0, i32 4096)
  store i32 0, i32* %10, align 4
  br label %103

103:                                              ; preds = %117, %87
  %104 = load i32, i32* %10, align 4
  %105 = load i32, i32* %7, align 4
  %106 = sub nsw i32 %105, 8
  %107 = sdiv i32 %106, 2
  %108 = sub nsw i32 %107, 4
  %109 = icmp slt i32 %104, %108
  br i1 %109, label %110, label %120

110:                                              ; preds = %103
  %111 = load i64, i64* @RET, align 8
  %112 = call i32 @htonl(i64 %111)
  %113 = load i32, i32* %10, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 %114
  %116 = bitcast i8* %115 to i32*
  store i32 %112, i32* %116, align 1
  br label %117

117:                                              ; preds = %110
  %118 = load i32, i32* %10, align 4
  %119 = add nsw i32 %118, 4
  store i32 %119, i32* %10, align 4
  br label %103

120:                                              ; preds = %103
  %121 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %122 = getelementptr inbounds i8, i8* %121, i64 1
  %123 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %124 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %125 = call i32 @strlen(i8* %124)
  %126 = call i32 @memcpy(i8* %122, i8* %123, i32 %125)
  %127 = load i32, i32* %4, align 4
  %128 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %129 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %130 = call i32 @do_sized_entry(i32 %127, i8* %128, i8* %129, i32 4096)
  br label %131

131:                                              ; preds = %120, %59
  %132 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %133 = call i32 @memset(i8* %132, i32 0, i32 2048)
  %134 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %135 = call i32 @memset(i8* %134, i32 255, i32 34)
  %136 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %137 = call i32 @memset(i8* %136, i32 0, i32 4096)
  store i32 0, i32* %10, align 4
  br label %138

138:                                              ; preds = %148, %131
  %139 = load i32, i32* %10, align 4
  %140 = icmp slt i32 %139, 28
  br i1 %140, label %141, label %151

141:                                              ; preds = %138
  %142 = load i64, i64* @RET, align 8
  %143 = call i32 @htonl(i64 %142)
  %144 = load i32, i32* %10, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 %145
  %147 = bitcast i8* %146 to i32*
  store i32 %143, i32* %147, align 1
  br label %148

148:                                              ; preds = %141
  %149 = load i32, i32* %10, align 4
  %150 = add nsw i32 %149, 4
  store i32 %150, i32* %10, align 4
  br label %138

151:                                              ; preds = %138
  %152 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %153 = getelementptr inbounds i8, i8* %152, i64 7
  %154 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %155 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %156 = call i32 @strlen(i8* %155)
  %157 = call i32 @memcpy(i8* %153, i8* %154, i32 %156)
  %158 = load i32, i32* %4, align 4
  %159 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %160 = getelementptr inbounds [2048 x i8], [2048 x i8]* %13, i64 0, i64 0
  %161 = call i32 @do_sized_entry(i32 %158, i8* %159, i8* %160, i32 97)
  %162 = load i32, i32* %3, align 4
  ret i32 %162
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @do_sized_entry(i32, i8*, i8*, i32) #1

declare dso_local i32 @ROUND(i32) #1

declare dso_local i32 @htonl(i64) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
