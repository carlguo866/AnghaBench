; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_do_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_do_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FD_SETSIZE = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  store i32 %0, i32* %3, align 4
  br label %7

7:                                                ; preds = %1, %30, %54, %61
  %8 = call i32 @FD_ZERO(i32* %4)
  %9 = call i32 @FD_SET(i32 0, i32* %4)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %4)
  %12 = load i32, i32* @FD_SETSIZE, align 4
  %13 = call i64 @select(i32 %12, i32* %4, i32* null, i32* null, i32* null)
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %61

15:                                               ; preds = %7
  %16 = call i64 @FD_ISSET(i32 0, i32* %4)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %37

18:                                               ; preds = %15
  %19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %20 = call i32 @read(i32 0, i8* %19, i32 1024)
  store i32 %20, i32* %5, align 4
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %22, label %32

22:                                               ; preds = %18
  %23 = load i64, i64* @errno, align 8
  %24 = load i64, i64* @EWOULDBLOCK, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = load i64, i64* @errno, align 8
  %28 = load i64, i64* @EAGAIN, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %26, %22
  br label %7

31:                                               ; preds = %26
  br label %62

32:                                               ; preds = %18
  %33 = load i32, i32* %3, align 4
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %35 = load i32, i32* %5, align 4
  %36 = call i32 @write(i32 %33, i8* %34, i32 %35)
  br label %37

37:                                               ; preds = %32, %15
  %38 = load i32, i32* %3, align 4
  %39 = call i64 @FD_ISSET(i32 %38, i32* %4)
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %37
  %42 = load i32, i32* %3, align 4
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %44 = call i32 @read(i32 %42, i8* %43, i32 1024)
  store i32 %44, i32* %5, align 4
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %46, label %56

46:                                               ; preds = %41
  %47 = load i64, i64* @errno, align 8
  %48 = load i64, i64* @EWOULDBLOCK, align 8
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = load i64, i64* @errno, align 8
  %52 = load i64, i64* @EAGAIN, align 8
  %53 = icmp eq i64 %51, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %50, %46
  br label %7

55:                                               ; preds = %50
  br label %62

56:                                               ; preds = %41
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %58 = load i32, i32* %5, align 4
  %59 = call i32 @write(i32 1, i8* %57, i32 %58)
  br label %60

60:                                               ; preds = %56, %37
  br label %61

61:                                               ; preds = %60, %7
  br label %7

62:                                               ; preds = %55, %31
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
