; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_timeout_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_timeout_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @timeout_read(i32 %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8, align 1
  %14 = alloca %struct.timeval, align 8
  %15 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %16 = call i32 @memset(%struct.timeval* %14, i8 signext 0, i32 16)
  %17 = load i32, i32* %9, align 4
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  store i64 0, i64* %19, align 8
  %20 = load i32, i32* %6, align 4
  %21 = load i32, i32* @F_GETFL, align 4
  %22 = call i32 @fcntl(i32 %20, i32 %21, i32 0)
  store i32 %22, i32* %12, align 4
  %23 = load i32, i32* %6, align 4
  %24 = load i32, i32* @F_SETFL, align 4
  %25 = load i32, i32* %12, align 4
  %26 = load i32, i32* @O_NONBLOCK, align 4
  %27 = or i32 %25, %26
  %28 = call i32 @fcntl(i32 %23, i32 %24, i32 %27)
  br label %29

29:                                               ; preds = %88, %60, %4
  %30 = load i32, i32* %10, align 4
  %31 = load i32, i32* %8, align 4
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %89

33:                                               ; preds = %29
  %34 = call i32 @FD_ZERO(i32* %15)
  %35 = load i32, i32* %6, align 4
  %36 = call i32 @FD_SET(i32 %35, i32* %15)
  %37 = load i32, i32* %6, align 4
  %38 = add nsw i32 %37, 1
  %39 = call i32 @select(i32 %38, i32* %15, i32* null, i32* null, %struct.timeval* %14)
  %40 = load i32, i32* %6, align 4
  %41 = call i64 @FD_ISSET(i32 %40, i32* %15)
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %83

43:                                               ; preds = %33
  %44 = load i32, i32* %6, align 4
  %45 = call i32 @read(i32 %44, i8* %13, i32 1)
  store i32 %45, i32* %11, align 4
  %46 = load i32, i32* %11, align 4
  %47 = load i32, i32* %10, align 4
  %48 = add nsw i32 %47, %46
  store i32 %48, i32* %10, align 4
  %49 = load i32, i32* %11, align 4
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %51, label %61

51:                                               ; preds = %43
  %52 = load i64, i64* @errno, align 8
  %53 = load i64, i64* @EWOULDBLOCK, align 8
  %54 = icmp ne i64 %52, %53
  br i1 %54, label %55, label %60

55:                                               ; preds = %51
  %56 = load i32, i32* %6, align 4
  %57 = load i32, i32* @F_SETFL, align 4
  %58 = load i32, i32* %12, align 4
  %59 = call i32 @fcntl(i32 %56, i32 %57, i32 %58)
  store i32 -1, i32* %5, align 4
  br label %95

60:                                               ; preds = %51
  br label %29

61:                                               ; preds = %43
  %62 = load i32, i32* %11, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %61
  %65 = load i32, i32* %6, align 4
  %66 = load i32, i32* @F_SETFL, align 4
  %67 = load i32, i32* %12, align 4
  %68 = call i32 @fcntl(i32 %65, i32 %66, i32 %67)
  store i32 0, i32* %5, align 4
  br label %95

69:                                               ; preds = %61
  %70 = load i8, i8* %13, align 1
  %71 = load i8*, i8** %7, align 8
  %72 = load i32, i32* %10, align 4
  %73 = sub nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  store i8 %70, i8* %75, align 1
  %76 = load i8, i8* %13, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 10
  br i1 %78, label %79, label %80

79:                                               ; preds = %69
  br label %89

80:                                               ; preds = %69
  br label %81

81:                                               ; preds = %80
  br label %82

82:                                               ; preds = %81
  br label %88

83:                                               ; preds = %33
  %84 = load i32, i32* %6, align 4
  %85 = load i32, i32* @F_SETFL, align 4
  %86 = load i32, i32* %12, align 4
  %87 = call i32 @fcntl(i32 %84, i32 %85, i32 %86)
  store i32 -2, i32* %5, align 4
  br label %95

88:                                               ; preds = %82
  br label %29

89:                                               ; preds = %79, %29
  %90 = load i32, i32* %6, align 4
  %91 = load i32, i32* @F_SETFL, align 4
  %92 = load i32, i32* %12, align 4
  %93 = call i32 @fcntl(i32 %90, i32 %91, i32 %92)
  %94 = load i32, i32* %10, align 4
  store i32 %94, i32* %5, align 4
  br label %95

95:                                               ; preds = %89, %83, %64, %55
  %96 = load i32, i32* %5, align 4
  ret i32 %96
}

declare dso_local i32 @memset(%struct.timeval*, i8 signext, i32) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
