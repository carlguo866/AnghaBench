; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_716.c_net_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_716.c_net_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Can't bind a privileged port (must be root)\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Can't resolve hostname\00", align 1
@F_GETFL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"fcntl\00", align 1
@errno = common dso_local global i64 0, align 8
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@EINPROGRESS = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [29 x i8] c"Can't connect to remote host\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @net_connect(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 8
  %13 = alloca %struct.timeval, align 8
  %14 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_STREAM, align 4
  %17 = load i32, i32* @IPPROTO_TCP, align 4
  %18 = call i32 @socket(i32 %15, i32 %16, i32 %17)
  store i32 %18, i32* %8, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %3
  %21 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #3
  unreachable

23:                                               ; preds = %3
  %24 = load i32, i32* @AF_INET, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %24, i32* %25, align 8
  %26 = load i32, i32* @INADDR_ANY, align 4
  %27 = call i32 @htonl(i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %29 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %28, i32 0, i32 0
  store i32 %27, i32* %29, align 8
  store i32 1023, i32* %9, align 4
  br label %30

30:                                               ; preds = %43, %23
  %31 = load i32, i32* %9, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %46

33:                                               ; preds = %30
  %34 = load i32, i32* %9, align 4
  %35 = call i8* @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i8* %35, i8** %36, align 8
  %37 = load i32, i32* %8, align 4
  %38 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %39 = call i32 @bind(i32 %37, %struct.sockaddr* %38, i32 24)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %33
  br label %46

42:                                               ; preds = %33
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* %9, align 4
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* %9, align 4
  br label %30

46:                                               ; preds = %41, %30
  %47 = load i32, i32* %9, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = load i32, i32* %8, align 4
  %51 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i32 %50)
  br label %52

52:                                               ; preds = %49, %46
  %53 = load i32, i32* %6, align 4
  %54 = call i8* @htons(i32 %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i8* %54, i8** %55, align 8
  %56 = load i8*, i8** %5, align 8
  %57 = call i32 @net_resolve(i8* %56)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  store i32 %57, i32* %59, align 8
  %60 = icmp ne i32 %57, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %52
  %62 = load i32, i32* %8, align 4
  %63 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 %62)
  br label %64

64:                                               ; preds = %61, %52
  %65 = load i32, i32* %8, align 4
  %66 = load i32, i32* @F_GETFL, align 4
  %67 = call i64 @fcntl(i32 %65, i32 %66, i32 0)
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %10, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %64
  %71 = load i64, i64* @errno, align 8
  %72 = call i8* @strerror(i64 %71)
  %73 = load i32, i32* %8, align 4
  %74 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %72, i32 %73)
  br label %75

75:                                               ; preds = %70, %64
  %76 = load i32, i32* %8, align 4
  %77 = load i32, i32* @F_SETFL, align 4
  %78 = load i32, i32* %10, align 4
  %79 = load i32, i32* @O_NONBLOCK, align 4
  %80 = or i32 %78, %79
  %81 = call i64 @fcntl(i32 %76, i32 %77, i32 %80)
  %82 = icmp slt i64 %81, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %75
  %84 = load i64, i64* @errno, align 8
  %85 = call i8* @strerror(i64 %84)
  %86 = load i32, i32* %8, align 4
  %87 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %85, i32 %86)
  br label %88

88:                                               ; preds = %83, %75
  %89 = load i32, i32* %8, align 4
  %90 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %91 = call i32 @connect(i32 %89, %struct.sockaddr* %90, i32 24)
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %106, label %93

93:                                               ; preds = %88
  %94 = load i32, i32* %8, align 4
  %95 = load i32, i32* @F_SETFL, align 4
  %96 = load i32, i32* %10, align 4
  %97 = call i64 @fcntl(i32 %94, i32 %95, i32 %96)
  %98 = icmp slt i64 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %93
  %100 = load i64, i64* @errno, align 8
  %101 = call i8* @strerror(i64 %100)
  %102 = load i32, i32* %8, align 4
  %103 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %101, i32 %102)
  br label %104

104:                                              ; preds = %99, %93
  %105 = load i32, i32* %8, align 4
  store i32 %105, i32* %4, align 4
  br label %147

106:                                              ; preds = %88
  %107 = load i64, i64* @errno, align 8
  %108 = load i64, i64* @EINPROGRESS, align 8
  %109 = icmp ne i64 %107, %108
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  %111 = load i32, i32* %8, align 4
  %112 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %111)
  br label %113

113:                                              ; preds = %110, %106
  %114 = load i32, i32* %7, align 4
  %115 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i32 %114, i32* %115, align 8
  %116 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  store i64 0, i64* %116, align 8
  %117 = call i32 @FD_ZERO(i32* %14)
  %118 = load i32, i32* %8, align 4
  %119 = call i32 @FD_SET(i32 %118, i32* %14)
  %120 = load i32, i32* @FD_SETSIZE, align 4
  %121 = call i64 @select(i32 %120, i32* null, i32* %14, i32* null, %struct.timeval* %13)
  %122 = icmp sle i64 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %113
  %124 = load i32, i32* %8, align 4
  %125 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %124)
  br label %126

126:                                              ; preds = %123, %113
  store i32 24, i32* %11, align 4
  %127 = load i32, i32* %8, align 4
  %128 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %129 = call i64 @getpeername(i32 %127, %struct.sockaddr* %128, i32* %11)
  %130 = icmp slt i64 %129, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %126
  %132 = load i32, i32* %8, align 4
  %133 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %132)
  br label %134

134:                                              ; preds = %131, %126
  %135 = load i32, i32* %8, align 4
  %136 = load i32, i32* @F_SETFL, align 4
  %137 = load i32, i32* %10, align 4
  %138 = call i64 @fcntl(i32 %135, i32 %136, i32 %137)
  %139 = icmp slt i64 %138, 0
  br i1 %139, label %140, label %145

140:                                              ; preds = %134
  %141 = load i64, i64* @errno, align 8
  %142 = call i8* @strerror(i64 %141)
  %143 = load i32, i32* %8, align 4
  %144 = call i32 @fatalerr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %142, i32 %143)
  br label %145

145:                                              ; preds = %140, %134
  %146 = load i32, i32* %8, align 4
  store i32 %146, i32* %4, align 4
  br label %147

147:                                              ; preds = %145, %104
  %148 = load i32, i32* %4, align 4
  ret i32 %148
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htonl(i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @fatalerr(i8*, i8*, i32) #1

declare dso_local i32 @net_resolve(i8*) #1

declare dso_local i64 @fcntl(i32, i32, i32) #1

declare dso_local i8* @strerror(i64) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @getpeername(i32, %struct.sockaddr*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
