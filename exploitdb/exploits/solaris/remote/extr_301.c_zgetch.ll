; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_zgetch.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_zgetch.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8*, i32, i8*, i32 }

@zgetch.outbuf = internal global i8* null, align 8
@zgetch.outpos = internal global i32 0, align 4
@zgetch.outlen = internal global i32 0, align 4
@zgetch.rcvbuf = internal global [32768 x i8] zeroinitializer, align 16
@zgetch.dbuf = internal global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"[--] Socket error.\0A\00", align 1
@zin = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@Z_PARTIAL_FLUSH = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"[--] Revc inflate error.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @zgetch(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  br label %6

6:                                                ; preds = %59, %1
  %7 = load i32, i32* @zgetch.outpos, align 4
  %8 = load i32, i32* @zgetch.outlen, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %10, label %21

10:                                               ; preds = %6
  %11 = load i32, i32* @zgetch.outlen, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %10
  %14 = load i8*, i8** @zgetch.outbuf, align 8
  %15 = load i32, i32* @zgetch.outpos, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* @zgetch.outpos, align 4
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  ret i32 %20

21:                                               ; preds = %10, %6
  %22 = load i8*, i8** @zgetch.outbuf, align 8
  %23 = call i32 @free(i8* %22)
  store i32 0, i32* @zgetch.outlen, align 4
  store i8* null, i8** @zgetch.outbuf, align 8
  %24 = load i32, i32* %2, align 4
  %25 = call i32 @read(i32 %24, i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @zgetch.rcvbuf, i64 0, i64 0), i32 32768)
  store i32 %25, i32* %3, align 4
  %26 = load i32, i32* %3, align 4
  %27 = icmp sle i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %21
  store i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @zgetch.rcvbuf, i64 0, i64 0), i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 0), align 8
  %32 = load i32, i32* %3, align 4
  store i32 %32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 1), align 8
  br label %33

33:                                               ; preds = %31, %62
  store i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @zgetch.dbuf, i64 0, i64 0), i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 2), align 8
  store i32 4096, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 3), align 8
  %34 = load i32, i32* @Z_PARTIAL_FLUSH, align 4
  %35 = call i32 @inflate(%struct.TYPE_3__* @zin, i32 %34)
  store i32 %35, i32* %4, align 4
  %36 = load i32, i32* %4, align 4
  switch i32 %36, label %60 [
    i32 128, label %37
    i32 129, label %59
  ]

37:                                               ; preds = %33
  store i32 0, i32* @zgetch.outpos, align 4
  %38 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 3), align 8
  %39 = sext i32 %38 to i64
  %40 = sub i64 4096, %39
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %5, align 4
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* @zgetch.outlen, align 4
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* @zgetch.outlen, align 4
  %45 = load i8*, i8** @zgetch.outbuf, align 8
  %46 = load i32, i32* @zgetch.outlen, align 4
  %47 = call i8* @realloc(i8* %45, i32 %46)
  store i8* %47, i8** @zgetch.outbuf, align 8
  %48 = load i8*, i8** @zgetch.outbuf, align 8
  %49 = load i32, i32* @zgetch.outlen, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = load i32, i32* %5, align 4
  %53 = sext i32 %52 to i64
  %54 = sub i64 0, %53
  %55 = getelementptr inbounds i8, i8* %51, i64 %54
  %56 = ptrtoint i8* %55 to i32
  %57 = load i32, i32* %5, align 4
  %58 = call i32 @memcpy(i32 %56, i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @zgetch.dbuf, i64 0, i64 0), i32 %57)
  br label %62

59:                                               ; preds = %33
  br label %6

60:                                               ; preds = %33
  %61 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %37
  br label %33
}

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @inflate(%struct.TYPE_3__*, i32) #1

declare dso_local i8* @realloc(i8*, i32) #1

declare dso_local i32 @memcpy(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
