; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_43319.c_do_leak.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_43319.c_do_leak.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rusage = type { i32 }

@do_leak.ru = internal global %struct.rusage zeroinitializer, align 4
@RUSAGE_SELF = common dso_local global i32 0, align 4
@do_leak.leak1 = internal global i32 0, align 4
@do_leak.leak2 = internal global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"leak1: 0x%08x\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"leak2: 0x%08x\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @do_leak() #0 {
  %1 = alloca [1000 x i8], align 16
  %2 = load i32, i32* @RUSAGE_SELF, align 4
  %3 = call i32 @getrusage(i32 %2, %struct.rusage* @do_leak.ru)
  %4 = call i32 @memcpy(i32* @do_leak.leak1, i8* getelementptr inbounds (i8, i8* bitcast (%struct.rusage* @do_leak.ru to i8*), i64 12), i32 4)
  %5 = call i32 @memcpy(i32* @do_leak.leak2, i8* getelementptr inbounds (i8, i8* bitcast (%struct.rusage* @do_leak.ru to i8*), i64 28), i32 4)
  %6 = load i32, i32* @do_leak.leak1, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %0
  %9 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %10 = load i32, i32* @do_leak.leak1, align 4
  %11 = call i32 @sprintf(i8* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 %10)
  %12 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %13 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %14 = call i32 @strlen(i8* %13)
  %15 = call i32 @write(i32 1, i8* %12, i32 %14)
  br label %16

16:                                               ; preds = %8, %0
  %17 = load i32, i32* @do_leak.leak2, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %16
  %20 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %21 = load i32, i32* @do_leak.leak2, align 4
  %22 = call i32 @sprintf(i8* %20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %1, i64 0, i64 0
  %25 = call i32 @strlen(i8* %24)
  %26 = call i32 @write(i32 1, i8* %23, i32 %25)
  br label %27

27:                                               ; preds = %19, %16
  ret void
}

declare dso_local i32 @getrusage(i32, %struct.rusage*) #1

declare dso_local i32 @memcpy(i32*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
