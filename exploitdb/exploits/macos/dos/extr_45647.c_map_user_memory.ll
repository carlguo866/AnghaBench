; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_45647.c_map_user_memory.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_45647.c_map_user_memory.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mem_desc = type { i32, i32 }

@.str = private unnamed_addr constant [32 x i8] c"trying to map user pointer: %p\0A\00", align 1
@KERN_SUCCESS = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"IOConnectCall error: %x\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"worked? outputScalarCnt = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"outputScalarCnt = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"0x%llx :: 0x%llx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @map_user_memory(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca [16 x i32], align 16
  %6 = alloca i32, align 4
  %7 = alloca [4096 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca [16 x i32], align 16
  %10 = alloca i32, align 4
  %11 = alloca [4096 x i8], align 16
  %12 = alloca i64, align 8
  %13 = alloca %struct.mem_desc*, align 8
  store i32 %0, i32* %2, align 4
  %14 = call i8* @malloc(i32 131072)
  store i8* %14, i8** %4, align 8
  %15 = load i8*, i8** %4, align 8
  %16 = ptrtoint i8* %15 to i32
  %17 = add nsw i32 %16, 4096
  %18 = and i32 %17, -4096
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %4, align 8
  %21 = load i8*, i8** %4, align 8
  %22 = ptrtoint i8* %21 to i32
  %23 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 %22)
  %24 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %24, i8 0, i64 64, i1 false)
  store i32 0, i32* %6, align 4
  %25 = bitcast [4096 x i8]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %25, i8 0, i64 4096, i1 false)
  store i64 0, i64* %8, align 8
  %26 = bitcast [16 x i32]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %26, i8 0, i64 64, i1 false)
  store i32 0, i32* %10, align 4
  %27 = bitcast [4096 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %27, i8 0, i64 4096, i1 false)
  store i64 0, i64* %12, align 8
  store i32 0, i32* %6, align 4
  store i64 16, i64* %8, align 8
  store i32 4096, i32* %10, align 4
  store i64 16, i64* %12, align 8
  %28 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %29 = bitcast i8* %28 to %struct.mem_desc*
  store %struct.mem_desc* %29, %struct.mem_desc** %13, align 8
  %30 = load i8*, i8** %4, align 8
  %31 = ptrtoint i8* %30 to i32
  %32 = load %struct.mem_desc*, %struct.mem_desc** %13, align 8
  %33 = getelementptr inbounds %struct.mem_desc, %struct.mem_desc* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = load %struct.mem_desc*, %struct.mem_desc** %13, align 8
  %35 = getelementptr inbounds %struct.mem_desc, %struct.mem_desc* %34, i32 0, i32 1
  store i32 4096, i32* %35, align 4
  %36 = load i32, i32* %2, align 4
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %38 = load i32, i32* %6, align 4
  %39 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %40 = load i64, i64* %8, align 8
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 0
  %42 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %43 = call i32 @IOConnectCallMethod(i32 %36, i32 512, i32* %37, i32 %38, i8* %39, i64 %40, i32* %41, i32* %10, i8* %42, i64* %12)
  store i32 %43, i32* %3, align 4
  %44 = load i32, i32* %3, align 4
  %45 = load i32, i32* @KERN_SUCCESS, align 4
  %46 = icmp ne i32 %44, %45
  br i1 %46, label %47, label %50

47:                                               ; preds = %1
  %48 = load i32, i32* %3, align 4
  %49 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i32 %48)
  br label %53

50:                                               ; preds = %1
  %51 = load i32, i32* %10, align 4
  %52 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 %51)
  br label %53

53:                                               ; preds = %50, %47
  %54 = load i32, i32* %10, align 4
  %55 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 %54)
  %56 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %57 = bitcast i8* %56 to %struct.mem_desc*
  store %struct.mem_desc* %57, %struct.mem_desc** %13, align 8
  %58 = load %struct.mem_desc*, %struct.mem_desc** %13, align 8
  %59 = getelementptr inbounds %struct.mem_desc, %struct.mem_desc* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = load %struct.mem_desc*, %struct.mem_desc** %13, align 8
  %62 = getelementptr inbounds %struct.mem_desc, %struct.mem_desc* %61, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %60, i32 %63)
  %65 = load i8*, i8** %4, align 8
  %66 = ptrtoint i8* %65 to i32
  ret i32 %66
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @IOConnectCallMethod(i32, i32, i32*, i32, i8*, i64, i32*, i32*, i8*, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
