; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_44234.c_map_address_racer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_44234.c_map_address_racer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.map_address_racer_context = type { i32, i32, i32, i32, i64, i32, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i8* (i8*)* @map_address_racer to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @map_address_racer(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.map_address_racer_context*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = bitcast i8* %5 to %struct.map_address_racer_context*
  store %struct.map_address_racer_context* %6, %struct.map_address_racer_context** %3, align 8
  br label %7

7:                                                ; preds = %59, %1
  %8 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %9 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %8, i32 0, i32 4
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %62

12:                                               ; preds = %7
  %13 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %14 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %13, i32 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %17 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %16, i32 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = call i32 @deallocate_map_address(i32 %15, i32 %18)
  %20 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %21 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %20, i32 0, i32 0
  store i32 1, i32* %21, align 8
  br label %22

22:                                               ; preds = %28, %12
  %23 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %24 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %23, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp ne i32 %25, 0
  %27 = xor i1 %26, true
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  br label %22

29:                                               ; preds = %22
  %30 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %31 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %30, i32 0, i32 1
  store i32 0, i32* %31, align 4
  %32 = call i32 @close(i32 -1)
  %33 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %34 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %33, i32 0, i32 6
  %35 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %36 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %35, i32 0, i32 5
  %37 = load i32, i32* %36, align 8
  %38 = call i32 @allocate_map_address(i32* %34, i32 %37)
  store i32 %38, i32* %4, align 4
  %39 = load i32, i32* %4, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %29
  %42 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %43 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %42, i32 0, i32 2
  store i32 0, i32* %43, align 8
  br label %62

44:                                               ; preds = %29
  br label %45

45:                                               ; preds = %58, %44
  %46 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %47 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %46, i32 0, i32 4
  %48 = load i64, i64* %47, align 8
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %45
  %51 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %52 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %51, i32 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = icmp ne i32 %53, 0
  %55 = xor i1 %54, true
  br label %56

56:                                               ; preds = %50, %45
  %57 = phi i1 [ false, %45 ], [ %55, %50 ]
  br i1 %57, label %58, label %59

58:                                               ; preds = %56
  br label %45

59:                                               ; preds = %56
  %60 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %3, align 8
  %61 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %60, i32 0, i32 3
  store i32 0, i32* %61, align 4
  br label %7

62:                                               ; preds = %41, %7
  ret i8* null
}

declare dso_local i32 @deallocate_map_address(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @allocate_map_address(i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
