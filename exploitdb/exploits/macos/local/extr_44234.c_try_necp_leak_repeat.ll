; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_44234.c_try_necp_leak_repeat.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_44234.c_try_necp_leak_repeat.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.map_address_racer_context = type { i32, i32, i32 }

@.str = private unnamed_addr constant [33 x i8] c"Triggered the leak after %zu %s!\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"try\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"tries\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"Giving up after %zu unsuccessful leak attempts\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i64 (i32, i32)*, %struct.map_address_racer_context*)* @try_necp_leak_repeat to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @try_necp_leak_repeat(i32 %0, i64 (i32, i32)* %1, %struct.map_address_racer_context* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64 (i32, i32)*, align 8
  %7 = alloca %struct.map_address_racer_context*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i64 (i32, i32)* %1, i64 (i32, i32)** %6, align 8
  store %struct.map_address_racer_context* %2, %struct.map_address_racer_context** %7, align 8
  store i64 10000000, i64* %8, align 8
  store i32 0, i32* %9, align 4
  store i64 1, i64* %10, align 8
  br label %11

11:                                               ; preds = %46, %3
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %7, align 8
  %14 = call i64 @try_necp_leak(i32 %12, %struct.map_address_racer_context* %13)
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %34

16:                                               ; preds = %11
  %17 = load i64, i64* %10, align 8
  %18 = load i64, i64* %10, align 8
  %19 = icmp eq i64 %18, 1
  %20 = zext i1 %19 to i64
  %21 = select i1 %19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)
  %22 = call i32 @DEBUG_TRACE(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i64 %17, i8* %21)
  store i64 0, i64* %10, align 8
  store i32 1, i32* %9, align 4
  %23 = load i64 (i32, i32)*, i64 (i32, i32)** %6, align 8
  %24 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %7, align 8
  %25 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %24, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %7, align 8
  %28 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %27, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = call i64 %23(i32 %26, i32 %29)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %16
  store i32 1, i32* %4, align 4
  br label %49

33:                                               ; preds = %16
  br label %34

34:                                               ; preds = %33, %11
  %35 = load i32, i32* %9, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %34
  %38 = load i64, i64* %10, align 8
  %39 = icmp uge i64 %38, 10000000
  br i1 %39, label %40, label %43

40:                                               ; preds = %37
  %41 = load i64, i64* %10, align 8
  %42 = call i32 @ERROR(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i64 %41)
  store i32 0, i32* %4, align 4
  br label %49

43:                                               ; preds = %37, %34
  %44 = load %struct.map_address_racer_context*, %struct.map_address_racer_context** %7, align 8
  %45 = getelementptr inbounds %struct.map_address_racer_context, %struct.map_address_racer_context* %44, i32 0, i32 0
  store i32 1, i32* %45, align 4
  br label %46

46:                                               ; preds = %43
  %47 = load i64, i64* %10, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %10, align 8
  br label %11

49:                                               ; preds = %40, %32
  %50 = load i32, i32* %4, align 4
  ret i32 %50
}

declare dso_local i64 @try_necp_leak(i32, %struct.map_address_racer_context*) #1

declare dso_local i32 @DEBUG_TRACE(i8*, i64, i8*) #1

declare dso_local i32 @ERROR(i8*, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
