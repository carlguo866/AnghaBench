; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39927.c_get_user_client.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39927.c_get_user_client.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@MACH_PORT_NULL = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [10 x i8] c"IOService\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"IOServiceOpen failed: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @get_user_client(i8* %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %13 = load i8*, i8** %4, align 8
  %14 = call i32 @IOServiceMatching(i8* %13)
  store i32 %14, i32* %7, align 4
  %15 = load i32, i32* @kIOMasterPortDefault, align 4
  %16 = load i32, i32* %7, align 4
  %17 = call i64 @IOServiceGetMatchingService(i32 %15, i32 %16)
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %8, align 8
  %19 = load i64, i64* @MACH_PORT_NULL, align 8
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load i8*, i8** %4, align 8
  %23 = call i32 @IOServiceNameMatching(i8* %22)
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* @kIOMasterPortDefault, align 4
  %25 = load i32, i32* %7, align 4
  %26 = call i64 @IOServiceGetMatchingService(i32 %24, i32 %25)
  store i64 %26, i64* %8, align 8
  br label %27

27:                                               ; preds = %21, %2
  %28 = load i64, i64* %8, align 8
  %29 = load i64, i64* @MACH_PORT_NULL, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %31, label %61

31:                                               ; preds = %27
  %32 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* @kIOMasterPortDefault, align 4
  %34 = load i32, i32* %7, align 4
  %35 = call i32 @IOServiceGetMatchingServices(i32 %33, i32 %34, i64* %9)
  store i32 0, i32* %10, align 4
  br label %36

36:                                               ; preds = %50, %31
  %37 = load i64, i64* %9, align 8
  %38 = call i64 @IOIteratorNext(i64 %37)
  store i64 %38, i64* %8, align 8
  %39 = load i64, i64* @IO_OBJECT_NULL, align 8
  %40 = icmp ne i64 %38, %39
  br i1 %40, label %41, label %53

41:                                               ; preds = %36
  %42 = load i64, i64* %8, align 8
  %43 = load i32, i32* %11, align 4
  %44 = call i32 @IOObjectGetClass(i64 %42, i32 %43)
  %45 = load i32, i32* %11, align 4
  %46 = load i8*, i8** %4, align 8
  %47 = call i64 @strstr(i32 %45, i8* %46)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  store i32 1, i32* %10, align 4
  br label %53

50:                                               ; preds = %41
  %51 = load i64, i64* %8, align 8
  %52 = call i32 @IOObjectRelease(i64 %51)
  br label %36

53:                                               ; preds = %49, %36
  %54 = load i64, i64* %9, align 8
  %55 = call i32 @IOObjectRelease(i64 %54)
  %56 = load i32, i32* %10, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %53
  %59 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %59, i64* %3, align 8
  br label %81

60:                                               ; preds = %53
  br label %61

61:                                               ; preds = %60, %27
  %62 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %62, i64* %12, align 8
  %63 = load i64, i64* %8, align 8
  %64 = call i32 (...) @mach_task_self()
  %65 = load i32, i32* %5, align 4
  %66 = call i64 @IOServiceOpen(i64 %63, i32 %64, i32 %65, i64* %12)
  store i64 %66, i64* %6, align 8
  %67 = load i64, i64* %6, align 8
  %68 = load i64, i64* @KERN_SUCCESS, align 8
  %69 = icmp ne i64 %67, %68
  br i1 %69, label %70, label %77

70:                                               ; preds = %61
  %71 = load i64, i64* %6, align 8
  %72 = call i8* @mach_error_string(i64 %71)
  %73 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %72)
  %74 = load i64, i64* %8, align 8
  %75 = call i32 @IOObjectRelease(i64 %74)
  %76 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %76, i64* %3, align 8
  br label %81

77:                                               ; preds = %61
  %78 = load i64, i64* %8, align 8
  %79 = call i32 @IOObjectRelease(i64 %78)
  %80 = load i64, i64* %12, align 8
  store i64 %80, i64* %3, align 8
  br label %81

81:                                               ; preds = %77, %70, %58
  %82 = load i64, i64* %3, align 8
  ret i64 %82
}

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceNameMatching(i8*) #1

declare dso_local i32 @IOServiceGetMatchingServices(i32, i32, i64*) #1

declare dso_local i64 @IOIteratorNext(i64) #1

declare dso_local i32 @IOObjectGetClass(i64, i32) #1

declare dso_local i64 @strstr(i32, i8*) #1

declare dso_local i32 @IOObjectRelease(i64) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i64*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i8* @mach_error_string(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
