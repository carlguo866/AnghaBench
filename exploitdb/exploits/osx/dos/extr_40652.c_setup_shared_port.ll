; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_40652.c_setup_shared_port.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_40652.c_setup_shared_port.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@STOLEN_SPECIAL_PORT = common dso_local global i32 0, align 4
@saved_special_port = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"saving original special port value\00", align 1
@MACH_PORT_RIGHT_RECEIVE = common dso_local global i32 0, align 4
@shared_port_parent = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"allocating shared port\00", align 1
@MACH_MSG_TYPE_MAKE_SEND = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [37 x i8] c"inserting MAKE_SEND into shared port\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"setting special port\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @setup_shared_port() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 (...) @mach_task_self()
  %3 = load i32, i32* @STOLEN_SPECIAL_PORT, align 4
  %4 = call i32 @task_get_special_port(i32 %2, i32 %3, i32* @saved_special_port)
  store i32 %4, i32* %1, align 4
  %5 = load i32, i32* %1, align 4
  %6 = call i32 @MACH_ERR(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 %5)
  %7 = call i32 (...) @mach_task_self()
  %8 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %9 = call i32 @mach_port_allocate(i32 %7, i32 %8, i32* @shared_port_parent)
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = call i32 @MACH_ERR(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  %12 = call i32 (...) @mach_task_self()
  %13 = load i32, i32* @shared_port_parent, align 4
  %14 = load i32, i32* @shared_port_parent, align 4
  %15 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND, align 4
  %16 = call i32 @mach_port_insert_right(i32 %12, i32 %13, i32 %14, i32 %15)
  store i32 %16, i32* %1, align 4
  %17 = load i32, i32* %1, align 4
  %18 = call i32 @MACH_ERR(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i32 %17)
  %19 = call i32 (...) @mach_task_self()
  %20 = load i32, i32* @STOLEN_SPECIAL_PORT, align 4
  %21 = load i32, i32* @shared_port_parent, align 4
  %22 = call i32 @task_set_special_port(i32 %19, i32 %20, i32 %21)
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* %1, align 4
  %24 = call i32 @MACH_ERR(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i32 %23)
  ret void
}

declare dso_local i32 @task_get_special_port(i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @MACH_ERR(i8*, i32) #1

declare dso_local i32 @mach_port_allocate(i32, i32, i32*) #1

declare dso_local i32 @mach_port_insert_right(i32, i32, i32, i32) #1

declare dso_local i32 @task_set_special_port(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
