; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_40652.c_recover_shared_port_parent.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_40652.c_recover_shared_port_parent.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { %struct.TYPE_12__, i32 }
%struct.TYPE_12__ = type { i32, i32 }
%struct.TYPE_10__ = type { %struct.TYPE_11__, %struct.TYPE_8__, %struct.TYPE_7__, i32 }
%struct.TYPE_11__ = type { i32, i32, i32, i32 }
%struct.TYPE_8__ = type { i32, i32, i32 }
%struct.TYPE_7__ = type { i32 }

@STOLEN_SPECIAL_PORT = common dso_local global i32 0, align 4
@saved_special_port = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"parent restoring special port\00", align 1
@MACH_RCV_MSG = common dso_local global i32 0, align 4
@shared_port_parent = common dso_local global i32 0, align 4
@MACH_MSG_TIMEOUT_NONE = common dso_local global i32 0, align 4
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"parent receiving child hello message\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"parent received hello message from child\00", align 1
@MACH_MSGH_BITS_COMPLEX = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@MACH_MSG_PORT_DESCRIPTOR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [42 x i8] c"parent sending special port back to child\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @recover_shared_port_parent() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.TYPE_9__, align 4
  %3 = alloca %struct.TYPE_10__, align 4
  %4 = call i32 (...) @mach_task_self()
  %5 = load i32, i32* @STOLEN_SPECIAL_PORT, align 4
  %6 = load i32, i32* @saved_special_port, align 4
  %7 = call i32 @task_set_special_port(i32 %4, i32 %5, i32 %6)
  store i32 %7, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = call i32 @MACH_ERR(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i32 %8)
  %10 = bitcast %struct.TYPE_9__* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 12, i1 false)
  %11 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %2, i32 0, i32 0
  %12 = load i32, i32* @MACH_RCV_MSG, align 4
  %13 = load i32, i32* @shared_port_parent, align 4
  %14 = load i32, i32* @MACH_MSG_TIMEOUT_NONE, align 4
  %15 = load i32, i32* @MACH_PORT_NULL, align 4
  %16 = call i32 @mach_msg(%struct.TYPE_12__* %11, i32 %12, i32 0, i32 12, i32 %13, i32 %14, i32 %15)
  store i32 %16, i32* %1, align 4
  %17 = load i32, i32* %1, align 4
  %18 = call i32 @MACH_ERR(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 %17)
  %19 = call i32 @LOG(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  %20 = bitcast %struct.TYPE_10__* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 36, i1 false)
  %21 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 0
  %22 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %21, i32 0, i32 0
  store i32 36, i32* %22, align 4
  %23 = load i32, i32* @MACH_PORT_NULL, align 4
  %24 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 0
  %25 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %24, i32 0, i32 3
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %2, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 0
  %30 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %29, i32 0, i32 2
  store i32 %28, i32* %30, align 4
  %31 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %2, i32 0, i32 0
  %32 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = call i32 @MACH_MSGH_BITS_REMOTE(i32 %33)
  %35 = call i32 @MACH_MSGH_BITS(i32 %34, i32 0)
  %36 = load i32, i32* @MACH_MSGH_BITS_COMPLEX, align 4
  %37 = or i32 %35, %36
  %38 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 0
  %39 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %38, i32 0, i32 1
  store i32 %37, i32* %39, align 4
  %40 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 2
  %41 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %40, i32 0, i32 0
  store i32 1, i32* %41, align 4
  %42 = load i32, i32* @saved_special_port, align 4
  %43 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 1
  %44 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %43, i32 0, i32 2
  store i32 %42, i32* %44, align 4
  %45 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %46 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 1
  %47 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %46, i32 0, i32 1
  store i32 %45, i32* %47, align 4
  %48 = load i32, i32* @MACH_MSG_PORT_DESCRIPTOR, align 4
  %49 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 1
  %50 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %49, i32 0, i32 0
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %3, i32 0, i32 0
  %52 = call i32 @mach_msg_send(%struct.TYPE_11__* %51)
  store i32 %52, i32* %1, align 4
  %53 = load i32, i32* %1, align 4
  %54 = call i32 @MACH_ERR(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 %53)
  %55 = load i32, i32* @shared_port_parent, align 4
  ret i32 %55
}

declare dso_local i32 @task_set_special_port(i32, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @MACH_ERR(i8*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @mach_msg(%struct.TYPE_12__*, i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @LOG(i8*) #1

declare dso_local i32 @MACH_MSGH_BITS(i32, i32) #1

declare dso_local i32 @MACH_MSGH_BITS_REMOTE(i32) #1

declare dso_local i32 @mach_msg_send(%struct.TYPE_11__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
