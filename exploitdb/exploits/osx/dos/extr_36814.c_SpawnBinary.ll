; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_36814.c_SpawnBinary.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_36814.c_SpawnBinary.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CPU_TYPE_HPPA = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [12 x i8] c"Crazy Horse\00", align 1
@__const.SpawnBinary.argv = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [21 x i8] c"posix_spawnattr_init\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"posix_spawnattr_setbinpref_np\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [34 x i8] c"----------- Goodbye! -----------\0A\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"Hum, still alive. You are lucky today! ret = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @SpawnBinary(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [2 x i32], align 4
  %4 = alloca [2 x i8*], align 16
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  %10 = load i32, i32* @CPU_TYPE_HPPA, align 4
  store i32 %10, i32* %9, align 4
  %11 = getelementptr inbounds i32, i32* %9, i64 1
  store i32 0, i32* %11, align 4
  %12 = bitcast [2 x i8*]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([2 x i8*]* @__const.SpawnBinary.argv to i8*), i64 16, i1 false)
  %13 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 8, i1 false)
  store i64 0, i64* %7, align 8
  %14 = call i32 @posix_spawnattr_init(i32* %6)
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %18

16:                                               ; preds = %1
  %17 = call i32 @err(i32 -1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  br label %18

18:                                               ; preds = %16, %1
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  %20 = call i32 @posix_spawnattr_setbinpref_np(i32* %6, i32 2, i32* %19, i64* %7)
  %21 = icmp eq i32 %20, -1
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = call i32 @err(i32 -1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  br label %24

24:                                               ; preds = %22, %18
  %25 = load i32, i32* @stderr, align 4
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %27 = load i8*, i8** %2, align 8
  %28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %4, i64 0, i64 0
  %29 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %30 = call i32 @posix_spawn(i32* null, i8* %27, i32* null, i32* %6, i8** %28, i8** %29)
  store i32 %30, i32* %8, align 4
  %31 = load i32, i32* @stderr, align 4
  %32 = load i32, i32* %8, align 4
  %33 = call i32 (i32, i8*, ...) @fprintf(i32 %31, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i32 %32)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @posix_spawnattr_init(i32*) #2

declare dso_local i32 @err(i32, i8*) #2

declare dso_local i32 @posix_spawnattr_setbinpref_np(i32*, i32, i32*, i64*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @posix_spawn(i32*, i8*, i32*, i32*, i8**, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
