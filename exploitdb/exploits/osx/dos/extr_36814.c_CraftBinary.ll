; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_36814.c_CraftBinary.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_36814.c_CraftBinary.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fat_header = type { i32, i32, i32 }
%struct.fat_arch = type { i32, i32, i32 }

@FAT_MAGIC = common dso_local global i32 0, align 4
@MAXNUM0 = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [7 x i8] c"calloc\00", align 1
@CPU_TYPE_I386 = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@S_IXUSR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"fchmod\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CraftBinary(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.fat_header, align 4
  %4 = alloca %struct.fat_arch*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %7 = call i32 @memset(%struct.fat_header* %3, i32 0, i32 12)
  %8 = load i32, i32* @FAT_MAGIC, align 4
  %9 = getelementptr inbounds %struct.fat_header, %struct.fat_header* %3, i32 0, i32 2
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.fat_header, %struct.fat_header* %3, i32 0, i32 0
  store i32 4096, i32* %10, align 4
  %11 = load i64, i64* @MAXNUM0, align 8
  %12 = call %struct.fat_header* @calloc(i64 %11, i32 12)
  %13 = bitcast %struct.fat_header* %12 to %struct.fat_arch*
  store %struct.fat_arch* %13, %struct.fat_arch** %4, align 8
  %14 = icmp eq %struct.fat_arch* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %1
  %16 = call i32 @err(i32 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %1
  store i64 0, i64* %5, align 8
  br label %18

18:                                               ; preds = %28, %17
  %19 = load i64, i64* %5, align 8
  %20 = load i64, i64* @MAXNUM0, align 8
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %22, label %31

22:                                               ; preds = %18
  %23 = load i32, i32* @CPU_TYPE_I386, align 4
  %24 = load %struct.fat_arch*, %struct.fat_arch** %4, align 8
  %25 = load i64, i64* %5, align 8
  %26 = getelementptr inbounds %struct.fat_arch, %struct.fat_arch* %24, i64 %25
  %27 = getelementptr inbounds %struct.fat_arch, %struct.fat_arch* %26, i32 0, i32 1
  store i32 %23, i32* %27, align 4
  br label %28

28:                                               ; preds = %22
  %29 = load i64, i64* %5, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %5, align 8
  br label %18

31:                                               ; preds = %18
  %32 = load i8*, i8** %2, align 8
  %33 = load i32, i32* @O_CREAT, align 4
  %34 = load i32, i32* @O_RDWR, align 4
  %35 = or i32 %33, %34
  %36 = call i32 @open(i8* %32, i32 %35)
  store i32 %36, i32* %6, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %31
  %39 = call i32 @err(i32 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %31
  %41 = load i32, i32* %6, align 4
  %42 = call i32 @write(i32 %41, %struct.fat_header* %3, i32 12)
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = call i32 @err(i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %46

46:                                               ; preds = %44, %40
  %47 = load i32, i32* %6, align 4
  %48 = load %struct.fat_arch*, %struct.fat_arch** %4, align 8
  %49 = bitcast %struct.fat_arch* %48 to %struct.fat_header*
  %50 = load i64, i64* @MAXNUM0, align 8
  %51 = mul i64 12, %50
  %52 = trunc i64 %51 to i32
  %53 = call i32 @write(i32 %47, %struct.fat_header* %49, i32 %52)
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %55, label %57

55:                                               ; preds = %46
  %56 = call i32 @err(i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %57

57:                                               ; preds = %55, %46
  %58 = load i32, i32* %6, align 4
  %59 = load i32, i32* @S_IXUSR, align 4
  %60 = call i32 @fchmod(i32 %58, i32 %59)
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  %63 = call i32 @err(i32 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  br label %64

64:                                               ; preds = %62, %57
  %65 = load i32, i32* %6, align 4
  %66 = call i32 @close(i32 %65)
  %67 = load %struct.fat_arch*, %struct.fat_arch** %4, align 8
  %68 = bitcast %struct.fat_arch* %67 to %struct.fat_header*
  %69 = call i32 @free(%struct.fat_header* %68)
  ret void
}

declare dso_local i32 @memset(%struct.fat_header*, i32, i32) #1

declare dso_local %struct.fat_header* @calloc(i64, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @write(i32, %struct.fat_header*, i32) #1

declare dso_local i32 @fchmod(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(%struct.fat_header*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
