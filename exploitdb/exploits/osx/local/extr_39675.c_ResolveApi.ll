; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_39675.c_ResolveApi.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_39675.c_ResolveApi.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MappingKernel = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"_current_proc\00", align 1
@api_current_proc = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"_proc_ucred\00", align 1
@api_proc_ucred = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [16 x i8] c"_posix_cred_get\00", align 1
@api_posix_cred_get = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [12 x i8] c"_chgproccnt\00", align 1
@api_chgproccnt = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [66 x i8] c"ResolveApi: using kernel addr 0x%016llx (file base = 0x%016llx) \0A\00", align 1
@KernelAddr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [41 x i8] c"ResolveApi: _current_proc = 0x%016llx  \0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"ResolveApi: _proc_ucred = 0x%016llx  \0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"ResolveApi: _posix_cred_get = 0x%016llx  \0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"ResolveApi: _chgproccnt = 0x%016llx  \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ResolveApi() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @MappingKernel, align 4
  %3 = call i32 @lsym_kernel_base(i32 %2)
  store i32 %3, i32* %1, align 4
  %4 = load i32, i32* @MappingKernel, align 4
  %5 = call i32 @RESOLVE_SYMBOL_MY(i32 %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  store i32 %5, i32* @api_current_proc, align 4
  %6 = load i32, i32* @MappingKernel, align 4
  %7 = call i32 @RESOLVE_SYMBOL_MY(i32 %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  store i32 %7, i32* @api_proc_ucred, align 4
  %8 = load i32, i32* @MappingKernel, align 4
  %9 = call i32 @RESOLVE_SYMBOL_MY(i32 %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  store i32 %9, i32* @api_posix_cred_get, align 4
  %10 = load i32, i32* @MappingKernel, align 4
  %11 = call i32 @RESOLVE_SYMBOL_MY(i32 %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  store i32 %11, i32* @api_chgproccnt, align 4
  %12 = load i32, i32* @KernelAddr, align 4
  %13 = load i32, i32* %1, align 4
  %14 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.4, i64 0, i64 0), i32 %12, i32 %13)
  %15 = load i32, i32* @api_current_proc, align 4
  %16 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i32 %15)
  %17 = load i32, i32* @api_proc_ucred, align 4
  %18 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0), i32 %17)
  %19 = load i32, i32* @api_posix_cred_get, align 4
  %20 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* @api_chgproccnt, align 4
  %22 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %21)
  ret i32 1
}

declare dso_local i32 @lsym_kernel_base(i32) #1

declare dso_local i32 @RESOLVE_SYMBOL_MY(i32, i8*) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
