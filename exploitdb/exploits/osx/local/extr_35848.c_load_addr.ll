; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_load_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_load_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"CFBundleIdentifier\00", align 1
@kCFStringEncodingMacRoman = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [30 x i8] c"com.apple.iokit.IONDRVSupport\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"OSBundleLoadAddress\00", align 1
@kCFNumberSInt64Type = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [15 x i8] c"%s: 0x%016llx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @load_addr() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  %8 = call i32 @OSKextCopyLoadedKextInfo(i32* null, i32* null)
  store i32 %8, i32* %2, align 4
  %9 = load i32, i32* %2, align 4
  %10 = call i32 @CFDictionaryGetCount(i32 %9)
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %3, align 4
  %12 = sext i32 %11 to i64
  %13 = mul i64 8, %12
  %14 = trunc i64 %13 to i32
  %15 = call i64 @malloc(i32 %14)
  %16 = inttoptr i64 %15 to i8**
  store i8** %16, i8*** %4, align 8
  %17 = load i32, i32* %3, align 4
  %18 = sext i32 %17 to i64
  %19 = mul i64 8, %18
  %20 = trunc i64 %19 to i32
  %21 = call i64 @malloc(i32 %20)
  %22 = inttoptr i64 %21 to i8**
  store i8** %22, i8*** %5, align 8
  %23 = load i32, i32* %2, align 4
  %24 = load i8**, i8*** %4, align 8
  %25 = load i8**, i8*** %5, align 8
  %26 = call i32 @CFDictionaryGetKeysAndValues(i32 %23, i8** %24, i8** %25)
  store i32 0, i32* %6, align 4
  br label %27

27:                                               ; preds = %58, %0
  %28 = load i32, i32* %6, align 4
  %29 = load i32, i32* %3, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %61

31:                                               ; preds = %27
  %32 = load i8**, i8*** %5, align 8
  %33 = load i32, i32* %6, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8*, i8** %32, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @CFSTR(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 @CFDictionaryGetValue(i8* %36, i32 %37)
  %39 = load i32, i32* @kCFStringEncodingMacRoman, align 4
  %40 = call i8* @CFStringGetCStringPtr(i32 %38, i32 %39)
  store i8* %40, i8** %7, align 8
  %41 = load i8*, i8** %7, align 8
  %42 = call i64 @strcmp(i8* %41, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %57

44:                                               ; preds = %31
  %45 = load i8**, i8*** %5, align 8
  %46 = load i32, i32* %6, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8*, i8** %45, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @CFSTR(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %51 = call i32 @CFDictionaryGetValue(i8* %49, i32 %50)
  %52 = load i32, i32* @kCFNumberSInt64Type, align 4
  %53 = call i32 @CFNumberGetValue(i32 %51, i32 %52, i32* %1)
  %54 = load i8*, i8** %7, align 8
  %55 = load i32, i32* %1, align 4
  %56 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* %54, i32 %55)
  br label %61

57:                                               ; preds = %31
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* %6, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %6, align 4
  br label %27

61:                                               ; preds = %44, %27
  %62 = load i32, i32* %1, align 4
  ret i32 %62
}

declare dso_local i32 @OSKextCopyLoadedKextInfo(i32*, i32*) #1

declare dso_local i32 @CFDictionaryGetCount(i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @CFDictionaryGetKeysAndValues(i32, i8**, i8**) #1

declare dso_local i8* @CFStringGetCStringPtr(i32, i32) #1

declare dso_local i32 @CFDictionaryGetValue(i8*, i32) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @CFNumberGetValue(i32, i32, i32*) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
