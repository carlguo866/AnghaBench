; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_39675.c_Alloc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_39675.c_Alloc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [23 x i8] c"Alloc: deallocating! \0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"Alloc: allocating 0x%x (0x%08x - 0x%08x) bytes\0A\00", align 1
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [61 x i8] c"Alloc: vm_allocate() - failed with message %s (error = %d)!\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"Alloc: vm_allocate ok, now vm_protect ...\0A\00", align 1
@.str.4 = private unnamed_addr constant [60 x i8] c"Alloc: vm_protect() - failed with message %s (error = %d)!\0A\00", align 1
@.str.5 = private unnamed_addr constant [74 x i8] c"Alloc: vm_allocate returned = %d - addr = 0x%08x, vm_protect ok, filling\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Alloc(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %7 = call i32 (...) @mach_task_self()
  %8 = load i32, i32* %3, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 @vm_deallocate(i32 %7, i32 %8, i32 %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %13, %14
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 %11, i32 %12, i32 %15)
  %17 = call i32 (...) @mach_task_self()
  %18 = load i32, i32* %4, align 4
  %19 = call i64 @vm_allocate(i32 %17, i32* %3, i32 %18, i32 0)
  store i64 %19, i64* %5, align 8
  %20 = load i64, i64* %5, align 8
  %21 = load i64, i64* @KERN_SUCCESS, align 8
  %22 = icmp ne i64 %20, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %2
  %24 = load i64, i64* %5, align 8
  %25 = call i8* @mach_error_string(i64 %24)
  %26 = load i64, i64* %5, align 8
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i8* %25, i64 %26)
  %28 = call i32 @exit(i32 -1) #3
  unreachable

29:                                               ; preds = %2
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0))
  %31 = call i32 (...) @mach_task_self()
  %32 = load i32, i32* %3, align 4
  %33 = load i32, i32* %4, align 4
  %34 = call i64 @vm_protect(i32 %31, i32 %32, i32 %33, i32 0, i32 7)
  store i64 %34, i64* %5, align 8
  %35 = load i64, i64* %5, align 8
  %36 = load i64, i64* @KERN_SUCCESS, align 8
  %37 = icmp ne i64 %35, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %29
  %39 = load i64, i64* %5, align 8
  %40 = call i8* @mach_error_string(i64 %39)
  %41 = load i64, i64* %5, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i8* %40, i64 %41)
  %43 = call i32 @exit(i32 -1) #3
  unreachable

44:                                               ; preds = %29
  %45 = load i64, i64* %5, align 8
  %46 = load i32, i32* %3, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.5, i64 0, i64 0), i64 %45, i32 %46)
  br label %48

48:                                               ; preds = %52, %44
  %49 = load i32, i32* %4, align 4
  %50 = add nsw i32 %49, -1
  store i32 %50, i32* %4, align 4
  %51 = icmp ne i32 %49, 0
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = load i32, i32* %3, align 4
  %54 = load i32, i32* %4, align 4
  %55 = add nsw i32 %53, %54
  %56 = sext i32 %55 to i64
  %57 = inttoptr i64 %56 to i8*
  store i8 0, i8* %57, align 1
  br label %48

58:                                               ; preds = %48
  %59 = load i32, i32* %3, align 4
  ret i32 %59
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @vm_deallocate(i32, i32, i32) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i64 @vm_allocate(i32, i32*, i32, i32) #1

declare dso_local i8* @mach_error_string(i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @vm_protect(i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
