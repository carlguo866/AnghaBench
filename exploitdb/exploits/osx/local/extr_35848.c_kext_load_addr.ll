; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_kext_load_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_35848.c_kext_load_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"CFBundleIdentifier\00", align 1
@kCFStringEncodingMacRoman = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"OSBundleLoadAddress\00", align 1
@kCFNumberSInt64Type = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [15 x i8] c"%s: 0x%016llx\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @kext_load_addr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %3, align 4
  %10 = call i32 @OSKextCopyLoadedKextInfo(i32* null, i32* null)
  store i32 %10, i32* %4, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @CFDictionaryGetCount(i32 %11)
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = mul i64 8, %14
  %16 = trunc i64 %15 to i32
  %17 = call i64 @malloc(i32 %16)
  %18 = inttoptr i64 %17 to i8**
  store i8** %18, i8*** %6, align 8
  %19 = load i32, i32* %5, align 4
  %20 = sext i32 %19 to i64
  %21 = mul i64 8, %20
  %22 = trunc i64 %21 to i32
  %23 = call i64 @malloc(i32 %22)
  %24 = inttoptr i64 %23 to i8**
  store i8** %24, i8*** %7, align 8
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %6, align 8
  %27 = load i8**, i8*** %7, align 8
  %28 = call i32 @CFDictionaryGetKeysAndValues(i32 %25, i8** %26, i8** %27)
  store i32 0, i32* %8, align 4
  br label %29

29:                                               ; preds = %61, %1
  %30 = load i32, i32* %8, align 4
  %31 = load i32, i32* %5, align 4
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %64

33:                                               ; preds = %29
  %34 = load i8**, i8*** %7, align 8
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8*, i8** %34, i64 %36
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @CFSTR(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %40 = call i32 @CFDictionaryGetValue(i8* %38, i32 %39)
  %41 = load i32, i32* @kCFStringEncodingMacRoman, align 4
  %42 = call i8* @CFStringGetCStringPtr(i32 %40, i32 %41)
  store i8* %42, i8** %9, align 8
  %43 = load i8*, i8** %9, align 8
  %44 = load i8*, i8** %2, align 8
  %45 = call i64 @strcmp(i8* %43, i8* %44)
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %60

47:                                               ; preds = %33
  %48 = load i8**, i8*** %7, align 8
  %49 = load i32, i32* %8, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8*, i8** %48, i64 %50
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @CFSTR(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %54 = call i32 @CFDictionaryGetValue(i8* %52, i32 %53)
  %55 = load i32, i32* @kCFNumberSInt64Type, align 4
  %56 = call i32 @CFNumberGetValue(i32 %54, i32 %55, i32* %3)
  %57 = load i8*, i8** %9, align 8
  %58 = load i32, i32* %3, align 4
  %59 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i8* %57, i32 %58)
  br label %64

60:                                               ; preds = %33
  br label %61

61:                                               ; preds = %60
  %62 = load i32, i32* %8, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %8, align 4
  br label %29

64:                                               ; preds = %47, %29
  %65 = load i32, i32* %3, align 4
  ret i32 %65
}

declare dso_local i32 @OSKextCopyLoadedKextInfo(i32*, i32*) #1

declare dso_local i32 @CFDictionaryGetCount(i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @CFDictionaryGetKeysAndValues(i32, i8**, i8**) #1

declare dso_local i8* @CFStringGetCStringPtr(i32, i32) #1

declare dso_local i32 @CFDictionaryGetValue(i8*, i32) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @CFNumberGetValue(i32, i32, i32*) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
