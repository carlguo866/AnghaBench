; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_info_udp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_info_udp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [36 x i8] c"\0ARetrieve information from: %s:%d\0A\0A\00", align 1
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"\\status\\\00", align 1
@BUFFSZ = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @info_udp(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %10 = load i8*, i8** %3, align 8
  %11 = call i32 @resolv(i8* %10)
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %13 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %12, i32 0, i32 0
  store i32 %11, i32* %13, align 4
  %14 = load i32, i32* %4, align 4
  %15 = call i32 @htons(i32 %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 2
  store i32 %15, i32* %16, align 4
  %17 = load i32, i32* @AF_INET, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  store i32 12, i32* %8, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = call i8* @inet_ntoa(i32 %21)
  %23 = load i32, i32* %4, align 4
  %24 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* %22, i32 %23)
  %25 = load i32, i32* @AF_INET, align 4
  %26 = load i32, i32* @SOCK_DGRAM, align 4
  %27 = load i32, i32* @IPPROTO_UDP, align 4
  %28 = call i32 @socket(i32 %25, i32 %26, i32 %27)
  store i32 %28, i32* %6, align 4
  %29 = load i32, i32* %6, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %2
  %32 = call i32 (...) @std_err()
  br label %33

33:                                               ; preds = %31, %2
  %34 = load i32, i32* %6, align 4
  %35 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %36 = load i32, i32* %8, align 4
  %37 = call i32 @sendto(i32 %34, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 8, i32 0, %struct.sockaddr* %35, i32 %36)
  store i32 %37, i32* %7, align 4
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = call i32 (...) @std_err()
  br label %42

42:                                               ; preds = %40, %33
  %43 = load i32, i32* %6, align 4
  %44 = call i32 @timeout(i32 %43)
  %45 = load i64, i64* @BUFFSZ, align 8
  %46 = add nsw i64 %45, 1
  %47 = call i32* @malloc(i64 %46)
  store i32* %47, i32** %9, align 8
  %48 = load i32*, i32** %9, align 8
  %49 = icmp ne i32* %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %42
  %51 = call i32 (...) @std_err()
  br label %52

52:                                               ; preds = %50, %42
  %53 = load i32, i32* %6, align 4
  %54 = load i32*, i32** %9, align 8
  %55 = load i64, i64* @BUFFSZ, align 8
  %56 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %57 = call i32 @recvfrom(i32 %53, i32* %54, i64 %55, i32 0, %struct.sockaddr* %56, i32* %8)
  store i32 %57, i32* %7, align 4
  %58 = load i32, i32* %7, align 4
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %52
  %61 = call i32 (...) @std_err()
  br label %62

62:                                               ; preds = %60, %52
  %63 = load i32*, i32** %9, align 8
  %64 = load i32, i32* %7, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %63, i64 %65
  store i32 0, i32* %66, align 4
  %67 = load i32*, i32** %9, align 8
  %68 = load i32, i32* %7, align 4
  %69 = call i32 @showinfostring(i32* %67, i32 %68)
  %70 = load i32, i32* %6, align 4
  %71 = call i32 @close(i32 %70)
  %72 = load i32*, i32** %9, align 8
  %73 = call i32 @free(i32* %72)
  ret void
}

declare dso_local i32 @resolv(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @timeout(i32) #1

declare dso_local i32* @malloc(i64) #1

declare dso_local i32 @recvfrom(i32, i32*, i64, i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @showinfostring(i32*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
