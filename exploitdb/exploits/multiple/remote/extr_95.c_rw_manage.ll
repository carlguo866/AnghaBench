; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_rw_manage.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_rw_manage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i32 }

@next = common dso_local global i32 0, align 4
@type = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"You have been kicked out\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [45 x i8] c"The channel you want to join doesn't exist!\0A\00", align 1
@.str.2 = private unnamed_addr constant [59 x i8] c"The channel requires a password or your password is wrong\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"\0F\14\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"\0F\15\00", align 1
@size = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [17 x i8] c"You have ID %hu\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"User with ID %hu is entered\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"User with ID %hu is exited\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"User with ID %hu has name: \00", align 1
@.str.9 = private unnamed_addr constant [39 x i8] c"Address of user with ID %hu is %s:%hu\0A\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"--> Undefined type: %04x (hex dump follows)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rw_manage(i32 %0, i32* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  store i32 %2, i32* %6, align 4
  br label %10

10:                                               ; preds = %121, %3
  %11 = load i32, i32* %6, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %122

13:                                               ; preds = %10
  %14 = load i32, i32* @next, align 4
  switch i32 %14, label %121 [
    i32 0, label %15
    i32 1, label %50
    i32 2, label %58
  ]

15:                                               ; preds = %13
  %16 = load i32*, i32** %5, align 8
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* @type, align 4
  store i32 0, i32* @next, align 4
  %18 = load i32, i32* @type, align 4
  switch i32 %18, label %44 [
    i32 783, label %19
    i32 1551, label %22
    i32 1807, label %25
    i32 5135, label %28
    i32 5391, label %36
  ]

19:                                               ; preds = %15
  %20 = load i32, i32* @stdout, align 4
  %21 = call i32 @fputs(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i32 %20)
  br label %45

22:                                               ; preds = %15
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 @fputs(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i32 %23)
  br label %45

25:                                               ; preds = %15
  %26 = load i32, i32* @stdout, align 4
  %27 = call i32 @fputs(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 %26)
  br label %45

28:                                               ; preds = %15
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @send(i32 %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2, i32 0)
  store i32 %30, i32* %7, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = call i32 (...) @std_err()
  br label %35

35:                                               ; preds = %33, %28
  br label %45

36:                                               ; preds = %15
  %37 = load i32, i32* %4, align 4
  %38 = call i32 @send(i32 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2, i32 0)
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %7, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = call i32 (...) @std_err()
  br label %43

43:                                               ; preds = %41, %36
  br label %45

44:                                               ; preds = %15
  store i32 1, i32* @next, align 4
  br label %45

45:                                               ; preds = %44, %43, %35, %25, %22, %19
  %46 = load i32*, i32** %5, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 2
  store i32* %47, i32** %5, align 8
  %48 = load i32, i32* %6, align 4
  %49 = sub nsw i32 %48, 2
  store i32 %49, i32* %6, align 4
  br label %121

50:                                               ; preds = %13
  %51 = load i32*, i32** %5, align 8
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @htons(i32 %52)
  store i32 %53, i32* @size, align 4
  store i32 2, i32* @next, align 4
  %54 = load i32*, i32** %5, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 2
  store i32* %55, i32** %5, align 8
  %56 = load i32, i32* %6, align 4
  %57 = sub nsw i32 %56, 2
  store i32 %57, i32* %6, align 4
  br label %121

58:                                               ; preds = %13
  %59 = load i32, i32* @type, align 4
  switch i32 %59, label %107 [
    i32 527, label %60
    i32 2575, label %65
    i32 2831, label %70
    i32 3087, label %75
    i32 3343, label %89
    i32 3599, label %89
    i32 3855, label %90
  ]

60:                                               ; preds = %58
  %61 = load i32*, i32** %5, align 8
  %62 = load i32, i32* %61, align 4
  %63 = call i32 @htons(i32 %62)
  %64 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 %63)
  br label %113

65:                                               ; preds = %58
  %66 = load i32*, i32** %5, align 8
  %67 = load i32, i32* %66, align 4
  %68 = call i32 @htons(i32 %67)
  %69 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 %68)
  br label %113

70:                                               ; preds = %58
  %71 = load i32*, i32** %5, align 8
  %72 = load i32, i32* %71, align 4
  %73 = call i32 @htons(i32 %72)
  %74 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 %73)
  br label %113

75:                                               ; preds = %58
  %76 = load i32, i32* @size, align 4
  %77 = sub nsw i32 %76, 2
  store i32 %77, i32* %7, align 4
  %78 = load i32*, i32** %5, align 8
  %79 = load i32, i32* %78, align 4
  %80 = call i32 @htons(i32 %79)
  %81 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i32 %80)
  %82 = load i32*, i32** %5, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 2
  %84 = load i32, i32* %7, align 4
  %85 = load i32, i32* @stdout, align 4
  %86 = call i32 @fwrite(i32* %83, i32 %84, i32 1, i32 %85)
  %87 = load i32, i32* @stdout, align 4
  %88 = call i32 @fputc(i8 signext 10, i32 %87)
  br label %113

89:                                               ; preds = %58, %58
  br label %113

90:                                               ; preds = %58
  %91 = load i32*, i32** %5, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 2
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %8, align 4
  %94 = load i32*, i32** %5, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 6
  %96 = load i32, i32* %95, align 4
  store i32 %96, i32* %9, align 4
  %97 = load i32*, i32** %5, align 8
  %98 = load i32, i32* %97, align 4
  %99 = call i32 @htons(i32 %98)
  %100 = bitcast i32* %8 to %struct.in_addr*
  %101 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %100, i32 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = call i32 @inet_ntoa(i32 %102)
  %104 = load i32, i32* %9, align 4
  %105 = call i32 @htons(i32 %104)
  %106 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.9, i64 0, i64 0), i32 %99, i32 %103, i32 %105)
  br label %113

107:                                              ; preds = %58
  %108 = load i32, i32* @type, align 4
  %109 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i32 %108)
  %110 = load i32*, i32** %5, align 8
  %111 = load i32, i32* @size, align 4
  %112 = call i32 @show_dump(i32* %110, i32 %111)
  br label %113

113:                                              ; preds = %107, %90, %89, %75, %70, %65, %60
  store i32 0, i32* @next, align 4
  %114 = load i32, i32* @size, align 4
  %115 = load i32*, i32** %5, align 8
  %116 = sext i32 %114 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  store i32* %117, i32** %5, align 8
  %118 = load i32, i32* @size, align 4
  %119 = load i32, i32* %6, align 4
  %120 = sub nsw i32 %119, %118
  store i32 %120, i32* %6, align 4
  br label %121

121:                                              ; preds = %13, %113, %50, %45
  br label %10

122:                                              ; preds = %10
  ret void
}

declare dso_local i32 @fputs(i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i32 @fwrite(i32*, i32, i32, i32) #1

declare dso_local i32 @fputc(i8 signext, i32) #1

declare dso_local i32 @inet_ntoa(i32) #1

declare dso_local i32 @show_dump(i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
