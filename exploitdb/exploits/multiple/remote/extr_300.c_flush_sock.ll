; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_flush_sock.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_flush_sock.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64, i32 }

@sock = common dso_local global i64 0, align 8
@timeout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@BUF_SIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @flush_sock() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.timeval, align 8
  store i32 0, i32* %5, align 4
  %8 = call i32 @FD_ZERO(i32* %6)
  %9 = load i64, i64* @sock, align 8
  %10 = call i32 @FD_SET(i64 %9, i32* %6)
  %11 = call i32 @bzero(%struct.timeval* %7, i32 16)
  %12 = load i32, i32* @timeout, align 4
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 1
  store i32 %12, i32* %13, align 8
  %14 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 0
  store i64 0, i64* %14, align 8
  store i32 42, i32* %3, align 4
  %15 = call i8* @malloc(i32 42)
  store i8* %15, i8** %2, align 8
  %16 = load i64, i64* @sock, align 8
  %17 = add nsw i64 %16, 1
  %18 = call i64 @select(i64 %17, i32* %6, i32* null, i32* null, %struct.timeval* %7)
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8** %1, align 8
  br label %53

21:                                               ; preds = %0
  br label %22

22:                                               ; preds = %30, %21
  %23 = load i64, i64* @sock, align 8
  %24 = load i8*, i8** %2, align 8
  %25 = load i32, i32* %5, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = call i32 @read(i64 %23, i8* %27, i32 42)
  store i32 %28, i32* %4, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %38

30:                                               ; preds = %22
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %32, %31
  store i32 %33, i32* %5, align 4
  %34 = load i8*, i8** %2, align 8
  %35 = load i32, i32* %3, align 4
  %36 = add nsw i32 %35, 42
  store i32 %36, i32* %3, align 4
  %37 = call i8* @realloc(i8* %34, i32 %36)
  store i8* %37, i8** %2, align 8
  br label %22

38:                                               ; preds = %22
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* %3, align 4
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = load i8*, i8** %2, align 8
  %44 = load i32, i32* %3, align 4
  %45 = add nsw i32 %44, 1
  %46 = call i8* @realloc(i8* %43, i32 %45)
  br label %47

47:                                               ; preds = %42, %38
  %48 = load i8*, i8** %2, align 8
  %49 = load i32, i32* %5, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  store i8 0, i8* %51, align 1
  %52 = load i8*, i8** %2, align 8
  store i8* %52, i8** %1, align 8
  br label %53

53:                                               ; preds = %47, %20
  %54 = load i8*, i8** %1, align 8
  ret i8* %54
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i64, i32*) #1

declare dso_local i32 @bzero(%struct.timeval*, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i64 @select(i64, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @read(i64, i8*, i32) #1

declare dso_local i8* @realloc(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
