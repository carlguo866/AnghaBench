; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@BANNER = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [24 x i8] c"r:u:p:h:P:s:S:t:iRbo:n:\00", align 1
@EOF = common dso_local global i32 0, align 4
@isbsd = common dso_local global i64 0, align 8
@detectos = common dso_local global i64 0, align 8
@optarg = common dso_local global i32 0, align 4
@root = common dso_local global i8* null, align 8
@is_scramble = common dso_local global i32 0, align 4
@saddr = common dso_local global i8* null, align 8
@timeout = common dso_local global i8* null, align 8
@size = common dso_local global i8* null, align 8
@user = common dso_local global i8* null, align 8
@pass = common dso_local global i8* null, align 8
@host = common dso_local global i8* null, align 8
@port = common dso_local global i8* null, align 8
@heapbase = common dso_local global i8* null, align 8
@scnum = common dso_local global i8* null, align 8
@ERR_CVSROOT = common dso_local global i32 0, align 4
@ERR_USERNAME = common dso_local global i32 0, align 4
@ERR_PASSWORD = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 @setbuf(i32 %7, i32* null)
  %9 = load i32, i32* @stderr, align 4
  %10 = call i32 @setbuf(i32 %9, i32* null)
  %11 = load i8*, i8** @BANNER, align 8
  %12 = call i32 @printf(i8* %11)
  br label %13

13:                                               ; preds = %63, %2
  %14 = load i32, i32* %4, align 4
  %15 = load i8**, i8*** %5, align 8
  %16 = call i32 @getopt(i32 %14, i8** %15, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  store i32 %16, i32* %6, align 4
  %17 = load i32, i32* @EOF, align 4
  %18 = icmp ne i32 %16, %17
  br i1 %18, label %19, label %64

19:                                               ; preds = %13
  %20 = load i32, i32* %6, align 4
  switch i32 %20, label %58 [
    i32 98, label %21
    i32 82, label %24
    i32 114, label %27
    i32 105, label %30
    i32 115, label %31
    i32 116, label %34
    i32 83, label %37
    i32 117, label %40
    i32 112, label %43
    i32 104, label %46
    i32 80, label %49
    i32 111, label %52
    i32 110, label %55
  ]

21:                                               ; preds = %19
  %22 = load i64, i64* @isbsd, align 8
  %23 = add nsw i64 %22, 1
  store i64 %23, i64* @isbsd, align 8
  br label %63

24:                                               ; preds = %19
  %25 = load i64, i64* @detectos, align 8
  %26 = add nsw i64 %25, 1
  store i64 %26, i64* @detectos, align 8
  br label %63

27:                                               ; preds = %19
  %28 = load i32, i32* @optarg, align 4
  %29 = call i8* @strdup(i32 %28)
  store i8* %29, i8** @root, align 8
  br label %63

30:                                               ; preds = %19
  store i32 1, i32* @is_scramble, align 4
  br label %63

31:                                               ; preds = %19
  %32 = load i32, i32* @optarg, align 4
  %33 = call i8* @strtoul(i32 %32, i32 0, i32 0)
  store i8* %33, i8** @saddr, align 8
  br label %63

34:                                               ; preds = %19
  %35 = load i32, i32* @optarg, align 4
  %36 = call i8* @strtoul(i32 %35, i32 0, i32 0)
  store i8* %36, i8** @timeout, align 8
  br label %63

37:                                               ; preds = %19
  %38 = load i32, i32* @optarg, align 4
  %39 = call i8* @strtoul(i32 %38, i32 0, i32 0)
  store i8* %39, i8** @size, align 8
  br label %63

40:                                               ; preds = %19
  %41 = load i32, i32* @optarg, align 4
  %42 = call i8* @strdup(i32 %41)
  store i8* %42, i8** @user, align 8
  br label %63

43:                                               ; preds = %19
  %44 = load i32, i32* @optarg, align 4
  %45 = call i8* @strdup(i32 %44)
  store i8* %45, i8** @pass, align 8
  br label %63

46:                                               ; preds = %19
  %47 = load i32, i32* @optarg, align 4
  %48 = call i8* @strdup(i32 %47)
  store i8* %48, i8** @host, align 8
  br label %63

49:                                               ; preds = %19
  %50 = load i32, i32* @optarg, align 4
  %51 = call i8* @strtoul(i32 %50, i32 0, i32 0)
  store i8* %51, i8** @port, align 8
  br label %63

52:                                               ; preds = %19
  %53 = load i32, i32* @optarg, align 4
  %54 = call i8* @strtoul(i32 %53, i32 0, i32 0)
  store i8* %54, i8** @heapbase, align 8
  br label %63

55:                                               ; preds = %19
  %56 = load i32, i32* @optarg, align 4
  %57 = call i8* @strtoul(i32 %56, i32 0, i32 0)
  store i8* %57, i8** @scnum, align 8
  br label %63

58:                                               ; preds = %19
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 0
  %61 = load i8*, i8** %60, align 8
  %62 = call i32 @usage(i8* %61)
  br label %63

63:                                               ; preds = %58, %55, %52, %49, %46, %43, %40, %37, %34, %31, %30, %27, %24, %21
  br label %13

64:                                               ; preds = %13
  %65 = load i8*, i8** @host, align 8
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %73

67:                                               ; preds = %64
  %68 = load i64, i64* @detectos, align 8
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %78

70:                                               ; preds = %67
  %71 = load i64, i64* @isbsd, align 8
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %70, %64
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 0
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @usage(i8* %76)
  br label %78

78:                                               ; preds = %73, %70, %67
  %79 = load i8*, i8** @root, align 8
  %80 = icmp ne i8* %79, null
  br i1 %80, label %88, label %81

81:                                               ; preds = %78
  %82 = call i32 (...) @brute_cvsroot()
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %81
  %85 = load i32, i32* @ERR_CVSROOT, align 4
  %86 = call i32 @QUIT(i32 %85)
  br label %87

87:                                               ; preds = %84, %81
  br label %88

88:                                               ; preds = %87, %78
  %89 = load i8*, i8** @user, align 8
  %90 = icmp ne i8* %89, null
  br i1 %90, label %98, label %91

91:                                               ; preds = %88
  %92 = call i32 (...) @brute_username()
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %97, label %94

94:                                               ; preds = %91
  %95 = load i32, i32* @ERR_USERNAME, align 4
  %96 = call i32 @QUIT(i32 %95)
  br label %97

97:                                               ; preds = %94, %91
  br label %98

98:                                               ; preds = %97, %88
  %99 = load i8*, i8** @pass, align 8
  %100 = icmp ne i8* %99, null
  br i1 %100, label %108, label %101

101:                                              ; preds = %98
  %102 = call i32 (...) @brute_password()
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %101
  %105 = load i32, i32* @ERR_PASSWORD, align 4
  %106 = call i32 @QUIT(i32 %105)
  br label %107

107:                                              ; preds = %104, %101
  br label %108

108:                                              ; preds = %107, %98
  %109 = call i32 (...) @do_xploit()
  ret i32 0
}

declare dso_local i32 @setbuf(i32, i32*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i8* @strtoul(i32, i32, i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @brute_cvsroot(...) #1

declare dso_local i32 @QUIT(i32) #1

declare dso_local i32 @brute_username(...) #1

declare dso_local i32 @brute_password(...) #1

declare dso_local i32 @do_xploit(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
