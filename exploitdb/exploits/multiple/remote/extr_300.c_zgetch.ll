; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_zgetch.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_zgetch.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i8*, i32, i8*, i32 }

@zgetch.outbuf = internal global i8* null, align 8
@zgetch.outpos = internal global i32 0, align 4
@zgetch.outlen = internal global i32 0, align 4
@zgetch.rcvbuf = internal global [32768 x i8] zeroinitializer, align 16
@zgetch.dbuf = internal global [4096 x i8] zeroinitializer, align 16
@ERR_READSOCK = common dso_local global i32 0, align 4
@zin = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@Z_PARTIAL_FLUSH = common dso_local global i32 0, align 4
@ERR_INFLATE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @zgetch() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  br label %4

4:                                                ; preds = %56, %0
  %5 = load i32, i32* @zgetch.outpos, align 4
  %6 = load i32, i32* @zgetch.outlen, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %8, label %19

8:                                                ; preds = %4
  %9 = load i32, i32* @zgetch.outlen, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %8
  %12 = load i8*, i8** @zgetch.outbuf, align 8
  %13 = load i32, i32* @zgetch.outpos, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* @zgetch.outpos, align 4
  %15 = sext i32 %13 to i64
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  ret i32 %18

19:                                               ; preds = %8, %4
  %20 = load i8*, i8** @zgetch.outbuf, align 8
  %21 = call i32 @free(i8* %20)
  store i32 0, i32* @zgetch.outlen, align 4
  store i8* null, i8** @zgetch.outbuf, align 8
  %22 = call i32 @read_sock(i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @zgetch.rcvbuf, i64 0, i64 0), i32 32768)
  store i32 %22, i32* %1, align 4
  %23 = load i32, i32* %1, align 4
  %24 = icmp sle i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = load i32, i32* @ERR_READSOCK, align 4
  %27 = call i32 @QUIT(i32 %26)
  br label %28

28:                                               ; preds = %25, %19
  store i8* getelementptr inbounds ([32768 x i8], [32768 x i8]* @zgetch.rcvbuf, i64 0, i64 0), i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 0), align 8
  %29 = load i32, i32* %1, align 4
  store i32 %29, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 1), align 8
  br label %30

30:                                               ; preds = %28, %60
  store i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @zgetch.dbuf, i64 0, i64 0), i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 2), align 8
  store i32 4096, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 3), align 8
  %31 = load i32, i32* @Z_PARTIAL_FLUSH, align 4
  %32 = call i32 @inflate(%struct.TYPE_3__* @zin, i32 %31)
  store i32 %32, i32* %2, align 4
  %33 = load i32, i32* %2, align 4
  switch i32 %33, label %57 [
    i32 128, label %34
    i32 129, label %56
  ]

34:                                               ; preds = %30
  store i32 0, i32* @zgetch.outpos, align 4
  %35 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zin, i32 0, i32 3), align 8
  %36 = sext i32 %35 to i64
  %37 = sub i64 4096, %36
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %3, align 4
  %39 = load i32, i32* %3, align 4
  %40 = load i32, i32* @zgetch.outlen, align 4
  %41 = add nsw i32 %40, %39
  store i32 %41, i32* @zgetch.outlen, align 4
  %42 = load i8*, i8** @zgetch.outbuf, align 8
  %43 = load i32, i32* @zgetch.outlen, align 4
  %44 = call i8* @realloc(i8* %42, i32 %43)
  store i8* %44, i8** @zgetch.outbuf, align 8
  %45 = load i8*, i8** @zgetch.outbuf, align 8
  %46 = load i32, i32* @zgetch.outlen, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = load i32, i32* %3, align 4
  %50 = sext i32 %49 to i64
  %51 = sub i64 0, %50
  %52 = getelementptr inbounds i8, i8* %48, i64 %51
  %53 = ptrtoint i8* %52 to i32
  %54 = load i32, i32* %3, align 4
  %55 = call i32 @memcpy(i32 %53, i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @zgetch.dbuf, i64 0, i64 0), i32 %54)
  br label %60

56:                                               ; preds = %30
  br label %4

57:                                               ; preds = %30
  %58 = load i32, i32* @ERR_INFLATE, align 4
  %59 = call i32 @QUIT(i32 %58)
  br label %60

60:                                               ; preds = %57, %34
  br label %30
}

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @read_sock(i8*, i32) #1

declare dso_local i32 @QUIT(i32) #1

declare dso_local i32 @inflate(%struct.TYPE_3__*, i32) #1

declare dso_local i8* @realloc(i8*, i32) #1

declare dso_local i32 @memcpy(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
