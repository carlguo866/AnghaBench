; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1188.c_Conecta.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1188.c_Conecta.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i64 }
%struct.in_addr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@SOCKET_ERROR = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @Conecta(i8* %0, i16 signext %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  store i8* %0, i8** %4, align 8
  store i16 %1, i16* %5, align 2
  %10 = call i32 @MAKEWORD(i32 2, i32 2)
  %11 = call i32 @WSAStartup(i32 %10, i32* %6)
  %12 = load i32, i32* @AF_INET, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = load i32, i32* @IPPROTO_TCP, align 4
  %15 = call i64 @WSASocket(i32 %12, i32 %13, i32 %14, i32* null, i32 0, i32 0)
  store i64 %15, i64* %7, align 8
  %16 = load i64, i64* %7, align 8
  %17 = load i64, i64* @INVALID_SOCKET, align 8
  %18 = icmp eq i64 %16, %17
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call i32 (...) @WSACleanup()
  store i64 -1, i64* %3, align 8
  br label %48

21:                                               ; preds = %2
  %22 = load i8*, i8** %4, align 8
  %23 = call %struct.hostent* @gethostbyname(i8* %22)
  store %struct.hostent* %23, %struct.hostent** %9, align 8
  %24 = load i16, i16* %5, align 2
  %25 = call i32 @htons(i16 signext %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %25, i32* %26, align 4
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %27, i32* %28, align 4
  %29 = load %struct.hostent*, %struct.hostent** %9, align 8
  %30 = getelementptr inbounds %struct.hostent, %struct.hostent* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = inttoptr i64 %31 to %struct.in_addr*
  %33 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %32, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = call i32 @inet_ntoa(i32 %34)
  %36 = call i32 @inet_addr(i32 %35)
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 0
  store i32 %36, i32* %38, align 4
  %39 = load i64, i64* %7, align 8
  %40 = bitcast %struct.sockaddr_in* %8 to i32*
  %41 = call i64 @WSAConnect(i64 %39, i32* %40, i32 12, i32* null, i32* null, i32* null, i32* null)
  %42 = load i64, i64* @SOCKET_ERROR, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %21
  %45 = call i32 (...) @WSACleanup()
  store i64 -1, i64* %3, align 8
  br label %48

46:                                               ; preds = %21
  %47 = load i64, i64* %7, align 8
  store i64 %47, i64* %3, align 8
  br label %48

48:                                               ; preds = %46, %44, %19
  %49 = load i64, i64* %3, align 8
  ret i64 %49
}

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @WSASocket(i32, i32, i32, i32*, i32, i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @inet_ntoa(i32) #1

declare dso_local i64 @WSAConnect(i64, i32*, i32, i32*, i32*, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
