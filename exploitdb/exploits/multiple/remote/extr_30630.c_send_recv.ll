; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_30630.c_send_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_30630.c_send_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [44 x i8] c"\0AError: socket timeout, no reply received\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_recv(i32 %0, i32* %1, i32 %2, i32* %3, i32 %4, %struct.sockaddr_in* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store i32* %1, i32** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32* %3, i32** %12, align 8
  store i32 %4, i32* %13, align 4
  store %struct.sockaddr_in* %5, %struct.sockaddr_in** %14, align 8
  store i32 %6, i32* %15, align 4
  %18 = load i32*, i32** %10, align 8
  %19 = icmp ne i32* %18, null
  br i1 %19, label %20, label %34

20:                                               ; preds = %7
  %21 = load i32*, i32** %12, align 8
  %22 = icmp ne i32* %21, null
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* %9, align 4
  %25 = load i32*, i32** %10, align 8
  %26 = load i32, i32* %11, align 4
  %27 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %28 = bitcast %struct.sockaddr_in* %27 to %struct.sockaddr*
  %29 = call i64 @sendto(i32 %24, i32* %25, i32 %26, i32 0, %struct.sockaddr* %28, i32 4)
  %30 = icmp slt i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  %32 = call i32 (...) @std_err()
  br label %33

33:                                               ; preds = %31, %23
  store i32 0, i32* %8, align 4
  br label %88

34:                                               ; preds = %20, %7
  %35 = load i32*, i32** %10, align 8
  %36 = icmp ne i32* %35, null
  br i1 %36, label %37, label %71

37:                                               ; preds = %34
  store i32 2, i32* %16, align 4
  br label %38

38:                                               ; preds = %57, %37
  %39 = load i32, i32* %16, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %38
  %42 = load i32, i32* %9, align 4
  %43 = load i32*, i32** %10, align 8
  %44 = load i32, i32* %11, align 4
  %45 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %46 = bitcast %struct.sockaddr_in* %45 to %struct.sockaddr*
  %47 = call i64 @sendto(i32 %42, i32* %43, i32 %44, i32 0, %struct.sockaddr* %46, i32 4)
  %48 = icmp slt i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %41
  %50 = call i32 (...) @std_err()
  br label %51

51:                                               ; preds = %49, %41
  %52 = load i32, i32* %9, align 4
  %53 = call i64 @timeout(i32 %52, i32 1)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %51
  br label %60

56:                                               ; preds = %51
  br label %57

57:                                               ; preds = %56
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %58, -1
  store i32 %59, i32* %16, align 4
  br label %38

60:                                               ; preds = %55, %38
  %61 = load i32, i32* %16, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %70, label %63

63:                                               ; preds = %60
  %64 = load i32, i32* %15, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %63
  store i32 -1, i32* %8, align 4
  br label %88

67:                                               ; preds = %63
  %68 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %69 = call i32 @exit(i32 1) #3
  unreachable

70:                                               ; preds = %60
  br label %77

71:                                               ; preds = %34
  %72 = load i32, i32* %9, align 4
  %73 = call i64 @timeout(i32 %72, i32 3)
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  store i32 -1, i32* %8, align 4
  br label %88

76:                                               ; preds = %71
  br label %77

77:                                               ; preds = %76, %70
  %78 = load i32, i32* %9, align 4
  %79 = load i32*, i32** %12, align 8
  %80 = load i32, i32* %13, align 4
  %81 = call i32 @recvfrom(i32 %78, i32* %79, i32 %80, i32 0, i32* null, i32* null)
  store i32 %81, i32* %17, align 4
  %82 = load i32, i32* %17, align 4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %77
  %85 = call i32 (...) @std_err()
  br label %86

86:                                               ; preds = %84, %77
  %87 = load i32, i32* %17, align 4
  store i32 %87, i32* %8, align 4
  br label %88

88:                                               ; preds = %86, %75, %66, %33
  %89 = load i32, i32* %8, align 4
  ret i32 %89
}

declare dso_local i64 @sendto(i32, i32*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i64 @timeout(i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @recvfrom(i32, i32*, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
