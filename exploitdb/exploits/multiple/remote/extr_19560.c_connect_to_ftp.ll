; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_connect_to_ftp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_connect_to_ftp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i8*, %struct.TYPE_4__*, i32 }
%struct.TYPE_4__ = type { i32 }
%struct.sockaddr_in = type { %struct.TYPE_5__, i8*, i32 }
%struct.TYPE_5__ = type { i64 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@fd = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@tesopt = common dso_local global %struct.TYPE_6__ zeroinitializer, align 8
@.str = private unnamed_addr constant [44 x i8] c"Connected! revlookup is: %s, logging in...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @connect_to_ftp() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.sockaddr_in, align 8
  %3 = alloca %struct.hostent*, align 8
  store i32 1, i32* %1, align 4
  %4 = load i8*, i8** @AF_INET, align 8
  %5 = load i32, i32* @SOCK_STREAM, align 4
  %6 = call i32 @xsocket(i8* %4, i32 %5, i32 0)
  store i32 %6, i32* @fd, align 4
  %7 = load i32, i32* @fd, align 4
  %8 = load i32, i32* @SOL_SOCKET, align 4
  %9 = load i32, i32* @SO_REUSEADDR, align 4
  %10 = call i32 @xsetsockopt(i32 %7, i32 %8, i32 %9, i32* %1, i32 4)
  %11 = call i32 @bzero(%struct.sockaddr_in* %2, i32 24)
  %12 = load i8*, i8** @AF_INET, align 8
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 1
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  %15 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %14, i32 0, i32 0
  store i64 0, i64* %15, align 8
  %16 = load i32, i32* @fd, align 4
  %17 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %18 = call i32 @xbind(i32 %16, %struct.sockaddr* %17, i32 24)
  %19 = load i32, i32* getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @tesopt, i32 0, i32 2), align 8
  %20 = call i32 @htons(i32 %19)
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 2
  store i32 %20, i32* %21, align 8
  %22 = load i8*, i8** @AF_INET, align 8
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 1
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  %25 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %24, i32 0, i32 0
  %26 = load %struct.TYPE_4__*, %struct.TYPE_4__** getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @tesopt, i32 0, i32 1), align 8
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @memcpy(i64* %25, i32 %28, i32 4)
  %30 = load i32, i32* @fd, align 4
  %31 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %32 = call i32 @xconnect(i32 %30, %struct.sockaddr* %31, i32 24)
  %33 = load i8*, i8** getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @tesopt, i32 0, i32 0), align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %47

35:                                               ; preds = %0
  store i32 24, i32* %1, align 4
  %36 = load i32, i32* @fd, align 4
  %37 = bitcast %struct.sockaddr_in* %2 to %struct.sockaddr*
  %38 = call i32 @getsockname(i32 %36, %struct.sockaddr* %37, i32* %1)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %2, i32 0, i32 0
  %40 = bitcast %struct.TYPE_5__* %39 to i8*
  %41 = load i8*, i8** @AF_INET, align 8
  %42 = call %struct.hostent* @gethostbyaddr(i8* %40, i32 8, i8* %41)
  store %struct.hostent* %42, %struct.hostent** %3, align 8
  %43 = load %struct.hostent*, %struct.hostent** %3, align 8
  %44 = getelementptr inbounds %struct.hostent, %struct.hostent* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = call i8* @xstrdup(i32 %45)
  store i8* %46, i8** getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @tesopt, i32 0, i32 0), align 8
  br label %47

47:                                               ; preds = %35, %0
  %48 = load i8*, i8** getelementptr inbounds (%struct.TYPE_6__, %struct.TYPE_6__* @tesopt, i32 0, i32 0), align 8
  %49 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %48)
  ret void
}

declare dso_local i32 @xsocket(i8*, i32, i32) #1

declare dso_local i32 @xsetsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @xbind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i64*, i32, i32) #1

declare dso_local i32 @xconnect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @getsockname(i32, %struct.sockaddr*, i32*) #1

declare dso_local %struct.hostent* @gethostbyaddr(i8*, i32, i8*) #1

declare dso_local i8* @xstrdup(i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
