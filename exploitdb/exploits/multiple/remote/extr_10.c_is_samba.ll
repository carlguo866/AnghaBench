; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_10.c_is_samba.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_10.c_is_samba.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.is_samba.nbtname = private unnamed_addr constant [50 x i8] c"\80\F0\00\10\00\01\00\00\00\00\00\00 CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00\00!\00\01", align 16
@PF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @is_samba(i8* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca [50 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %12 = bitcast [50 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([50 x i8], [50 x i8]* @__const.is_samba.nbtname, i32 0, i32 0), i64 50, i1 false)
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %13 = load i32, i32* @PF_INET, align 4
  %14 = load i32, i32* @SOCK_DGRAM, align 4
  %15 = call i32 @socket(i32 %13, i32 %14, i32 17)
  store i32 %15, i32* %10, align 4
  %16 = icmp sle i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %125

18:                                               ; preds = %2
  %19 = load i32, i32* %10, align 4
  %20 = load i8*, i8** %4, align 8
  %21 = load i64, i64* %5, align 8
  %22 = call i32 @Connect(i32 %19, i8* %20, i32 137, i64 %21)
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = load i32, i32* %10, align 4
  %26 = call i32 @close(i32 %25)
  store i32 -1, i32* %3, align 4
  br label %125

27:                                               ; preds = %18
  %28 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %29 = call i32 @memset(i8* %28, i32 0, i32 1024)
  %30 = load i32, i32* %10, align 4
  %31 = load i64, i64* %5, align 8
  %32 = call i32 @write_timer(i32 %30, i64 %31)
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %43

34:                                               ; preds = %27
  %35 = load i32, i32* %10, align 4
  %36 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %37 = call i64 @write(i32 %35, i8* %36, i32 50)
  %38 = icmp sle i64 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = load i32, i32* %10, align 4
  %41 = call i32 @close(i32 %40)
  store i32 -1, i32* %3, align 4
  br label %125

42:                                               ; preds = %34
  br label %43

43:                                               ; preds = %42, %27
  %44 = load i32, i32* %10, align 4
  %45 = load i64, i64* %5, align 8
  %46 = call i32 @read_timer(i32 %44, i64 %45)
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %122

48:                                               ; preds = %43
  %49 = load i32, i32* %10, align 4
  %50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %51 = call i64 @read(i32 %49, i8* %50, i32 1024)
  %52 = icmp sle i64 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = load i32, i32* %10, align 4
  %55 = call i32 @close(i32 %54)
  store i32 -1, i32* %3, align 4
  br label %125

56:                                               ; preds = %48
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %58 = getelementptr inbounds i8, i8* %57, i64 57
  store i8* %58, i8** %8, align 8
  %59 = load i8*, i8** %8, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 -1
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  store i32 %62, i32* %11, align 4
  br label %63

63:                                               ; preds = %118, %56
  %64 = load i8*, i8** %8, align 8
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %66 = getelementptr inbounds i8, i8* %65, i64 1024
  %67 = icmp ult i8* %64, %66
  br i1 %67, label %68, label %121

68:                                               ; preds = %63
  %69 = load i8*, i8** %8, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 18
  store i8* %70, i8** %8, align 8
  %71 = load i32, i32* %9, align 4
  %72 = load i32, i32* %11, align 4
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %118

74:                                               ; preds = %68
  %75 = load i8*, i8** %8, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 -19
  store i8* %76, i8** %8, align 8
  %77 = load i8*, i8** %8, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %115

82:                                               ; preds = %74
  %83 = load i8*, i8** %8, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 2
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %115

88:                                               ; preds = %82
  %89 = load i8*, i8** %8, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 3
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %115

94:                                               ; preds = %88
  %95 = load i8*, i8** %8, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %115

100:                                              ; preds = %94
  %101 = load i8*, i8** %8, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 5
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %115

106:                                              ; preds = %100
  %107 = load i8*, i8** %8, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 6
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  %113 = load i32, i32* %10, align 4
  %114 = call i32 @close(i32 %113)
  store i32 0, i32* %3, align 4
  br label %125

115:                                              ; preds = %106, %100, %94, %88, %82, %74
  %116 = load i32, i32* %10, align 4
  %117 = call i32 @close(i32 %116)
  store i32 1, i32* %3, align 4
  br label %125

118:                                              ; preds = %68
  %119 = load i32, i32* %9, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %9, align 4
  br label %63

121:                                              ; preds = %63
  br label %122

122:                                              ; preds = %121, %43
  %123 = load i32, i32* %10, align 4
  %124 = call i32 @close(i32 %123)
  store i32 -1, i32* %3, align 4
  br label %125

125:                                              ; preds = %122, %115, %112, %53, %39, %24, %17
  %126 = load i32, i32* %3, align 4
  ret i32 %126
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @Connect(i32, i8*, i32, i64) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @write_timer(i32, i64) #2

declare dso_local i64 @write(i32, i8*, i32) #2

declare dso_local i32 @read_timer(i32, i64) #2

declare dso_local i64 @read(i32, i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
