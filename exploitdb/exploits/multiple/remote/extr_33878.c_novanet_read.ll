; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33878.c_novanet_read.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33878.c_novanet_read.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@NOVANET_PKT_SZ = common dso_local global i32 0, align 4
@NOVANET_TCP_PORT = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"novanet_read: sockami failed\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [45 x i8] c"novanet_read: sock_send returned %d (!= %d)\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"novanet_read: select() - %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [45 x i8] c"novanet_read: sock_recv returned %d (!= %d)\0A\00", align 1
@.str.4 = private unnamed_addr constant [62 x i8] c"novanet_read: select timeout, we may have crashed NovaNET :(\0A\00", align 1
@NOVANET_INT_IDX = common dso_local global i64 0, align 8
@USLEEP_TIME = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i8*, i8*)* @novanet_read to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @novanet_read(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.timeval, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %16 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %12, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %13, align 8
  %20 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %21 = zext i32 %20 to i64
  %22 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %14, align 8
  %23 = call i32 @novanet_read_pkt_init(i8* %19)
  %24 = load i8*, i8** %6, align 8
  %25 = call i64 @NOVANET_CALC_INT(i8* %24)
  %26 = inttoptr i64 %25 to i8*
  store i8* %26, i8** %6, align 8
  %27 = load i8*, i8** %5, align 8
  %28 = load i32, i32* @NOVANET_TCP_PORT, align 4
  %29 = call i32 @sockami(i8* %27, i32 %28)
  store i32 %29, i32* %10, align 4
  %30 = load i32, i32* %10, align 4
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %37

32:                                               ; preds = %3
  %33 = load i32, i32* @stderr, align 4
  %34 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %35 = load i32, i32* @EXIT_FAILURE, align 4
  %36 = call i32 @exit(i32 %35) #4
  unreachable

37:                                               ; preds = %3
  %38 = load i8*, i8** %6, align 8
  %39 = ptrtoint i8* %38 to i32
  %40 = call i32 @NOVANET_SET_INT(i8* %19, i32 %39)
  %41 = load i32, i32* %10, align 4
  %42 = trunc i64 %17 to i32
  %43 = call i32 @sock_send(i32 %41, i8* %19, i32 %42)
  store i32 %43, i32* %11, align 4
  %44 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %45 = icmp ne i32 %43, %44
  br i1 %45, label %46, label %51

46:                                               ; preds = %37
  %47 = load i32, i32* @stderr, align 4
  %48 = load i32, i32* %11, align 4
  %49 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %50 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i32 %48, i32 %49)
  store i32 0, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %99

51:                                               ; preds = %37
  %52 = call i32 @FD_ZERO(i32* %8)
  %53 = load i32, i32* %10, align 4
  %54 = call i32 @FD_SET(i32 %53, i32* %8)
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  store i32 4, i32* %55, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  store i64 0, i64* %56, align 8
  %57 = load i32, i32* %10, align 4
  %58 = add nsw i32 %57, 1
  %59 = call i32 @select(i32 %58, i32* %8, i32* null, i32* null, %struct.timeval* %9)
  store i32 %59, i32* %11, align 4
  %60 = load i32, i32* %11, align 4
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %62, label %69

62:                                               ; preds = %51
  %63 = load i32, i32* @stderr, align 4
  %64 = load i32, i32* @errno, align 4
  %65 = call i8* @strerror(i32 %64)
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %63, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* %65)
  %67 = load i32, i32* @EXIT_FAILURE, align 4
  %68 = call i32 @exit(i32 %67) #4
  unreachable

69:                                               ; preds = %51
  %70 = load i32, i32* %11, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %69
  %73 = load i32, i32* %10, align 4
  %74 = trunc i64 %21 to i32
  %75 = call i32 @sock_recv(i32 %73, i8* %22, i32 %74)
  store i32 %75, i32* %11, align 4
  %76 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %77 = icmp ne i32 %75, %76
  br i1 %77, label %78, label %83

78:                                               ; preds = %72
  %79 = load i32, i32* @stderr, align 4
  %80 = load i32, i32* %11, align 4
  %81 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %82 = call i32 (i32, i8*, ...) @fprintf(i32 %79, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 %80, i32 %81)
  store i32 0, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %99

83:                                               ; preds = %72
  br label %89

84:                                               ; preds = %69
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0))
  %87 = load i32, i32* @EXIT_FAILURE, align 4
  %88 = call i32 @exit(i32 %87) #4
  unreachable

89:                                               ; preds = %83
  br label %90

90:                                               ; preds = %89
  %91 = load i8*, i8** %7, align 8
  %92 = load i64, i64* @NOVANET_INT_IDX, align 8
  %93 = getelementptr inbounds i8, i8* %22, i64 %92
  %94 = call i32 @memcpy(i8* %91, i8* %93, i32 8)
  %95 = load i32, i32* @USLEEP_TIME, align 4
  %96 = call i32 @usleep(i32 %95)
  %97 = load i32, i32* %10, align 4
  %98 = call i32 @close(i32 %97)
  store i32 1, i32* %4, align 4
  store i32 1, i32* %15, align 4
  br label %99

99:                                               ; preds = %90, %78, %46
  %100 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %100)
  %101 = load i32, i32* %4, align 4
  ret i32 %101
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @novanet_read_pkt_init(i8*) #2

declare dso_local i64 @NOVANET_CALC_INT(i8*) #2

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @NOVANET_SET_INT(i8*, i32) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #2

declare dso_local i8* @strerror(i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
