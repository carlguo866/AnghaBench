; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_getpwd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_getpwd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i64 }

@.str = private unnamed_addr constant [5 x i8] c"PWD\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"257 \00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"getpwd failed: incorrect answer: %s\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"no \22's in getpwd.\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"only one \22 in getpwd.\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"pwd too short?\00", align 1
@hostinf = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getpwd() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = call i32 @putserv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  %6 = call i8* @getmsg(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i8* %6, i8** %2, align 8
  %7 = load i8*, i8** %2, align 8
  %8 = call i64 @strncmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* %7, i32 4)
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %0
  %11 = load i8*, i8** %2, align 8
  %12 = call i32 (i32, i8*, ...) @err(i32 0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %11)
  br label %13

13:                                               ; preds = %10, %0
  %14 = load i8*, i8** %2, align 8
  %15 = call i64 @strlen(i8* %14)
  %16 = add nsw i64 %15, 1
  %17 = call i8* @xcalloc(i64 %16, i32 1)
  store i8* %17, i8** %1, align 8
  %18 = load i8*, i8** %2, align 8
  %19 = call i8* @strchr(i8* %18, i8 signext 34)
  store i8* %19, i8** %3, align 8
  %20 = load i8*, i8** %2, align 8
  %21 = call i8* @strrchr(i8* %20, i8 signext 34)
  store i8* %21, i8** %4, align 8
  %22 = load i8*, i8** %3, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %26

24:                                               ; preds = %13
  %25 = call i32 (i32, i8*, ...) @err(i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %13
  %27 = load i8*, i8** %3, align 8
  %28 = load i8*, i8** %4, align 8
  %29 = icmp eq i8* %27, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = call i32 (i32, i8*, ...) @err(i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  br label %32

32:                                               ; preds = %30, %26
  %33 = load i8*, i8** %4, align 8
  %34 = load i8*, i8** %3, align 8
  %35 = ptrtoint i8* %33 to i64
  %36 = ptrtoint i8* %34 to i64
  %37 = sub i64 %35, %36
  %38 = icmp slt i64 %37, 2
  br i1 %38, label %39, label %41

39:                                               ; preds = %32
  %40 = call i32 (i32, i8*, ...) @err(i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %32
  %42 = load i8*, i8** %1, align 8
  %43 = load i8*, i8** %3, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = load i8*, i8** %4, align 8
  %46 = load i8*, i8** %3, align 8
  %47 = ptrtoint i8* %45 to i64
  %48 = ptrtoint i8* %46 to i64
  %49 = sub i64 %47, %48
  %50 = sub nsw i64 %49, 1
  %51 = trunc i64 %50 to i32
  %52 = call i32 @strncat(i8* %42, i8* %44, i32 %51)
  %53 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hostinf, i32 0, i32 0), align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %55, label %58

55:                                               ; preds = %41
  %56 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hostinf, i32 0, i32 0), align 8
  %57 = call i32 @free(i8* %56)
  br label %58

58:                                               ; preds = %55, %41
  %59 = load i8*, i8** %1, align 8
  %60 = call i8* @xstrdup(i8* %59)
  store i8* %60, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hostinf, i32 0, i32 0), align 8
  %61 = load i8*, i8** %1, align 8
  %62 = call i32 @free(i8* %61)
  %63 = load i8*, i8** getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hostinf, i32 0, i32 0), align 8
  %64 = call i64 @strlen(i8* %63)
  store i64 %64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @hostinf, i32 0, i32 1), align 8
  ret void
}

declare dso_local i32 @putserv(i8*) #1

declare dso_local i8* @getmsg(i8*) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @err(i32, i8*, ...) #1

declare dso_local i8* @xcalloc(i64, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i8* @strchr(i8*, i8 signext) #1

declare dso_local i8* @strrchr(i8*, i8 signext) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i8* @xstrdup(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
