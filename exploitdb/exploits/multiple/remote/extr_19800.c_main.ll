; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19800.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19800.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@WINDOW_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"w:h?\00", align 1
@optarg = common dso_local global i8* null, align 8
@optind = common dso_local global i64 0, align 8
@FTPD_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"init_ftpd\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"connection from %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @WINDOW_LEN, align 4
  store i32 %13, i32* %11, align 4
  br label %14

14:                                               ; preds = %30, %2
  %15 = load i32, i32* %4, align 4
  %16 = load i8**, i8*** %5, align 8
  %17 = call i32 @getopt(i32 %15, i8** %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 %17, i32* %6, align 4
  %18 = icmp ne i32 %17, -1
  br i1 %18, label %19, label %31

19:                                               ; preds = %14
  %20 = load i32, i32* %6, align 4
  switch i32 %20, label %28 [
    i32 119, label %21
  ]

21:                                               ; preds = %19
  %22 = load i8*, i8** @optarg, align 8
  %23 = call i32 @atoi(i8* %22)
  store i32 %23, i32* %11, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = call i32 (...) @usage()
  br label %27

27:                                               ; preds = %25, %21
  br label %30

28:                                               ; preds = %19
  %29 = call i32 (...) @usage()
  br label %30

30:                                               ; preds = %28, %27
  br label %14

31:                                               ; preds = %14
  %32 = load i64, i64* @optind, align 8
  %33 = load i32, i32* %4, align 4
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 %34, %32
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %4, align 4
  %37 = load i64, i64* @optind, align 8
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 %37
  store i8** %39, i8*** %5, align 8
  %40 = load i32, i32* %4, align 4
  %41 = icmp ne i32 %40, 2
  br i1 %41, label %42, label %44

42:                                               ; preds = %31
  %43 = call i32 (...) @usage()
  br label %44

44:                                               ; preds = %42, %31
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @resolve_host(i8* %47)
  store i32 %48, i32* %9, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %44
  %51 = call i32 (...) @usage()
  br label %52

52:                                               ; preds = %50, %44
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 1
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 @atoi(i8* %55)
  store i32 %56, i32* %10, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %52
  %59 = call i32 (...) @usage()
  br label %60

60:                                               ; preds = %58, %52
  %61 = load i32, i32* @FTPD_PORT, align 4
  %62 = load i32, i32* %11, align 4
  %63 = call i32 @init_ftpd(i32 %61, i32 %62)
  store i32 %63, i32* %7, align 4
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %67 = call i32 @exit(i32 1) #3
  unreachable

68:                                               ; preds = %60
  %69 = load i32, i32* %9, align 4
  %70 = load i32, i32* %10, align 4
  %71 = load i32, i32* %11, align 4
  %72 = call i32 @print_urls(i32 %69, i32 %70, i32 %71)
  br label %73

73:                                               ; preds = %96, %68
  store i32 4, i32* %6, align 4
  %74 = load i32, i32* %7, align 4
  %75 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %76 = call i32 @accept(i32 %74, %struct.sockaddr* %75, i32* %6)
  store i32 %76, i32* %8, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %80 = call i32 @exit(i32 1) #3
  unreachable

81:                                               ; preds = %73
  %82 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = call i8* @inet_ntoa(i32 %83)
  %85 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %84)
  %86 = call i64 (...) @fork()
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %96

88:                                               ; preds = %81
  %89 = load i32, i32* %7, align 4
  %90 = call i32 @close(i32 %89)
  %91 = load i32, i32* %8, align 4
  %92 = call i32 @do_ftpd(i32 %91)
  %93 = load i32, i32* %8, align 4
  %94 = call i32 @close(i32 %93)
  %95 = call i32 @exit(i32 0) #3
  unreachable

96:                                               ; preds = %81
  %97 = load i32, i32* %8, align 4
  %98 = call i32 @close(i32 %97)
  br label %73
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @usage(...) #1

declare dso_local i32 @resolve_host(i8*) #1

declare dso_local i32 @init_ftpd(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @print_urls(i32, i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @do_ftpd(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
