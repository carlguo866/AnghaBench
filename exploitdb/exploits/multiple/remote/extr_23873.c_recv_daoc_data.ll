; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_23873.c_recv_daoc_data.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_23873.c_recv_daoc_data.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i8, i64, i64, i32 }

@client_sock_state = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @recv_daoc_data() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [2048 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 4), align 8
  %6 = getelementptr inbounds [2048 x i8], [2048 x i8]* %2, i64 0, i64 0
  %7 = call i32 @recv(i32 %5, i8* %6, i32 2048, i32 0)
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp sle i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* %1, align 4
  br label %66

12:                                               ; preds = %0
  store i32 0, i32* %3, align 4
  br label %13

13:                                               ; preds = %61, %12
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %64

17:                                               ; preds = %13
  %18 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 0), align 8
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 0), align 8
  %20 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 0), align 8
  switch i32 %20, label %42 [
    i32 1, label %21
    i32 2, label %22
    i32 3, label %23
    i32 4, label %31
  ]

21:                                               ; preds = %17
  store i8 0, i8* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 1), align 4
  br label %60

22:                                               ; preds = %17
  br label %60

23:                                               ; preds = %17
  %24 = load i32, i32* %3, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [2048 x i8], [2048 x i8]* %2, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 1), align 4
  br label %60

31:                                               ; preds = %17
  %32 = load i32, i32* %3, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2048 x i8], [2048 x i8]* %2, i64 0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = load i8, i8* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 1), align 4
  %38 = zext i8 %37 to i32
  %39 = or i32 %38, %36
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 1), align 4
  %41 = call i32 (...) @malloc_client_payload()
  br label %60

42:                                               ; preds = %17
  %43 = load i32, i32* %3, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [2048 x i8], [2048 x i8]* %2, i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 3), align 8
  %48 = inttoptr i64 %47 to i8*
  %49 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 2), align 8
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  store i8 %46, i8* %50, align 1
  %51 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 2), align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 2), align 8
  %53 = load i64, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 2), align 8
  %54 = load i8, i8* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @client_sock_state, i32 0, i32 1), align 4
  %55 = zext i8 %54 to i64
  %56 = icmp eq i64 %53, %55
  br i1 %56, label %57, label %59

57:                                               ; preds = %42
  %58 = call i32 (...) @process_recvd_packet()
  br label %59

59:                                               ; preds = %57, %42
  br label %60

60:                                               ; preds = %59, %31, %23, %22, %21
  br label %61

61:                                               ; preds = %60
  %62 = load i32, i32* %3, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %3, align 4
  br label %13

64:                                               ; preds = %13
  %65 = load i32, i32* %4, align 4
  store i32 %65, i32* %1, align 4
  br label %66

66:                                               ; preds = %64, %10
  %67 = load i32, i32* %1, align 4
  ret i32 %67
}

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @malloc_client_payload(...) #1

declare dso_local i32 @process_recvd_packet(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
