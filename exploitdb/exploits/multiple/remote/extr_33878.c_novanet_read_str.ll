; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33878.c_novanet_read_str.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33878.c_novanet_read_str.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NOVANET_READ_SZ = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*, i8*, i32)* @novanet_read_str to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @novanet_read_str(i8* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %14 = load i32, i32* @NOVANET_READ_SZ, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %9, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %10, align 8
  store i32 0, i32* %13, align 4
  %18 = load i8*, i8** %7, align 8
  store i8* %18, i8** %11, align 8
  %19 = load i8*, i8** %6, align 8
  store i8* %19, i8** %12, align 8
  br label %20

20:                                               ; preds = %42, %4
  %21 = load i8*, i8** %5, align 8
  %22 = load i8*, i8** %12, align 8
  %23 = bitcast i8* %17 to i8**
  %24 = call i64 @novanet_read(i8* %21, i8* %22, i8** %23)
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %20
  br label %47

27:                                               ; preds = %20
  %28 = load i8*, i8** %11, align 8
  %29 = call i32 @strncpy(i8* %28, i8* %17, i32 4)
  %30 = bitcast i8* %17 to i32*
  %31 = load i32, i32* %30, align 16
  %32 = call i64 @HAS_NULL(i32 %31)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  br label %47

35:                                               ; preds = %27
  %36 = load i8*, i8** %11, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 4
  store i8* %37, i8** %11, align 8
  %38 = load i8*, i8** %12, align 8
  %39 = getelementptr i8, i8* %38, i64 4
  store i8* %39, i8** %12, align 8
  %40 = load i32, i32* %13, align 4
  %41 = add nsw i32 %40, 4
  store i32 %41, i32* %13, align 4
  br label %42

42:                                               ; preds = %35
  %43 = load i32, i32* %13, align 4
  %44 = load i32, i32* %8, align 4
  %45 = sub nsw i32 %44, 5
  %46 = icmp slt i32 %43, %45
  br i1 %46, label %20, label %47

47:                                               ; preds = %42, %34, %26
  %48 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %48)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @novanet_read(i8*, i8*, i8**) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i64 @HAS_NULL(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
