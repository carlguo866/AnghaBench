; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_zflush.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_zflush.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i64, i32, i8*, i32 }

@zflush.outbuf = internal global [65536 x i8] zeroinitializer, align 16
@zbuf = common dso_local global i32 0, align 4
@zout = common dso_local global %struct.TYPE_3__ zeroinitializer, align 8
@zbufpos = common dso_local global i64 0, align 8
@Z_FINISH = common dso_local global i32 0, align 4
@Z_PARTIAL_FLUSH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"zflush : deflate failed !\0A\00", align 1
@zsent = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @zflush(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* @zbuf, align 4
  store i32 %3, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 3), align 8
  %4 = load i64, i64* @zbufpos, align 8
  store i64 %4, i64* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 0), align 8
  br label %5

5:                                                ; preds = %37, %1
  store i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zflush.outbuf, i64 0, i64 0), i8** getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 2), align 8
  store i32 65536, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 1), align 8
  %6 = load i32, i32* %2, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %5
  %9 = load i32, i32* @Z_FINISH, align 4
  br label %12

10:                                               ; preds = %5
  %11 = load i32, i32* @Z_PARTIAL_FLUSH, align 4
  br label %12

12:                                               ; preds = %10, %8
  %13 = phi i32 [ %9, %8 ], [ %11, %10 ]
  %14 = call i32 @deflate(%struct.TYPE_3__* @zout, i32 %13)
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = call i32 @QUIT(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  br label %18

18:                                               ; preds = %16, %12
  %19 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 1), align 8
  %20 = sext i32 %19 to i64
  %21 = sub i64 65536, %20
  %22 = load i32, i32* @zsent, align 4
  %23 = sext i32 %22 to i64
  %24 = add i64 %23, %21
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* @zsent, align 4
  %26 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 1), align 8
  %27 = sext i32 %26 to i64
  %28 = sub i64 65536, %27
  %29 = trunc i64 %28 to i32
  %30 = call i32 @write_sock(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zflush.outbuf, i64 0, i64 0), i32 %29)
  br label %31

31:                                               ; preds = %18
  %32 = load i32, i32* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 1), align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %31
  %35 = load i64, i64* getelementptr inbounds (%struct.TYPE_3__, %struct.TYPE_3__* @zout, i32 0, i32 0), align 8
  %36 = icmp ne i64 %35, 0
  br label %37

37:                                               ; preds = %34, %31
  %38 = phi i1 [ false, %31 ], [ %36, %34 ]
  br i1 %38, label %5, label %39

39:                                               ; preds = %37
  store i64 0, i64* @zbufpos, align 8
  ret void
}

declare dso_local i32 @deflate(%struct.TYPE_3__*, i32) #1

declare dso_local i32 @QUIT(i8*) #1

declare dso_local i32 @write_sock(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
