; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_usage.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sploitdata = type { i8*, i64 }

@.str = private unnamed_addr constant [574 x i8] c"-h              - this help\0A-s <server>     - specify server\0A-p <port>       - destination port\0A-f <sourceport> - source port\0A-v(v)           - increase verboseness, use twice for full verboseness\0A-u <user>       - user name to use for login\0A-P <pass>       - password to use for login\0A-c <startdir>   - directory to cwd to after login\0A-d <writedir>   - directory to test writeability with\0A-r <revhost>    - revlookup this host sees you with\0A-D <dirlen>     - specifies the directory length\0A-T              - use test shellcode (prints success, spawns no shell)\0A-t <type>:\0A\00", align 1
@spdata = common dso_local global %struct.sploitdata* null, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"%s-%s %3d %s%s-%s\0A%s\0A%s\0A\00", align 1
@C_BOLD = common dso_local global i8* null, align 8
@C_GREEN = common dso_local global i8* null, align 8
@C_NORM = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [19 x i8] c"%s-%s EOO %s%s-%s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @usage(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.sploitdata*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %4, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([574 x i8], [574 x i8]* @.str, i64 0, i64 0))
  %6 = load %struct.sploitdata*, %struct.sploitdata** @spdata, align 8
  store %struct.sploitdata* %6, %struct.sploitdata** %3, align 8
  br label %7

7:                                                ; preds = %27, %1
  %8 = load %struct.sploitdata*, %struct.sploitdata** %3, align 8
  %9 = getelementptr inbounds %struct.sploitdata, %struct.sploitdata* %8, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %7
  %13 = load i8*, i8** @C_BOLD, align 8
  %14 = load i8*, i8** @C_GREEN, align 8
  %15 = load i32, i32* %4, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %4, align 4
  %17 = load i8*, i8** @C_NORM, align 8
  %18 = load i8*, i8** @C_BOLD, align 8
  %19 = load i8*, i8** @C_NORM, align 8
  %20 = load %struct.sploitdata*, %struct.sploitdata** %3, align 8
  %21 = getelementptr inbounds %struct.sploitdata, %struct.sploitdata* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load %struct.sploitdata*, %struct.sploitdata** %3, align 8
  %24 = getelementptr inbounds %struct.sploitdata, %struct.sploitdata* %23, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %13, i8* %14, i32 %15, i8* %17, i8* %18, i8* %19, i8* %22, i64 %25)
  br label %27

27:                                               ; preds = %12
  %28 = load %struct.sploitdata*, %struct.sploitdata** %3, align 8
  %29 = getelementptr inbounds %struct.sploitdata, %struct.sploitdata* %28, i32 1
  store %struct.sploitdata* %29, %struct.sploitdata** %3, align 8
  br label %7

30:                                               ; preds = %7
  %31 = load i8*, i8** @C_BOLD, align 8
  %32 = load i8*, i8** @C_GREEN, align 8
  %33 = load i8*, i8** @C_NORM, align 8
  %34 = load i8*, i8** @C_BOLD, align 8
  %35 = load i8*, i8** @C_NORM, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %32, i8* %33, i8* %34, i8* %35)
  %37 = load i32, i32* @EXIT_FAILURE, align 4
  %38 = call i32 @exit(i32 %37) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
