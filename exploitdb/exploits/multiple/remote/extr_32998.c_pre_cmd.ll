; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_pre_cmd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_pre_cmd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"EHLO test\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"STARTTLS\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"CAPA\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"STLS\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"a001 CAPB\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"a002 STARTTLS\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"[ error in malloc()\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"[ banner: %s\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @pre_cmd(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %8, align 4
  %12 = load i32, i32* %5, align 4
  switch i32 %12, label %16 [
    i32 0, label %13
    i32 1, label %14
    i32 2, label %15
  ]

13:                                               ; preds = %3
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %11, align 8
  br label %17

14:                                               ; preds = %3
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8** %10, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8** %11, align 8
  br label %17

15:                                               ; preds = %3
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8** %10, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i8** %11, align 8
  br label %17

16:                                               ; preds = %3
  store i32 1, i32* %8, align 4
  br label %17

17:                                               ; preds = %16, %15, %14, %13
  %18 = load i32, i32* %8, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %67

20:                                               ; preds = %17
  %21 = call i8* @malloc(i32 2049)
  store i8* %21, i8** %9, align 8
  %22 = load i8*, i8** %9, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  %26 = call i32 @exit(i32 0) #3
  unreachable

27:                                               ; preds = %20
  %28 = load i8*, i8** %9, align 8
  %29 = call i32 @memset(i8* %28, i32 0, i32 2049)
  %30 = load i32, i32* %4, align 4
  %31 = load i8*, i8** %9, align 8
  %32 = call i32 @read(i32 %30, i8* %31, i32 2048)
  store i32 %32, i32* %7, align 4
  %33 = load i8*, i8** %9, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* %33)
  %35 = load i32, i32* %4, align 4
  %36 = load i8*, i8** %10, align 8
  %37 = load i8*, i8** %10, align 8
  %38 = call i32 @strlen(i8* %37)
  %39 = call i32 @send(i32 %35, i8* %36, i32 %38, i32 0)
  %40 = load i8*, i8** %9, align 8
  %41 = call i32 @memset(i8* %40, i32 0, i32 2049)
  %42 = load i32, i32* %4, align 4
  %43 = load i8*, i8** %9, align 8
  %44 = call i32 @read(i32 %42, i8* %43, i32 2048)
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %6, align 4
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %50

47:                                               ; preds = %27
  %48 = load i8*, i8** %9, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %48)
  br label %50

50:                                               ; preds = %47, %27
  %51 = load i32, i32* %4, align 4
  %52 = load i8*, i8** %11, align 8
  %53 = load i8*, i8** %11, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i32 @send(i32 %51, i8* %52, i32 %54, i32 0)
  %56 = load i8*, i8** %9, align 8
  %57 = call i32 @memset(i8* %56, i32 0, i32 2049)
  %58 = load i32, i32* %4, align 4
  %59 = load i8*, i8** %9, align 8
  %60 = call i32 @read(i32 %58, i8* %59, i32 2048)
  store i32 %60, i32* %7, align 4
  %61 = load i32, i32* %6, align 4
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %63, label %66

63:                                               ; preds = %50
  %64 = load i8*, i8** %9, align 8
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %64)
  br label %66

66:                                               ; preds = %63, %50
  br label %67

67:                                               ; preds = %66, %17
  %68 = load i32, i32* %4, align 4
  ret i32 %68
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
