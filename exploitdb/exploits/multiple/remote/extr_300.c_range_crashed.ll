; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_range_crashed.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_range_crashed.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DUMMY_ADDR = common dso_local global i32 0, align 4
@cur_num = common dso_local global i32 0, align 4
@CVS_FLUSH = common dso_local global i32 0, align 4
@CVS_OK = common dso_local global i32 0, align 4
@CVS_UNKNOW = common dso_local global i32 0, align 4
@CVS_ERROR = common dso_local global i32 0, align 4
@CVS_ERROR2 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @range_crashed(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %7 = call i32 (...) @cvs_conn()
  %8 = load i32, i32* @DUMMY_ADDR, align 4
  %9 = load i32, i32* @DUMMY_ADDR, align 4
  %10 = load i32, i32* @cur_num, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* @cur_num, align 4
  %12 = call i32 @build_chunk(i32 %8, i32 %9, i32 %10)
  %13 = call i32 @nprintf(i32 %12)
  br label %14

14:                                               ; preds = %38, %2
  %15 = load i32, i32* %4, align 4
  %16 = load i32, i32* %5, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %41

18:                                               ; preds = %14
  %19 = load i32, i32* %4, align 4
  %20 = call i32 @SET_FD(i32 %19)
  %21 = call i32 @bad_addr(i32 %20)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %18
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 4
  %26 = call i32 @SET_BK(i32 %25)
  %27 = call i32 @bad_addr(i32 %26)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %23
  %30 = load i32, i32* %4, align 4
  %31 = load i32, i32* %4, align 4
  %32 = add nsw i32 %31, 4
  %33 = load i32, i32* @cur_num, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* @cur_num, align 4
  %35 = call i32 @build_chunk(i32 %30, i32 %32, i32 %33)
  %36 = call i32 @nprintf(i32 %35)
  br label %37

37:                                               ; preds = %29, %23, %18
  br label %38

38:                                               ; preds = %37
  %39 = load i32, i32* %4, align 4
  %40 = add nsw i32 %39, 8
  store i32 %40, i32* %4, align 4
  br label %14

41:                                               ; preds = %14
  %42 = call i32 (...) @memcpy_flush()
  %43 = load i32, i32* @CVS_FLUSH, align 4
  %44 = call i32 @nprintf(i32 %43)
  %45 = call i8* (...) @flush_sock()
  store i8* %45, i8** %6, align 8
  %46 = load i8*, i8** %6, align 8
  %47 = load i32, i32* @CVS_OK, align 4
  %48 = call i64 @strstr(i8* %46, i32 %47)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %65, label %50

50:                                               ; preds = %41
  %51 = load i8*, i8** %6, align 8
  %52 = load i32, i32* @CVS_UNKNOW, align 4
  %53 = call i64 @strstr(i8* %51, i32 %52)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %50
  %56 = load i8*, i8** %6, align 8
  %57 = load i32, i32* @CVS_ERROR, align 4
  %58 = call i64 @strstr(i8* %56, i32 %57)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %55
  %61 = load i8*, i8** %6, align 8
  %62 = load i32, i32* @CVS_ERROR2, align 4
  %63 = call i64 @strstr(i8* %61, i32 %62)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %60, %55, %50, %41
  %66 = call i32 (...) @nclose()
  store i32 0, i32* %3, align 4
  br label %69

67:                                               ; preds = %60
  %68 = call i32 (...) @nclose()
  store i32 1, i32* %3, align 4
  br label %69

69:                                               ; preds = %67, %65
  %70 = load i32, i32* %3, align 4
  ret i32 %70
}

declare dso_local i32 @cvs_conn(...) #1

declare dso_local i32 @nprintf(i32) #1

declare dso_local i32 @build_chunk(i32, i32, i32) #1

declare dso_local i32 @bad_addr(i32) #1

declare dso_local i32 @SET_FD(i32) #1

declare dso_local i32 @SET_BK(i32) #1

declare dso_local i32 @memcpy_flush(...) #1

declare dso_local i8* @flush_sock(...) #1

declare dso_local i64 @strstr(i8*, i32) #1

declare dso_local i32 @nclose(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
