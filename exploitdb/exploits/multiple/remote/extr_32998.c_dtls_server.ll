; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_dtls_server.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_dtls_server.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { i32, %struct.TYPE_10__*, i32* }
%struct.TYPE_10__ = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"[!] cannot create socket\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"bind()\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"[ error in malloc()\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"./server.crt\00", align 1
@SSL_FILETYPE_PEM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"./server.key\00", align 1
@.str.6 = private unnamed_addr constant [66 x i8] c"[!] FATAL: private key does not match the certificate public key\0A\00", align 1
@BIO_NOCLOSE = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [27 x i8] c"[ SSL connection using %s\0A\00", align 1
@SSL_TLSEXT_HB_ENABLED = common dso_local global i32 0, align 4
@SSL_TLSEXT_HB_DONT_SEND_REQUESTS = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [60 x i8] c"[ warning: heartbeat extension is unsupported (try anyway)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.TYPE_9__* @dtls_server(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_9__*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %16 = call i8* @malloc(i32 4096)
  store i8* %16, i8** %9, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = call %struct.hostent* @gethostbyname(i8* %17)
  store %struct.hostent* %18, %struct.hostent** %11, align 8
  %19 = icmp eq %struct.hostent* %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %3
  %21 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @exit(i32 1) #4
  unreachable

23:                                               ; preds = %3
  %24 = load i32, i32* @AF_INET, align 4
  %25 = load i32, i32* @SOCK_DGRAM, align 4
  %26 = load i32, i32* @IPPROTO_UDP, align 4
  %27 = call i32 @socket(i32 %24, i32 %25, i32 %26)
  store i32 %27, i32* %4, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 0) #4
  unreachable

33:                                               ; preds = %23
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @htons(i32 %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %40 = load %struct.hostent*, %struct.hostent** %11, align 8
  %41 = getelementptr inbounds %struct.hostent, %struct.hostent* %40, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = inttoptr i64 %42 to %struct.in_addr*
  %44 = bitcast %struct.in_addr* %39 to i8*
  %45 = bitcast %struct.in_addr* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %45, i64 4, i1 false)
  %46 = load i32, i32* %4, align 4
  %47 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %48 = call i64 @bind(i32 %46, %struct.sockaddr* %47, i32 12)
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %33
  %51 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %33
  %54 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %55 = icmp eq %struct.TYPE_9__* %54, null
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %58 = call i32 @exit(i32 0) #4
  unreachable

59:                                               ; preds = %53
  %60 = load i8*, i8** %9, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %64 = call i32 @exit(i32 0) #4
  unreachable

65:                                               ; preds = %59
  %66 = load i8*, i8** %9, align 8
  %67 = call i32 @memset(i8* %66, i32 0, i32 4096)
  %68 = call i8* @malloc(i32 24)
  %69 = bitcast i8* %68 to %struct.TYPE_9__*
  store %struct.TYPE_9__* %69, %struct.TYPE_9__** %8, align 8
  %70 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %71 = icmp eq %struct.TYPE_9__* %70, null
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %74 = call i32 @exit(i32 0) #4
  unreachable

75:                                               ; preds = %65
  %76 = load i32, i32* %4, align 4
  %77 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %78 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %77, i32 0, i32 0
  store i32 %76, i32* %78, align 8
  %79 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %80 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %79, i32 0, i32 1
  store %struct.TYPE_10__* null, %struct.TYPE_10__** %80, align 8
  %81 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %82 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %81, i32 0, i32 2
  store i32* null, i32** %82, align 8
  %83 = call i32 (...) @DTLSv1_server_method()
  %84 = call i32* @SSL_CTX_new(i32 %83)
  %85 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %86 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %85, i32 0, i32 2
  store i32* %84, i32** %86, align 8
  %87 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %88 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %87, i32 0, i32 2
  %89 = load i32*, i32** %88, align 8
  %90 = call i32 @SSL_CTX_set_read_ahead(i32* %89, i32 1)
  %91 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %92 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %91, i32 0, i32 2
  %93 = load i32*, i32** %92, align 8
  %94 = icmp eq i32* %93, null
  br i1 %94, label %95, label %98

95:                                               ; preds = %75
  %96 = load i32, i32* @stderr, align 4
  %97 = call i32 @ERR_print_errors_fp(i32 %96)
  br label %98

98:                                               ; preds = %95, %75
  %99 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %100 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %99, i32 0, i32 2
  %101 = load i32*, i32** %100, align 8
  %102 = call i32 @SSL_CTX_SRP_CTX_init(i32* %101)
  %103 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %104 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %103, i32 0, i32 2
  %105 = load i32*, i32** %104, align 8
  %106 = load i32, i32* @SSL_FILETYPE_PEM, align 4
  %107 = call i32 @SSL_CTX_use_certificate_file(i32* %105, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i32 %106)
  %108 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %109 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %108, i32 0, i32 2
  %110 = load i32*, i32** %109, align 8
  %111 = load i32, i32* @SSL_FILETYPE_PEM, align 4
  %112 = call i32 @SSL_CTX_use_PrivateKey_file(i32* %110, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 %111)
  %113 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %114 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %113, i32 0, i32 2
  %115 = load i32*, i32** %114, align 8
  %116 = call i32 @SSL_CTX_check_private_key(i32* %115)
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %121, label %118

118:                                              ; preds = %98
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.6, i64 0, i64 0))
  %120 = call i32 @exit(i32 0) #4
  unreachable

121:                                              ; preds = %98
  %122 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %123 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %122, i32 0, i32 2
  %124 = load i32*, i32** %123, align 8
  %125 = call %struct.TYPE_10__* @SSL_new(i32* %124)
  %126 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %127 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %126, i32 0, i32 1
  store %struct.TYPE_10__* %125, %struct.TYPE_10__** %127, align 8
  %128 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %129 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %128, i32 0, i32 1
  %130 = load %struct.TYPE_10__*, %struct.TYPE_10__** %129, align 8
  %131 = icmp eq %struct.TYPE_10__* %130, null
  br i1 %131, label %132, label %135

132:                                              ; preds = %121
  %133 = load i32, i32* @stderr, align 4
  %134 = call i32 @ERR_print_errors_fp(i32 %133)
  br label %135

135:                                              ; preds = %132, %121
  %136 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %137 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %136, i32 0, i32 1
  %138 = load %struct.TYPE_10__*, %struct.TYPE_10__** %137, align 8
  %139 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %140 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %139, i32 0, i32 0
  %141 = load i32, i32* %140, align 8
  %142 = call i32 @SSL_set_fd(%struct.TYPE_10__* %138, i32 %141)
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %147, label %144

144:                                              ; preds = %135
  %145 = load i32, i32* @stderr, align 4
  %146 = call i32 @ERR_print_errors_fp(i32 %145)
  br label %147

147:                                              ; preds = %144, %135
  %148 = load i32, i32* %4, align 4
  %149 = load i32, i32* @BIO_NOCLOSE, align 4
  %150 = call i32* @BIO_new_dgram(i32 %148, i32 %149)
  store i32* %150, i32** %14, align 8
  %151 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %152 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %151, i32 0, i32 1
  %153 = load %struct.TYPE_10__*, %struct.TYPE_10__** %152, align 8
  %154 = load i32*, i32** %14, align 8
  %155 = load i32*, i32** %14, align 8
  %156 = call i32 @SSL_set_bio(%struct.TYPE_10__* %153, i32* %154, i32* %155)
  %157 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %158 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %157, i32 0, i32 1
  %159 = load %struct.TYPE_10__*, %struct.TYPE_10__** %158, align 8
  %160 = call i32 @SSL_set_accept_state(%struct.TYPE_10__* %159)
  %161 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %162 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %161, i32 0, i32 1
  %163 = load %struct.TYPE_10__*, %struct.TYPE_10__** %162, align 8
  %164 = call i32 @SSL_accept(%struct.TYPE_10__* %163)
  store i32 %164, i32* %15, align 4
  %165 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %166 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %165, i32 0, i32 1
  %167 = load %struct.TYPE_10__*, %struct.TYPE_10__** %166, align 8
  %168 = call i8* @SSL_get_cipher(%struct.TYPE_10__* %167)
  %169 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i8* %168)
  %170 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %171 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %170, i32 0, i32 1
  %172 = load %struct.TYPE_10__*, %struct.TYPE_10__** %171, align 8
  %173 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %172, i32 0, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = icmp ne i32 %174, 0
  %176 = xor i1 %175, true
  %177 = zext i1 %176 to i32
  %178 = load i32, i32* @SSL_TLSEXT_HB_ENABLED, align 4
  %179 = and i32 %177, %178
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %190, label %181

181:                                              ; preds = %147
  %182 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  %183 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %182, i32 0, i32 1
  %184 = load %struct.TYPE_10__*, %struct.TYPE_10__** %183, align 8
  %185 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %184, i32 0, i32 0
  %186 = load i32, i32* %185, align 4
  %187 = load i32, i32* @SSL_TLSEXT_HB_DONT_SEND_REQUESTS, align 4
  %188 = and i32 %186, %187
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %190, label %192

190:                                              ; preds = %181, %147
  %191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.8, i64 0, i64 0))
  br label %192

192:                                              ; preds = %190, %181
  %193 = load %struct.TYPE_9__*, %struct.TYPE_9__** %8, align 8
  ret %struct.TYPE_9__* %193
}

declare dso_local i8* @malloc(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32* @SSL_CTX_new(i32) #1

declare dso_local i32 @DTLSv1_server_method(...) #1

declare dso_local i32 @SSL_CTX_set_read_ahead(i32*, i32) #1

declare dso_local i32 @ERR_print_errors_fp(i32) #1

declare dso_local i32 @SSL_CTX_SRP_CTX_init(i32*) #1

declare dso_local i32 @SSL_CTX_use_certificate_file(i32*, i8*, i32) #1

declare dso_local i32 @SSL_CTX_use_PrivateKey_file(i32*, i8*, i32) #1

declare dso_local i32 @SSL_CTX_check_private_key(i32*) #1

declare dso_local %struct.TYPE_10__* @SSL_new(i32*) #1

declare dso_local i32 @SSL_set_fd(%struct.TYPE_10__*, i32) #1

declare dso_local i32* @BIO_new_dgram(i32, i32) #1

declare dso_local i32 @SSL_set_bio(%struct.TYPE_10__*, i32*, i32*) #1

declare dso_local i32 @SSL_set_accept_state(%struct.TYPE_10__*) #1

declare dso_local i32 @SSL_accept(%struct.TYPE_10__*) #1

declare dso_local i8* @SSL_get_cipher(%struct.TYPE_10__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
