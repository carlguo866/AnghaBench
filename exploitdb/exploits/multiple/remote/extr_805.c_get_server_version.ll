; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_get_server_version.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_get_server_version.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i64, i32 }
%struct.sockaddr = type { i32 }

@VERSION_CHECKER = common dso_local global i8* null, align 8
@CHECKELOG = common dso_local global i8* null, align 8
@INBUF = common dso_local global i32 0, align 4
@TIMEOUT = common dso_local global i32 0, align 4
@MSGVER = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"setsockopt\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"recv\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [32 x i8] c"[-]Can not receive information\0A\00", align 1
@LINEBUFSIZ = common dso_local global i32 0, align 4
@debug = common dso_local global i32 0, align 4
@NOTELOG = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_server_version(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.timeval, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %25 = load i8*, i8** @VERSION_CHECKER, align 8
  store i8* %25, i8** %5, align 8
  %26 = load i8*, i8** @CHECKELOG, align 8
  store i8* %26, i8** %6, align 8
  store i32 1, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %27 = load i32, i32* @INBUF, align 4
  %28 = zext i32 %27 to i64
  %29 = call i8* @llvm.stacksave()
  store i8* %29, i8** %10, align 8
  %30 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %11, align 8
  %31 = load i32, i32* @TIMEOUT, align 4
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 1
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  store i64 0, i64* %33, align 8
  %34 = load i8*, i8** @MSGVER, align 8
  %35 = call i32 @PRINTINFO(i8* %34, i32 1)
  %36 = load i32, i32* @AF_INET, align 4
  %37 = load i32, i32* @SOCK_STREAM, align 4
  %38 = load i32, i32* @IPPROTO_TCP, align 4
  %39 = call i32 @socket(i32 %36, i32 %37, i32 %38)
  store i32 %39, i32* %12, align 4
  %40 = load i32, i32* %12, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %2
  %43 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %44 = load i32, i32* @EXIT_FAILURE, align 4
  %45 = call i32 @exit(i32 %44) #4
  unreachable

46:                                               ; preds = %2
  %47 = load i32, i32* %12, align 4
  %48 = load i32, i32* @SOL_SOCKET, align 4
  %49 = load i32, i32* @SO_REUSEADDR, align 4
  %50 = call i32 @setsockopt(i32 %47, i32 %48, i32 %49, i32* %7, i32 4)
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %54 = call i32 @exit(i32 1) #4
  unreachable

55:                                               ; preds = %46
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 3
  %57 = call i32 @memset(i32* %56, i8 signext 0, i32 8)
  %58 = load i32, i32* @AF_INET, align 4
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %58, i32* %59, align 4
  %60 = load i16, i16* %4, align 2
  %61 = call i32 @htons(i16 zeroext %60)
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i32 %61, i32* %62, align 4
  %63 = load i8*, i8** %3, align 8
  %64 = call i32 @get_host_ip(i8* %63)
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  %66 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %65, i32 0, i32 0
  store i32 %64, i32* %66, align 4
  %67 = load i32, i32* %12, align 4
  %68 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %69 = call i32 @connect(i32 %67, %struct.sockaddr* %68, i32 4)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %71, label %74

71:                                               ; preds = %55
  %72 = call i32 @err(i32 1, i32* null)
  %73 = call i32 @exit(i32 1) #4
  unreachable

74:                                               ; preds = %55
  %75 = call i32 @FD_ZERO(i32* %15)
  %76 = load i32, i32* %12, align 4
  %77 = call i32 @FD_SET(i32 %76, i32* %15)
  %78 = load i32, i32* %12, align 4
  %79 = load i8*, i8** %6, align 8
  %80 = load i8*, i8** %6, align 8
  %81 = call i32 @strlen(i8* %80)
  %82 = call i32 @send(i32 %78, i8* %79, i32 %81, i32 0)
  store i32 %82, i32* %9, align 4
  %83 = icmp eq i32 %82, -1
  br i1 %83, label %84, label %87

84:                                               ; preds = %74
  %85 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %86 = call i32 @exit(i32 1) #4
  unreachable

87:                                               ; preds = %74
  %88 = load i32, i32* %12, align 4
  %89 = add nsw i32 %88, 1
  %90 = call i32 @select(i32 %89, i32* %15, i32* null, i32* null, %struct.timeval* %16)
  store i32 %90, i32* %13, align 4
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %87
  %93 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %94 = call i32 @exit(i32 1) #4
  unreachable

95:                                               ; preds = %87
  %96 = load i32, i32* %12, align 4
  %97 = call i64 @FD_ISSET(i32 %96, i32* %15)
  %98 = icmp ne i64 %97, 0
  br i1 %98, label %99, label %171

99:                                               ; preds = %95
  %100 = load i32, i32* %12, align 4
  %101 = sub i64 %28, 1
  %102 = trunc i64 %101 to i32
  %103 = call i32 @recv(i32 %100, i8* %30, i32 %102, i32 0)
  store i32 %103, i32* %8, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %108

105:                                              ; preds = %99
  %106 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %107 = call i32 @exit(i32 1) #4
  unreachable

108:                                              ; preds = %99
  %109 = load i32, i32* %8, align 4
  %110 = icmp sle i32 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %108
  %112 = load i32, i32* @stderr, align 4
  %113 = call i32 @fprintf(i32 %112, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %114 = call i32 @exit(i32 1) #4
  unreachable

115:                                              ; preds = %108
  br label %116

116:                                              ; preds = %115
  %117 = load i32, i32* %8, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %30, i64 %118
  store i8 0, i8* %119, align 1
  %120 = load i32, i32* @LINEBUFSIZ, align 4
  %121 = zext i32 %120 to i64
  %122 = call i8* @llvm.stacksave()
  store i8* %122, i8** %18, align 8
  %123 = alloca i8, i64 %121, align 16
  store i64 %121, i64* %19, align 8
  %124 = load i32, i32* @LINEBUFSIZ, align 4
  %125 = zext i32 %124 to i64
  %126 = alloca i8, i64 %125, align 16
  store i64 %125, i64* %20, align 8
  %127 = trunc i64 %121 to i32
  %128 = call i32 @bzero(i8* %123, i32 %127)
  %129 = trunc i64 %125 to i32
  %130 = call i32 @bzero(i8* %126, i32 %129)
  %131 = getelementptr inbounds i8, i8* %123, i64 0
  store i8* %131, i8** %21, align 8
  %132 = getelementptr inbounds i8, i8* %126, i64 0
  store i8* %132, i8** %22, align 8
  %133 = load i8*, i8** %5, align 8
  %134 = call i8* @strstr(i8* %30, i8* %133)
  store i8* %134, i8** %23, align 8
  %135 = icmp ne i8* %134, null
  br i1 %135, label %136, label %166

136:                                              ; preds = %116
  %137 = load i8*, i8** %21, align 8
  %138 = load i8*, i8** %23, align 8
  %139 = call i32 @strncpy(i8* %137, i8* %138, i32 500)
  store i32 0, i32* %17, align 4
  br label %140

140:                                              ; preds = %158, %136
  %141 = load i8*, i8** %21, align 8
  %142 = load i8, i8* %141, align 1
  %143 = sext i8 %142 to i32
  %144 = icmp ne i32 %143, 45
  br i1 %144, label %145, label %150

145:                                              ; preds = %140
  %146 = load i8*, i8** %21, align 8
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = icmp ne i32 %148, 10
  br label %150

150:                                              ; preds = %145, %140
  %151 = phi i1 [ false, %140 ], [ %149, %145 ]
  br i1 %151, label %152, label %161

152:                                              ; preds = %150
  %153 = load i8*, i8** %21, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %21, align 8
  %155 = load i8, i8* %153, align 1
  %156 = load i8*, i8** %22, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %22, align 8
  store i8 %155, i8* %156, align 1
  br label %158

158:                                              ; preds = %152
  %159 = load i32, i32* %17, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %17, align 4
  br label %140

161:                                              ; preds = %150
  %162 = load i32, i32* @debug, align 4
  %163 = call i32 @PRINTINFO(i8* %126, i32 %162)
  %164 = load i32, i32* %12, align 4
  %165 = call i32 @close(i32 %164)
  store i32 1, i32* %24, align 4
  br label %167

166:                                              ; preds = %116
  store i32 0, i32* %24, align 4
  br label %167

167:                                              ; preds = %166, %161
  %168 = load i8*, i8** %18, align 8
  call void @llvm.stackrestore(i8* %168)
  %169 = load i32, i32* %24, align 4
  switch i32 %169, label %177 [
    i32 0, label %170
  ]

170:                                              ; preds = %167
  br label %171

171:                                              ; preds = %170, %95
  %172 = load i32, i32* @NOTELOG, align 4
  %173 = call i32 @NPRINTINFO(i32 %172)
  %174 = load i32, i32* %12, align 4
  %175 = call i32 @close(i32 %174)
  %176 = call i32 @exit(i32 1) #4
  unreachable

177:                                              ; preds = %167
  %178 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %178)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @PRINTINFO(i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #2

declare dso_local i32 @memset(i32*, i8 signext, i32) #2

declare dso_local i32 @htons(i16 zeroext) #2

declare dso_local i32 @get_host_ip(i8*) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @err(i32, i32*) #2

declare dso_local i32 @FD_ZERO(i32*) #2

declare dso_local i32 @FD_SET(i32, i32*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i8* @strstr(i8*, i8*) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

declare dso_local i32 @NPRINTINFO(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
