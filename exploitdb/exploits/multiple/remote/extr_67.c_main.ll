; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_67.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_67.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8* }

@.str = private unnamed_addr constant [10 x i8] c"t:T:e:hr:\00", align 1
@host = common dso_local global i8* null, align 8
@optarg = common dso_local global i32 0, align 4
@SIZ = common dso_local global i32 0, align 4
@useTarget = common dso_local global i32 0, align 4
@exactPointerAddy = common dso_local global i8* null, align 8
@retAddr = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@usage = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [22 x i8] c"Available platforms:\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"%2d. %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [65 x i8] c"[*] You must give RET address when specifying a pointer address\0A\00", align 1
@.str.6 = private unnamed_addr constant [71 x i8] c"    A good place to start is 0xbfffe0b0(linux) or 0xbfbfe0b0(freeBSD)\0A\00", align 1
@.str.7 = private unnamed_addr constant [71 x i8] c"    Also remember to pass a -T x flag... things will be unpredictable\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"    if you don't!\0A\00", align 1
@hostStruct = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [51 x i8] c"[*] Couldn't resolve host %s\0AUse '%s -h' for help\0A\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"[*] Couldn't connect to host: %s not found.\0A\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"[*] Couldn't grab a socket!\0A\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"[*] Connection to %s was rejected\0A\00", align 1
@.str.13 = private unnamed_addr constant [29 x i8] c"[*] This attempt failed ...\0A\00", align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"[*] Bruteforce failed.\0A\00", align 1
@.str.15 = private unnamed_addr constant [32 x i8] c"[*] ERROR: There was no error!\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"\0AHave a nice day!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  br label %8

8:                                                ; preds = %58, %2
  %9 = load i32, i32* %4, align 4
  %10 = load i8**, i8*** %5, align 8
  %11 = call i32 @getopt(i32 %9, i8** %10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32 %11, i32* %6, align 4
  %12 = icmp ne i32 %11, -1
  br i1 %12, label %13, label %59

13:                                               ; preds = %8
  %14 = load i32, i32* %6, align 4
  switch i32 %14, label %31 [
    i32 116, label %15
    i32 84, label %21
    i32 101, label %24
    i32 114, label %27
    i32 104, label %30
  ]

15:                                               ; preds = %13
  %16 = load i8*, i8** @host, align 8
  %17 = load i32, i32* @optarg, align 4
  %18 = load i32, i32* @SIZ, align 4
  %19 = sub nsw i32 %18, 1
  %20 = call i32 @strncpy(i8* %16, i32 %17, i32 %19)
  br label %58

21:                                               ; preds = %13
  %22 = load i32, i32* @optarg, align 4
  %23 = call i32 @atoi(i32 %22)
  store i32 %23, i32* @useTarget, align 4
  br label %58

24:                                               ; preds = %13
  %25 = load i32, i32* @optarg, align 4
  %26 = call i8* @strtoul(i32 %25, i32* null, i32 16)
  store i8* %26, i8** @exactPointerAddy, align 8
  br label %58

27:                                               ; preds = %13
  %28 = load i32, i32* @optarg, align 4
  %29 = call i8* @strtoul(i32 %28, i32* null, i32 16)
  store i8* %29, i8** @retAddr, align 8
  br label %58

30:                                               ; preds = %13
  br label %31

31:                                               ; preds = %13, %30
  %32 = load i8*, i8** @usage, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %32)
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %35

35:                                               ; preds = %52, %31
  %36 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %37 = load i32, i32* %7, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %36, i64 %38
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, null
  br i1 %42, label %43, label %55

43:                                               ; preds = %35
  %44 = load i32, i32* %7, align 4
  %45 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %46 = load i32, i32* %7, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %45, i64 %47
  %49 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %48, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32 %44, i8* %50)
  br label %52

52:                                               ; preds = %43
  %53 = load i32, i32* %7, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %7, align 4
  br label %35

55:                                               ; preds = %35
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %57 = call i32 @exit(i32 0) #3
  unreachable

58:                                               ; preds = %27, %24, %21, %15
  br label %8

59:                                               ; preds = %8
  %60 = load i8*, i8** @retAddr, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %71, label %62

62:                                               ; preds = %59
  %63 = load i8*, i8** @exactPointerAddy, align 8
  %64 = icmp ne i8* %63, null
  br i1 %64, label %65, label %71

65:                                               ; preds = %62
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.5, i64 0, i64 0))
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.6, i64 0, i64 0))
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.7, i64 0, i64 0))
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0))
  %70 = call i32 @exit(i32 0) #3
  unreachable

71:                                               ; preds = %62, %59
  %72 = load i8*, i8** @host, align 8
  %73 = call i32* @gethostbyname(i8* %72)
  store i32* %73, i32** @hostStruct, align 8
  %74 = icmp eq i32* %73, null
  br i1 %74, label %75, label %82

75:                                               ; preds = %71
  %76 = load i8*, i8** @host, align 8
  %77 = load i8**, i8*** %5, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.9, i64 0, i64 0), i8* %76, i8* %79)
  %81 = call i32 @exit(i32 0) #3
  unreachable

82:                                               ; preds = %71
  %83 = call i32 (...) @attempt_exploit()
  switch i32 %83, label %97 [
    i32 131, label %84
    i32 129, label %87
    i32 132, label %89
    i32 130, label %92
    i32 133, label %94
    i32 128, label %96
  ]

84:                                               ; preds = %82
  %85 = load i8*, i8** @host, align 8
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* %85)
  br label %99

87:                                               ; preds = %82
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i64 0, i64 0))
  br label %99

89:                                               ; preds = %82
  %90 = load i8*, i8** @host, align 8
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i8* %90)
  br label %99

92:                                               ; preds = %82
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.13, i64 0, i64 0))
  br label %99

94:                                               ; preds = %82
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0))
  br label %99

96:                                               ; preds = %82
  br label %99

97:                                               ; preds = %82
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0))
  br label %99

99:                                               ; preds = %97, %96, %94, %92, %89, %87, %84
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0))
  %101 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i8* @strtoul(i32, i32*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32* @gethostbyname(i8*) #1

declare dso_local i32 @attempt_exploit(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
