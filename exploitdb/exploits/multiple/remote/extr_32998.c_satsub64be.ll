; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_satsub64be.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_satsub64be.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.anon = type { i64 }

@__const.satsub64be.is_endian = private unnamed_addr constant %union.anon { i64 1 }, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @satsub64be(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %union.anon, align 8
  %11 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %12

12:                                               ; preds = %2
  %13 = bitcast %union.anon* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 bitcast (%union.anon* @__const.satsub64be.is_endian to i8*), i64 8, i1 false)
  %14 = bitcast %union.anon* %10 to i8*
  %15 = load i8, i8* %14, align 8
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  br label %46

18:                                               ; preds = %12
  %19 = load i8*, i8** %4, align 8
  %20 = ptrtoint i8* %19 to i64
  %21 = load i8*, i8** %5, align 8
  %22 = ptrtoint i8* %21 to i64
  %23 = or i64 %20, %22
  %24 = and i64 %23, 7
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  br label %46

27:                                               ; preds = %18
  %28 = load i8*, i8** %4, align 8
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %11, align 8
  %31 = load i8*, i8** %5, align 8
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = load i64, i64* %11, align 8
  %35 = sub nsw i64 %34, %33
  store i64 %35, i64* %11, align 8
  %36 = load i64, i64* %11, align 8
  %37 = icmp sgt i64 %36, 128
  br i1 %37, label %38, label %39

38:                                               ; preds = %27
  store i32 128, i32* %3, align 4
  br label %134

39:                                               ; preds = %27
  %40 = load i64, i64* %11, align 8
  %41 = icmp slt i64 %40, -128
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  store i32 -128, i32* %3, align 4
  br label %134

43:                                               ; preds = %39
  %44 = load i64, i64* %11, align 8
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %3, align 4
  br label %134

46:                                               ; preds = %26, %17
  %47 = load i8*, i8** %4, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 7
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = load i8*, i8** %5, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 7
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %50, %54
  store i32 %55, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %56 = load i32, i32* %6, align 4
  %57 = ashr i32 %56, 8
  store i32 %57, i32* %8, align 4
  %58 = load i32, i32* %6, align 4
  %59 = and i32 %58, 128
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %91

61:                                               ; preds = %46
  store i32 6, i32* %9, align 4
  br label %62

62:                                               ; preds = %87, %61
  %63 = load i32, i32* %9, align 4
  %64 = icmp sge i32 %63, 0
  br i1 %64, label %65, label %90

65:                                               ; preds = %62
  %66 = load i8*, i8** %4, align 8
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = load i8*, i8** %5, align 8
  %73 = load i32, i32* %9, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %71, %77
  %79 = load i32, i32* %8, align 4
  %80 = add nsw i32 %79, %78
  store i32 %80, i32* %8, align 4
  %81 = load i32, i32* %8, align 4
  %82 = xor i32 %81, -1
  %83 = load i32, i32* %7, align 4
  %84 = or i32 %83, %82
  store i32 %84, i32* %7, align 4
  %85 = load i32, i32* %8, align 4
  %86 = ashr i32 %85, 8
  store i32 %86, i32* %8, align 4
  br label %87

87:                                               ; preds = %65
  %88 = load i32, i32* %9, align 4
  %89 = add nsw i32 %88, -1
  store i32 %89, i32* %9, align 4
  br label %62

90:                                               ; preds = %62
  br label %120

91:                                               ; preds = %46
  store i32 6, i32* %9, align 4
  br label %92

92:                                               ; preds = %116, %91
  %93 = load i32, i32* %9, align 4
  %94 = icmp sge i32 %93, 0
  br i1 %94, label %95, label %119

95:                                               ; preds = %92
  %96 = load i8*, i8** %4, align 8
  %97 = load i32, i32* %9, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = load i8*, i8** %5, align 8
  %103 = load i32, i32* %9, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %101, %107
  %109 = load i32, i32* %8, align 4
  %110 = add nsw i32 %109, %108
  store i32 %110, i32* %8, align 4
  %111 = load i32, i32* %8, align 4
  %112 = load i32, i32* %7, align 4
  %113 = or i32 %112, %111
  store i32 %113, i32* %7, align 4
  %114 = load i32, i32* %8, align 4
  %115 = ashr i32 %114, 8
  store i32 %115, i32* %8, align 4
  br label %116

116:                                              ; preds = %95
  %117 = load i32, i32* %9, align 4
  %118 = add nsw i32 %117, -1
  store i32 %118, i32* %9, align 4
  br label %92

119:                                              ; preds = %92
  br label %120

120:                                              ; preds = %119, %90
  %121 = load i32, i32* %8, align 4
  %122 = shl i32 %121, 8
  store i32 %122, i32* %8, align 4
  %123 = load i32, i32* %7, align 4
  %124 = and i32 %123, 255
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %129

126:                                              ; preds = %120
  %127 = load i32, i32* %8, align 4
  %128 = or i32 %127, 128
  store i32 %128, i32* %3, align 4
  br label %134

129:                                              ; preds = %120
  %130 = load i32, i32* %8, align 4
  %131 = load i32, i32* %6, align 4
  %132 = and i32 %131, 255
  %133 = add nsw i32 %130, %132
  store i32 %133, i32* %3, align 4
  br label %134

134:                                              ; preds = %129, %126, %43, %42, %38
  %135 = load i32, i32* %3, align 4
  ret i32 %135
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
