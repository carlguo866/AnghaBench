; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_memcpy_remote.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_memcpy_remote.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cur_num = common dso_local global i32 0, align 4
@DUMMY_ADDR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @memcpy_remote(i32 %0, i32 %1, i64* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i64* %2, i64** %7, align 8
  store i32 %3, i32* %8, align 4
  %10 = load i32, i32* %8, align 4
  %11 = icmp sle i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  br label %68

13:                                               ; preds = %4
  %14 = load i32, i32* @cur_num, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %23, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* @DUMMY_ADDR, align 4
  %18 = load i32, i32* @DUMMY_ADDR, align 4
  %19 = load i32, i32* @cur_num, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @cur_num, align 4
  %21 = call i32 @build_chunk(i32 %17, i32 %18, i32 %19)
  %22 = call i32 @nprintf(i32 %21)
  br label %23

23:                                               ; preds = %16, %13
  %24 = load i32, i32* %8, align 4
  %25 = sub nsw i32 %24, 1
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %8, align 4
  %27 = sub nsw i32 %26, 1
  %28 = load i32, i32* %6, align 4
  %29 = add nsw i32 %28, %27
  store i32 %29, i32* %6, align 4
  br label %30

30:                                               ; preds = %62, %23
  %31 = load i32, i32* %9, align 4
  %32 = icmp sge i32 %31, 0
  br i1 %32, label %33, label %67

33:                                               ; preds = %30
  %34 = load i32, i32* %5, align 4
  %35 = and i32 %34, -256
  store i32 %35, i32* %5, align 4
  %36 = load i64*, i64** %7, align 8
  %37 = load i32, i32* %9, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i64, i64* %36, i64 %38
  %40 = load i64, i64* %39, align 8
  %41 = load i32, i32* %5, align 4
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, %40
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %5, align 4
  %45 = load i32, i32* %6, align 4
  %46 = call i32 @SET_FD(i32 %45)
  %47 = call i32 @bad_addr(i32 %46)
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %61, label %49

49:                                               ; preds = %33
  %50 = load i32, i32* %5, align 4
  %51 = call i32 @bad_addr(i32 %50)
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %61, label %53

53:                                               ; preds = %49
  %54 = load i32, i32* %6, align 4
  %55 = load i32, i32* %5, align 4
  %56 = call i32 @UNSET_BK(i32 %55)
  %57 = load i32, i32* @cur_num, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* @cur_num, align 4
  %59 = call i32 @build_chunk(i32 %54, i32 %56, i32 %57)
  %60 = call i32 @nprintf(i32 %59)
  br label %61

61:                                               ; preds = %53, %49, %33
  br label %62

62:                                               ; preds = %61
  %63 = load i32, i32* %9, align 4
  %64 = add nsw i32 %63, -1
  store i32 %64, i32* %9, align 4
  %65 = load i32, i32* %6, align 4
  %66 = add nsw i32 %65, -1
  store i32 %66, i32* %6, align 4
  br label %30

67:                                               ; preds = %30
  br label %68

68:                                               ; preds = %67, %12
  ret void
}

declare dso_local i32 @nprintf(i32) #1

declare dso_local i32 @build_chunk(i32, i32, i32) #1

declare dso_local i32 @bad_addr(i32) #1

declare dso_local i32 @SET_FD(i32) #1

declare dso_local i32 @UNSET_BK(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
