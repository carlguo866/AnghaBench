; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_dtls_client.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_32998.c_dtls_client.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { i32, %struct.TYPE_10__*, i32* }
%struct.TYPE_10__ = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"[!] cannot create socket\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"[ error in malloc()\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@BIO_NOCLOSE = common dso_local global i32 0, align 4
@SSL_TLSEXT_HB_ENABLED = common dso_local global i32 0, align 4
@SSL_TLSEXT_HB_DONT_SEND_REQUESTS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [65 x i8] c"[ warning: heartbeat extension is unsupported (try anyway), %d \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.TYPE_9__* @dtls_client(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.TYPE_9__*, align 8
  %11 = alloca i32*, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %12 = bitcast %struct.sockaddr_in* %9 to i8*
  %13 = call i32 @memset(i8* %12, i32 0, i32 12)
  %14 = call %struct.TYPE_9__* @malloc(i32 24)
  store %struct.TYPE_9__* %14, %struct.TYPE_9__** %10, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call %struct.hostent* @gethostbyname(i8* %15)
  store %struct.hostent* %16, %struct.hostent** %8, align 8
  %17 = icmp eq %struct.hostent* %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %3
  %19 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #4
  unreachable

21:                                               ; preds = %3
  %22 = load i32, i32* @AF_INET, align 4
  %23 = load i32, i32* @SOCK_DGRAM, align 4
  %24 = load i32, i32* @IPPROTO_UDP, align 4
  %25 = call i32 @socket(i32 %22, i32 %23, i32 %24)
  store i32 %25, i32* %4, align 4
  %26 = load i32, i32* %4, align 4
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i32 @exit(i32 0) #4
  unreachable

31:                                               ; preds = %21
  %32 = load i32, i32* @AF_INET, align 4
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %38 = load %struct.hostent*, %struct.hostent** %8, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = inttoptr i64 %40 to %struct.in_addr*
  %42 = bitcast %struct.in_addr* %37 to i8*
  %43 = bitcast %struct.in_addr* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %43, i64 4, i1 false)
  %44 = load i32, i32* %4, align 4
  %45 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %46 = call i64 @connect(i32 %44, %struct.sockaddr* %45, i32 12)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %31
  %49 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %50 = call i32 @exit(i32 0) #4
  unreachable

51:                                               ; preds = %31
  %52 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %53 = icmp eq %struct.TYPE_9__* %52, null
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %56 = call i32 @exit(i32 0) #4
  unreachable

57:                                               ; preds = %51
  %58 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %59 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %58, i32 0, i32 2
  store i32* null, i32** %59, align 8
  %60 = call i32 (...) @DTLSv1_client_method()
  %61 = call i32* @SSL_CTX_new(i32 %60)
  %62 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %63 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %62, i32 0, i32 2
  store i32* %61, i32** %63, align 8
  %64 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %65 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %64, i32 0, i32 2
  %66 = load i32*, i32** %65, align 8
  %67 = call i32 @SSL_CTX_set_read_ahead(i32* %66, i32 1)
  %68 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %69 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %68, i32 0, i32 2
  %70 = load i32*, i32** %69, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %72, label %75

72:                                               ; preds = %57
  %73 = load i32, i32* @stderr, align 4
  %74 = call i32 @ERR_print_errors_fp(i32 %73)
  br label %75

75:                                               ; preds = %72, %57
  %76 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %77 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %76, i32 0, i32 1
  %78 = load %struct.TYPE_10__*, %struct.TYPE_10__** %77, align 8
  %79 = icmp eq %struct.TYPE_10__* %78, null
  br i1 %79, label %80, label %83

80:                                               ; preds = %75
  %81 = load i32, i32* @stderr, align 4
  %82 = call i32 @ERR_print_errors_fp(i32 %81)
  br label %83

83:                                               ; preds = %80, %75
  %84 = load i32, i32* %4, align 4
  %85 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %86 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %85, i32 0, i32 0
  store i32 %84, i32* %86, align 8
  %87 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %88 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %87, i32 0, i32 1
  store %struct.TYPE_10__* null, %struct.TYPE_10__** %88, align 8
  %89 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %90 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %89, i32 0, i32 2
  %91 = load i32*, i32** %90, align 8
  %92 = call %struct.TYPE_10__* @SSL_new(i32* %91)
  %93 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %94 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %93, i32 0, i32 1
  store %struct.TYPE_10__* %92, %struct.TYPE_10__** %94, align 8
  %95 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %96 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %95, i32 0, i32 1
  %97 = load %struct.TYPE_10__*, %struct.TYPE_10__** %96, align 8
  %98 = load i8*, i8** %5, align 8
  %99 = call i32 @SSL_set_tlsext_host_name(%struct.TYPE_10__* %97, i8* %98)
  %100 = load i32, i32* %4, align 4
  %101 = load i32, i32* @BIO_NOCLOSE, align 4
  %102 = call i32* @BIO_new_dgram(i32 %100, i32 %101)
  store i32* %102, i32** %11, align 8
  %103 = load i32*, i32** %11, align 8
  %104 = call i32 @BIO_ctrl_set_connected(i32* %103, i32 1, %struct.sockaddr_in* %9)
  %105 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %106 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %105, i32 0, i32 1
  %107 = load %struct.TYPE_10__*, %struct.TYPE_10__** %106, align 8
  %108 = load i32*, i32** %11, align 8
  %109 = load i32*, i32** %11, align 8
  %110 = call i32 @SSL_set_bio(%struct.TYPE_10__* %107, i32* %108, i32* %109)
  %111 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %112 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %111, i32 0, i32 1
  %113 = load %struct.TYPE_10__*, %struct.TYPE_10__** %112, align 8
  %114 = call i32 @SSL_set_connect_state(%struct.TYPE_10__* %113)
  %115 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %116 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %115, i32 0, i32 1
  %117 = load %struct.TYPE_10__*, %struct.TYPE_10__** %116, align 8
  %118 = call i32 @SSL_connect(%struct.TYPE_10__* %117)
  %119 = icmp ne i32 %118, 1
  br i1 %119, label %120, label %123

120:                                              ; preds = %83
  %121 = load i32, i32* @stderr, align 4
  %122 = call i32 @ERR_print_errors_fp(i32 %121)
  br label %123

123:                                              ; preds = %120, %83
  %124 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %125 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %124, i32 0, i32 1
  %126 = load %struct.TYPE_10__*, %struct.TYPE_10__** %125, align 8
  %127 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %126, i32 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = icmp ne i32 %128, 0
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i32
  %132 = load i32, i32* @SSL_TLSEXT_HB_ENABLED, align 4
  %133 = and i32 %131, %132
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %144, label %135

135:                                              ; preds = %123
  %136 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %137 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %136, i32 0, i32 1
  %138 = load %struct.TYPE_10__*, %struct.TYPE_10__** %137, align 8
  %139 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %138, i32 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = load i32, i32* @SSL_TLSEXT_HB_DONT_SEND_REQUESTS, align 4
  %142 = and i32 %140, %141
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %151

144:                                              ; preds = %135, %123
  %145 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  %146 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %145, i32 0, i32 1
  %147 = load %struct.TYPE_10__*, %struct.TYPE_10__** %146, align 8
  %148 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %147, i32 0, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.4, i64 0, i64 0), i32 %149)
  br label %151

151:                                              ; preds = %144, %135
  %152 = load %struct.TYPE_9__*, %struct.TYPE_9__** %10, align 8
  ret %struct.TYPE_9__* %152
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local %struct.TYPE_9__* @malloc(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32* @SSL_CTX_new(i32) #1

declare dso_local i32 @DTLSv1_client_method(...) #1

declare dso_local i32 @SSL_CTX_set_read_ahead(i32*, i32) #1

declare dso_local i32 @ERR_print_errors_fp(i32) #1

declare dso_local %struct.TYPE_10__* @SSL_new(i32*) #1

declare dso_local i32 @SSL_set_tlsext_host_name(%struct.TYPE_10__*, i8*) #1

declare dso_local i32* @BIO_new_dgram(i32, i32) #1

declare dso_local i32 @BIO_ctrl_set_connected(i32*, i32, %struct.sockaddr_in*) #1

declare dso_local i32 @SSL_set_bio(%struct.TYPE_10__*, i32*, i32*) #1

declare dso_local i32 @SSL_set_connect_state(%struct.TYPE_10__*) #1

declare dso_local i32 @SSL_connect(%struct.TYPE_10__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
