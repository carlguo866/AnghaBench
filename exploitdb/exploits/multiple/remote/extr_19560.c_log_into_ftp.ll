; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_log_into_ftp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_log_into_ftp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_7__ = type { i32 }
%struct.TYPE_6__ = type { i8*, i64 }
%struct.TYPE_5__ = type { i32, i32, i32 }

@.str = private unnamed_addr constant [5 x i8] c"220 \00", align 1
@hostinf = common dso_local global %struct.TYPE_7__ zeroinitializer, align 4
@debug = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@offset_selected = common dso_local global i32 0, align 4
@spdata = common dso_local global %struct.TYPE_6__* null, align 8
@sptr = common dso_local global %struct.TYPE_6__* null, align 8
@.str.2 = private unnamed_addr constant [50 x i8] c"No offset selected, and no matching banner found!\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Using offsets from: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@tesopt = common dso_local global %struct.TYPE_5__ zeroinitializer, align 4
@.str.5 = private unnamed_addr constant [5 x i8] c"331 \00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"230 \00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"login not accepted!\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"initial CWD failed.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @log_into_ftp() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8, align 1
  store i8 0, i8* %2, align 1
  %3 = call i8* @getmsg(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i8* %3, i8** %1, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = call i32 @xstrdup(i8* %4)
  store i32 %5, i32* getelementptr inbounds (%struct.TYPE_7__, %struct.TYPE_7__* @hostinf, i32 0, i32 0), align 4
  %6 = load i32, i32* @debug, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %0
  %9 = load i8*, i8** %1, align 8
  %10 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %9)
  br label %11

11:                                               ; preds = %8, %0
  %12 = load i32, i32* @offset_selected, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %39, label %14

14:                                               ; preds = %11
  %15 = load %struct.TYPE_6__*, %struct.TYPE_6__** @spdata, align 8
  store %struct.TYPE_6__* %15, %struct.TYPE_6__** @sptr, align 8
  br label %16

16:                                               ; preds = %30, %14
  %17 = load %struct.TYPE_6__*, %struct.TYPE_6__** @sptr, align 8
  %18 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %17, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %33

21:                                               ; preds = %16
  %22 = load i8*, i8** %1, align 8
  %23 = load %struct.TYPE_6__*, %struct.TYPE_6__** @sptr, align 8
  %24 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %23, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @strstr(i8* %22, i64 %25)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  store i8 1, i8* %2, align 1
  br label %33

29:                                               ; preds = %21
  br label %30

30:                                               ; preds = %29
  %31 = load %struct.TYPE_6__*, %struct.TYPE_6__** @sptr, align 8
  %32 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %31, i32 1
  store %struct.TYPE_6__* %32, %struct.TYPE_6__** @sptr, align 8
  br label %16

33:                                               ; preds = %28, %16
  %34 = load i8, i8* %2, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = call i32 @err(i32 0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.2, i64 0, i64 0))
  br label %38

38:                                               ; preds = %36, %33
  br label %39

39:                                               ; preds = %38, %11
  %40 = load %struct.TYPE_6__*, %struct.TYPE_6__** @sptr, align 8
  %41 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* %42)
  %44 = load i32, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @tesopt, i32 0, i32 2), align 4
  %45 = call i32 @putserv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 %44)
  %46 = call i8* @getmsg(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  %47 = load i32, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @tesopt, i32 0, i32 1), align 4
  %48 = call i32 @putserv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 %47)
  %49 = call i8* @getmsg(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  store i8* %49, i8** %1, align 8
  %50 = load i8*, i8** %1, align 8
  %51 = call i64 @strncmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i8* %50, i32 1)
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %39
  %54 = call i32 @err(i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0))
  br label %55

55:                                               ; preds = %53, %39
  %56 = load i32, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @tesopt, i32 0, i32 0), align 4
  %57 = call i64 @strlen(i32 %56)
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %66

59:                                               ; preds = %55
  %60 = load i32, i32* getelementptr inbounds (%struct.TYPE_5__, %struct.TYPE_5__* @tesopt, i32 0, i32 0), align 4
  %61 = call i64 @cwd(i32 %60)
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = call i32 @err(i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0))
  br label %65

65:                                               ; preds = %63, %59
  br label %66

66:                                               ; preds = %65, %55
  %67 = call i32 (...) @getpwd()
  ret void
}

declare dso_local i8* @getmsg(i8*) #1

declare dso_local i32 @xstrdup(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i64 @strstr(i8*, i64) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @putserv(i8*, i32) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i64 @cwd(i32) #1

declare dso_local i32 @getpwd(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
