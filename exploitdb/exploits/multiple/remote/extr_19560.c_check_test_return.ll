; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_check_test_return.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_19560.c_check_test_return.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [39 x i8] c"w8ing for testshellcode to respond...\0A\00", align 1
@fd = common dso_local global i64 0, align 8
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"fcntl fucked up (testshellcode)\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"select timed out(testshellcode)\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"%sSploit successfull!%s\0A\00", align 1
@C_RED = common dso_local global i8* null, align 8
@C_NORM = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [29 x i8] c"%sSploit not successfull!%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_test_return(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.timeval, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0))
  %12 = load i64, i64* @fd, align 8
  %13 = load i32, i32* @F_GETFL, align 4
  %14 = call i32 @fcntl(i64 %12, i32 %13, i32 0)
  store i32 %14, i32* %8, align 4
  %15 = load i64, i64* @fd, align 8
  %16 = load i32, i32* @F_SETFL, align 4
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* @O_NONBLOCK, align 4
  %19 = or i32 %17, %18
  %20 = call i32 @fcntl(i64 %15, i32 %16, i32 %19)
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %2
  %23 = call i32 @err(i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  br label %24

24:                                               ; preds = %22, %2
  %25 = call i32 @FD_ZERO(i32* %9)
  %26 = load i64, i64* @fd, align 8
  %27 = call i32 @FD_SET(i64 %26, i32* %9)
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  store i32 10, i32* %28, align 8
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  store i64 0, i64* %29, align 8
  %30 = load i64, i64* @fd, align 8
  %31 = add nsw i64 %30, 1
  %32 = call i32 @select(i64 %31, i32* %9, i32* null, i32* null, %struct.timeval* %10)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %24
  %35 = call i32 @err(i32 0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  br label %36

36:                                               ; preds = %34, %24
  %37 = load i64, i64* @fd, align 8
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %39 = load i32, i32* %5, align 4
  %40 = call i32 @read(i64 %37, i8* %38, i32 %39)
  store i32 %40, i32* %7, align 4
  %41 = load i8*, i8** %4, align 8
  %42 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %43 = load i32, i32* %5, align 4
  %44 = call i32 @strncmp(i8* %41, i8* %42, i32 %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %36
  %47 = load i8*, i8** @C_RED, align 8
  %48 = load i8*, i8** @C_NORM, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %47, i8* %48)
  store i32 1, i32* %3, align 4
  br label %54

50:                                               ; preds = %36
  %51 = load i8*, i8** @C_RED, align 8
  %52 = load i8*, i8** @C_NORM, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %51, i8* %52)
  store i32 0, i32* %3, align 4
  br label %54

54:                                               ; preds = %50, %46
  %55 = load i32, i32* %3, align 4
  ret i32 %55
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fcntl(i64, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i64, i32*) #1

declare dso_local i32 @select(i64, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @read(i64, i8*, i32) #1

declare dso_local i32 @strncmp(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
