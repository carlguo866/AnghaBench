; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/remote/extr_805.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@id = common dso_local global i32 0, align 4
@WINCMD = common dso_local global i8* null, align 8
@COMMAND = common dso_local global i8* null, align 8
@FD_SETSIZE = common dso_local global i32 0, align 4
@NODATA = common dso_local global i32 0, align 4
@REMDOWN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %7 = load i32, i32* @id, align 4
  %8 = icmp eq i32 %7, 6
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i8*, i8** @WINCMD, align 8
  br label %13

11:                                               ; preds = %1
  %12 = load i8*, i8** @COMMAND, align 8
  br label %13

13:                                               ; preds = %11, %9
  %14 = phi i8* [ %10, %9 ], [ %12, %11 ]
  store i8* %14, i8** %5, align 8
  %15 = call i32 @FD_ZERO(i32* %3)
  %16 = load i32, i32* %2, align 4
  %17 = call i32 @FD_SET(i32 %16, i32* %3)
  %18 = call i32 @FD_SET(i32 0, i32* %3)
  %19 = load i32, i32* %2, align 4
  %20 = load i8*, i8** %5, align 8
  %21 = load i8*, i8** %5, align 8
  %22 = call i32 @strlen(i8* %21)
  %23 = call i64 @send(i32 %19, i8* %20, i32 %22, i32 0)
  br label %24

24:                                               ; preds = %13, %71
  %25 = load i32, i32* %2, align 4
  %26 = call i32 @FD_SET(i32 %25, i32* %3)
  %27 = call i32 @FD_SET(i32 0, i32* %3)
  %28 = load i32, i32* @FD_SETSIZE, align 4
  %29 = call i64 @select(i32 %28, i32* %3, i32* null, i32* null, i32* null)
  %30 = icmp slt i64 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %24
  br label %73

32:                                               ; preds = %24
  %33 = load i32, i32* %2, align 4
  %34 = call i64 @FD_ISSET(i32 %33, i32* %3)
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %52

36:                                               ; preds = %32
  %37 = load i32, i32* %2, align 4
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %39 = call i32 @recv(i32 %37, i8* %38, i32 1024, i32 0)
  store i32 %39, i32* %6, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = load i32, i32* @NODATA, align 4
  %43 = call i32 @NPRINTINFO(i32 %42)
  %44 = call i32 @exit(i32 1) #3
  unreachable

45:                                               ; preds = %36
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %47 = load i32, i32* %6, align 4
  %48 = call i64 @write(i32 1, i8* %46, i32 %47)
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  br label %73

51:                                               ; preds = %45
  br label %52

52:                                               ; preds = %51, %32
  %53 = call i64 @FD_ISSET(i32 0, i32* %3)
  %54 = icmp ne i64 %53, 0
  br i1 %54, label %55, label %71

55:                                               ; preds = %52
  %56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %57 = call i32 @read(i32 0, i8* %56, i32 1024)
  store i32 %57, i32* %6, align 4
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %55
  %60 = load i32, i32* @NODATA, align 4
  %61 = call i32 @NPRINTINFO(i32 %60)
  %62 = call i32 @exit(i32 1) #3
  unreachable

63:                                               ; preds = %55
  %64 = load i32, i32* %2, align 4
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %66 = load i32, i32* %6, align 4
  %67 = call i64 @send(i32 %64, i8* %65, i32 %66, i32 0)
  %68 = icmp slt i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %63
  br label %73

70:                                               ; preds = %63
  br label %71

71:                                               ; preds = %70, %52
  %72 = call i32 @usleep(i32 30)
  br label %24

73:                                               ; preds = %69, %50, %31
  %74 = load i32, i32* @REMDOWN, align 4
  %75 = call i32 @NPRINTINFO(i32 %74)
  %76 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @NPRINTINFO(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
