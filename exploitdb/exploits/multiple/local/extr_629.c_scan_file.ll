; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_629.c_scan_file.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_629.c_scan_file.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"[-] Error: Unable to open %s\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"[+] Scanning %s ...\0A\00", align 1
@LOCAL_HEADER_OFFSET = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [42 x i8] c" [-] Writing local header patch [0x%.8X]\0A\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4
@CENTRAL_HEADER_OFFSET = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [44 x i8] c" [-] Writing central header patch [0x%.8X]\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"[+] File scanning finished. EOF:%d ERR:%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scan_file(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  store i64 0, i64* %5, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = call i32* @fopen(i8* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  store i32* %7, i32** %3, align 8
  %8 = icmp eq i32* %7, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = load i8*, i8** %2, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %10)
  br label %95

12:                                               ; preds = %1
  %13 = load i8*, i8** %2, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %13)
  br label %15

15:                                               ; preds = %86, %12
  %16 = load i32*, i32** %3, align 8
  %17 = call i64 @fread(i8* %4, i32 1, i32 1, i32* %16)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %87

19:                                               ; preds = %15
  %20 = load i8, i8* %4, align 1
  %21 = zext i8 %20 to i32
  %22 = icmp eq i32 %21, 80
  br i1 %22, label %23, label %86

23:                                               ; preds = %19
  %24 = load i32*, i32** %3, align 8
  %25 = call i64 @fread(i8* %4, i32 1, i32 1, i32* %24)
  %26 = load i8, i8* %4, align 1
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 75
  br i1 %28, label %29, label %85

29:                                               ; preds = %23
  %30 = load i32*, i32** %3, align 8
  %31 = call i64 @fread(i8* %4, i32 1, i32 1, i32* %30)
  %32 = load i8, i8* %4, align 1
  %33 = zext i8 %32 to i32
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %57

35:                                               ; preds = %29
  %36 = load i32*, i32** %3, align 8
  %37 = call i64 @fread(i8* %4, i32 1, i32 1, i32* %36)
  %38 = load i8, i8* %4, align 1
  %39 = zext i8 %38 to i32
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %41, label %56

41:                                               ; preds = %35
  %42 = load i32*, i32** %3, align 8
  %43 = call i64 @ftell(i32* %42)
  store i64 %43, i64* %5, align 8
  %44 = load i64, i64* %5, align 8
  %45 = load i64, i64* @LOCAL_HEADER_OFFSET, align 8
  %46 = add i64 %44, %45
  store i64 %46, i64* %5, align 8
  %47 = load i64, i64* %5, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i64 %47)
  %49 = load i32*, i32** %3, align 8
  %50 = load i64, i64* %5, align 8
  %51 = call i32 @patch_file(i32* %49, i64 %50)
  %52 = load i32*, i32** %3, align 8
  %53 = load i64, i64* %5, align 8
  %54 = load i32, i32* @SEEK_SET, align 4
  %55 = call i32 @fseek(i32* %52, i64 %53, i32 %54)
  br label %56

56:                                               ; preds = %41, %35
  br label %84

57:                                               ; preds = %29
  %58 = load i8, i8* %4, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp eq i32 %59, 3
  br i1 %60, label %61, label %83

61:                                               ; preds = %57
  %62 = load i32*, i32** %3, align 8
  %63 = call i64 @fread(i8* %4, i32 1, i32 1, i32* %62)
  %64 = load i8, i8* %4, align 1
  %65 = zext i8 %64 to i32
  %66 = icmp eq i32 %65, 4
  br i1 %66, label %67, label %82

67:                                               ; preds = %61
  %68 = load i32*, i32** %3, align 8
  %69 = call i64 @ftell(i32* %68)
  store i64 %69, i64* %5, align 8
  %70 = load i64, i64* %5, align 8
  %71 = load i64, i64* @CENTRAL_HEADER_OFFSET, align 8
  %72 = add i64 %70, %71
  store i64 %72, i64* %5, align 8
  %73 = load i64, i64* %5, align 8
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i64 %73)
  %75 = load i32*, i32** %3, align 8
  %76 = load i64, i64* %5, align 8
  %77 = call i32 @patch_file(i32* %75, i64 %76)
  %78 = load i32*, i32** %3, align 8
  %79 = load i64, i64* %5, align 8
  %80 = load i32, i32* @SEEK_SET, align 4
  %81 = call i32 @fseek(i32* %78, i64 %79, i32 %80)
  br label %82

82:                                               ; preds = %67, %61
  br label %83

83:                                               ; preds = %82, %57
  br label %84

84:                                               ; preds = %83, %56
  br label %85

85:                                               ; preds = %84, %23
  br label %86

86:                                               ; preds = %85, %19
  br label %15

87:                                               ; preds = %15
  %88 = load i32*, i32** %3, align 8
  %89 = call i32 @feof(i32* %88)
  %90 = load i32*, i32** %3, align 8
  %91 = call i32 @ferror(i32* %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %89, i32 %91)
  %93 = load i32*, i32** %3, align 8
  %94 = call i32 @fclose(i32* %93)
  br label %95

95:                                               ; preds = %87, %9
  ret void
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @fread(i8*, i32, i32, i32*) #1

declare dso_local i64 @ftell(i32*) #1

declare dso_local i32 @patch_file(i32*, i64) #1

declare dso_local i32 @fseek(i32*, i64, i32) #1

declare dso_local i32 @feof(i32*) #1

declare dso_local i32 @ferror(i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
