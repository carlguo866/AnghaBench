; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_10072.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_10072.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssl_io_t = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"main:fork\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.ssl_io_t, align 4
  %14 = alloca %struct.ssl_io_t, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 @setup_ssl_ctx(i32** %10)
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 1
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @atoi(i8* %18)
  %20 = call i32 @setup_server(i32* %7, i32 %19)
  br label %21

21:                                               ; preds = %52, %2
  %22 = load i32, i32* %7, align 4
  %23 = call i32 @do_accept(i32* %8, i32 %22)
  %24 = call i32 (...) @fork()
  store i32 %24, i32* %6, align 4
  %25 = load i32, i32* %6, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %29

27:                                               ; preds = %21
  %28 = call i32 @fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  br label %52

29:                                               ; preds = %21
  %30 = load i32, i32* %6, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %48

32:                                               ; preds = %29
  %33 = load i32, i32* %7, align 4
  %34 = call i32 @close(i32 %33)
  %35 = load i32, i32* %8, align 4
  %36 = call i32 @handle_http_req(i32 %35, i32* %11, i32* %12)
  %37 = load i32, i32* %11, align 4
  %38 = load i32, i32* %12, align 4
  %39 = call i32 @setup_client(i32* %9, i32 %37, i32 %38)
  %40 = load i32*, i32** %10, align 8
  %41 = load i32, i32* %8, align 4
  %42 = call i32 @setup_ssl_io(%struct.ssl_io_t* %13, i32* %40, i32 %41, i32 3)
  %43 = load i32*, i32** %10, align 8
  %44 = load i32, i32* %9, align 4
  %45 = call i32 @setup_ssl_io(%struct.ssl_io_t* %14, i32* %43, i32 %44, i32 3)
  %46 = call i32 @hack_ssl(%struct.ssl_io_t* %13, %struct.ssl_io_t* %14)
  %47 = call i32 @ssl_io(%struct.ssl_io_t* %13, %struct.ssl_io_t* %14)
  ret i32 0

48:                                               ; preds = %29
  %49 = load i32, i32* %8, align 4
  %50 = call i32 @close(i32 %49)
  br label %51

51:                                               ; preds = %48
  br label %52

52:                                               ; preds = %51, %27
  br label %21
}

declare dso_local i32 @setup_ssl_ctx(i32**) #1

declare dso_local i32 @setup_server(i32*, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @do_accept(i32*, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @fail(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @handle_http_req(i32, i32*, i32*) #1

declare dso_local i32 @setup_client(i32*, i32, i32) #1

declare dso_local i32 @setup_ssl_io(%struct.ssl_io_t*, i32*, i32, i32) #1

declare dso_local i32 @hack_ssl(%struct.ssl_io_t*, %struct.ssl_io_t*) #1

declare dso_local i32 @ssl_io(%struct.ssl_io_t*, %struct.ssl_io_t*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
