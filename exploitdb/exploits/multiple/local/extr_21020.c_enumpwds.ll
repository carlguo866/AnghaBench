; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_21020.c_enumpwds.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/local/extr_21020.c_enumpwds.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@okaychars = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @enumpwds(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [256 x i8], align 16
  %8 = alloca [256 x i8], align 16
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  br label %9

9:                                                ; preds = %16, %1
  %10 = load i32, i32* %5, align 4
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %19

12:                                               ; preds = %9
  %13 = load i32, i32* %5, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %14
  store i8 0, i8* %15, align 1
  br label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %5, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %5, align 4
  br label %9

19:                                               ; preds = %9
  br label %20

20:                                               ; preds = %181, %125, %19
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul nsw i32 %24, 255
  %26 = load i8*, i8** %2, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %25, %29
  store i32 %30, i32* %3, align 4
  store i32 0, i32* %5, align 4
  br label %31

31:                                               ; preds = %134, %20
  %32 = load i32, i32* %5, align 4
  %33 = add i32 %32, 2
  %34 = load i8*, i8** %2, align 8
  %35 = call i32 @strlen(i8* %34)
  %36 = icmp ult i32 %33, %35
  br i1 %36, label %37, label %137

37:                                               ; preds = %31
  %38 = load i32, i32* %5, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %6, align 4
  br label %43

43:                                               ; preds = %76, %37
  %44 = load i32, i32* %6, align 4
  %45 = icmp ult i32 %44, 256
  br i1 %45, label %46, label %79

46:                                               ; preds = %43
  %47 = load i32, i32* %6, align 4
  %48 = load i32, i32* %3, align 4
  %49 = add nsw i32 %48, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 40
  %52 = load i8*, i8** %2, align 8
  %53 = load i32, i32* %5, align 4
  %54 = add i32 %53, 2
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %58, 65
  %60 = icmp eq i32 %51, %59
  %61 = zext i1 %60 to i32
  %62 = load i32*, i32** @okaychars, align 8
  %63 = load i32, i32* %6, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %62, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %61, %66
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %46
  %70 = load i32, i32* %6, align 4
  %71 = trunc i32 %70 to i8
  %72 = load i32, i32* %5, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %73
  store i8 %71, i8* %74, align 1
  br label %79

75:                                               ; preds = %46
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %6, align 4
  %78 = add i32 %77, 1
  store i32 %78, i32* %6, align 4
  br label %43

79:                                               ; preds = %69, %43
  %80 = load i32, i32* %6, align 4
  %81 = icmp eq i32 %80, 256
  br i1 %81, label %82, label %126

82:                                               ; preds = %79
  br label %83

83:                                               ; preds = %166, %110, %82
  %84 = load i32, i32* %5, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %83
  %87 = load i32, i32* %4, align 4
  ret i32 %87

88:                                               ; preds = %83
  %89 = load i32, i32* %5, align 4
  %90 = sub i32 %89, 1
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp slt i32 %94, 256
  br i1 %95, label %96, label %110

96:                                               ; preds = %88
  %97 = load i32, i32* %5, align 4
  %98 = sub i32 %97, 1
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nsw i32 %102, 1
  %104 = trunc i32 %103 to i8
  %105 = load i32, i32* %5, align 4
  %106 = sub i32 %105, 1
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %107
  store i8 %104, i8* %108, align 1
  %109 = load i32, i32* %5, align 4
  store i32 %109, i32* %6, align 4
  br label %113

110:                                              ; preds = %88
  %111 = load i32, i32* %5, align 4
  %112 = add i32 %111, -1
  store i32 %112, i32* %5, align 4
  br label %83

113:                                              ; preds = %96
  %114 = load i32, i32* %6, align 4
  store i32 %114, i32* %5, align 4
  br label %115

115:                                              ; preds = %122, %113
  %116 = load i32, i32* %5, align 4
  %117 = icmp ult i32 %116, 256
  br i1 %117, label %118, label %125

118:                                              ; preds = %115
  %119 = load i32, i32* %5, align 4
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %120
  store i8 0, i8* %121, align 1
  br label %122

122:                                              ; preds = %118
  %123 = load i32, i32* %5, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %5, align 4
  br label %115

125:                                              ; preds = %115
  br label %20

126:                                              ; preds = %79
  %127 = load i32, i32* %6, align 4
  %128 = load i32, i32* %3, align 4
  %129 = add i32 %128, %127
  store i32 %129, i32* %3, align 4
  %130 = load i32, i32* %3, align 4
  %131 = mul nsw i32 %130, 3
  store i32 %131, i32* %3, align 4
  %132 = load i32, i32* %3, align 4
  %133 = srem i32 %132, 32000
  store i32 %133, i32* %3, align 4
  br label %134

134:                                              ; preds = %126
  %135 = load i32, i32* %5, align 4
  %136 = add i32 %135, 1
  store i32 %136, i32* %5, align 4
  br label %31

137:                                              ; preds = %31
  %138 = load i32, i32* %5, align 4
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %139
  store i8 0, i8* %140, align 1
  %141 = load i32, i32* %4, align 4
  %142 = add i32 %141, 1
  store i32 %142, i32* %4, align 4
  %143 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  %144 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %143)
  %145 = load i32, i32* %5, align 4
  %146 = sub i32 %145, 1
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp slt i32 %150, 256
  br i1 %151, label %152, label %166

152:                                              ; preds = %137
  %153 = load i32, i32* %5, align 4
  %154 = sub i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nsw i32 %158, 1
  %160 = trunc i32 %159 to i8
  %161 = load i32, i32* %5, align 4
  %162 = sub i32 %161, 1
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %163
  store i8 %160, i8* %164, align 1
  %165 = load i32, i32* %5, align 4
  store i32 %165, i32* %6, align 4
  br label %169

166:                                              ; preds = %137
  %167 = load i32, i32* %5, align 4
  %168 = add i32 %167, -1
  store i32 %168, i32* %5, align 4
  br label %83

169:                                              ; preds = %152
  %170 = load i32, i32* %6, align 4
  store i32 %170, i32* %5, align 4
  br label %171

171:                                              ; preds = %178, %169
  %172 = load i32, i32* %5, align 4
  %173 = icmp ult i32 %172, 256
  br i1 %173, label %174, label %181

174:                                              ; preds = %171
  %175 = load i32, i32* %5, align 4
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %176
  store i8 0, i8* %177, align 1
  br label %178

178:                                              ; preds = %174
  %179 = load i32, i32* %5, align 4
  %180 = add i32 %179, 1
  store i32 %180, i32* %5, align 4
  br label %171

181:                                              ; preds = %171
  br label %20
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
