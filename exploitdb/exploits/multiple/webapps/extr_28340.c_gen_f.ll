; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/webapps/extr_28340.c_gen_f.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/webapps/extr_28340.c_gen_f.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@f = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gen_f() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  store i64 28, i64* %2, align 8
  store i64 23, i64* %3, align 8
  store i64 0, i64* %1, align 8
  br label %6

6:                                                ; preds = %13, %0
  %7 = load i64, i64* %1, align 8
  %8 = icmp slt i64 %7, 62
  br i1 %8, label %9, label %16

9:                                                ; preds = %6
  %10 = load i32*, i32** @f, align 8
  %11 = load i64, i64* %1, align 8
  %12 = getelementptr inbounds i32, i32* %10, i64 %11
  store i32 0, i32* %12, align 4
  br label %13

13:                                               ; preds = %9
  %14 = load i64, i64* %1, align 8
  %15 = add nsw i64 %14, 1
  store i64 %15, i64* %1, align 8
  br label %6

16:                                               ; preds = %6
  store i64 0, i64* %1, align 8
  br label %17

17:                                               ; preds = %32, %16
  %18 = load i64, i64* %1, align 8
  %19 = icmp slt i64 %18, 10
  br i1 %19, label %20, label %35

20:                                               ; preds = %17
  %21 = load i64, i64* %1, align 8
  %22 = shl i64 %21, 9
  %23 = trunc i64 %22 to i32
  %24 = load i32*, i32** @f, align 8
  %25 = load i64, i64* %1, align 8
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  store i32 %23, i32* %26, align 4
  %27 = load i32*, i32** @f, align 8
  %28 = load i64, i64* %1, align 8
  %29 = getelementptr inbounds i32, i32* %27, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, 23
  store i32 %31, i32* %29, align 4
  br label %32

32:                                               ; preds = %20
  %33 = load i64, i64* %1, align 8
  %34 = add nsw i64 %33, 1
  store i64 %34, i64* %1, align 8
  br label %17

35:                                               ; preds = %17
  store i64 10, i64* %1, align 8
  br label %36

36:                                               ; preds = %55, %35
  %37 = load i64, i64* %1, align 8
  %38 = icmp slt i64 %37, 36
  br i1 %38, label %39, label %58

39:                                               ; preds = %36
  %40 = load i64, i64* %2, align 8
  %41 = shl i64 %40, 1
  store i64 %41, i64* %2, align 8
  %42 = load i64, i64* %2, align 8
  %43 = call i64 @sqrt(i64 %42)
  %44 = trunc i64 %43 to i32
  %45 = sext i32 %44 to i64
  store i64 %45, i64* %4, align 8
  %46 = load i64, i64* %4, align 8
  %47 = add nsw i64 %46, 5
  store i64 %47, i64* %4, align 8
  %48 = load i64, i64* %4, align 8
  %49 = trunc i64 %48 to i32
  %50 = load i32*, i32** @f, align 8
  %51 = load i64, i64* %1, align 8
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  store i32 %49, i32* %52, align 4
  %53 = load i64, i64* %2, align 8
  %54 = add nsw i64 %53, 1
  store i64 %54, i64* %2, align 8
  br label %55

55:                                               ; preds = %39
  %56 = load i64, i64* %1, align 8
  %57 = add nsw i64 %56, 1
  store i64 %57, i64* %1, align 8
  br label %36

58:                                               ; preds = %36
  store i64 36, i64* %1, align 8
  br label %59

59:                                               ; preds = %78, %58
  %60 = load i64, i64* %1, align 8
  %61 = icmp slt i64 %60, 62
  br i1 %61, label %62, label %81

62:                                               ; preds = %59
  %63 = load i64, i64* %3, align 8
  %64 = shl i64 %63, 1
  store i64 %64, i64* %3, align 8
  %65 = load i64, i64* %3, align 8
  %66 = call i64 @sqrt(i64 %65)
  %67 = trunc i64 %66 to i32
  %68 = sext i32 %67 to i64
  store i64 %68, i64* %5, align 8
  %69 = load i64, i64* %5, align 8
  %70 = add nsw i64 %69, 74
  store i64 %70, i64* %5, align 8
  %71 = load i64, i64* %5, align 8
  %72 = trunc i64 %71 to i32
  %73 = load i32*, i32** @f, align 8
  %74 = load i64, i64* %1, align 8
  %75 = getelementptr inbounds i32, i32* %73, i64 %74
  store i32 %72, i32* %75, align 4
  %76 = load i64, i64* %3, align 8
  %77 = add nsw i64 %76, 1
  store i64 %77, i64* %3, align 8
  br label %78

78:                                               ; preds = %62
  %79 = load i64, i64* %1, align 8
  %80 = add nsw i64 %79, 1
  store i64 %80, i64* %1, align 8
  br label %59

81:                                               ; preds = %59
  ret void
}

declare dso_local i64 @sqrt(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
