; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_get_ip_from_zone.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_get_ip_from_zone.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@MAXLINELENGTH = common dso_local global i32 0, align 4
@EOF = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"ls -d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_ip_from_zone(i32* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [8 x i8], align 1
  store i32* %0, i32** %4, align 8
  store i8* %1, i8** %5, align 8
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
  %11 = call i32 @strcpy(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %12

12:                                               ; preds = %2, %50, %55, %60, %65, %73, %103
  %13 = load i8*, i8** %5, align 8
  %14 = load i32, i32* @MAXLINELENGTH, align 4
  %15 = load i32*, i32** %4, align 8
  %16 = call i64 @fgets(i8* %13, i32 %14, i32* %15)
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %6, align 4
  %19 = load i32, i32* @EOF, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %24, label %21

21:                                               ; preds = %12
  %22 = load i32, i32* %6, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21, %12
  store i32 0, i32* %3, align 4
  br label %104

25:                                               ; preds = %21
  %26 = load i8*, i8** %5, align 8
  %27 = call i32 @strlen(i8* %26)
  %28 = icmp sge i32 %27, 7
  br i1 %28, label %29, label %103

29:                                               ; preds = %25
  %30 = load i8*, i8** %5, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 0
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp ne i32 %33, 59
  br i1 %34, label %35, label %102

35:                                               ; preds = %29
  %36 = load i8*, i8** %5, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 0
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp ne i32 %39, 91
  br i1 %40, label %41, label %102

41:                                               ; preds = %35
  %42 = load i8*, i8** %5, align 8
  %43 = call i64 @strncmp(i8* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 5)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %102

45:                                               ; preds = %41
  %46 = load i8*, i8** %5, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
  %48 = call i8* @strtok(i8* %46, i8* %47)
  store i8* %48, i8** %8, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  br label %12

51:                                               ; preds = %45
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
  %53 = call i8* @strtok(i8* null, i8* %52)
  store i8* %53, i8** %8, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %56

55:                                               ; preds = %51
  br label %12

56:                                               ; preds = %51
  %57 = load i8*, i8** %8, align 8
  %58 = call i64 @strcmp(i8* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %56
  br label %12

61:                                               ; preds = %56
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %9, i64 0, i64 0
  %63 = call i8* @strtok(i8* null, i8* %62)
  store i8* %63, i8** %8, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  br label %12

66:                                               ; preds = %61
  %67 = load i8*, i8** %5, align 8
  %68 = load i8*, i8** %8, align 8
  %69 = call i32 @strcpy(i8* %67, i8* %68)
  %70 = load i8*, i8** %8, align 8
  %71 = call i32 @inet_addr(i8* %70)
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %74

73:                                               ; preds = %66
  br label %12

74:                                               ; preds = %66
  %75 = load i8*, i8** %5, align 8
  %76 = load i8*, i8** %5, align 8
  %77 = call i32 @strlen(i8* %76)
  %78 = sub nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %75, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = icmp eq i32 %82, 13
  br i1 %83, label %94, label %84

84:                                               ; preds = %74
  %85 = load i8*, i8** %5, align 8
  %86 = load i8*, i8** %5, align 8
  %87 = call i32 @strlen(i8* %86)
  %88 = sub nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %85, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 10
  br i1 %93, label %94, label %101

94:                                               ; preds = %84, %74
  %95 = load i8*, i8** %5, align 8
  %96 = load i8*, i8** %5, align 8
  %97 = call i32 @strlen(i8* %96)
  %98 = sub nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  store i8 0, i8* %100, align 1
  br label %101

101:                                              ; preds = %94, %84
  store i32 1, i32* %3, align 4
  br label %104

102:                                              ; preds = %41, %35, %29
  br label %103

103:                                              ; preds = %102, %25
  br label %12

104:                                              ; preds = %101, %24
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i64 @fgets(i8*, i32, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i8* @strtok(i8*, i8*) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
