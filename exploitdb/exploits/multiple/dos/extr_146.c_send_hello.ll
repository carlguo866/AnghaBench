; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_146.c_send_hello.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_146.c_send_hello.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@buf = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_hello() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = load i8*, i8** @buf, align 8
  store i8* %3, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %5, i8** %2, align 8
  store i8 22, i8* %4, align 1
  %6 = load i8*, i8** %2, align 8
  %7 = call i32 @PUTSHORT(i32 768, i8* %6)
  %8 = load i8*, i8** %2, align 8
  %9 = call i32 @PUTSHORT(i32 85, i8* %8)
  %10 = load i8*, i8** %2, align 8
  %11 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %11, i8** %2, align 8
  store i8 1, i8* %10, align 1
  %12 = load i8*, i8** %2, align 8
  %13 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %13, i8** %2, align 8
  store i8 0, i8* %12, align 1
  %14 = load i8*, i8** %2, align 8
  %15 = call i32 @PUTSHORT(i32 81, i8* %14)
  %16 = load i8*, i8** %2, align 8
  %17 = call i32 @PUTSHORT(i32 768, i8* %16)
  %18 = load i8*, i8** %2, align 8
  %19 = call i32 @PUTLONG(i32 -1, i8* %18)
  %20 = load i8*, i8** %2, align 8
  %21 = call i32 @PUTLONG(i32 287454020, i8* %20)
  %22 = load i8*, i8** %2, align 8
  %23 = call i32 @PUTLONG(i32 287454020, i8* %22)
  %24 = load i8*, i8** %2, align 8
  %25 = call i32 @PUTLONG(i32 287454020, i8* %24)
  %26 = load i8*, i8** %2, align 8
  %27 = call i32 @PUTLONG(i32 287454020, i8* %26)
  %28 = load i8*, i8** %2, align 8
  %29 = call i32 @PUTLONG(i32 287454020, i8* %28)
  %30 = load i8*, i8** %2, align 8
  %31 = call i32 @PUTLONG(i32 287454020, i8* %30)
  %32 = load i8*, i8** %2, align 8
  %33 = call i32 @PUTLONG(i32 287454020, i8* %32)
  %34 = load i8*, i8** %2, align 8
  %35 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %35, i8** %2, align 8
  store i8 0, i8* %34, align 1
  %36 = load i8*, i8** %2, align 8
  %37 = call i32 @PUTSHORT(i32 42, i8* %36)
  %38 = load i8*, i8** %2, align 8
  %39 = call i32 @PUTSHORT(i32 22, i8* %38)
  %40 = load i8*, i8** %2, align 8
  %41 = call i32 @PUTSHORT(i32 19, i8* %40)
  %42 = load i8*, i8** %2, align 8
  %43 = call i32 @PUTSHORT(i32 10, i8* %42)
  %44 = load i8*, i8** %2, align 8
  %45 = call i32 @PUTSHORT(i32 102, i8* %44)
  %46 = load i8*, i8** %2, align 8
  %47 = call i32 @PUTSHORT(i32 7, i8* %46)
  %48 = load i8*, i8** %2, align 8
  %49 = call i32 @PUTSHORT(i32 5, i8* %48)
  %50 = load i8*, i8** %2, align 8
  %51 = call i32 @PUTSHORT(i32 4, i8* %50)
  %52 = load i8*, i8** %2, align 8
  %53 = call i32 @PUTSHORT(i32 101, i8* %52)
  %54 = load i8*, i8** %2, align 8
  %55 = call i32 @PUTSHORT(i32 100, i8* %54)
  %56 = load i8*, i8** %2, align 8
  %57 = call i32 @PUTSHORT(i32 99, i8* %56)
  %58 = load i8*, i8** %2, align 8
  %59 = call i32 @PUTSHORT(i32 98, i8* %58)
  %60 = load i8*, i8** %2, align 8
  %61 = call i32 @PUTSHORT(i32 97, i8* %60)
  %62 = load i8*, i8** %2, align 8
  %63 = call i32 @PUTSHORT(i32 96, i8* %62)
  %64 = load i8*, i8** %2, align 8
  %65 = call i32 @PUTSHORT(i32 21, i8* %64)
  %66 = load i8*, i8** %2, align 8
  %67 = call i32 @PUTSHORT(i32 18, i8* %66)
  %68 = load i8*, i8** %2, align 8
  %69 = call i32 @PUTSHORT(i32 9, i8* %68)
  %70 = load i8*, i8** %2, align 8
  %71 = call i32 @PUTSHORT(i32 20, i8* %70)
  %72 = load i8*, i8** %2, align 8
  %73 = call i32 @PUTSHORT(i32 17, i8* %72)
  %74 = load i8*, i8** %2, align 8
  %75 = call i32 @PUTSHORT(i32 8, i8* %74)
  %76 = load i8*, i8** %2, align 8
  %77 = call i32 @PUTSHORT(i32 6, i8* %76)
  %78 = load i8*, i8** %2, align 8
  %79 = call i32 @PUTSHORT(i32 3, i8* %78)
  %80 = load i8*, i8** %2, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %2, align 8
  store i8 1, i8* %80, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %2, align 8
  store i8 0, i8* %82, align 1
  %84 = load i8*, i8** %2, align 8
  %85 = load i8*, i8** @buf, align 8
  %86 = ptrtoint i8* %84 to i64
  %87 = ptrtoint i8* %85 to i64
  %88 = sub i64 %86, %87
  %89 = trunc i64 %88 to i32
  store i32 %89, i32* %1, align 4
  %90 = load i32, i32* %1, align 4
  ret i32 %90
}

declare dso_local i32 @PUTSHORT(i32, i8*) #1

declare dso_local i32 @PUTLONG(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
