; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1176.c_ventrilo_udp_head_dec.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1176.c_ventrilo_udp_head_dec.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ventrilo_udp_encdata_head = common dso_local global i64* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ventrilo_udp_head_dec(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i16*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %7 = load i8*, i8** %2, align 8
  %8 = bitcast i8* %7 to i16*
  store i16* %8, i16** %4, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 2
  store i8* %10, i8** %2, align 8
  %11 = load i16*, i16** %4, align 8
  %12 = load i16, i16* %11, align 2
  %13 = call zeroext i16 @ntohs(i16 zeroext %12)
  %14 = load i16*, i16** %4, align 8
  store i16 %13, i16* %14, align 2
  %15 = load i16*, i16** %4, align 8
  %16 = load i16, i16* %15, align 2
  %17 = trunc i16 %16 to i8
  store i8 %17, i8* %5, align 1
  %18 = load i8, i8* %5, align 1
  %19 = icmp ne i8 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %1
  br label %71

21:                                               ; preds = %1
  %22 = load i16*, i16** %4, align 8
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = ashr i32 %24, 8
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %6, align 1
  store i32 0, i32* %3, align 4
  br label %27

27:                                               ; preds = %54, %21
  %28 = load i32, i32* %3, align 4
  %29 = icmp slt i32 %28, 18
  br i1 %29, label %30, label %57

30:                                               ; preds = %27
  %31 = load i64*, i64** @ventrilo_udp_encdata_head, align 8
  %32 = load i8, i8* %6, align 1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds i64, i64* %31, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = load i32, i32* %3, align 4
  %37 = srem i32 %36, 5
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %35, %38
  %40 = load i8*, i8** %2, align 8
  %41 = load i32, i32* %3, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = sub nsw i64 %45, %39
  %47 = trunc i64 %46 to i8
  store i8 %47, i8* %43, align 1
  %48 = load i8, i8* %5, align 1
  %49 = zext i8 %48 to i32
  %50 = load i8, i8* %6, align 1
  %51 = zext i8 %50 to i32
  %52 = add nsw i32 %51, %49
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %6, align 1
  br label %54

54:                                               ; preds = %30
  %55 = load i32, i32* %3, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %3, align 4
  br label %27

57:                                               ; preds = %27
  store i32 0, i32* %3, align 4
  br label %58

58:                                               ; preds = %68, %57
  %59 = load i32, i32* %3, align 4
  %60 = icmp slt i32 %59, 9
  br i1 %60, label %61, label %71

61:                                               ; preds = %58
  %62 = load i16*, i16** %4, align 8
  %63 = getelementptr inbounds i16, i16* %62, i32 1
  store i16* %63, i16** %4, align 8
  %64 = load i16*, i16** %4, align 8
  %65 = load i16, i16* %64, align 2
  %66 = call zeroext i16 @ntohs(i16 zeroext %65)
  %67 = load i16*, i16** %4, align 8
  store i16 %66, i16* %67, align 2
  br label %68

68:                                               ; preds = %61
  %69 = load i32, i32* %3, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %3, align 4
  br label %58

71:                                               ; preds = %20, %58
  ret void
}

declare dso_local zeroext i16 @ntohs(i16 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
