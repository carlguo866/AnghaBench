; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_5191.c_get_localip.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_5191.c_get_localip.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ifaddrs = type { i32, %struct.TYPE_2__*, i32*, %struct.ifaddrs* }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr_in6 = type { i32 }

@AF_INET6 = common dso_local global i64 0, align 8
@IFF_UP = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i32*)* @get_localip to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_localip(i8* %0, i32* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca %struct.ifaddrs*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ifaddrs*, align 8
  store i8* %0, i8** %3, align 8
  store i32* %1, i32** %4, align 8
  store i32 -1, i32* %6, align 4
  %8 = call i64 @getifaddrs(%struct.ifaddrs** %5)
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %66

10:                                               ; preds = %2
  %11 = load %struct.ifaddrs*, %struct.ifaddrs** %5, align 8
  store %struct.ifaddrs* %11, %struct.ifaddrs** %7, align 8
  %12 = load %struct.ifaddrs*, %struct.ifaddrs** %5, align 8
  store %struct.ifaddrs* %12, %struct.ifaddrs** %7, align 8
  br label %13

13:                                               ; preds = %59, %10
  %14 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %15 = icmp ne %struct.ifaddrs* %14, null
  br i1 %15, label %16, label %63

16:                                               ; preds = %13
  %17 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %18 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %17, i32 0, i32 2
  %19 = load i32*, i32** %18, align 8
  %20 = icmp ne i32* %19, null
  br i1 %20, label %21, label %58

21:                                               ; preds = %16
  %22 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %23 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %22, i32 0, i32 1
  %24 = load %struct.TYPE_2__*, %struct.TYPE_2__** %23, align 8
  %25 = icmp ne %struct.TYPE_2__* %24, null
  br i1 %25, label %26, label %58

26:                                               ; preds = %21
  %27 = load i8*, i8** %3, align 8
  %28 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %29 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %28, i32 0, i32 2
  %30 = load i32*, i32** %29, align 8
  %31 = bitcast i32* %30 to i8*
  %32 = call i64 @strcmp(i8* %27, i8* %31)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %49, label %34

34:                                               ; preds = %26
  %35 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %36 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %35, i32 0, i32 1
  %37 = load %struct.TYPE_2__*, %struct.TYPE_2__** %36, align 8
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* @AF_INET6, align 8
  %41 = icmp ne i64 %39, %40
  br i1 %41, label %49, label %42

42:                                               ; preds = %34
  %43 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %44 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = load i32, i32* @IFF_UP, align 4
  %47 = and i32 %45, %46
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %42, %34, %26
  br label %59

50:                                               ; preds = %42
  %51 = load i32*, i32** %4, align 8
  %52 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %53 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %52, i32 0, i32 1
  %54 = load %struct.TYPE_2__*, %struct.TYPE_2__** %53, align 8
  %55 = bitcast %struct.TYPE_2__* %54 to %struct.sockaddr_in6*
  %56 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %55, i32 0, i32 0
  %57 = call i32 @memcpy(i32* %51, i32* %56, i32 16)
  store i32 0, i32* %6, align 4
  br label %63

58:                                               ; preds = %21, %16
  br label %59

59:                                               ; preds = %58, %49
  %60 = load %struct.ifaddrs*, %struct.ifaddrs** %7, align 8
  %61 = getelementptr inbounds %struct.ifaddrs, %struct.ifaddrs* %60, i32 0, i32 3
  %62 = load %struct.ifaddrs*, %struct.ifaddrs** %61, align 8
  store %struct.ifaddrs* %62, %struct.ifaddrs** %7, align 8
  br label %13

63:                                               ; preds = %50, %13
  %64 = load %struct.ifaddrs*, %struct.ifaddrs** %5, align 8
  %65 = call i32 @freeifaddrs(%struct.ifaddrs* %64)
  br label %66

66:                                               ; preds = %63, %2
  %67 = load i32, i32* %6, align 4
  ret i32 %67
}

declare dso_local i64 @getifaddrs(%struct.ifaddrs**) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #1

declare dso_local i32 @freeifaddrs(%struct.ifaddrs*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
