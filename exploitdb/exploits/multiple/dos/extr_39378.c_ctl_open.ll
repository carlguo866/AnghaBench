; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_39378.c_ctl_open.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_39378.c_ctl_open.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ctl_info = type { i32, i64, i32, i32, i32, i32, i32 }
%struct.sockaddr_ctl = type { i32, i64, i32, i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@PF_SYSTEM = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@SYSPROTO_CONTROL = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"failed to open a SYSPROTO_CONTROL socket: %s\00", align 1
@errno = common dso_local global i32 0, align 4
@CONTROL_NAME = common dso_local global i8* null, align 8
@CTLIOCGINFO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [59 x i8] c"Failed to get the control info for control named \22%s\22: %s\0A\00", align 1
@AF_SYSTEM = common dso_local global i32 0, align 4
@AF_SYS_CONTROL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [44 x i8] c"Failed to connect to the control socket: %s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ctl_open() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.ctl_info, align 8
  %4 = alloca %struct.sockaddr_ctl, align 8
  store i32 0, i32* %2, align 4
  %5 = load i32, i32* @PF_SYSTEM, align 4
  %6 = load i32, i32* @SOCK_DGRAM, align 4
  %7 = load i32, i32* @SYSPROTO_CONTROL, align 4
  %8 = call i32 @socket(i32 %5, i32 %6, i32 %7)
  store i32 %8, i32* %1, align 4
  %9 = load i32, i32* %1, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %0
  %12 = load i32, i32* @errno, align 4
  %13 = call i8* @strerror(i32 %12)
  %14 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %13)
  br label %54

15:                                               ; preds = %0
  %16 = bitcast %struct.ctl_info* %3 to %struct.sockaddr_ctl*
  %17 = call i32 @memset(%struct.sockaddr_ctl* %16, i32 0, i32 40)
  %18 = getelementptr inbounds %struct.ctl_info, %struct.ctl_info* %3, i32 0, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = load i8*, i8** @CONTROL_NAME, align 8
  %21 = call i32 @strlcpy(i32 %19, i8* %20, i32 4)
  %22 = load i32, i32* %1, align 4
  %23 = load i32, i32* @CTLIOCGINFO, align 4
  %24 = bitcast %struct.ctl_info* %3 to %struct.sockaddr_ctl*
  %25 = call i32 @ioctl(i32 %22, i32 %23, %struct.sockaddr_ctl* %24)
  store i32 %25, i32* %2, align 4
  %26 = load i32, i32* %2, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %15
  %29 = load i8*, i8** @CONTROL_NAME, align 8
  %30 = load i32, i32* @errno, align 4
  %31 = call i8* @strerror(i32 %30)
  %32 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i8* %29, i8* %31)
  br label %54

33:                                               ; preds = %15
  %34 = call i32 @memset(%struct.sockaddr_ctl* %4, i32 0, i32 40)
  %35 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %4, i32 0, i32 0
  store i32 40, i32* %35, align 8
  %36 = load i32, i32* @AF_SYSTEM, align 4
  %37 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %4, i32 0, i32 5
  store i32 %36, i32* %37, align 4
  %38 = load i32, i32* @AF_SYS_CONTROL, align 4
  %39 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %4, i32 0, i32 4
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %struct.ctl_info, %struct.ctl_info* %3, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %4, i32 0, i32 3
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %4, i32 0, i32 1
  store i64 0, i64* %43, align 8
  %44 = load i32, i32* %1, align 4
  %45 = bitcast %struct.sockaddr_ctl* %4 to %struct.sockaddr*
  %46 = call i32 @connect(i32 %44, %struct.sockaddr* %45, i32 40)
  store i32 %46, i32* %2, align 4
  %47 = load i32, i32* %2, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %33
  %50 = load i32, i32* @errno, align 4
  %51 = call i8* @strerror(i32 %50)
  %52 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %51)
  br label %54

53:                                               ; preds = %33
  br label %54

54:                                               ; preds = %53, %49, %28, %11
  %55 = load i32, i32* %2, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %63

57:                                               ; preds = %54
  %58 = load i32, i32* %1, align 4
  %59 = icmp sge i32 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = load i32, i32* %1, align 4
  %62 = call i32 @close(i32 %61)
  store i32 -1, i32* %1, align 4
  br label %63

63:                                               ; preds = %60, %57, %54
  %64 = load i32, i32* %1, align 4
  ret i32 %64
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @memset(%struct.sockaddr_ctl*, i32, i32) #1

declare dso_local i32 @strlcpy(i32, i8*, i32) #1

declare dso_local i32 @ioctl(i32, i32, %struct.sockaddr_ctl*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
