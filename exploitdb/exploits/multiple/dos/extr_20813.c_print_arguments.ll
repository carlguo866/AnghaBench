; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_print_arguments.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_print_arguments.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Arguments: \0A\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"     *   -i dest_ip = destination ip address such as 1.1.1.1\0A\00", align 1
@.str.2 = private unnamed_addr constant [71 x i8] c"                If last octet is '-', then the address will increment\0A\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"                from 1 to 254 (Class C) on the next loop\0A\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"                and loop must be > 1 or %d (forever).\0A\00", align 1
@FOR_EVER = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [79 x i8] c"                Alternatives = zone=filename.txt or list=filename.txt (ASCII)\0A\00", align 1
@.str.6 = private unnamed_addr constant [73 x i8] c"                For list of alternative options, use  -a instead of -h.\0A\00", align 1
@.str.7 = private unnamed_addr constant [55 x i8] c"     *   -b port# = beginning port number (required).\0A\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"         -e port# = ending port number (optional)\0A\00", align 1
@.str.9 = private unnamed_addr constant [78 x i8] c"         -t = tcp flag options (f=fin,~s=syn,r=reset,~p=push,a=ack,u=urgent)\0A\00", align 1
@.str.10 = private unnamed_addr constant [46 x i8] c"         -v = time_to_live value, default=%d\0A\00", align 1
@DEFAULT_TTL = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [72 x i8] c"         -p protocol = ~6=tcp, 17=udp, use -p option for complete list\0A\00", align 1
@.str.12 = private unnamed_addr constant [57 x i8] c"         -w window_size = value from 0 to ?, default=%d\0A\00", align 1
@DEFAULT_WINSIZE = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [45 x i8] c"         -q tcp_sequence_number, default=%d\0A\00", align 1
@DEFAULT_SEQ = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [65 x i8] c"         -m message_type (~0=none,1=Out-Of-Band,4=Msg_DontRoute\0A\00", align 1
@.str.15 = private unnamed_addr constant [62 x i8] c"         -s seconds = delay between port numbers, default=%d\0A\00", align 1
@DEFAULT_FREQUENCY = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [64 x i8] c"         -o 1 = supress additional output to screen, default=0\0A\00", align 1
@.str.17 = private unnamed_addr constant [77 x i8] c"         -l loop = times to loop through ports/scan, default=%d, %d=forever\0A\00", align 1
@.str.18 = private unnamed_addr constant [53 x i8] c"     * = required     ~ = default parameter values\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @print_arguments() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.2, i64 0, i64 0))
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i64 0, i64 0))
  %5 = load i32, i32* @FOR_EVER, align 4
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 %5)
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5, i64 0, i64 0))
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.6, i64 0, i64 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0))
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0))
  %12 = load i32, i32* @DEFAULT_TTL, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.10, i64 0, i64 0), i32 %12)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0))
  %15 = load i32, i32* @DEFAULT_WINSIZE, align 4
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.12, i64 0, i64 0), i32 %15)
  %17 = load i32, i32* @DEFAULT_SEQ, align 4
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.13, i64 0, i64 0), i32 %17)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.14, i64 0, i64 0))
  %20 = load i32, i32* @DEFAULT_FREQUENCY, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.15, i64 0, i64 0), i32 %20)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.16, i64 0, i64 0))
  %23 = load i32, i32* @FOR_EVER, align 4
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.17, i64 0, i64 0), i32 1, i32 %23)
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.18, i64 0, i64 0))
  %26 = call i32 @exit(i32 -1) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
