; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_41192.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_41192.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i32 }

@.str = private unnamed_addr constant [11 x i8] c"ssl_server\00", align 1
@mbedtls_test_srv_crt = common dso_local global i64 0, align 8
@mbedtls_test_srv_crt_len = common dso_local global i32 0, align 4
@mbedtls_test_cas_pem = common dso_local global i64 0, align 8
@mbedtls_test_cas_pem_len = common dso_local global i32 0, align 4
@mbedtls_test_srv_key = common dso_local global i64 0, align 8
@mbedtls_test_srv_key_len = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"8888\00", align 1
@MBEDTLS_NET_PROTO_TCP = common dso_local global i32 0, align 4
@mbedtls_entropy_func = common dso_local global i32 0, align 4
@MBEDTLS_SSL_IS_SERVER = common dso_local global i32 0, align 4
@MBEDTLS_SSL_TRANSPORT_STREAM = common dso_local global i32 0, align 4
@MBEDTLS_SSL_PRESET_DEFAULT = common dso_local global i32 0, align 4
@mbedtls_ctr_drbg_random = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"TLS-DHE-RSA-WITH-AES-256-GCM-SHA384\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"220 ok\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"EHLO \00", align 1
@.str.5 = private unnamed_addr constant [111 x i8] c"250-SIZE 157286400\0A250-8BITMIME\0A250-STARTTLS\0A250-ENHANCEDSTATUSCODES\0A250-PIPELINING\0A250-CHUNKING\0A250 SMTPUTF8\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"STARTTLS\00", align 1
@mbedtls_net_recv = common dso_local global i32 0, align 4
@MBEDTLS_ERR_SSL_WANT_READ = common dso_local global i32 0, align 4
@MBEDTLS_ERR_SSL_WANT_WRITE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = alloca [2 x i32], align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.TYPE_6__, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %14 = call i32 @mbedtls_net_init(i32* %3)
  %15 = call i32 @mbedtls_net_init(i32* %4)
  %16 = call i32 @mbedtls_ssl_init(i32* %10)
  %17 = call i32 @mbedtls_ssl_config_init(i32* %11)
  %18 = call i32 @mbedtls_x509_crt_init(%struct.TYPE_6__* %12)
  %19 = call i32 @mbedtls_pk_init(i32* %13)
  %20 = call i32 @mbedtls_entropy_init(i32* %8)
  %21 = call i32 @mbedtls_ctr_drbg_init(i32* %9)
  %22 = load i64, i64* @mbedtls_test_srv_crt, align 8
  %23 = inttoptr i64 %22 to i8*
  %24 = load i32, i32* @mbedtls_test_srv_crt_len, align 4
  %25 = call i32 @mbedtls_x509_crt_parse(%struct.TYPE_6__* %12, i8* %23, i32 %24)
  store i32 %25, i32* %2, align 4
  %26 = load i32, i32* %2, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %0
  br label %157

29:                                               ; preds = %0
  %30 = load i64, i64* @mbedtls_test_cas_pem, align 8
  %31 = inttoptr i64 %30 to i8*
  %32 = load i32, i32* @mbedtls_test_cas_pem_len, align 4
  %33 = call i32 @mbedtls_x509_crt_parse(%struct.TYPE_6__* %12, i8* %31, i32 %32)
  store i32 %33, i32* %2, align 4
  %34 = load i32, i32* %2, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %29
  br label %157

37:                                               ; preds = %29
  %38 = load i64, i64* @mbedtls_test_srv_key, align 8
  %39 = inttoptr i64 %38 to i8*
  %40 = load i32, i32* @mbedtls_test_srv_key_len, align 4
  %41 = call i32 @mbedtls_pk_parse_key(i32* %13, i8* %39, i32 %40, i32* null, i32 0)
  store i32 %41, i32* %2, align 4
  %42 = load i32, i32* %2, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %37
  br label %157

45:                                               ; preds = %37
  %46 = load i32, i32* @MBEDTLS_NET_PROTO_TCP, align 4
  %47 = call i32 @mbedtls_net_bind(i32* %3, i32* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %46)
  store i32 %47, i32* %2, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  br label %157

50:                                               ; preds = %45
  %51 = load i32, i32* @mbedtls_entropy_func, align 4
  %52 = load i8*, i8** %6, align 8
  %53 = load i8*, i8** %6, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = call i32 @mbedtls_ctr_drbg_seed(i32* %9, i32 %51, i32* %8, i8* %52, i32 %54)
  store i32 %55, i32* %2, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %50
  br label %157

58:                                               ; preds = %50
  %59 = load i32, i32* @MBEDTLS_SSL_IS_SERVER, align 4
  %60 = load i32, i32* @MBEDTLS_SSL_TRANSPORT_STREAM, align 4
  %61 = load i32, i32* @MBEDTLS_SSL_PRESET_DEFAULT, align 4
  %62 = call i32 @mbedtls_ssl_config_defaults(i32* %11, i32 %59, i32 %60, i32 %61)
  store i32 %62, i32* %2, align 4
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %58
  br label %157

65:                                               ; preds = %58
  %66 = load i32, i32* @mbedtls_ctr_drbg_random, align 4
  %67 = call i32 @mbedtls_ssl_conf_rng(i32* %11, i32 %66, i32* %9)
  %68 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %12, i32 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = call i32 @mbedtls_ssl_conf_ca_chain(i32* %11, i32 %69, i32* null)
  %71 = call i32 @mbedtls_ssl_conf_own_cert(i32* %11, %struct.TYPE_6__* %12, i32* %13)
  store i32 %71, i32* %2, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %65
  br label %157

74:                                               ; preds = %65
  %75 = call i32 @mbedtls_ssl_get_ciphersuite_id(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %76 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %79 = call i32 @mbedtls_ssl_conf_ciphersuites(i32* %11, i32* %78)
  %80 = call i32 @mbedtls_ssl_setup(i32* %10, i32* %11)
  store i32 %80, i32* %2, align 4
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %74
  br label %157

83:                                               ; preds = %74
  br label %84

84:                                               ; preds = %156, %154, %140, %83
  %85 = call i32 @mbedtls_net_free(i32* %4)
  %86 = call i32 @mbedtls_ssl_session_reset(i32* %10)
  %87 = call i32 @mbedtls_net_accept(i32* %3, i32* %4, i32* null, i32 0, i32* null)
  store i32 %87, i32* %2, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %84
  br label %157

90:                                               ; preds = %84
  %91 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %92 = call i32 @sprintf(i8* %91, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %93 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %94 = call i32 @write_and_get_response(i32* %4, i8* %93, i32 1024)
  store i32 %94, i32* %2, align 4
  %95 = load i32, i32* %2, align 4
  %96 = icmp slt i32 %95, 5
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  br label %157

98:                                               ; preds = %90
  %99 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %100 = call i64 @strncmp(i8* %99, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 5)
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  br label %157

103:                                              ; preds = %98
  %104 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %105 = call i32 @sprintf(i8* %104, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.5, i64 0, i64 0))
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %107 = call i32 @write_and_get_response(i32* %4, i8* %106, i32 1024)
  store i32 %107, i32* %2, align 4
  %108 = load i32, i32* %2, align 4
  %109 = icmp slt i32 %108, 8
  br i1 %109, label %110, label %111

110:                                              ; preds = %103
  br label %157

111:                                              ; preds = %103
  %112 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %113 = call i64 @strncmp(i8* %112, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 8)
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  br label %157

116:                                              ; preds = %111
  %117 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %118 = call i32 @sprintf(i8* %117, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %119 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %121 = call i32 @strlen(i8* %120)
  %122 = call i32 @mbedtls_net_send(i32* %4, i8* %119, i32 %121)
  store i32 %122, i32* %2, align 4
  %123 = load i32, i32* %2, align 4
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %116
  br label %157

126:                                              ; preds = %116
  %127 = load i32, i32* @mbedtls_net_recv, align 4
  %128 = call i32 @mbedtls_ssl_set_bio(i32* %10, i32* %4, i32 (i32*, i8*, i32)* @mbedtls_net_send, i32 %127, i32* null)
  br label %129

129:                                              ; preds = %141, %126
  %130 = call i32 @mbedtls_ssl_handshake(i32* %10)
  store i32 %130, i32* %2, align 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %142

132:                                              ; preds = %129
  %133 = load i32, i32* %2, align 4
  %134 = load i32, i32* @MBEDTLS_ERR_SSL_WANT_READ, align 4
  %135 = icmp ne i32 %133, %134
  br i1 %135, label %136, label %141

136:                                              ; preds = %132
  %137 = load i32, i32* %2, align 4
  %138 = load i32, i32* @MBEDTLS_ERR_SSL_WANT_WRITE, align 4
  %139 = icmp ne i32 %137, %138
  br i1 %139, label %140, label %141

140:                                              ; preds = %136
  br label %84

141:                                              ; preds = %136, %132
  br label %129

142:                                              ; preds = %129
  br label %143

143:                                              ; preds = %155, %142
  %144 = call i32 @mbedtls_ssl_close_notify(i32* %10)
  store i32 %144, i32* %2, align 4
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %156

146:                                              ; preds = %143
  %147 = load i32, i32* %2, align 4
  %148 = load i32, i32* @MBEDTLS_ERR_SSL_WANT_READ, align 4
  %149 = icmp ne i32 %147, %148
  br i1 %149, label %150, label %155

150:                                              ; preds = %146
  %151 = load i32, i32* %2, align 4
  %152 = load i32, i32* @MBEDTLS_ERR_SSL_WANT_WRITE, align 4
  %153 = icmp ne i32 %151, %152
  br i1 %153, label %154, label %155

154:                                              ; preds = %150
  br label %84

155:                                              ; preds = %150, %146
  br label %143

156:                                              ; preds = %143
  store i32 0, i32* %2, align 4
  br label %84

157:                                              ; preds = %125, %115, %110, %102, %97, %89, %82, %73, %64, %57, %49, %44, %36, %28
  %158 = call i32 @mbedtls_net_free(i32* %4)
  %159 = call i32 @mbedtls_net_free(i32* %3)
  %160 = call i32 @mbedtls_x509_crt_free(%struct.TYPE_6__* %12)
  %161 = call i32 @mbedtls_pk_free(i32* %13)
  %162 = call i32 @mbedtls_ssl_free(i32* %10)
  %163 = call i32 @mbedtls_ssl_config_free(i32* %11)
  %164 = call i32 @mbedtls_ctr_drbg_free(i32* %9)
  %165 = call i32 @mbedtls_entropy_free(i32* %8)
  %166 = load i32, i32* %2, align 4
  ret i32 %166
}

declare dso_local i32 @mbedtls_net_init(i32*) #1

declare dso_local i32 @mbedtls_ssl_init(i32*) #1

declare dso_local i32 @mbedtls_ssl_config_init(i32*) #1

declare dso_local i32 @mbedtls_x509_crt_init(%struct.TYPE_6__*) #1

declare dso_local i32 @mbedtls_pk_init(i32*) #1

declare dso_local i32 @mbedtls_entropy_init(i32*) #1

declare dso_local i32 @mbedtls_ctr_drbg_init(i32*) #1

declare dso_local i32 @mbedtls_x509_crt_parse(%struct.TYPE_6__*, i8*, i32) #1

declare dso_local i32 @mbedtls_pk_parse_key(i32*, i8*, i32, i32*, i32) #1

declare dso_local i32 @mbedtls_net_bind(i32*, i32*, i8*, i32) #1

declare dso_local i32 @mbedtls_ctr_drbg_seed(i32*, i32, i32*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @mbedtls_ssl_config_defaults(i32*, i32, i32, i32) #1

declare dso_local i32 @mbedtls_ssl_conf_rng(i32*, i32, i32*) #1

declare dso_local i32 @mbedtls_ssl_conf_ca_chain(i32*, i32, i32*) #1

declare dso_local i32 @mbedtls_ssl_conf_own_cert(i32*, %struct.TYPE_6__*, i32*) #1

declare dso_local i32 @mbedtls_ssl_get_ciphersuite_id(i8*) #1

declare dso_local i32 @mbedtls_ssl_conf_ciphersuites(i32*, i32*) #1

declare dso_local i32 @mbedtls_ssl_setup(i32*, i32*) #1

declare dso_local i32 @mbedtls_net_free(i32*) #1

declare dso_local i32 @mbedtls_ssl_session_reset(i32*) #1

declare dso_local i32 @mbedtls_net_accept(i32*, i32*, i32*, i32, i32*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @write_and_get_response(i32*, i8*, i32) #1

declare dso_local i64 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @mbedtls_net_send(i32*, i8*, i32) #1

declare dso_local i32 @mbedtls_ssl_set_bio(i32*, i32*, i32 (i32*, i8*, i32)*, i32, i32*) #1

declare dso_local i32 @mbedtls_ssl_handshake(i32*) #1

declare dso_local i32 @mbedtls_ssl_close_notify(i32*) #1

declare dso_local i32 @mbedtls_x509_crt_free(%struct.TYPE_6__*) #1

declare dso_local i32 @mbedtls_pk_free(i32*) #1

declare dso_local i32 @mbedtls_ssl_free(i32*) #1

declare dso_local i32 @mbedtls_ssl_config_free(i32*) #1

declare dso_local i32 @mbedtls_ctr_drbg_free(i32*) #1

declare dso_local i32 @mbedtls_entropy_free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
