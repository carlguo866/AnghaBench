; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1176.c_ventrilo_udp_head_enc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1176.c_ventrilo_udp_head_enc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VENTRILO_RAND = common dso_local global i32 0, align 4
@ventrilo_udp_encdata_head = common dso_local global i64* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ventrilo_udp_head_enc(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i16*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %7 = load i8*, i8** %2, align 8
  %8 = bitcast i8* %7 to i16*
  store i16* %8, i16** %4, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 2
  store i8* %10, i8** %2, align 8
  %11 = load i32, i32* @VENTRILO_RAND, align 4
  %12 = mul nsw i32 %11, 214013
  %13 = add nsw i32 %12, 2531011
  %14 = ashr i32 %13, 16
  %15 = and i32 %14, 32767
  %16 = trunc i32 %15 to i16
  %17 = load i16*, i16** %4, align 8
  store i16 %16, i16* %17, align 2
  %18 = load i16*, i16** %4, align 8
  %19 = load i16, i16* %18, align 2
  %20 = trunc i16 %19 to i8
  store i8 %20, i8* %5, align 1
  %21 = load i16*, i16** %4, align 8
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = ashr i32 %23, 8
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %6, align 1
  %26 = load i8, i8* %6, align 1
  %27 = icmp ne i8 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %1
  store i8 69, i8* %6, align 1
  %29 = load i8, i8* %6, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 %30, 8
  %32 = load i16*, i16** %4, align 8
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = or i32 %34, %31
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %32, align 2
  br label %37

37:                                               ; preds = %28, %1
  store i32 0, i32* %3, align 4
  br label %38

38:                                               ; preds = %48, %37
  %39 = load i32, i32* %3, align 4
  %40 = icmp slt i32 %39, 10
  br i1 %40, label %41, label %51

41:                                               ; preds = %38
  %42 = load i16*, i16** %4, align 8
  %43 = load i16, i16* %42, align 2
  %44 = call zeroext i16 @htons(i16 zeroext %43)
  %45 = load i16*, i16** %4, align 8
  store i16 %44, i16* %45, align 2
  %46 = load i16*, i16** %4, align 8
  %47 = getelementptr inbounds i16, i16* %46, i32 1
  store i16* %47, i16** %4, align 8
  br label %48

48:                                               ; preds = %41
  %49 = load i32, i32* %3, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %3, align 4
  br label %38

51:                                               ; preds = %38
  store i32 0, i32* %3, align 4
  br label %52

52:                                               ; preds = %79, %51
  %53 = load i32, i32* %3, align 4
  %54 = icmp slt i32 %53, 18
  br i1 %54, label %55, label %82

55:                                               ; preds = %52
  %56 = load i64*, i64** @ventrilo_udp_encdata_head, align 8
  %57 = load i8, i8* %6, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds i64, i64* %56, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = load i32, i32* %3, align 4
  %62 = srem i32 %61, 5
  %63 = sext i32 %62 to i64
  %64 = add nsw i64 %60, %63
  %65 = load i8*, i8** %2, align 8
  %66 = load i32, i32* %3, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = add nsw i64 %70, %64
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %68, align 1
  %73 = load i8, i8* %5, align 1
  %74 = zext i8 %73 to i32
  %75 = load i8, i8* %6, align 1
  %76 = zext i8 %75 to i32
  %77 = add nsw i32 %76, %74
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %6, align 1
  br label %79

79:                                               ; preds = %55
  %80 = load i32, i32* %3, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %3, align 4
  br label %52

82:                                               ; preds = %52
  ret void
}

declare dso_local zeroext i16 @htons(i16 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
