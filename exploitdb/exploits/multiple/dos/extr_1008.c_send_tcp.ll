; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1008.c_send_tcp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1008.c_send_tcp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tcphdr = type { i32, i64, i64, i8*, i64, i64, i8*, i8*, i8* }
%struct.ip = type { i32, i32, i32, i64, i8*, i8*, i64, i32, %struct.TYPE_5__, %struct.TYPE_4__ }
%struct.TYPE_5__ = type { i8* }
%struct.TYPE_4__ = type { i8* }
%struct.sockaddr_in = type { %struct.TYPE_6__, i32 }
%struct.TYPE_6__ = type { i8* }
%struct.sockaddr = type { i32 }

@TCPOPT_NOP = common dso_local global i8 0, align 1
@TCPOPT_TIMESTAMP = common dso_local global i8 0, align 1
@IPPROTO_TCP = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"sendto\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i8*, i8*, i32, i32, i8*, i8*)* @send_tcp to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @send_tcp(i32 %0, i8* %1, i8* %2, i32 %3, i32 %4, i8* %5, i8* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca [1600 x i8], align 16
  %17 = alloca %struct.tcphdr*, align 8
  %18 = alloca %struct.ip*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %struct.sockaddr_in, align 8
  store i32 %0, i32* %9, align 4
  store i8* %1, i8** %10, align 8
  store i8* %2, i8** %11, align 8
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i8* %5, i8** %14, align 8
  store i8* %6, i8** %15, align 8
  %24 = getelementptr inbounds [1600 x i8], [1600 x i8]* %16, i64 0, i64 0
  %25 = call i32 @memset(i8* %24, i32 0, i32 1600)
  %26 = getelementptr inbounds [1600 x i8], [1600 x i8]* %16, i64 0, i64 0
  %27 = getelementptr inbounds i8, i8* %26, i64 72
  %28 = getelementptr inbounds i8, i8* %27, i64 72
  store i8* %28, i8** %19, align 8
  store i32 0, i32* %20, align 4
  %29 = load i8, i8* @TCPOPT_NOP, align 1
  %30 = load i8*, i8** %19, align 8
  %31 = load i32, i32* %20, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %20, align 4
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 %33
  store i8 %29, i8* %34, align 1
  %35 = load i8, i8* @TCPOPT_NOP, align 1
  %36 = load i8*, i8** %19, align 8
  %37 = load i32, i32* %20, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %20, align 4
  %39 = sext i32 %37 to i64
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  store i8 %35, i8* %40, align 1
  %41 = load i8, i8* @TCPOPT_TIMESTAMP, align 1
  %42 = load i8*, i8** %19, align 8
  %43 = load i32, i32* %20, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %20, align 4
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds i8, i8* %42, i64 %45
  store i8 %41, i8* %46, align 1
  %47 = load i8*, i8** %19, align 8
  %48 = load i32, i32* %20, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %20, align 4
  %50 = sext i32 %48 to i64
  %51 = getelementptr inbounds i8, i8* %47, i64 %50
  store i8 10, i8* %51, align 1
  %52 = load i8*, i8** %15, align 8
  %53 = call i8* @htonl(i8* %52)
  store i8* %53, i8** %15, align 8
  %54 = load i8*, i8** %19, align 8
  %55 = load i32, i32* %20, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = call i32 @memcpy(i8* %57, i8** %15, i32 8)
  %59 = load i32, i32* %20, align 4
  %60 = sext i32 %59 to i64
  %61 = add i64 %60, 8
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %20, align 4
  %63 = call i8* @htonl(i8* null)
  store i8* %63, i8** %15, align 8
  %64 = load i8*, i8** %19, align 8
  %65 = load i32, i32* %20, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  %68 = call i32 @memcpy(i8* %67, i8** %15, i32 8)
  %69 = load i32, i32* %20, align 4
  %70 = sext i32 %69 to i64
  %71 = add i64 %70, 8
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %20, align 4
  %73 = load i32, i32* %20, align 4
  %74 = sext i32 %73 to i64
  %75 = add i64 144, %74
  %76 = trunc i64 %75 to i32
  store i32 %76, i32* %21, align 4
  %77 = getelementptr inbounds [1600 x i8], [1600 x i8]* %16, i64 0, i64 0
  %78 = bitcast i8* %77 to %struct.ip*
  store %struct.ip* %78, %struct.ip** %18, align 8
  %79 = load i8*, i8** %10, align 8
  %80 = load %struct.ip*, %struct.ip** %18, align 8
  %81 = getelementptr inbounds %struct.ip, %struct.ip* %80, i32 0, i32 9
  %82 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %81, i32 0, i32 0
  store i8* %79, i8** %82, align 8
  %83 = load i8*, i8** %11, align 8
  %84 = load %struct.ip*, %struct.ip** %18, align 8
  %85 = getelementptr inbounds %struct.ip, %struct.ip* %84, i32 0, i32 8
  %86 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %85, i32 0, i32 0
  store i8* %83, i8** %86, align 8
  %87 = load i32, i32* @IPPROTO_TCP, align 4
  %88 = load %struct.ip*, %struct.ip** %18, align 8
  %89 = getelementptr inbounds %struct.ip, %struct.ip* %88, i32 0, i32 7
  store i32 %87, i32* %89, align 8
  %90 = load i32, i32* %20, align 4
  %91 = sext i32 %90 to i64
  %92 = add i64 72, %91
  %93 = trunc i64 %92 to i32
  %94 = call i8* @htons(i32 %93)
  %95 = load %struct.ip*, %struct.ip** %18, align 8
  %96 = getelementptr inbounds %struct.ip, %struct.ip* %95, i32 0, i32 5
  store i8* %94, i8** %96, align 8
  %97 = getelementptr inbounds [1600 x i8], [1600 x i8]* %16, i64 0, i64 0
  %98 = getelementptr inbounds i8, i8* %97, i64 72
  %99 = bitcast i8* %98 to %struct.tcphdr*
  store %struct.tcphdr* %99, %struct.tcphdr** %17, align 8
  %100 = load i32, i32* %12, align 4
  %101 = call i8* @htons(i32 %100)
  %102 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %103 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %102, i32 0, i32 8
  store i8* %101, i8** %103, align 8
  %104 = load i32, i32* %13, align 4
  %105 = call i8* @htons(i32 %104)
  %106 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %107 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %106, i32 0, i32 7
  store i8* %105, i8** %107, align 8
  %108 = load i8*, i8** %14, align 8
  %109 = call i8* @htonl(i8* %108)
  %110 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %111 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %110, i32 0, i32 6
  store i8* %109, i8** %111, align 8
  %112 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %113 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %112, i32 0, i32 5
  store i64 0, i64* %113, align 8
  %114 = load i32, i32* %20, align 4
  %115 = sext i32 %114 to i64
  %116 = add i64 72, %115
  %117 = udiv i64 %116, 4
  %118 = trunc i64 %117 to i32
  %119 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %120 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %119, i32 0, i32 0
  store i32 %118, i32* %120, align 8
  %121 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %122 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %121, i32 0, i32 4
  store i64 0, i64* %122, align 8
  %123 = call i8* @htons(i32 16384)
  %124 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %125 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %124, i32 0, i32 3
  store i8* %123, i8** %125, align 8
  %126 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %127 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %126, i32 0, i32 1
  store i64 0, i64* %127, align 8
  %128 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %129 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %128, i32 0, i32 2
  store i64 0, i64* %129, align 8
  %130 = load %struct.ip*, %struct.ip** %18, align 8
  %131 = bitcast %struct.ip* %130 to i32*
  %132 = load i32, i32* %21, align 4
  %133 = call i64 @checksum(i32* %131, i32 %132)
  %134 = load %struct.tcphdr*, %struct.tcphdr** %17, align 8
  %135 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %134, i32 0, i32 1
  store i64 %133, i64* %135, align 8
  %136 = load %struct.ip*, %struct.ip** %18, align 8
  %137 = getelementptr inbounds %struct.ip, %struct.ip* %136, i32 0, i32 0
  store i32 4, i32* %137, align 8
  %138 = load %struct.ip*, %struct.ip** %18, align 8
  %139 = getelementptr inbounds %struct.ip, %struct.ip* %138, i32 0, i32 1
  store i32 5, i32* %139, align 4
  %140 = load %struct.ip*, %struct.ip** %18, align 8
  %141 = getelementptr inbounds %struct.ip, %struct.ip* %140, i32 0, i32 6
  store i64 0, i64* %141, align 8
  %142 = load i32, i32* %21, align 4
  %143 = call i8* @htons(i32 %142)
  %144 = load %struct.ip*, %struct.ip** %18, align 8
  %145 = getelementptr inbounds %struct.ip, %struct.ip* %144, i32 0, i32 5
  store i8* %143, i8** %145, align 8
  %146 = call i32 (...) @arc4random()
  %147 = srem i32 %146, 65536
  %148 = call i8* @htons(i32 %147)
  %149 = load %struct.ip*, %struct.ip** %18, align 8
  %150 = getelementptr inbounds %struct.ip, %struct.ip* %149, i32 0, i32 4
  store i8* %148, i8** %150, align 8
  %151 = load %struct.ip*, %struct.ip** %18, align 8
  %152 = getelementptr inbounds %struct.ip, %struct.ip* %151, i32 0, i32 3
  store i64 0, i64* %152, align 8
  %153 = load %struct.ip*, %struct.ip** %18, align 8
  %154 = getelementptr inbounds %struct.ip, %struct.ip* %153, i32 0, i32 2
  store i32 64, i32* %154, align 8
  %155 = load i32, i32* @AF_INET, align 4
  %156 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 1
  store i32 %155, i32* %156, align 8
  %157 = load i8*, i8** %10, align 8
  %158 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %23, i32 0, i32 0
  %159 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %158, i32 0, i32 0
  store i8* %157, i8** %159, align 8
  %160 = load i32, i32* %9, align 4
  %161 = getelementptr inbounds [1600 x i8], [1600 x i8]* %16, i64 0, i64 0
  %162 = load i32, i32* %21, align 4
  %163 = bitcast %struct.sockaddr_in* %23 to %struct.sockaddr*
  %164 = call i32 @sendto(i32 %160, i8* %161, i32 %162, i32 0, %struct.sockaddr* %163, i32 16)
  store i32 %164, i32* %22, align 4
  %165 = load i32, i32* %22, align 4
  %166 = load i32, i32* %21, align 4
  %167 = icmp ne i32 %165, %166
  br i1 %167, label %168, label %170

168:                                              ; preds = %7
  %169 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %8, align 4
  br label %171

170:                                              ; preds = %7
  store i32 0, i32* %8, align 4
  br label %171

171:                                              ; preds = %170, %168
  %172 = load i32, i32* %8, align 4
  ret i32 %172
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htonl(i8*) #1

declare dso_local i32 @memcpy(i8*, i8**, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i64 @checksum(i32*, i32) #1

declare dso_local i32 @arc4random(...) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
