; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_170.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_170.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr = type { i32 }
%struct.addrinfo = type { %struct.sockaddr*, i32 }
%struct.sockaddr_in = type { i32 }

@.str = private unnamed_addr constant [154 x i8] c"Ethereal EIGRP Dissector TLV_IP_INT Long IP Address Overflow\0Aproof of concept code\0ACopyright (C) 2004 R<E9>mi Denis-Courmont <ethereal@simphalempin.com>\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr*, align 8
  %7 = alloca %struct.addrinfo, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @puts(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 2
  br i1 %12, label %13, label %18

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @usage(i8* %16)
  store i32 %17, i32* %3, align 4
  br label %44

18:                                               ; preds = %2
  %19 = call i32 @memset(%struct.addrinfo* %7, i32 0, i32 16)
  %20 = load i32, i32* @PF_INET, align 4
  %21 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %7, i32 0, i32 1
  store i32 %20, i32* %21, align 8
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @getaddrinfo(i8* %24, i32* null, %struct.addrinfo* %7, %struct.addrinfo** %8)
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %9, align 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %18
  %29 = load i32, i32* @stderr, align 4
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = load i32, i32* %9, align 4
  %34 = call i8* @gai_strerror(i32 %33)
  %35 = call i32 @fprintf(i32 %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* %32, i8* %34)
  store i32 1, i32* %3, align 4
  br label %44

36:                                               ; preds = %18
  %37 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %38 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %37, i32 0, i32 0
  %39 = load %struct.sockaddr*, %struct.sockaddr** %38, align 8
  store %struct.sockaddr* %39, %struct.sockaddr** %6, align 8
  br label %40

40:                                               ; preds = %36
  %41 = load %struct.sockaddr*, %struct.sockaddr** %6, align 8
  %42 = bitcast %struct.sockaddr* %41 to %struct.sockaddr_in*
  %43 = call i32 @proof(%struct.sockaddr_in* %42)
  store i32 %43, i32* %3, align 4
  br label %44

44:                                               ; preds = %40, %28, %13
  %45 = load i32, i32* %3, align 4
  ret i32 %45
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @memset(%struct.addrinfo*, i32, i32) #1

declare dso_local i32 @getaddrinfo(i8*, i32*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, i8*) #1

declare dso_local i8* @gai_strerror(i32) #1

declare dso_local i32 @proof(%struct.sockaddr_in*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
