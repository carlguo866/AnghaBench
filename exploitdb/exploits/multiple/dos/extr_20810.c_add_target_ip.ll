; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20810.c_add_target_ip.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20810.c_add_target_ip.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target = type { %struct.target*, %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i64 }
%struct.in_addr = type { i64 }

@INADDR_NONE = common dso_local global i64 0, align 8
@INADDR_ANY = common dso_local global i64 0, align 8
@debug = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [29 x i8] c"Adding %s:%u to target list\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"add_target_ip(%s, %s): malloc(%d) failed\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@defport = common dso_local global i32 0, align 4
@list = common dso_local global %struct.target* null, align 8
@cursor = common dso_local global %struct.target* null, align 8
@targets = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add_target_ip(i8* %0, %struct.in_addr* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %struct.in_addr*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.target*, align 8
  store i8* %0, i8** %5, align 8
  store %struct.in_addr* %1, %struct.in_addr** %6, align 8
  store i32 %2, i32* %7, align 4
  %9 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %10 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* @INADDR_NONE, align 8
  %13 = icmp eq i64 %11, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %3
  %15 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %16 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = load i64, i64* @INADDR_ANY, align 8
  %19 = icmp eq i64 %17, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %14, %3
  store i32 -1, i32* %4, align 4
  br label %79

21:                                               ; preds = %14
  %22 = load i64, i64* @debug, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %21
  %25 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %26 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %25, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = call i8* @inet_ntoa(i64 %27)
  %29 = load i32, i32* %7, align 4
  %30 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* %28, i32 %29)
  br label %31

31:                                               ; preds = %24, %21
  %32 = call %struct.target* @malloc(i32 32)
  store %struct.target* %32, %struct.target** %8, align 8
  %33 = load %struct.target*, %struct.target** %8, align 8
  %34 = icmp ne %struct.target* %33, null
  br i1 %34, label %42, label %35

35:                                               ; preds = %31
  %36 = load i8*, i8** %5, align 8
  %37 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %38 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = call i8* @inet_ntoa(i64 %39)
  %41 = call i32 @crash(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i8* %36, i8* %40, i32 32)
  br label %42

42:                                               ; preds = %35, %31
  %43 = load %struct.target*, %struct.target** %8, align 8
  %44 = call i32 @memset(%struct.target* %43, i32 0, i32 32)
  %45 = load i32, i32* @AF_INET, align 4
  %46 = load %struct.target*, %struct.target** %8, align 8
  %47 = getelementptr inbounds %struct.target, %struct.target* %46, i32 0, i32 1
  %48 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %47, i32 0, i32 2
  store i32 %45, i32* %48, align 8
  %49 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %50 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = load %struct.target*, %struct.target** %8, align 8
  %53 = getelementptr inbounds %struct.target, %struct.target* %52, i32 0, i32 1
  %54 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %53, i32 0, i32 1
  %55 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %54, i32 0, i32 0
  store i64 %51, i64* %55, align 8
  %56 = load i32, i32* %7, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %42
  %59 = load i32, i32* %7, align 4
  br label %62

60:                                               ; preds = %42
  %61 = load i32, i32* @defport, align 4
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i32 [ %59, %58 ], [ %61, %60 ]
  %64 = load %struct.target*, %struct.target** %8, align 8
  %65 = getelementptr inbounds %struct.target, %struct.target* %64, i32 0, i32 1
  %66 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %65, i32 0, i32 0
  store i32 %63, i32* %66, align 8
  %67 = load %struct.target*, %struct.target** @list, align 8
  %68 = icmp ne %struct.target* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %62
  %70 = load %struct.target*, %struct.target** %8, align 8
  store %struct.target* %70, %struct.target** @list, align 8
  br label %75

71:                                               ; preds = %62
  %72 = load %struct.target*, %struct.target** %8, align 8
  %73 = load %struct.target*, %struct.target** @cursor, align 8
  %74 = getelementptr inbounds %struct.target, %struct.target* %73, i32 0, i32 0
  store %struct.target* %72, %struct.target** %74, align 8
  br label %75

75:                                               ; preds = %71, %69
  %76 = load %struct.target*, %struct.target** %8, align 8
  store %struct.target* %76, %struct.target** @cursor, align 8
  %77 = load i32, i32* @targets, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* @targets, align 4
  store i32 0, i32* %4, align 4
  br label %79

79:                                               ; preds = %75, %20
  %80 = load i32, i32* %4, align 4
  ret i32 %80
}

declare dso_local i32 @printf(i8*, i8*, i32) #1

declare dso_local i8* @inet_ntoa(i64) #1

declare dso_local %struct.target* @malloc(i32) #1

declare dso_local i32 @crash(i8*, i8*, i8*, i32) #1

declare dso_local i32 @memset(%struct.target*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
