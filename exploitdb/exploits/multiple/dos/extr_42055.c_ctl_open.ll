; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_42055.c_ctl_open.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_42055.c_ctl_open.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ctl_info = type { i32, i64, i32, i32, i32, i32, i32 }
%struct.sockaddr_ctl = type { i32, i64, i32, i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@PF_SYSTEM = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@SYSPROTO_CONTROL = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"failed to open a SYSPROTO_CONTROL socket: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@CTLIOCGINFO = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [59 x i8] c"Failed to get the control info for control named \22%s\22: %s\0A\00", align 1
@AF_SYSTEM = common dso_local global i32 0, align 4
@AF_SYS_CONTROL = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [45 x i8] c"Failed to connect to the control socket: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ctl_open(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.ctl_info, align 8
  %6 = alloca %struct.sockaddr_ctl, align 8
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %4, align 4
  %7 = load i32, i32* @PF_SYSTEM, align 4
  %8 = load i32, i32* @SOCK_DGRAM, align 4
  %9 = load i32, i32* @SYSPROTO_CONTROL, align 4
  %10 = call i32 @socket(i32 %7, i32 %8, i32 %9)
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %3, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %1
  %14 = load i32, i32* @errno, align 4
  %15 = call i8* @strerror(i32 %14)
  %16 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8* %15)
  br label %56

17:                                               ; preds = %1
  %18 = bitcast %struct.ctl_info* %5 to %struct.sockaddr_ctl*
  %19 = call i32 @memset(%struct.sockaddr_ctl* %18, i32 0, i32 40)
  %20 = getelementptr inbounds %struct.ctl_info, %struct.ctl_info* %5, i32 0, i32 6
  %21 = load i32, i32* %20, align 8
  %22 = load i8*, i8** %2, align 8
  %23 = call i32 @strlcpy(i32 %21, i8* %22, i32 4)
  %24 = load i32, i32* %3, align 4
  %25 = load i32, i32* @CTLIOCGINFO, align 4
  %26 = bitcast %struct.ctl_info* %5 to %struct.sockaddr_ctl*
  %27 = call i32 @ioctl(i32 %24, i32 %25, %struct.sockaddr_ctl* %26)
  store i32 %27, i32* %4, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %17
  %31 = load i8*, i8** %2, align 8
  %32 = load i32, i32* @errno, align 4
  %33 = call i8* @strerror(i32 %32)
  %34 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i8* %31, i8* %33)
  br label %56

35:                                               ; preds = %17
  %36 = call i32 @memset(%struct.sockaddr_ctl* %6, i32 0, i32 40)
  %37 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %6, i32 0, i32 0
  store i32 40, i32* %37, align 8
  %38 = load i32, i32* @AF_SYSTEM, align 4
  %39 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %6, i32 0, i32 5
  store i32 %38, i32* %39, align 4
  %40 = load i32, i32* @AF_SYS_CONTROL, align 4
  %41 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %6, i32 0, i32 4
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %struct.ctl_info, %struct.ctl_info* %5, i32 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %6, i32 0, i32 3
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.sockaddr_ctl, %struct.sockaddr_ctl* %6, i32 0, i32 1
  store i64 0, i64* %45, align 8
  %46 = load i32, i32* %3, align 4
  %47 = bitcast %struct.sockaddr_ctl* %6 to %struct.sockaddr*
  %48 = call i32 @connect(i32 %46, %struct.sockaddr* %47, i32 40)
  store i32 %48, i32* %4, align 4
  %49 = load i32, i32* %4, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %35
  %52 = load i32, i32* @errno, align 4
  %53 = call i8* @strerror(i32 %52)
  %54 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i8* %53)
  br label %56

55:                                               ; preds = %35
  br label %56

56:                                               ; preds = %55, %51, %30, %13
  %57 = load i32, i32* %4, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = load i32, i32* %3, align 4
  %61 = icmp sge i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i32, i32* %3, align 4
  %64 = call i32 @close(i32 %63)
  store i32 -1, i32* %3, align 4
  br label %65

65:                                               ; preds = %62, %59, %56
  %66 = load i32, i32* %3, align 4
  ret i32 %66
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i32 @memset(%struct.sockaddr_ctl*, i32, i32) #1

declare dso_local i32 @strlcpy(i32, i8*, i32) #1

declare dso_local i32 @ioctl(i32, i32, %struct.sockaddr_ctl*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
