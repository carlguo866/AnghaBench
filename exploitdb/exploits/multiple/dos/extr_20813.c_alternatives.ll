; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_alternatives.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20813.c_alternatives.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [52 x i8] c"\0AAlternative command line arguments for option -i\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [68 x i8] c"    You can create two types of files that latierra can use to get\0A\00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"    a list of IP addresses, a simple ASCII file with each IP address\0A\00", align 1
@.str.3 = private unnamed_addr constant [70 x i8] c"    appearing on each line or better yet, a DNS zone file created by\0A\00", align 1
@.str.4 = private unnamed_addr constant [75 x i8] c"    nslookup.  If you are unfamiliar with nslookup, specify a '-n' on the\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"    command line of latierra.\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [77 x i8] c"    Basically, latierra will walk down the list and send the spoofed packet\0A\00", align 1
@.str.7 = private unnamed_addr constant [76 x i8] c"    to each IP address.  Once the list is complete, and loop > 1, the list\0A\00", align 1
@.str.8 = private unnamed_addr constant [76 x i8] c"    is repeated.   To specify that the '-i' option should use a zone file,\0A\00", align 1
@.str.9 = private unnamed_addr constant [74 x i8] c"    specify \22zone=filename.txt\22 instead of an IP address.  To specify a \0A\00", align 1
@.str.10 = private unnamed_addr constant [72 x i8] c"    simple ASCII list of IP addresses, use \22list=filename.txt\22.  Lines\0A\00", align 1
@.str.11 = private unnamed_addr constant [72 x i8] c"    beginning with ';' or '[' are ignored.  Lines that are not an 'A' \0A\00", align 1
@.str.12 = private unnamed_addr constant [57 x i8] c"    record (second column)in a zone file will ignored.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @alternatives() #0 {
  %1 = call i32 @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.1, i64 0, i64 0))
  %3 = call i32 @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.2, i64 0, i64 0))
  %4 = call i32 @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.3, i64 0, i64 0))
  %5 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.4, i64 0, i64 0))
  %6 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %7 = call i32 @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.6, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.7, i64 0, i64 0))
  %9 = call i32 @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.8, i64 0, i64 0))
  %10 = call i32 @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.9, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.10, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.12, i64 0, i64 0))
  %14 = call i32 @exit(i32 -1) #3
  unreachable
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
