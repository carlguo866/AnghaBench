; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46248.c_create_voucher.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46248.c_create_voucher.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { %struct.TYPE_2__, [2 x i32] }
%struct.TYPE_2__ = type { i32, i32, i32 }

@host = common dso_local global i64 0, align 8
@MACH_PORT_NULL = common dso_local global i64 0, align 8
@MACH_VOUCHER_ATTR_KEY_USER_DATA = common dso_local global i32 0, align 4
@MACH_VOUCHER_ATTR_USER_DATA_STORE = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64 (i32)* @create_voucher to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @create_voucher(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca %struct.anon, align 1
  %5 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  %6 = load i64, i64* @host, align 8
  %7 = load i64, i64* @MACH_PORT_NULL, align 8
  %8 = icmp ne i64 %6, %7
  %9 = zext i1 %8 to i32
  %10 = call i32 @assert(i32 %9)
  %11 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %11, i64* %3, align 8
  %12 = bitcast %struct.anon* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 20, i1 false)
  %13 = load i32, i32* @MACH_VOUCHER_ATTR_KEY_USER_DATA, align 4
  %14 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 0
  %15 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %14, i32 0, i32 2
  store i32 %13, i32* %15, align 1
  %16 = load i32, i32* @MACH_VOUCHER_ATTR_USER_DATA_STORE, align 4
  %17 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 0
  %18 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %17, i32 0, i32 1
  store i32 %16, i32* %18, align 1
  %19 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 0
  store i32 8, i32* %20, align 1
  %21 = call i32 (...) @getpid()
  %22 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 1
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0, i64 0
  store i32 %21, i32* %23, align 1
  %24 = load i32, i32* %2, align 4
  %25 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 1
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %25, i64 0, i64 1
  store i32 %24, i32* %26, align 1
  %27 = load i64, i64* @host, align 8
  %28 = ptrtoint %struct.anon* %4 to i32
  %29 = call i64 @host_create_mach_voucher(i64 %27, i32 %28, i32 20, i64* %3)
  store i64 %29, i64* %5, align 8
  %30 = load i64, i64* %5, align 8
  %31 = load i64, i64* @KERN_SUCCESS, align 8
  %32 = icmp eq i64 %30, %31
  %33 = zext i1 %32 to i32
  %34 = call i32 @assert(i32 %33)
  %35 = load i64, i64* %3, align 8
  %36 = load i64, i64* @MACH_PORT_NULL, align 8
  %37 = icmp ne i64 %35, %36
  %38 = zext i1 %37 to i32
  %39 = call i32 @assert(i32 %38)
  %40 = load i64, i64* %3, align 8
  ret i64 %40
}

declare dso_local i32 @assert(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @getpid(...) #1

declare dso_local i64 @host_create_mach_voucher(i64, i32, i32, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
