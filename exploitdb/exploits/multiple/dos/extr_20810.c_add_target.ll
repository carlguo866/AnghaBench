; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20810.c_add_target.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_20810.c_add_target.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64* }
%struct.in_addr = type { i32 }

@errno = common dso_local global i64 0, align 8
@h_errno = common dso_local global i64 0, align 8
@TRY_AGAIN = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [25 x i8] c"Failed to resolve %s: %s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add_target(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.hostent*, align 8
  %6 = alloca %struct.in_addr*, align 8
  %7 = alloca %struct.in_addr, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 0, i64* %9, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %84

13:                                               ; preds = %1
  %14 = load i8*, i8** %3, align 8
  %15 = call i8* @strchr(i8* %14, i8 signext 58)
  store i8* %15, i8** %8, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %28

17:                                               ; preds = %13
  %18 = load i8*, i8** %8, align 8
  store i8 0, i8* %18, align 1
  %19 = load i8*, i8** %8, align 8
  %20 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %20, i8** %8, align 8
  %21 = load i8*, i8** %8, align 8
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = load i8*, i8** %8, align 8
  %26 = call i64 @strtoul(i8* %25, i32* null, i32 0)
  store i64 %26, i64* %9, align 8
  br label %27

27:                                               ; preds = %24, %17
  br label %28

28:                                               ; preds = %27, %13
  %29 = load i8*, i8** %3, align 8
  %30 = call i64 @inet_aton(i8* %29, %struct.in_addr* %7)
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = load i8*, i8** %3, align 8
  %34 = load i64, i64* %9, align 8
  %35 = call i32 @add_target_ip(i8* %33, %struct.in_addr* %7, i64 %34)
  store i32 %35, i32* %2, align 4
  br label %84

36:                                               ; preds = %28
  store i64 0, i64* @errno, align 8
  %37 = load i8*, i8** %3, align 8
  %38 = call %struct.hostent* @gethostbyname(i8* %37)
  store %struct.hostent* %38, %struct.hostent** %5, align 8
  %39 = load %struct.hostent*, %struct.hostent** %5, align 8
  %40 = icmp ne %struct.hostent* %39, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = load i64, i64* @h_errno, align 8
  %43 = load i64, i64* @TRY_AGAIN, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = call i32 @u_sleep(i32 500000)
  %47 = load i8*, i8** %3, align 8
  %48 = call %struct.hostent* @gethostbyname(i8* %47)
  store %struct.hostent* %48, %struct.hostent** %5, align 8
  br label %49

49:                                               ; preds = %45, %41, %36
  %50 = load %struct.hostent*, %struct.hostent** %5, align 8
  %51 = icmp ne %struct.hostent* %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  %53 = load i8*, i8** %3, align 8
  %54 = load i64, i64* @h_errno, align 8
  %55 = call i32 @hstrerror(i64 %54)
  %56 = call i32 @crash(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %53, i32 %55)
  br label %57

57:                                               ; preds = %52, %49
  store i32 0, i32* %4, align 4
  br label %58

58:                                               ; preds = %80, %57
  %59 = load %struct.hostent*, %struct.hostent** %5, align 8
  %60 = getelementptr inbounds %struct.hostent, %struct.hostent* %59, i32 0, i32 0
  %61 = load i64*, i64** %60, align 8
  %62 = load i32, i32* %4, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i64, i64* %61, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = icmp ne i64 %65, 0
  br i1 %66, label %67, label %83

67:                                               ; preds = %58
  %68 = load %struct.hostent*, %struct.hostent** %5, align 8
  %69 = getelementptr inbounds %struct.hostent, %struct.hostent* %68, i32 0, i32 0
  %70 = load i64*, i64** %69, align 8
  %71 = load i32, i32* %4, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i64, i64* %70, i64 %72
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %74 to %struct.in_addr*
  store %struct.in_addr* %75, %struct.in_addr** %6, align 8
  %76 = load i8*, i8** %3, align 8
  %77 = load %struct.in_addr*, %struct.in_addr** %6, align 8
  %78 = load i64, i64* %9, align 8
  %79 = call i32 @add_target_ip(i8* %76, %struct.in_addr* %77, i64 %78)
  br label %80

80:                                               ; preds = %67
  %81 = load i32, i32* %4, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %4, align 4
  br label %58

83:                                               ; preds = %58
  store i32 0, i32* %2, align 4
  br label %84

84:                                               ; preds = %83, %32, %12
  %85 = load i32, i32* %2, align 4
  ret i32 %85
}

declare dso_local i8* @strchr(i8*, i8 signext) #1

declare dso_local i64 @strtoul(i8*, i32*, i32) #1

declare dso_local i64 @inet_aton(i8*, %struct.in_addr*) #1

declare dso_local i32 @add_target_ip(i8*, %struct.in_addr*, i64) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @u_sleep(i32) #1

declare dso_local i32 @crash(i8*, i8*, i32) #1

declare dso_local i32 @hstrerror(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
