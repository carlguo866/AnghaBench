; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_unreal_send_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_unreal_send_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }

@first_time = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [36 x i8] c" players_per_IP limit or timed out \00", align 1
@ONESEC = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @unreal_send_recv(i32 %0, i32* %1, i32 %2, i32* %3, i32 %4, %struct.sockaddr_in* %5, i32* %6, i32** %7) #0 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.sockaddr_in*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32**, align 8
  %18 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32* %1, i32** %11, align 8
  store i32 %2, i32* %12, align 4
  store i32* %3, i32** %13, align 8
  store i32 %4, i32* %14, align 4
  store %struct.sockaddr_in* %5, %struct.sockaddr_in** %15, align 8
  store i32* %6, i32** %16, align 8
  store i32** %7, i32*** %17, align 8
  %19 = load i32, i32* %10, align 4
  %20 = load i32*, i32** %11, align 8
  %21 = load i32, i32* %12, align 4
  %22 = load i32*, i32** %13, align 8
  %23 = load i32, i32* %14, align 4
  %24 = load %struct.sockaddr_in*, %struct.sockaddr_in** %15, align 8
  %25 = load i64, i64* @first_time, align 8
  %26 = call i32 @send_recv(i32 %19, i32* %20, i32 %21, i32* %22, i32 %23, %struct.sockaddr_in* %24, i64 %25)
  store i32 %26, i32* %18, align 4
  %27 = load i32, i32* %18, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %39

29:                                               ; preds = %8
  %30 = load i32, i32* %18, align 4
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = call i32 (...) @std_err()
  br label %34

34:                                               ; preds = %32, %29
  %35 = call i32 @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0))
  %36 = load i32, i32* @ONESEC, align 4
  %37 = call i32 @sleep(i32 %36)
  %38 = load i32**, i32*** %17, align 8
  store i32* null, i32** %38, align 8
  store i32 -1, i32* %9, align 4
  br label %55

39:                                               ; preds = %8
  %40 = load i64, i64* @first_time, align 8
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  store i64 0, i64* @first_time, align 8
  br label %43

43:                                               ; preds = %42, %39
  %44 = load i32*, i32** %13, align 8
  %45 = load i32, i32* %18, align 4
  %46 = load i32*, i32** %16, align 8
  %47 = call i32* @unreal_parse_pck(i32* %44, i32 %45, i32* %46)
  %48 = load i32**, i32*** %17, align 8
  store i32* %47, i32** %48, align 8
  %49 = load i32**, i32*** %17, align 8
  %50 = load i32*, i32** %49, align 8
  %51 = icmp ne i32* %50, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %43
  store i32 -1, i32* %9, align 4
  br label %55

53:                                               ; preds = %43
  %54 = load i32, i32* %18, align 4
  store i32 %54, i32* %9, align 4
  br label %55

55:                                               ; preds = %53, %52, %34
  %56 = load i32, i32* %9, align 4
  ret i32 %56
}

declare dso_local i32 @send_recv(i32, i32*, i32, i32*, i32, %struct.sockaddr_in*, i64) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32* @unreal_parse_pck(i32*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
