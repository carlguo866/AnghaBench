; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1671.c_sockz.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_1671.c_sockz.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i8* }
%struct.sockaddr_in = type { i32, %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.pthread_args = type { i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"sockz: Can`t create socket\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"\0Asockz: Can`t connect to %s:%d\0A\00", align 1
@thread_data = common dso_local global %struct.TYPE_4__* null, align 8
@close_func = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"sockz: Can`t create thread\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sockz(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = alloca %struct.pthread_args*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %14 = load i8*, i8** %2, align 8
  %15 = bitcast i8* %14 to %struct.pthread_args*
  store %struct.pthread_args* %15, %struct.pthread_args** %4, align 8
  %16 = load %struct.pthread_args*, %struct.pthread_args** %4, align 8
  %17 = getelementptr inbounds %struct.pthread_args, %struct.pthread_args* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** %6, align 8
  %19 = load %struct.pthread_args*, %struct.pthread_args** %4, align 8
  %20 = getelementptr inbounds %struct.pthread_args, %struct.pthread_args* %19, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %7, align 8
  %22 = load %struct.pthread_args*, %struct.pthread_args** %4, align 8
  %23 = getelementptr inbounds %struct.pthread_args, %struct.pthread_args* %22, i32 0, i32 2
  %24 = load i8*, i8** %23, align 8
  store i8* %24, i8** %8, align 8
  %25 = load i8*, i8** %7, align 8
  %26 = call i32 @atoi(i8* %25)
  store i32 %26, i32* %9, align 4
  %27 = load i8*, i8** %8, align 8
  %28 = call i32 @atoi(i8* %27)
  store i32 %28, i32* %13, align 4
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %12, align 4
  %32 = load i32, i32* @AF_INET, align 4
  %33 = load i32, i32* @SOCK_STREAM, align 4
  %34 = call i32 @socket(i32 %32, i32 %33, i32 0)
  store i32 %34, i32* %12, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %1
  %37 = call i32 @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %38 = call i32 @exit(i32 -1) #3
  unreachable

39:                                               ; preds = %1
  %40 = load i32, i32* @AF_INET, align 4
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 3
  store i32 %40, i32* %41, align 4
  %42 = load i32, i32* %9, align 4
  %43 = call i32 @htons(i32 %42)
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  store i32 %43, i32* %44, align 4
  %45 = load i8*, i8** %6, align 8
  %46 = call i32 @inet_addr(i8* %45)
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  %48 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %47, i32 0, i32 0
  store i32 %46, i32* %48, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %50 = call i32 @bzero(i32* %49, i32 8)
  %51 = load i32, i32* %12, align 4
  %52 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %53 = call i32 @connect(i32 %51, %struct.sockaddr* %52, i32 16)
  store i32 %53, i32* %10, align 4
  %54 = load i32, i32* %10, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %39
  %57 = load i8*, i8** %6, align 8
  %58 = load i32, i32* %9, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i8* %57, i32 %58)
  %60 = load i32, i32* %12, align 4
  %61 = call i32 @close(i32 %60)
  %62 = call i32 @exit(i32 -1) #3
  unreachable

63:                                               ; preds = %39
  %64 = load i32, i32* %12, align 4
  %65 = load %struct.TYPE_4__*, %struct.TYPE_4__** @thread_data, align 8
  %66 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %65, i64 0
  %67 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %66, i32 0, i32 0
  store i32 %64, i32* %67, align 8
  %68 = load i8*, i8** %8, align 8
  %69 = load %struct.TYPE_4__*, %struct.TYPE_4__** @thread_data, align 8
  %70 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %69, i64 0
  %71 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %70, i32 0, i32 1
  store i8* %68, i8** %71, align 8
  %72 = load %struct.TYPE_4__*, %struct.TYPE_4__** @thread_data, align 8
  %73 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %72, i64 0
  %74 = bitcast %struct.TYPE_4__* %73 to i8*
  %75 = call i32 @pthread_create(i32* %5, i32* null, i8* bitcast (i32* @close_func to i8*), i8* %74)
  %76 = icmp eq i32 %75, -1
  %77 = zext i1 %76 to i32
  store i32 %77, i32* %11, align 4
  br i1 %76, label %78, label %81

78:                                               ; preds = %63
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %80 = call i32 @exit(i32 -1) #3
  unreachable

81:                                               ; preds = %63
  ret void
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @close(i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
