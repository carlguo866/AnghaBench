; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_read_unreal_index.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_read_unreal_index.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@u3fix = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @read_unreal_index(i32* %0, i32* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  %13 = load i32*, i32** %4, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 0
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %8, align 4
  %16 = load i32*, i32** %4, align 8
  %17 = getelementptr inbounds i32, i32* %16, i64 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %9, align 4
  %19 = load i32*, i32** %4, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 2
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %10, align 4
  %22 = load i32*, i32** %4, align 8
  %23 = getelementptr inbounds i32, i32* %22, i64 3
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %11, align 4
  %25 = load i32*, i32** %4, align 8
  %26 = getelementptr inbounds i32, i32* %25, i64 4
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %12, align 4
  %28 = load i64, i64* @u3fix, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %2
  %31 = load i32, i32* %8, align 4
  %32 = load i32, i32* %9, align 4
  %33 = shl i32 %32, 8
  %34 = or i32 %31, %33
  %35 = load i32, i32* %10, align 4
  %36 = shl i32 %35, 16
  %37 = or i32 %34, %36
  %38 = load i32, i32* %11, align 4
  %39 = shl i32 %38, 24
  %40 = or i32 %37, %39
  %41 = load i32*, i32** %5, align 8
  store i32 %40, i32* %41, align 4
  store i32 4, i32* %3, align 4
  br label %102

42:                                               ; preds = %2
  store i32 0, i32* %7, align 4
  store i32 1, i32* %6, align 4
  %43 = load i32, i32* %8, align 4
  %44 = and i32 %43, 64
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %86

46:                                               ; preds = %42
  %47 = load i32, i32* %6, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %6, align 4
  %49 = load i32, i32* %9, align 4
  %50 = and i32 %49, 128
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %80

52:                                               ; preds = %46
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %6, align 4
  %55 = load i32, i32* %10, align 4
  %56 = and i32 %55, 128
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %74

58:                                               ; preds = %52
  %59 = load i32, i32* %6, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %6, align 4
  %61 = load i32, i32* %11, align 4
  %62 = and i32 %61, 128
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %58
  %65 = load i32, i32* %6, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %6, align 4
  %67 = load i32, i32* %12, align 4
  store i32 %67, i32* %7, align 4
  br label %68

68:                                               ; preds = %64, %58
  %69 = load i32, i32* %7, align 4
  %70 = shl i32 %69, 7
  %71 = load i32, i32* %11, align 4
  %72 = and i32 %71, 127
  %73 = or i32 %70, %72
  store i32 %73, i32* %7, align 4
  br label %74

74:                                               ; preds = %68, %52
  %75 = load i32, i32* %7, align 4
  %76 = shl i32 %75, 7
  %77 = load i32, i32* %10, align 4
  %78 = and i32 %77, 127
  %79 = or i32 %76, %78
  store i32 %79, i32* %7, align 4
  br label %80

80:                                               ; preds = %74, %46
  %81 = load i32, i32* %7, align 4
  %82 = shl i32 %81, 7
  %83 = load i32, i32* %9, align 4
  %84 = and i32 %83, 127
  %85 = or i32 %82, %84
  store i32 %85, i32* %7, align 4
  br label %86

86:                                               ; preds = %80, %42
  %87 = load i32, i32* %7, align 4
  %88 = shl i32 %87, 6
  %89 = load i32, i32* %8, align 4
  %90 = and i32 %89, 63
  %91 = or i32 %88, %90
  store i32 %91, i32* %7, align 4
  %92 = load i32, i32* %8, align 4
  %93 = and i32 %92, 128
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %86
  %96 = load i32, i32* %7, align 4
  %97 = sub nsw i32 0, %96
  store i32 %97, i32* %7, align 4
  br label %98

98:                                               ; preds = %95, %86
  %99 = load i32, i32* %7, align 4
  %100 = load i32*, i32** %5, align 8
  store i32 %99, i32* %100, align 4
  %101 = load i32, i32* %6, align 4
  store i32 %101, i32* %3, align 4
  br label %102

102:                                              ; preds = %98, %30
  %103 = load i32, i32* %3, align 4
  ret i32 %103
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
