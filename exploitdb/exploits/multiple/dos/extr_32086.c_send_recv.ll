; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_send_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_32086.c_send_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"\0AError: socket timeout, no reply received\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_recv(i32 %0, i32* %1, i32 %2, i32* %3, i32 %4, %struct.sockaddr_in* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store i32* %1, i32** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32* %3, i32** %12, align 8
  store i32 %4, i32* %13, align 4
  store %struct.sockaddr_in* %5, %struct.sockaddr_in** %14, align 8
  store i32 %6, i32* %15, align 4
  store i32 2, i32* %16, align 4
  %18 = load i32*, i32** %10, align 8
  %19 = icmp ne i32* %18, null
  br i1 %19, label %20, label %47

20:                                               ; preds = %7
  br label %21

21:                                               ; preds = %45, %20
  %22 = load i32, i32* %16, align 4
  %23 = add nsw i32 %22, -1
  store i32 %23, i32* %16, align 4
  %24 = icmp ne i32 %22, 0
  br i1 %24, label %25, label %46

25:                                               ; preds = %21
  %26 = load i32, i32* @stdout, align 4
  %27 = call i32 @fputc(i8 signext 46, i32 %26)
  %28 = load i32, i32* %9, align 4
  %29 = load i32*, i32** %10, align 8
  %30 = load i32, i32* %11, align 4
  %31 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %32 = bitcast %struct.sockaddr_in* %31 to %struct.sockaddr*
  %33 = call i64 @sendto(i32 %28, i32* %29, i32 %30, i32 0, %struct.sockaddr* %32, i32 4)
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %25
  br label %75

36:                                               ; preds = %25
  %37 = load i32*, i32** %12, align 8
  %38 = icmp ne i32* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %36
  store i32 0, i32* %8, align 4
  br label %81

40:                                               ; preds = %36
  %41 = load i32, i32* %9, align 4
  %42 = call i64 @timeout(i32 %41, i32 2)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  br label %46

45:                                               ; preds = %40
  br label %21

46:                                               ; preds = %44, %21
  br label %53

47:                                               ; preds = %7
  %48 = load i32, i32* %9, align 4
  %49 = call i64 @timeout(i32 %48, i32 3)
  %50 = icmp slt i64 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  store i32 -1, i32* %16, align 4
  br label %52

52:                                               ; preds = %51, %47
  br label %53

53:                                               ; preds = %52, %46
  %54 = load i32, i32* %16, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %53
  %57 = load i32, i32* %15, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  store i32 -2, i32* %8, align 4
  br label %81

60:                                               ; preds = %56
  %61 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %62 = call i32 @exit(i32 1) #3
  unreachable

63:                                               ; preds = %53
  %64 = load i32, i32* @stdout, align 4
  %65 = call i32 @fputc(i8 signext 46, i32 %64)
  %66 = load i32, i32* %9, align 4
  %67 = load i32*, i32** %12, align 8
  %68 = load i32, i32* %13, align 4
  %69 = call i32 @recvfrom(i32 %66, i32* %67, i32 %68, i32 0, i32* null, i32* null)
  store i32 %69, i32* %17, align 4
  %70 = load i32, i32* %17, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %63
  br label %75

73:                                               ; preds = %63
  %74 = load i32, i32* %17, align 4
  store i32 %74, i32* %8, align 4
  br label %81

75:                                               ; preds = %72, %35
  %76 = load i32, i32* %15, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = call i32 (...) @std_err()
  br label %80

80:                                               ; preds = %78, %75
  store i32 -1, i32* %8, align 4
  br label %81

81:                                               ; preds = %80, %73, %59, %39
  %82 = load i32, i32* %8, align 4
  ret i32 %82
}

declare dso_local i32 @fputc(i8 signext, i32) #1

declare dso_local i64 @sendto(i32, i32*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @timeout(i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @recvfrom(i32, i32*, i32, i32, i32*, i32*) #1

declare dso_local i32 @std_err(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
