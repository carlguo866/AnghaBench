; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46299.c_recover_shared_port_child.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/multiple/dos/extr_46299.c_recover_shared_port_child.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { %struct.TYPE_8__, i32 }
%struct.TYPE_8__ = type { i32, i32, i64, i64 }
%struct.TYPE_7__ = type { %struct.TYPE_5__, i32, i32 }
%struct.TYPE_5__ = type { i64 }

@MACH_PORT_NULL = common dso_local global i64 0, align 8
@STOLEN_SPECIAL_PORT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"child getting stashed port\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"child got stashed port\00", align 1
@MACH_PORT_RIGHT_RECEIVE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"child allocating reply port\00", align 1
@MACH_MSG_TYPE_COPY_SEND = common dso_local global i32 0, align 4
@MACH_MSG_TYPE_MAKE_SEND_ONCE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"child sending task port message\00", align 1
@.str.4 = private unnamed_addr constant [52 x i8] c"child sent hello message to parent over shared port\00", align 1
@MACH_RCV_MSG = common dso_local global i32 0, align 4
@MACH_MSG_TIMEOUT_NONE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [29 x i8] c"child receiving stolen port\0A\00", align 1
@.str.6 = private unnamed_addr constant [46 x i8] c"child received invalid stolen port to restore\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"child restoring special port\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"child restored stolen port\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @recover_shared_port_child() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.TYPE_6__, align 8
  %5 = alloca %struct.TYPE_7__, align 8
  %6 = alloca i64, align 8
  %7 = load i64, i64* @MACH_PORT_NULL, align 8
  store i64 %7, i64* %2, align 8
  %8 = call i32 (...) @mach_task_self()
  %9 = load i32, i32* @STOLEN_SPECIAL_PORT, align 4
  %10 = call i32 @task_get_special_port(i32 %8, i32 %9, i64* %2)
  store i32 %10, i32* %1, align 4
  %11 = load i32, i32* %1, align 4
  %12 = call i32 @MACH_ERR(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 %11)
  %13 = call i32 @LOG(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %14 = call i32 (...) @mach_task_self()
  %15 = load i32, i32* @MACH_PORT_RIGHT_RECEIVE, align 4
  %16 = call i32 @mach_port_allocate(i32 %14, i32 %15, i64* %3)
  store i32 %16, i32* %1, align 4
  %17 = load i32, i32* %1, align 4
  %18 = call i32 @MACH_ERR(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i32 %17)
  %19 = bitcast %struct.TYPE_6__* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 32, i1 false)
  %20 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %4, i32 0, i32 0
  %21 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %20, i32 0, i32 0
  store i32 32, i32* %21, align 8
  %22 = load i64, i64* %3, align 8
  %23 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %4, i32 0, i32 0
  %24 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %23, i32 0, i32 3
  store i64 %22, i64* %24, align 8
  %25 = load i64, i64* %2, align 8
  %26 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %4, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %26, i32 0, i32 2
  store i64 %25, i64* %27, align 8
  %28 = load i32, i32* @MACH_MSG_TYPE_COPY_SEND, align 4
  %29 = load i32, i32* @MACH_MSG_TYPE_MAKE_SEND_ONCE, align 4
  %30 = call i32 @MACH_MSGH_BITS(i32 %28, i32 %29)
  %31 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %4, i32 0, i32 0
  %32 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %31, i32 0, i32 1
  store i32 %30, i32* %32, align 4
  %33 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %4, i32 0, i32 0
  %34 = call i32 @mach_msg_send(%struct.TYPE_8__* %33)
  store i32 %34, i32* %1, align 4
  %35 = load i32, i32* %1, align 4
  %36 = call i32 @MACH_ERR(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i32 %35)
  %37 = call i32 @LOG(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i64 0, i64 0))
  %38 = bitcast %struct.TYPE_7__* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false)
  %39 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %5, i32 0, i32 1
  %40 = load i32, i32* @MACH_RCV_MSG, align 4
  %41 = load i64, i64* %3, align 8
  %42 = load i32, i32* @MACH_MSG_TIMEOUT_NONE, align 4
  %43 = load i64, i64* @MACH_PORT_NULL, align 8
  %44 = call i32 @mach_msg(i32* %39, i32 %40, i32 0, i32 16, i64 %41, i32 %42, i64 %43)
  store i32 %44, i32* %1, align 4
  %45 = load i32, i32* %1, align 4
  %46 = call i32 @MACH_ERR(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %45)
  %47 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %5, i32 0, i32 0
  %48 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %6, align 8
  %50 = load i64, i64* %6, align 8
  %51 = load i64, i64* @MACH_PORT_NULL, align 8
  %52 = icmp eq i64 %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %0
  %54 = call i32 @FAIL(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0))
  br label %55

55:                                               ; preds = %53, %0
  %56 = call i32 (...) @mach_task_self()
  %57 = load i32, i32* @STOLEN_SPECIAL_PORT, align 4
  %58 = load i64, i64* %6, align 8
  %59 = call i32 @task_set_special_port(i32 %56, i32 %57, i64 %58)
  store i32 %59, i32* %1, align 4
  %60 = load i32, i32* %1, align 4
  %61 = call i32 @MACH_ERR(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 %60)
  %62 = call i32 @LOG(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %63 = load i64, i64* %2, align 8
  ret i64 %63
}

declare dso_local i32 @task_get_special_port(i32, i32, i64*) #1

declare dso_local i32 @mach_task_self(...) #1

declare dso_local i32 @MACH_ERR(i8*, i32) #1

declare dso_local i32 @LOG(i8*) #1

declare dso_local i32 @mach_port_allocate(i32, i32, i64*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @MACH_MSGH_BITS(i32, i32) #1

declare dso_local i32 @mach_msg_send(%struct.TYPE_8__*) #1

declare dso_local i32 @mach_msg(i32*, i32, i32, i32, i64, i32, i64) #1

declare dso_local i32 @FAIL(i8*) #1

declare dso_local i32 @task_set_special_port(i32, i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
