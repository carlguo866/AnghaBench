; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19277.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_19277.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@OFFS = common dso_local global i32 0, align 4
@BUFSIZE = common dso_local global i32 0, align 4
@ADDRS = common dso_local global i32 0, align 4
@ALIGN = common dso_local global i32 0, align 4
@nop = common dso_local global i8* null, align 8
@asmcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [42 x i8] c"bufsize too small, code is %d bytes long\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Can't malloc\0A\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"address=%p\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"buflen=%d\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@ALIGN2 = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [8 x i8], align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @OFFS, align 4
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* @BUFSIZE, align 4
  store i32 %16, i32* %10, align 4
  %17 = load i32, i32* @ADDRS, align 4
  store i32 %17, i32* %11, align 4
  %18 = load i32, i32* @ALIGN, align 4
  store i32 %18, i32* %12, align 4
  %19 = load i8*, i8** @nop, align 8
  %20 = call i32 @strlen(i8* %19)
  store i32 %20, i32* %14, align 4
  %21 = load i32, i32* %4, align 4
  %22 = icmp sgt i32 %21, 1
  br i1 %22, label %23, label %28

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  store i32 %27, i32* %10, align 4
  br label %28

28:                                               ; preds = %23, %2
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 2
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  store i32 %35, i32* %9, align 4
  br label %36

36:                                               ; preds = %31, %28
  %37 = load i32, i32* %4, align 4
  %38 = icmp sgt i32 %37, 3
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 3
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @atoi(i8* %42)
  store i32 %43, i32* %11, align 4
  br label %44

44:                                               ; preds = %39, %36
  %45 = load i32, i32* %4, align 4
  %46 = icmp sgt i32 %45, 4
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 4
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @atoi(i8* %50)
  store i32 %51, i32* %12, align 4
  br label %52

52:                                               ; preds = %47, %44
  %53 = load i32, i32* %10, align 4
  %54 = load i8*, i8** @asmcode, align 8
  %55 = call i32 @strlen(i8* %54)
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %57, label %62

57:                                               ; preds = %52
  %58 = load i8*, i8** @asmcode, align 8
  %59 = call i32 @strlen(i8* %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i32 %59)
  %61 = call i32 @exit(i32 1) #3
  unreachable

62:                                               ; preds = %52
  %63 = load i32, i32* %10, align 4
  %64 = load i32, i32* @ADDRS, align 4
  %65 = shl i32 %64, 2
  %66 = add nsw i32 %63, %65
  %67 = load i32, i32* %14, align 4
  %68 = add nsw i32 %66, %67
  %69 = add nsw i32 %68, 1
  %70 = call i8* @malloc(i32 %69)
  store i8* %70, i8** %6, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %72, label %75

72:                                               ; preds = %62
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %74 = call i32 @exit(i32 1) #3
  unreachable

75:                                               ; preds = %62
  %76 = load i64, i64* @jump, align 8
  %77 = inttoptr i64 %76 to i64 (...)*
  %78 = call i64 (...) %77()
  %79 = load i32, i32* %9, align 4
  %80 = sext i32 %79 to i64
  %81 = add i64 %78, %80
  %82 = trunc i64 %81 to i32
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 0
  %84 = bitcast i8* %83 to i32*
  store i32 %82, i32* %84, align 1
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 0
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 %87)
  %89 = load i8*, i8** %6, align 8
  %90 = load i8*, i8** @nop, align 8
  %91 = call i32 @strcpy(i8* %89, i8* %90)
  %92 = load i8*, i8** %6, align 8
  %93 = load i32, i32* %14, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  store i8* %95, i8** %7, align 8
  %96 = load i32, i32* %12, align 4
  %97 = sub nsw i32 4, %96
  %98 = load i8*, i8** %6, align 8
  %99 = sext i32 %97 to i64
  %100 = getelementptr inbounds i8, i8* %98, i64 %99
  store i8* %100, i8** %6, align 8
  store i32 0, i32* %13, align 4
  br label %101

101:                                              ; preds = %115, %75
  %102 = load i32, i32* %13, align 4
  %103 = load i32, i32* %10, align 4
  %104 = icmp slt i32 %102, %103
  br i1 %104, label %105, label %118

105:                                              ; preds = %101
  %106 = load i8*, i8** @nop, align 8
  %107 = load i32, i32* %13, align 4
  %108 = load i32, i32* %14, align 4
  %109 = srem i32 %107, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %106, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = load i8*, i8** %7, align 8
  %114 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %114, i8** %7, align 8
  store i8 %112, i8* %113, align 1
  br label %115

115:                                              ; preds = %105
  %116 = load i32, i32* %13, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %13, align 4
  br label %101

118:                                              ; preds = %101
  %119 = load i8*, i8** %7, align 8
  %120 = load i8*, i8** @asmcode, align 8
  %121 = call i32 @strlen(i8* %120)
  %122 = sext i32 %121 to i64
  %123 = sub i64 0, %122
  %124 = getelementptr inbounds i8, i8* %119, i64 %123
  %125 = load i8*, i8** @asmcode, align 8
  %126 = load i8*, i8** @asmcode, align 8
  %127 = call i32 @strlen(i8* %126)
  %128 = call i32 @memcpy(i8* %124, i8* %125, i32 %127)
  store i32 0, i32* %13, align 4
  br label %129

129:                                              ; preds = %142, %118
  %130 = load i32, i32* %13, align 4
  %131 = load i32, i32* %11, align 4
  %132 = shl i32 %131, 2
  %133 = icmp slt i32 %130, %132
  br i1 %133, label %134, label %145

134:                                              ; preds = %129
  %135 = load i32, i32* %13, align 4
  %136 = sext i32 %135 to i64
  %137 = urem i64 %136, 4
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = load i8*, i8** %7, align 8
  %141 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %141, i8** %7, align 8
  store i8 %139, i8* %140, align 1
  br label %142

142:                                              ; preds = %134
  %143 = load i32, i32* %13, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %13, align 4
  br label %129

145:                                              ; preds = %129
  %146 = load i8*, i8** %7, align 8
  store i8 0, i8* %146, align 1
  %147 = load i8*, i8** %6, align 8
  %148 = call i32 @strlen(i8* %147)
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 %148)
  %150 = load i32, i32* @stdout, align 4
  %151 = call i32 @fflush(i32 %150)
  %152 = load i32, i32* %11, align 4
  %153 = shl i32 %152, 2
  %154 = load i8*, i8** %7, align 8
  %155 = sext i32 %153 to i64
  %156 = sub i64 0, %155
  %157 = getelementptr inbounds i8, i8* %154, i64 %156
  store i8* %157, i8** %7, align 8
  %158 = load i32, i32* @ALIGN2, align 4
  %159 = add nsw i32 1204, %158
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 0
  %161 = bitcast i8* %160 to i32*
  %162 = load i32, i32* %161, align 1
  %163 = add nsw i32 %162, %159
  store i32 %163, i32* %161, align 1
  store i32 0, i32* %13, align 4
  br label %164

164:                                              ; preds = %175, %145
  %165 = load i32, i32* %13, align 4
  %166 = icmp slt i32 %165, 64
  br i1 %166, label %167, label %178

167:                                              ; preds = %164
  %168 = load i32, i32* %13, align 4
  %169 = and i32 %168, 3
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = load i8*, i8** %7, align 8
  %174 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %174, i8** %7, align 8
  store i8 %172, i8* %173, align 1
  br label %175

175:                                              ; preds = %167
  %176 = load i32, i32* %13, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %13, align 4
  br label %164

178:                                              ; preds = %164
  %179 = load i8*, i8** %6, align 8
  %180 = load i32, i32* @ALIGN, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %179, i64 %181
  %183 = getelementptr inbounds i8, i8* %182, i64 536
  %184 = getelementptr inbounds i8, i8* %183, i64 -24
  store i8* %184, i8** %7, align 8
  %185 = load i64, i64* @jump, align 8
  %186 = inttoptr i64 %185 to i64 (...)*
  %187 = call i64 (...) %186()
  %188 = load i32, i32* @OFFS, align 4
  %189 = sext i32 %188 to i64
  %190 = add i64 %187, %189
  %191 = add i64 %190, 800
  %192 = load i32, i32* @ALIGN2, align 4
  %193 = sext i32 %192 to i64
  %194 = add i64 %191, %193
  %195 = add i64 %194, 32
  %196 = add i64 %195, 32412
  %197 = trunc i64 %196 to i32
  %198 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 0
  %199 = bitcast i8* %198 to i32*
  store i32 %197, i32* %199, align 1
  store i32 0, i32* %13, align 4
  br label %200

200:                                              ; preds = %211, %178
  %201 = load i32, i32* %13, align 4
  %202 = icmp slt i32 %201, 64
  br i1 %202, label %203, label %214

203:                                              ; preds = %200
  %204 = load i32, i32* %13, align 4
  %205 = and i32 %204, 3
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [8 x i8], [8 x i8]* %8, i64 0, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = load i8*, i8** %7, align 8
  %210 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %210, i8** %7, align 8
  store i8 %208, i8* %209, align 1
  br label %211

211:                                              ; preds = %203
  %212 = load i32, i32* %13, align 4
  %213 = add nsw i32 %212, 1
  store i32 %213, i32* %13, align 4
  br label %200

214:                                              ; preds = %200
  %215 = load i8*, i8** %6, align 8
  %216 = call i32 @run(i8* %215)
  %217 = load i32, i32* %3, align 4
  ret i32 %217
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @run(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
