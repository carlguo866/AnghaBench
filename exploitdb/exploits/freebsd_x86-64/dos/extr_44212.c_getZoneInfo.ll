; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86-64/dos/extr_44212.c_getZoneInfo.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86-64/dos/extr_44212.c_getZoneInfo.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"/usr/bin/vmstat -z\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"popen\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"%s %u, %u, %u, %u, %u, %u\0A\00", align 1
@INFO_SIZE = common dso_local global i64 0, align 8
@INFO_LIMIT = common dso_local global i64 0, align 8
@INFO_USED = common dso_local global i64 0, align 8
@INFO_FREE = common dso_local global i64 0, align 8
@INFO_REQ = common dso_local global i64 0, align 8
@INFO_FAIL = common dso_local global i64 0, align 8
@BUF_SIZE = common dso_local global i32 0, align 4
@LINE_SIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getZoneInfo(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [6 x i32], align 16
  %6 = alloca i32*, align 8
  %7 = alloca [256 x i8], align 16
  %8 = alloca [56 x i8], align 16
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %9 = bitcast [6 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 24, i1 false)
  store i32* null, i32** %6, align 8
  %10 = call i32* @popen(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %10, i32** %6, align 8
  %11 = load i32*, i32** %6, align 8
  %12 = icmp eq i32* %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %15 = call i32 @exit(i32 1) #4
  unreachable

16:                                               ; preds = %2
  %17 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %18 = call i32 @memset(i8* %17, i32 0, i32 256)
  %19 = getelementptr inbounds [56 x i8], [56 x i8]* %8, i64 0, i64 0
  %20 = call i32 @memset(i8* %19, i32 0, i32 56)
  br label %21

21:                                               ; preds = %56, %16
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %23 = load i32*, i32** %6, align 8
  %24 = call i32* @fgets(i8* %22, i32 255, i32* %23)
  %25 = icmp ne i32* %24, null
  br i1 %25, label %26, label %57

26:                                               ; preds = %21
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  %28 = getelementptr inbounds [56 x i8], [56 x i8]* %8, i64 0, i64 0
  %29 = load i64, i64* @INFO_SIZE, align 8
  %30 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %29
  %31 = load i64, i64* @INFO_LIMIT, align 8
  %32 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %31
  %33 = load i64, i64* @INFO_USED, align 8
  %34 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %33
  %35 = load i64, i64* @INFO_FREE, align 8
  %36 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %35
  %37 = load i64, i64* @INFO_REQ, align 8
  %38 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %37
  %39 = load i64, i64* @INFO_FAIL, align 8
  %40 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %39
  %41 = call i32 @sscanf(i8* %27, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %28, i32* %30, i32* %32, i32* %34, i32* %36, i32* %38, i32* %40)
  %42 = getelementptr inbounds [56 x i8], [56 x i8]* %8, i64 0, i64 0
  %43 = load i8*, i8** %3, align 8
  %44 = load i8*, i8** %3, align 8
  %45 = call i64 @strlen(i8* %44)
  %46 = call i64 @strncmp(i8* %42, i8* %43, i64 %45)
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %26
  %49 = load i8*, i8** %3, align 8
  %50 = call i64 @strlen(i8* %49)
  %51 = getelementptr inbounds [56 x i8], [56 x i8]* %8, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 58
  br i1 %54, label %55, label %56

55:                                               ; preds = %48
  br label %57

56:                                               ; preds = %48, %26
  br label %21

57:                                               ; preds = %55, %21
  %58 = load i32*, i32** %6, align 8
  %59 = call i32 @pclose(i32* %58)
  %60 = load i32, i32* %4, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  ret i32 %63
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32* @popen(i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32* @fgets(i8*, i32, i32*) #2

declare dso_local i32 @sscanf(i8*, i8*, i8*, i32*, i32*, i32*, i32*, i32*, i32*) #2

declare dso_local i64 @strncmp(i8*, i8*, i64) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @pclose(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
