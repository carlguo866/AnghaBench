; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20817.c_scan.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20817.c_scan.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [43 x i8] c"Error occured when I try to create socket\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"sock:\00", align 1
@PORTA = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [38 x i8] c"I can't connect to %s..is it online?\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"connect: \00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Ok..I'm sending the string...\00", align 1
@.str.5 = private unnamed_addr constant [77 x i8] c"The server %s is vulnerable...i think that you have to install a patch! :)\0A\0A\00", align 1
@z = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [33 x i8] c"| The server %s is vulnerable.!\0A\00", align 1
@.str.7 = private unnamed_addr constant [59 x i8] c"I'm sorry: the server %s is not vulnerable..change target\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"| I'm sorry:the server %s is not vulnerable.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @scan(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_in, align 4
  %6 = alloca [50 x i8], align 16
  %7 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i32 0, i32* %7, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = call i32 @socket(i32 %8, i32 %9, i32 0)
  store i32 %10, i32* %3, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  br label %15

15:                                               ; preds = %12, %1
  %16 = load i32, i32* @AF_INET, align 4
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 2
  store i32 %16, i32* %17, align 4
  %18 = load i32, i32* @PORTA, align 4
  %19 = call i32 @htons(i32 %18)
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i8*, i8** %2, align 8
  %22 = call i32 @inet_addr(i8* %21)
  %23 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %5, i32 0, i32 0
  %24 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = load i32, i32* %3, align 4
  %26 = bitcast %struct.sockaddr_in* %5 to %struct.sockaddr*
  %27 = call i64 @connect(i32 %25, %struct.sockaddr* %26, i32 12)
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %15
  %30 = load i8*, i8** %2, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i8* %30)
  %32 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  br label %33

33:                                               ; preds = %29, %15
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %35 = load i32, i32* %3, align 4
  %36 = call i32 @result(i32 %35)
  store i32 %36, i32* %4, align 4
  %37 = load i32, i32* %4, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %62

39:                                               ; preds = %33
  %40 = load i8*, i8** %2, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.5, i64 0, i64 0), i8* %40)
  %42 = load i64, i64* @z, align 8
  %43 = icmp sgt i64 %42, 0
  br i1 %43, label %44, label %61

44:                                               ; preds = %39
  %45 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %46 = load i8*, i8** %2, align 8
  %47 = call i32 @sprintf(i8* %45, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %46)
  %48 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %49 = call i32 @write_file(i8* %48)
  store i32 0, i32* %7, align 4
  br label %50

50:                                               ; preds = %57, %44
  %51 = load i32, i32* %7, align 4
  %52 = icmp slt i32 %51, 50
  br i1 %52, label %53, label %60

53:                                               ; preds = %50
  %54 = load i32, i32* %7, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 %55
  store i8 0, i8* %56, align 1
  br label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %7, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %7, align 4
  br label %50

60:                                               ; preds = %50
  br label %61

61:                                               ; preds = %60, %39
  br label %85

62:                                               ; preds = %33
  %63 = load i8*, i8** %2, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.7, i64 0, i64 0), i8* %63)
  %65 = load i64, i64* @z, align 8
  %66 = icmp sgt i64 %65, 0
  br i1 %66, label %67, label %84

67:                                               ; preds = %62
  %68 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %69 = load i8*, i8** %2, align 8
  %70 = call i32 @sprintf(i8* %68, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i64 0, i64 0), i8* %69)
  %71 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %72 = call i32 @write_file(i8* %71)
  store i32 0, i32* %7, align 4
  br label %73

73:                                               ; preds = %80, %67
  %74 = load i32, i32* %7, align 4
  %75 = icmp slt i32 %74, 50
  br i1 %75, label %76, label %83

76:                                               ; preds = %73
  %77 = load i32, i32* %7, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 %78
  store i8 0, i8* %79, align 1
  br label %80

80:                                               ; preds = %76
  %81 = load i32, i32* %7, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %7, align 4
  br label %73

83:                                               ; preds = %73
  br label %84

84:                                               ; preds = %83, %62
  br label %85

85:                                               ; preds = %84, %61
  %86 = call i32 @sleep(i32 1)
  %87 = load i32, i32* %3, align 4
  %88 = call i32 @close(i32 %87)
  ret void
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @result(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write_file(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
