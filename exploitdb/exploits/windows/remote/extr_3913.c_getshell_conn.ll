; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3913.c_getshell_conn.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3913.c_getshell_conn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [34 x i8] c"getshell_conn(): socket() failed.\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"getshell_conn(): couldn't resolve.\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@sig_alarm = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] attempting to connect: %s:%d.\0A\00", align 1
@TIMEOUT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"[!] connection failed: %s:%d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"[*] successfully connected: %s:%d.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getshell_conn(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  store i32 0, i32* %5, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = load i32, i32* @IPPROTO_TCP, align 4
  %11 = call i32 @socket(i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %5, align 4
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32 @printe(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 1)
  br label %15

15:                                               ; preds = %13, %2
  %16 = load i32, i32* @AF_INET, align 4
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %16, i32* %17, align 4
  %18 = load i8*, i8** %3, align 8
  %19 = call i32 @inet_addr(i8* %18)
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = icmp ne i32 %19, 0
  br i1 %22, label %23, label %37

23:                                               ; preds = %15
  %24 = load i8*, i8** %3, align 8
  %25 = call %struct.hostent* @gethostbyname(i8* %24)
  store %struct.hostent* %25, %struct.hostent** %6, align 8
  %26 = icmp ne %struct.hostent* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = call i32 @printe(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 1)
  br label %29

29:                                               ; preds = %27, %23
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %31 = bitcast %struct.TYPE_2__* %30 to i8*
  %32 = load %struct.hostent*, %struct.hostent** %6, align 8
  %33 = getelementptr inbounds %struct.hostent, %struct.hostent* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = inttoptr i64 %34 to i8*
  %36 = call i32 @memcpy(i8* %31, i8* %35, i32 4)
  br label %37

37:                                               ; preds = %29, %15
  %38 = load i16, i16* %4, align 2
  %39 = call i32 @htons(i16 zeroext %38)
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %39, i32* %40, align 4
  %41 = load i32, i32* @SIGALRM, align 4
  %42 = load i32, i32* @sig_alarm, align 4
  %43 = call i32 @signal(i32 %41, i32 %42)
  %44 = load i8*, i8** %3, align 8
  %45 = load i16, i16* %4, align 2
  %46 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i8* %44, i16 zeroext %45)
  %47 = load i32, i32* @TIMEOUT, align 4
  %48 = call i32 @alarm(i32 %47)
  %49 = load i32, i32* %5, align 4
  %50 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %51 = call i64 @connect(i32 %49, %struct.sockaddr* %50, i32 12)
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %37
  %54 = load i8*, i8** %3, align 8
  %55 = load i16, i16* %4, align 2
  %56 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %54, i16 zeroext %55)
  %57 = call i32 @exit(i32 1) #3
  unreachable

58:                                               ; preds = %37
  %59 = call i32 @alarm(i32 0)
  %60 = load i8*, i8** %3, align 8
  %61 = load i16, i16* %4, align 2
  %62 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* %60, i16 zeroext %61)
  %63 = load i32, i32* %5, align 4
  ret i32 %63
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printe(i8*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @printf(i8*, i8*, i16 zeroext) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
