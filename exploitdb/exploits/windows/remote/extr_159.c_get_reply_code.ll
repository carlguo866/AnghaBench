; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_159.c_get_reply_code.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_159.c_get_reply_code.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXLINE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"[-] Could not get status code\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"[-] Weird reply\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"[-] Could not get next line\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_reply_code(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca [4 x i8], align 1
  store i32 %0, i32* %3, align 4
  %10 = load i32, i32* @MAXLINE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %4, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %5, align 8
  %14 = load i32, i32* %3, align 4
  %15 = trunc i64 %11 to i32
  %16 = call i32 @get_line(i32 %14, i8* %13, i32 %15)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %1
  %19 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %6, align 4
  br label %64

20:                                               ; preds = %1
  %21 = getelementptr inbounds i8, i8* %13, i64 3
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %7, align 1
  %23 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 0, i8* %23, align 1
  %24 = load i8, i8* %7, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = load i8, i8* %7, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 45
  br i1 %30, label %31, label %37

31:                                               ; preds = %27, %20
  %32 = call i32 @strlen(i8* %13)
  %33 = icmp ne i32 %32, 3
  br i1 %33, label %37, label %34

34:                                               ; preds = %31
  %35 = call i32 @atoi(i8* %13)
  store i32 %35, i32* %8, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %34, %31, %27
  %38 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %6, align 4
  br label %64

39:                                               ; preds = %34
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %41 = call i32 @memcpy(i8* %40, i8* %13, i32 3)
  %42 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3
  store i8 32, i8* %42, align 1
  %43 = load i8, i8* %7, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp eq i32 %44, 45
  br i1 %45, label %46, label %62

46:                                               ; preds = %39
  br label %47

47:                                               ; preds = %60, %46
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %3, align 4
  %50 = trunc i64 %11 to i32
  %51 = call i32 @get_line(i32 %49, i8* %13, i32 %50)
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  %54 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  store i32 1, i32* %6, align 4
  br label %64

55:                                               ; preds = %48
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 0
  %57 = call i32 @memcmp(i8* %13, i8* %56, i32 4)
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  br label %61

60:                                               ; preds = %55
  br label %47

61:                                               ; preds = %59
  br label %62

62:                                               ; preds = %61, %39
  %63 = load i32, i32* %8, align 4
  store i32 %63, i32* %2, align 4
  store i32 1, i32* %6, align 4
  br label %64

64:                                               ; preds = %62, %53, %37, %18
  %65 = load i8*, i8** %4, align 8
  call void @llvm.stackrestore(i8* %65)
  %66 = load i32, i32* %2, align 4
  ret i32 %66
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @get_line(i32, i8*, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @memcmp(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
