; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_159.c_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_159.c_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"[+] Logging in...\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"[-] Failed to log in #1\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"PASS \00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"[-] Failed to log in #2\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[-] Failed to log in. Code %3u\0A\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"[+] Logged in\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @login(i32 %0, i8* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* %5, align 4
  %11 = call i32 @ignorerd(i32 %10)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %30

13:                                               ; preds = %3
  %14 = load i32, i32* %5, align 4
  %15 = call i32 @sends(i32 %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 0)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %30

17:                                               ; preds = %13
  %18 = load i32, i32* %5, align 4
  %19 = load i8*, i8** %6, align 8
  %20 = call i32 @sends(i32 %18, i8* %19, i32 0)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %17
  %23 = load i32, i32* %5, align 4
  %24 = call i32 @sends(i32 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 0)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  %27 = load i32, i32* %5, align 4
  %28 = call i32 @get_reply_code(i32 %27)
  store i32 %28, i32* %8, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %26, %22, %17, %13, %3
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %63

32:                                               ; preds = %26
  %33 = load i32, i32* %8, align 4
  %34 = icmp eq i32 %33, 331
  br i1 %34, label %35, label %55

35:                                               ; preds = %32
  %36 = load i32, i32* %5, align 4
  %37 = call i32 @sends(i32 %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 0)
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %52

39:                                               ; preds = %35
  %40 = load i32, i32* %5, align 4
  %41 = load i8*, i8** %7, align 8
  %42 = call i32 @sends(i32 %40, i8* %41, i32 0)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %52

44:                                               ; preds = %39
  %45 = load i32, i32* %5, align 4
  %46 = call i32 @sends(i32 %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 0)
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load i32, i32* %5, align 4
  %50 = call i32 @get_reply_code(i32 %49)
  store i32 %50, i32* %8, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48, %44, %39, %35
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %4, align 4
  br label %63

54:                                               ; preds = %48
  br label %55

55:                                               ; preds = %54, %32
  %56 = load i32, i32* %8, align 4
  %57 = icmp ne i32 %56, 230
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = load i32, i32* %8, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 %59)
  store i32 0, i32* %4, align 4
  br label %63

61:                                               ; preds = %55
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0))
  store i32 1, i32* %4, align 4
  br label %63

63:                                               ; preds = %61, %58, %52, %30
  %64 = load i32, i32* %4, align 4
  ret i32 %64
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @ignorerd(i32) #1

declare dso_local i32 @sends(i32, i8*, i32) #1

declare dso_local i32 @get_reply_code(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
