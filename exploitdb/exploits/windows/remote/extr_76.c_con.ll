; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_76.c_con.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_76.c_con.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FD_SETSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"[-] Connection lost..\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"[-] Connection closed by foreign host..\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @con(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1500 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = call i32 @FD_ZERO(i32* %4)
  %7 = load i32, i32* %2, align 4
  %8 = call i32 @FD_SET(i32 %7, i32* %4)
  %9 = call i32 @FD_SET(i32 0, i32* %4)
  br label %10

10:                                               ; preds = %1, %55
  %11 = load i32, i32* %2, align 4
  %12 = call i32 @FD_SET(i32 %11, i32* %4)
  %13 = call i32 @FD_SET(i32 0, i32* %4)
  %14 = load i32, i32* @FD_SETSIZE, align 4
  %15 = call i64 @select(i32 %14, i32* %4, i32* null, i32* null, i32* null)
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %10
  br label %57

18:                                               ; preds = %10
  %19 = load i32, i32* %2, align 4
  %20 = call i64 @FD_ISSET(i32 %19, i32* %4)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %37

22:                                               ; preds = %18
  %23 = load i32, i32* %2, align 4
  %24 = getelementptr inbounds [1500 x i8], [1500 x i8]* %3, i64 0, i64 0
  %25 = call i32 @recv(i32 %23, i8* %24, i32 1500, i32 0)
  store i32 %25, i32* %5, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %22
  %31 = getelementptr inbounds [1500 x i8], [1500 x i8]* %3, i64 0, i64 0
  %32 = load i32, i32* %5, align 4
  %33 = call i64 @write(i32 1, i8* %31, i32 %32)
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %30
  br label %57

36:                                               ; preds = %30
  br label %37

37:                                               ; preds = %36, %18
  %38 = call i64 @FD_ISSET(i32 0, i32* %4)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %37
  %41 = getelementptr inbounds [1500 x i8], [1500 x i8]* %3, i64 0, i64 0
  %42 = call i32 @read(i32 0, i8* %41, i32 1500)
  store i32 %42, i32* %5, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %40
  %45 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %46 = call i32 @exit(i32 1) #3
  unreachable

47:                                               ; preds = %40
  %48 = load i32, i32* %2, align 4
  %49 = getelementptr inbounds [1500 x i8], [1500 x i8]* %3, i64 0, i64 0
  %50 = load i32, i32* %5, align 4
  %51 = call i64 @send(i32 %48, i8* %49, i32 %50, i32 0)
  %52 = icmp slt i64 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %47
  br label %57

54:                                               ; preds = %47
  br label %55

55:                                               ; preds = %54, %37
  %56 = call i32 @usleep(i32 10000)
  br label %10

57:                                               ; preds = %53, %35, %17
  %58 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %59 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
