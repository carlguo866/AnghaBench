; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_97.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_97.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i32 }

@program_name = common dso_local global i8* null, align 8
@verbose = common dso_local global i32 0, align 4
@d_dcom_scan_timeout = common dso_local global i32 0, align 4
@dcom_scan_timeout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"vqt:h\00", align 1
@optarg = common dso_local global i32 0, align 4
@optind = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"%d.%d.%d.%d/%d\00", align 1
@AF_INET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %16, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** @program_name, align 8
  store i32 1, i32* @verbose, align 4
  %21 = load i32, i32* @d_dcom_scan_timeout, align 4
  store i32 %21, i32* @dcom_scan_timeout, align 4
  br label %22

22:                                               ; preds = %40, %2
  %23 = load i32, i32* %4, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = call i32 @getopt(i32 %23, i8** %24, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 %25, i32* %8, align 4
  %26 = icmp sge i32 %25, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %22
  %28 = load i32, i32* %8, align 4
  switch i32 %28, label %38 [
    i32 118, label %29
    i32 113, label %32
    i32 116, label %33
    i32 104, label %36
  ]

29:                                               ; preds = %27
  %30 = load i32, i32* @verbose, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* @verbose, align 4
  br label %40

32:                                               ; preds = %27
  store i32 0, i32* @verbose, align 4
  br label %40

33:                                               ; preds = %27
  %34 = load i32, i32* @optarg, align 4
  %35 = call i32 @atoi(i32 %34)
  store i32 %35, i32* @dcom_scan_timeout, align 4
  br label %40

36:                                               ; preds = %27
  %37 = call i32 @usage(i32 0)
  br label %40

38:                                               ; preds = %27
  %39 = call i32 @usage(i32 -1)
  br label %40

40:                                               ; preds = %38, %36, %33, %32, %29
  br label %22

41:                                               ; preds = %22
  %42 = load i32, i32* @optind, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp sge i32 %42, %43
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = load i8**, i8*** %5, align 8
  %47 = load i32, i32* @optind, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8*, i8** %46, i64 %48
  %50 = load i8*, i8** %49, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %45, %41
  %53 = call i32 @usage(i32 -1)
  br label %54

54:                                               ; preds = %52, %45
  %55 = load i8**, i8*** %5, align 8
  %56 = load i32, i32* @optind, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8*, i8** %55, i64 %57
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @sscanf(i8* %59, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32* %6, i32* %7, i32* %8, i32* %9, i32* %10)
  store i32 %60, i32* %16, align 4
  %61 = load i32, i32* %16, align 4
  %62 = icmp eq i32 %61, 5
  br i1 %62, label %63, label %113

63:                                               ; preds = %54
  %64 = load i32, i32* %10, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %63
  %67 = load i32, i32* %10, align 4
  %68 = icmp slt i32 32, %67
  br i1 %68, label %69, label %71

69:                                               ; preds = %66, %63
  %70 = call i32 @usage(i32 -1)
  br label %71

71:                                               ; preds = %69, %66
  store i32 0, i32* %16, align 4
  %72 = load i32, i32* %10, align 4
  %73 = sub nsw i32 32, %72
  %74 = shl i32 -1, %73
  store i32 %74, i32* %11, align 4
  %75 = load i32, i32* %6, align 4
  %76 = shl i32 %75, 24
  %77 = load i32, i32* %7, align 4
  %78 = shl i32 %77, 16
  %79 = or i32 %76, %78
  %80 = load i32, i32* %8, align 4
  %81 = shl i32 %80, 8
  %82 = or i32 %79, %81
  %83 = load i32, i32* %9, align 4
  %84 = or i32 %82, %83
  %85 = load i32, i32* %11, align 4
  %86 = and i32 %84, %85
  store i32 %86, i32* %12, align 4
  %87 = load i32, i32* %12, align 4
  %88 = load i32, i32* %11, align 4
  %89 = xor i32 %88, -1
  %90 = or i32 %87, %89
  store i32 %90, i32* %13, align 4
  %91 = load i32, i32* %12, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %14, align 4
  br label %93

93:                                               ; preds = %109, %71
  %94 = load i32, i32* %14, align 4
  %95 = load i32, i32* %13, align 4
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %97, label %112

97:                                               ; preds = %93
  %98 = load i32, i32* %14, align 4
  %99 = call i32 @htonl(i32 %98)
  store i32 %99, i32* %15, align 4
  %100 = load i32, i32* %15, align 4
  %101 = call i32 @dcom2_scan(i32 %100)
  store i32 %101, i32* %17, align 4
  %102 = load i32, i32* %17, align 4
  %103 = icmp eq i32 %102, 3
  br i1 %103, label %107, label %104

104:                                              ; preds = %97
  %105 = load i32, i32* %17, align 4
  %106 = icmp eq i32 %105, 4
  br i1 %106, label %107, label %108

107:                                              ; preds = %104, %97
  store i32 4, i32* %16, align 4
  br label %108

108:                                              ; preds = %107, %104
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %14, align 4
  %111 = add i32 %110, 1
  store i32 %111, i32* %14, align 4
  br label %93

112:                                              ; preds = %93
  br label %130

113:                                              ; preds = %54
  %114 = load i32, i32* %16, align 4
  %115 = icmp eq i32 %114, 4
  br i1 %115, label %116, label %127

116:                                              ; preds = %113
  %117 = load i32, i32* @AF_INET, align 4
  %118 = load i8**, i8*** %5, align 8
  %119 = load i32, i32* @optind, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8*, i8** %118, i64 %120
  %122 = load i8*, i8** %121, align 8
  %123 = bitcast i32* %15 to %struct.in_addr*
  %124 = call i32 @inet_pton(i32 %117, i8* %122, %struct.in_addr* %123)
  %125 = load i32, i32* %15, align 4
  %126 = call i32 @dcom2_scan(i32 %125)
  store i32 %126, i32* %16, align 4
  br label %129

127:                                              ; preds = %113
  %128 = call i32 @usage(i32 -1)
  br label %129

129:                                              ; preds = %127, %116
  br label %130

130:                                              ; preds = %129, %112
  %131 = load i32, i32* %16, align 4
  ret i32 %131
}

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @usage(i32) #1

declare dso_local i32 @sscanf(i8*, i8*, i32*, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @dcom2_scan(i32) #1

declare dso_local i32 @inet_pton(i32, i8*, %struct.in_addr*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
