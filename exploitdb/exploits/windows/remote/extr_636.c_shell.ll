; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_636.c_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_636.c_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"Connection closed.\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"read remote\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"read user\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @shell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  br label %6

6:                                                ; preds = %1, %57
  %7 = load i32, i32* %2, align 4
  %8 = call i32 @FD_SET(i32 %7, i32* %3)
  %9 = call i32 @FD_SET(i32 0, i32* %3)
  %10 = load i32, i32* %2, align 4
  %11 = add nsw i32 %10, 1
  %12 = call i64 @select(i32 %11, i32* %3, i32* null, i32* null, i32* null)
  %13 = icmp slt i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  br label %58

15:                                               ; preds = %6
  %16 = load i32, i32* %2, align 4
  %17 = call i64 @FD_ISSET(i32 %16, i32* %3)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %41

19:                                               ; preds = %15
  %20 = load i32, i32* %2, align 4
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %22 = call i32 @read(i32 %20, i8* %21, i32 1024)
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %19
  %26 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* @EXIT_FAILURE, align 4
  %28 = call i32 @exit(i32 %27) #3
  unreachable

29:                                               ; preds = %19
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %29
  %33 = call i32 @perror(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %34 = load i32, i32* @EXIT_FAILURE, align 4
  %35 = call i32 @exit(i32 %34) #3
  unreachable

36:                                               ; preds = %29
  br label %37

37:                                               ; preds = %36
  %38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %39 = load i32, i32* %5, align 4
  %40 = call i32 @write(i32 1, i8* %38, i32 %39)
  br label %41

41:                                               ; preds = %37, %15
  %42 = call i64 @FD_ISSET(i32 0, i32* %3)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %57

44:                                               ; preds = %41
  %45 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %46 = call i32 @read(i32 0, i8* %45, i32 1024)
  store i32 %46, i32* %5, align 4
  %47 = icmp sle i32 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %50 = load i32, i32* @EXIT_FAILURE, align 4
  %51 = call i32 @exit(i32 %50) #3
  unreachable

52:                                               ; preds = %44
  %53 = load i32, i32* %2, align 4
  %54 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %55 = load i32, i32* %5, align 4
  %56 = call i32 @write(i32 %53, i8* %54, i32 %55)
  br label %57

57:                                               ; preds = %52, %41
  br label %6

58:                                               ; preds = %14
  %59 = load i32, i32* %2, align 4
  %60 = call i32 @close(i32 %59)
  ret void
}

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
