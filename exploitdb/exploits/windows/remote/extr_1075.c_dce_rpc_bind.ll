; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1075.c_dce_rpc_bind.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1075.c_dce_rpc_bind.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i32, i32, i32, i64, i64 }
%struct.TYPE_4__ = type { i32, i32, i32, i16, i64, i64, i32, i64 }

@__const.dce_rpc_bind.vuid = private unnamed_addr constant [37 x i8] c"8a885d04-1ceb-11c9-9fe8-08002b104860\00", align 16
@_DCE_RPC_BIND = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @dce_rpc_bind(i64 %0, i8* %1, i16 zeroext %2, i64* %3) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16, align 2
  %8 = alloca i64*, align 8
  %9 = alloca [37 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i16, align 2
  %15 = alloca %struct.TYPE_3__*, align 8
  %16 = alloca %struct.TYPE_4__*, align 8
  store i64 %0, i64* %5, align 8
  store i8* %1, i8** %6, align 8
  store i16 %2, i16* %7, align 2
  store i64* %3, i64** %8, align 8
  %17 = bitcast [37 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.dce_rpc_bind.vuid, i32 0, i32 0), i64 37, i1 false)
  %18 = call i64 @calloc(i32 2048, i32 1)
  %19 = inttoptr i64 %18 to i8*
  store i8* %19, i8** %10, align 8
  %20 = load i8*, i8** %6, align 8
  %21 = call i32 @strlen(i8* %20)
  %22 = sdiv i32 %21, 2
  %23 = add nsw i32 %22, 2
  %24 = call i64 @calloc(i32 %23, i32 1)
  %25 = inttoptr i64 %24 to i8*
  store i8* %25, i8** %11, align 8
  %26 = load i8*, i8** %10, align 8
  store i8* %26, i8** %12, align 8
  %27 = load i8*, i8** %10, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 4
  store i8* %28, i8** %10, align 8
  %29 = load i8*, i8** %10, align 8
  %30 = bitcast i8* %29 to %struct.TYPE_3__*
  store %struct.TYPE_3__* %30, %struct.TYPE_3__** %15, align 8
  %31 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %32 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %31, i32 0, i32 0
  store i32 5840, i32* %32, align 8
  %33 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %34 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %33, i32 0, i32 1
  store i32 5840, i32* %34, align 4
  %35 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %36 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %35, i32 0, i32 5
  store i64 0, i64* %36, align 8
  %37 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %38 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %37, i32 0, i32 2
  store i32 1, i32* %38, align 8
  %39 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %40 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %39, i32 0, i32 4
  store i64 0, i64* %40, align 8
  %41 = load %struct.TYPE_3__*, %struct.TYPE_3__** %15, align 8
  %42 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %41, i32 0, i32 3
  store i32 1, i32* %42, align 4
  %43 = load i8*, i8** %10, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 4
  store i8* %44, i8** %10, align 8
  %45 = load i8*, i8** %6, align 8
  %46 = load i8*, i8** %10, align 8
  %47 = call i64 @encode_uuid(i8* %45, i8* %46)
  store i64 %47, i64* %13, align 8
  %48 = load i64, i64* %13, align 8
  %49 = load i8*, i8** %10, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %48
  store i8* %50, i8** %10, align 8
  %51 = load i8*, i8** %10, align 8
  %52 = call i32 @memcpy(i8* %51, i16* %7, i32 2)
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  store i8* %54, i8** %10, align 8
  %55 = load i8*, i8** %10, align 8
  %56 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %56, i8** %10, align 8
  store i8 0, i8* %55, align 1
  %57 = load i8*, i8** %10, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %10, align 8
  store i8 0, i8* %57, align 1
  %59 = getelementptr inbounds [37 x i8], [37 x i8]* %9, i64 0, i64 0
  %60 = load i8*, i8** %10, align 8
  %61 = call i64 @encode_uuid(i8* %59, i8* %60)
  store i64 %61, i64* %13, align 8
  %62 = load i64, i64* %13, align 8
  %63 = load i8*, i8** %10, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 %62
  store i8* %64, i8** %10, align 8
  %65 = load i8*, i8** %10, align 8
  %66 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %66, i8** %10, align 8
  store i8 2, i8* %65, align 1
  %67 = load i8*, i8** %10, align 8
  %68 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %68, i8** %10, align 8
  store i8 0, i8* %67, align 1
  %69 = load i8*, i8** %10, align 8
  %70 = load i8*, i8** %12, align 8
  %71 = ptrtoint i8* %69 to i64
  %72 = ptrtoint i8* %70 to i64
  %73 = sub i64 %71, %72
  %74 = trunc i64 %73 to i16
  store i16 %74, i16* %14, align 2
  %75 = load i8*, i8** %12, align 8
  %76 = bitcast i8* %75 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %76, %struct.TYPE_4__** %16, align 8
  %77 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %78 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %77, i32 0, i32 0
  store i32 5, i32* %78, align 8
  %79 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %80 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %79, i32 0, i32 7
  store i64 0, i64* %80, align 8
  %81 = load i32, i32* @_DCE_RPC_BIND, align 4
  %82 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %83 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %82, i32 0, i32 6
  store i32 %81, i32* %83, align 8
  %84 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %85 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %84, i32 0, i32 1
  store i32 3, i32* %85, align 4
  %86 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %87 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %86, i32 0, i32 2
  store i32 16, i32* %87, align 8
  %88 = load i16, i16* %14, align 2
  %89 = zext i16 %88 to i32
  %90 = add nsw i32 %89, 2
  %91 = trunc i32 %90 to i16
  %92 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %93 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %92, i32 0, i32 3
  store i16 %91, i16* %93, align 4
  %94 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %95 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %94, i32 0, i32 5
  store i64 0, i64* %95, align 8
  %96 = load i64, i64* %5, align 8
  %97 = load %struct.TYPE_4__*, %struct.TYPE_4__** %16, align 8
  %98 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %97, i32 0, i32 4
  store i64 %96, i64* %98, align 8
  %99 = load i16, i16* %14, align 2
  %100 = zext i16 %99 to i32
  %101 = add nsw i32 %100, 2
  %102 = sext i32 %101 to i64
  %103 = load i64*, i64** %8, align 8
  store i64 %102, i64* %103, align 8
  %104 = load i8*, i8** %11, align 8
  %105 = call i32 @free(i8* %104)
  %106 = load i8*, i8** %12, align 8
  ret i8* %106
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @calloc(i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @encode_uuid(i8*, i8*) #2

declare dso_local i32 @memcpy(i8*, i16*, i32) #2

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
