; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_158.c_ftp_login.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_158.c_ftp_login.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_LEN = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [21 x i8] c"# Connecting...... \0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"[-] failed. \0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"220\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"[+] Connected. \0A\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"[*] USER %s .\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"[*] %d bytes send. \0A\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"331\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"[-] user failed. \0A%s\0A\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"[*] PASS %s .\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"230\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"[-] pass failed. \0A%s\0A\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"[+] login success .\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ftp_login(i8* %0, i16 signext %1, i8* %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i16, align 2
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i16 %1, i16* %7, align 2
  store i8* %2, i8** %8, align 8
  store i8* %3, i8** %9, align 8
  %15 = load i32, i32* @MAX_LEN, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %12, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %13, align 8
  %19 = load i32, i32* @stderr, align 4
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %21 = load i8*, i8** %6, align 8
  %22 = load i16, i16* %7, align 2
  %23 = call i32 @new_tcpConnect(i8* %21, i16 signext %22, i32 4000)
  store i32 %23, i32* %11, align 4
  %24 = icmp sle i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %4
  %26 = load i32, i32* @stderr, align 4
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %5, align 4
  store i32 1, i32* %14, align 4
  br label %96

28:                                               ; preds = %4
  %29 = call i32 @clearbit(i8* %18)
  %30 = load i32, i32* %11, align 4
  %31 = sub i64 %16, 1
  %32 = trunc i64 %31 to i32
  %33 = call i32 @new_recv(i32 %30, i8* %18, i32 %32)
  %34 = call i32 @strstr(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %28
  %37 = load i32, i32* @stderr, align 4
  %38 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %5, align 4
  store i32 1, i32* %14, align 4
  br label %96

39:                                               ; preds = %28
  %40 = load i32, i32* @stderr, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %40, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %42 = call i32 @sleep(i32 1)
  %43 = load i32, i32* @stderr, align 4
  %44 = load i8*, i8** %8, align 8
  %45 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* %44)
  %46 = call i32 @clearbit(i8* %18)
  %47 = trunc i64 %16 to i32
  %48 = load i8*, i8** %8, align 8
  %49 = call i32 @snprintf(i8* %18, i32 %47, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* %48)
  %50 = load i32, i32* %11, align 4
  %51 = call i32 @strlen(i8* %18)
  %52 = call i32 @new_send(i32 %50, i8* %18, i32 %51)
  store i32 %52, i32* %10, align 4
  %53 = load i32, i32* @stderr, align 4
  %54 = load i32, i32* %10, align 4
  %55 = call i32 (i32, i8*, ...) @fprintf(i32 %53, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %54)
  %56 = call i32 @sleep(i32 1)
  %57 = call i32 @clearbit(i8* %18)
  %58 = load i32, i32* %11, align 4
  %59 = sub i64 %16, 1
  %60 = trunc i64 %59 to i32
  %61 = call i32 @new_recv(i32 %58, i8* %18, i32 %60)
  %62 = call i32 @strstr(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %39
  %65 = load i32, i32* @stderr, align 4
  %66 = call i32 (i32, i8*, ...) @fprintf(i32 %65, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* %18)
  store i32 -1, i32* %5, align 4
  store i32 1, i32* %14, align 4
  br label %96

67:                                               ; preds = %39
  %68 = load i32, i32* @stderr, align 4
  %69 = load i8*, i8** %9, align 8
  %70 = call i32 (i32, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %69)
  %71 = call i32 @clearbit(i8* %18)
  %72 = trunc i64 %16 to i32
  %73 = load i8*, i8** %9, align 8
  %74 = call i32 @snprintf(i8* %18, i32 %72, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* %73)
  %75 = load i32, i32* %11, align 4
  %76 = call i32 @strlen(i8* %18)
  %77 = call i32 @new_send(i32 %75, i8* %18, i32 %76)
  store i32 %77, i32* %10, align 4
  %78 = load i32, i32* @stderr, align 4
  %79 = load i32, i32* %10, align 4
  %80 = call i32 (i32, i8*, ...) @fprintf(i32 %78, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %79)
  %81 = call i32 @sleep(i32 1)
  %82 = call i32 @clearbit(i8* %18)
  %83 = load i32, i32* %11, align 4
  %84 = sub i64 %16, 1
  %85 = trunc i64 %84 to i32
  %86 = call i32 @new_recv(i32 %83, i8* %18, i32 %85)
  %87 = call i32 @strstr(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0))
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %67
  %90 = load i32, i32* @stderr, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* %18)
  store i32 -1, i32* %5, align 4
  store i32 1, i32* %14, align 4
  br label %96

92:                                               ; preds = %67
  %93 = load i32, i32* @stderr, align 4
  %94 = call i32 (i32, i8*, ...) @fprintf(i32 %93, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0))
  %95 = load i32, i32* %11, align 4
  store i32 %95, i32* %5, align 4
  store i32 1, i32* %14, align 4
  br label %96

96:                                               ; preds = %92, %89, %64, %36, %25
  %97 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %97)
  %98 = load i32, i32* %5, align 4
  ret i32 %98
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @new_tcpConnect(i8*, i16 signext, i32) #2

declare dso_local i32 @clearbit(i8*) #2

declare dso_local i32 @new_recv(i32, i8*, i32) #2

declare dso_local i32 @strstr(i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*) #2

declare dso_local i32 @new_send(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
